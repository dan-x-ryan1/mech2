

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri May 18 17:40:55 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1,inline
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1,inline
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1,inline
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1
   166                           	psect	text145,global,reloc=2,class=CODE,delta=1
   167                           	psect	text146,global,reloc=2,class=CODE,delta=1,inline
   168                           	psect	text147,global,reloc=2,class=CODE,delta=1
   169                           	psect	text148,global,reloc=2,class=CODE,delta=1
   170                           	psect	text149,global,reloc=2,class=CODE,delta=1
   171                           	psect	text150,global,reloc=2,class=CODE,delta=1
   172                           	psect	text151,global,reloc=2,class=CODE,delta=1
   173                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   174                           	psect	text152,global,reloc=2,class=CODE,delta=1
   175                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   176                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   177  0000                     
   178                           ; Version 1.44
   179                           ; Generated 14/09/2017 GMT
   180                           ; 
   181                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   182                           ; All rights reserved.
   183                           ; 
   184                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   185                           ; 
   186                           ; Redistribution and use in source and binary forms, with or without modification, are
   187                           ; permitted provided that the following conditions are met:
   188                           ; 
   189                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   190                           ;        conditions and the following disclaimer.
   191                           ; 
   192                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   193                           ;        of conditions and the following disclaimer in the documentation and/or other
   194                           ;        materials provided with the distribution.
   195                           ; 
   196                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   197                           ;        software without specific prior written permission.
   198                           ; 
   199                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   200                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   201                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   202                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   203                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   204                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   205                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   206                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   207                           ; 
   208                           ; 
   209                           ; Code-generator required, PIC18F67J50 Definitions
   210                           ; 
   211                           ; SFR Addresses
   212  0000                     
   213                           	psect	idataCOMRAM
   214  015B5C                     __pidataCOMRAM:
   215                           	opt stack 0
   216                           
   217                           ;initializer for _gCursor
   218  015B5C  0006               	dw	6
   219  015B5E  0006               	dw	6
   220                           
   221                           ;initializer for _top
   222  015B60  FFFF               	dw	65535
   223                           
   224                           ;initializer for _Bus_State
   225  015B62  01                 	db	1
   226                           
   227                           ;initializer for _change
   228  015B63  01                 	db	1
   229                           
   230                           ;initializer for _l
   231  015B64  80                 	db	128
   232                           
   233                           ;initializer for _w
   234  015B65  80                 	db	128
   235                           
   236                           	psect	idataBANK1
   237  015932                     __pidataBANK1:
   238                           	opt stack 0
   239                           
   240                           ;initializer for Console_Render@F6956
   241  015932  0006               	dw	6
   242  015934  0006               	dw	6
   243                           
   244                           ;initializer for _gLineSize
   245  015936  0080               	dw	128
   246  015938  0007               	dw	7
   247                           
   248                           ;initializer for _gCharSize
   249  01593A  0005               	dw	5
   250  01593C  0007               	dw	7
   251                           
   252                           ;initializer for _countOff
   253  01593E  00F8               	dw	248
   254                           
   255                           ;initializer for _countOn
   256  015940  007C               	dw	124
   257                           
   258                           ;initializer for _Low_Sensor
   259  015942  2710               	dw	10000
   260                           
   261                           ;initializer for _Spd
   262  015944  00C8               	dw	200
   263                           
   264                           ;initializer for _numReadings
   265  015946  000A               	dw	10
   266                           
   267                           ;initializer for _Current_Direction
   268  015948  0003               	dw	3
   269                           
   270                           ;initializer for _gForecolour
   271  01594A  FFFF               	dw	65535
   272                           
   273                           ;initializer for _A
   274  01594C  41                 	db	65
   275                           
   276                           ;initializer for _a
   277  01594D  61                 	db	97
   278                           
   279                           ;initializer for _zero
   280  01594E  30                 	db	48
   281                           
   282                           	psect	mediumconst
   283  00FB18                     __pmediumconst:
   284                           	opt stack 0
   285  00FB18  00                 	db	0
   286  00FB19                     _InitList:
   287                           	opt stack 0
   288  00FB19  1100               	dw	4352
   289  00FB1B  0080               	dw	128
   290  00FB1D  012C               	dw	300
   291  00FB1F  B100               	dw	45312
   292  00FB21  0002               	dw	2
   293  00FB23  0035               	dw	53
   294  00FB25  0036               	dw	54
   295  00FB27  B200               	dw	45568
   296  00FB29  0002               	dw	2
   297  00FB2B  0035               	dw	53
   298  00FB2D  0036               	dw	54
   299  00FB2F  B300               	dw	45824
   300  00FB31  0002               	dw	2
   301  00FB33  0035               	dw	53
   302  00FB35  0036               	dw	54
   303  00FB37  0002               	dw	2
   304  00FB39  0035               	dw	53
   305  00FB3B  0036               	dw	54
   306  00FB3D  B400               	dw	46080
   307  00FB3F  0000               	dw	0
   308  00FB41  C000               	dw	49152
   309  00FB43  00A2               	dw	162
   310  00FB45  0002               	dw	2
   311  00FB47  0084               	dw	132
   312  00FB49  C100               	dw	49408
   313  00FB4B  00C5               	dw	197
   314  00FB4D  C200               	dw	49664
   315  00FB4F  000D               	dw	13
   316  00FB51  0000               	dw	0
   317  00FB53  C300               	dw	49920
   318  00FB55  008D               	dw	141
   319  00FB57  002A               	dw	42
   320  00FB59  C400               	dw	50176
   321  00FB5B  008D               	dw	141
   322  00FB5D  00EE               	dw	238
   323  00FB5F  C500               	dw	50432
   324  00FB61  000A               	dw	10
   325  00FB63  3600               	dw	13824
   326  00FB65  00C8               	dw	200
   327  00FB67  E000               	dw	57344
   328  00FB69  0012               	dw	18
   329  00FB6B  001C               	dw	28
   330  00FB6D  0010               	dw	16
   331  00FB6F  0018               	dw	24
   332  00FB71  0033               	dw	51
   333  00FB73  002C               	dw	44
   334  00FB75  0025               	dw	37
   335  00FB77  0028               	dw	40
   336  00FB79  0028               	dw	40
   337  00FB7B  0027               	dw	39
   338  00FB7D  002F               	dw	47
   339  00FB7F  003C               	dw	60
   340  00FB81  0000               	dw	0
   341  00FB83  0003               	dw	3
   342  00FB85  0003               	dw	3
   343  00FB87  0010               	dw	16
   344  00FB89  0080               	dw	128
   345  00FB8B  0078               	dw	120
   346  00FB8D  E100               	dw	57600
   347  00FB8F  0012               	dw	18
   348  00FB91  001C               	dw	28
   349  00FB93  0010               	dw	16
   350  00FB95  0018               	dw	24
   351  00FB97  002D               	dw	45
   352  00FB99  0028               	dw	40
   353  00FB9B  0023               	dw	35
   354  00FB9D  0028               	dw	40
   355  00FB9F  0028               	dw	40
   356  00FBA1  0026               	dw	38
   357  00FBA3  002F               	dw	47
   358  00FBA5  003B               	dw	59
   359  00FBA7  0000               	dw	0
   360  00FBA9  0003               	dw	3
   361  00FBAB  0003               	dw	3
   362  00FBAD  0010               	dw	16
   363  00FBAF  3A00               	dw	14848
   364  00FBB1  0005               	dw	5
   365  00FBB3  2A00               	dw	10752
   366  00FBB5  0000               	dw	0
   367  00FBB7  0002               	dw	2
   368  00FBB9  0000               	dw	0
   369  00FBBB  0081               	dw	129
   370  00FBBD  2B00               	dw	11008
   371  00FBBF  0000               	dw	0
   372  00FBC1  0003               	dw	3
   373  00FBC3  0000               	dw	0
   374  00FBC5  00A2               	dw	162
   375  00FBC7  2900               	dw	10496
   376  00FBC9  2C00               	dw	11264
   377  00FBCB                     __end_of_InitList:
   378                           	opt stack 0
   379  00FBCB                     Timer0_Init@PRESCALE:
   380                           	opt stack 0
   381  00FBCB  0002               	dw	2
   382  00FBCD  0004               	dw	4
   383  00FBCF  0008               	dw	8
   384  00FBD1  0010               	dw	16
   385  00FBD3  0020               	dw	32
   386  00FBD5  0040               	dw	64
   387  00FBD7  0080               	dw	128
   388  00FBD9  0100               	dw	256
   389  00FBDB                     __end_ofTimer0_Init@PRESCALE:
   390                           	opt stack 0
   391  00FBDB                     PortProperty_Valid@F6830:
   392                           	opt stack 0
   393  00FBDB  00                 	db	0
   394  00FBDC  01                 	db	1
   395  00FBDD  02                 	db	2
   396  00FBDE  00                 	db	0
   397  00FBDF  01                 	db	1
   398  00FBE0  00                 	db	0
   399  00FBE1  01                 	db	1
   400  00FBE2  00                 	db	0
   401  00FBE3  02                 	db	2
   402  00FBE4  02                 	db	2
   403  00FBE5  00                 	db	0
   404  00FBE6  00                 	db	0
   405  00FBE7  03                 	db	3
   406  00FBE8  03                 	db	3
   407  00FBE9  03                 	db	3
   408  00FBEA  00                 	db	0
   409  00FBEB                     __end_ofPortProperty_Valid@F6830:
   410                           	opt stack 0
   411  00FBEB                     _dpowers:
   412                           	opt stack 0
   413  00FBEB  0001               	dw	1
   414  00FBED  000A               	dw	10
   415  00FBEF  0064               	dw	100
   416  00FBF1  03E8               	dw	1000
   417  00FBF3  2710               	dw	10000
   418  00FBF5                     __end_of_dpowers:
   419                           	opt stack 0
   420  00FBF5                     _MASKS:
   421                           	opt stack 0
   422  00FBF5  00                 	db	0
   423  00FBF6  01                 	db	1
   424  00FBF7  03                 	db	3
   425  00FBF8  07                 	db	7
   426  00FBF9  0F                 	db	15
   427  00FBFA  1F                 	db	31
   428  00FBFB  3F                 	db	63
   429  00FBFC  7F                 	db	127
   430  00FBFD  FF                 	db	255
   431  00FBFE                     __end_of_MASKS:
   432                           	opt stack 0
   433  00FBFE                     HMI_SetButton@F7213:
   434                           	opt stack 0
   435  00FBFE  00                 	db	0
   436  00FBFF  02                 	db	2
   437  00FC00  01                 	db	1
   438  00FC01  03                 	db	3
   439  00FC02                     __end_ofHMI_SetButton@F7213:
   440                           	opt stack 0
   441  00FC02                     Timer2_Init@PRESCALE:
   442                           	opt stack 0
   443  00FC02  01                 	db	1
   444  00FC03  04                 	db	4
   445  00FC04  10                 	db	16
   446  00FC05                     __end_ofTimer2_Init@PRESCALE:
   447                           	opt stack 0
   448  00FC05                     _Font5x7:
   449                           	opt stack 0
   450  00FC05  00                 	db	0
   451  00FC06  00                 	db	0
   452  00FC07  00                 	db	0
   453  00FC08  00                 	db	0
   454  00FC09  00                 	db	0
   455  00FC0A  00                 	db	0
   456  00FC0B  00                 	db	0
   457  00FC0C  5F                 	db	95
   458  00FC0D  00                 	db	0
   459  00FC0E  00                 	db	0
   460  00FC0F  00                 	db	0
   461  00FC10  07                 	db	7
   462  00FC11  00                 	db	0
   463  00FC12  07                 	db	7
   464  00FC13  00                 	db	0
   465  00FC14  14                 	db	20
   466  00FC15  7F                 	db	127
   467  00FC16  14                 	db	20
   468  00FC17  7F                 	db	127
   469  00FC18  14                 	db	20
   470  00FC19  24                 	db	36
   471  00FC1A  2A                 	db	42
   472  00FC1B  7F                 	db	127
   473  00FC1C  2A                 	db	42
   474  00FC1D  12                 	db	18
   475  00FC1E  23                 	db	35
   476  00FC1F  13                 	db	19
   477  00FC20  08                 	db	8
   478  00FC21  64                 	db	100
   479  00FC22  62                 	db	98
   480  00FC23  36                 	db	54
   481  00FC24  49                 	db	73
   482  00FC25  55                 	db	85
   483  00FC26  22                 	db	34
   484  00FC27  50                 	db	80
   485  00FC28  00                 	db	0
   486  00FC29  05                 	db	5
   487  00FC2A  03                 	db	3
   488  00FC2B  00                 	db	0
   489  00FC2C  00                 	db	0
   490  00FC2D  00                 	db	0
   491  00FC2E  1C                 	db	28
   492  00FC2F  22                 	db	34
   493  00FC30  41                 	db	65
   494  00FC31  00                 	db	0
   495  00FC32  00                 	db	0
   496  00FC33  41                 	db	65
   497  00FC34  22                 	db	34
   498  00FC35  1C                 	db	28
   499  00FC36  00                 	db	0
   500  00FC37  08                 	db	8
   501  00FC38  2A                 	db	42
   502  00FC39  1C                 	db	28
   503  00FC3A  2A                 	db	42
   504  00FC3B  08                 	db	8
   505  00FC3C  08                 	db	8
   506  00FC3D  08                 	db	8
   507  00FC3E  3E                 	db	62
   508  00FC3F  08                 	db	8
   509  00FC40  08                 	db	8
   510  00FC41  00                 	db	0
   511  00FC42  50                 	db	80
   512  00FC43  30                 	db	48
   513  00FC44  00                 	db	0
   514  00FC45  00                 	db	0
   515  00FC46  08                 	db	8
   516  00FC47  08                 	db	8
   517  00FC48  08                 	db	8
   518  00FC49  08                 	db	8
   519  00FC4A  08                 	db	8
   520  00FC4B  00                 	db	0
   521  00FC4C  60                 	db	96
   522  00FC4D  60                 	db	96
   523  00FC4E  00                 	db	0
   524  00FC4F  00                 	db	0
   525  00FC50  20                 	db	32
   526  00FC51  10                 	db	16
   527  00FC52  08                 	db	8
   528  00FC53  04                 	db	4
   529  00FC54  02                 	db	2
   530  00FC55  3E                 	db	62
   531  00FC56  51                 	db	81
   532  00FC57  49                 	db	73
   533  00FC58  45                 	db	69
   534  00FC59  3E                 	db	62
   535  00FC5A  00                 	db	0
   536  00FC5B  42                 	db	66
   537  00FC5C  7F                 	db	127
   538  00FC5D  40                 	db	64
   539  00FC5E  00                 	db	0
   540  00FC5F  42                 	db	66
   541  00FC60  61                 	db	97
   542  00FC61  51                 	db	81
   543  00FC62  49                 	db	73
   544  00FC63  46                 	db	70
   545  00FC64  21                 	db	33
   546  00FC65  41                 	db	65
   547  00FC66  45                 	db	69
   548  00FC67  4B                 	db	75
   549  00FC68  31                 	db	49
   550  00FC69  18                 	db	24
   551  00FC6A  14                 	db	20
   552  00FC6B  12                 	db	18
   553  00FC6C  7F                 	db	127
   554  00FC6D  10                 	db	16
   555  00FC6E  27                 	db	39
   556  00FC6F  45                 	db	69
   557  00FC70  45                 	db	69
   558  00FC71  45                 	db	69
   559  00FC72  39                 	db	57
   560  00FC73  3C                 	db	60
   561  00FC74  4A                 	db	74
   562  00FC75  49                 	db	73
   563  00FC76  49                 	db	73
   564  00FC77  30                 	db	48
   565  00FC78  01                 	db	1
   566  00FC79  71                 	db	113
   567  00FC7A  09                 	db	9
   568  00FC7B  05                 	db	5
   569  00FC7C  03                 	db	3
   570  00FC7D  36                 	db	54
   571  00FC7E  49                 	db	73
   572  00FC7F  49                 	db	73
   573  00FC80  49                 	db	73
   574  00FC81  36                 	db	54
   575  00FC82  06                 	db	6
   576  00FC83  49                 	db	73
   577  00FC84  49                 	db	73
   578  00FC85  29                 	db	41
   579  00FC86  1E                 	db	30
   580  00FC87  00                 	db	0
   581  00FC88  36                 	db	54
   582  00FC89  36                 	db	54
   583  00FC8A  00                 	db	0
   584  00FC8B  00                 	db	0
   585  00FC8C  00                 	db	0
   586  00FC8D  56                 	db	86
   587  00FC8E  36                 	db	54
   588  00FC8F  00                 	db	0
   589  00FC90  00                 	db	0
   590  00FC91  00                 	db	0
   591  00FC92  08                 	db	8
   592  00FC93  14                 	db	20
   593  00FC94  22                 	db	34
   594  00FC95  41                 	db	65
   595  00FC96  14                 	db	20
   596  00FC97  14                 	db	20
   597  00FC98  14                 	db	20
   598  00FC99  14                 	db	20
   599  00FC9A  14                 	db	20
   600  00FC9B  41                 	db	65
   601  00FC9C  22                 	db	34
   602  00FC9D  14                 	db	20
   603  00FC9E  08                 	db	8
   604  00FC9F  00                 	db	0
   605  00FCA0  02                 	db	2
   606  00FCA1  01                 	db	1
   607  00FCA2  51                 	db	81
   608  00FCA3  09                 	db	9
   609  00FCA4  06                 	db	6
   610  00FCA5  32                 	db	50
   611  00FCA6  49                 	db	73
   612  00FCA7  79                 	db	121
   613  00FCA8  41                 	db	65
   614  00FCA9  3E                 	db	62
   615  00FCAA  7E                 	db	126
   616  00FCAB  11                 	db	17
   617  00FCAC  11                 	db	17
   618  00FCAD  11                 	db	17
   619  00FCAE  7E                 	db	126
   620  00FCAF  7F                 	db	127
   621  00FCB0  49                 	db	73
   622  00FCB1  49                 	db	73
   623  00FCB2  49                 	db	73
   624  00FCB3  36                 	db	54
   625  00FCB4  3E                 	db	62
   626  00FCB5  41                 	db	65
   627  00FCB6  41                 	db	65
   628  00FCB7  41                 	db	65
   629  00FCB8  22                 	db	34
   630  00FCB9  7F                 	db	127
   631  00FCBA  41                 	db	65
   632  00FCBB  41                 	db	65
   633  00FCBC  22                 	db	34
   634  00FCBD  1C                 	db	28
   635  00FCBE  7F                 	db	127
   636  00FCBF  49                 	db	73
   637  00FCC0  49                 	db	73
   638  00FCC1  49                 	db	73
   639  00FCC2  41                 	db	65
   640  00FCC3  7F                 	db	127
   641  00FCC4  09                 	db	9
   642  00FCC5  09                 	db	9
   643  00FCC6  01                 	db	1
   644  00FCC7  01                 	db	1
   645  00FCC8  3E                 	db	62
   646  00FCC9  41                 	db	65
   647  00FCCA  41                 	db	65
   648  00FCCB  51                 	db	81
   649  00FCCC  32                 	db	50
   650  00FCCD  7F                 	db	127
   651  00FCCE  08                 	db	8
   652  00FCCF  08                 	db	8
   653  00FCD0  08                 	db	8
   654  00FCD1  7F                 	db	127
   655  00FCD2  00                 	db	0
   656  00FCD3  41                 	db	65
   657  00FCD4  7F                 	db	127
   658  00FCD5  41                 	db	65
   659  00FCD6  00                 	db	0
   660  00FCD7  20                 	db	32
   661  00FCD8  40                 	db	64
   662  00FCD9  41                 	db	65
   663  00FCDA  3F                 	db	63
   664  00FCDB  01                 	db	1
   665  00FCDC  7F                 	db	127
   666  00FCDD  08                 	db	8
   667  00FCDE  14                 	db	20
   668  00FCDF  22                 	db	34
   669  00FCE0  41                 	db	65
   670  00FCE1  7F                 	db	127
   671  00FCE2  40                 	db	64
   672  00FCE3  40                 	db	64
   673  00FCE4  40                 	db	64
   674  00FCE5  40                 	db	64
   675  00FCE6  7F                 	db	127
   676  00FCE7  02                 	db	2
   677  00FCE8  04                 	db	4
   678  00FCE9  02                 	db	2
   679  00FCEA  7F                 	db	127
   680  00FCEB  7F                 	db	127
   681  00FCEC  04                 	db	4
   682  00FCED  08                 	db	8
   683  00FCEE  10                 	db	16
   684  00FCEF  7F                 	db	127
   685  00FCF0  3E                 	db	62
   686  00FCF1  41                 	db	65
   687  00FCF2  41                 	db	65
   688  00FCF3  41                 	db	65
   689  00FCF4  3E                 	db	62
   690  00FCF5  7F                 	db	127
   691  00FCF6  09                 	db	9
   692  00FCF7  09                 	db	9
   693  00FCF8  09                 	db	9
   694  00FCF9  06                 	db	6
   695  00FCFA  3E                 	db	62
   696  00FCFB  41                 	db	65
   697  00FCFC  51                 	db	81
   698  00FCFD  21                 	db	33
   699  00FCFE  5E                 	db	94
   700  00FCFF  7F                 	db	127
   701  00FD00  09                 	db	9
   702  00FD01  19                 	db	25
   703  00FD02  29                 	db	41
   704  00FD03  46                 	db	70
   705  00FD04  46                 	db	70
   706  00FD05  49                 	db	73
   707  00FD06  49                 	db	73
   708  00FD07  49                 	db	73
   709  00FD08  31                 	db	49
   710  00FD09  01                 	db	1
   711  00FD0A  01                 	db	1
   712  00FD0B  7F                 	db	127
   713  00FD0C  01                 	db	1
   714  00FD0D  01                 	db	1
   715  00FD0E  3F                 	db	63
   716  00FD0F  40                 	db	64
   717  00FD10  40                 	db	64
   718  00FD11  40                 	db	64
   719  00FD12  3F                 	db	63
   720  00FD13  1F                 	db	31
   721  00FD14  20                 	db	32
   722  00FD15  40                 	db	64
   723  00FD16  20                 	db	32
   724  00FD17  1F                 	db	31
   725  00FD18  7F                 	db	127
   726  00FD19  20                 	db	32
   727  00FD1A  18                 	db	24
   728  00FD1B  20                 	db	32
   729  00FD1C  7F                 	db	127
   730  00FD1D  63                 	db	99
   731  00FD1E  14                 	db	20
   732  00FD1F  08                 	db	8
   733  00FD20  14                 	db	20
   734  00FD21  63                 	db	99
   735  00FD22  03                 	db	3
   736  00FD23  04                 	db	4
   737  00FD24  78                 	db	120
   738  00FD25  04                 	db	4
   739  00FD26  03                 	db	3
   740  00FD27  61                 	db	97
   741  00FD28  51                 	db	81
   742  00FD29  49                 	db	73
   743  00FD2A  45                 	db	69
   744  00FD2B  43                 	db	67
   745  00FD2C  00                 	db	0
   746  00FD2D  00                 	db	0
   747  00FD2E  7F                 	db	127
   748  00FD2F  41                 	db	65
   749  00FD30  41                 	db	65
   750  00FD31  02                 	db	2
   751  00FD32  04                 	db	4
   752  00FD33  08                 	db	8
   753  00FD34  10                 	db	16
   754  00FD35  20                 	db	32
   755  00FD36  41                 	db	65
   756  00FD37  41                 	db	65
   757  00FD38  7F                 	db	127
   758  00FD39  00                 	db	0
   759  00FD3A  00                 	db	0
   760  00FD3B  04                 	db	4
   761  00FD3C  02                 	db	2
   762  00FD3D  01                 	db	1
   763  00FD3E  02                 	db	2
   764  00FD3F  04                 	db	4
   765  00FD40  40                 	db	64
   766  00FD41  40                 	db	64
   767  00FD42  40                 	db	64
   768  00FD43  40                 	db	64
   769  00FD44  40                 	db	64
   770  00FD45  00                 	db	0
   771  00FD46  01                 	db	1
   772  00FD47  02                 	db	2
   773  00FD48  04                 	db	4
   774  00FD49  00                 	db	0
   775  00FD4A  20                 	db	32
   776  00FD4B  54                 	db	84
   777  00FD4C  54                 	db	84
   778  00FD4D  54                 	db	84
   779  00FD4E  78                 	db	120
   780  00FD4F  7F                 	db	127
   781  00FD50  48                 	db	72
   782  00FD51  44                 	db	68
   783  00FD52  44                 	db	68
   784  00FD53  38                 	db	56
   785  00FD54  38                 	db	56
   786  00FD55  44                 	db	68
   787  00FD56  44                 	db	68
   788  00FD57  44                 	db	68
   789  00FD58  20                 	db	32
   790  00FD59  38                 	db	56
   791  00FD5A  44                 	db	68
   792  00FD5B  44                 	db	68
   793  00FD5C  48                 	db	72
   794  00FD5D  7F                 	db	127
   795  00FD5E  38                 	db	56
   796  00FD5F  54                 	db	84
   797  00FD60  54                 	db	84
   798  00FD61  54                 	db	84
   799  00FD62  18                 	db	24
   800  00FD63  08                 	db	8
   801  00FD64  7E                 	db	126
   802  00FD65  09                 	db	9
   803  00FD66  01                 	db	1
   804  00FD67  02                 	db	2
   805  00FD68  08                 	db	8
   806  00FD69  14                 	db	20
   807  00FD6A  54                 	db	84
   808  00FD6B  54                 	db	84
   809  00FD6C  3C                 	db	60
   810  00FD6D  7F                 	db	127
   811  00FD6E  08                 	db	8
   812  00FD6F  04                 	db	4
   813  00FD70  04                 	db	4
   814  00FD71  78                 	db	120
   815  00FD72  00                 	db	0
   816  00FD73  44                 	db	68
   817  00FD74  7D                 	db	125
   818  00FD75  40                 	db	64
   819  00FD76  00                 	db	0
   820  00FD77  20                 	db	32
   821  00FD78  40                 	db	64
   822  00FD79  44                 	db	68
   823  00FD7A  3D                 	db	61
   824  00FD7B  00                 	db	0
   825  00FD7C  00                 	db	0
   826  00FD7D  7F                 	db	127
   827  00FD7E  10                 	db	16
   828  00FD7F  28                 	db	40
   829  00FD80  44                 	db	68
   830  00FD81  00                 	db	0
   831  00FD82  41                 	db	65
   832  00FD83  7F                 	db	127
   833  00FD84  40                 	db	64
   834  00FD85  00                 	db	0
   835  00FD86  7C                 	db	124
   836  00FD87  04                 	db	4
   837  00FD88  18                 	db	24
   838  00FD89  04                 	db	4
   839  00FD8A  78                 	db	120
   840  00FD8B  7C                 	db	124
   841  00FD8C  08                 	db	8
   842  00FD8D  04                 	db	4
   843  00FD8E  04                 	db	4
   844  00FD8F  78                 	db	120
   845  00FD90  38                 	db	56
   846  00FD91  44                 	db	68
   847  00FD92  44                 	db	68
   848  00FD93  44                 	db	68
   849  00FD94  38                 	db	56
   850  00FD95  7C                 	db	124
   851  00FD96  14                 	db	20
   852  00FD97  14                 	db	20
   853  00FD98  14                 	db	20
   854  00FD99  08                 	db	8
   855  00FD9A  08                 	db	8
   856  00FD9B  14                 	db	20
   857  00FD9C  14                 	db	20
   858  00FD9D  18                 	db	24
   859  00FD9E  7C                 	db	124
   860  00FD9F  7C                 	db	124
   861  00FDA0  08                 	db	8
   862  00FDA1  04                 	db	4
   863  00FDA2  04                 	db	4
   864  00FDA3  08                 	db	8
   865  00FDA4  48                 	db	72
   866  00FDA5  54                 	db	84
   867  00FDA6  54                 	db	84
   868  00FDA7  54                 	db	84
   869  00FDA8  20                 	db	32
   870  00FDA9  04                 	db	4
   871  00FDAA  3F                 	db	63
   872  00FDAB  44                 	db	68
   873  00FDAC  40                 	db	64
   874  00FDAD  20                 	db	32
   875  00FDAE  3C                 	db	60
   876  00FDAF  40                 	db	64
   877  00FDB0  40                 	db	64
   878  00FDB1  20                 	db	32
   879  00FDB2  7C                 	db	124
   880  00FDB3  1C                 	db	28
   881  00FDB4  20                 	db	32
   882  00FDB5  40                 	db	64
   883  00FDB6  20                 	db	32
   884  00FDB7  1C                 	db	28
   885  00FDB8  3C                 	db	60
   886  00FDB9  40                 	db	64
   887  00FDBA  30                 	db	48
   888  00FDBB  40                 	db	64
   889  00FDBC  3C                 	db	60
   890  00FDBD  44                 	db	68
   891  00FDBE  28                 	db	40
   892  00FDBF  10                 	db	16
   893  00FDC0  28                 	db	40
   894  00FDC1  44                 	db	68
   895  00FDC2  0C                 	db	12
   896  00FDC3  50                 	db	80
   897  00FDC4  50                 	db	80
   898  00FDC5  50                 	db	80
   899  00FDC6  3C                 	db	60
   900  00FDC7  44                 	db	68
   901  00FDC8  64                 	db	100
   902  00FDC9  54                 	db	84
   903  00FDCA  4C                 	db	76
   904  00FDCB  44                 	db	68
   905  00FDCC  00                 	db	0
   906  00FDCD  08                 	db	8
   907  00FDCE  36                 	db	54
   908  00FDCF  41                 	db	65
   909  00FDD0  00                 	db	0
   910  00FDD1  00                 	db	0
   911  00FDD2  00                 	db	0
   912  00FDD3  7F                 	db	127
   913  00FDD4  00                 	db	0
   914  00FDD5  00                 	db	0
   915  00FDD6  00                 	db	0
   916  00FDD7  41                 	db	65
   917  00FDD8  36                 	db	54
   918  00FDD9  08                 	db	8
   919  00FDDA  00                 	db	0
   920  00FDDB  08                 	db	8
   921  00FDDC  08                 	db	8
   922  00FDDD  2A                 	db	42
   923  00FDDE  1C                 	db	28
   924  00FDDF  08                 	db	8
   925  00FDE0  08                 	db	8
   926  00FDE1  1C                 	db	28
   927  00FDE2  2A                 	db	42
   928  00FDE3  08                 	db	8
   929  00FDE4  08                 	db	8
   930  00FDE5                     __end_of_Font5x7:
   931                           	opt stack 0
   932  00FDE5                     exp@coeff:
   933                           	opt stack 0
   934  00FDE5  0000               	dw	0
   935  00FDE7  3F80               	dw	16256
   936  00FDE9  7218               	dw	29208
   937  00FDEB  3F31               	dw	16177
   938  00FDED  FDF0               	dw	65008
   939  00FDEF  3E75               	dw	15989
   940  00FDF1  5847               	dw	22599
   941  00FDF3  3D63               	dw	15715
   942  00FDF5  9558               	dw	38232
   943  00FDF7  3C1D               	dw	15389
   944  00FDF9  C482               	dw	50306
   945  00FDFB  3AAE               	dw	15022
   946  00FDFD  78A8               	dw	30888
   947  00FDFF  3921               	dw	14625
   948  00FE01  93EF               	dw	37871
   949  00FE03  3780               	dw	14208
   950  00FE05  92A0               	dw	37536
   951  00FE07  35A7               	dw	13735
   952  00FE09  5646               	dw	22086
   953  00FE0B  3415               	dw	13333
   954  00FE0D                     __end_ofexp@coeff:
   955                           	opt stack 0
   956  00FE0D                     log@coeff:
   957                           	opt stack 0
   958  00FE0D  0000               	dw	0
   959  00FE0F  0000               	dw	0
   960  00FE11  FFC4               	dw	65476
   961  00FE13  3F7F               	dw	16255
   962  00FE15  EF80               	dw	61312
   963  00FE17  BEFF               	dw	48895
   964  00FE19  E190               	dw	57744
   965  00FE1B  3EA9               	dw	16041
   966  00FE1D  82EC               	dw	33516
   967  00FE1F  BE76               	dw	48758
   968  00FE21  AD82               	dw	44418
   969  00FE23  3E2B               	dw	15915
   970  00FE25  3C0E               	dw	15374
   971  00FE27  BDC3               	dw	48579
   972  00FE29  D187               	dw	53639
   973  00FE2B  3D13               	dw	15635
   974  00FE2D  7841               	dw	30785
   975  00FE2F  BBD3               	dw	48083
   976  00FE31                     __end_oflog@coeff:
   977                           	opt stack 0
   978  00FE31                     _PortG_Property:
   979                           	opt stack 0
   980  00FE31  FC00               	dw	64512
   981  00FE33                     __end_of_PortG_Property:
   982                           	opt stack 0
   983  00FE33                     _PortF_Property:
   984                           	opt stack 0
   985  00FE33  0FFF               	dw	4095
   986  00FE35                     __end_of_PortF_Property:
   987                           	opt stack 0
   988  00FE35                     _PortE_Property:
   989                           	opt stack 0
   990  00FE35  0000               	dw	0
   991  00FE37                     __end_of_PortE_Property:
   992                           	opt stack 0
   993  00FE37                     _PortD_Property:
   994                           	opt stack 0
   995  00FE37  FFFF               	dw	65535
   996  00FE39                     __end_of_PortD_Property:
   997                           	opt stack 0
   998  00FE39                     _PortC_Property:
   999                           	opt stack 0
  1000  00FE39  FFF0               	dw	65520
  1001  00FE3B                     __end_of_PortC_Property:
  1002                           	opt stack 0
  1003  00FE3B                     _PortB_Property:
  1004                           	opt stack 0
  1005  00FE3B  FF00               	dw	65280
  1006  00FE3D                     __end_of_PortB_Property:
  1007                           	opt stack 0
  1008  00FE3D                     _PortA_Property:
  1009                           	opt stack 0
  1010  00FE3D  00FF               	dw	255
  1011  00FE3F                     __end_of_PortA_Property:
  1012                           	opt stack 0
  1013  0000                     _ADRES	set	4035
  1014  0000                     _TMR0	set	4054
  1015  0000                     _TXREG1	set	4014
  1016  0000                     _ADCON0	set	4034
  1017  0000                     _ADCON1	set	4033
  1018  0000                     _RCREG1	set	4015
  1019  0000                     _SPBRG1	set	4016
  1020  0000                     _TXSTA1bits	set	4013
  1021  0000                     _BAUDCON1bits	set	3966
  1022  0000                     _RCSTA1	set	4012
  1023  0000                     _TXSTA1	set	4013
  1024  0000                     _TRISCbits	set	3988
  1025  0000                     _PR2	set	4043
  1026  0000                     _T2CONbits	set	4042
  1027  0000                     _T0CONbits	set	4053
  1028  0000                     _RCONbits	set	4048
  1029  0000                     _OSCTUNEbits	set	3995
  1030  0000                     _PIR3	set	4004
  1031  0000                     _PIR2	set	4001
  1032  0000                     _PIR1	set	3998
  1033  0000                     _INTCONbits	set	4082
  1034  0000                     _SSP2CON2bits	set	3947
  1035  0000                     _SSP1CON2bits	set	4037
  1036  0000                     _SSP1ADD	set	4040
  1037  0000                     _ANCON0	set	4033
  1038  0000                     _ADRESL	set	4035
  1039  0000                     _ADRESH	set	4036
  1040  0000                     _ADCON1bits	set	4033
  1041  0000                     _ADCON0bits	set	4034
  1042  0000                     _SSP2CON1bits	set	3948
  1043  0000                     _SSP1CON1bits	set	4038
  1044  0000                     _SSP2STATbits	set	3949
  1045  0000                     _SSP1STATbits	set	4039
  1046  0000                     _PIE3bits	set	4003
  1047  0000                     _PIE1bits	set	3997
  1048  0000                     _PIR3bits	set	4004
  1049  0000                     _PIR1bits	set	3998
  1050  0000                     _IPR3bits	set	4005
  1051  0000                     _IPR1bits	set	3999
  1052  0000                     _PORTFbits	set	3973
  1053  0000                     _SSP2CON2	set	3947
  1054  0000                     _SSP1CON2	set	4037
  1055  0000                     _SSP2BUF	set	3951
  1056  0000                     _SSP2CON1	set	3948
  1057  0000                     _SSP2STAT	set	3949
  1058  0000                     _SSP1BUF	set	4041
  1059  0000                     _SSP1CON1	set	4038
  1060  0000                     _SSP1STAT	set	4039
  1061  0000                     _LATG	set	3983
  1062  0000                     _LATF	set	3982
  1063  0000                     _LATE	set	3981
  1064  0000                     _LATD	set	3980
  1065  0000                     _LATC	set	3979
  1066  0000                     _LATB	set	3978
  1067  0000                     _LATA	set	3977
  1068  0000                     _TRISG	set	3992
  1069  0000                     _TRISF	set	3991
  1070  0000                     _TRISE	set	3990
  1071  0000                     _TRISD	set	3989
  1072  0000                     _TRISC	set	3988
  1073  0000                     _TRISB	set	3987
  1074  0000                     _TRISA	set	3986
  1075  0000                     _PORTG	set	3974
  1076  0000                     _PORTF	set	3973
  1077  0000                     _PORTE	set	3972
  1078  0000                     _PORTD	set	3971
  1079  0000                     _PORTC	set	3970
  1080  0000                     _PORTB	set	3969
  1081  0000                     _PORTA	set	3968
  1082  0000                     _GODONE	set	32273
  1083  0000                     _ADON	set	32272
  1084  0000                     _RA3	set	31747
  1085  0000                     _RA2	set	31746
  1086  0000                     _RD7	set	31775
  1087  0000                     _RD5	set	31773
  1088  0000                     _TRISD7	set	31919
  1089  0000                     _TRISD5	set	31917
  1090  0000                     _TRISA3	set	31891
  1091  0000                     _TRISA2	set	31890
  1092  00FE3F  43                 	db	67	;'C'
  1093  00FE40  6F                 	db	111	;'o'
  1094  00FE41  75                 	db	117	;'u'
  1095  00FE42  6C                 	db	108	;'l'
  1096  00FE43  64                 	db	100	;'d'
  1097  00FE44  20                 	db	32
  1098  00FE45  6E                 	db	110	;'n'
  1099  00FE46  6F                 	db	111	;'o'
  1100  00FE47  74                 	db	116	;'t'
  1101  00FE48  20                 	db	32
  1102  00FE49  72                 	db	114	;'r'
  1103  00FE4A  65                 	db	101	;'e'
  1104  00FE4B  74                 	db	116	;'t'
  1105  00FE4C  72                 	db	114	;'r'
  1106  00FE4D  69                 	db	105	;'i'
  1107  00FE4E  65                 	db	101	;'e'
  1108  00FE4F  76                 	db	118	;'v'
  1109  00FE50  65                 	db	101	;'e'
  1110  00FE51  20                 	db	32
  1111  00FE52  64                 	db	100	;'d'
  1112  00FE53  61                 	db	97	;'a'
  1113  00FE54  74                 	db	116	;'t'
  1114  00FE55  61                 	db	97	;'a'
  1115  00FE56  2C                 	db	44
  1116  00FE57  20                 	db	32
  1117  00FE58  53                 	db	83	;'S'
  1118  00FE59  74                 	db	116	;'t'
  1119  00FE5A  61                 	db	97	;'a'
  1120  00FE5B  63                 	db	99	;'c'
  1121  00FE5C  6B                 	db	107	;'k'
  1122  00FE5D  20                 	db	32
  1123  00FE5E  69                 	db	105	;'i'
  1124  00FE5F  73                 	db	115	;'s'
  1125  00FE60  20                 	db	32
  1126  00FE61  65                 	db	101	;'e'
  1127  00FE62  6D                 	db	109	;'m'
  1128  00FE63  70                 	db	112	;'p'
  1129  00FE64  74                 	db	116	;'t'
  1130  00FE65  79                 	db	121	;'y'
  1131  00FE66  2E                 	db	46
  1132  00FE67  0A                 	db	10
  1133  00FE68  00                 	db	0
  1134  00FE69  43                 	db	67	;'C'
  1135  00FE6A  6F                 	db	111	;'o'
  1136  00FE6B  75                 	db	117	;'u'
  1137  00FE6C  6C                 	db	108	;'l'
  1138  00FE6D  64                 	db	100	;'d'
  1139  00FE6E  20                 	db	32
  1140  00FE6F  6E                 	db	110	;'n'
  1141  00FE70  6F                 	db	111	;'o'
  1142  00FE71  74                 	db	116	;'t'
  1143  00FE72  20                 	db	32
  1144  00FE73  69                 	db	105	;'i'
  1145  00FE74  6E                 	db	110	;'n'
  1146  00FE75  73                 	db	115	;'s'
  1147  00FE76  65                 	db	101	;'e'
  1148  00FE77  72                 	db	114	;'r'
  1149  00FE78  74                 	db	116	;'t'
  1150  00FE79  20                 	db	32
  1151  00FE7A  64                 	db	100	;'d'
  1152  00FE7B  61                 	db	97	;'a'
  1153  00FE7C  74                 	db	116	;'t'
  1154  00FE7D  61                 	db	97	;'a'
  1155  00FE7E  2C                 	db	44
  1156  00FE7F  20                 	db	32
  1157  00FE80  53                 	db	83	;'S'
  1158  00FE81  74                 	db	116	;'t'
  1159  00FE82  61                 	db	97	;'a'
  1160  00FE83  63                 	db	99	;'c'
  1161  00FE84  6B                 	db	107	;'k'
  1162  00FE85  20                 	db	32
  1163  00FE86  69                 	db	105	;'i'
  1164  00FE87  73                 	db	115	;'s'
  1165  00FE88  20                 	db	32
  1166  00FE89  66                 	db	102	;'f'
  1167  00FE8A  75                 	db	117	;'u'
  1168  00FE8B  6C                 	db	108	;'l'
  1169  00FE8C  6C                 	db	108	;'l'
  1170  00FE8D  2E                 	db	46
  1171  00FE8E  0A                 	db	10
  1172  00FE8F  00                 	db	0
  1173  00FE90  0A                 	db	10
  1174  00FE91  54                 	db	84	;'T'
  1175  00FE92  68                 	db	104	;'h'
  1176  00FE93  65                 	db	101	;'e'
  1177  00FE94  20                 	db	32
  1178  00FE95  43                 	db	67	;'C'
  1179  00FE96  6C                 	db	108	;'l'
  1180  00FE97  6F                 	db	111	;'o'
  1181  00FE98  73                 	db	115	;'s'
  1182  00FE99  65                 	db	101	;'e'
  1183  00FE9A  73                 	db	115	;'s'
  1184  00FE9B  20                 	db	32
  1185  00FE9C  6F                 	db	111	;'o'
  1186  00FE9D  62                 	db	98	;'b'
  1187  00FE9E  6A                 	db	106	;'j'
  1188  00FE9F  65                 	db	101	;'e'
  1189  00FEA0  63                 	db	99	;'c'
  1190  00FEA1  74                 	db	116	;'t'
  1191  00FEA2  20                 	db	32
  1192  00FEA3  28                 	db	40
  1193  00FEA4  6D                 	db	109	;'m'
  1194  00FEA5  6D                 	db	109	;'m'
  1195  00FEA6  29                 	db	41
  1196  00FEA7  3A                 	db	58	;':'
  1197  00FEA8  20                 	db	32
  1198  00FEA9  25                 	db	37
  1199  00FEAA  64                 	db	100	;'d'
  1200  00FEAB  00                 	db	0
  1201  00FEAC  0A                 	db	10
  1202  00FEAD  53                 	db	83	;'S'
  1203  00FEAE  74                 	db	116	;'t'
  1204  00FEAF  65                 	db	101	;'e'
  1205  00FEB0  70                 	db	112	;'p'
  1206  00FEB1  73                 	db	115	;'s'
  1207  00FEB2  20                 	db	32
  1208  00FEB3  54                 	db	84	;'T'
  1209  00FEB4  72                 	db	114	;'r'
  1210  00FEB5  61                 	db	97	;'a'
  1211  00FEB6  76                 	db	118	;'v'
  1212  00FEB7  65                 	db	101	;'e'
  1213  00FEB8  6C                 	db	108	;'l'
  1214  00FEB9  6C                 	db	108	;'l'
  1215  00FEBA  65                 	db	101	;'e'
  1216  00FEBB  64                 	db	100	;'d'
  1217  00FEBC  3A                 	db	58	;':'
  1218  00FEBD  20                 	db	32
  1219  00FEBE  25                 	db	37
  1220  00FEBF  64                 	db	100	;'d'
  1221  00FEC0  20                 	db	32
  1222  00FEC1  0A                 	db	10
  1223  00FEC2  0A                 	db	10
  1224  00FEC3  00                 	db	0
  1225  00FEC4  0A                 	db	10
  1226  00FEC5  53                 	db	83	;'S'
  1227  00FEC6  74                 	db	116	;'t'
  1228  00FEC7  65                 	db	101	;'e'
  1229  00FEC8  70                 	db	112	;'p'
  1230  00FEC9  73                 	db	115	;'s'
  1231  00FECA  20                 	db	32
  1232  00FECB  54                 	db	84	;'T'
  1233  00FECC  72                 	db	114	;'r'
  1234  00FECD  61                 	db	97	;'a'
  1235  00FECE  76                 	db	118	;'v'
  1236  00FECF  65                 	db	101	;'e'
  1237  00FED0  6C                 	db	108	;'l'
  1238  00FED1  6C                 	db	108	;'l'
  1239  00FED2  65                 	db	101	;'e'
  1240  00FED3  64                 	db	100	;'d'
  1241  00FED4  3A                 	db	58	;':'
  1242  00FED5  20                 	db	32
  1243  00FED6  25                 	db	37
  1244  00FED7  64                 	db	100	;'d'
  1245  00FED8  00                 	db	0
  1246  00FED9                     STR_21:
  1247  00FED9  48                 	db	72	;'H'
  1248  00FEDA  6F                 	db	111	;'o'
  1249  00FEDB  6D                 	db	109	;'m'
  1250  00FEDC  65                 	db	101	;'e'
  1251  00FEDD  5F                 	db	95	;'_'
  1252  00FEDE  42                 	db	66	;'B'
  1253  00FEDF  61                 	db	97	;'a'
  1254  00FEE0  73                 	db	115	;'s'
  1255  00FEE1  65                 	db	101	;'e'
  1256  00FEE2  5F                 	db	95	;'_'
  1257  00FEE3  53                 	db	83	;'S'
  1258  00FEE4  74                 	db	116	;'t'
  1259  00FEE5  61                 	db	97	;'a'
  1260  00FEE6  74                 	db	116	;'t'
  1261  00FEE7  65                 	db	101	;'e'
  1262  00FEE8  3A                 	db	58	;':'
  1263  00FEE9  20                 	db	32
  1264  00FEEA  25                 	db	37
  1265  00FEEB  64                 	db	100	;'d'
  1266  00FEEC  00                 	db	0
  1267  00FEED  53                 	db	83	;'S'
  1268  00FEEE  74                 	db	116	;'t'
  1269  00FEEF  65                 	db	101	;'e'
  1270  00FEF0  70                 	db	112	;'p'
  1271  00FEF1  70                 	db	112	;'p'
  1272  00FEF2  65                 	db	101	;'e'
  1273  00FEF3  64                 	db	100	;'d'
  1274  00FEF4  20                 	db	32
  1275  00FEF5  33                 	db	51	;'3'
  1276  00FEF6  36                 	db	54	;'6'
  1277  00FEF7  30                 	db	48	;'0'
  1278  00FEF8  20                 	db	32
  1279  00FEF9  64                 	db	100	;'d'
  1280  00FEFA  65                 	db	101	;'e'
  1281  00FEFB  67                 	db	103	;'g'
  1282  00FEFC  72                 	db	114	;'r'
  1283  00FEFD  65                 	db	101	;'e'
  1284  00FEFE  65                 	db	101	;'e'
  1285  00FEFF  73                 	db	115	;'s'
  1286  00FF00  00                 	db	0
  1287  00FF01                     STR_20:
  1288  00FF01  0A                 	db	10
  1289  00FF02  48                 	db	72	;'H'
  1290  00FF03  6F                 	db	111	;'o'
  1291  00FF04  6D                 	db	109	;'m'
  1292  00FF05  65                 	db	101	;'e'
  1293  00FF06  20                 	db	32
  1294  00FF07  42                 	db	66	;'B'
  1295  00FF08  61                 	db	97	;'a'
  1296  00FF09  73                 	db	115	;'s'
  1297  00FF0A  65                 	db	101	;'e'
  1298  00FF0B  20                 	db	32
  1299  00FF0C  66                 	db	102	;'f'
  1300  00FF0D  6F                 	db	111	;'o'
  1301  00FF0E  75                 	db	117	;'u'
  1302  00FF0F  6E                 	db	110	;'n'
  1303  00FF10  64                 	db	100	;'d'
  1304  00FF11  0A                 	db	10
  1305  00FF12  20                 	db	32
  1306  00FF13  00                 	db	0
  1307  00FF14  53                 	db	83	;'S'
  1308  00FF15  65                 	db	101	;'e'
  1309  00FF16  6E                 	db	110	;'n'
  1310  00FF17  73                 	db	115	;'s'
  1311  00FF18  6F                 	db	111	;'o'
  1312  00FF19  72                 	db	114	;'r'
  1313  00FF1A  20                 	db	32
  1314  00FF1B  4D                 	db	77	;'M'
  1315  00FF1C  6F                 	db	111	;'o'
  1316  00FF1D  76                 	db	118	;'v'
  1317  00FF1E  69                 	db	105	;'i'
  1318  00FF1F  6E                 	db	110	;'n'
  1319  00FF20  67                 	db	103	;'g'
  1320  00FF21  21                 	db	33
  1321  00FF22  20                 	db	32
  1322  00FF23  20                 	db	32
  1323  00FF24  20                 	db	32
  1324  00FF25  0A                 	db	10
  1325  00FF26  00                 	db	0
  1326  00FF27  0A                 	db	10
  1327  00FF28  47                 	db	71	;'G'
  1328  00FF29  6F                 	db	111	;'o'
  1329  00FF2A  69                 	db	105	;'i'
  1330  00FF2B  6E                 	db	110	;'n'
  1331  00FF2C  67                 	db	103	;'g'
  1332  00FF2D  20                 	db	32
  1333  00FF2E  62                 	db	98	;'b'
  1334  00FF2F  61                 	db	97	;'a'
  1335  00FF30  63                 	db	99	;'c'
  1336  00FF31  6B                 	db	107	;'k'
  1337  00FF32  20                 	db	32
  1338  00FF33  74                 	db	116	;'t'
  1339  00FF34  6F                 	db	111	;'o'
  1340  00FF35  3A                 	db	58	;':'
  1341  00FF36  20                 	db	32
  1342  00FF37  25                 	db	37
  1343  00FF38  64                 	db	100	;'d'
  1344  00FF39  00                 	db	0
  1345  00FF3A  0A                 	db	10
  1346  00FF3B  20                 	db	32
  1347  00FF3C  46                 	db	70	;'F'
  1348  00FF3D  6F                 	db	111	;'o'
  1349  00FF3E  75                 	db	117	;'u'
  1350  00FF3F  6E                 	db	110	;'n'
  1351  00FF40  64                 	db	100	;'d'
  1352  00FF41  20                 	db	32
  1353  00FF42  46                 	db	70	;'F'
  1354  00FF43  6C                 	db	108	;'l'
  1355  00FF44  61                 	db	97	;'a'
  1356  00FF45  67                 	db	103	;'g'
  1357  00FF46  3A                 	db	58	;':'
  1358  00FF47  20                 	db	32
  1359  00FF48  25                 	db	37
  1360  00FF49  64                 	db	100	;'d'
  1361  00FF4A  00                 	db	0
  1362  00FF4B                     STR_39:
  1363  00FF4B  72                 	db	114	;'r'
  1364  00FF4C  65                 	db	101	;'e'
  1365  00FF4D  76                 	db	118	;'v'
  1366  00FF4E  3A                 	db	58	;':'
  1367  00FF4F  25                 	db	37
  1368  00FF50  64                 	db	100	;'d'
  1369  00FF51  20                 	db	32
  1370  00FF52  54                 	db	84	;'T'
  1371  00FF53  61                 	db	97	;'a'
  1372  00FF54  72                 	db	114	;'r'
  1373  00FF55  3A                 	db	58	;':'
  1374  00FF56  20                 	db	32
  1375  00FF57  25                 	db	37
  1376  00FF58  64                 	db	100	;'d'
  1377  00FF59  0A                 	db	10
  1378  00FF5A  00                 	db	0
  1379  00FF5B                     STR_13:
  1380  00FF5B  52                 	db	82	;'R'
  1381  00FF5C  6F                 	db	111	;'o'
  1382  00FF5D  62                 	db	98	;'b'
  1383  00FF5E  6F                 	db	111	;'o'
  1384  00FF5F  74                 	db	116	;'t'
  1385  00FF60  20                 	db	32
  1386  00FF61  52                 	db	82	;'R'
  1387  00FF62  65                 	db	101	;'e'
  1388  00FF63  61                 	db	97	;'a'
  1389  00FF64  64                 	db	100	;'d'
  1390  00FF65  79                 	db	121	;'y'
  1391  00FF66  21                 	db	33
  1392  00FF67  20                 	db	32
  1393  00FF68  0A                 	db	10
  1394  00FF69  0A                 	db	10
  1395  00FF6A  00                 	db	0
  1396  00FF6B                     STR_34:
  1397  00FF6B  0A                 	db	10
  1398  00FF6C  44                 	db	68	;'D'
  1399  00FF6D  65                 	db	101	;'e'
  1400  00FF6E  73                 	db	115	;'s'
  1401  00FF6F  69                 	db	105	;'i'
  1402  00FF70  72                 	db	114	;'r'
  1403  00FF71  65                 	db	101	;'e'
  1404  00FF72  64                 	db	100	;'d'
  1405  00FF73  3A                 	db	58	;':'
  1406  00FF74  20                 	db	32
  1407  00FF75  25                 	db	37
  1408  00FF76  64                 	db	100	;'d'
  1409  00FF77  00                 	db	0
  1410  00FF78                     STR_37:
  1411  00FF78  57                 	db	87	;'W'
  1412  00FF79  41                 	db	65	;'A'
  1413  00FF7A  4C                 	db	76	;'L'
  1414  00FF7B  4C                 	db	76	;'L'
  1415  00FF7C  20                 	db	32
  1416  00FF7D  46                 	db	70	;'F'
  1417  00FF7E  4F                 	db	79	;'O'
  1418  00FF7F  55                 	db	85	;'U'
  1419  00FF80  4E                 	db	78	;'N'
  1420  00FF81  44                 	db	68	;'D'
  1421  00FF82  0A                 	db	10
  1422  00FF83  00                 	db	0
  1423  00FF84  0A                 	db	10
  1424  00FF85  4E                 	db	78	;'N'
  1425  00FF86  4F                 	db	79	;'O'
  1426  00FF87  54                 	db	84	;'T'
  1427  00FF88  48                 	db	72	;'H'
  1428  00FF89  49                 	db	73	;'I'
  1429  00FF8A  4E                 	db	78	;'N'
  1430  00FF8B  47                 	db	71	;'G'
  1431  00FF8C  21                 	db	33
  1432  00FF8D  21                 	db	33
  1433  00FF8E  21                 	db	33
  1434  00FF8F  00                 	db	0
  1435  00FF90                     STR_40:
  1436  00FF90  50                 	db	80	;'P'
  1437  00FF91  6F                 	db	111	;'o'
  1438  00FF92  73                 	db	115	;'s'
  1439  00FF93  3A                 	db	58	;':'
  1440  00FF94  20                 	db	32
  1441  00FF95  25                 	db	37
  1442  00FF96  64                 	db	100	;'d'
  1443  00FF97  2C                 	db	44
  1444  00FF98  20                 	db	32
  1445  00FF99  25                 	db	37
  1446  00FF9A  64                 	db	100	;'d'
  1447  00FF9B  00                 	db	0
  1448  00FF9C  0A                 	db	10
  1449  00FF9D  41                 	db	65	;'A'
  1450  00FF9E  44                 	db	68	;'D'
  1451  00FF9F  43                 	db	67	;'C'
  1452  00FFA0  3A                 	db	58	;':'
  1453  00FFA1  20                 	db	32
  1454  00FFA2  25                 	db	37
  1455  00FFA3  64                 	db	100	;'d'
  1456  00FFA4  20                 	db	32
  1457  00FFA5  0A                 	db	10
  1458  00FFA6  0A                 	db	10
  1459  00FFA7  00                 	db	0
  1460  00FFA8                     STR_35:
  1461  00FFA8  0A                 	db	10
  1462  00FFA9  53                 	db	83	;'S'
  1463  00FFAA  70                 	db	112	;'p'
  1464  00FFAB  65                 	db	101	;'e'
  1465  00FFAC  65                 	db	101	;'e'
  1466  00FFAD  64                 	db	100	;'d'
  1467  00FFAE  3A                 	db	58	;':'
  1468  00FFAF  20                 	db	32
  1469  00FFB0  25                 	db	37
  1470  00FFB1  64                 	db	100	;'d'
  1471  00FFB2  00                 	db	0
  1472  00FFB3                     STR_36:
  1473  00FFB3  0A                 	db	10
  1474  00FFB4  45                 	db	69	;'E'
  1475  00FFB5  72                 	db	114	;'r'
  1476  00FFB6  72                 	db	114	;'r'
  1477  00FFB7  6F                 	db	111	;'o'
  1478  00FFB8  72                 	db	114	;'r'
  1479  00FFB9  3A                 	db	58	;':'
  1480  00FFBA  20                 	db	32
  1481  00FFBB  25                 	db	37
  1482  00FFBC  64                 	db	100	;'d'
  1483  00FFBD  00                 	db	0
  1484  00FFBE  0A                 	db	10
  1485  00FFBF  53                 	db	83	;'S'
  1486  00FFC0  74                 	db	116	;'t'
  1487  00FFC1  65                 	db	101	;'e'
  1488  00FFC2  70                 	db	112	;'p'
  1489  00FFC3  73                 	db	115	;'s'
  1490  00FFC4  20                 	db	32
  1491  00FFC5  25                 	db	37
  1492  00FFC6  64                 	db	100	;'d'
  1493  00FFC7  00                 	db	0
  1494  00FFC8                     STR_31:
  1495  00FFC8  0A                 	db	10
  1496  00FFC9  73                 	db	115	;'s'
  1497  00FFCA  70                 	db	112	;'p'
  1498  00FFCB  64                 	db	100	;'d'
  1499  00FFCC  31                 	db	49	;'1'
  1500  00FFCD  20                 	db	32
  1501  00FFCE  25                 	db	37
  1502  00FFCF  64                 	db	100	;'d'
  1503  00FFD0  00                 	db	0
  1504  00FFD1                     STR_32:
  1505  00FFD1  0A                 	db	10
  1506  00FFD2  73                 	db	115	;'s'
  1507  00FFD3  70                 	db	112	;'p'
  1508  00FFD4  64                 	db	100	;'d'
  1509  00FFD5  32                 	db	50	;'2'
  1510  00FFD6  20                 	db	32
  1511  00FFD7  25                 	db	37
  1512  00FFD8  64                 	db	100	;'d'
  1513  00FFD9  00                 	db	0
  1514  00FFDA  0A                 	db	10
  1515  00FFDB  46                 	db	70	;'F'
  1516  00FFDC  6C                 	db	108	;'l'
  1517  00FFDD  61                 	db	97	;'a'
  1518  00FFDE  67                 	db	103	;'g'
  1519  00FFDF  20                 	db	32
  1520  00FFE0  25                 	db	37
  1521  00FFE1  64                 	db	100	;'d'
  1522  00FFE2  00                 	db	0
  1523  00FFE3                     STR_33:
  1524  00FFE3  0A                 	db	10
  1525  00FFE4  41                 	db	65	;'A'
  1526  00FFE5  44                 	db	68	;'D'
  1527  00FFE6  43                 	db	67	;'C'
  1528  00FFE7  20                 	db	32
  1529  00FFE8  25                 	db	37
  1530  00FFE9  64                 	db	100	;'d'
  1531  00FFEA  00                 	db	0
  1532  00FFEB                     STR_28:
  1533  00FFEB  64                 	db	100	;'d'
  1534  00FFEC  72                 	db	114	;'r'
  1535  00FFED  69                 	db	105	;'i'
  1536  00FFEE  76                 	db	118	;'v'
  1537  00FFEF  69                 	db	105	;'i'
  1538  00FFF0  6E                 	db	110	;'n'
  1539  00FFF1  67                 	db	103	;'g'
  1540  00FFF2  00                 	db	0
  1541  00FFF3                     STR_30:
  1542  00FFF3  25                 	db	37
  1543  00FFF4  64                 	db	100	;'d'
  1544  00FFF5  20                 	db	32
  1545  00FFF6  0A                 	db	10
  1546  00FFF7  00                 	db	0
  1547  00FFF8  25                 	db	37
  1548  00FFF9  64                 	db	100	;'d'
  1549  00FFFA  09                 	db	9
  1550  00FFFB  00                 	db	0
  1551  00FFFC                     STR_1:
  1552  00FFFC  25                 	db	37
  1553  00FFFD  63                 	db	99	;'c'
  1554  00FFFE  00                 	db	0
  1555  0000                     
  1556                           ; #config settings
  1557  00FFFF  00                 	db	0	; dummy byte at the end
  1558  0000                     
  1559                           	psect	cinit
  1560  014142                     __pcinit:
  1561                           	opt stack 0
  1562  014142                     start_initialization:
  1563                           	opt stack 0
  1564  014142                     __initialization:
  1565                           	opt stack 0
  1566                           
  1567                           ; Initialize objects allocated to BANK1 (29 bytes)
  1568                           ; load TBLPTR registers with __pidataBANK1
  1569  014142  0E32               	movlw	low __pidataBANK1
  1570  014144  6EF6               	movwf	tblptrl,c
  1571  014146  0E59               	movlw	high __pidataBANK1
  1572  014148  6EF7               	movwf	tblptrh,c
  1573  01414A  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1574  01414C  6EF8               	movwf	tblptru,c
  1575  01414E  EE01  F0DD         	lfsr	0,__pdataBANK1
  1576  014152  EE10 F01D          	lfsr	1,29
  1577  014156                     copy_data0:
  1578  014156  0009               	tblrd		*+
  1579  014158  CFF5 FFEE          	movff	tablat,postinc0
  1580  01415C  50E5               	movf	postdec1,w,c
  1581  01415E  50E1               	movf	fsr1l,w,c
  1582  014160  E1FA               	bnz	copy_data0
  1583                           
  1584                           ; Initialize objects allocated to COMRAM (10 bytes)
  1585                           ; load TBLPTR registers with __pidataCOMRAM
  1586  014162  0E5C               	movlw	low __pidataCOMRAM
  1587  014164  6EF6               	movwf	tblptrl,c
  1588  014166  0E5B               	movlw	high __pidataCOMRAM
  1589  014168  6EF7               	movwf	tblptrh,c
  1590  01416A  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1591  01416C  6EF8               	movwf	tblptru,c
  1592  01416E  EE00  F047         	lfsr	0,__pdataCOMRAM
  1593  014172  EE10 F00A          	lfsr	1,10
  1594  014176                     copy_data1:
  1595  014176  0009               	tblrd		*+
  1596  014178  CFF5 FFEE          	movff	tablat,postinc0
  1597  01417C  50E5               	movf	postdec1,w,c
  1598  01417E  50E1               	movf	fsr1l,w,c
  1599  014180  E1FA               	bnz	copy_data1
  1600                           
  1601                           ; Clear objects allocated to BIGRAM (300 bytes)
  1602  014182  EE03  F046         	lfsr	0,__pbssBIGRAM
  1603  014186  EE11 F02C          	lfsr	1,300
  1604  01418A                     clear_0:
  1605  01418A  6AEE               	clrf	postinc0,c
  1606  01418C  50E5               	movf	postdec1,w,c
  1607  01418E  50E1               	movf	fsr1l,w,c
  1608  014190  E1FC               	bnz	clear_0
  1609  014192  50E2               	movf	fsr1h,w,c
  1610  014194  E1FA               	bnz	clear_0
  1611                           
  1612                           ; Clear objects allocated to BANK3 (70 bytes)
  1613  014196  EE03  F000         	lfsr	0,__pbssBANK3
  1614  01419A  0E46               	movlw	70
  1615  01419C                     clear_1:
  1616  01419C  6AEE               	clrf	postinc0,c
  1617  01419E  06E8               	decf	wreg,f,c
  1618  0141A0  E1FD               	bnz	clear_1
  1619                           
  1620                           ; Clear objects allocated to BANK2 (218 bytes)
  1621  0141A2  EE02  F000         	lfsr	0,__pbssBANK2
  1622  0141A6  0EDA               	movlw	218
  1623  0141A8                     clear_2:
  1624  0141A8  6AEE               	clrf	postinc0,c
  1625  0141AA  06E8               	decf	wreg,f,c
  1626  0141AC  E1FD               	bnz	clear_2
  1627                           
  1628                           ; Clear objects allocated to BANK1 (221 bytes)
  1629  0141AE  EE01  F000         	lfsr	0,__pbssBANK1
  1630  0141B2  0EDD               	movlw	221
  1631  0141B4                     clear_3:
  1632  0141B4  6AEE               	clrf	postinc0,c
  1633  0141B6  06E8               	decf	wreg,f,c
  1634  0141B8  E1FD               	bnz	clear_3
  1635                           
  1636                           ; Clear objects allocated to BANK0 (3 bytes)
  1637  0141BA  0100               	movlb	0
  1638  0141BC  6BFF               	clrf	(__pbssBANK0+2)& (0+255),b
  1639  0141BE  6BFE               	clrf	(__pbssBANK0+1)& (0+255),b
  1640  0141C0  6BFD               	clrf	__pbssBANK0& (0+255),b
  1641                           
  1642                           ; Clear objects allocated to COMRAM (30 bytes)
  1643  0141C2  EE00  F029         	lfsr	0,__pbssCOMRAM
  1644  0141C6  0E1E               	movlw	30
  1645  0141C8                     clear_4:
  1646  0141C8  6AEE               	clrf	postinc0,c
  1647  0141CA  06E8               	decf	wreg,f,c
  1648  0141CC  E1FD               	bnz	clear_4
  1649  0141CE                     end_of_initialization:
  1650                           	opt stack 0
  1651  0141CE                     __end_of__initialization:
  1652                           	opt stack 0
  1653  0141CE  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1654  0141D0  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1655  0141D2  0100               	movlb	0
  1656  0141D4  EF56  F08F         	goto	_main	;jump to C main() function
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           postdec1	equ	0xFE5
  1664                           fsr1h	equ	0xFE2
  1665                           fsr1l	equ	0xFE1
  1666                           
  1667                           	psect	bssCOMRAM
  1668  000029                     __pbssCOMRAM:
  1669                           	opt stack 0
  1670  000029                     _lQueue:
  1671                           	opt stack 0
  1672  000029                     	ds	3
  1673  00002C                     _Desired_Level:
  1674                           	opt stack 0
  1675  00002C                     	ds	2
  1676  00002E                     _Y_Pos:
  1677                           	opt stack 0
  1678  00002E                     	ds	2
  1679  000030                     _X_Pos:
  1680                           	opt stack 0
  1681  000030                     	ds	2
  1682  000032                     _readIndex:
  1683                           	opt stack 0
  1684  000032                     	ds	2
  1685  000034                     _Found_Flag:
  1686                           	opt stack 0
  1687  000034                     	ds	2
  1688  000036                     _pShiftVal:
  1689                           	opt stack 0
  1690  000036                     	ds	2
  1691  000038                     _COUNTER:
  1692                           	opt stack 0
  1693  000038                     	ds	2
  1694  00003A                     _lCurrent:
  1695                           	opt stack 0
  1696  00003A                     	ds	2
  1697  00003C                     Event_TestButton@j:
  1698                           	opt stack 0
  1699  00003C                     	ds	1
  1700  00003D                     Timer2_Init@PRE:
  1701                           	opt stack 0
  1702  00003D                     	ds	1
  1703  00003E                     Timer2_Init@INDEX:
  1704                           	opt stack 0
  1705  00003E                     	ds	1
  1706  00003F                     Timer0_Init@PRE:
  1707                           	opt stack 0
  1708  00003F                     	ds	1
  1709  000040                     _INDEX:
  1710                           	opt stack 0
  1711  000040                     	ds	1
  1712  000041                     rand@screw:
  1713                           	opt stack 0
  1714  000041                     	ds	1
  1715  000042                     OutSeg@a:
  1716                           	opt stack 0
  1717  000042                     	ds	1
  1718  000043                     OutSeg@segset:
  1719                           	opt stack 0
  1720  000043                     	ds	1
  1721  000044                     OutSeg@cur:
  1722                           	opt stack 0
  1723  000044                     	ds	1
  1724  000045                     _lBufferX:
  1725                           	opt stack 0
  1726  000045                     	ds	1
  1727  000046                     _clearall:
  1728                           	opt stack 0
  1729  000046                     	ds	1
  1730                           tblptru	equ	0xFF8
  1731                           tblptrh	equ	0xFF7
  1732                           tblptrl	equ	0xFF6
  1733                           tablat	equ	0xFF5
  1734                           postinc0	equ	0xFEE
  1735                           wreg	equ	0xFE8
  1736                           postdec1	equ	0xFE5
  1737                           fsr1h	equ	0xFE2
  1738                           fsr1l	equ	0xFE1
  1739                           
  1740                           	psect	dataCOMRAM
  1741  000047                     __pdataCOMRAM:
  1742                           	opt stack 0
  1743  000047                     _gCursor:
  1744                           	opt stack 0
  1745  000047                     	ds	4
  1746  00004B                     _top:
  1747                           	opt stack 0
  1748  00004B                     	ds	2
  1749  00004D                     _Bus_State:
  1750                           	opt stack 0
  1751  00004D                     	ds	1
  1752  00004E                     _change:
  1753                           	opt stack 0
  1754  00004E                     	ds	1
  1755  00004F                     _l:
  1756                           	opt stack 0
  1757  00004F                     	ds	1
  1758  000050                     _w:
  1759                           	opt stack 0
  1760  000050                     	ds	1
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1h	equ	0xFE2
  1769                           fsr1l	equ	0xFE1
  1770                           
  1771                           	psect	bssBANK0
  1772  0000FD                     __pbssBANK0:
  1773                           	opt stack 0
  1774  0000FD                     _lMotor:
  1775                           	opt stack 0
  1776  0000FD                     	ds	2
  1777  0000FF                     _lBufferY:
  1778                           	opt stack 0
  1779  0000FF                     	ds	1
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           postinc0	equ	0xFEE
  1785                           wreg	equ	0xFE8
  1786                           postdec1	equ	0xFE5
  1787                           fsr1h	equ	0xFE2
  1788                           fsr1l	equ	0xFE1
  1789                           
  1790                           	psect	bssBANK1
  1791  000100                     __pbssBANK1:
  1792                           	opt stack 0
  1793  000100                     Timer2_Init@DIV:
  1794                           	opt stack 0
  1795  000100                     	ds	4
  1796  000104                     Timer0_Init@DIV:
  1797                           	opt stack 0
  1798  000104                     	ds	4
  1799  000108                     _gISR:
  1800                           	opt stack 0
  1801  000108                     	ds	3
  1802  00010B                     _lStepFunction:
  1803                           	opt stack 0
  1804  00010B                     	ds	3
  1805  00010E                     _I2C2_More:
  1806                           	opt stack 0
  1807  00010E                     	ds	3
  1808  000111                     _I2C1_More:
  1809                           	opt stack 0
  1810  000111                     	ds	3
  1811  000114                     _I2C2_Done:
  1812                           	opt stack 0
  1813  000114                     	ds	3
  1814  000117                     _I2C1_Done:
  1815                           	opt stack 0
  1816  000117                     	ds	3
  1817  00011A                     _errno:
  1818                           	opt stack 0
  1819  00011A                     	ds	2
  1820  00011C                     _test:
  1821                           	opt stack 0
  1822  00011C                     	ds	2
  1823  00011E                     _timercount:
  1824                           	opt stack 0
  1825  00011E                     	ds	2
  1826  000120                     _Sensor_Observe_Fin:
  1827                           	opt stack 0
  1828  000120                     	ds	2
  1829  000122                     _CW_Count:
  1830                           	opt stack 0
  1831  000122                     	ds	2
  1832  000124                     _CCW_Count:
  1833                           	opt stack 0
  1834  000124                     	ds	2
  1835  000126                     _count:
  1836                           	opt stack 0
  1837  000126                     	ds	2
  1838  000128                     _Close_Pos:
  1839                           	opt stack 0
  1840  000128                     	ds	2
  1841  00012A                     _ADC_Reading:
  1842                           	opt stack 0
  1843  00012A                     	ds	2
  1844  00012C                     _BumpState:
  1845                           	opt stack 0
  1846  00012C                     	ds	2
  1847  00012E                     _mod:
  1848                           	opt stack 0
  1849  00012E                     	ds	2
  1850  000130                     _Square_Dist:
  1851                           	opt stack 0
  1852  000130                     	ds	2
  1853  000132                     _T_VAR:
  1854                           	opt stack 0
  1855  000132                     	ds	2
  1856  000134                     _VictimCount:
  1857                           	opt stack 0
  1858  000134                     	ds	2
  1859  000136                     _flag:
  1860                           	opt stack 0
  1861  000136                     	ds	2
  1862  000138                     _Previous_Angle:
  1863                           	opt stack 0
  1864  000138                     	ds	2
  1865  00013A                     _k:
  1866                           	opt stack 0
  1867  00013A                     	ds	2
  1868  00013C                     _x:
  1869                           	opt stack 0
  1870  00013C                     	ds	2
  1871  00013E                     _average:
  1872                           	opt stack 0
  1873  00013E                     	ds	2
  1874  000140                     _total:
  1875                           	opt stack 0
  1876  000140                     	ds	2
  1877  000142                     _thisReading:
  1878                           	opt stack 0
  1879  000142                     	ds	2
  1880  000144                     _Steps:
  1881                           	opt stack 0
  1882  000144                     	ds	2
  1883  000146                     _Motor_Count:
  1884                           	opt stack 0
  1885  000146                     	ds	2
  1886  000148                     _mode:
  1887                           	opt stack 0
  1888  000148                     	ds	2
  1889  00014A                     _Current_Dist2:
  1890                           	opt stack 0
  1891  00014A                     	ds	2
  1892  00014C                     _Current_Dist1:
  1893                           	opt stack 0
  1894  00014C                     	ds	2
  1895  00014E                     _Current_Dist:
  1896                           	opt stack 0
  1897  00014E                     	ds	2
  1898  000150                     _val:
  1899                           	opt stack 0
  1900  000150                     	ds	2
  1901  000152                     HMI_GRender@a:
  1902                           	opt stack 0
  1903  000152                     	ds	2
  1904  000154                     _gBackcolour:
  1905                           	opt stack 0
  1906  000154                     	ds	2
  1907  000156                     SPI_Send9@dat:
  1908                           	opt stack 0
  1909  000156                     	ds	2
  1910  000158                     _Cliff_Left:
  1911                           	opt stack 0
  1912  000158                     	ds	1
  1913  000159                     _Cliff_Right:
  1914                           	opt stack 0
  1915  000159                     	ds	1
  1916  00015A                     _Cliff_FLeft:
  1917                           	opt stack 0
  1918  00015A                     	ds	1
  1919  00015B                     _Cliff_FRight:
  1920                           	opt stack 0
  1921  00015B                     	ds	1
  1922  00015C                     _BumpSensor:
  1923                           	opt stack 0
  1924  00015C                     	ds	1
  1925  00015D                     _u:
  1926                           	opt stack 0
  1927  00015D                     	ds	1
  1928  00015E                     _j:
  1929                           	opt stack 0
  1930  00015E                     	ds	1
  1931  00015F                     _i:
  1932                           	opt stack 0
  1933  00015F                     	ds	1
  1934  000160                     _ADC_Initialised:
  1935                           	opt stack 0
  1936  000160                     	ds	1
  1937  000161                     _SPI1:
  1938                           	opt stack 0
  1939  000161                     	ds	11
  1940  00016C                     _SPI2:
  1941                           	opt stack 0
  1942  00016C                     	ds	11
  1943  000177                     _PortG:
  1944                           	opt stack 0
  1945  000177                     	ds	10
  1946  000181                     _PortE:
  1947                           	opt stack 0
  1948  000181                     	ds	10
  1949  00018B                     _PortD:
  1950                           	opt stack 0
  1951  00018B                     	ds	10
  1952  000195                     _PortB:
  1953                           	opt stack 0
  1954  000195                     	ds	10
  1955  00019F                     _PortC:
  1956                           	opt stack 0
  1957  00019F                     	ds	10
  1958  0001A9                     _PortF:
  1959                           	opt stack 0
  1960  0001A9                     	ds	10
  1961  0001B3                     _I2C2T:
  1962                           	opt stack 0
  1963  0001B3                     	ds	7
  1964  0001BA                     _I2C1T:
  1965                           	opt stack 0
  1966  0001BA                     	ds	7
  1967  0001C1                     _ADC_AN3:
  1968                           	opt stack 0
  1969  0001C1                     	ds	5
  1970  0001C6                     _ADC_AN2:
  1971                           	opt stack 0
  1972  0001C6                     	ds	5
  1973  0001CB                     _ADC_AN1:
  1974                           	opt stack 0
  1975  0001CB                     	ds	5
  1976  0001D0                     _ADC_AN0:
  1977                           	opt stack 0
  1978  0001D0                     	ds	5
  1979  0001D5                     LCD_DrawRectangle@p4:
  1980                           	opt stack 0
  1981  0001D5                     	ds	4
  1982  0001D9                     LCD_DrawRectangle@p2:
  1983                           	opt stack 0
  1984  0001D9                     	ds	4
  1985                           tblptru	equ	0xFF8
  1986                           tblptrh	equ	0xFF7
  1987                           tblptrl	equ	0xFF6
  1988                           tablat	equ	0xFF5
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           postdec1	equ	0xFE5
  1992                           fsr1h	equ	0xFE2
  1993                           fsr1l	equ	0xFE1
  1994                           
  1995                           	psect	dataBANK1
  1996  0001DD                     __pdataBANK1:
  1997                           	opt stack 0
  1998  0001DD                     Console_Render@F6956:
  1999                           	opt stack 0
  2000  0001DD                     	ds	4
  2001  0001E1                     _gLineSize:
  2002                           	opt stack 0
  2003  0001E1                     	ds	4
  2004  0001E5                     _gCharSize:
  2005                           	opt stack 0
  2006  0001E5                     	ds	4
  2007  0001E9                     _countOff:
  2008                           	opt stack 0
  2009  0001E9                     	ds	2
  2010  0001EB                     _countOn:
  2011                           	opt stack 0
  2012  0001EB                     	ds	2
  2013  0001ED                     _Low_Sensor:
  2014                           	opt stack 0
  2015  0001ED                     	ds	2
  2016  0001EF                     _Spd:
  2017                           	opt stack 0
  2018  0001EF                     	ds	2
  2019  0001F1                     _numReadings:
  2020                           	opt stack 0
  2021  0001F1                     	ds	2
  2022  0001F3                     _Current_Direction:
  2023                           	opt stack 0
  2024  0001F3                     	ds	2
  2025  0001F5                     _gForecolour:
  2026                           	opt stack 0
  2027  0001F5                     	ds	2
  2028  0001F7                     	ds	1
  2029  0001F8                     	ds	1
  2030  0001F9                     	ds	1
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           postinc0	equ	0xFEE
  2036                           wreg	equ	0xFE8
  2037                           postdec1	equ	0xFE5
  2038                           fsr1h	equ	0xFE2
  2039                           fsr1l	equ	0xFE1
  2040                           
  2041                           	psect	bssBANK2
  2042  000200                     __pbssBANK2:
  2043                           	opt stack 0
  2044  000200                     Init_Pos_Array@F7095:
  2045                           	opt stack 0
  2046  000200                     	ds	40
  2047  000228                     _stack:
  2048                           	opt stack 0
  2049  000228                     	ds	40
  2050  000250                     _lCBuffer:
  2051                           	opt stack 0
  2052  000250                     	ds	30
  2053  00026E                     _readings:
  2054                           	opt stack 0
  2055  00026E                     	ds	20
  2056  000282                     _HMIBoard:
  2057                           	opt stack 0
  2058  000282                     	ds	58
  2059  0002BC                     _DIPSwitch:
  2060                           	opt stack 0
  2061  0002BC                     	ds	10
  2062  0002C6                     _TestButton:
  2063                           	opt stack 0
  2064  0002C6                     	ds	10
  2065  0002D0                     _PortA:
  2066                           	opt stack 0
  2067  0002D0                     	ds	10
  2068                           tblptru	equ	0xFF8
  2069                           tblptrh	equ	0xFF7
  2070                           tblptrl	equ	0xFF6
  2071                           tablat	equ	0xFF5
  2072                           postinc0	equ	0xFEE
  2073                           wreg	equ	0xFE8
  2074                           postdec1	equ	0xFE5
  2075                           fsr1h	equ	0xFE2
  2076                           fsr1l	equ	0xFE1
  2077                           
  2078                           	psect	bssBANK3
  2079  000300                     __pbssBANK3:
  2080                           	opt stack 0
  2081  000300                     Console_MakeField@Fill:
  2082                           	opt stack 0
  2083  000300                     	ds	70
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           postdec1	equ	0xFE5
  2091                           fsr1h	equ	0xFE2
  2092                           fsr1l	equ	0xFE1
  2093                           
  2094                           	psect	bssBIGRAM
  2095  000346                     __pbssBIGRAM:
  2096                           	opt stack 0
  2097  000346                     _lBuffer:
  2098                           	opt stack 0
  2099  000346                     	ds	300
  2100                           tblptru	equ	0xFF8
  2101                           tblptrh	equ	0xFF7
  2102                           tblptrl	equ	0xFF6
  2103                           tablat	equ	0xFF5
  2104                           postinc0	equ	0xFEE
  2105                           wreg	equ	0xFE8
  2106                           postdec1	equ	0xFE5
  2107                           fsr1h	equ	0xFE2
  2108                           fsr1l	equ	0xFE1
  2109                           
  2110                           	psect	cstackBANK2
  2111  0002DA                     __pcstackBANK2:
  2112                           	opt stack 0
  2113  0002DA                     Travel@Dir:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x0
  2117  0002DA                     	ds	2
  2118  0002DC                     Travel@spd1:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x2
  2122  0002DC                     	ds	2
  2123  0002DE                     Travel@spd2:
  2124                           	opt stack 0
  2125                           
  2126                           ; 2 bytes @ 0x4
  2127  0002DE                     	ds	2
  2128  0002E0                     Travel@rev_Dist:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x6
  2132  0002E0                     	ds	2
  2133  0002E2                     Travel@Dist_Travelled:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x8
  2137  0002E2                     	ds	2
  2138  0002E4                     Travel@Req_Dir:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0xA
  2142  0002E4                     	ds	2
  2143  0002E6                     Travel@error:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0xC
  2147  0002E6                     	ds	2
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           postinc0	equ	0xFEE
  2153                           wreg	equ	0xFE8
  2154                           postdec1	equ	0xFE5
  2155                           fsr1h	equ	0xFE2
  2156                           fsr1l	equ	0xFE1
  2157                           
  2158                           	psect	cstackBANK1
  2159  0001FA                     __pcstackBANK1:
  2160                           	opt stack 0
  2161  0001FA                     main@down:
  2162                           	opt stack 0
  2163                           
  2164                           ; 1 bytes @ 0x0
  2165  0001FA                     	ds	1
  2166  0001FB                     main@right:
  2167                           	opt stack 0
  2168                           
  2169                           ; 1 bytes @ 0x1
  2170  0001FB                     	ds	1
  2171  0001FC                     main@up:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0x2
  2175  0001FC                     	ds	1
  2176  0001FD                     main@left:
  2177                           	opt stack 0
  2178                           
  2179                           ; 1 bytes @ 0x3
  2180  0001FD                     	ds	1
  2181  0001FE                     main@r:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x4
  2185  0001FE                     	ds	2
  2186                           tblptru	equ	0xFF8
  2187                           tblptrh	equ	0xFF7
  2188                           tblptrl	equ	0xFF6
  2189                           tablat	equ	0xFF5
  2190                           postinc0	equ	0xFEE
  2191                           wreg	equ	0xFE8
  2192                           postdec1	equ	0xFE5
  2193                           fsr1h	equ	0xFE2
  2194                           fsr1l	equ	0xFE1
  2195                           
  2196                           	psect	cstackBANK0
  2197  000060                     __pcstackBANK0:
  2198                           	opt stack 0
  2199  000060                     ??_Console_ClearCursor:
  2200  000060                     ??_InitADC:
  2201  000060                     ??_Console_Init:
  2202  000060                     ??_Console_NewLine:
  2203  000060                     ??_Console_FormFeed:
  2204  000060                     ??_HMI_SetButton:
  2205  000060                     ?_GetPortProperties:
  2206                           	opt stack 0
  2207  000060                     ?_GetPortPORT:
  2208                           	opt stack 0
  2209  000060                     ?_GetPortTRIS:
  2210                           	opt stack 0
  2211  000060                     ?_FunctReadADC:
  2212                           	opt stack 0
  2213  000060                     ?___wmul:
  2214                           	opt stack 0
  2215  000060                     ?___awdiv:
  2216                           	opt stack 0
  2217  000060                     ?___lwdiv:
  2218                           	opt stack 0
  2219  000060                     ?___fldiv:
  2220                           	opt stack 0
  2221  000060                     ?_frexp:
  2222                           	opt stack 0
  2223  000060                     ?___lldiv:
  2224                           	opt stack 0
  2225  000060                     ?___xxtofl:
  2226                           	opt stack 0
  2227  000060                     Mode_Set@pMode:
  2228                           	opt stack 0
  2229  000060                     ToSegment@pCHR:
  2230                           	opt stack 0
  2231  000060                     HMI_SetBar@pValue:
  2232                           	opt stack 0
  2233  000060                     eusartSend@sendChar:
  2234                           	opt stack 0
  2235  000060                     Port_GetPin@pInput:
  2236                           	opt stack 0
  2237  000060                     Port_GetQuad@pInput:
  2238                           	opt stack 0
  2239  000060                     SPI_DisableISR@pInput:
  2240                           	opt stack 0
  2241  000060                     SPI_DCS@pInput:
  2242                           	opt stack 0
  2243  000060                     SPI_Send@pInput:
  2244                           	opt stack 0
  2245  000060                     Byte_SetBit@pInput:
  2246                           	opt stack 0
  2247  000060                     Byte_GetBit@pInput:
  2248                           	opt stack 0
  2249  000060                     Byte_SetZone@pInput:
  2250                           	opt stack 0
  2251  000060                     Byte_GetZone@pInput:
  2252                           	opt stack 0
  2253  000060                     Byte_SetByte@pInput:
  2254                           	opt stack 0
  2255  000060                     delay_ms@ms:
  2256                           	opt stack 0
  2257  000060                     delay_us@us:
  2258                           	opt stack 0
  2259  000060                     reverse@input:
  2260                           	opt stack 0
  2261  000060                     FunctReadADC@channel:
  2262                           	opt stack 0
  2263  000060                     ___wmul@multiplier:
  2264                           	opt stack 0
  2265  000060                     ___awdiv@dividend:
  2266                           	opt stack 0
  2267  000060                     ___lwdiv@dividend:
  2268                           	opt stack 0
  2269  000060                     MXK_Queue@pCallback:
  2270                           	opt stack 0
  2271  000060                     ___flge@ff1:
  2272                           	opt stack 0
  2273  000060                     ___lldiv@dividend:
  2274                           	opt stack 0
  2275  000060                     ___fldiv@b:
  2276                           	opt stack 0
  2277  000060                     ___xxtofl@val:
  2278                           	opt stack 0
  2279  000060                     frexp@value:
  2280                           	opt stack 0
  2281                           
  2282                           ; 4 bytes @ 0x0
  2283  000060                     	ds	1
  2284  000061                     ?_UpdateDistance:
  2285                           	opt stack 0
  2286  000061                     ?_Get_VirtualWall_State:
  2287                           	opt stack 0
  2288  000061                     HMI_SetSegments@pString:
  2289                           	opt stack 0
  2290  000061                     Drive@SpeedL:
  2291                           	opt stack 0
  2292  000061                     Turn@Angle:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x1
  2296  000061                     	ds	1
  2297  000062                     GetPortProperties@pInput:
  2298                           	opt stack 0
  2299  000062                     GetPortPORT@pInput:
  2300                           	opt stack 0
  2301  000062                     GetPortTRIS@pInput:
  2302                           	opt stack 0
  2303  000062                     Port_GetPin@pPin:
  2304                           	opt stack 0
  2305  000062                     Port_GetQuad@pQuad:
  2306                           	opt stack 0
  2307  000062                     SPI_Send@pData:
  2308                           	opt stack 0
  2309  000062                     Byte_SetBit@pBit:
  2310                           	opt stack 0
  2311  000062                     Byte_GetBit@pBit:
  2312                           	opt stack 0
  2313  000062                     Byte_SetZone@pMax:
  2314                           	opt stack 0
  2315  000062                     Byte_GetZone@pMax:
  2316                           	opt stack 0
  2317  000062                     Byte_SetByte@pValue:
  2318                           	opt stack 0
  2319  000062                     Console_Init@x:
  2320                           	opt stack 0
  2321  000062                     Console_FormFeed@x:
  2322                           	opt stack 0
  2323  000062                     reverse@length:
  2324                           	opt stack 0
  2325  000062                     ___wmul@multiplicand:
  2326                           	opt stack 0
  2327  000062                     ___awdiv@divisor:
  2328                           	opt stack 0
  2329  000062                     ___lwdiv@divisor:
  2330                           	opt stack 0
  2331  000062                     delay_ms@u:
  2332                           	opt stack 0
  2333  000062                     delay_us@u:
  2334                           	opt stack 0
  2335  000062                     HMI_SetButton@reindex:
  2336                           	opt stack 0
  2337                           
  2338                           ; 4 bytes @ 0x2
  2339  000062                     	ds	1
  2340  000063                     ??_UpdateDistance:
  2341  000063                     ??_Port_GetPin:
  2342  000063                     ??_Port_GetQuad:
  2343  000063                     ??_Byte_GetBit:
  2344  000063                     ??_Get_VirtualWall_State:
  2345  000063                     LCD_Write@mode:
  2346                           	opt stack 0
  2347  000063                     Byte_SetBit@pValue:
  2348                           	opt stack 0
  2349  000063                     Byte_SetZone@pChunk:
  2350                           	opt stack 0
  2351  000063                     Byte_GetZone@pChunk:
  2352                           	opt stack 0
  2353  000063                     Console_Init@y:
  2354                           	opt stack 0
  2355  000063                     Console_FormFeed@y:
  2356                           	opt stack 0
  2357  000063                     OutSeg@pSegment:
  2358                           	opt stack 0
  2359  000063                     Drive@SpeedR:
  2360                           	opt stack 0
  2361  000063                     Turn@Speed:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x3
  2365  000063                     	ds	1
  2366  000064                     ??_Byte_SetBit:
  2367  000064                     ??_Console_IncrementCursor:
  2368  000064                     ??_OutSeg:
  2369  000064                     ??___xxtofl:
  2370  000064                     LCD_Write@value:
  2371                           	opt stack 0
  2372  000064                     Byte_GetBit@Output:
  2373                           	opt stack 0
  2374  000064                     Byte_SetZone@pChunkSize:
  2375                           	opt stack 0
  2376  000064                     Byte_GetZone@pChunkSize:
  2377                           	opt stack 0
  2378  000064                     reverse@tempVar:
  2379                           	opt stack 0
  2380  000064                     ___awdiv@counter:
  2381                           	opt stack 0
  2382  000064                     ___lwdiv@counter:
  2383                           	opt stack 0
  2384  000064                     HMI_SetSegments@in:
  2385                           	opt stack 0
  2386  000064                     Get_VirtualWall_State@Vitual_Wall_Sensor:
  2387                           	opt stack 0
  2388  000064                     ___wmul@product:
  2389                           	opt stack 0
  2390  000064                     frexp@eptr:
  2391                           	opt stack 0
  2392  000064                     ___flge@ff2:
  2393                           	opt stack 0
  2394  000064                     ___lldiv@divisor:
  2395                           	opt stack 0
  2396  000064                     ___fldiv@a:
  2397                           	opt stack 0
  2398                           
  2399                           ; 4 bytes @ 0x4
  2400  000064                     	ds	1
  2401  000065                     ??_Byte_GetZone:
  2402  000065                     ?_Console_MakeField:
  2403                           	opt stack 0
  2404  000065                     Set_Addr_Window@ys:
  2405                           	opt stack 0
  2406  000065                     Set_Rotation@m:
  2407                           	opt stack 0
  2408  000065                     Port_GetPin@Output:
  2409                           	opt stack 0
  2410  000065                     Port_GetQuad@Output:
  2411                           	opt stack 0
  2412  000065                     Byte_SetZone@pValue:
  2413                           	opt stack 0
  2414  000065                     ___awdiv@sign:
  2415                           	opt stack 0
  2416  000065                     LCD_Word_Write@value:
  2417                           	opt stack 0
  2418  000065                     reverse@iterator:
  2419                           	opt stack 0
  2420  000065                     Turn@Dir:
  2421                           	opt stack 0
  2422  000065                     ___lwdiv@quotient:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0x5
  2426  000065                     	ds	1
  2427  000066                     ??_frexp:
  2428  000066                     ??_Byte_SetZone:
  2429  000066                     Set_Addr_Window@xe:
  2430                           	opt stack 0
  2431  000066                     Set_Rotation@rotation:
  2432                           	opt stack 0
  2433  000066                     Byte_GetZone@MASK:
  2434                           	opt stack 0
  2435  000066                     OutSeg@pInput:
  2436                           	opt stack 0
  2437  000066                     HMI_SetButton@pValue:
  2438                           	opt stack 0
  2439  000066                     MXK_BlockSwitchTo@CUR:
  2440                           	opt stack 0
  2441  000066                     MXK_SwitchTo@CUR:
  2442                           	opt stack 0
  2443  000066                     ___awdiv@quotient:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0x6
  2447  000066                     	ds	1
  2448  000067                     ??_Console_MakeField:
  2449  000067                     ?___lwmod:
  2450                           	opt stack 0
  2451  000067                     Set_Addr_Window@ye:
  2452                           	opt stack 0
  2453  000067                     Byte_GetZone@Offset:
  2454                           	opt stack 0
  2455  000067                     OutSeg@out:
  2456                           	opt stack 0
  2457  000067                     HMI_SetButton@v:
  2458                           	opt stack 0
  2459  000067                     MXK_BlockSwitchTo@pModule:
  2460                           	opt stack 0
  2461  000067                     MXK_SwitchTo@pModule:
  2462                           	opt stack 0
  2463  000067                     Turn@C_Angle:
  2464                           	opt stack 0
  2465  000067                     ___lwmod@dividend:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0x7
  2469  000067                     	ds	1
  2470  000068                     ??___fldiv:
  2471  000068                     ??_Console_Tab:
  2472  000068                     ??___flge:
  2473  000068                     Set_Addr_Window@xs:
  2474                           	opt stack 0
  2475  000068                     Byte_GetZone@Output:
  2476                           	opt stack 0
  2477  000068                     ___xxtofl@sign:
  2478                           	opt stack 0
  2479  000068                     HMI_Render@a:
  2480                           	opt stack 0
  2481  000068                     ___lldiv@quotient:
  2482                           	opt stack 0
  2483                           
  2484                           ; 4 bytes @ 0x8
  2485  000068                     	ds	1
  2486  000069                     Byte_SetZone@Offset:
  2487                           	opt stack 0
  2488  000069                     ___xxtofl@exp:
  2489                           	opt stack 0
  2490  000069                     LCD_Fill@pColour:
  2491                           	opt stack 0
  2492  000069                     LCD_FillRectangle@pColour:
  2493                           	opt stack 0
  2494  000069                     Byte_GetPair@pInput:
  2495                           	opt stack 0
  2496  000069                     Console_MakeField@Index:
  2497                           	opt stack 0
  2498  000069                     Turn@Rad:
  2499                           	opt stack 0
  2500  000069                     ___lwmod@divisor:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0x9
  2504  000069                     	ds	1
  2505  00006A                     Byte_SetZone@MASK:
  2506                           	opt stack 0
  2507  00006A                     ___xxtofl@arg:
  2508                           	opt stack 0
  2509                           
  2510                           ; 4 bytes @ 0xA
  2511  00006A                     	ds	1
  2512  00006B                     LCD_Fill@i:
  2513                           	opt stack 0
  2514  00006B                     Byte_GetPair@pPair:
  2515                           	opt stack 0
  2516  00006B                     Console_MakeField@pInput:
  2517                           	opt stack 0
  2518  00006B                     ___lwmod@counter:
  2519                           	opt stack 0
  2520  00006B                     Byte_SetPair@pInput:
  2521                           	opt stack 0
  2522  00006B                     Byte_SetQuad@pInput:
  2523                           	opt stack 0
  2524  00006B                     LCD_FillRectangle@pPoint:
  2525                           	opt stack 0
  2526                           
  2527                           ; 4 bytes @ 0xB
  2528  00006B                     	ds	1
  2529  00006C                     LCD_Fill@j:
  2530                           	opt stack 0
  2531  00006C                     ___lldiv@counter:
  2532                           	opt stack 0
  2533  00006C                     ___fldiv@sign:
  2534                           	opt stack 0
  2535  00006C                     Word_GetPair@pInput:
  2536                           	opt stack 0
  2537  00006C                     itos@input:
  2538                           	opt stack 0
  2539  00006C                     Console_MakeField@Column:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0xC
  2543  00006C                     	ds	1
  2544  00006D                     Byte_SetPair@pPair:
  2545                           	opt stack 0
  2546  00006D                     Byte_SetQuad@pQuad:
  2547                           	opt stack 0
  2548  00006D                     Console_Tab@t:
  2549                           	opt stack 0
  2550  00006D                     Timer2_Init@pFrequency:
  2551                           	opt stack 0
  2552  00006D                     ___fldiv@rem:
  2553                           	opt stack 0
  2554                           
  2555                           ; 4 bytes @ 0xD
  2556  00006D                     	ds	1
  2557  00006E                     ?___flmul:
  2558                           	opt stack 0
  2559  00006E                     Byte_SetPair@pValue:
  2560                           	opt stack 0
  2561  00006E                     Byte_SetQuad@pValue:
  2562                           	opt stack 0
  2563  00006E                     Word_GetPair@pPair:
  2564                           	opt stack 0
  2565  00006E                     Console_Tab@i:
  2566                           	opt stack 0
  2567  00006E                     itos@destination:
  2568                           	opt stack 0
  2569  00006E                     _Console_MakeField$10974:
  2570                           	opt stack 0
  2571  00006E                     ___flmul@b:
  2572                           	opt stack 0
  2573                           
  2574                           ; 4 bytes @ 0xE
  2575  00006E                     	ds	1
  2576  00006F                     Console_Tab@c:
  2577                           	opt stack 0
  2578  00006F                     Port_SetPin@pInput:
  2579                           	opt stack 0
  2580  00006F                     Port_Set@pInput:
  2581                           	opt stack 0
  2582  00006F                     SPI_MinSpeed@pInput:
  2583                           	opt stack 0
  2584  00006F                     SPI_MaxSpeed@pInput:
  2585                           	opt stack 0
  2586  00006F                     Word_SetPair@pInput:
  2587                           	opt stack 0
  2588  00006F                     PortProperty_Valid@pInput:
  2589                           	opt stack 0
  2590  00006F                     LCD_FillRectangle@pSize:
  2591                           	opt stack 0
  2592                           
  2593                           ; 4 bytes @ 0xF
  2594  00006F                     	ds	1
  2595  000070                     ??_Console_PrintChar:
  2596  000070                     Console_MakeField@x:
  2597                           	opt stack 0
  2598  000070                     itos@Data:
  2599                           	opt stack 0
  2600                           
  2601                           ; 2 bytes @ 0x10
  2602  000070                     	ds	1
  2603  000071                     ??_Timer2_Init:
  2604  000071                     Port_SetPin@pPin:
  2605                           	opt stack 0
  2606  000071                     Port_Set@pValue:
  2607                           	opt stack 0
  2608  000071                     Word_SetPair@pPair:
  2609                           	opt stack 0
  2610  000071                     PortProperty_Valid@pPinDrive:
  2611                           	opt stack 0
  2612  000071                     Console_MakeField@y:
  2613                           	opt stack 0
  2614  000071                     ___fldiv@new_exp:
  2615                           	opt stack 0
  2616                           
  2617                           ; 2 bytes @ 0x11
  2618  000071                     	ds	1
  2619  000072                     ??_Port_Set:
  2620  000072                     Port_SetPin@pValue:
  2621                           	opt stack 0
  2622  000072                     Word_SetPair@pValue:
  2623                           	opt stack 0
  2624  000072                     PortProperty_Valid@pPin:
  2625                           	opt stack 0
  2626  000072                     LCD_DrawField@pField:
  2627                           	opt stack 0
  2628  000072                     itos@Length:
  2629                           	opt stack 0
  2630  000072                     Timer2_Init@RDIV:
  2631                           	opt stack 0
  2632  000072                     ___flmul@a:
  2633                           	opt stack 0
  2634                           
  2635                           ; 4 bytes @ 0x12
  2636  000072                     	ds	1
  2637  000073                     ??_PortProperty_Valid:
  2638  000073                     ??_LCD_FillRectangle:
  2639  000073                     Port_SetPin@Type:
  2640                           	opt stack 0
  2641  000073                     Console_PrintChar@pInput:
  2642                           	opt stack 0
  2643  000073                     ___fldiv@grs:
  2644                           	opt stack 0
  2645                           
  2646                           ; 4 bytes @ 0x13
  2647  000073                     	ds	1
  2648  000074                     LED_Set@pValue:
  2649                           	opt stack 0
  2650  000074                     putch@c:
  2651                           	opt stack 0
  2652  000074                     Port_TogglePin@pInput:
  2653                           	opt stack 0
  2654  000074                     itos@Out:
  2655                           	opt stack 0
  2656  000074                     LCD_DrawField@pPoint:
  2657                           	opt stack 0
  2658                           
  2659                           ; 4 bytes @ 0x14
  2660  000074                     	ds	1
  2661  000075                     ?_printf:
  2662                           	opt stack 0
  2663  000075                     LCD_FillRectangle@i:
  2664                           	opt stack 0
  2665  000075                     LED_Set@pLED:
  2666                           	opt stack 0
  2667  000075                     printf@f:
  2668                           	opt stack 0
  2669  000075                     PortProperty_Valid@Errors:
  2670                           	opt stack 0
  2671                           
  2672                           ; 16 bytes @ 0x15
  2673  000075                     	ds	1
  2674  000076                     ??___flmul:
  2675  000076                     LCD_FillRectangle@j:
  2676                           	opt stack 0
  2677  000076                     Port_TogglePin@pPin:
  2678                           	opt stack 0
  2679  000076                     HMI_SetNumber@pInput:
  2680                           	opt stack 0
  2681  000076                     Timer2_Init@pCPUClock:
  2682                           	opt stack 0
  2683                           
  2684                           ; 4 bytes @ 0x16
  2685  000076                     	ds	1
  2686  000077                     Port_TogglePin@Value:
  2687                           	opt stack 0
  2688  000077                     ___fldiv@bexp:
  2689                           	opt stack 0
  2690                           
  2691                           ; 1 bytes @ 0x17
  2692  000077                     	ds	1
  2693  000078                     LED_Toggle@pLED:
  2694                           	opt stack 0
  2695  000078                     ___fldiv@aexp:
  2696                           	opt stack 0
  2697  000078                     LCD_DrawField@pSize:
  2698                           	opt stack 0
  2699                           
  2700                           ; 4 bytes @ 0x18
  2701  000078                     	ds	1
  2702  000079                     Event_DIPSwitch@pState:
  2703                           	opt stack 0
  2704  000079                     Event_TestButton@pState:
  2705                           	opt stack 0
  2706                           
  2707                           ; 1 bytes @ 0x19
  2708  000079                     	ds	1
  2709  00007A                     Event_DIPSwitch@Bar:
  2710                           	opt stack 0
  2711  00007A                     ___flmul@sign:
  2712                           	opt stack 0
  2713  00007A                     Timer2_Init@DIVIDE:
  2714                           	opt stack 0
  2715                           
  2716                           ; 4 bytes @ 0x1A
  2717  00007A                     	ds	1
  2718  00007B                     ??_printf:
  2719  00007B                     ___flmul@aexp:
  2720                           	opt stack 0
  2721  00007B                     Button_Poll@pButton:
  2722                           	opt stack 0
  2723                           
  2724                           ; 2 bytes @ 0x1B
  2725  00007B                     	ds	1
  2726  00007C                     ??_LCD_DrawField:
  2727  00007C                     printf@flag:
  2728                           	opt stack 0
  2729  00007C                     ___flmul@grs:
  2730                           	opt stack 0
  2731                           
  2732                           ; 4 bytes @ 0x1C
  2733  00007C                     	ds	1
  2734  00007D                     Button_Poll@pIncrement:
  2735                           	opt stack 0
  2736  00007D                     printf@prec:
  2737                           	opt stack 0
  2738                           
  2739                           ; 1 bytes @ 0x1D
  2740  00007D                     	ds	1
  2741  00007E                     ??_Button_Poll:
  2742  00007E                     LCD_DrawField@count:
  2743                           	opt stack 0
  2744  00007E                     printf@ap:
  2745                           	opt stack 0
  2746                           
  2747                           ; 2 bytes @ 0x1E
  2748  00007E                     	ds	2
  2749  000080                     LCD_DrawField@xmax:
  2750                           	opt stack 0
  2751  000080                     ___flmul@bexp:
  2752                           	opt stack 0
  2753  000080                     printf@val:
  2754                           	opt stack 0
  2755                           
  2756                           ; 2 bytes @ 0x20
  2757  000080                     	ds	1
  2758  000081                     LCD_DrawField@ymax:
  2759                           	opt stack 0
  2760  000081                     ___flmul@prod:
  2761                           	opt stack 0
  2762                           
  2763                           ; 4 bytes @ 0x21
  2764  000081                     	ds	1
  2765  000082                     LCD_DrawField@i:
  2766                           	opt stack 0
  2767  000082                     printf@c:
  2768                           	opt stack 0
  2769  000082                     Port_Set@TypeRequired:
  2770                           	opt stack 0
  2771                           
  2772                           ; 2 bytes @ 0x22
  2773  000082                     	ds	1
  2774  000083                     ??_Console_Render:
  2775  000083                     Button_Poll@Pin:
  2776                           	opt stack 0
  2777                           
  2778                           ; 1 bytes @ 0x23
  2779  000083                     	ds	1
  2780  000084                     Port_Set@TypeActual:
  2781                           	opt stack 0
  2782                           
  2783                           ; 2 bytes @ 0x24
  2784  000084                     	ds	1
  2785  000085                     PortProperty_Valid@Pair:
  2786                           	opt stack 0
  2787  000085                     Console_Render@temp:
  2788                           	opt stack 0
  2789  000085                     ___flmul@temp:
  2790                           	opt stack 0
  2791                           
  2792                           ; 2 bytes @ 0x25
  2793  000085                     	ds	1
  2794  000086                     Port_Set@Type:
  2795                           	opt stack 0
  2796  000086                     Port_CheckPairType@pInput:
  2797                           	opt stack 0
  2798  000086                     Port_SetPinType@pInput:
  2799                           	opt stack 0
  2800  000086                     Console_Render@lCursor:
  2801                           	opt stack 0
  2802                           
  2803                           ; 4 bytes @ 0x26
  2804  000086                     	ds	1
  2805  000087                     ?___flneg:
  2806                           	opt stack 0
  2807  000087                     ___flneg@f1:
  2808                           	opt stack 0
  2809                           
  2810                           ; 4 bytes @ 0x27
  2811  000087                     	ds	1
  2812  000088                     Port_CheckPairType@pPair:
  2813                           	opt stack 0
  2814  000088                     Port_SetPinType@pPin:
  2815                           	opt stack 0
  2816                           
  2817                           ; 1 bytes @ 0x28
  2818  000088                     	ds	1
  2819  000089                     Port_CheckPairType@pDrive:
  2820                           	opt stack 0
  2821  000089                     Port_SetPinType@pType:
  2822                           	opt stack 0
  2823                           
  2824                           ; 1 bytes @ 0x29
  2825  000089                     	ds	1
  2826  00008A                     Port_CheckPairType@Pin1:
  2827                           	opt stack 0
  2828  00008A                     Port_SetPinType@Output:
  2829                           	opt stack 0
  2830  00008A                     Console_Render@x:
  2831                           	opt stack 0
  2832                           
  2833                           ; 1 bytes @ 0x2A
  2834  00008A                     	ds	1
  2835  00008B                     ?___fladd:
  2836                           	opt stack 0
  2837  00008B                     Port_CheckPairType@Pin2:
  2838                           	opt stack 0
  2839  00008B                     Console_Render@y:
  2840                           	opt stack 0
  2841  00008B                     Port_SetPinType@Props:
  2842                           	opt stack 0
  2843  00008B                     ___fladd@b:
  2844                           	opt stack 0
  2845                           
  2846                           ; 4 bytes @ 0x2B
  2847  00008B                     	ds	1
  2848  00008C                     Port_CheckPairType@Output:
  2849                           	opt stack 0
  2850                           
  2851                           ; 1 bytes @ 0x2C
  2852  00008C                     	ds	1
  2853  00008D                     LED_Init@pLED:
  2854                           	opt stack 0
  2855  00008D                     Port_CheckPairType@Props:
  2856                           	opt stack 0
  2857  00008D                     SPI_Init@pClock:
  2858                           	opt stack 0
  2859                           
  2860                           ; 4 bytes @ 0x2D
  2861  00008D                     	ds	2
  2862  00008F                     Port_CheckQuadType@pInput:
  2863                           	opt stack 0
  2864  00008F                     ___fladd@a:
  2865                           	opt stack 0
  2866                           
  2867                           ; 4 bytes @ 0x2F
  2868  00008F                     	ds	2
  2869  000091                     Port_CheckQuadType@pQuad:
  2870                           	opt stack 0
  2871  000091                     SPI_Init@pChannel:
  2872                           	opt stack 0
  2873                           
  2874                           ; 1 bytes @ 0x31
  2875  000091                     	ds	1
  2876  000092                     Port_CheckQuadType@pDrive:
  2877                           	opt stack 0
  2878  000092                     SPI_Init@pMode:
  2879                           	opt stack 0
  2880                           
  2881                           ; 1 bytes @ 0x32
  2882  000092                     	ds	1
  2883  000093                     ??___fladd:
  2884  000093                     Port_CheckQuadType@Pair1:
  2885                           	opt stack 0
  2886  000093                     SPI_Init@pInput:
  2887                           	opt stack 0
  2888                           
  2889                           ; 2 bytes @ 0x33
  2890  000093                     	ds	1
  2891  000094                     Port_CheckQuadType@Pair2:
  2892                           	opt stack 0
  2893                           
  2894                           ; 1 bytes @ 0x34
  2895  000094                     	ds	1
  2896  000095                     ??_LCD_Init:
  2897  000095                     Port_CheckQuadType@Output:
  2898                           	opt stack 0
  2899                           
  2900                           ; 1 bytes @ 0x35
  2901  000095                     	ds	1
  2902  000096                     Port_CheckPortType@pInput:
  2903                           	opt stack 0
  2904  000096                     Port_SetQuadType@pInput:
  2905                           	opt stack 0
  2906                           
  2907                           ; 2 bytes @ 0x36
  2908  000096                     	ds	1
  2909  000097                     LCD_Init@i:
  2910                           	opt stack 0
  2911                           
  2912                           ; 2 bytes @ 0x37
  2913  000097                     	ds	1
  2914  000098                     Port_CheckPortType@pDrive:
  2915                           	opt stack 0
  2916  000098                     Port_SetQuadType@pQuad:
  2917                           	opt stack 0
  2918                           
  2919                           ; 1 bytes @ 0x38
  2920  000098                     	ds	1
  2921  000099                     Port_CheckPortType@Output:
  2922                           	opt stack 0
  2923  000099                     Port_SetQuadType@pType:
  2924                           	opt stack 0
  2925                           
  2926                           ; 1 bytes @ 0x39
  2927  000099                     	ds	1
  2928  00009A                     Port_SetQuadType@Output:
  2929                           	opt stack 0
  2930  00009A                     Port_SetType@pInput:
  2931                           	opt stack 0
  2932                           
  2933                           ; 2 bytes @ 0x3A
  2934  00009A                     	ds	1
  2935  00009B                     ___fladd@signs:
  2936                           	opt stack 0
  2937  00009B                     Button_Init@pInput:
  2938                           	opt stack 0
  2939                           
  2940                           ; 2 bytes @ 0x3B
  2941  00009B                     	ds	1
  2942  00009C                     Port_SetType@pType:
  2943                           	opt stack 0
  2944  00009C                     ___fladd@aexp:
  2945                           	opt stack 0
  2946                           
  2947                           ; 1 bytes @ 0x3C
  2948  00009C                     	ds	1
  2949  00009D                     ??_Port_SetType:
  2950  00009D                     ___fladd@bexp:
  2951                           	opt stack 0
  2952  00009D                     Button_Init@pThreshold:
  2953                           	opt stack 0
  2954                           
  2955                           ; 2 bytes @ 0x3D
  2956  00009D                     	ds	1
  2957  00009E                     ___fladd@grs:
  2958                           	opt stack 0
  2959                           
  2960                           ; 1 bytes @ 0x3E
  2961  00009E                     	ds	1
  2962  00009F                     ?___flsub:
  2963                           	opt stack 0
  2964  00009F                     ?_eval_poly:
  2965                           	opt stack 0
  2966  00009F                     ?___fltol:
  2967                           	opt stack 0
  2968  00009F                     Port_SetType@Output:
  2969                           	opt stack 0
  2970  00009F                     Button_Init@pInitIO:
  2971                           	opt stack 0
  2972  00009F                     ___fltol@f1:
  2973                           	opt stack 0
  2974  00009F                     ___flsub@b:
  2975                           	opt stack 0
  2976  00009F                     eval_poly@x:
  2977                           	opt stack 0
  2978                           
  2979                           ; 4 bytes @ 0x3F
  2980  00009F                     	ds	1
  2981  0000A0                     Port_Init@pInput:
  2982                           	opt stack 0
  2983                           
  2984                           ; 2 bytes @ 0x40
  2985  0000A0                     	ds	2
  2986  0000A2                     Port_Init@pPort:
  2987                           	opt stack 0
  2988  0000A2                     Button_Init@pGetState:
  2989                           	opt stack 0
  2990                           
  2991                           ; 3 bytes @ 0x42
  2992  0000A2                     	ds	1
  2993  0000A3                     ??_Port_Init:
  2994  0000A3                     ??___fltol:
  2995  0000A3                     eval_poly@d:
  2996                           	opt stack 0
  2997  0000A3                     ___flsub@a:
  2998                           	opt stack 0
  2999                           
  3000                           ; 4 bytes @ 0x43
  3001  0000A3                     	ds	2
  3002  0000A5                     Port_Init@i:
  3003                           	opt stack 0
  3004  0000A5                     eval_poly@n:
  3005                           	opt stack 0
  3006  0000A5                     Button_Init@pFunction:
  3007                           	opt stack 0
  3008                           
  3009                           ; 3 bytes @ 0x45
  3010  0000A5                     	ds	1
  3011  0000A6                     
  3012                           ; 1 bytes @ 0x46
  3013  0000A6                     	ds	1
  3014  0000A7                     ??_eval_poly:
  3015  0000A7                     ___fltol@sign1:
  3016                           	opt stack 0
  3017                           
  3018                           ; 1 bytes @ 0x47
  3019  0000A7                     	ds	1
  3020  0000A8                     ___fltol@exp1:
  3021                           	opt stack 0
  3022  0000A8                     HMI_Init@in:
  3023                           	opt stack 0
  3024                           
  3025                           ; 2 bytes @ 0x48
  3026  0000A8                     	ds	1
  3027  0000A9                     ?_floor:
  3028                           	opt stack 0
  3029  0000A9                     floor@x:
  3030                           	opt stack 0
  3031                           
  3032                           ; 4 bytes @ 0x49
  3033  0000A9                     	ds	2
  3034  0000AB                     eval_poly@res:
  3035                           	opt stack 0
  3036                           
  3037                           ; 4 bytes @ 0x4B
  3038  0000AB                     	ds	2
  3039  0000AD                     floor@i:
  3040                           	opt stack 0
  3041                           
  3042                           ; 4 bytes @ 0x4D
  3043  0000AD                     	ds	2
  3044  0000AF                     ?_log:
  3045                           	opt stack 0
  3046  0000AF                     ?_ldexp:
  3047                           	opt stack 0
  3048  0000AF                     ldexp@value:
  3049                           	opt stack 0
  3050  0000AF                     log@x:
  3051                           	opt stack 0
  3052                           
  3053                           ; 4 bytes @ 0x4F
  3054  0000AF                     	ds	2
  3055  0000B1                     floor@expon:
  3056                           	opt stack 0
  3057                           
  3058                           ; 2 bytes @ 0x51
  3059  0000B1                     	ds	2
  3060  0000B3                     ldexp@newexp:
  3061                           	opt stack 0
  3062  0000B3                     log@exponent:
  3063                           	opt stack 0
  3064                           
  3065                           ; 2 bytes @ 0x53
  3066  0000B3                     	ds	2
  3067  0000B5                     ??_ldexp:
  3068                           
  3069                           ; 1 bytes @ 0x55
  3070  0000B5                     	ds	2
  3071  0000B7                     ?_exp:
  3072                           	opt stack 0
  3073  0000B7                     exp@x:
  3074                           	opt stack 0
  3075                           
  3076                           ; 4 bytes @ 0x57
  3077  0000B7                     	ds	4
  3078  0000BB                     _exp$15840:
  3079                           	opt stack 0
  3080                           
  3081                           ; 4 bytes @ 0x5B
  3082  0000BB                     	ds	4
  3083  0000BF                     exp@exponent:
  3084                           	opt stack 0
  3085                           
  3086                           ; 2 bytes @ 0x5F
  3087  0000BF                     	ds	2
  3088  0000C1                     exp@sign:
  3089                           	opt stack 0
  3090                           
  3091                           ; 1 bytes @ 0x61
  3092  0000C1                     	ds	1
  3093  0000C2                     ?_pow:
  3094                           	opt stack 0
  3095  0000C2                     pow@x:
  3096                           	opt stack 0
  3097                           
  3098                           ; 4 bytes @ 0x62
  3099  0000C2                     	ds	4
  3100  0000C6                     pow@y:
  3101                           	opt stack 0
  3102                           
  3103                           ; 4 bytes @ 0x66
  3104  0000C6                     	ds	4
  3105  0000CA                     _pow$15838:
  3106                           	opt stack 0
  3107                           
  3108                           ; 4 bytes @ 0x6A
  3109  0000CA                     	ds	4
  3110  0000CE                     _pow$15839:
  3111                           	opt stack 0
  3112                           
  3113                           ; 4 bytes @ 0x6E
  3114  0000CE                     	ds	4
  3115  0000D2                     pow@sign:
  3116                           	opt stack 0
  3117                           
  3118                           ; 1 bytes @ 0x72
  3119  0000D2                     	ds	1
  3120  0000D3                     pow@yi:
  3121                           	opt stack 0
  3122                           
  3123                           ; 4 bytes @ 0x73
  3124  0000D3                     	ds	4
  3125  0000D7                     ??_ADCAverage:
  3126                           
  3127                           ; 1 bytes @ 0x77
  3128  0000D7                     	ds	2
  3129  0000D9                     _ADCAverage$15832:
  3130                           	opt stack 0
  3131                           
  3132                           ; 4 bytes @ 0x79
  3133  0000D9                     	ds	4
  3134  0000DD                     _ADCAverage$15833:
  3135                           	opt stack 0
  3136                           
  3137                           ; 4 bytes @ 0x7D
  3138  0000DD                     	ds	4
  3139  0000E1                     _ADCAverage$15834:
  3140                           	opt stack 0
  3141                           
  3142                           ; 4 bytes @ 0x81
  3143  0000E1                     	ds	4
  3144  0000E5                     _ADCAverage$15835:
  3145                           	opt stack 0
  3146                           
  3147                           ; 4 bytes @ 0x85
  3148  0000E5                     	ds	4
  3149  0000E9                     _ADCAverage$15836:
  3150                           	opt stack 0
  3151                           
  3152                           ; 4 bytes @ 0x89
  3153  0000E9                     	ds	4
  3154  0000ED                     _ADCAverage$15837:
  3155                           	opt stack 0
  3156                           
  3157                           ; 4 bytes @ 0x8D
  3158  0000ED                     	ds	4
  3159  0000F1                     Travel@direction:
  3160                           	opt stack 0
  3161                           
  3162                           ; 2 bytes @ 0x91
  3163  0000F1                     	ds	2
  3164  0000F3                     Travel@Dist:
  3165                           	opt stack 0
  3166                           
  3167                           ; 2 bytes @ 0x93
  3168  0000F3                     	ds	2
  3169  0000F5                     Travel@Test_ADC:
  3170                           	opt stack 0
  3171                           
  3172                           ; 2 bytes @ 0x95
  3173  0000F5                     	ds	2
  3174  0000F7                     Travel@Spd:
  3175                           	opt stack 0
  3176                           
  3177                           ; 2 bytes @ 0x97
  3178  0000F7                     	ds	2
  3179  0000F9                     ??_Travel:
  3180                           
  3181                           ; 1 bytes @ 0x99
  3182  0000F9                     	ds	4
  3183  0000FD                     tblptru	equ	0xFF8
  3184                           tblptrh	equ	0xFF7
  3185                           tblptrl	equ	0xFF6
  3186                           tablat	equ	0xFF5
  3187                           postinc0	equ	0xFEE
  3188                           wreg	equ	0xFE8
  3189                           postdec1	equ	0xFE5
  3190                           fsr1h	equ	0xFE2
  3191                           fsr1l	equ	0xFE1
  3192                           
  3193                           ; 1 bytes @ 0x9D
  3194                           
  3195                           	psect	cstackCOMRAM
  3196  000001                     __pcstackCOMRAM:
  3197                           	opt stack 0
  3198  000001                     i2Byte_SetBit@pInput:
  3199                           	opt stack 0
  3200  000001                     i2Byte_GetZone@pInput:
  3201                           	opt stack 0
  3202  000001                     i2delay_us@us:
  3203                           	opt stack 0
  3204  000001                     i2MXK_Queue@pCallback:
  3205                           	opt stack 0
  3206                           
  3207                           ; 3 bytes @ 0x0
  3208  000001                     	ds	2
  3209  000003                     i2Byte_SetBit@pBit:
  3210                           	opt stack 0
  3211  000003                     i2Byte_GetZone@pMax:
  3212                           	opt stack 0
  3213  000003                     i2delay_us@u:
  3214                           	opt stack 0
  3215                           
  3216                           ; 4 bytes @ 0x2
  3217  000003                     	ds	1
  3218  000004                     i2Byte_SetBit@pValue:
  3219                           	opt stack 0
  3220  000004                     i2Byte_GetZone@pChunk:
  3221                           	opt stack 0
  3222                           
  3223                           ; 1 bytes @ 0x3
  3224  000004                     	ds	1
  3225  000005                     ??i2_Byte_SetBit:
  3226  000005                     i2Byte_GetZone@pChunkSize:
  3227                           	opt stack 0
  3228                           
  3229                           ; 1 bytes @ 0x4
  3230  000005                     	ds	1
  3231  000006                     ??i2_Byte_GetZone:
  3232                           
  3233                           ; 1 bytes @ 0x5
  3234  000006                     	ds	1
  3235  000007                     i2Byte_GetZone@MASK:
  3236                           	opt stack 0
  3237  000007                     i2MXK_SwitchTo@CUR:
  3238                           	opt stack 0
  3239                           
  3240                           ; 1 bytes @ 0x6
  3241  000007                     	ds	1
  3242  000008                     i2Byte_GetZone@Offset:
  3243                           	opt stack 0
  3244  000008                     i2MXK_SwitchTo@pModule:
  3245                           	opt stack 0
  3246                           
  3247                           ; 1 bytes @ 0x7
  3248  000008                     	ds	1
  3249  000009                     i2Byte_GetZone@Output:
  3250                           	opt stack 0
  3251                           
  3252                           ; 1 bytes @ 0x8
  3253  000009                     	ds	1
  3254  00000A                     i2Byte_GetPair@pInput:
  3255                           	opt stack 0
  3256                           
  3257                           ; 2 bytes @ 0x9
  3258  00000A                     	ds	2
  3259  00000C                     i2Byte_GetPair@pPair:
  3260                           	opt stack 0
  3261                           
  3262                           ; 1 bytes @ 0xB
  3263  00000C                     	ds	1
  3264  00000D                     i2Word_GetPair@pInput:
  3265                           	opt stack 0
  3266                           
  3267                           ; 2 bytes @ 0xC
  3268  00000D                     	ds	2
  3269  00000F                     i2Word_GetPair@pPair:
  3270                           	opt stack 0
  3271                           
  3272                           ; 1 bytes @ 0xE
  3273  00000F                     	ds	1
  3274  000010                     i2Port_SetPin@pInput:
  3275                           	opt stack 0
  3276                           
  3277                           ; 2 bytes @ 0xF
  3278  000010                     	ds	2
  3279  000012                     i2Port_SetPin@pPin:
  3280                           	opt stack 0
  3281                           
  3282                           ; 1 bytes @ 0x11
  3283  000012                     	ds	1
  3284  000013                     i2Port_SetPin@pValue:
  3285                           	opt stack 0
  3286                           
  3287                           ; 1 bytes @ 0x12
  3288  000013                     	ds	1
  3289  000014                     i2Port_SetPin@Type:
  3290                           	opt stack 0
  3291                           
  3292                           ; 1 bytes @ 0x13
  3293  000014                     	ds	1
  3294  000015                     
  3295                           ; 1 bytes @ 0x14
  3296  000015                     	ds	2
  3297  000017                     ??_ISR_Function:
  3298                           
  3299                           ; 1 bytes @ 0x16
  3300  000017                     	ds	18
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           postinc0	equ	0xFEE
  3306                           wreg	equ	0xFE8
  3307                           postdec1	equ	0xFE5
  3308                           fsr1h	equ	0xFE2
  3309                           fsr1l	equ	0xFE1
  3310                           
  3311 ;;
  3312 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3313 ;;
  3314 ;; *************** function _main *****************
  3315 ;; Defined at:
  3316 ;;		line 328 in file "main.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;		None
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  r               2    4[BANK1 ] int 
  3321 ;;  left            1    3[BANK1 ] unsigned char 
  3322 ;;  up              1    2[BANK1 ] unsigned char 
  3323 ;;  right           1    1[BANK1 ] unsigned char 
  3324 ;;  down            1    0[BANK1 ] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  1    wreg      void 
  3327 ;; Registers used:
  3328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;Total ram usage:        6 bytes
  3339 ;; Hardware stack levels required when called:   17
  3340 ;; This function calls:
  3341 ;;		_ADCAverage
  3342 ;;		_Console_Init
  3343 ;;		_Console_Render
  3344 ;;		_FunctInitButton
  3345 ;;		_HMI_DIPSwitch
  3346 ;;		_HMI_DownSwitch
  3347 ;;		_HMI_Init
  3348 ;;		_HMI_LeftSwitch
  3349 ;;		_HMI_Poll
  3350 ;;		_HMI_Render
  3351 ;;		_HMI_RightSwitch
  3352 ;;		_HMI_SetNumber
  3353 ;;		_HMI_UpSwitch
  3354 ;;		_ISR_Enable
  3355 ;;		_InitADC
  3356 ;;		_InitSerialCommunication
  3357 ;;		_Init_Timer0
  3358 ;;		_LCD_Init
  3359 ;;		_LED_Init
  3360 ;;		_MXK_BlockSwitchTo
  3361 ;;		_MXK_DIPSwitch
  3362 ;;		_MXK_Dequeue
  3363 ;;		_MXK_Init
  3364 ;;		_MXK_Release
  3365 ;;		_MXK_TestButton
  3366 ;;		_Robot_Init
  3367 ;;		_Travel
  3368 ;;		_printf
  3369 ;; This function is called by:
  3370 ;;		Startup code after reset
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text0
  3375  011EAC                     __ptext0:
  3376                           	opt stack 0
  3377  011EAC                     _main:
  3378                           	opt stack 14
  3379                           
  3380                           ;main.c: 333: MXK_Init();
  3381                           
  3382                           ;incstack = 0
  3383  011EAC  EC45  F099         	call	_MXK_Init	;wreg free
  3384                           
  3385                           ;main.c: 334: Init_Timer0();
  3386  011EB0  ECF6  F0AC         	call	_Init_Timer0	;wreg free
  3387                           
  3388                           ;main.c: 335: InitSerialCommunication();
  3389  011EB4  EC8A  F0AC         	call	_InitSerialCommunication	;wreg free
  3390                           
  3391                           ;main.c: 336: Robot_Init();
  3392  011EB8  EC1A  F0AD         	call	_Robot_Init	;wreg free
  3393                           
  3394                           ;main.c: 337: ISR_Enable();
  3395  011EBC  ECB3  F0AD         	call	_ISR_Enable	;wreg free
  3396                           
  3397                           ;main.c: 338: FunctInitButton();
  3398  011EC0  EC49  F0A4         	call	_FunctInitButton	;wreg free
  3399                           
  3400                           ;main.c: 339: InitADC();
  3401  011EC4  EC96  F0A8         	call	_InitADC	;wreg free
  3402                           
  3403                           ;main.c: 340: LED_Init(eLED2);
  3404  011EC8  0E01               	movlw	1
  3405  011ECA  EC77  F0A7         	call	_LED_Init
  3406                           
  3407                           ;main.c: 346: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3408  011ECE  0E01               	movlw	1
  3409  011ED0  ECAC  F0AA         	call	_MXK_BlockSwitchTo
  3410  011ED4  0900               	iorlw	0
  3411  011ED6  B4D8               	btfsc	status,2,c
  3412  011ED8  D00C               	goto	l2204
  3413                           
  3414                           ;main.c: 347: HMI_Init();
  3415  011EDA  ECC6  F093         	call	_HMI_Init	;wreg free
  3416                           
  3417                           ;main.c: 348: LCD_Init();
  3418  011EDE  ECFE  F097         	call	_LCD_Init	;wreg free
  3419                           
  3420                           ;main.c: 349: Console_Init();
  3421  011EE2  EC62  F0A5         	call	_Console_Init	;wreg free
  3422                           
  3423                           ;main.c: 350: if (MXK_Release())
  3424  011EE6  EC25  F0AD         	call	_MXK_Release	;wreg free
  3425  011EEA  0900               	iorlw	0
  3426  011EEC  A4D8               	btfss	status,2,c
  3427                           
  3428                           ;main.c: 351: MXK_Dequeue();
  3429  011EEE  EC61  F0AB         	call	_MXK_Dequeue	;wreg free
  3430  011EF2                     l2204:
  3431                           
  3432                           ;main.c: 357: ADCAverage();
  3433                           
  3434                           ;main.c: 352: }
  3435                           ;main.c: 355: for(;;){
  3436  011EF2  ECA9  F087         	call	_ADCAverage	;wreg free
  3437                           
  3438                           ;main.c: 359: HMI_SetNumber(average);
  3439  011EF6  C13E  F076         	movff	_average,HMI_SetNumber@pInput
  3440  011EFA  C13F  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3441  011EFE  EC25  F0AC         	call	_HMI_SetNumber	;wreg free
  3442                           
  3443                           ;main.c: 361: HMI_Render();
  3444  011F02  ECC8  F0AA         	call	_HMI_Render	;wreg free
  3445                           
  3446                           ;main.c: 363: HMI_Poll();
  3447  011F06  EC66  F0A6         	call	_HMI_Poll	;wreg free
  3448                           
  3449                           ;main.c: 367: bool down = HMIBoard.mDown.mGetState();
  3450  011F0A  EE22  F0AF         	lfsr	2,_HMIBoard+45
  3451  011F0E  D801               	call	u14938
  3452  011F10  D00A               	goto	u14939
  3453  011F12                     u14938:
  3454  011F12  0005               	push	
  3455  011F14  6EFA               	movwf	pclath,c
  3456  011F16  50DE               	movf	postinc2,w,c
  3457  011F18  6EFD               	movwf	tosl,c
  3458  011F1A  50DE               	movf	postinc2,w,c
  3459  011F1C  6EFE               	movwf	tosh,c
  3460  011F1E  50DE               	movf	postinc2,w,c
  3461  011F20  6EFF               	movwf	tosu,c
  3462  011F22  50FA               	movf	pclath,w,c
  3463  011F24  0012               	return		;indir
  3464  011F26                     u14939:
  3465  011F26  0101               	movlb	1	; () banked
  3466  011F28  6FFA               	movwf	main@down& (0+255),b
  3467                           
  3468                           ; BSR set to: 1
  3469                           ;main.c: 368: bool right = HMIBoard.mRight.mGetState();
  3470  011F2A  EE22  F091         	lfsr	2,_HMIBoard+15
  3471  011F2E  D801               	call	u14948
  3472  011F30  D00A               	goto	u14949
  3473  011F32                     u14948:
  3474  011F32  0005               	push	
  3475  011F34  6EFA               	movwf	pclath,c
  3476  011F36  50DE               	movf	postinc2,w,c
  3477  011F38  6EFD               	movwf	tosl,c
  3478  011F3A  50DE               	movf	postinc2,w,c
  3479  011F3C  6EFE               	movwf	tosh,c
  3480  011F3E  50DE               	movf	postinc2,w,c
  3481  011F40  6EFF               	movwf	tosu,c
  3482  011F42  50FA               	movf	pclath,w,c
  3483  011F44  0012               	return		;indir
  3484  011F46                     u14949:
  3485  011F46  0101               	movlb	1	; () banked
  3486  011F48  6FFB               	movwf	main@right& (0+255),b
  3487                           
  3488                           ; BSR set to: 1
  3489                           ;main.c: 369: bool up = HMIBoard.mUp.mGetState();
  3490  011F4A  EE22  F0A5         	lfsr	2,_HMIBoard+35
  3491  011F4E  D801               	call	u14958
  3492  011F50  D00A               	goto	u14959
  3493  011F52                     u14958:
  3494  011F52  0005               	push	
  3495  011F54  6EFA               	movwf	pclath,c
  3496  011F56  50DE               	movf	postinc2,w,c
  3497  011F58  6EFD               	movwf	tosl,c
  3498  011F5A  50DE               	movf	postinc2,w,c
  3499  011F5C  6EFE               	movwf	tosh,c
  3500  011F5E  50DE               	movf	postinc2,w,c
  3501  011F60  6EFF               	movwf	tosu,c
  3502  011F62  50FA               	movf	pclath,w,c
  3503  011F64  0012               	return		;indir
  3504  011F66                     u14959:
  3505  011F66  0101               	movlb	1	; () banked
  3506  011F68  6FFC               	movwf	main@up& (0+255),b
  3507                           
  3508                           ; BSR set to: 1
  3509                           ;main.c: 370: bool left = HMIBoard.mLeft.mGetState();
  3510  011F6A  EE22  F09B         	lfsr	2,_HMIBoard+25
  3511  011F6E  D801               	call	u14968
  3512  011F70  D00A               	goto	u14969
  3513  011F72                     u14968:
  3514  011F72  0005               	push	
  3515  011F74  6EFA               	movwf	pclath,c
  3516  011F76  50DE               	movf	postinc2,w,c
  3517  011F78  6EFD               	movwf	tosl,c
  3518  011F7A  50DE               	movf	postinc2,w,c
  3519  011F7C  6EFE               	movwf	tosh,c
  3520  011F7E  50DE               	movf	postinc2,w,c
  3521  011F80  6EFF               	movwf	tosu,c
  3522  011F82  50FA               	movf	pclath,w,c
  3523  011F84  0012               	return		;indir
  3524  011F86                     u14969:
  3525  011F86  0101               	movlb	1	; () banked
  3526  011F88  6FFD               	movwf	main@left& (0+255),b
  3527                           
  3528                           ; BSR set to: 1
  3529                           ;main.c: 371: if (down) {mode=3;}
  3530  011F8A  51FA               	movf	main@down& (0+255),w,b
  3531  011F8C  B4D8               	btfsc	status,2,c
  3532  011F8E  D004               	goto	l2206
  3533                           
  3534                           ; BSR set to: 1
  3535  011F90  0E00               	movlw	0
  3536  011F92  6F49               	movwf	(_mode+1)& (0+255),b
  3537  011F94  0E03               	movlw	3
  3538  011F96  6F48               	movwf	_mode& (0+255),b
  3539  011F98                     l2206:
  3540                           
  3541                           ; BSR set to: 1
  3542                           ;main.c: 372: if (right) {mode =1;}
  3543  011F98  51FB               	movf	main@right& (0+255),w,b
  3544  011F9A  B4D8               	btfsc	status,2,c
  3545  011F9C  D004               	goto	l2207
  3546                           
  3547                           ; BSR set to: 1
  3548  011F9E  0E00               	movlw	0
  3549  011FA0  6F49               	movwf	(_mode+1)& (0+255),b
  3550  011FA2  0E01               	movlw	1
  3551  011FA4  6F48               	movwf	_mode& (0+255),b
  3552  011FA6                     l2207:
  3553                           
  3554                           ; BSR set to: 1
  3555                           ;main.c: 373: if (up) {mode=2;}
  3556  011FA6  51FC               	movf	main@up& (0+255),w,b
  3557  011FA8  B4D8               	btfsc	status,2,c
  3558  011FAA  D004               	goto	l2208
  3559                           
  3560                           ; BSR set to: 1
  3561  011FAC  0E00               	movlw	0
  3562  011FAE  6F49               	movwf	(_mode+1)& (0+255),b
  3563  011FB0  0E02               	movlw	2
  3564  011FB2  6F48               	movwf	_mode& (0+255),b
  3565  011FB4                     l2208:
  3566                           
  3567                           ; BSR set to: 1
  3568                           ;main.c: 374: if (left) {mode=4;}
  3569  011FB4  51FD               	movf	main@left& (0+255),w,b
  3570  011FB6  B4D8               	btfsc	status,2,c
  3571  011FB8  D004               	goto	l2209
  3572                           
  3573                           ; BSR set to: 1
  3574  011FBA  0E00               	movlw	0
  3575  011FBC  6F49               	movwf	(_mode+1)& (0+255),b
  3576  011FBE  0E04               	movlw	4
  3577  011FC0  6F48               	movwf	_mode& (0+255),b
  3578  011FC2                     l2209:
  3579                           
  3580                           ; BSR set to: 1
  3581                           ;main.c: 379: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3582                           
  3583                           ; BSR set to: 1
  3584  011FC2  0E01               	movlw	1
  3585  011FC4  ECAC  F0AA         	call	_MXK_BlockSwitchTo
  3586  011FC8  0900               	iorlw	0
  3587  011FCA  B4D8               	btfsc	status,2,c
  3588  011FCC  D792               	goto	l2204
  3589                           
  3590                           ;main.c: 381: if (mode==0){
  3591  011FCE  0101               	movlb	1	; () banked
  3592  011FD0  5148               	movf	_mode& (0+255),w,b
  3593  011FD2  1149               	iorwf	(_mode+1)& (0+255),w,b
  3594  011FD4  A4D8               	btfss	status,2,c
  3595  011FD6  D014               	goto	l2211
  3596                           
  3597                           ; BSR set to: 1
  3598                           ;main.c: 384: printf("%c", (char)35);
  3599  011FD8  0EFC               	movlw	low STR_1
  3600  011FDA  0100               	movlb	0	; () banked
  3601  011FDC  6F75               	movwf	printf@f& (0+255),b
  3602  011FDE  0EFF               	movlw	high STR_1
  3603  011FE0  6F76               	movwf	(printf@f+1)& (0+255),b
  3604  011FE2  0E00               	movlw	0
  3605  011FE4  6F78               	movwf	(?_printf+3)& (0+255),b
  3606  011FE6  0E23               	movlw	35
  3607  011FE8  6F77               	movwf	(?_printf+2)& (0+255),b
  3608  011FEA  ECF8  F095         	call	_printf	;wreg free
  3609                           
  3610                           ;main.c: 385: printf("Robot Ready! \n\n");
  3611  011FEE  0E5B               	movlw	low STR_13
  3612  011FF0  0100               	movlb	0	; () banked
  3613  011FF2  6F75               	movwf	printf@f& (0+255),b
  3614  011FF4  0EFF               	movlw	high STR_13
  3615  011FF6  6F76               	movwf	(printf@f+1)& (0+255),b
  3616  011FF8  ECF8  F095         	call	_printf	;wreg free
  3617                           
  3618                           ;main.c: 387: Console_Render();
  3619  011FFC  EC1B  F092         	call	_Console_Render	;wreg free
  3620  012000                     l2211:
  3621                           
  3622                           ;main.c: 389: }
  3623                           ;main.c: 390: if (mode == 3){
  3624  012000  0E03               	movlw	3
  3625  012002  0101               	movlb	1	; () banked
  3626  012004  1948               	xorwf	_mode& (0+255),w,b
  3627  012006  1149               	iorwf	(_mode+1)& (0+255),w,b
  3628  012008  A4D8               	btfss	status,2,c
  3629  01200A  D039               	goto	l2212
  3630                           
  3631                           ; BSR set to: 1
  3632                           ;main.c: 393: Console_Render();
  3633  01200C  EC1B  F092         	call	_Console_Render	;wreg free
  3634                           
  3635                           ;main.c: 404: for (int r =0; r <10; r++){
  3636  012010  0E00               	movlw	0
  3637  012012  0101               	movlb	1	; () banked
  3638  012014  6FFF               	movwf	(main@r+1)& (0+255),b
  3639  012016  0E00               	movlw	0
  3640  012018  6FFE               	movwf	main@r& (0+255),b
  3641                           
  3642                           ; BSR set to: 1
  3643  01201A  BFFF               	btfsc	(main@r+1)& (0+255),7,b
  3644  01201C  D003               	goto	l2213
  3645  01201E  51FF               	movf	(main@r+1)& (0+255),w,b
  3646  012020  E10E               	bnz	l2214
  3647  012022  D009               	goto	L1
  3648  012024                     l2213:
  3649                           
  3650                           ; BSR set to: 1
  3651                           ;main.c: 405: ADCAverage();
  3652                           
  3653                           ; BSR set to: 1
  3654  012024  ECA9  F087         	call	_ADCAverage	;wreg free
  3655  012028  0101               	movlb	1	; () banked
  3656  01202A  4BFE               	infsnz	main@r& (0+255),f,b
  3657  01202C  2BFF               	incf	(main@r+1)& (0+255),f,b
  3658                           
  3659                           ; BSR set to: 1
  3660  01202E  BFFF               	btfsc	(main@r+1)& (0+255),7,b
  3661  012030  D7F9               	goto	l2213
  3662  012032  51FF               	movf	(main@r+1)& (0+255),w,b
  3663  012034  E104               	bnz	u15050
  3664  012036                     L1:
  3665  012036  0E0A               	movlw	10
  3666  012038  5DFE               	subwf	main@r& (0+255),w,b
  3667  01203A  A0D8               	btfss	status,0,c
  3668  01203C  D7F3               	goto	l2213
  3669  01203E                     u15050:
  3670  01203E                     l2214:
  3671                           
  3672                           ; BSR set to: 1
  3673                           ;main.c: 406: }
  3674                           ;main.c: 408: Desired_Level = average;
  3675  01203E  C13E  F02C         	movff	_average,_Desired_Level
  3676  012042  C13F  F02D         	movff	_average+1,_Desired_Level+1
  3677                           
  3678                           ; BSR set to: 1
  3679                           ;main.c: 410: Travel(3, 2000, 0, 200);
  3680  012046  0E00               	movlw	0
  3681  012048  0100               	movlb	0	; () banked
  3682  01204A  6FF2               	movwf	(Travel@direction+1)& (0+255),b
  3683  01204C  0E03               	movlw	3
  3684  01204E  6FF1               	movwf	Travel@direction& (0+255),b
  3685  012050  0E07               	movlw	7
  3686  012052  6FF4               	movwf	(Travel@Dist+1)& (0+255),b
  3687  012054  0ED0               	movlw	208
  3688  012056  6FF3               	movwf	Travel@Dist& (0+255),b
  3689  012058  0E00               	movlw	0
  3690  01205A  6FF6               	movwf	(Travel@Test_ADC+1)& (0+255),b
  3691  01205C  0E00               	movlw	0
  3692  01205E  6FF5               	movwf	Travel@Test_ADC& (0+255),b
  3693  012060  0E00               	movlw	0
  3694  012062  6FF8               	movwf	(Travel@Spd+1)& (0+255),b
  3695  012064  0EC8               	movlw	200
  3696  012066  6FF7               	movwf	Travel@Spd& (0+255),b
  3697  012068  EC00  F080         	call	_Travel	;wreg free
  3698                           
  3699                           ;main.c: 421: Console_Render();
  3700  01206C  EC1B  F092         	call	_Console_Render	;wreg free
  3701                           
  3702                           ;main.c: 423: mode=0;
  3703  012070  0E00               	movlw	0
  3704  012072  0101               	movlb	1	; () banked
  3705  012074  6F49               	movwf	(_mode+1)& (0+255),b
  3706  012076  0E00               	movlw	0
  3707  012078  6F48               	movwf	_mode& (0+255),b
  3708                           
  3709                           ; BSR set to: 1
  3710                           ;main.c: 426: Console_Render();
  3711  01207A  EC1B  F092         	call	_Console_Render	;wreg free
  3712  01207E                     l2212:
  3713                           
  3714                           ;main.c: 428: }
  3715                           ;main.c: 430: Console_Render();
  3716  01207E  EC1B  F092         	call	_Console_Render	;wreg free
  3717                           
  3718                           ;main.c: 431: if (MXK_Release())
  3719  012082  EC25  F0AD         	call	_MXK_Release	;wreg free
  3720  012086  0900               	iorlw	0
  3721  012088  B4D8               	btfsc	status,2,c
  3722  01208A  D733               	goto	l2204
  3723                           
  3724                           ;main.c: 432: MXK_Dequeue();
  3725  01208C  EC61  F0AB         	call	_MXK_Dequeue	;wreg free
  3726                           
  3727                           ;main.c: 433: }
  3728                           ;main.c: 434: }
  3729  012090  D730               	goto	l2204
  3730  012092                     __end_of_main:
  3731                           	opt stack 0
  3732                           tosu	equ	0xFFF
  3733                           tosh	equ	0xFFE
  3734                           tosl	equ	0xFFD
  3735                           pclath	equ	0xFFA
  3736                           tblptru	equ	0xFF8
  3737                           tblptrh	equ	0xFF7
  3738                           tblptrl	equ	0xFF6
  3739                           tablat	equ	0xFF5
  3740                           postinc0	equ	0xFEE
  3741                           wreg	equ	0xFE8
  3742                           postdec1	equ	0xFE5
  3743                           fsr1h	equ	0xFE2
  3744                           fsr1l	equ	0xFE1
  3745                           postinc2	equ	0xFDE
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function _Travel *****************
  3749 ;; Defined at:
  3750 ;;		line 316 in file "dans.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  direction       2  145[BANK0 ] int 
  3753 ;;  Dist            2  147[BANK0 ] int 
  3754 ;;  Test_ADC        2  149[BANK0 ] int 
  3755 ;;  Spd             2  151[BANK0 ] int 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  rev_Dist        2    6[BANK2 ] int 
  3758 ;;  error           2   12[BANK2 ] int 
  3759 ;;  Req_Dir         2   10[BANK2 ] int 
  3760 ;;  Dist_Travell    2    8[BANK2 ] int 
  3761 ;;  spd2            2    4[BANK2 ] int 
  3762 ;;  spd1            2    2[BANK2 ] int 
  3763 ;;  Dir             2    0[BANK2 ] int 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  2  145[BANK0 ] int 
  3766 ;; Registers used:
  3767 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3773 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Locals:         0       0       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Totals:         0      12       0      14       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;Total ram usage:       26 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:   13
  3780 ;; This function calls:
  3781 ;;		_ADCAverage
  3782 ;;		_Console_Render
  3783 ;;		_Drive
  3784 ;;		_Get_VirtualWall_State
  3785 ;;		_Robot_Stop
  3786 ;;		_Turn
  3787 ;;		_UpdateDistance
  3788 ;;		___wmul
  3789 ;;		_printf
  3790 ;; This function is called by:
  3791 ;;		_main
  3792 ;;		_movement1
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text1
  3797  010000                     __ptext1:
  3798                           	opt stack 0
  3799  010000                     _Travel:
  3800                           	opt stack 17
  3801                           
  3802                           ;dans.c: 317: int Dist_Travelled = 0;
  3803                           
  3804                           ;incstack = 0
  3805  010000  0E00               	movlw	0
  3806  010002  0102               	movlb	2	; () banked
  3807  010004  6FE3               	movwf	(Travel@Dist_Travelled+1)& (0+255),b
  3808  010006  0E00               	movlw	0
  3809  010008  6FE2               	movwf	Travel@Dist_Travelled& (0+255),b
  3810                           
  3811                           ;dans.c: 318: int Req_Dir = 0;
  3812  01000A  0E00               	movlw	0
  3813  01000C  6FE5               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3814  01000E  0E00               	movlw	0
  3815  010010  6FE4               	movwf	Travel@Req_Dir& (0+255),b
  3816                           
  3817                           ; BSR set to: 2
  3818                           ;dans.c: 319: int Dir;
  3819                           ;dans.c: 320: if(direction == Current_Direction){
  3820  010012  0101               	movlb	1	; () banked
  3821  010014  51F3               	movf	_Current_Direction& (0+255),w,b
  3822  010016  0100               	movlb	0	; () banked
  3823  010018  19F1               	xorwf	Travel@direction& (0+255),w,b
  3824  01001A  E11A               	bnz	l15979
  3825  01001C  0101               	movlb	1	; () banked
  3826  01001E  51F4               	movf	(_Current_Direction+1)& (0+255),w,b
  3827  010020  0100               	movlb	0	; () banked
  3828  010022  19F2               	xorwf	(Travel@direction+1)& (0+255),w,b
  3829  010024  A4D8               	btfss	status,2,c
  3830  010026  D014               	goto	l2412
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;dans.c: 321: printf("%d", Spd);
  3834  010028  0E99               	movlw	low (STR_40+9)
  3835  01002A  6F75               	movwf	printf@f& (0+255),b
  3836  01002C  0EFF               	movlw	high (STR_40+9)
  3837  01002E  6F76               	movwf	(printf@f+1)& (0+255),b
  3838  010030  C0F7  F077         	movff	Travel@Spd,?_printf+2
  3839  010034  C0F8  F078         	movff	Travel@Spd+1,?_printf+3
  3840  010038  ECF8  F095         	call	_printf	;wreg free
  3841                           
  3842                           ;dans.c: 322: printf("driving");
  3843  01003C  0EEB               	movlw	low STR_28
  3844  01003E  0100               	movlb	0	; () banked
  3845  010040  6F75               	movwf	printf@f& (0+255),b
  3846  010042  0EFF               	movlw	high STR_28
  3847  010044  6F76               	movwf	(printf@f+1)& (0+255),b
  3848  010046  ECF8  F095         	call	_printf	;wreg free
  3849                           
  3850                           ;dans.c: 323: Console_Render();
  3851  01004A  EC1B  F092         	call	_Console_Render	;wreg free
  3852                           
  3853                           ;dans.c: 324: }
  3854  01004E  D093               	goto	l2413
  3855  010050                     l2412:
  3856  010050                     l15979:
  3857                           
  3858                           ;dans.c: 325: else {
  3859                           ;dans.c: 326: Req_Dir = direction - Current_Direction;
  3860  010050  C1F3  F0F9         	movff	_Current_Direction,??_Travel
  3861  010054  C1F4  F0FA         	movff	_Current_Direction+1,??_Travel+1
  3862  010058  0100               	movlb	0	; () banked
  3863  01005A  1FF9               	comf	??_Travel& (0+255),f,b
  3864  01005C  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  3865  01005E  4BF9               	infsnz	??_Travel& (0+255),f,b
  3866  010060  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  3867  010062  51F1               	movf	Travel@direction& (0+255),w,b
  3868  010064  25F9               	addwf	??_Travel& (0+255),w,b
  3869  010066  0102               	movlb	2	; () banked
  3870  010068  6FE4               	movwf	Travel@Req_Dir& (0+255),b
  3871  01006A  0100               	movlb	0	; () banked
  3872  01006C  51F2               	movf	(Travel@direction+1)& (0+255),w,b
  3873  01006E  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  3874  010070  0102               	movlb	2	; () banked
  3875  010072  6FE5               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3876                           
  3877                           ;dans.c: 328: if (Req_Dir < 0){
  3878  010074  AFE5               	btfss	(Travel@Req_Dir+1)& (0+255),7,b
  3879  010076  D03A               	goto	l2414
  3880                           
  3881                           ; BSR set to: 2
  3882                           ;dans.c: 329: Req_Dir = 83*Req_Dir*-1;
  3883  010078  C2E4  F0F9         	movff	Travel@Req_Dir,??_Travel
  3884  01007C  C2E5  F0FA         	movff	Travel@Req_Dir+1,??_Travel+1
  3885  010080  0100               	movlb	0	; () banked
  3886  010082  1FF9               	comf	??_Travel& (0+255),f,b
  3887  010084  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  3888  010086  4BF9               	infsnz	??_Travel& (0+255),f,b
  3889  010088  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  3890  01008A  C0F9  F060         	movff	??_Travel,___wmul@multiplier
  3891  01008E  C0FA  F061         	movff	??_Travel+1,___wmul@multiplier+1
  3892  010092  0E00               	movlw	0
  3893  010094  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3894  010096  0E53               	movlw	83
  3895  010098  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3896  01009A  ECD6  F0AB         	call	___wmul	;wreg free
  3897  01009E  C060  F2E4         	movff	?___wmul,Travel@Req_Dir
  3898  0100A2  C061  F2E5         	movff	?___wmul+1,Travel@Req_Dir+1
  3899                           
  3900                           ;dans.c: 330: Dir = 1;
  3901  0100A6  0E00               	movlw	0
  3902  0100A8  0102               	movlb	2	; () banked
  3903  0100AA  6FDB               	movwf	(Travel@Dir+1)& (0+255),b
  3904  0100AC  0E01               	movlw	1
  3905  0100AE  6FDA               	movwf	Travel@Dir& (0+255),b
  3906                           
  3907                           ; BSR set to: 2
  3908                           ;dans.c: 331: if(Req_Dir > 166){
  3909  0100B0  BFE5               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
  3910  0100B2  D04E               	goto	l2417
  3911  0100B4  51E5               	movf	(Travel@Req_Dir+1)& (0+255),w,b
  3912  0100B6  E104               	bnz	u13420
  3913  0100B8  0EA7               	movlw	167
  3914  0100BA  5DE4               	subwf	Travel@Req_Dir& (0+255),w,b
  3915  0100BC  A0D8               	btfss	status,0,c
  3916  0100BE  D048               	goto	l2417
  3917  0100C0                     u13420:
  3918                           
  3919                           ; BSR set to: 2
  3920                           ;dans.c: 332: Req_Dir = 332 - Req_Dir;
  3921  0100C0  C2E4  F0F9         	movff	Travel@Req_Dir,??_Travel
  3922  0100C4  C2E5  F0FA         	movff	Travel@Req_Dir+1,??_Travel+1
  3923  0100C8  0100               	movlb	0	; () banked
  3924  0100CA  1FF9               	comf	??_Travel& (0+255),f,b
  3925  0100CC  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  3926  0100CE  4BF9               	infsnz	??_Travel& (0+255),f,b
  3927  0100D0  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  3928  0100D2  0E4C               	movlw	76
  3929  0100D4  25F9               	addwf	??_Travel& (0+255),w,b
  3930  0100D6  0102               	movlb	2	; () banked
  3931  0100D8  6FE4               	movwf	Travel@Req_Dir& (0+255),b
  3932  0100DA  0E01               	movlw	1
  3933  0100DC  0100               	movlb	0	; () banked
  3934  0100DE  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  3935  0100E0  0102               	movlb	2	; () banked
  3936  0100E2  6FE5               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3937                           
  3938                           ; BSR set to: 2
  3939                           ;dans.c: 333: Dir = 0;
  3940  0100E4  0E00               	movlw	0
  3941  0100E6  6FDB               	movwf	(Travel@Dir+1)& (0+255),b
  3942  0100E8  0E00               	movlw	0
  3943  0100EA  D031               	goto	L2
  3944  0100EC                     l2414:
  3945                           
  3946                           ; BSR set to: 2
  3947                           ;dans.c: 336: else{
  3948                           ;dans.c: 337: Req_Dir = 83*Req_Dir;
  3949                           
  3950                           ; BSR set to: 2
  3951  0100EC  C2E4  F060         	movff	Travel@Req_Dir,___wmul@multiplier
  3952  0100F0  C2E5  F061         	movff	Travel@Req_Dir+1,___wmul@multiplier+1
  3953  0100F4  0E00               	movlw	0
  3954  0100F6  0100               	movlb	0	; () banked
  3955  0100F8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3956  0100FA  0E53               	movlw	83
  3957  0100FC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3958  0100FE  ECD6  F0AB         	call	___wmul	;wreg free
  3959  010102  C060  F2E4         	movff	?___wmul,Travel@Req_Dir
  3960  010106  C061  F2E5         	movff	?___wmul+1,Travel@Req_Dir+1
  3961                           
  3962                           ;dans.c: 338: Dir = 0;
  3963  01010A  0E00               	movlw	0
  3964  01010C  0102               	movlb	2	; () banked
  3965  01010E  6FDB               	movwf	(Travel@Dir+1)& (0+255),b
  3966  010110  0E00               	movlw	0
  3967  010112  6FDA               	movwf	Travel@Dir& (0+255),b
  3968                           
  3969                           ; BSR set to: 2
  3970                           ;dans.c: 339: if(Req_Dir > 166){
  3971  010114  BFE5               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
  3972  010116  D01C               	goto	l2417
  3973  010118  51E5               	movf	(Travel@Req_Dir+1)& (0+255),w,b
  3974  01011A  E104               	bnz	u13430
  3975  01011C  0EA7               	movlw	167
  3976  01011E  5DE4               	subwf	Travel@Req_Dir& (0+255),w,b
  3977  010120  A0D8               	btfss	status,0,c
  3978  010122  D016               	goto	l2417
  3979  010124                     u13430:
  3980                           
  3981                           ; BSR set to: 2
  3982                           ;dans.c: 340: Req_Dir = 332 - Req_Dir;
  3983  010124  C2E4  F0F9         	movff	Travel@Req_Dir,??_Travel
  3984  010128  C2E5  F0FA         	movff	Travel@Req_Dir+1,??_Travel+1
  3985  01012C  0100               	movlb	0	; () banked
  3986  01012E  1FF9               	comf	??_Travel& (0+255),f,b
  3987  010130  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  3988  010132  4BF9               	infsnz	??_Travel& (0+255),f,b
  3989  010134  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  3990  010136  0E4C               	movlw	76
  3991  010138  25F9               	addwf	??_Travel& (0+255),w,b
  3992  01013A  0102               	movlb	2	; () banked
  3993  01013C  6FE4               	movwf	Travel@Req_Dir& (0+255),b
  3994  01013E  0E01               	movlw	1
  3995  010140  0100               	movlb	0	; () banked
  3996  010142  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  3997  010144  0102               	movlb	2	; () banked
  3998  010146  6FE5               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3999                           
  4000                           ; BSR set to: 2
  4001                           ;dans.c: 341: Dir = 1;
  4002  010148  0E00               	movlw	0
  4003  01014A  6FDB               	movwf	(Travel@Dir+1)& (0+255),b
  4004  01014C  0E01               	movlw	1
  4005  01014E                     L2:
  4006  01014E  6FDA               	movwf	Travel@Dir& (0+255),b
  4007  010150                     l2417:
  4008                           
  4009                           ; BSR set to: 2
  4010                           ;dans.c: 342: }
  4011                           ;dans.c: 343: }
  4012                           ;dans.c: 344: Turn(Req_Dir, 200, Dir);
  4013                           
  4014                           ; BSR set to: 2
  4015                           
  4016                           ; BSR set to: 2
  4017  010150  C2E4  F061         	movff	Travel@Req_Dir,Turn@Angle
  4018  010154  C2E5  F062         	movff	Travel@Req_Dir+1,Turn@Angle+1
  4019  010158  0E00               	movlw	0
  4020  01015A  0100               	movlb	0	; () banked
  4021  01015C  6F64               	movwf	(Turn@Speed+1)& (0+255),b
  4022  01015E  0EC8               	movlw	200
  4023  010160  6F63               	movwf	Turn@Speed& (0+255),b
  4024  010162  C2DA  F065         	movff	Travel@Dir,Turn@Dir
  4025  010166  C2DB  F066         	movff	Travel@Dir+1,Turn@Dir+1
  4026  01016A  EC0E  F0A4         	call	_Turn	;wreg free
  4027                           
  4028                           ;dans.c: 345: Current_Direction = direction;
  4029  01016E  C0F1  F1F3         	movff	Travel@direction,_Current_Direction
  4030  010172  C0F2  F1F4         	movff	Travel@direction+1,_Current_Direction+1
  4031  010176                     l2413:
  4032                           
  4033                           ;dans.c: 346: }
  4034                           ;dans.c: 348: Drive(Spd,Spd);
  4035  010176  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
  4036  01017A  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  4037  01017E  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
  4038  010182  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  4039  010186  ECE2  F0A8         	call	_Drive	;wreg free
  4040                           
  4041                           ;dans.c: 353: k = 2;
  4042  01018A  0E00               	movlw	0
  4043  01018C  0101               	movlb	1	; () banked
  4044  01018E  6F3B               	movwf	(_k+1)& (0+255),b
  4045  010190  0E02               	movlw	2
  4046  010192  6F3A               	movwf	_k& (0+255),b
  4047                           
  4048                           ; BSR set to: 1
  4049                           ;dans.c: 354: int error;
  4050                           ;dans.c: 355: int spd1 =0 ;
  4051  010194  0E00               	movlw	0
  4052  010196  0102               	movlb	2	; () banked
  4053  010198  6FDD               	movwf	(Travel@spd1+1)& (0+255),b
  4054  01019A  0E00               	movlw	0
  4055  01019C  6FDC               	movwf	Travel@spd1& (0+255),b
  4056                           
  4057                           ; BSR set to: 2
  4058                           ;dans.c: 356: int spd2=0;
  4059  01019E  0E00               	movlw	0
  4060  0101A0  6FDF               	movwf	(Travel@spd2+1)& (0+255),b
  4061  0101A2  0E00               	movlw	0
  4062  0101A4  6FDE               	movwf	Travel@spd2& (0+255),b
  4063                           
  4064                           ;dans.c: 358: while (Dist_Travelled<Dist){
  4065  0101A6  D18C               	goto	l2431
  4066  0101A8                     
  4067                           ;dans.c: 361: ADCAverage();
  4068                           
  4069                           ; BSR set to: 2
  4070  0101A8  ECA9  F087         	call	_ADCAverage	;wreg free
  4071                           
  4072                           ;dans.c: 362: error = Desired_Level - average;
  4073  0101AC  C13E  F0F9         	movff	_average,??_Travel
  4074  0101B0  C13F  F0FA         	movff	_average+1,??_Travel+1
  4075  0101B4  0100               	movlb	0	; () banked
  4076  0101B6  1FF9               	comf	??_Travel& (0+255),f,b
  4077  0101B8  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4078  0101BA  4BF9               	infsnz	??_Travel& (0+255),f,b
  4079  0101BC  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4080  0101BE  502C               	movf	_Desired_Level,w,c
  4081  0101C0  25F9               	addwf	??_Travel& (0+255),w,b
  4082  0101C2  0102               	movlb	2	; () banked
  4083  0101C4  6FE6               	movwf	Travel@error& (0+255),b
  4084  0101C6  502D               	movf	_Desired_Level+1,w,c
  4085  0101C8  0100               	movlb	0	; () banked
  4086  0101CA  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  4087  0101CC  0102               	movlb	2	; () banked
  4088  0101CE  6FE7               	movwf	(Travel@error+1)& (0+255),b
  4089                           
  4090                           ; BSR set to: 2
  4091                           ;dans.c: 363: error*=k;
  4092  0101D0  C2E6  F060         	movff	Travel@error,___wmul@multiplier
  4093  0101D4  C2E7  F061         	movff	Travel@error+1,___wmul@multiplier+1
  4094  0101D8  C13A  F062         	movff	_k,___wmul@multiplicand
  4095  0101DC  C13B  F063         	movff	_k+1,___wmul@multiplicand+1
  4096  0101E0  ECD6  F0AB         	call	___wmul	;wreg free
  4097  0101E4  C060  F2E6         	movff	?___wmul,Travel@error
  4098  0101E8  C061  F2E7         	movff	?___wmul+1,Travel@error+1
  4099                           
  4100                           ;dans.c: 364: if (error > 190){
  4101  0101EC  0102               	movlb	2	; () banked
  4102  0101EE  BFE7               	btfsc	(Travel@error+1)& (0+255),7,b
  4103  0101F0  D00A               	goto	l2420
  4104  0101F2  51E7               	movf	(Travel@error+1)& (0+255),w,b
  4105  0101F4  E104               	bnz	u13440
  4106  0101F6  0EBF               	movlw	191
  4107  0101F8  5DE6               	subwf	Travel@error& (0+255),w,b
  4108  0101FA  A0D8               	btfss	status,0,c
  4109  0101FC  D004               	goto	l2420
  4110  0101FE                     u13440:
  4111                           
  4112                           ; BSR set to: 2
  4113                           ;dans.c: 365: error=190;
  4114  0101FE  0E00               	movlw	0
  4115  010200  6FE7               	movwf	(Travel@error+1)& (0+255),b
  4116  010202  0EBE               	movlw	190
  4117  010204  6FE6               	movwf	Travel@error& (0+255),b
  4118  010206                     l2420:
  4119                           
  4120                           ; BSR set to: 2
  4121                           ;dans.c: 366: }
  4122                           ;dans.c: 367: if (error < -190){
  4123                           
  4124                           ; BSR set to: 2
  4125  010206  AFE7               	btfss	(Travel@error+1)& (0+255),7,b
  4126  010208  D00A               	goto	l2421
  4127  01020A  0E42               	movlw	66
  4128  01020C  5DE6               	subwf	Travel@error& (0+255),w,b
  4129  01020E  0EFF               	movlw	255
  4130  010210  59E7               	subwfb	(Travel@error+1)& (0+255),w,b
  4131  010212  B0D8               	btfsc	status,0,c
  4132  010214  D004               	goto	l2421
  4133                           
  4134                           ; BSR set to: 2
  4135                           ;dans.c: 368: error = -190;
  4136  010216  0EFF               	movlw	255
  4137  010218  6FE7               	movwf	(Travel@error+1)& (0+255),b
  4138  01021A  0E42               	movlw	66
  4139  01021C  6FE6               	movwf	Travel@error& (0+255),b
  4140  01021E                     l2421:
  4141                           
  4142                           ; BSR set to: 2
  4143                           ;dans.c: 369: }
  4144                           ;dans.c: 370: if (error == Desired_Level + 4 || error == Desired_Level - 4){
  4145                           
  4146                           ; BSR set to: 2
  4147  01021E  0E04               	movlw	4
  4148  010220  242C               	addwf	_Desired_Level,w,c
  4149  010222  0100               	movlb	0	; () banked
  4150  010224  6FF9               	movwf	??_Travel& (0+255),b
  4151  010226  0E00               	movlw	0
  4152  010228  202D               	addwfc	_Desired_Level+1,w,c
  4153  01022A  6FFA               	movwf	(??_Travel+1)& (0+255),b
  4154  01022C  0102               	movlb	2	; () banked
  4155  01022E  51E6               	movf	Travel@error& (0+255),w,b
  4156  010230  0100               	movlb	0	; () banked
  4157  010232  19F9               	xorwf	??_Travel& (0+255),w,b
  4158  010234  E106               	bnz	u13460
  4159  010236  0102               	movlb	2	; () banked
  4160  010238  51E7               	movf	(Travel@error+1)& (0+255),w,b
  4161  01023A  0100               	movlb	0	; () banked
  4162  01023C  19FA               	xorwf	(??_Travel+1)& (0+255),w,b
  4163  01023E  B4D8               	btfsc	status,2,c
  4164  010240  D017               	goto	u13470
  4165  010242                     u13460:
  4166                           
  4167                           ; BSR set to: 0
  4168  010242  0EFC               	movlw	252
  4169  010244  6FF9               	movwf	??_Travel& (0+255),b
  4170  010246  0EFF               	movlw	255
  4171  010248  6FFA               	movwf	(??_Travel+1)& (0+255),b
  4172  01024A  C02C  F0FB         	movff	_Desired_Level,??_Travel+2
  4173  01024E  C02D  F0FC         	movff	_Desired_Level+1,??_Travel+3
  4174  010252  51F9               	movf	??_Travel& (0+255),w,b
  4175  010254  27FB               	addwf	(??_Travel+2)& (0+255),f,b
  4176  010256  51FA               	movf	(??_Travel+1)& (0+255),w,b
  4177  010258  23FC               	addwfc	(??_Travel+3)& (0+255),f,b
  4178  01025A  0102               	movlb	2	; () banked
  4179  01025C  51E6               	movf	Travel@error& (0+255),w,b
  4180  01025E  0100               	movlb	0	; () banked
  4181  010260  19FB               	xorwf	(??_Travel+2)& (0+255),w,b
  4182  010262  E110               	bnz	l16033
  4183  010264  0102               	movlb	2	; () banked
  4184  010266  51E7               	movf	(Travel@error+1)& (0+255),w,b
  4185  010268  0100               	movlb	0	; () banked
  4186  01026A  19FC               	xorwf	(??_Travel+3)& (0+255),w,b
  4187  01026C  A4D8               	btfss	status,2,c
  4188  01026E  D00A               	goto	l2422
  4189  010270                     u13470:
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;dans.c: 371: Drive(Spd,Spd);
  4193                           
  4194                           ; BSR set to: 0
  4195  010270  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
  4196  010274  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  4197  010278  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
  4198  01027C  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  4199  010280  ECE2  F0A8         	call	_Drive	;wreg free
  4200  010284                     l2422:
  4201  010284                     l16033:
  4202                           
  4203                           ;dans.c: 372: }
  4204                           ;dans.c: 373: if (error >= 0){
  4205  010284  0102               	movlb	2	; () banked
  4206  010286  BFE7               	btfsc	(Travel@error+1)& (0+255),7,b
  4207  010288  D01C               	goto	l2425
  4208                           
  4209                           ; BSR set to: 2
  4210                           ;dans.c: 374: spd1 = Spd - error;
  4211  01028A  C2E6  F0F9         	movff	Travel@error,??_Travel
  4212  01028E  C2E7  F0FA         	movff	Travel@error+1,??_Travel+1
  4213  010292  0100               	movlb	0	; () banked
  4214  010294  1FF9               	comf	??_Travel& (0+255),f,b
  4215  010296  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4216  010298  4BF9               	infsnz	??_Travel& (0+255),f,b
  4217  01029A  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4218  01029C  51F7               	movf	Travel@Spd& (0+255),w,b
  4219  01029E  25F9               	addwf	??_Travel& (0+255),w,b
  4220  0102A0  0102               	movlb	2	; () banked
  4221  0102A2  6FDC               	movwf	Travel@spd1& (0+255),b
  4222  0102A4  0100               	movlb	0	; () banked
  4223  0102A6  51F8               	movf	(Travel@Spd+1)& (0+255),w,b
  4224  0102A8  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  4225  0102AA  0102               	movlb	2	; () banked
  4226  0102AC  6FDD               	movwf	(Travel@spd1+1)& (0+255),b
  4227                           
  4228                           ; BSR set to: 2
  4229                           ;dans.c: 375: Drive(spd1,Spd);
  4230  0102AE  C2DC  F061         	movff	Travel@spd1,Drive@SpeedL
  4231  0102B2  C2DD  F062         	movff	Travel@spd1+1,Drive@SpeedL+1
  4232  0102B6  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
  4233  0102BA  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  4234  0102BE  ECE2  F0A8         	call	_Drive	;wreg free
  4235  0102C2                     l2425:
  4236                           
  4237                           ;dans.c: 376: }
  4238                           ;dans.c: 377: if (error <= 0){
  4239  0102C2  0102               	movlb	2	; () banked
  4240  0102C4  BFE7               	btfsc	(Travel@error+1)& (0+255),7,b
  4241  0102C6  D005               	goto	u13490
  4242  0102C8  51E7               	movf	(Travel@error+1)& (0+255),w,b
  4243  0102CA  E125               	bnz	l16051
  4244  0102CC  05E6               	decf	Travel@error& (0+255),w,b
  4245  0102CE  B0D8               	btfsc	status,0,c
  4246  0102D0  D022               	goto	l2426
  4247  0102D2                     u13490:
  4248                           
  4249                           ; BSR set to: 2
  4250                           ;dans.c: 378: error=((error<0)?-error:error);
  4251  0102D2  AFE7               	btfss	(Travel@error+1)& (0+255),7,b
  4252  0102D4  D004               	goto	l2430
  4253                           
  4254                           ; BSR set to: 2
  4255                           
  4256                           ; BSR set to: 2
  4257                           
  4258                           ; BSR set to: 2
  4259  0102D6  6DE6               	negf	Travel@error& (0+255),b
  4260  0102D8  1FE7               	comf	(Travel@error+1)& (0+255),f,b
  4261  0102DA  B0D8               	btfsc	status,0,c
  4262  0102DC  2BE7               	incf	(Travel@error+1)& (0+255),f,b
  4263  0102DE                     l2430:
  4264                           
  4265                           ; BSR set to: 2
  4266                           ;dans.c: 379: spd2= Spd - error;
  4267                           
  4268                           ; BSR set to: 2
  4269  0102DE  C2E6  F0F9         	movff	Travel@error,??_Travel
  4270  0102E2  C2E7  F0FA         	movff	Travel@error+1,??_Travel+1
  4271  0102E6  0100               	movlb	0	; () banked
  4272  0102E8  1FF9               	comf	??_Travel& (0+255),f,b
  4273  0102EA  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4274  0102EC  4BF9               	infsnz	??_Travel& (0+255),f,b
  4275  0102EE  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4276  0102F0  51F7               	movf	Travel@Spd& (0+255),w,b
  4277  0102F2  25F9               	addwf	??_Travel& (0+255),w,b
  4278  0102F4  0102               	movlb	2	; () banked
  4279  0102F6  6FDE               	movwf	Travel@spd2& (0+255),b
  4280  0102F8  0100               	movlb	0	; () banked
  4281  0102FA  51F8               	movf	(Travel@Spd+1)& (0+255),w,b
  4282  0102FC  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  4283  0102FE  0102               	movlb	2	; () banked
  4284  010300  6FDF               	movwf	(Travel@spd2+1)& (0+255),b
  4285                           
  4286                           ; BSR set to: 2
  4287                           ;dans.c: 380: Drive(Spd,spd2);
  4288  010302  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
  4289  010306  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  4290  01030A  C2DE  F063         	movff	Travel@spd2,Drive@SpeedR
  4291  01030E  C2DF  F064         	movff	Travel@spd2+1,Drive@SpeedR+1
  4292  010312  ECE2  F0A8         	call	_Drive	;wreg free
  4293  010316                     l2426:
  4294  010316                     l16051:
  4295                           
  4296                           ;dans.c: 381: }
  4297                           ;dans.c: 403: printf("%c", (char)35);
  4298  010316  0EFC               	movlw	low STR_1
  4299  010318  0100               	movlb	0	; () banked
  4300  01031A  6F75               	movwf	printf@f& (0+255),b
  4301  01031C  0EFF               	movlw	high STR_1
  4302  01031E  6F76               	movwf	(printf@f+1)& (0+255),b
  4303  010320  0E00               	movlw	0
  4304  010322  6F78               	movwf	(?_printf+3)& (0+255),b
  4305  010324  0E23               	movlw	35
  4306  010326  6F77               	movwf	(?_printf+2)& (0+255),b
  4307  010328  ECF8  F095         	call	_printf	;wreg free
  4308                           
  4309                           ;dans.c: 404: Dist_Travelled += UpdateDistance();
  4310  01032C  EC33  F0A6         	call	_UpdateDistance	;wreg free
  4311  010330  0100               	movlb	0	; () banked
  4312  010332  5161               	movf	?_UpdateDistance& (0+255),w,b
  4313  010334  0102               	movlb	2	; () banked
  4314  010336  27E2               	addwf	Travel@Dist_Travelled& (0+255),f,b
  4315  010338  0100               	movlb	0	; () banked
  4316  01033A  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  4317  01033C  0102               	movlb	2	; () banked
  4318  01033E  23E3               	addwfc	(Travel@Dist_Travelled+1)& (0+255),f,b
  4319                           
  4320                           ; BSR set to: 2
  4321                           ;dans.c: 405: printf("%d \n", Dist_Travelled);
  4322  010340  0EF3               	movlw	low STR_30
  4323  010342  0100               	movlb	0	; () banked
  4324  010344  6F75               	movwf	printf@f& (0+255),b
  4325  010346  0EFF               	movlw	high STR_30
  4326  010348  6F76               	movwf	(printf@f+1)& (0+255),b
  4327  01034A  C2E2  F077         	movff	Travel@Dist_Travelled,?_printf+2
  4328  01034E  C2E3  F078         	movff	Travel@Dist_Travelled+1,?_printf+3
  4329  010352  ECF8  F095         	call	_printf	;wreg free
  4330                           
  4331                           ;dans.c: 406: printf("\nspd1 %d",spd1);
  4332  010356  0EC8               	movlw	low STR_31
  4333  010358  0100               	movlb	0	; () banked
  4334  01035A  6F75               	movwf	printf@f& (0+255),b
  4335  01035C  0EFF               	movlw	high STR_31
  4336  01035E  6F76               	movwf	(printf@f+1)& (0+255),b
  4337  010360  C2DC  F077         	movff	Travel@spd1,?_printf+2
  4338  010364  C2DD  F078         	movff	Travel@spd1+1,?_printf+3
  4339  010368  ECF8  F095         	call	_printf	;wreg free
  4340                           
  4341                           ;dans.c: 407: printf("\nspd2 %d",spd2);
  4342  01036C  0ED1               	movlw	low STR_32
  4343  01036E  0100               	movlb	0	; () banked
  4344  010370  6F75               	movwf	printf@f& (0+255),b
  4345  010372  0EFF               	movlw	high STR_32
  4346  010374  6F76               	movwf	(printf@f+1)& (0+255),b
  4347  010376  C2DE  F077         	movff	Travel@spd2,?_printf+2
  4348  01037A  C2DF  F078         	movff	Travel@spd2+1,?_printf+3
  4349  01037E  ECF8  F095         	call	_printf	;wreg free
  4350                           
  4351                           ;dans.c: 408: printf("\nADC %d",average);
  4352  010382  0EE3               	movlw	low STR_33
  4353  010384  0100               	movlb	0	; () banked
  4354  010386  6F75               	movwf	printf@f& (0+255),b
  4355  010388  0EFF               	movlw	high STR_33
  4356  01038A  6F76               	movwf	(printf@f+1)& (0+255),b
  4357  01038C  C13E  F077         	movff	_average,?_printf+2
  4358  010390  C13F  F078         	movff	_average+1,?_printf+3
  4359  010394  ECF8  F095         	call	_printf	;wreg free
  4360                           
  4361                           ;dans.c: 409: printf("\nDesired: %d",Desired_Level);
  4362  010398  0E6B               	movlw	low STR_34
  4363  01039A  0100               	movlb	0	; () banked
  4364  01039C  6F75               	movwf	printf@f& (0+255),b
  4365  01039E  0EFF               	movlw	high STR_34
  4366  0103A0  6F76               	movwf	(printf@f+1)& (0+255),b
  4367  0103A2  C02C  F077         	movff	_Desired_Level,?_printf+2
  4368  0103A6  C02D  F078         	movff	_Desired_Level+1,?_printf+3
  4369  0103AA  ECF8  F095         	call	_printf	;wreg free
  4370                           
  4371                           ;dans.c: 410: printf("\nSpeed: %d",Spd);
  4372  0103AE  0EA8               	movlw	low STR_35
  4373  0103B0  0100               	movlb	0	; () banked
  4374  0103B2  6F75               	movwf	printf@f& (0+255),b
  4375  0103B4  0EFF               	movlw	high STR_35
  4376  0103B6  6F76               	movwf	(printf@f+1)& (0+255),b
  4377  0103B8  C0F7  F077         	movff	Travel@Spd,?_printf+2
  4378  0103BC  C0F8  F078         	movff	Travel@Spd+1,?_printf+3
  4379  0103C0  ECF8  F095         	call	_printf	;wreg free
  4380                           
  4381                           ;dans.c: 411: printf("\nError: %d",error);
  4382  0103C4  0EB3               	movlw	low STR_36
  4383  0103C6  0100               	movlb	0	; () banked
  4384  0103C8  6F75               	movwf	printf@f& (0+255),b
  4385  0103CA  0EFF               	movlw	high STR_36
  4386  0103CC  6F76               	movwf	(printf@f+1)& (0+255),b
  4387  0103CE  C2E6  F077         	movff	Travel@error,?_printf+2
  4388  0103D2  C2E7  F078         	movff	Travel@error+1,?_printf+3
  4389  0103D6  ECF8  F095         	call	_printf	;wreg free
  4390                           
  4391                           ;dans.c: 412: Console_Render();
  4392  0103DA  EC1B  F092         	call	_Console_Render	;wreg free
  4393                           
  4394                           ;dans.c: 414: if (Get_VirtualWall_State()){
  4395  0103DE  EC38  F0AC         	call	_Get_VirtualWall_State	;wreg free
  4396  0103E2  0100               	movlb	0	; () banked
  4397  0103E4  5161               	movf	?_Get_VirtualWall_State& (0+255),w,b
  4398  0103E6  1162               	iorwf	(?_Get_VirtualWall_State+1)& (0+255),w,b
  4399  0103E8  B4D8               	btfsc	status,2,c
  4400  0103EA  D06A               	goto	l2431
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;dans.c: 415: int rev_Dist = 0;
  4404  0103EC  0E00               	movlw	0
  4405  0103EE  0102               	movlb	2	; () banked
  4406  0103F0  6FE1               	movwf	(Travel@rev_Dist+1)& (0+255),b
  4407  0103F2  0E00               	movlw	0
  4408  0103F4  6FE0               	movwf	Travel@rev_Dist& (0+255),b
  4409                           
  4410                           ; BSR set to: 2
  4411                           ;dans.c: 417: printf("WALL FOUND\n");
  4412  0103F6  0E78               	movlw	low STR_37
  4413  0103F8  0100               	movlb	0	; () banked
  4414  0103FA  6F75               	movwf	printf@f& (0+255),b
  4415  0103FC  0EFF               	movlw	high STR_37
  4416  0103FE  6F76               	movwf	(printf@f+1)& (0+255),b
  4417  010400  ECF8  F095         	call	_printf	;wreg free
  4418                           
  4419                           ;dans.c: 418: Console_Render();
  4420  010404  EC1B  F092         	call	_Console_Render	;wreg free
  4421                           
  4422                           ;dans.c: 419: Drive(-Spd,-Spd);
  4423  010408  C0F7  F0F9         	movff	Travel@Spd,??_Travel
  4424  01040C  C0F8  F0FA         	movff	Travel@Spd+1,??_Travel+1
  4425  010410  0100               	movlb	0	; () banked
  4426  010412  1FF9               	comf	??_Travel& (0+255),f,b
  4427  010414  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4428  010416  4BF9               	infsnz	??_Travel& (0+255),f,b
  4429  010418  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4430  01041A  C0F9  F061         	movff	??_Travel,Drive@SpeedL
  4431  01041E  C0FA  F062         	movff	??_Travel+1,Drive@SpeedL+1
  4432  010422  C0F7  F0FB         	movff	Travel@Spd,??_Travel+2
  4433  010426  C0F8  F0FC         	movff	Travel@Spd+1,??_Travel+3
  4434  01042A  1FFB               	comf	(??_Travel+2)& (0+255),f,b
  4435  01042C  1FFC               	comf	(??_Travel+3)& (0+255),f,b
  4436  01042E  4BFB               	infsnz	(??_Travel+2)& (0+255),f,b
  4437  010430  2BFC               	incf	(??_Travel+3)& (0+255),f,b
  4438  010432  C0FB  F063         	movff	??_Travel+2,Drive@SpeedR
  4439  010436  C0FC  F064         	movff	??_Travel+3,Drive@SpeedR+1
  4440  01043A  ECE2  F0A8         	call	_Drive	;wreg free
  4441                           
  4442                           ;dans.c: 420: UpdateDistance();
  4443  01043E  EC33  F0A6         	call	_UpdateDistance	;wreg free
  4444                           
  4445                           ;dans.c: 421: while(rev_Dist >= -Dist_Travelled){
  4446  010442  D028               	goto	l2432
  4447  010444                     
  4448                           ;dans.c: 423: rev_Dist += UpdateDistance();
  4449  010444  EC33  F0A6         	call	_UpdateDistance	;wreg free
  4450  010448  0100               	movlb	0	; () banked
  4451  01044A  5161               	movf	?_UpdateDistance& (0+255),w,b
  4452  01044C  0102               	movlb	2	; () banked
  4453  01044E  27E0               	addwf	Travel@rev_Dist& (0+255),f,b
  4454  010450  0100               	movlb	0	; () banked
  4455  010452  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  4456  010454  0102               	movlb	2	; () banked
  4457  010456  23E1               	addwfc	(Travel@rev_Dist+1)& (0+255),f,b
  4458                           
  4459                           ; BSR set to: 2
  4460                           ;dans.c: 424: Console_Render();
  4461  010458  EC1B  F092         	call	_Console_Render	;wreg free
  4462                           
  4463                           ;dans.c: 425: printf("%c", (char)35);
  4464  01045C  0EFC               	movlw	low STR_1
  4465  01045E  0100               	movlb	0	; () banked
  4466  010460  6F75               	movwf	printf@f& (0+255),b
  4467  010462  0EFF               	movlw	high STR_1
  4468  010464  6F76               	movwf	(printf@f+1)& (0+255),b
  4469  010466  0E00               	movlw	0
  4470  010468  6F78               	movwf	(?_printf+3)& (0+255),b
  4471  01046A  0E23               	movlw	35
  4472  01046C  6F77               	movwf	(?_printf+2)& (0+255),b
  4473  01046E  ECF8  F095         	call	_printf	;wreg free
  4474                           
  4475                           ;dans.c: 426: printf("rev:%d Tar: %d\n", rev_Dist, Dist_Travelled);
  4476  010472  0E4B               	movlw	low STR_39
  4477  010474  0100               	movlb	0	; () banked
  4478  010476  6F75               	movwf	printf@f& (0+255),b
  4479  010478  0EFF               	movlw	high STR_39
  4480  01047A  6F76               	movwf	(printf@f+1)& (0+255),b
  4481  01047C  C2E0  F077         	movff	Travel@rev_Dist,?_printf+2
  4482  010480  C2E1  F078         	movff	Travel@rev_Dist+1,?_printf+3
  4483  010484  C2E2  F079         	movff	Travel@Dist_Travelled,?_printf+4
  4484  010488  C2E3  F07A         	movff	Travel@Dist_Travelled+1,?_printf+5
  4485  01048C  ECF8  F095         	call	_printf	;wreg free
  4486                           
  4487                           ;dans.c: 427: Console_Render();
  4488  010490  EC1B  F092         	call	_Console_Render	;wreg free
  4489  010494                     l2432:
  4490  010494  C2E2  F0F9         	movff	Travel@Dist_Travelled,??_Travel
  4491  010498  C2E3  F0FA         	movff	Travel@Dist_Travelled+1,??_Travel+1
  4492  01049C  0100               	movlb	0	; () banked
  4493  01049E  1FF9               	comf	??_Travel& (0+255),f,b
  4494  0104A0  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4495  0104A2  4BF9               	infsnz	??_Travel& (0+255),f,b
  4496  0104A4  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4497  0104A6  51F9               	movf	??_Travel& (0+255),w,b
  4498  0104A8  0102               	movlb	2	; () banked
  4499  0104AA  5DE0               	subwf	Travel@rev_Dist& (0+255),w,b
  4500  0104AC  51E1               	movf	(Travel@rev_Dist+1)& (0+255),w,b
  4501  0104AE  0A80               	xorlw	128
  4502  0104B0  0100               	movlb	0	; () banked
  4503  0104B2  6FFB               	movwf	(??_Travel+2)& (0+255),b
  4504  0104B4  51FA               	movf	(??_Travel+1)& (0+255),w,b
  4505  0104B6  0A80               	xorlw	128
  4506  0104B8  59FB               	subwfb	(??_Travel+2)& (0+255),w,b
  4507  0104BA  A0D8               	btfss	status,0,c
  4508  0104BC  0012               	return	
  4509  0104BE  D7C2               	goto	l2433
  4510  0104C0                     l2431:
  4511                           
  4512                           ; BSR set to: 0
  4513                           
  4514                           ; BSR set to: 0
  4515  0104C0  0100               	movlb	0	; () banked
  4516  0104C2  51F3               	movf	Travel@Dist& (0+255),w,b
  4517  0104C4  0102               	movlb	2	; () banked
  4518  0104C6  5DE2               	subwf	Travel@Dist_Travelled& (0+255),w,b
  4519  0104C8  51E3               	movf	(Travel@Dist_Travelled+1)& (0+255),w,b
  4520  0104CA  0A80               	xorlw	128
  4521  0104CC  0100               	movlb	0	; () banked
  4522  0104CE  6FF9               	movwf	??_Travel& (0+255),b
  4523  0104D0  51F4               	movf	(Travel@Dist+1)& (0+255),w,b
  4524  0104D2  0A80               	xorlw	128
  4525  0104D4  59F9               	subwfb	??_Travel& (0+255),w,b
  4526  0104D6  A0D8               	btfss	status,0,c
  4527  0104D8  D667               	goto	l2419
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;dans.c: 430: }
  4531                           ;dans.c: 434: }
  4532                           ;dans.c: 435: if (direction == 0){
  4533                           
  4534                           ; BSR set to: 0
  4535  0104DA  51F1               	movf	Travel@direction& (0+255),w,b
  4536  0104DC  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
  4537  0104DE  A4D8               	btfss	status,2,c
  4538  0104E0  D004               	goto	l2437
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;dans.c: 436: X_Pos -= 1;
  4542  0104E2  0630               	decf	_X_Pos,f,c
  4543  0104E4  A0D8               	btfss	status,0,c
  4544  0104E6  0631               	decf	_X_Pos+1,f,c
  4545                           
  4546                           ;dans.c: 437: }
  4547  0104E8  D017               	goto	l2443
  4548  0104EA                     l2437:
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;dans.c: 438: else if (direction == 1){
  4552                           
  4553                           ; BSR set to: 0
  4554  0104EA  05F1               	decf	Travel@direction& (0+255),w,b
  4555  0104EC  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
  4556  0104EE  A4D8               	btfss	status,2,c
  4557  0104F0  D003               	goto	l2439
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;dans.c: 439: Y_Pos += 1;
  4561  0104F2  4A2E               	infsnz	_Y_Pos,f,c
  4562  0104F4  2A2F               	incf	_Y_Pos+1,f,c
  4563                           
  4564                           ;dans.c: 440: }
  4565  0104F6  D010               	goto	l2443
  4566  0104F8                     l2439:
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;dans.c: 441: else if (direction == 2){
  4570                           
  4571                           ; BSR set to: 0
  4572  0104F8  0E02               	movlw	2
  4573  0104FA  19F1               	xorwf	Travel@direction& (0+255),w,b
  4574  0104FC  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
  4575  0104FE  A4D8               	btfss	status,2,c
  4576  010500  D003               	goto	l2441
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;dans.c: 442: X_Pos += 1;
  4580  010502  4A30               	infsnz	_X_Pos,f,c
  4581  010504  2A31               	incf	_X_Pos+1,f,c
  4582                           
  4583                           ;dans.c: 443: }
  4584  010506  D008               	goto	l2443
  4585  010508                     l2441:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;dans.c: 444: else if (direction == 3){
  4589                           
  4590                           ; BSR set to: 0
  4591  010508  0E03               	movlw	3
  4592  01050A  19F1               	xorwf	Travel@direction& (0+255),w,b
  4593  01050C  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
  4594  01050E  A4D8               	btfss	status,2,c
  4595  010510  D003               	goto	l2443
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;dans.c: 445: Y_Pos -= 1;
  4599  010512  062E               	decf	_Y_Pos,f,c
  4600  010514  A0D8               	btfss	status,0,c
  4601  010516  062F               	decf	_Y_Pos+1,f,c
  4602  010518                     l2443:
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;dans.c: 446: }
  4606                           ;dans.c: 447: Robot_Stop();
  4607                           
  4608                           ; BSR set to: 0
  4609                           
  4610                           ; BSR set to: 0
  4611                           
  4612                           ; BSR set to: 0
  4613                           
  4614                           ; BSR set to: 0
  4615  010518  EC4A  F0AC         	call	_Robot_Stop	;wreg free
  4616  01051C  0012               	return		;funcret
  4617  01051E                     __end_of_Travel:
  4618                           	opt stack 0
  4619                           tosu	equ	0xFFF
  4620                           tosh	equ	0xFFE
  4621                           tosl	equ	0xFFD
  4622                           pclath	equ	0xFFA
  4623                           tblptru	equ	0xFF8
  4624                           tblptrh	equ	0xFF7
  4625                           tblptrl	equ	0xFF6
  4626                           tablat	equ	0xFF5
  4627                           postinc0	equ	0xFEE
  4628                           wreg	equ	0xFE8
  4629                           postdec1	equ	0xFE5
  4630                           fsr1h	equ	0xFE2
  4631                           fsr1l	equ	0xFE1
  4632                           postinc2	equ	0xFDE
  4633                           status	equ	0xFD8
  4634                           
  4635 ;; *************** function _printf *****************
  4636 ;; Defined at:
  4637 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4640 ;;		 -> STR_48(9), STR_47(10), STR_46(3), STR_45(24), 
  4641 ;;		 -> STR_44(3), STR_43(12), STR_42(12), STR_41(12), 
  4642 ;;		 -> STR_40(12), STR_39(16), STR_38(3), STR_37(12), 
  4643 ;;		 -> STR_36(11), STR_35(11), STR_34(13), STR_33(8), 
  4644 ;;		 -> STR_32(9), STR_31(9), STR_30(5), STR_29(3), 
  4645 ;;		 -> STR_28(8), STR_27(3), STR_26(12), STR_25(3), 
  4646 ;;		 -> STR_24(20), STR_23(19), STR_22(3), STR_21(20), 
  4647 ;;		 -> STR_20(19), STR_19(3), STR_18(2), STR_17(4), 
  4648 ;;		 -> STR_16(3), STR_15(39), STR_14(42), STR_13(16), 
  4649 ;;		 -> STR_12(3), STR_11(21), STR_10(3), STR_9(19), 
  4650 ;;		 -> STR_8(28), STR_7(20), STR_6(3), STR_5(17), 
  4651 ;;		 -> STR_4(12), STR_3(3), STR_2(19), STR_1(3), 
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  tmpval          4    0        struct .
  4654 ;;  cp              3    0        PTR const unsigned char 
  4655 ;;  val             2   32[BANK0 ] unsigned int 
  4656 ;;  ap              2   30[BANK0 ] PTR void [1]
  4657 ;;		 -> ?_printf(2), 
  4658 ;;  len             2    0        unsigned int 
  4659 ;;  c               1   34[BANK0 ] char 
  4660 ;;  prec            1   29[BANK0 ] char 
  4661 ;;  flag            1   28[BANK0 ] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  2   21[BANK0 ] int 
  4664 ;; Registers used:
  4665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4671 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;Total ram usage:       14 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:   12
  4678 ;; This function calls:
  4679 ;;		___lwdiv
  4680 ;;		___lwmod
  4681 ;;		_putch
  4682 ;; This function is called by:
  4683 ;;		_main
  4684 ;;		_Travel
  4685 ;;		_Sensor_Observe
  4686 ;;		_Closest_Object
  4687 ;;		_pop
  4688 ;;		_push
  4689 ;;		_Init_Pos_Array
  4690 ;;		_Detect_Victim
  4691 ;;		_movement1
  4692 ;;		_Find_Flag
  4693 ;;		_Move_ADC_To
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697                           	psect	text2
  4698  012BF0                     __ptext2:
  4699                           	opt stack 0
  4700  012BF0                     _printf:
  4701                           	opt stack 18
  4702                           
  4703                           ;doprnt.c: 466: va_list ap;
  4704                           ;doprnt.c: 499: signed char c;
  4705                           ;doprnt.c: 506: signed char prec;
  4706                           ;doprnt.c: 508: unsigned char flag;
  4707                           ;doprnt.c: 523: union {
  4708                           ;doprnt.c: 524: unsigned long vd;
  4709                           ;doprnt.c: 525: double integ;
  4710                           ;doprnt.c: 526: } tmpval;
  4711                           ;doprnt.c: 528: unsigned int val;
  4712                           ;doprnt.c: 529: unsigned len;
  4713                           ;doprnt.c: 530: const char * cp;
  4714                           ;doprnt.c: 533: *ap = __va_start();
  4715                           
  4716                           ;incstack = 0
  4717  012BF0  0E77               	movlw	low (?_printf+2)
  4718  012BF2  0100               	movlb	0	; () banked
  4719  012BF4  6F7E               	movwf	printf@ap& (0+255),b
  4720  012BF6  0E00               	movlw	high (?_printf+2)
  4721  012BF8  6F7F               	movwf	(printf@ap+1)& (0+255),b
  4722                           
  4723                           ;doprnt.c: 536: while(c = *f++) {
  4724  012BFA  D09E               	goto	u12940
  4725  012BFC                     
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 538: if(c != '%')
  4728                           
  4729                           ; BSR set to: 0
  4730  012BFC  0E25               	movlw	37
  4731  012BFE  1982               	xorwf	printf@c& (0+255),w,b
  4732  012C00  B4D8               	btfsc	status,2,c
  4733  012C02  D004               	goto	l2486
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;doprnt.c: 540: {
  4737                           ;doprnt.c: 541: (putch(c) );
  4738  012C04  5182               	movf	printf@c& (0+255),w,b
  4739  012C06  EC7F  F0AD         	call	_putch
  4740                           
  4741                           ;doprnt.c: 542: continue;
  4742  012C0A  D096               	goto	u12940
  4743  012C0C                     l2486:
  4744                           
  4745                           ;doprnt.c: 543: }
  4746                           ;doprnt.c: 548: flag = 0;
  4747  012C0C  0E00               	movlw	0
  4748  012C0E  0100               	movlb	0	; () banked
  4749  012C10  6F7C               	movwf	printf@flag& (0+255),b
  4750                           
  4751                           ;doprnt.c: 635: switch(c = *f++) {
  4752  012C12  D00E               	goto	l2487
  4753  012C14                     
  4754                           ; BSR set to: 0
  4755                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4756                           
  4757                           ; BSR set to: 0
  4758  012C14  C07E  FFD9         	movff	printf@ap,fsr2l
  4759  012C18  C07F  FFDA         	movff	printf@ap+1,fsr2h
  4760  012C1C  50DF               	movf	indf2,w,c
  4761  012C1E  6F82               	movwf	printf@c& (0+255),b
  4762                           
  4763                           ; BSR set to: 0
  4764  012C20  0E02               	movlw	2
  4765  012C22  277E               	addwf	printf@ap& (0+255),f,b
  4766  012C24  0E00               	movlw	0
  4767  012C26  237F               	addwfc	(printf@ap+1)& (0+255),f,b
  4768  012C28                     
  4769                           ; BSR set to: 0
  4770                           ;doprnt.c: 809: (putch(c) );
  4771                           
  4772                           ; BSR set to: 0
  4773  012C28  5182               	movf	printf@c& (0+255),w,b
  4774  012C2A  EC7F  F0AD         	call	_putch
  4775                           
  4776                           ;doprnt.c: 810: continue;
  4777  012C2E  D084               	goto	u12940
  4778  012C30                     l2487:
  4779  012C30  C075  FFF6         	movff	printf@f,tblptrl
  4780  012C34  C076  FFF7         	movff	printf@f+1,tblptrh
  4781  012C38  0100               	movlb	0	; () banked
  4782  012C3A  4B75               	infsnz	printf@f& (0+255),f,b
  4783  012C3C  2B76               	incf	(printf@f+1)& (0+255),f,b
  4784  012C3E                     	if	0	;tblptru may be non-zero
  4785  012C3E                     	endif
  4786  012C3E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4787  012C3E  0E00               	movlw	low (__mediumconst shr (0+16))
  4788  012C40  6EF8               	movwf	tblptru,c
  4789  012C42                     	endif
  4790  012C42  0008               	tblrd		*
  4791  012C44  CFF5 F082          	movff	tablat,printf@c
  4792  012C48  5182               	movf	printf@c& (0+255),w,b
  4793                           
  4794                           ; Switch size 1, requested type "space"
  4795                           ; Number of cases is 4, Range of values is 0 to 105
  4796                           ; switch strategies available:
  4797                           ; Name         Instructions Cycles
  4798                           ; simple_byte           13     7 (average)
  4799                           ;	Chosen strategy is simple_byte
  4800  012C4A  0A00               	xorlw	0	; case 0
  4801  012C4C  B4D8               	btfsc	status,2,c
  4802  012C4E  0012               	return	
  4803  012C50  0A63               	xorlw	99	; case 99
  4804  012C52  B4D8               	btfsc	status,2,c
  4805  012C54  D7DF               	goto	l2493
  4806  012C56  0A07               	xorlw	7	; case 100
  4807  012C58  B4D8               	btfsc	status,2,c
  4808  012C5A  D003               	goto	l2492
  4809  012C5C  0A0D               	xorlw	13	; case 105
  4810  012C5E  A4D8               	btfss	status,2,c
  4811  012C60  D7E3               	goto	l2494
  4812  012C62                     l2492:
  4813                           
  4814                           ;doprnt.c: 1253: {
  4815                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4816                           
  4817                           ; BSR set to: 0
  4818  012C62  C07E  FFD9         	movff	printf@ap,fsr2l
  4819  012C66  C07F  FFDA         	movff	printf@ap+1,fsr2h
  4820  012C6A  CFDE F080          	movff	postinc2,printf@val
  4821  012C6E  CFDD F081          	movff	postdec2,printf@val+1
  4822  012C72  0E02               	movlw	2
  4823  012C74  0100               	movlb	0	; () banked
  4824  012C76  277E               	addwf	printf@ap& (0+255),f,b
  4825  012C78  0E00               	movlw	0
  4826  012C7A  237F               	addwfc	(printf@ap+1)& (0+255),f,b
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;doprnt.c: 1261: if((int)val < 0) {
  4830  012C7C  AF81               	btfss	(printf@val+1)& (0+255),7,b
  4831  012C7E  D006               	goto	l2495
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;doprnt.c: 1262: flag |= 0x03;
  4835  012C80  0E03               	movlw	3
  4836  012C82  137C               	iorwf	printf@flag& (0+255),f,b
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;doprnt.c: 1263: val = -val;
  4840  012C84  6D80               	negf	printf@val& (0+255),b
  4841  012C86  1F81               	comf	(printf@val+1)& (0+255),f,b
  4842  012C88  B0D8               	btfsc	status,0,c
  4843  012C8A  2B81               	incf	(printf@val+1)& (0+255),f,b
  4844  012C8C                     l2495:
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;doprnt.c: 1264: }
  4848                           ;doprnt.c: 1266: }
  4849                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4850                           
  4851                           ; BSR set to: 0
  4852  012C8C  0E01               	movlw	1
  4853  012C8E  6F82               	movwf	printf@c& (0+255),b
  4854  012C90                     l15453:
  4855                           
  4856                           ; BSR set to: 0
  4857  012C90  0E05               	movlw	5
  4858  012C92  1982               	xorwf	printf@c& (0+255),w,b
  4859  012C94  B4D8               	btfsc	status,2,c
  4860  012C96  D015               	goto	u12920
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;doprnt.c: 1306: if(val < dpowers[c])
  4864                           
  4865                           ; BSR set to: 0
  4866                           
  4867                           ; BSR set to: 0
  4868  012C98  5182               	movf	printf@c& (0+255),w,b
  4869  012C9A  0D02               	mullw	2
  4870  012C9C  0EEB               	movlw	low _dpowers
  4871  012C9E  24F3               	addwf	prodl,w,c
  4872  012CA0  6EF6               	movwf	tblptrl,c
  4873  012CA2  0EFB               	movlw	high _dpowers
  4874  012CA4  20F4               	addwfc	prodh,w,c
  4875  012CA6  6EF7               	movwf	tblptrh,c
  4876  012CA8                     	if	1	;There are 3 active tblptr bytes
  4877  012CA8  6AF8               	clrf	tblptru,c
  4878  012CAA  0E00               	movlw	low (__mediumconst shr (0+16))
  4879  012CAC  22F8               	addwfc	tblptru,f,c
  4880  012CAE                     	endif
  4881  012CAE  0009               	tblrd		*+
  4882  012CB0  50F5               	movf	tablat,w,c
  4883  012CB2  5D80               	subwf	printf@val& (0+255),w,b
  4884  012CB4  0009               	tblrd		*+
  4885  012CB6  50F5               	movf	tablat,w,c
  4886  012CB8  5981               	subwfb	(printf@val+1)& (0+255),w,b
  4887  012CBA  A0D8               	btfss	status,0,c
  4888  012CBC  D002               	goto	u12920
  4889                           
  4890                           ; BSR set to: 0
  4891                           
  4892                           ; BSR set to: 0
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;doprnt.c: 1307: break;
  4896  012CBE  2B82               	incf	printf@c& (0+255),f,b
  4897  012CC0  D7E7               	goto	l15453
  4898  012CC2                     u12920:
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;doprnt.c: 1422: {
  4902                           ;doprnt.c: 1438: if(flag & 0x03)
  4903                           
  4904                           ; BSR set to: 0
  4905  012CC2  C07C  F07B         	movff	printf@flag,??_printf
  4906  012CC6  0E03               	movlw	3
  4907  012CC8  177B               	andwf	??_printf& (0+255),f,b
  4908  012CCA  B4D8               	btfsc	status,2,c
  4909  012CCC  D003               	goto	l2499
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;doprnt.c: 1439: (putch('-') );
  4913  012CCE  0E2D               	movlw	45
  4914  012CD0  EC7F  F0AD         	call	_putch
  4915  012CD4                     l2499:
  4916                           
  4917                           ;doprnt.c: 1469: }
  4918                           ;doprnt.c: 1472: prec = c;
  4919  012CD4  C082  F07D         	movff	printf@c,printf@prec
  4920                           
  4921                           ;doprnt.c: 1474: while(prec--) {
  4922  012CD8  D02A               	goto	l2500
  4923  012CDA                     
  4924                           ;doprnt.c: 1478: {
  4925                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4926  012CDA  0100               	movlb	0	; () banked
  4927  012CDC  517D               	movf	printf@prec& (0+255),w,b
  4928  012CDE  0D02               	mullw	2
  4929  012CE0  0EEB               	movlw	low _dpowers
  4930  012CE2  24F3               	addwf	prodl,w,c
  4931  012CE4  6EF6               	movwf	tblptrl,c
  4932  012CE6  0EFB               	movlw	high _dpowers
  4933  012CE8  20F4               	addwfc	prodh,w,c
  4934  012CEA  6EF7               	movwf	tblptrh,c
  4935  012CEC                     	if	1	;There are 3 active tblptr bytes
  4936  012CEC  6AF8               	clrf	tblptru,c
  4937  012CEE  0E00               	movlw	low (__mediumconst shr (0+16))
  4938  012CF0  22F8               	addwfc	tblptru,f,c
  4939  012CF2                     	endif
  4940  012CF2  0009               	tblrd		*+
  4941  012CF4  CFF5 F062          	movff	tablat,___lwdiv@divisor
  4942  012CF8  000A               	tblrd		*-
  4943  012CFA  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  4944  012CFE  C080  F060         	movff	printf@val,___lwdiv@dividend
  4945  012D02  C081  F061         	movff	printf@val+1,___lwdiv@dividend+1
  4946  012D06  ECCB  F0A7         	call	___lwdiv	;wreg free
  4947  012D0A  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  4948  012D0E  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  4949  012D12  0E00               	movlw	0
  4950  012D14  0100               	movlb	0	; () banked
  4951  012D16  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4952  012D18  0E0A               	movlw	10
  4953  012D1A  6F69               	movwf	___lwmod@divisor& (0+255),b
  4954  012D1C  EC96  F0A9         	call	___lwmod	;wreg free
  4955  012D20  0100               	movlb	0	; () banked
  4956  012D22  5167               	movf	?___lwmod& (0+255),w,b
  4957  012D24  0F30               	addlw	48
  4958  012D26  6F82               	movwf	printf@c& (0+255),b
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;doprnt.c: 1523: }
  4962                           ;doprnt.c: 1524: (putch(c) );
  4963  012D28  5182               	movf	printf@c& (0+255),w,b
  4964  012D2A  EC7F  F0AD         	call	_putch
  4965  012D2E                     l2500:
  4966  012D2E  0100               	movlb	0	; () banked
  4967  012D30  077D               	decf	printf@prec& (0+255),f,b
  4968  012D32  297D               	incf	printf@prec& (0+255),w,b
  4969  012D34  A4D8               	btfss	status,2,c
  4970  012D36  D7D1               	goto	l2501
  4971  012D38                     u12940:
  4972                           
  4973                           ; BSR set to: 0
  4974                           
  4975                           ; BSR set to: 0
  4976  012D38  C075  FFF6         	movff	printf@f,tblptrl
  4977  012D3C  C076  FFF7         	movff	printf@f+1,tblptrh
  4978  012D40  0100               	movlb	0	; () banked
  4979  012D42  4B75               	infsnz	printf@f& (0+255),f,b
  4980  012D44  2B76               	incf	(printf@f+1)& (0+255),f,b
  4981  012D46                     	if	0	;tblptru may be non-zero
  4982  012D46                     	endif
  4983  012D46                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4984  012D46  0E00               	movlw	low (__mediumconst shr (0+16))
  4985  012D48  6EF8               	movwf	tblptru,c
  4986  012D4A                     	endif
  4987  012D4A  0008               	tblrd		*
  4988  012D4C  CFF5 F082          	movff	tablat,printf@c
  4989  012D50  5182               	movf	printf@c& (0+255),w,b
  4990  012D52  B4D8               	btfsc	status,2,c
  4991  012D54  0012               	return	
  4992  012D56  D752               	goto	l2485
  4993  012D58                     __end_of_printf:
  4994                           	opt stack 0
  4995                           tosu	equ	0xFFF
  4996                           tosh	equ	0xFFE
  4997                           tosl	equ	0xFFD
  4998                           pclath	equ	0xFFA
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           postinc0	equ	0xFEE
  5006                           wreg	equ	0xFE8
  5007                           postdec1	equ	0xFE5
  5008                           fsr1h	equ	0xFE2
  5009                           fsr1l	equ	0xFE1
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function _putch *****************
  5018 ;; Defined at:
  5019 ;;		line 454 in file "Library/Console.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  c               1    wreg     unsigned char 
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;  c               1   20[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;Total ram usage:        1 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:   11
  5040 ;; This function calls:
  5041 ;;		_Console_PrintChar
  5042 ;; This function is called by:
  5043 ;;		_printf
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text3
  5048  015AFE                     __ptext3:
  5049                           	opt stack 0
  5050  015AFE                     _putch:
  5051                           	opt stack 18
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;incstack = 0
  5055                           ;putch@c stored from wreg
  5056  015AFE  0100               	movlb	0	; () banked
  5057  015B00  6F74               	movwf	putch@c& (0+255),b
  5058                           
  5059                           ;Console.c: 456: Console_PrintChar(c);
  5060  015B02  0100               	movlb	0	; () banked
  5061  015B04  5174               	movf	putch@c& (0+255),w,b
  5062  015B06  EC56  F097         	call	_Console_PrintChar
  5063  015B0A  0012               	return		;funcret
  5064  015B0C                     __end_of_putch:
  5065                           	opt stack 0
  5066                           tosu	equ	0xFFF
  5067                           tosh	equ	0xFFE
  5068                           tosl	equ	0xFFD
  5069                           pclath	equ	0xFFA
  5070                           tblptru	equ	0xFF8
  5071                           tblptrh	equ	0xFF7
  5072                           tblptrl	equ	0xFF6
  5073                           tablat	equ	0xFF5
  5074                           prodh	equ	0xFF4
  5075                           prodl	equ	0xFF3
  5076                           postinc0	equ	0xFEE
  5077                           wreg	equ	0xFE8
  5078                           postdec1	equ	0xFE5
  5079                           fsr1h	equ	0xFE2
  5080                           fsr1l	equ	0xFE1
  5081                           indf2	equ	0xFDF
  5082                           postinc2	equ	0xFDE
  5083                           postdec2	equ	0xFDD
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _Console_PrintChar *****************
  5089 ;; Defined at:
  5090 ;;		line 322 in file "Library/Console.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  pInput          1    wreg     unsigned char 
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;  pInput          1   19[BANK0 ] unsigned char 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;Total ram usage:        4 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:   10
  5111 ;; This function calls:
  5112 ;;		_Console_Backspace
  5113 ;;		_Console_FormFeed
  5114 ;;		_Console_IncrementCursor
  5115 ;;		_Console_NewLine
  5116 ;;		_Console_ResetCursor
  5117 ;;		_Console_Tab
  5118 ;; This function is called by:
  5119 ;;		_putch
  5120 ;;		_Console_PrintString
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           	psect	text4
  5125  012EAC                     __ptext4:
  5126                           	opt stack 0
  5127  012EAC                     _Console_PrintChar:
  5128                           	opt stack 18
  5129                           
  5130                           ;incstack = 0
  5131                           ;Console_PrintChar@pInput stored from wreg
  5132  012EAC  0100               	movlb	0	; () banked
  5133  012EAE  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  5134                           
  5135                           ;Console.c: 324: switch(pInput)
  5136  012EB0  D08A               	goto	l1036
  5137  012EB2                     
  5138                           ;Console.c: 327: case '\n':
  5139                           ;Console.c: 328: Console_NewLine();
  5140  012EB2  EC56  F0A3         	call	_Console_NewLine	;wreg free
  5141                           
  5142                           ;Console.c: 329: return;
  5143  012EB6  0012               	return	
  5144  012EB8                     
  5145                           ;Console.c: 331: Console_Backspace();
  5146  012EB8  EC1E  F0A8         	call	_Console_Backspace	;wreg free
  5147                           
  5148                           ;Console.c: 332: return;
  5149  012EBC  0012               	return	
  5150  012EBE                     
  5151                           ;Console.c: 334: Console_FormFeed();
  5152  012EBE  ECF6  F0A4         	call	_Console_FormFeed	;wreg free
  5153                           
  5154                           ;Console.c: 335: return;
  5155  012EC2  0012               	return	
  5156  012EC4                     
  5157                           ;Console.c: 337: Console_Tab();
  5158  012EC4  ECEC  F0A0         	call	_Console_Tab	;wreg free
  5159                           
  5160                           ;Console.c: 338: return;
  5161  012EC8  0012               	return	
  5162  012ECA                     
  5163                           ;Console.c: 340: Console_IncrementCursor();
  5164  012ECA  EC23  F0A7         	call	_Console_IncrementCursor	;wreg free
  5165                           
  5166                           ;Console.c: 341: return;
  5167  012ECE  0012               	return	
  5168  012ED0                     
  5169                           ;Console.c: 343: Console_ResetCursor();
  5170  012ED0  ECA8  F0AC         	call	_Console_ResetCursor	;wreg free
  5171                           
  5172                           ;Console.c: 344: return;
  5173  012ED4  0012               	return	
  5174  012ED6                     
  5175                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  5176                           
  5177                           ;Console.c: 349: default:
  5178  012ED6  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  5179  012EDA  0E7F               	movlw	127
  5180  012EDC  0100               	movlb	0	; () banked
  5181  012EDE  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  5182  012EE0  51FF               	movf	_lBufferY& (0+255),w,b
  5183  012EE2  0D14               	mullw	20
  5184  012EE4  0E46               	movlw	low _lBuffer
  5185  012EE6  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5186  012EE8  0E03               	movlw	high _lBuffer
  5187  012EEA  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  5188  012EEC  50F3               	movf	prodl,w,c
  5189  012EEE  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  5190  012EF0  50F4               	movf	prodh,w,c
  5191  012EF2  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  5192  012EF4  5045               	movf	_lBufferX,w,c
  5193  012EF6  0D01               	mullw	1
  5194  012EF8  50F3               	movf	prodl,w,c
  5195  012EFA  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  5196  012EFC  6ED9               	movwf	fsr2l,c
  5197  012EFE  50F4               	movf	prodh,w,c
  5198  012F00  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  5199  012F02  6EDA               	movwf	fsr2h,c
  5200  012F04  50DF               	movf	indf2,w,c
  5201  012F06  0B7F               	andlw	127
  5202  012F08  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  5203  012F0A  B4D8               	btfsc	status,2,c
  5204  012F0C  D023               	goto	l1047
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;Console.c: 351: {
  5208                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  5209  012F0E  0E01               	movlw	1
  5210  012F10  6E4E               	movwf	_change,c
  5211                           
  5212                           ; BSR set to: 0
  5213  012F12  51FF               	movf	_lBufferY& (0+255),w,b
  5214  012F14  0D14               	mullw	20
  5215  012F16  0E46               	movlw	low _lBuffer
  5216  012F18  6F70               	movwf	??_Console_PrintChar& (0+255),b
  5217  012F1A  0E03               	movlw	high _lBuffer
  5218  012F1C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5219  012F1E  50F3               	movf	prodl,w,c
  5220  012F20  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  5221  012F22  50F4               	movf	prodh,w,c
  5222  012F24  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  5223  012F26  5045               	movf	_lBufferX,w,c
  5224  012F28  0D01               	mullw	1
  5225  012F2A  50F3               	movf	prodl,w,c
  5226  012F2C  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  5227  012F2E  6ED9               	movwf	fsr2l,c
  5228  012F30  50F4               	movf	prodh,w,c
  5229  012F32  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  5230  012F34  6EDA               	movwf	fsr2h,c
  5231  012F36  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  5232  012F38  0980               	iorlw	128
  5233  012F3A  6EDF               	movwf	indf2,c
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  5237  012F3C  51FF               	movf	_lBufferY& (0+255),w,b
  5238  012F3E  0D02               	mullw	2
  5239  012F40  0E50               	movlw	low _lCBuffer
  5240  012F42  24F3               	addwf	prodl,w,c
  5241  012F44  6ED9               	movwf	fsr2l,c
  5242  012F46  0E02               	movlw	high _lCBuffer
  5243  012F48  20F4               	addwfc	prodh,w,c
  5244  012F4A  6EDA               	movwf	fsr2h,c
  5245  012F4C  C1F5  FFDE         	movff	_gForecolour,postinc2
  5246  012F50  C1F6  FFDD         	movff	_gForecolour+1,postdec2
  5247  012F54                     l1047:
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;Console.c: 354: }
  5251                           ;Console.c: 368: if(Console_IncrementCursor())
  5252                           
  5253                           ; BSR set to: 0
  5254  012F54  EC23  F0A7         	call	_Console_IncrementCursor	;wreg free
  5255  012F58  0900               	iorlw	0
  5256  012F5A  B4D8               	btfsc	status,2,c
  5257  012F5C  0012               	return	
  5258                           
  5259                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  5260  012F5E  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  5261  012F62  0E7F               	movlw	127
  5262  012F64  0100               	movlb	0	; () banked
  5263  012F66  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  5264  012F68  51FF               	movf	_lBufferY& (0+255),w,b
  5265  012F6A  0D14               	mullw	20
  5266  012F6C  0E46               	movlw	low _lBuffer
  5267  012F6E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5268  012F70  0E03               	movlw	high _lBuffer
  5269  012F72  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  5270  012F74  50F3               	movf	prodl,w,c
  5271  012F76  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  5272  012F78  50F4               	movf	prodh,w,c
  5273  012F7A  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  5274  012F7C  5045               	movf	_lBufferX,w,c
  5275  012F7E  0D01               	mullw	1
  5276  012F80  50F3               	movf	prodl,w,c
  5277  012F82  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  5278  012F84  6ED9               	movwf	fsr2l,c
  5279  012F86  50F4               	movf	prodh,w,c
  5280  012F88  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  5281  012F8A  6EDA               	movwf	fsr2h,c
  5282  012F8C  50DF               	movf	indf2,w,c
  5283  012F8E  0B7F               	andlw	127
  5284  012F90  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  5285  012F92  B4D8               	btfsc	status,2,c
  5286  012F94  0012               	return	
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  5290  012F96  0E01               	movlw	1
  5291  012F98  6E4E               	movwf	_change,c
  5292                           
  5293                           ; BSR set to: 0
  5294  012F9A  51FF               	movf	_lBufferY& (0+255),w,b
  5295  012F9C  0D14               	mullw	20
  5296  012F9E  0E46               	movlw	low _lBuffer
  5297  012FA0  6F70               	movwf	??_Console_PrintChar& (0+255),b
  5298  012FA2  0E03               	movlw	high _lBuffer
  5299  012FA4  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5300  012FA6  50F3               	movf	prodl,w,c
  5301  012FA8  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  5302  012FAA  50F4               	movf	prodh,w,c
  5303  012FAC  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  5304  012FAE  5045               	movf	_lBufferX,w,c
  5305  012FB0  0D01               	mullw	1
  5306  012FB2  50F3               	movf	prodl,w,c
  5307  012FB4  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  5308  012FB6  6ED9               	movwf	fsr2l,c
  5309  012FB8  50F4               	movf	prodh,w,c
  5310  012FBA  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  5311  012FBC  6EDA               	movwf	fsr2h,c
  5312  012FBE  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  5313  012FC0  0980               	iorlw	128
  5314  012FC2  6EDF               	movwf	indf2,c
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;Console.c: 372: };
  5318                           
  5319                           ; BSR set to: 0
  5320                           ;Console.c: 371: return;
  5321                           
  5322                           ; BSR set to: 0
  5323                           
  5324                           ; BSR set to: 0
  5325  012FC4  0012               	return	
  5326  012FC6                     l1036:
  5327                           
  5328                           ; BSR set to: 0
  5329  012FC6  0100               	movlb	0	; () banked
  5330  012FC8  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  5331                           
  5332                           ; Switch size 1, requested type "space"
  5333                           ; Number of cases is 8, Range of values is 7 to 35
  5334                           ; switch strategies available:
  5335                           ; Name         Instructions Cycles
  5336                           ; simple_byte           25    13 (average)
  5337                           ;	Chosen strategy is simple_byte
  5338  012FCA  0A07               	xorlw	7	; case 7
  5339  012FCC  B4D8               	btfsc	status,2,c
  5340  012FCE  D77D               	goto	l1043
  5341  012FD0  0A0F               	xorlw	15	; case 8
  5342  012FD2  B4D8               	btfsc	status,2,c
  5343  012FD4  D771               	goto	l1040
  5344  012FD6  0A01               	xorlw	1	; case 9
  5345  012FD8  B4D8               	btfsc	status,2,c
  5346  012FDA  D774               	goto	l1042
  5347  012FDC  0A03               	xorlw	3	; case 10
  5348  012FDE  B4D8               	btfsc	status,2,c
  5349  012FE0  D768               	goto	l1037
  5350  012FE2  0A06               	xorlw	6	; case 12
  5351  012FE4  B4D8               	btfsc	status,2,c
  5352  012FE6  D76B               	goto	l1041
  5353  012FE8  0A01               	xorlw	1	; case 13
  5354  012FEA  B4D8               	btfsc	status,2,c
  5355  012FEC  D762               	goto	l1037
  5356  012FEE  0A2D               	xorlw	45	; case 32
  5357  012FF0  B4D8               	btfsc	status,2,c
  5358  012FF2  D771               	goto	l1045
  5359  012FF4  0A03               	xorlw	3	; case 35
  5360  012FF6  B4D8               	btfsc	status,2,c
  5361  012FF8  D76B               	goto	l1044
  5362  012FFA  D76D               	goto	l1045
  5363  012FFC                     __end_of_Console_PrintChar:
  5364                           	opt stack 0
  5365                           tosu	equ	0xFFF
  5366                           tosh	equ	0xFFE
  5367                           tosl	equ	0xFFD
  5368                           pclath	equ	0xFFA
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           postinc0	equ	0xFEE
  5376                           wreg	equ	0xFE8
  5377                           postdec1	equ	0xFE5
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _Console_Tab *****************
  5388 ;; Defined at:
  5389 ;;		line 260 in file "Library/Console.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;		None
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  c               1   15[BANK0 ] unsigned char 
  5394 ;;  i               1   14[BANK0 ] unsigned char 
  5395 ;;  t               1   13[BANK0 ] unsigned char 
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      void 
  5398 ;; Registers used:
  5399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;Total ram usage:        8 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; Hardware stack levels required when called:    9
  5412 ;; This function calls:
  5413 ;;		_Console_ClearCursor
  5414 ;;		_Console_IncrementCursor
  5415 ;;		___awdiv
  5416 ;; This function is called by:
  5417 ;;		_Console_PrintChar
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text5
  5422  0141D8                     __ptext5:
  5423                           	opt stack 0
  5424  0141D8                     _Console_Tab:
  5425                           	opt stack 18
  5426                           
  5427                           ;Console.c: 262: UINT8 i = 0;
  5428                           
  5429                           ;incstack = 0
  5430  0141D8  0E00               	movlw	0
  5431  0141DA  0100               	movlb	0	; () banked
  5432  0141DC  6F6E               	movwf	Console_Tab@i& (0+255),b
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  5436  0141DE  0EFA               	movlw	250
  5437  0141E0  2447               	addwf	_gCursor,w,c
  5438  0141E2  6F60               	movwf	___awdiv@dividend& (0+255),b
  5439  0141E4  0EFF               	movlw	255
  5440  0141E6  2048               	addwfc	_gCursor+1,w,c
  5441  0141E8  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  5442  0141EA  0E00               	movlw	0
  5443  0141EC  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5444  0141EE  0E06               	movlw	6
  5445  0141F0  6F62               	movwf	___awdiv@divisor& (0+255),b
  5446  0141F2  EC92  F0A2         	call	___awdiv	;wreg free
  5447  0141F6  0100               	movlb	0	; () banked
  5448  0141F8  5160               	movf	?___awdiv& (0+255),w,b
  5449  0141FA  6F6F               	movwf	Console_Tab@c& (0+255),b
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;Console.c: 264: UINT8 t = c/4;
  5453  0141FC  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  5454  014200  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  5455  014202  0E00               	movlw	0
  5456  014204  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5457  014206  0E04               	movlw	4
  5458  014208  6F62               	movwf	___awdiv@divisor& (0+255),b
  5459  01420A  EC92  F0A2         	call	___awdiv	;wreg free
  5460  01420E  0100               	movlb	0	; () banked
  5461  014210  5160               	movf	?___awdiv& (0+255),w,b
  5462  014212  6F6D               	movwf	Console_Tab@t& (0+255),b
  5463                           
  5464                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  5465  014214  0E00               	movlw	0
  5466  014216  6F6E               	movwf	Console_Tab@i& (0+255),b
  5467  014218  D006               	goto	l1009
  5468  01421A                     
  5469                           ; BSR set to: 0
  5470                           ;Console.c: 266: {
  5471                           ;Console.c: 267: Console_ClearCursor();
  5472                           
  5473                           ; BSR set to: 0
  5474  01421A  EC31  F0AB         	call	_Console_ClearCursor	;wreg free
  5475                           
  5476                           ;Console.c: 268: Console_IncrementCursor();
  5477  01421E  EC23  F0A7         	call	_Console_IncrementCursor	;wreg free
  5478  014222  0100               	movlb	0	; () banked
  5479  014224  2B6E               	incf	Console_Tab@i& (0+255),f,b
  5480  014226                     l1009:
  5481                           
  5482                           ; BSR set to: 0
  5483                           
  5484                           ; BSR set to: 0
  5485  014226  516D               	movf	Console_Tab@t& (0+255),w,b
  5486  014228  0D04               	mullw	4
  5487  01422A  1EF3               	comf	prodl,f,c
  5488  01422C  1EF4               	comf	prodh,f,c
  5489  01422E  4AF3               	infsnz	prodl,f,c
  5490  014230  2AF4               	incf	prodh,f,c
  5491  014232  516F               	movf	Console_Tab@c& (0+255),w,b
  5492  014234  6F68               	movwf	??_Console_Tab& (0+255),b
  5493  014236  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  5494  014238  50F3               	movf	prodl,w,c
  5495  01423A  2768               	addwf	??_Console_Tab& (0+255),f,b
  5496  01423C  50F4               	movf	prodh,w,c
  5497  01423E  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5498  014240  1F68               	comf	??_Console_Tab& (0+255),f,b
  5499  014242  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  5500  014244  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  5501  014246  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  5502  014248  0E04               	movlw	4
  5503  01424A  2768               	addwf	??_Console_Tab& (0+255),f,b
  5504  01424C  0E00               	movlw	0
  5505  01424E  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5506  014250  516E               	movf	Console_Tab@i& (0+255),w,b
  5507  014252  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  5508  014254  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  5509  014256  5168               	movf	??_Console_Tab& (0+255),w,b
  5510  014258  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  5511  01425A  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  5512  01425C  0A80               	xorlw	128
  5513  01425E  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  5514  014260  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  5515  014262  0A80               	xorlw	128
  5516  014264  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  5517  014266  B0D8               	btfsc	status,0,c
  5518  014268  0012               	return	
  5519  01426A  D7D7               	goto	l1010
  5520  01426C                     __end_of_Console_Tab:
  5521                           	opt stack 0
  5522                           tosu	equ	0xFFF
  5523                           tosh	equ	0xFFE
  5524                           tosl	equ	0xFFD
  5525                           pclath	equ	0xFFA
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodh	equ	0xFF4
  5531                           prodl	equ	0xFF3
  5532                           postinc0	equ	0xFEE
  5533                           wreg	equ	0xFE8
  5534                           postdec1	equ	0xFE5
  5535                           fsr1h	equ	0xFE2
  5536                           fsr1l	equ	0xFE1
  5537                           indf2	equ	0xFDF
  5538                           postinc2	equ	0xFDE
  5539                           postdec2	equ	0xFDD
  5540                           fsr2h	equ	0xFDA
  5541                           fsr2l	equ	0xFD9
  5542                           status	equ	0xFD8
  5543                           
  5544 ;; *************** function _Console_IncrementCursor *****************
  5545 ;; Defined at:
  5546 ;;		line 243 in file "Library/Console.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;		None
  5549 ;; Auto vars:     Size  Location     Type
  5550 ;;		None
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  1    wreg      unsigned char 
  5553 ;; Registers used:
  5554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5563 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;Total ram usage:        2 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    8
  5567 ;; This function calls:
  5568 ;;		_Console_FormFeed
  5569 ;;		_Console_NewLine
  5570 ;; This function is called by:
  5571 ;;		_Console_Tab
  5572 ;;		_Console_PrintChar
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text6
  5577  014E46                     __ptext6:
  5578                           	opt stack 0
  5579  014E46                     _Console_IncrementCursor:
  5580                           	opt stack 18
  5581                           
  5582                           ;Console.c: 246: lBufferX += 1;
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;incstack = 0
  5586  014E46  2A45               	incf	_lBufferX,f,c
  5587                           
  5588                           ;Console.c: 248: gCursor.x += 6;
  5589  014E48  0E06               	movlw	6
  5590  014E4A  2647               	addwf	_gCursor,f,c
  5591  014E4C  0E00               	movlw	0
  5592  014E4E  2248               	addwfc	_gCursor+1,f,c
  5593                           
  5594                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5595  014E50  0E06               	movlw	6
  5596  014E52  2447               	addwf	_gCursor,w,c
  5597  014E54  0100               	movlb	0	; () banked
  5598  014E56  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  5599  014E58  0E00               	movlw	0
  5600  014E5A  2048               	addwfc	_gCursor+1,w,c
  5601  014E5C  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5602  014E5E  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5603  014E60  D007               	goto	l1004
  5604  014E62  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5605  014E64  E103               	bnz	u10370
  5606  014E66  0E80               	movlw	128
  5607  014E68  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5608  014E6A  B0D8               	btfsc	status,0,c
  5609  014E6C                     u10370:
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;Console.c: 250: Console_NewLine();
  5613  014E6C  EC56  F0A3         	call	_Console_NewLine	;wreg free
  5614  014E70                     l1004:
  5615                           
  5616                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5617  014E70  0E08               	movlw	8
  5618  014E72  2449               	addwf	_gCursor+2,w,c
  5619  014E74  0100               	movlb	0	; () banked
  5620  014E76  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  5621  014E78  0E00               	movlw	0
  5622  014E7A  204A               	addwfc	_gCursor+3,w,c
  5623  014E7C  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5624  014E7E  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5625  014E80  D00A               	goto	l1005
  5626  014E82  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5627  014E84  E104               	bnz	u10380
  5628  014E86  0E80               	movlw	128
  5629  014E88  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5630  014E8A  A0D8               	btfss	status,0,c
  5631  014E8C  D004               	goto	l1005
  5632  014E8E                     u10380:
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;Console.c: 252: {
  5636                           ;Console.c: 253: Console_FormFeed();
  5637  014E8E  ECF6  F0A4         	call	_Console_FormFeed	;wreg free
  5638                           
  5639                           ;Console.c: 254: return 1;
  5640  014E92  0E01               	movlw	1
  5641  014E94  0012               	return	
  5642  014E96                     l1005:
  5643                           
  5644                           ;Console.c: 255: }
  5645                           ;Console.c: 257: return 0;
  5646  014E96  0E00               	movlw	0
  5647  014E98  0012               	return	
  5648  014E9A                     __end_of_Console_IncrementCursor:
  5649                           	opt stack 0
  5650                           tosu	equ	0xFFF
  5651                           tosh	equ	0xFFE
  5652                           tosl	equ	0xFFD
  5653                           pclath	equ	0xFFA
  5654                           tblptru	equ	0xFF8
  5655                           tblptrh	equ	0xFF7
  5656                           tblptrl	equ	0xFF6
  5657                           tablat	equ	0xFF5
  5658                           prodh	equ	0xFF4
  5659                           prodl	equ	0xFF3
  5660                           postinc0	equ	0xFEE
  5661                           wreg	equ	0xFE8
  5662                           postdec1	equ	0xFE5
  5663                           fsr1h	equ	0xFE2
  5664                           fsr1l	equ	0xFE1
  5665                           indf2	equ	0xFDF
  5666                           postinc2	equ	0xFDE
  5667                           postdec2	equ	0xFDD
  5668                           fsr2h	equ	0xFDA
  5669                           fsr2l	equ	0xFD9
  5670                           status	equ	0xFD8
  5671                           
  5672 ;; *************** function _Console_NewLine *****************
  5673 ;; Defined at:
  5674 ;;		line 175 in file "Library/Console.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;		None
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      void 
  5681 ;; Registers used:
  5682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;Total ram usage:        2 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    7
  5695 ;; This function calls:
  5696 ;;		Nothing
  5697 ;; This function is called by:
  5698 ;;		_Console_IncrementCursor
  5699 ;;		_Console_PrintChar
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text7
  5704  0146AC                     __ptext7:
  5705                           	opt stack 0
  5706  0146AC                     _Console_NewLine:
  5707                           	opt stack 18
  5708                           
  5709                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5710                           
  5711                           ;incstack = 0
  5712  0146AC  D02D               	goto	l983
  5713  0146AE                     
  5714                           ;Console.c: 179: {
  5715                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5716  0146AE  0100               	movlb	0	; () banked
  5717  0146B0  51FF               	movf	_lBufferY& (0+255),w,b
  5718  0146B2  0D14               	mullw	20
  5719  0146B4  0E46               	movlw	low _lBuffer
  5720  0146B6  6F60               	movwf	??_Console_NewLine& (0+255),b
  5721  0146B8  0E03               	movlw	high _lBuffer
  5722  0146BA  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  5723  0146BC  50F3               	movf	prodl,w,c
  5724  0146BE  2760               	addwf	??_Console_NewLine& (0+255),f,b
  5725  0146C0  50F4               	movf	prodh,w,c
  5726  0146C2  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5727  0146C4  5045               	movf	_lBufferX,w,c
  5728  0146C6  0D01               	mullw	1
  5729  0146C8  50F3               	movf	prodl,w,c
  5730  0146CA  2560               	addwf	??_Console_NewLine& (0+255),w,b
  5731  0146CC  6ED9               	movwf	fsr2l,c
  5732  0146CE  50F4               	movf	prodh,w,c
  5733  0146D0  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5734  0146D2  6EDA               	movwf	fsr2h,c
  5735  0146D4  50DF               	movf	indf2,w,c
  5736  0146D6  B4D8               	btfsc	status,2,c
  5737  0146D8  D016               	goto	l985
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5741  0146DA  0E01               	movlw	1
  5742  0146DC  6E4E               	movwf	_change,c
  5743                           
  5744                           ; BSR set to: 0
  5745  0146DE  51FF               	movf	_lBufferY& (0+255),w,b
  5746  0146E0  0D14               	mullw	20
  5747  0146E2  0E46               	movlw	low _lBuffer
  5748  0146E4  6F60               	movwf	??_Console_NewLine& (0+255),b
  5749  0146E6  0E03               	movlw	high _lBuffer
  5750  0146E8  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  5751  0146EA  50F3               	movf	prodl,w,c
  5752  0146EC  2760               	addwf	??_Console_NewLine& (0+255),f,b
  5753  0146EE  50F4               	movf	prodh,w,c
  5754  0146F0  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5755  0146F2  5045               	movf	_lBufferX,w,c
  5756  0146F4  0D01               	mullw	1
  5757  0146F6  50F3               	movf	prodl,w,c
  5758  0146F8  2560               	addwf	??_Console_NewLine& (0+255),w,b
  5759  0146FA  6ED9               	movwf	fsr2l,c
  5760  0146FC  50F4               	movf	prodh,w,c
  5761  0146FE  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5762  014700  6EDA               	movwf	fsr2h,c
  5763  014702  0E80               	movlw	128
  5764  014704  6EDF               	movwf	indf2,c
  5765  014706                     l985:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;Console.c: 182: lBufferX ++;
  5769                           
  5770                           ; BSR set to: 0
  5771  014706  2A45               	incf	_lBufferX,f,c
  5772  014708                     l983:
  5773                           
  5774                           ; BSR set to: 0
  5775  014708  0E13               	movlw	19
  5776  01470A  6445               	cpfsgt	_lBufferX,c
  5777  01470C  D7D0               	goto	l984
  5778                           
  5779                           ;Console.c: 183: }
  5780                           ;Console.c: 185: lBufferX = 0;
  5781  01470E  0E00               	movlw	0
  5782  014710  6E45               	movwf	_lBufferX,c
  5783                           
  5784                           ;Console.c: 186: lBufferY ++;
  5785  014712  0100               	movlb	0	; () banked
  5786  014714  2BFF               	incf	_lBufferY& (0+255),f,b
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;Console.c: 188: gCursor.y += 8;
  5790  014716  0E08               	movlw	8
  5791  014718  2649               	addwf	_gCursor+2,f,c
  5792  01471A  0E00               	movlw	0
  5793  01471C  224A               	addwfc	_gCursor+3,f,c
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;Console.c: 189: gCursor.x = 6;
  5797  01471E  0E00               	movlw	0
  5798  014720  6E48               	movwf	_gCursor+1,c
  5799  014722  0E06               	movlw	6
  5800  014724  6E47               	movwf	_gCursor,c
  5801                           
  5802                           ; BSR set to: 0
  5803  014726  0012               	return		;funcret
  5804  014728                     __end_of_Console_NewLine:
  5805                           	opt stack 0
  5806                           tosu	equ	0xFFF
  5807                           tosh	equ	0xFFE
  5808                           tosl	equ	0xFFD
  5809                           pclath	equ	0xFFA
  5810                           tblptru	equ	0xFF8
  5811                           tblptrh	equ	0xFF7
  5812                           tblptrl	equ	0xFF6
  5813                           tablat	equ	0xFF5
  5814                           prodh	equ	0xFF4
  5815                           prodl	equ	0xFF3
  5816                           postinc0	equ	0xFEE
  5817                           wreg	equ	0xFE8
  5818                           postdec1	equ	0xFE5
  5819                           fsr1h	equ	0xFE2
  5820                           fsr1l	equ	0xFE1
  5821                           indf2	equ	0xFDF
  5822                           postinc2	equ	0xFDE
  5823                           postdec2	equ	0xFDD
  5824                           fsr2h	equ	0xFDA
  5825                           fsr2l	equ	0xFD9
  5826                           status	equ	0xFD8
  5827                           
  5828 ;; *************** function _Console_FormFeed *****************
  5829 ;; Defined at:
  5830 ;;		line 192 in file "Library/Console.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;		None
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;  y               1    3[BANK0 ] unsigned char 
  5835 ;;  x               1    2[BANK0 ] unsigned char 
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  1    wreg      void 
  5838 ;; Registers used:
  5839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5847 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;Total ram usage:        4 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    7
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_Console_IncrementCursor
  5856 ;;		_Console_PrintChar
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           	psect	text8
  5861  0149EC                     __ptext8:
  5862                           	opt stack 0
  5863  0149EC                     _Console_FormFeed:
  5864                           	opt stack 18
  5865                           
  5866                           ;Console.c: 195: lBufferX = 0;
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;incstack = 0
  5870  0149EC  0E00               	movlw	0
  5871  0149EE  6E45               	movwf	_lBufferX,c
  5872                           
  5873                           ;Console.c: 196: lBufferY = 0;
  5874  0149F0  0E00               	movlw	0
  5875  0149F2  0100               	movlb	0	; () banked
  5876  0149F4  6FFF               	movwf	_lBufferY& (0+255),b
  5877                           
  5878                           ;Console.c: 197: UINT8 x, y;
  5879                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5880  0149F6  0E00               	movlw	0
  5881  0149F8  6F63               	movwf	Console_FormFeed@y& (0+255),b
  5882  0149FA                     l12985:
  5883                           
  5884                           ; BSR set to: 0
  5885  0149FA  0E0E               	movlw	14
  5886  0149FC  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  5887  0149FE  D001               	goto	l990
  5888  014A00  D020               	goto	u10300
  5889  014A02                     l990:
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5893                           
  5894                           ; BSR set to: 0
  5895  014A02  0E00               	movlw	0
  5896  014A04  6F62               	movwf	Console_FormFeed@x& (0+255),b
  5897  014A06                     l12991:
  5898                           
  5899                           ; BSR set to: 0
  5900  014A06  0E13               	movlw	19
  5901  014A08  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  5902  014A0A  D001               	goto	l992
  5903  014A0C  D018               	goto	u10290
  5904  014A0E                     l992:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5908                           
  5909                           ; BSR set to: 0
  5910  014A0E  0E01               	movlw	1
  5911  014A10  6E4E               	movwf	_change,c
  5912                           
  5913                           ; BSR set to: 0
  5914  014A12  5163               	movf	Console_FormFeed@y& (0+255),w,b
  5915  014A14  0D14               	mullw	20
  5916  014A16  0E46               	movlw	low _lBuffer
  5917  014A18  6F60               	movwf	??_Console_FormFeed& (0+255),b
  5918  014A1A  0E03               	movlw	high _lBuffer
  5919  014A1C  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5920  014A1E  50F3               	movf	prodl,w,c
  5921  014A20  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  5922  014A22  50F4               	movf	prodh,w,c
  5923  014A24  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5924  014A26  5162               	movf	Console_FormFeed@x& (0+255),w,b
  5925  014A28  0D01               	mullw	1
  5926  014A2A  50F3               	movf	prodl,w,c
  5927  014A2C  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  5928  014A2E  6ED9               	movwf	fsr2l,c
  5929  014A30  50F4               	movf	prodh,w,c
  5930  014A32  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5931  014A34  6EDA               	movwf	fsr2h,c
  5932  014A36  0E80               	movlw	128
  5933  014A38  6EDF               	movwf	indf2,c
  5934                           
  5935                           ; BSR set to: 0
  5936  014A3A  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  5937  014A3C  D7E4               	goto	l12991
  5938  014A3E                     u10290:
  5939                           
  5940                           ; BSR set to: 0
  5941                           
  5942                           ; BSR set to: 0
  5943  014A3E  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  5944  014A40  D7DC               	goto	l12985
  5945  014A42                     u10300:
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;Console.c: 204: clearall = 1;
  5949                           
  5950                           ; BSR set to: 0
  5951  014A42  0E01               	movlw	1
  5952  014A44  6E46               	movwf	_clearall,c
  5953                           
  5954                           ;Console.c: 205: gCursor.x = 6;
  5955  014A46  0E00               	movlw	0
  5956  014A48  6E48               	movwf	_gCursor+1,c
  5957  014A4A  0E06               	movlw	6
  5958  014A4C  6E47               	movwf	_gCursor,c
  5959                           
  5960                           ;Console.c: 206: gCursor.y = 6;
  5961  014A4E  0E00               	movlw	0
  5962  014A50  6E4A               	movwf	_gCursor+3,c
  5963  014A52  0E06               	movlw	6
  5964  014A54  6E49               	movwf	_gCursor+2,c
  5965                           
  5966                           ; BSR set to: 0
  5967  014A56  0012               	return		;funcret
  5968  014A58                     __end_of_Console_FormFeed:
  5969                           	opt stack 0
  5970                           tosu	equ	0xFFF
  5971                           tosh	equ	0xFFE
  5972                           tosl	equ	0xFFD
  5973                           pclath	equ	0xFFA
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           postdec1	equ	0xFE5
  5983                           fsr1h	equ	0xFE2
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           postdec2	equ	0xFDD
  5988                           fsr2h	equ	0xFDA
  5989                           fsr2l	equ	0xFD9
  5990                           status	equ	0xFD8
  5991                           
  5992 ;; *************** function _Console_ResetCursor *****************
  5993 ;; Defined at:
  5994 ;;		line 297 in file "Library/Console.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;		None
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;		None
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg, status,2
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6012 ;;Total ram usage:        0 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    7
  6015 ;; This function calls:
  6016 ;;		Nothing
  6017 ;; This function is called by:
  6018 ;;		_Console_PrintChar
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text9
  6023  015950                     __ptext9:
  6024                           	opt stack 0
  6025  015950                     _Console_ResetCursor:
  6026                           	opt stack 20
  6027                           
  6028                           ;Console.c: 299: gCursor.x = 6;
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;incstack = 0
  6032  015950  0E00               	movlw	0
  6033  015952  6E48               	movwf	_gCursor+1,c
  6034  015954  0E06               	movlw	6
  6035  015956  6E47               	movwf	_gCursor,c
  6036                           
  6037                           ;Console.c: 300: gCursor.y = 6;
  6038  015958  0E00               	movlw	0
  6039  01595A  6E4A               	movwf	_gCursor+3,c
  6040  01595C  0E06               	movlw	6
  6041  01595E  6E49               	movwf	_gCursor+2,c
  6042                           
  6043                           ;Console.c: 303: lBufferX = 0;
  6044  015960  0E00               	movlw	0
  6045  015962  6E45               	movwf	_lBufferX,c
  6046                           
  6047                           ;Console.c: 304: lBufferY = 0;
  6048  015964  0E00               	movlw	0
  6049  015966  0100               	movlb	0	; () banked
  6050  015968  6FFF               	movwf	_lBufferY& (0+255),b
  6051                           
  6052                           ; BSR set to: 0
  6053  01596A  0012               	return		;funcret
  6054  01596C                     __end_of_Console_ResetCursor:
  6055                           	opt stack 0
  6056                           tosu	equ	0xFFF
  6057                           tosh	equ	0xFFE
  6058                           tosl	equ	0xFFD
  6059                           pclath	equ	0xFFA
  6060                           tblptru	equ	0xFF8
  6061                           tblptrh	equ	0xFF7
  6062                           tblptrl	equ	0xFF6
  6063                           tablat	equ	0xFF5
  6064                           prodh	equ	0xFF4
  6065                           prodl	equ	0xFF3
  6066                           postinc0	equ	0xFEE
  6067                           wreg	equ	0xFE8
  6068                           postdec1	equ	0xFE5
  6069                           fsr1h	equ	0xFE2
  6070                           fsr1l	equ	0xFE1
  6071                           indf2	equ	0xFDF
  6072                           postinc2	equ	0xFDE
  6073                           postdec2	equ	0xFDD
  6074                           fsr2h	equ	0xFDA
  6075                           fsr2l	equ	0xFD9
  6076                           status	equ	0xFD8
  6077                           
  6078 ;; *************** function _Console_Backspace *****************
  6079 ;; Defined at:
  6080 ;;		line 209 in file "Library/Console.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;		None
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;		None
  6085 ;; Return value:  Size  Location     Type
  6086 ;;                  1    wreg      void 
  6087 ;; Registers used:
  6088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/0
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6098 ;;Total ram usage:        0 bytes
  6099 ;; Hardware stack levels used:    1
  6100 ;; Hardware stack levels required when called:    8
  6101 ;; This function calls:
  6102 ;;		_Console_ClearCursor
  6103 ;; This function is called by:
  6104 ;;		_Console_PrintChar
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text10
  6109  01503C                     __ptext10:
  6110                           	opt stack 0
  6111  01503C                     _Console_Backspace:
  6112                           	opt stack 19
  6113                           
  6114                           ;Console.c: 211: if (lBufferX > 0)
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;incstack = 0
  6118  01503C  5045               	movf	_lBufferX,w,c
  6119  01503E  B4D8               	btfsc	status,2,c
  6120  015040  D006               	goto	l997
  6121                           
  6122                           ;Console.c: 212: {
  6123                           ;Console.c: 213: gCursor.x -= 6;
  6124  015042  0EFA               	movlw	250
  6125  015044  2647               	addwf	_gCursor,f,c
  6126  015046  0EFF               	movlw	255
  6127  015048  2248               	addwfc	_gCursor+1,f,c
  6128                           
  6129                           ;Console.c: 216: lBufferX --;
  6130  01504A  0645               	decf	_lBufferX,f,c
  6131                           
  6132                           ;Console.c: 218: }
  6133  01504C  D01C               	goto	l1000
  6134  01504E                     l997:
  6135                           
  6136                           ;Console.c: 219: else if (lBufferY > 0)
  6137  01504E  0100               	movlb	0	; () banked
  6138  015050  51FF               	movf	_lBufferY& (0+255),w,b
  6139  015052  B4D8               	btfsc	status,2,c
  6140  015054  D00C               	goto	l999
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;Console.c: 220: {
  6144                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  6145  015056  0E00               	movlw	0
  6146  015058  6E48               	movwf	_gCursor+1,c
  6147  01505A  0E72               	movlw	114
  6148  01505C  6E47               	movwf	_gCursor,c
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;Console.c: 222: gCursor.y -= 8;
  6152  01505E  0EF8               	movlw	248
  6153  015060  2649               	addwf	_gCursor+2,f,c
  6154  015062  0EFF               	movlw	255
  6155  015064  224A               	addwfc	_gCursor+3,f,c
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  6159  015066  0E13               	movlw	19
  6160  015068  6E45               	movwf	_lBufferX,c
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;Console.c: 226: lBufferY --;
  6164  01506A  07FF               	decf	_lBufferY& (0+255),f,b
  6165                           
  6166                           ;Console.c: 228: }
  6167  01506C  D00C               	goto	l1000
  6168  01506E                     l999:
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;Console.c: 229: else
  6172                           ;Console.c: 230: {
  6173                           ;Console.c: 231: gCursor.x = 6;
  6174                           
  6175                           ; BSR set to: 0
  6176  01506E  0E00               	movlw	0
  6177  015070  6E48               	movwf	_gCursor+1,c
  6178  015072  0E06               	movlw	6
  6179  015074  6E47               	movwf	_gCursor,c
  6180                           
  6181                           ;Console.c: 232: gCursor.y = 6;
  6182  015076  0E00               	movlw	0
  6183  015078  6E4A               	movwf	_gCursor+3,c
  6184  01507A  0E06               	movlw	6
  6185  01507C  6E49               	movwf	_gCursor+2,c
  6186                           
  6187                           ;Console.c: 235: lBufferX = 0;
  6188  01507E  0E00               	movlw	0
  6189  015080  6E45               	movwf	_lBufferX,c
  6190                           
  6191                           ;Console.c: 236: lBufferY = 0;
  6192  015082  0E00               	movlw	0
  6193  015084  6FFF               	movwf	_lBufferY& (0+255),b
  6194  015086                     l1000:
  6195                           
  6196                           ;Console.c: 238: }
  6197                           ;Console.c: 240: Console_ClearCursor();
  6198                           
  6199                           ; BSR set to: 0
  6200                           
  6201                           ; BSR set to: 0
  6202  015086  EC31  F0AB         	call	_Console_ClearCursor	;wreg free
  6203  01508A  0012               	return		;funcret
  6204  01508C                     __end_of_Console_Backspace:
  6205                           	opt stack 0
  6206                           tosu	equ	0xFFF
  6207                           tosh	equ	0xFFE
  6208                           tosl	equ	0xFFD
  6209                           pclath	equ	0xFFA
  6210                           tblptru	equ	0xFF8
  6211                           tblptrh	equ	0xFF7
  6212                           tblptrl	equ	0xFF6
  6213                           tablat	equ	0xFF5
  6214                           prodh	equ	0xFF4
  6215                           prodl	equ	0xFF3
  6216                           postinc0	equ	0xFEE
  6217                           wreg	equ	0xFE8
  6218                           postdec1	equ	0xFE5
  6219                           fsr1h	equ	0xFE2
  6220                           fsr1l	equ	0xFE1
  6221                           indf2	equ	0xFDF
  6222                           postinc2	equ	0xFDE
  6223                           postdec2	equ	0xFDD
  6224                           fsr2h	equ	0xFDA
  6225                           fsr2l	equ	0xFD9
  6226                           status	equ	0xFD8
  6227                           
  6228 ;; *************** function _Console_ClearCursor *****************
  6229 ;; Defined at:
  6230 ;;		line 308 in file "Library/Console.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;		None
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;		None
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  1    wreg      void 
  6237 ;; Registers used:
  6238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6247 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;Total ram usage:        2 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    7
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_Console_Backspace
  6255 ;;		_Console_Tab
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           	psect	text11
  6260  015662                     __ptext11:
  6261                           	opt stack 0
  6262  015662                     _Console_ClearCursor:
  6263                           	opt stack 19
  6264                           
  6265                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  6266                           
  6267                           ;incstack = 0
  6268  015662  0E01               	movlw	1
  6269  015664  6E4E               	movwf	_change,c
  6270  015666  0100               	movlb	0	; () banked
  6271  015668  51FF               	movf	_lBufferY& (0+255),w,b
  6272  01566A  0D14               	mullw	20
  6273  01566C  0E46               	movlw	low _lBuffer
  6274  01566E  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  6275  015670  0E03               	movlw	high _lBuffer
  6276  015672  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  6277  015674  50F3               	movf	prodl,w,c
  6278  015676  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  6279  015678  50F4               	movf	prodh,w,c
  6280  01567A  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  6281  01567C  5045               	movf	_lBufferX,w,c
  6282  01567E  0D01               	mullw	1
  6283  015680  50F3               	movf	prodl,w,c
  6284  015682  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  6285  015684  6ED9               	movwf	fsr2l,c
  6286  015686  50F4               	movf	prodh,w,c
  6287  015688  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  6288  01568A  6EDA               	movwf	fsr2h,c
  6289  01568C  0E80               	movlw	128
  6290  01568E  6EDF               	movwf	indf2,c
  6291                           
  6292                           ; BSR set to: 0
  6293  015690  0012               	return		;funcret
  6294  015692                     __end_of_Console_ClearCursor:
  6295                           	opt stack 0
  6296                           tosu	equ	0xFFF
  6297                           tosh	equ	0xFFE
  6298                           tosl	equ	0xFFD
  6299                           pclath	equ	0xFFA
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           postinc0	equ	0xFEE
  6307                           wreg	equ	0xFE8
  6308                           postdec1	equ	0xFE5
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _Turn *****************
  6319 ;; Defined at:
  6320 ;;		line 293 in file "dans.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  Angle           2    1[BANK0 ] int 
  6323 ;;  Speed           2    3[BANK0 ] int 
  6324 ;;  Dir             2    5[BANK0 ] int 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  Rad             2    9[BANK0 ] int 
  6327 ;;  C_Angle         2    7[BANK0 ] int 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  2    1[BANK0 ] int 
  6330 ;; Registers used:
  6331 ;;		wreg, status,2, status,0, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6337 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;Total ram usage:       10 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    9
  6344 ;; This function calls:
  6345 ;;		_Robot_Stop
  6346 ;;		_eusartRec
  6347 ;;		_eusartSend
  6348 ;; This function is called by:
  6349 ;;		_Travel
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text12
  6354  01481C                     __ptext12:
  6355                           	opt stack 0
  6356  01481C                     _Turn:
  6357                           	opt stack 20
  6358                           
  6359                           ;dans.c: 294: int Rad = 1;
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;incstack = 0
  6363  01481C  0E00               	movlw	0
  6364  01481E  0100               	movlb	0	; () banked
  6365  014820  6F6A               	movwf	(Turn@Rad+1)& (0+255),b
  6366  014822  0E01               	movlw	1
  6367  014824  6F69               	movwf	Turn@Rad& (0+255),b
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;dans.c: 295: if (Dir == 0){
  6371  014826  5165               	movf	Turn@Dir& (0+255),w,b
  6372  014828  1166               	iorwf	(Turn@Dir+1)& (0+255),w,b
  6373  01482A  A4D8               	btfss	status,2,c
  6374  01482C  D004               	goto	l2408
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;dans.c: 296: Rad = 65535;
  6378  01482E  6969               	setf	Turn@Rad& (0+255),b
  6379  014830  696A               	setf	(Turn@Rad+1)& (0+255),b
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;dans.c: 297: Angle = ~Angle;
  6383  014832  1F61               	comf	Turn@Angle& (0+255),f,b
  6384  014834  1F62               	comf	(Turn@Angle+1)& (0+255),f,b
  6385  014836                     l2408:
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;dans.c: 298: }
  6389                           ;dans.c: 300: eusartSend(137);
  6390                           
  6391                           ; BSR set to: 0
  6392  014836  0E89               	movlw	137
  6393  014838  EC86  F0AD         	call	_eusartSend
  6394                           
  6395                           ;dans.c: 301: eusartSend(((unsigned char)(((Speed)>>8)&0xFF)));
  6396  01483C  0100               	movlb	0	; () banked
  6397  01483E  5164               	movf	(Turn@Speed+1)& (0+255),w,b
  6398  014840  EC86  F0AD         	call	_eusartSend
  6399                           
  6400                           ;dans.c: 302: eusartSend(((unsigned char)((Speed)&0xFF)));
  6401  014844  0100               	movlb	0	; () banked
  6402  014846  5163               	movf	Turn@Speed& (0+255),w,b
  6403  014848  EC86  F0AD         	call	_eusartSend
  6404                           
  6405                           ;dans.c: 303: eusartSend(((unsigned char)(((Rad)>>8)&0xFF)));
  6406  01484C  0100               	movlb	0	; () banked
  6407  01484E  516A               	movf	(Turn@Rad+1)& (0+255),w,b
  6408  014850  EC86  F0AD         	call	_eusartSend
  6409                           
  6410                           ;dans.c: 304: eusartSend(((unsigned char)((Rad)&0xFF)));
  6411  014854  0100               	movlb	0	; () banked
  6412  014856  5169               	movf	Turn@Rad& (0+255),w,b
  6413  014858  EC86  F0AD         	call	_eusartSend
  6414                           
  6415                           ;dans.c: 305: int C_Angle = 0;
  6416  01485C  0E00               	movlw	0
  6417  01485E  0100               	movlb	0	; () banked
  6418  014860  6F68               	movwf	(Turn@C_Angle+1)& (0+255),b
  6419  014862  0E00               	movlw	0
  6420  014864  6F67               	movwf	Turn@C_Angle& (0+255),b
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;dans.c: 306: eusartSend(157);
  6424  014866  0E9D               	movlw	157
  6425  014868  EC86  F0AD         	call	_eusartSend
  6426                           
  6427                           ;dans.c: 307: eusartSend(((unsigned char)(((Angle)>>8)&0xFF)));
  6428  01486C  0100               	movlb	0	; () banked
  6429  01486E  5162               	movf	(Turn@Angle+1)& (0+255),w,b
  6430  014870  EC86  F0AD         	call	_eusartSend
  6431                           
  6432                           ;dans.c: 308: eusartSend(((unsigned char)((Angle)&0xFF)));
  6433  014874  0100               	movlb	0	; () banked
  6434  014876  5161               	movf	Turn@Angle& (0+255),w,b
  6435  014878  EC86  F0AD         	call	_eusartSend
  6436                           
  6437                           ;dans.c: 310: Robot_Stop();
  6438  01487C  EC4A  F0AC         	call	_Robot_Stop	;wreg free
  6439                           
  6440                           ;dans.c: 312: eusartSend(142);
  6441  014880  0E8E               	movlw	142
  6442  014882  EC86  F0AD         	call	_eusartSend
  6443                           
  6444                           ;dans.c: 313: eusartSend(7);
  6445  014886  0E07               	movlw	7
  6446  014888  EC86  F0AD         	call	_eusartSend
  6447                           
  6448                           ;dans.c: 314: eusartRec();
  6449  01488C  ECBD  F0AD         	call	_eusartRec	;wreg free
  6450  014890  0012               	return		;funcret
  6451  014892                     __end_of_Turn:
  6452                           	opt stack 0
  6453                           tosu	equ	0xFFF
  6454                           tosh	equ	0xFFE
  6455                           tosl	equ	0xFFD
  6456                           pclath	equ	0xFFA
  6457                           tblptru	equ	0xFF8
  6458                           tblptrh	equ	0xFF7
  6459                           tblptrl	equ	0xFF6
  6460                           tablat	equ	0xFF5
  6461                           prodh	equ	0xFF4
  6462                           prodl	equ	0xFF3
  6463                           postinc0	equ	0xFEE
  6464                           wreg	equ	0xFE8
  6465                           postdec1	equ	0xFE5
  6466                           fsr1h	equ	0xFE2
  6467                           fsr1l	equ	0xFE1
  6468                           indf2	equ	0xFDF
  6469                           postinc2	equ	0xFDE
  6470                           postdec2	equ	0xFDD
  6471                           fsr2h	equ	0xFDA
  6472                           fsr2l	equ	0xFD9
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function _Get_VirtualWall_State *****************
  6476 ;; Defined at:
  6477 ;;		line 252 in file "dans.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;		None
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;  Vitual_Wall_    2    4[BANK0 ] int 
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  2    1[BANK0 ] int 
  6484 ;; Registers used:
  6485 ;;		wreg, status,2, status,0, cstack
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6491 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;Total ram usage:        5 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    8
  6498 ;; This function calls:
  6499 ;;		_eusartRec
  6500 ;;		_eusartSend
  6501 ;; This function is called by:
  6502 ;;		_Travel
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           	psect	text13
  6507  015870                     __ptext13:
  6508                           	opt stack 0
  6509  015870                     _Get_VirtualWall_State:
  6510                           	opt stack 21
  6511                           
  6512                           ;dans.c: 253: eusartSend(142);
  6513                           
  6514                           ;incstack = 0
  6515  015870  0E8E               	movlw	142
  6516  015872  EC86  F0AD         	call	_eusartSend
  6517                           
  6518                           ;dans.c: 254: eusartSend(13);
  6519  015876  0E0D               	movlw	13
  6520  015878  EC86  F0AD         	call	_eusartSend
  6521                           
  6522                           ;dans.c: 255: int Vitual_Wall_Sensor = (eusartRec());
  6523  01587C  ECBD  F0AD         	call	_eusartRec	;wreg free
  6524  015880  0100               	movlb	0	; () banked
  6525  015882  6F63               	movwf	??_Get_VirtualWall_State& (0+255),b
  6526  015884  5163               	movf	??_Get_VirtualWall_State& (0+255),w,b
  6527  015886  6F64               	movwf	Get_VirtualWall_State@Vitual_Wall_Sensor& (0+255),b
  6528  015888  6B65               	clrf	(Get_VirtualWall_State@Vitual_Wall_Sensor+1)& (0+255),b
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;dans.c: 256: return Vitual_Wall_Sensor;
  6532  01588A  C064  F061         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor,?_Get_VirtualWall_State
  6533  01588E  C065  F062         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor+1,?_Get_VirtualWall_State+1
  6534  015892  0012               	return	
  6535  015894                     __end_of_Get_VirtualWall_State:
  6536                           	opt stack 0
  6537                           tosu	equ	0xFFF
  6538                           tosh	equ	0xFFE
  6539                           tosl	equ	0xFFD
  6540                           pclath	equ	0xFFA
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           postdec1	equ	0xFE5
  6550                           fsr1h	equ	0xFE2
  6551                           fsr1l	equ	0xFE1
  6552                           indf2	equ	0xFDF
  6553                           postinc2	equ	0xFDE
  6554                           postdec2	equ	0xFDD
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _Drive *****************
  6560 ;; Defined at:
  6561 ;;		line 220 in file "dans.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;  SpeedL          2    1[BANK0 ] int 
  6564 ;;  SpeedR          2    3[BANK0 ] int 
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;		None
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  1    wreg      void 
  6569 ;; Registers used:
  6570 ;;		wreg, status,2, status,0, cstack
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6576 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;Total ram usage:        4 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    8
  6583 ;; This function calls:
  6584 ;;		_eusartSend
  6585 ;; This function is called by:
  6586 ;;		_Travel
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           	psect	text14
  6591  0151C4                     __ptext14:
  6592                           	opt stack 0
  6593  0151C4                     _Drive:
  6594                           	opt stack 21
  6595                           
  6596                           ;dans.c: 221: if (SpeedL < 0){
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;incstack = 0
  6600  0151C4  0100               	movlb	0	; () banked
  6601  0151C6  AF62               	btfss	(Drive@SpeedL+1)& (0+255),7,b
  6602  0151C8  D006               	goto	l2385
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;dans.c: 222: SpeedL = -1*SpeedL;
  6606  0151CA  6D61               	negf	Drive@SpeedL& (0+255),b
  6607  0151CC  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
  6608  0151CE  B0D8               	btfsc	status,0,c
  6609  0151D0  2B62               	incf	(Drive@SpeedL+1)& (0+255),f,b
  6610                           
  6611                           ;dans.c: 223: SpeedL = ~SpeedL;
  6612  0151D2  1F61               	comf	Drive@SpeedL& (0+255),f,b
  6613  0151D4  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
  6614  0151D6                     l2385:
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;dans.c: 224: }
  6618                           ;dans.c: 225: if (SpeedR < 0){
  6619                           
  6620                           ; BSR set to: 0
  6621  0151D6  AF64               	btfss	(Drive@SpeedR+1)& (0+255),7,b
  6622  0151D8  D006               	goto	l2386
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;dans.c: 226: SpeedR = -1*SpeedR;
  6626  0151DA  6D63               	negf	Drive@SpeedR& (0+255),b
  6627  0151DC  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
  6628  0151DE  B0D8               	btfsc	status,0,c
  6629  0151E0  2B64               	incf	(Drive@SpeedR+1)& (0+255),f,b
  6630                           
  6631                           ;dans.c: 227: SpeedR = ~SpeedR;
  6632  0151E2  1F63               	comf	Drive@SpeedR& (0+255),f,b
  6633  0151E4  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
  6634  0151E6                     l2386:
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;dans.c: 228: }
  6638                           ;dans.c: 230: eusartSend(145);
  6639                           
  6640                           ; BSR set to: 0
  6641  0151E6  0E91               	movlw	145
  6642  0151E8  EC86  F0AD         	call	_eusartSend
  6643                           
  6644                           ;dans.c: 231: eusartSend(((unsigned char)(((SpeedL)>>8)&0xFF)));
  6645  0151EC  0100               	movlb	0	; () banked
  6646  0151EE  5162               	movf	(Drive@SpeedL+1)& (0+255),w,b
  6647  0151F0  EC86  F0AD         	call	_eusartSend
  6648                           
  6649                           ;dans.c: 232: eusartSend(((unsigned char)((SpeedL)&0xFF)));
  6650  0151F4  0100               	movlb	0	; () banked
  6651  0151F6  5161               	movf	Drive@SpeedL& (0+255),w,b
  6652  0151F8  EC86  F0AD         	call	_eusartSend
  6653                           
  6654                           ;dans.c: 233: eusartSend(((unsigned char)(((SpeedR)>>8)&0xFF)));
  6655  0151FC  0100               	movlb	0	; () banked
  6656  0151FE  5164               	movf	(Drive@SpeedR+1)& (0+255),w,b
  6657  015200  EC86  F0AD         	call	_eusartSend
  6658                           
  6659                           ;dans.c: 234: eusartSend(((unsigned char)((SpeedR)&0xFF)));
  6660  015204  0100               	movlb	0	; () banked
  6661  015206  5163               	movf	Drive@SpeedR& (0+255),w,b
  6662  015208  EC86  F0AD         	call	_eusartSend
  6663  01520C  0012               	return		;funcret
  6664  01520E                     __end_of_Drive:
  6665                           	opt stack 0
  6666                           tosu	equ	0xFFF
  6667                           tosh	equ	0xFFE
  6668                           tosl	equ	0xFFD
  6669                           pclath	equ	0xFFA
  6670                           tblptru	equ	0xFF8
  6671                           tblptrh	equ	0xFF7
  6672                           tblptrl	equ	0xFF6
  6673                           tablat	equ	0xFF5
  6674                           prodh	equ	0xFF4
  6675                           prodl	equ	0xFF3
  6676                           postinc0	equ	0xFEE
  6677                           wreg	equ	0xFE8
  6678                           postdec1	equ	0xFE5
  6679                           fsr1h	equ	0xFE2
  6680                           fsr1l	equ	0xFE1
  6681                           indf2	equ	0xFDF
  6682                           postinc2	equ	0xFDE
  6683                           postdec2	equ	0xFDD
  6684                           fsr2h	equ	0xFDA
  6685                           fsr2l	equ	0xFD9
  6686                           status	equ	0xFD8
  6687                           
  6688 ;; *************** function _Console_Render *****************
  6689 ;; Defined at:
  6690 ;;		line 377 in file "Library/Console.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;		None
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;  lCursor         4   38[BANK0 ] struct Point
  6695 ;;  y               1   43[BANK0 ] unsigned char 
  6696 ;;  x               1   42[BANK0 ] unsigned char 
  6697 ;;  temp            1   37[BANK0 ] unsigned char 
  6698 ;;  Temp            2    0        unsigned short 
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      void 
  6701 ;; Registers used:
  6702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;Total ram usage:        9 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; Hardware stack levels required when called:   11
  6715 ;; This function calls:
  6716 ;;		_Console_MakeField
  6717 ;;		_LCD_DrawField
  6718 ;;		_LCD_FillRectangle
  6719 ;; This function is called by:
  6720 ;;		_main
  6721 ;;		_Travel
  6722 ;;		_Sensor_Observe
  6723 ;;		_Closest_Object
  6724 ;;		_Init_Pos_Array
  6725 ;;		_Detect_Victim
  6726 ;;		_movement1
  6727 ;;		_Find_Flag
  6728 ;;		_Move_ADC_To
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           	psect	text15
  6733  012436                     __ptext15:
  6734                           	opt stack 0
  6735  012436                     _Console_Render:
  6736                           	opt stack 18
  6737                           
  6738                           ;Console.c: 379: Colour Temp;
  6739                           ;Console.c: 380: if (change)
  6740                           
  6741                           ;incstack = 0
  6742  012436  504E               	movf	_change,w,c
  6743  012438  B4D8               	btfsc	status,2,c
  6744  01243A  0012               	return	
  6745                           
  6746                           ;Console.c: 381: {
  6747                           ;Console.c: 382: UINT8 x, y, temp;
  6748                           ;Console.c: 383: Point lCursor = {6,6};
  6749  01243C  C1DD  F086         	movff	Console_Render@F6956,Console_Render@lCursor
  6750  012440  C1DE  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  6751  012444  C1DF  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  6752  012448  C1E0  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  6753                           
  6754                           ;Console.c: 385: if (clearall)
  6755  01244C  5046               	movf	_clearall,w,c
  6756  01244E  B4D8               	btfsc	status,2,c
  6757  012450  D005               	goto	l1056
  6758                           
  6759                           ;Console.c: 386: {
  6760                           ;Console.c: 389: temp = lBufferY;
  6761  012452  C0FF  F085         	movff	_lBufferY,Console_Render@temp
  6762                           
  6763                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  6764  012456  0E0F               	movlw	15
  6765  012458  0100               	movlb	0	; () banked
  6766  01245A  6FFF               	movwf	_lBufferY& (0+255),b
  6767  01245C                     l1056:
  6768                           
  6769                           ;Console.c: 391: }
  6770                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  6771  01245C  0E00               	movlw	0
  6772  01245E  0100               	movlb	0	; () banked
  6773  012460  6F8B               	movwf	Console_Render@y& (0+255),b
  6774  012462  D0B9               	goto	l1057
  6775  012464                     
  6776                           ; BSR set to: 0
  6777                           ;Console.c: 394: {
  6778                           ;Console.c: 395: gForecolour = lCBuffer[y];
  6779                           
  6780                           ; BSR set to: 0
  6781  012464  518B               	movf	Console_Render@y& (0+255),w,b
  6782  012466  0D02               	mullw	2
  6783  012468  0E50               	movlw	low _lCBuffer
  6784  01246A  24F3               	addwf	prodl,w,c
  6785  01246C  6ED9               	movwf	fsr2l,c
  6786  01246E  0E02               	movlw	high _lCBuffer
  6787  012470  20F4               	addwfc	prodh,w,c
  6788  012472  6EDA               	movwf	fsr2h,c
  6789  012474  CFDE F1F5          	movff	postinc2,_gForecolour
  6790  012478  CFDD F1F6          	movff	postdec2,_gForecolour+1
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  6794  01247C  0E00               	movlw	0
  6795  01247E  6F8A               	movwf	Console_Render@x& (0+255),b
  6796  012480                     l15341:
  6797                           
  6798                           ; BSR set to: 0
  6799  012480  0E13               	movlw	19
  6800  012482  658A               	cpfsgt	Console_Render@x& (0+255),b
  6801  012484  D001               	goto	l1059
  6802  012486  D09E               	goto	u12800
  6803  012488                     l1059:
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;Console.c: 397: {
  6807                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  6808                           
  6809                           ; BSR set to: 0
  6810  012488  518B               	movf	Console_Render@y& (0+255),w,b
  6811  01248A  0D14               	mullw	20
  6812  01248C  0E46               	movlw	low _lBuffer
  6813  01248E  6F83               	movwf	??_Console_Render& (0+255),b
  6814  012490  0E03               	movlw	high _lBuffer
  6815  012492  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6816  012494  50F3               	movf	prodl,w,c
  6817  012496  2783               	addwf	??_Console_Render& (0+255),f,b
  6818  012498  50F4               	movf	prodh,w,c
  6819  01249A  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6820  01249C  518A               	movf	Console_Render@x& (0+255),w,b
  6821  01249E  0D01               	mullw	1
  6822  0124A0  50F3               	movf	prodl,w,c
  6823  0124A2  2583               	addwf	??_Console_Render& (0+255),w,b
  6824  0124A4  6ED9               	movwf	fsr2l,c
  6825  0124A6  50F4               	movf	prodh,w,c
  6826  0124A8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6827  0124AA  6EDA               	movwf	fsr2h,c
  6828  0124AC  AEDF               	btfss	indf2,7,c
  6829  0124AE  D083               	goto	l1063
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;Console.c: 399: {
  6833                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  6834  0124B0  518B               	movf	Console_Render@y& (0+255),w,b
  6835  0124B2  0D14               	mullw	20
  6836  0124B4  0E46               	movlw	low _lBuffer
  6837  0124B6  6F83               	movwf	??_Console_Render& (0+255),b
  6838  0124B8  0E03               	movlw	high _lBuffer
  6839  0124BA  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6840  0124BC  50F3               	movf	prodl,w,c
  6841  0124BE  2783               	addwf	??_Console_Render& (0+255),f,b
  6842  0124C0  50F4               	movf	prodh,w,c
  6843  0124C2  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6844  0124C4  518A               	movf	Console_Render@x& (0+255),w,b
  6845  0124C6  0D01               	mullw	1
  6846  0124C8  50F3               	movf	prodl,w,c
  6847  0124CA  2583               	addwf	??_Console_Render& (0+255),w,b
  6848  0124CC  6ED9               	movwf	fsr2l,c
  6849  0124CE  50F4               	movf	prodh,w,c
  6850  0124D0  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6851  0124D2  6EDA               	movwf	fsr2h,c
  6852  0124D4  0E7F               	movlw	127
  6853  0124D6  16DF               	andwf	indf2,f,c
  6854                           
  6855                           ;Console.c: 401: if (lBuffer[y][x])
  6856  0124D8  518B               	movf	Console_Render@y& (0+255),w,b
  6857  0124DA  0D14               	mullw	20
  6858  0124DC  0E46               	movlw	low _lBuffer
  6859  0124DE  6F83               	movwf	??_Console_Render& (0+255),b
  6860  0124E0  0E03               	movlw	high _lBuffer
  6861  0124E2  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6862  0124E4  50F3               	movf	prodl,w,c
  6863  0124E6  2783               	addwf	??_Console_Render& (0+255),f,b
  6864  0124E8  50F4               	movf	prodh,w,c
  6865  0124EA  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6866  0124EC  518A               	movf	Console_Render@x& (0+255),w,b
  6867  0124EE  0D01               	mullw	1
  6868  0124F0  50F3               	movf	prodl,w,c
  6869  0124F2  2583               	addwf	??_Console_Render& (0+255),w,b
  6870  0124F4  6ED9               	movwf	fsr2l,c
  6871  0124F6  50F4               	movf	prodh,w,c
  6872  0124F8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6873  0124FA  6EDA               	movwf	fsr2h,c
  6874  0124FC  50DF               	movf	indf2,w,c
  6875  0124FE  B4D8               	btfsc	status,2,c
  6876  012500  D043               	goto	l1062
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;Console.c: 402: {
  6880                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  6881  012502  C154  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
  6882  012506  C155  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  6883  01250A  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  6884  01250E  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  6885  012512  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  6886  012516  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  6887  01251A  C1E5  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  6888  01251E  C1E6  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  6889  012522  C1E7  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  6890  012526  C1E8  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  6891  01252A  EC4D  F0A7         	call	_LCD_FillRectangle	;wreg free
  6892                           
  6893                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  6894  01252E  0100               	movlb	0	; () banked
  6895  012530  518B               	movf	Console_Render@y& (0+255),w,b
  6896  012532  0D14               	mullw	20
  6897  012534  0E46               	movlw	low _lBuffer
  6898  012536  6F83               	movwf	??_Console_Render& (0+255),b
  6899  012538  0E03               	movlw	high _lBuffer
  6900  01253A  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6901  01253C  50F3               	movf	prodl,w,c
  6902  01253E  2783               	addwf	??_Console_Render& (0+255),f,b
  6903  012540  50F4               	movf	prodh,w,c
  6904  012542  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6905  012544  518A               	movf	Console_Render@x& (0+255),w,b
  6906  012546  0D01               	mullw	1
  6907  012548  50F3               	movf	prodl,w,c
  6908  01254A  2583               	addwf	??_Console_Render& (0+255),w,b
  6909  01254C  6ED9               	movwf	fsr2l,c
  6910  01254E  50F4               	movf	prodh,w,c
  6911  012550  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6912  012552  6EDA               	movwf	fsr2h,c
  6913  012554  50DF               	movf	indf2,w,c
  6914  012556  EC64  F09F         	call	_Console_MakeField
  6915  01255A  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
  6916  01255E  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  6917  012562  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  6918  012566  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  6919  01256A  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  6920  01256E  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  6921  012572  C1E5  F078         	movff	_gCharSize,LCD_DrawField@pSize
  6922  012576  C1E6  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  6923  01257A  C1E7  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  6924  01257E  C1E8  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  6925  012582  EC17  F0A3         	call	_LCD_DrawField	;wreg free
  6926                           
  6927                           ;Console.c: 405: }
  6928  012586  D017               	goto	l1063
  6929  012588                     l1062:
  6930                           
  6931                           ;Console.c: 406: else
  6932                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  6933  012588  0E00               	movlw	0
  6934  01258A  0100               	movlb	0	; () banked
  6935  01258C  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  6936  01258E  0E00               	movlw	0
  6937  012590  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
  6938  012592  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  6939  012596  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  6940  01259A  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  6941  01259E  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  6942  0125A2  C1E5  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  6943  0125A6  C1E6  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  6944  0125AA  C1E7  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  6945  0125AE  C1E8  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  6946  0125B2  EC4D  F0A7         	call	_LCD_FillRectangle	;wreg free
  6947  0125B6                     l1063:
  6948                           
  6949                           ;Console.c: 408: }
  6950                           ;Console.c: 409: lCursor.x += (5 + 1);
  6951  0125B6  0E06               	movlw	6
  6952  0125B8  0100               	movlb	0	; () banked
  6953  0125BA  2786               	addwf	Console_Render@lCursor& (0+255),f,b
  6954  0125BC  0E00               	movlw	0
  6955  0125BE  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  6956                           
  6957                           ; BSR set to: 0
  6958  0125C0  2B8A               	incf	Console_Render@x& (0+255),f,b
  6959  0125C2  D75E               	goto	l15341
  6960  0125C4                     u12800:
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;Console.c: 410: }
  6964                           ;Console.c: 411: lCursor.y += (7 + 1);
  6965                           
  6966                           ; BSR set to: 0
  6967  0125C4  0E08               	movlw	8
  6968  0125C6  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  6969  0125C8  0E00               	movlw	0
  6970  0125CA  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;Console.c: 412: lCursor.x = 6;
  6974  0125CC  0E00               	movlw	0
  6975  0125CE  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
  6976  0125D0  0E06               	movlw	6
  6977  0125D2  6F86               	movwf	Console_Render@lCursor& (0+255),b
  6978                           
  6979                           ; BSR set to: 0
  6980  0125D4  2B8B               	incf	Console_Render@y& (0+255),f,b
  6981  0125D6                     l1057:
  6982                           
  6983                           ; BSR set to: 0
  6984                           
  6985                           ; BSR set to: 0
  6986  0125D6  518B               	movf	Console_Render@y& (0+255),w,b
  6987  0125D8  5DFF               	subwf	_lBufferY& (0+255),w,b
  6988  0125DA  B0D8               	btfsc	status,0,c
  6989  0125DC  D743               	goto	l1058
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;Console.c: 413: }
  6993                           ;Console.c: 415: if (clearall)
  6994                           
  6995                           ; BSR set to: 0
  6996  0125DE  5046               	movf	_clearall,w,c
  6997  0125E0  B4D8               	btfsc	status,2,c
  6998  0125E2  0012               	return	
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;Console.c: 416: {
  7002                           ;Console.c: 417: clearall = 0;
  7003  0125E4  0E00               	movlw	0
  7004  0125E6  6E46               	movwf	_clearall,c
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;Console.c: 418: lBufferY = temp;
  7008  0125E8  C085  F0FF         	movff	Console_Render@temp,_lBufferY
  7009                           
  7010                           ; BSR set to: 0
  7011  0125EC  0012               	return	
  7012  0125EE                     __end_of_Console_Render:
  7013                           	opt stack 0
  7014                           tosu	equ	0xFFF
  7015                           tosh	equ	0xFFE
  7016                           tosl	equ	0xFFD
  7017                           pclath	equ	0xFFA
  7018                           tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           postinc0	equ	0xFEE
  7025                           wreg	equ	0xFE8
  7026                           postdec1	equ	0xFE5
  7027                           fsr1h	equ	0xFE2
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           postinc2	equ	0xFDE
  7031                           postdec2	equ	0xFDD
  7032                           fsr2h	equ	0xFDA
  7033                           fsr2l	equ	0xFD9
  7034                           status	equ	0xFD8
  7035                           
  7036 ;; *************** function _LCD_FillRectangle *****************
  7037 ;; Defined at:
  7038 ;;		line 318 in file "Library/LCD.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;  pColour         2    9[BANK0 ] unsigned short 
  7041 ;;  pPoint          4   11[BANK0 ] struct Point
  7042 ;;  pSize           4   15[BANK0 ] struct Point
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  j               1   22[BANK0 ] unsigned char 
  7045 ;;  i               1   21[BANK0 ] unsigned char 
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  1    wreg      void 
  7048 ;; Registers used:
  7049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7055 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;Total ram usage:       14 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; Hardware stack levels required when called:   10
  7062 ;; This function calls:
  7063 ;;		_LCD_Word_Write
  7064 ;;		_Set_Addr_Window
  7065 ;; This function is called by:
  7066 ;;		_Console_Render
  7067 ;;		_Console_ClearLine
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071                           	psect	text16
  7072  014E9A                     __ptext16:
  7073                           	opt stack 0
  7074  014E9A                     _LCD_FillRectangle:
  7075                           	opt stack 18
  7076                           
  7077                           ;LCD.c: 320: UINT8 i = 0x00;
  7078                           
  7079                           ;incstack = 0
  7080  014E9A  0E00               	movlw	0
  7081  014E9C  0100               	movlb	0	; () banked
  7082  014E9E  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
  7083                           
  7084                           ;LCD.c: 321: UINT8 j = 0x00;
  7085  014EA0  0E00               	movlw	0
  7086  014EA2  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  7090  014EA4  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  7091  014EA8  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  7092  014EAA  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
  7093  014EAC  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
  7094  014EAE  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
  7095  014EB0  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  7096  014EB2  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
  7097  014EB4  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
  7098  014EB6  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
  7099  014EB8  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
  7100  014EBA  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  7101  014EBC  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  7102  014EBE  EC54  F0A0         	call	_Set_Addr_Window
  7103                           
  7104                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
  7105  014EC2  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
  7106  014EC6  0100               	movlb	0	; () banked
  7107  014EC8  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
  7108  014ECA  B4D8               	btfsc	status,2,c
  7109  014ECC  0012               	return	
  7110                           
  7111                           ; BSR set to: 0
  7112                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
  7113                           
  7114                           ; BSR set to: 0
  7115  014ECE  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
  7116  014ED2                     l14737:
  7117                           
  7118                           ; BSR set to: 0
  7119  014ED2  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
  7120  014ED4  B4D8               	btfsc	status,2,c
  7121  014ED6  D009               	goto	u12220
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;LCD.c: 333: LCD_Word_Write(pColour);
  7125                           
  7126                           ; BSR set to: 0
  7127                           
  7128                           ; BSR set to: 0
  7129  014ED8  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
  7130  014EDC  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
  7131  014EE0  ECC4  F0AC         	call	_LCD_Word_Write	;wreg free
  7132  014EE4  0100               	movlb	0	; () banked
  7133  014EE6  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
  7134  014EE8  D7F4               	goto	l14737
  7135  014EEA                     u12220:
  7136                           
  7137                           ; BSR set to: 0
  7138                           
  7139                           ; BSR set to: 0
  7140  014EEA  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
  7141  014EEC  D7ED               	goto	L3
  7142  014EEE                     __end_of_LCD_FillRectangle:
  7143                           	opt stack 0
  7144                           tosu	equ	0xFFF
  7145                           tosh	equ	0xFFE
  7146                           tosl	equ	0xFFD
  7147                           pclath	equ	0xFFA
  7148                           tblptru	equ	0xFF8
  7149                           tblptrh	equ	0xFF7
  7150                           tblptrl	equ	0xFF6
  7151                           tablat	equ	0xFF5
  7152                           prodh	equ	0xFF4
  7153                           prodl	equ	0xFF3
  7154                           postinc0	equ	0xFEE
  7155                           wreg	equ	0xFE8
  7156                           postdec1	equ	0xFE5
  7157                           fsr1h	equ	0xFE2
  7158                           fsr1l	equ	0xFE1
  7159                           indf2	equ	0xFDF
  7160                           postinc2	equ	0xFDE
  7161                           postdec2	equ	0xFDD
  7162                           fsr2h	equ	0xFDA
  7163                           fsr2l	equ	0xFD9
  7164                           status	equ	0xFD8
  7165                           
  7166 ;; *************** function _LCD_DrawField *****************
  7167 ;; Defined at:
  7168 ;;		line 393 in file "Library/LCD.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;  pField          2   18[BANK0 ] PTR unsigned short 
  7171 ;;		 -> Console_MakeField@Fill(70), 
  7172 ;;  pPoint          4   20[BANK0 ] struct Point
  7173 ;;  pSize           4   24[BANK0 ] struct Point
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;  count           2   30[BANK0 ] unsigned short 
  7176 ;;  i               1   34[BANK0 ] unsigned char 
  7177 ;;  ymax            1   33[BANK0 ] unsigned char 
  7178 ;;  xmax            1   32[BANK0 ] unsigned char 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      void 
  7181 ;; Registers used:
  7182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7188 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7191 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;Total ram usage:       17 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:   10
  7195 ;; This function calls:
  7196 ;;		_LCD_Word_Write
  7197 ;;		_Set_Addr_Window
  7198 ;;		___wmul
  7199 ;; This function is called by:
  7200 ;;		_Console_Render
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           	psect	text17
  7205  01462E                     __ptext17:
  7206                           	opt stack 0
  7207  01462E                     _LCD_DrawField:
  7208                           	opt stack 18
  7209                           
  7210                           ;LCD.c: 396: UINT8 i = 0x00;
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;incstack = 0
  7214  01462E  0E00               	movlw	0
  7215  014630  0100               	movlb	0	; () banked
  7216  014632  6F82               	movwf	LCD_DrawField@i& (0+255),b
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
  7220  014634  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  7221  014636  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
  7222  014638  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
  7226  01463A  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
  7227  01463C  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
  7228  01463E  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
  7232  014640  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
  7233  014644  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
  7234  014648  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
  7235  01464C  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
  7236  014650  ECD6  F0AB         	call	___wmul	;wreg free
  7237  014654  C060  F07E         	movff	?___wmul,LCD_DrawField@count
  7238  014658  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
  7239                           
  7240                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
  7241  01465C  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
  7242  014660  0100               	movlb	0	; () banked
  7243  014662  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
  7244  014664  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  7245  014666  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
  7246  014668  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  7247  01466A  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  7248  01466C  EC54  F0A0         	call	_Set_Addr_Window
  7249                           
  7250                           ;LCD.c: 403: for(i = 0; i < count; i++)
  7251  014670  0E00               	movlw	0
  7252  014672  0100               	movlb	0	; () banked
  7253  014674  6F82               	movwf	LCD_DrawField@i& (0+255),b
  7254  014676  D010               	goto	l183
  7255  014678                     
  7256                           ; BSR set to: 0
  7257                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
  7258                           
  7259                           ; BSR set to: 0
  7260  014678  5182               	movf	LCD_DrawField@i& (0+255),w,b
  7261  01467A  0D02               	mullw	2
  7262  01467C  50F3               	movf	prodl,w,c
  7263  01467E  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
  7264  014680  6ED9               	movwf	fsr2l,c
  7265  014682  50F4               	movf	prodh,w,c
  7266  014684  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
  7267  014686  6EDA               	movwf	fsr2h,c
  7268  014688  CFDE F065          	movff	postinc2,LCD_Word_Write@value
  7269  01468C  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
  7270  014690  ECC4  F0AC         	call	_LCD_Word_Write	;wreg free
  7271  014694  0100               	movlb	0	; () banked
  7272  014696  2B82               	incf	LCD_DrawField@i& (0+255),f,b
  7273  014698                     l183:
  7274                           
  7275                           ; BSR set to: 0
  7276                           
  7277                           ; BSR set to: 0
  7278  014698  5182               	movf	LCD_DrawField@i& (0+255),w,b
  7279  01469A  6F7C               	movwf	??_LCD_DrawField& (0+255),b
  7280  01469C  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
  7281  01469E  517E               	movf	LCD_DrawField@count& (0+255),w,b
  7282  0146A0  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
  7283  0146A2  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
  7284  0146A4  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
  7285  0146A6  B0D8               	btfsc	status,0,c
  7286  0146A8  0012               	return	
  7287  0146AA  D7E6               	goto	l184
  7288  0146AC                     __end_of_LCD_DrawField:
  7289                           	opt stack 0
  7290                           tosu	equ	0xFFF
  7291                           tosh	equ	0xFFE
  7292                           tosl	equ	0xFFD
  7293                           pclath	equ	0xFFA
  7294                           tblptru	equ	0xFF8
  7295                           tblptrh	equ	0xFF7
  7296                           tblptrl	equ	0xFF6
  7297                           tablat	equ	0xFF5
  7298                           prodh	equ	0xFF4
  7299                           prodl	equ	0xFF3
  7300                           postinc0	equ	0xFEE
  7301                           wreg	equ	0xFE8
  7302                           postdec1	equ	0xFE5
  7303                           fsr1h	equ	0xFE2
  7304                           fsr1l	equ	0xFE1
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           fsr2h	equ	0xFDA
  7309                           fsr2l	equ	0xFD9
  7310                           status	equ	0xFD8
  7311                           
  7312 ;; *************** function ___wmul *****************
  7313 ;; Defined at:
  7314 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7317 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  product         2    4[BANK0 ] unsigned int 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  2    0[BANK0 ] unsigned int 
  7322 ;; Registers used:
  7323 ;;		wreg, status,2, status,0, prodl, prodh
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7329 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;Total ram usage:        6 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    7
  7336 ;; This function calls:
  7337 ;;		Nothing
  7338 ;; This function is called by:
  7339 ;;		_LCD_DrawField
  7340 ;;		_Travel
  7341 ;;		_Create_Maze
  7342 ;;		_Init_Pos_Array
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           	psect	text18
  7347  0157AC                     __ptext18:
  7348                           	opt stack 0
  7349  0157AC                     ___wmul:
  7350                           	opt stack 22
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;incstack = 0
  7354  0157AC  0100               	movlb	0	; () banked
  7355  0157AE  5160               	movf	___wmul@multiplier& (0+255),w,b
  7356  0157B0  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7357  0157B2  CFF3 F064          	movff	prodl,___wmul@product
  7358  0157B6  CFF4 F065          	movff	prodh,___wmul@product+1
  7359  0157BA  5160               	movf	___wmul@multiplier& (0+255),w,b
  7360  0157BC  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7361  0157BE  50F3               	movf	prodl,w,c
  7362  0157C0  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7363  0157C2  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7364  0157C4  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7365  0157C6  50F3               	movf	prodl,w,c
  7366  0157C8  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7367                           
  7368                           ; BSR set to: 0
  7369  0157CA  C064  F060         	movff	___wmul@product,?___wmul
  7370  0157CE  C065  F061         	movff	___wmul@product+1,?___wmul+1
  7371  0157D2  0012               	return	
  7372  0157D4                     __end_of___wmul:
  7373                           	opt stack 0
  7374                           tosu	equ	0xFFF
  7375                           tosh	equ	0xFFE
  7376                           tosl	equ	0xFFD
  7377                           pclath	equ	0xFFA
  7378                           tblptru	equ	0xFF8
  7379                           tblptrh	equ	0xFF7
  7380                           tblptrl	equ	0xFF6
  7381                           tablat	equ	0xFF5
  7382                           prodh	equ	0xFF4
  7383                           prodl	equ	0xFF3
  7384                           postinc0	equ	0xFEE
  7385                           wreg	equ	0xFE8
  7386                           postdec1	equ	0xFE5
  7387                           fsr1h	equ	0xFE2
  7388                           fsr1l	equ	0xFE1
  7389                           indf2	equ	0xFDF
  7390                           postinc2	equ	0xFDE
  7391                           postdec2	equ	0xFDD
  7392                           fsr2h	equ	0xFDA
  7393                           fsr2l	equ	0xFD9
  7394                           status	equ	0xFD8
  7395                           
  7396 ;; *************** function _Console_MakeField *****************
  7397 ;; Defined at:
  7398 ;;		line 435 in file "Library/Console.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;  pInput          1    wreg     unsigned char 
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;  pInput          1   11[BANK0 ] unsigned char 
  7403 ;;  y               1   17[BANK0 ] unsigned char 
  7404 ;;  x               1   16[BANK0 ] unsigned char 
  7405 ;;  Column          2   12[BANK0 ] PTR struct Byte
  7406 ;;		 -> Font5x7(480), 
  7407 ;;  Index           2    9[BANK0 ] unsigned short 
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  2    5[BANK0 ] PTR unsigned short 
  7410 ;; Registers used:
  7411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7417 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;Total ram usage:       13 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    8
  7424 ;; This function calls:
  7425 ;;		_Byte_GetBit
  7426 ;; This function is called by:
  7427 ;;		_Console_Render
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           	psect	text19
  7432  013EC8                     __ptext19:
  7433                           	opt stack 0
  7434  013EC8                     _Console_MakeField:
  7435                           	opt stack 20
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;incstack = 0
  7439                           ;Console_MakeField@pInput stored from wreg
  7440  013EC8  0100               	movlb	0	; () banked
  7441  013ECA  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
  7442                           
  7443                           ;Console.c: 437: static Colour Fill[7][5];
  7444                           ;Console.c: 438: pInput -= 32;
  7445  013ECC  0E20               	movlw	32
  7446  013ECE  0100               	movlb	0	; () banked
  7447  013ED0  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
  7451  013ED2  516B               	movf	Console_MakeField@pInput& (0+255),w,b
  7452  013ED4  0D05               	mullw	5
  7453  013ED6  CFF3 F069          	movff	prodl,Console_MakeField@Index
  7454  013EDA  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
  7458  013EDE  0E05               	movlw	low _Font5x7
  7459  013EE0  2569               	addwf	Console_MakeField@Index& (0+255),w,b
  7460  013EE2  6F6C               	movwf	Console_MakeField@Column& (0+255),b
  7461  013EE4  0EFC               	movlw	high _Font5x7
  7462  013EE6  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
  7463  013EE8  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
  7467  013EEA  0E00               	movlw	0
  7468  013EEC  6F70               	movwf	Console_MakeField@x& (0+255),b
  7469  013EEE                     l14959:
  7470                           
  7471                           ; BSR set to: 0
  7472  013EEE  0E04               	movlw	4
  7473  013EF0  6570               	cpfsgt	Console_MakeField@x& (0+255),b
  7474  013EF2  D001               	goto	l1077
  7475  013EF4  D037               	goto	u12410
  7476  013EF6                     l1077:
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;Console.c: 444: {
  7480                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
  7481                           
  7482                           ; BSR set to: 0
  7483  013EF6  0E00               	movlw	0
  7484  013EF8  6F71               	movwf	Console_MakeField@y& (0+255),b
  7485  013EFA                     l14965:
  7486                           
  7487                           ; BSR set to: 0
  7488  013EFA  0E06               	movlw	6
  7489  013EFC  6571               	cpfsgt	Console_MakeField@y& (0+255),b
  7490  013EFE  D001               	goto	l1079
  7491  013F00  D02D               	goto	u12400
  7492  013F02                     l1079:
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
  7496                           
  7497                           ; BSR set to: 0
  7498  013F02  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
  7499  013F06  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
  7500  013F0A  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
  7501  013F0E  ECC0  F0AB         	call	_Byte_GetBit	;wreg free
  7502  013F12  0900               	iorlw	0
  7503  013F14  A4D8               	btfss	status,2,c
  7504  013F16  D005               	goto	l1082
  7505  013F18  C154  F06E         	movff	_gBackcolour,_Console_MakeField$10974
  7506  013F1C  C155  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
  7507  013F20  D004               	goto	l1084
  7508  013F22                     l1082:
  7509  013F22  C1F5  F06E         	movff	_gForecolour,_Console_MakeField$10974
  7510  013F26  C1F6  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
  7511  013F2A                     l1084:
  7512  013F2A  0100               	movlb	0	; () banked
  7513  013F2C  5171               	movf	Console_MakeField@y& (0+255),w,b
  7514  013F2E  0D0A               	mullw	10
  7515  013F30  0E00               	movlw	low Console_MakeField@Fill
  7516  013F32  6F67               	movwf	??_Console_MakeField& (0+255),b
  7517  013F34  0E03               	movlw	high Console_MakeField@Fill
  7518  013F36  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
  7519  013F38  50F3               	movf	prodl,w,c
  7520  013F3A  2767               	addwf	??_Console_MakeField& (0+255),f,b
  7521  013F3C  50F4               	movf	prodh,w,c
  7522  013F3E  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
  7523  013F40  5170               	movf	Console_MakeField@x& (0+255),w,b
  7524  013F42  0D02               	mullw	2
  7525  013F44  50F3               	movf	prodl,w,c
  7526  013F46  2567               	addwf	??_Console_MakeField& (0+255),w,b
  7527  013F48  6ED9               	movwf	fsr2l,c
  7528  013F4A  50F4               	movf	prodh,w,c
  7529  013F4C  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
  7530  013F4E  6EDA               	movwf	fsr2h,c
  7531  013F50  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
  7532  013F54  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
  7533                           
  7534                           ; BSR set to: 0
  7535  013F58  2B71               	incf	Console_MakeField@y& (0+255),f,b
  7536  013F5A  D7CF               	goto	l14965
  7537  013F5C                     u12400:
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;Console.c: 447: Column += 1;
  7541                           
  7542                           ; BSR set to: 0
  7543  013F5C  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
  7544  013F5E  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
  7545  013F60  2B70               	incf	Console_MakeField@x& (0+255),f,b
  7546  013F62  D7C5               	goto	l14959
  7547  013F64                     u12410:
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;Console.c: 448: }
  7551                           ;Console.c: 449: return (ColourPtr)Fill;
  7552                           
  7553                           ; BSR set to: 0
  7554  013F64  0E00               	movlw	low Console_MakeField@Fill
  7555  013F66  6F65               	movwf	?_Console_MakeField& (0+255),b
  7556  013F68  0E03               	movlw	high Console_MakeField@Fill
  7557  013F6A  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
  7558  013F6C  0012               	return	
  7559  013F6E                     __end_of_Console_MakeField:
  7560                           	opt stack 0
  7561                           tosu	equ	0xFFF
  7562                           tosh	equ	0xFFE
  7563                           tosl	equ	0xFFD
  7564                           pclath	equ	0xFFA
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           postinc0	equ	0xFEE
  7572                           wreg	equ	0xFE8
  7573                           postdec1	equ	0xFE5
  7574                           fsr1h	equ	0xFE2
  7575                           fsr1l	equ	0xFE1
  7576                           indf2	equ	0xFDF
  7577                           postinc2	equ	0xFDE
  7578                           postdec2	equ	0xFDD
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583 ;; *************** function _Byte_GetBit *****************
  7584 ;; Defined at:
  7585 ;;		line 38 in file "Library/Types.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  7588 ;;		 -> Font5x7(480), 
  7589 ;;  pBit            1    2[BANK0 ] unsigned char 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  Output          1    4[BANK0 ] unsigned char 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      unsigned char 
  7594 ;; Registers used:
  7595 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7601 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;Total ram usage:        5 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    7
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		_Console_MakeField
  7612 ;;		_Word_GetBit
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text20
  7617  015780                     __ptext20:
  7618                           	opt stack 0
  7619  015780                     _Byte_GetBit:
  7620                           	opt stack 20
  7621                           
  7622                           ;Types.c: 40: UINT8 Output = pInput->mBits;
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;incstack = 0
  7626  015780  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
  7627  015784  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
  7628  015788                     	if	0	;tblptru may be non-zero
  7629  015788                     	endif
  7630  015788                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7631  015788  0E00               	movlw	low (__mediumconst shr (0+16))
  7632  01578A  6EF8               	movwf	tblptru,c
  7633  01578C                     	endif
  7634  01578C  0008               	tblrd		*
  7635  01578E  CFF5 F064          	movff	tablat,Byte_GetBit@Output
  7636                           
  7637                           ;Types.c: 42: Output >>= pBit;
  7638  015792  0100               	movlb	0	; () banked
  7639  015794  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
  7640  015796  6F63               	movwf	??_Byte_GetBit& (0+255),b
  7641  015798  D002               	goto	u11970
  7642  01579A                     u11975:
  7643  01579A  90D8               	bcf	status,0,c
  7644  01579C  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
  7645  01579E                     u11970:
  7646  01579E  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
  7647  0157A0  D7FC               	goto	u11975
  7648                           
  7649                           ;Types.c: 43: Output &= 1;
  7650  0157A2  0E01               	movlw	1
  7651  0157A4  0100               	movlb	0	; () banked
  7652  0157A6  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;Types.c: 44: return Output;
  7656  0157A8  5164               	movf	Byte_GetBit@Output& (0+255),w,b
  7657  0157AA  0012               	return	
  7658  0157AC                     __end_of_Byte_GetBit:
  7659                           	opt stack 0
  7660                           tosu	equ	0xFFF
  7661                           tosh	equ	0xFFE
  7662                           tosl	equ	0xFFD
  7663                           pclath	equ	0xFFA
  7664                           tblptru	equ	0xFF8
  7665                           tblptrh	equ	0xFF7
  7666                           tblptrl	equ	0xFF6
  7667                           tablat	equ	0xFF5
  7668                           prodh	equ	0xFF4
  7669                           prodl	equ	0xFF3
  7670                           postinc0	equ	0xFEE
  7671                           wreg	equ	0xFE8
  7672                           postdec1	equ	0xFE5
  7673                           fsr1h	equ	0xFE2
  7674                           fsr1l	equ	0xFE1
  7675                           indf2	equ	0xFDF
  7676                           postinc2	equ	0xFDE
  7677                           postdec2	equ	0xFDD
  7678                           fsr2h	equ	0xFDA
  7679                           fsr2l	equ	0xFD9
  7680                           status	equ	0xFD8
  7681                           
  7682 ;; *************** function _ADCAverage *****************
  7683 ;; Defined at:
  7684 ;;		line 49 in file "dans.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;		None
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  2  2000[None  ] int 
  7691 ;; Registers used:
  7692 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7702 ;;Total ram usage:       26 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:   11
  7705 ;; This function calls:
  7706 ;;		_FunctReadADC
  7707 ;;		_HMI_Render
  7708 ;;		_HMI_SetNumber
  7709 ;;		___awdiv
  7710 ;;		___fladd
  7711 ;;		___flmul
  7712 ;;		___flneg
  7713 ;;		___fltol
  7714 ;;		___xxtofl
  7715 ;;		_pow
  7716 ;; This function is called by:
  7717 ;;		_main
  7718 ;;		_Travel
  7719 ;;		_Sensor_Observe
  7720 ;;		_Closest_Object
  7721 ;;		_Find_Flag
  7722 ;; This function uses a non-reentrant model
  7723 ;;
  7724                           
  7725                           	psect	text21
  7726  010F52                     __ptext21:
  7727                           	opt stack 0
  7728  010F52                     _ADCAverage:
  7729                           	opt stack 18
  7730                           
  7731                           ;dans.c: 51: total = total - readings[readIndex];
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;incstack = 0
  7735  010F52  90D8               	bcf	status,0,c
  7736  010F54  3432               	rlcf	_readIndex,w,c
  7737  010F56  6ED9               	movwf	fsr2l,c
  7738  010F58  3433               	rlcf	_readIndex+1,w,c
  7739  010F5A  6EDA               	movwf	fsr2h,c
  7740  010F5C  0E6E               	movlw	low _readings
  7741  010F5E  26D9               	addwf	fsr2l,f,c
  7742  010F60  0E02               	movlw	high _readings
  7743  010F62  22DA               	addwfc	fsr2h,f,c
  7744  010F64  CFDE F0D7          	movff	postinc2,??_ADCAverage
  7745  010F68  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
  7746  010F6C  0100               	movlb	0	; () banked
  7747  010F6E  1FD7               	comf	??_ADCAverage& (0+255),f,b
  7748  010F70  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
  7749  010F72  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
  7750  010F74  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
  7751  010F76  0101               	movlb	1	; () banked
  7752  010F78  5140               	movf	_total& (0+255),w,b
  7753  010F7A  0100               	movlb	0	; () banked
  7754  010F7C  25D7               	addwf	??_ADCAverage& (0+255),w,b
  7755  010F7E  0101               	movlb	1	; () banked
  7756  010F80  6F40               	movwf	_total& (0+255),b
  7757  010F82  5141               	movf	(_total+1)& (0+255),w,b
  7758  010F84  0100               	movlb	0	; () banked
  7759  010F86  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
  7760  010F88  0101               	movlb	1	; () banked
  7761  010F8A  6F41               	movwf	(_total+1)& (0+255),b
  7762                           
  7763                           ; BSR set to: 1
  7764                           ;dans.c: 53: readings[readIndex] = (FunctReadADC(0));
  7765  010F8C  0E00               	movlw	0
  7766  010F8E  0100               	movlb	0	; () banked
  7767  010F90  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
  7768  010F92  0E00               	movlw	0
  7769  010F94  6F60               	movwf	FunctReadADC@channel& (0+255),b
  7770  010F96  EC37  F0AA         	call	_FunctReadADC	;wreg free
  7771  010F9A  90D8               	bcf	status,0,c
  7772  010F9C  3432               	rlcf	_readIndex,w,c
  7773  010F9E  6ED9               	movwf	fsr2l,c
  7774  010FA0  3433               	rlcf	_readIndex+1,w,c
  7775  010FA2  6EDA               	movwf	fsr2h,c
  7776  010FA4  0E6E               	movlw	low _readings
  7777  010FA6  26D9               	addwf	fsr2l,f,c
  7778  010FA8  0E02               	movlw	high _readings
  7779  010FAA  22DA               	addwfc	fsr2h,f,c
  7780  010FAC  0100               	movlb	0	; () banked
  7781  010FAE  C060  FFDE         	movff	?_FunctReadADC,postinc2
  7782  010FB2  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;dans.c: 55: total = total + readings[readIndex];
  7786  010FB6  90D8               	bcf	status,0,c
  7787  010FB8  3432               	rlcf	_readIndex,w,c
  7788  010FBA  6ED9               	movwf	fsr2l,c
  7789  010FBC  3433               	rlcf	_readIndex+1,w,c
  7790  010FBE  6EDA               	movwf	fsr2h,c
  7791  010FC0  0E6E               	movlw	low _readings
  7792  010FC2  26D9               	addwf	fsr2l,f,c
  7793  010FC4  0E02               	movlw	high _readings
  7794  010FC6  22DA               	addwfc	fsr2h,f,c
  7795  010FC8  CFDE F0D7          	movff	postinc2,??_ADCAverage
  7796  010FCC  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
  7797  010FD0  0101               	movlb	1	; () banked
  7798  010FD2  5140               	movf	_total& (0+255),w,b
  7799  010FD4  0100               	movlb	0	; () banked
  7800  010FD6  25D7               	addwf	??_ADCAverage& (0+255),w,b
  7801  010FD8  0101               	movlb	1	; () banked
  7802  010FDA  6F40               	movwf	_total& (0+255),b
  7803  010FDC  5141               	movf	(_total+1)& (0+255),w,b
  7804  010FDE  0100               	movlb	0	; () banked
  7805  010FE0  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
  7806  010FE2  0101               	movlb	1	; () banked
  7807  010FE4  6F41               	movwf	(_total+1)& (0+255),b
  7808                           
  7809                           ; BSR set to: 1
  7810                           ;dans.c: 57: readIndex++;
  7811  010FE6  4A32               	infsnz	_readIndex,f,c
  7812  010FE8  2A33               	incf	_readIndex+1,f,c
  7813                           
  7814                           ; BSR set to: 1
  7815                           ;dans.c: 60: if (readIndex >= numReadings) {
  7816  010FEA  51F1               	movf	_numReadings& (0+255),w,b
  7817  010FEC  5C32               	subwf	_readIndex,w,c
  7818  010FEE  5033               	movf	_readIndex+1,w,c
  7819  010FF0  0A80               	xorlw	128
  7820  010FF2  0100               	movlb	0	; () banked
  7821  010FF4  6FD7               	movwf	??_ADCAverage& (0+255),b
  7822  010FF6  0101               	movlb	1	; () banked
  7823  010FF8  51F2               	movf	(_numReadings+1)& (0+255),w,b
  7824  010FFA  0A80               	xorlw	128
  7825  010FFC  0100               	movlb	0	; () banked
  7826  010FFE  59D7               	subwfb	??_ADCAverage& (0+255),w,b
  7827  011000  A0D8               	btfss	status,0,c
  7828  011002  D004               	goto	l2334
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;dans.c: 62: readIndex = 0;
  7832  011004  0E00               	movlw	0
  7833  011006  6E33               	movwf	_readIndex+1,c
  7834  011008  0E00               	movlw	0
  7835  01100A  6E32               	movwf	_readIndex,c
  7836  01100C                     l2334:
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;dans.c: 63: }
  7840                           ;dans.c: 66: average = total / numReadings;
  7841                           
  7842                           ; BSR set to: 0
  7843  01100C  C140  F060         	movff	_total,___awdiv@dividend
  7844  011010  C141  F061         	movff	_total+1,___awdiv@dividend+1
  7845  011014  C1F1  F062         	movff	_numReadings,___awdiv@divisor
  7846  011018  C1F2  F063         	movff	_numReadings+1,___awdiv@divisor+1
  7847  01101C  EC92  F0A2         	call	___awdiv	;wreg free
  7848  011020  C060  F13E         	movff	?___awdiv,_average
  7849  011024  C061  F13F         	movff	?___awdiv+1,_average+1
  7850                           
  7851                           ;dans.c: 67: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7852  011028  C13E  F060         	movff	_average,___xxtofl@val
  7853  01102C  C13F  F061         	movff	_average+1,___xxtofl@val+1
  7854  011030  0100               	movlb	0	; () banked
  7855  011032  0E00               	movlw	0
  7856  011034  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  7857  011036  0EFF               	movlw	-1
  7858  011038  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  7859  01103A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  7860  01103C  0E01               	movlw	1
  7861  01103E  ECAC  F096         	call	___xxtofl
  7862  011042  C060  F0D9         	movff	?___xxtofl,_ADCAverage$15832
  7863  011046  C061  F0DA         	movff	?___xxtofl+1,_ADCAverage$15832+1
  7864  01104A  C062  F0DB         	movff	?___xxtofl+2,_ADCAverage$15832+2
  7865  01104E  C063  F0DC         	movff	?___xxtofl+3,_ADCAverage$15832+3
  7866                           
  7867                           ;dans.c: 67: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7868  011052  0E00               	movlw	0
  7869  011054  0100               	movlb	0	; () banked
  7870  011056  6FC6               	movwf	pow@y& (0+255),b
  7871  011058  0E00               	movlw	0
  7872  01105A  6FC7               	movwf	(pow@y+1)& (0+255),b
  7873  01105C  0E00               	movlw	0
  7874  01105E  6FC8               	movwf	(pow@y+2)& (0+255),b
  7875  011060  0E40               	movlw	64
  7876  011062  6FC9               	movwf	(pow@y+3)& (0+255),b
  7877  011064  C0D9  F0C2         	movff	_ADCAverage$15832,pow@x
  7878  011068  C0DA  F0C3         	movff	_ADCAverage$15832+1,pow@x+1
  7879  01106C  C0DB  F0C4         	movff	_ADCAverage$15832+2,pow@x+2
  7880  011070  C0DC  F0C5         	movff	_ADCAverage$15832+3,pow@x+3
  7881  011074  EC49  F090         	call	_pow	;wreg free
  7882  011078  C0C2  F0DD         	movff	?_pow,_ADCAverage$15833
  7883  01107C  C0C3  F0DE         	movff	?_pow+1,_ADCAverage$15833+1
  7884  011080  C0C4  F0DF         	movff	?_pow+2,_ADCAverage$15833+2
  7885  011084  C0C5  F0E0         	movff	?_pow+3,_ADCAverage$15833+3
  7886                           
  7887                           ;dans.c: 67: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7888  011088  C13E  F060         	movff	_average,___xxtofl@val
  7889  01108C  C13F  F061         	movff	_average+1,___xxtofl@val+1
  7890  011090  0100               	movlb	0	; () banked
  7891  011092  0E00               	movlw	0
  7892  011094  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  7893  011096  0EFF               	movlw	-1
  7894  011098  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  7895  01109A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  7896  01109C  0E01               	movlw	1
  7897  01109E  ECAC  F096         	call	___xxtofl
  7898  0110A2  C060  F0E1         	movff	?___xxtofl,_ADCAverage$15834
  7899  0110A6  C061  F0E2         	movff	?___xxtofl+1,_ADCAverage$15834+1
  7900  0110AA  C062  F0E3         	movff	?___xxtofl+2,_ADCAverage$15834+2
  7901  0110AE  C063  F0E4         	movff	?___xxtofl+3,_ADCAverage$15834+3
  7902                           
  7903                           ;dans.c: 67: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7904  0110B2  0E00               	movlw	0
  7905  0110B4  0100               	movlb	0	; () banked
  7906  0110B6  6FC6               	movwf	pow@y& (0+255),b
  7907  0110B8  0E00               	movlw	0
  7908  0110BA  6FC7               	movwf	(pow@y+1)& (0+255),b
  7909  0110BC  0E40               	movlw	64
  7910  0110BE  6FC8               	movwf	(pow@y+2)& (0+255),b
  7911  0110C0  0E40               	movlw	64
  7912  0110C2  6FC9               	movwf	(pow@y+3)& (0+255),b
  7913  0110C4  C0E1  F0C2         	movff	_ADCAverage$15834,pow@x
  7914  0110C8  C0E2  F0C3         	movff	_ADCAverage$15834+1,pow@x+1
  7915  0110CC  C0E3  F0C4         	movff	_ADCAverage$15834+2,pow@x+2
  7916  0110D0  C0E4  F0C5         	movff	_ADCAverage$15834+3,pow@x+3
  7917  0110D4  EC49  F090         	call	_pow	;wreg free
  7918  0110D8  C0C2  F0E5         	movff	?_pow,_ADCAverage$15835
  7919  0110DC  C0C3  F0E6         	movff	?_pow+1,_ADCAverage$15835+1
  7920  0110E0  C0C4  F0E7         	movff	?_pow+2,_ADCAverage$15835+2
  7921  0110E4  C0C5  F0E8         	movff	?_pow+3,_ADCAverage$15835+3
  7922                           
  7923                           ;dans.c: 67: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7924  0110E8  0EA6               	movlw	166
  7925  0110EA  0100               	movlb	0	; () banked
  7926  0110EC  6F72               	movwf	___flmul@a& (0+255),b
  7927  0110EE  0E9B               	movlw	155
  7928  0110F0  6F73               	movwf	(___flmul@a+1)& (0+255),b
  7929  0110F2  0EC4               	movlw	196
  7930  0110F4  6F74               	movwf	(___flmul@a+2)& (0+255),b
  7931  0110F6  0E3A               	movlw	58
  7932  0110F8  6F75               	movwf	(___flmul@a+3)& (0+255),b
  7933  0110FA  C0DD  F06E         	movff	_ADCAverage$15833,___flmul@b
  7934  0110FE  C0DE  F06F         	movff	_ADCAverage$15833+1,___flmul@b+1
  7935  011102  C0DF  F070         	movff	_ADCAverage$15833+2,___flmul@b+2
  7936  011106  C0E0  F071         	movff	_ADCAverage$15833+3,___flmul@b+3
  7937  01110A  EC61  F084         	call	___flmul	;wreg free
  7938  01110E  C06E  F08F         	movff	?___flmul,___fladd@a
  7939  011112  C06F  F090         	movff	?___flmul+1,___fladd@a+1
  7940  011116  C070  F091         	movff	?___flmul+2,___fladd@a+2
  7941  01111A  C071  F092         	movff	?___flmul+3,___fladd@a+3
  7942  01111E  0E87               	movlw	135
  7943  011120  0100               	movlb	0	; () banked
  7944  011122  6F72               	movwf	___flmul@a& (0+255),b
  7945  011124  0E97               	movlw	151
  7946  011126  6F73               	movwf	(___flmul@a+1)& (0+255),b
  7947  011128  0E71               	movlw	113
  7948  01112A  6F74               	movwf	(___flmul@a+2)& (0+255),b
  7949  01112C  0EB5               	movlw	181
  7950  01112E  6F75               	movwf	(___flmul@a+3)& (0+255),b
  7951  011130  C0E5  F06E         	movff	_ADCAverage$15835,___flmul@b
  7952  011134  C0E6  F06F         	movff	_ADCAverage$15835+1,___flmul@b+1
  7953  011138  C0E7  F070         	movff	_ADCAverage$15835+2,___flmul@b+2
  7954  01113C  C0E8  F071         	movff	_ADCAverage$15835+3,___flmul@b+3
  7955  011140  EC61  F084         	call	___flmul	;wreg free
  7956  011144  C06E  F08B         	movff	?___flmul,___fladd@b
  7957  011148  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
  7958  01114C  C070  F08D         	movff	?___flmul+2,___fladd@b+2
  7959  011150  C071  F08E         	movff	?___flmul+3,___fladd@b+3
  7960  011154  EC0A  F086         	call	___fladd	;wreg free
  7961  011158  C08B  F0E9         	movff	?___fladd,_ADCAverage$15836
  7962  01115C  C08C  F0EA         	movff	?___fladd+1,_ADCAverage$15836+1
  7963  011160  C08D  F0EB         	movff	?___fladd+2,_ADCAverage$15836+2
  7964  011164  C08E  F0EC         	movff	?___fladd+3,_ADCAverage$15836+3
  7965                           
  7966                           ;dans.c: 67: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7967  011168  0E8C               	movlw	140
  7968  01116A  0100               	movlb	0	; () banked
  7969  01116C  6F72               	movwf	___flmul@a& (0+255),b
  7970  01116E  0EB9               	movlw	185
  7971  011170  6F73               	movwf	(___flmul@a+1)& (0+255),b
  7972  011172  0E6B               	movlw	107
  7973  011174  6F74               	movwf	(___flmul@a+2)& (0+255),b
  7974  011176  0E3F               	movlw	63
  7975  011178  6F75               	movwf	(___flmul@a+3)& (0+255),b
  7976  01117A  C13E  F060         	movff	_average,___xxtofl@val
  7977  01117E  C13F  F061         	movff	_average+1,___xxtofl@val+1
  7978  011182  0E00               	movlw	0
  7979  011184  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  7980  011186  0EFF               	movlw	-1
  7981  011188  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  7982  01118A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  7983  01118C  0E01               	movlw	1
  7984  01118E  ECAC  F096         	call	___xxtofl
  7985  011192  C060  F06E         	movff	?___xxtofl,___flmul@b
  7986  011196  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
  7987  01119A  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
  7988  01119E  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
  7989  0111A2  EC61  F084         	call	___flmul	;wreg free
  7990  0111A6  C06E  F087         	movff	?___flmul,___flneg@f1
  7991  0111AA  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
  7992  0111AE  C070  F089         	movff	?___flmul+2,___flneg@f1+2
  7993  0111B2  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
  7994  0111B6  EC49  F0AB         	call	___flneg	;wreg free
  7995  0111BA  C087  F08F         	movff	?___flneg,___fladd@a
  7996  0111BE  C088  F090         	movff	?___flneg+1,___fladd@a+1
  7997  0111C2  C089  F091         	movff	?___flneg+2,___fladd@a+2
  7998  0111C6  C08A  F092         	movff	?___flneg+3,___fladd@a+3
  7999  0111CA  C0E9  F08B         	movff	_ADCAverage$15836,___fladd@b
  8000  0111CE  C0EA  F08C         	movff	_ADCAverage$15836+1,___fladd@b+1
  8001  0111D2  C0EB  F08D         	movff	_ADCAverage$15836+2,___fladd@b+2
  8002  0111D6  C0EC  F08E         	movff	_ADCAverage$15836+3,___fladd@b+3
  8003  0111DA  EC0A  F086         	call	___fladd	;wreg free
  8004  0111DE  C08B  F0ED         	movff	?___fladd,_ADCAverage$15837
  8005  0111E2  C08C  F0EE         	movff	?___fladd+1,_ADCAverage$15837+1
  8006  0111E6  C08D  F0EF         	movff	?___fladd+2,_ADCAverage$15837+2
  8007  0111EA  C08E  F0F0         	movff	?___fladd+3,_ADCAverage$15837+3
  8008                           
  8009                           ;dans.c: 67: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  8010  0111EE  0E7B               	movlw	123
  8011  0111F0  0100               	movlb	0	; () banked
  8012  0111F2  6F8F               	movwf	___fladd@a& (0+255),b
  8013  0111F4  0E54               	movlw	84
  8014  0111F6  6F90               	movwf	(___fladd@a+1)& (0+255),b
  8015  0111F8  0E63               	movlw	99
  8016  0111FA  6F91               	movwf	(___fladd@a+2)& (0+255),b
  8017  0111FC  0E43               	movlw	67
  8018  0111FE  6F92               	movwf	(___fladd@a+3)& (0+255),b
  8019  011200  C0ED  F08B         	movff	_ADCAverage$15837,___fladd@b
  8020  011204  C0EE  F08C         	movff	_ADCAverage$15837+1,___fladd@b+1
  8021  011208  C0EF  F08D         	movff	_ADCAverage$15837+2,___fladd@b+2
  8022  01120C  C0F0  F08E         	movff	_ADCAverage$15837+3,___fladd@b+3
  8023  011210  EC0A  F086         	call	___fladd	;wreg free
  8024  011214  C08B  F09F         	movff	?___fladd,___fltol@f1
  8025  011218  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
  8026  01121C  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
  8027  011220  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
  8028  011224  EC8F  F09D         	call	___fltol	;wreg free
  8029  011228  C09F  F13E         	movff	?___fltol,_average
  8030  01122C  C0A0  F13F         	movff	?___fltol+1,_average+1
  8031                           
  8032                           ;dans.c: 70: HMI_SetNumber(average);
  8033  011230  C13E  F076         	movff	_average,HMI_SetNumber@pInput
  8034  011234  C13F  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  8035  011238  EC25  F0AC         	call	_HMI_SetNumber	;wreg free
  8036                           
  8037                           ;dans.c: 71: HMI_Render();
  8038  01123C  ECC8  F0AA         	call	_HMI_Render	;wreg free
  8039  011240  0012               	return	
  8040  011242                     __end_of_ADCAverage:
  8041                           	opt stack 0
  8042                           tosu	equ	0xFFF
  8043                           tosh	equ	0xFFE
  8044                           tosl	equ	0xFFD
  8045                           pclath	equ	0xFFA
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           prodh	equ	0xFF4
  8051                           prodl	equ	0xFF3
  8052                           postinc0	equ	0xFEE
  8053                           wreg	equ	0xFE8
  8054                           postdec1	equ	0xFE5
  8055                           fsr1h	equ	0xFE2
  8056                           fsr1l	equ	0xFE1
  8057                           indf2	equ	0xFDF
  8058                           postinc2	equ	0xFDE
  8059                           postdec2	equ	0xFDD
  8060                           fsr2h	equ	0xFDA
  8061                           fsr2l	equ	0xFD9
  8062                           status	equ	0xFD8
  8063                           
  8064 ;; *************** function _pow *****************
  8065 ;; Defined at:
  8066 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;  x               4   98[BANK0 ] int 
  8069 ;;  y               4  102[BANK0 ] int 
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  yi              4  115[BANK0 ] unsigned long 
  8072 ;;  sign            1  114[BANK0 ] unsigned char 
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  4   98[BANK0 ] unsigned char 
  8075 ;; Registers used:
  8076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8082 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;Total ram usage:       21 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:   10
  8089 ;; This function calls:
  8090 ;;		___flge
  8091 ;;		___flmul
  8092 ;;		___flneg
  8093 ;;		___fltol
  8094 ;;		___xxtofl
  8095 ;;		_exp
  8096 ;;		_log
  8097 ;; This function is called by:
  8098 ;;		_ADCAverage
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text22
  8103  012092                     __ptext22:
  8104                           	opt stack 0
  8105  012092                     _pow:
  8106                           	opt stack 18
  8107                           
  8108                           ;incstack = 0
  8109  012092  0E00               	movlw	0
  8110  012094  0100               	movlb	0	; () banked
  8111  012096  6FD2               	movwf	pow@sign& (0+255),b
  8112                           
  8113                           ; BSR set to: 0
  8114  012098  51C2               	movf	pow@x& (0+255),w,b
  8115  01209A  11C3               	iorwf	(pow@x+1)& (0+255),w,b
  8116  01209C  11C4               	iorwf	(pow@x+2)& (0+255),w,b
  8117  01209E  11C5               	iorwf	(pow@x+3)& (0+255),w,b
  8118  0120A0  A4D8               	btfss	status,2,c
  8119  0120A2  D024               	goto	l2938
  8120                           
  8121                           ; BSR set to: 0
  8122  0120A4  0E00               	movlw	0
  8123  0120A6  6F60               	movwf	___flge@ff1& (0+255),b
  8124  0120A8  0E00               	movlw	0
  8125  0120AA  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  8126  0120AC  0E00               	movlw	0
  8127  0120AE  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  8128  0120B0  0E00               	movlw	0
  8129  0120B2  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  8130  0120B4  C0C6  F064         	movff	pow@y,___flge@ff2
  8131  0120B8  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
  8132  0120BC  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
  8133  0120C0  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
  8134  0120C4  EC7A  F09A         	call	___flge	;wreg free
  8135  0120C8  0100               	movlb	0	; () banked
  8136  0120CA  A0D8               	btfss	status,0,c
  8137  0120CC  D005               	goto	l2939
  8138                           
  8139                           ; BSR set to: 0
  8140  0120CE  0E00               	movlw	0
  8141  0120D0  0101               	movlb	1	; () banked
  8142  0120D2  6F1B               	movwf	(_errno+1)& (0+255),b
  8143  0120D4  0E21               	movlw	33
  8144  0120D6  6F1A               	movwf	_errno& (0+255),b
  8145  0120D8                     l2939:
  8146  0120D8  0E00               	movlw	0
  8147  0120DA  0100               	movlb	0	; () banked
  8148  0120DC  6FC2               	movwf	?_pow& (0+255),b
  8149  0120DE  0E00               	movlw	0
  8150  0120E0  6FC3               	movwf	(?_pow+1)& (0+255),b
  8151  0120E2  0E00               	movlw	0
  8152  0120E4  6FC4               	movwf	(?_pow+2)& (0+255),b
  8153  0120E6  0E00               	movlw	0
  8154  0120E8  6FC5               	movwf	(?_pow+3)& (0+255),b
  8155                           
  8156                           ; BSR set to: 0
  8157  0120EA  0012               	return	
  8158  0120EC                     l2938:
  8159                           
  8160                           ; BSR set to: 0
  8161                           
  8162                           ; BSR set to: 0
  8163  0120EC  51C6               	movf	pow@y& (0+255),w,b
  8164  0120EE  11C7               	iorwf	(pow@y+1)& (0+255),w,b
  8165  0120F0  11C8               	iorwf	(pow@y+2)& (0+255),w,b
  8166  0120F2  11C9               	iorwf	(pow@y+3)& (0+255),w,b
  8167  0120F4  A4D8               	btfss	status,2,c
  8168  0120F6  D009               	goto	l2941
  8169                           
  8170                           ; BSR set to: 0
  8171  0120F8  0E00               	movlw	0
  8172  0120FA  6FC2               	movwf	?_pow& (0+255),b
  8173  0120FC  0E00               	movlw	0
  8174  0120FE  6FC3               	movwf	(?_pow+1)& (0+255),b
  8175  012100  0E80               	movlw	128
  8176  012102  6FC4               	movwf	(?_pow+2)& (0+255),b
  8177  012104  0E3F               	movlw	63
  8178  012106  6FC5               	movwf	(?_pow+3)& (0+255),b
  8179                           
  8180                           ; BSR set to: 0
  8181  012108  0012               	return	
  8182  01210A                     l2941:
  8183                           
  8184                           ; BSR set to: 0
  8185                           
  8186                           ; BSR set to: 0
  8187  01210A  AFC5               	btfss	(pow@x+3)& (0+255),7,b
  8188  01210C  D04F               	goto	l2942
  8189                           
  8190                           ; BSR set to: 0
  8191  01210E  C0C6  F09F         	movff	pow@y,___fltol@f1
  8192  012112  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
  8193  012116  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
  8194  01211A  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
  8195  01211E  EC8F  F09D         	call	___fltol	;wreg free
  8196  012122  C09F  F0D3         	movff	?___fltol,pow@yi
  8197  012126  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
  8198  01212A  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
  8199  01212E  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
  8200  012132  C0D3  F060         	movff	pow@yi,___xxtofl@val
  8201  012136  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
  8202  01213A  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
  8203  01213E  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
  8204  012142  0E00               	movlw	0
  8205  012144  ECAC  F096         	call	___xxtofl
  8206  012148  0100               	movlb	0	; () banked
  8207  01214A  51C6               	movf	pow@y& (0+255),w,b
  8208  01214C  1960               	xorwf	?___xxtofl& (0+255),w,b
  8209  01214E  E10A               	bnz	u12540
  8210  012150  51C7               	movf	(pow@y+1)& (0+255),w,b
  8211  012152  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
  8212  012154  E107               	bnz	u12540
  8213  012156  51C8               	movf	(pow@y+2)& (0+255),w,b
  8214  012158  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
  8215  01215A  E104               	bnz	u12540
  8216  01215C  51C9               	movf	(pow@y+3)& (0+255),w,b
  8217  01215E  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
  8218  012160  B4D8               	btfsc	status,2,c
  8219  012162  D00F               	goto	l2943
  8220  012164                     u12540:
  8221                           
  8222                           ; BSR set to: 0
  8223  012164  0E00               	movlw	0
  8224  012166  0101               	movlb	1	; () banked
  8225  012168  6F1B               	movwf	(_errno+1)& (0+255),b
  8226  01216A  0E21               	movlw	33
  8227  01216C  6F1A               	movwf	_errno& (0+255),b
  8228  01216E  0E00               	movlw	0
  8229  012170  0100               	movlb	0	; () banked
  8230  012172  6FC2               	movwf	?_pow& (0+255),b
  8231  012174  0E00               	movlw	0
  8232  012176  6FC3               	movwf	(?_pow+1)& (0+255),b
  8233  012178  0E00               	movlw	0
  8234  01217A  6FC4               	movwf	(?_pow+2)& (0+255),b
  8235  01217C  0E00               	movlw	0
  8236  01217E  6FC5               	movwf	(?_pow+3)& (0+255),b
  8237                           
  8238                           ; BSR set to: 0
  8239  012180  0012               	return	
  8240  012182                     l2943:
  8241                           
  8242                           ; BSR set to: 0
  8243                           
  8244                           ; BSR set to: 0
  8245  012182  51D3               	movf	pow@yi& (0+255),w,b
  8246  012184  0B01               	andlw	1
  8247  012186  6FD2               	movwf	pow@sign& (0+255),b
  8248                           
  8249                           ; BSR set to: 0
  8250  012188  C0C2  F087         	movff	pow@x,___flneg@f1
  8251  01218C  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
  8252  012190  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
  8253  012194  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
  8254  012198  EC49  F0AB         	call	___flneg	;wreg free
  8255  01219C  C087  F0C2         	movff	?___flneg,pow@x
  8256  0121A0  C088  F0C3         	movff	?___flneg+1,pow@x+1
  8257  0121A4  C089  F0C4         	movff	?___flneg+2,pow@x+2
  8258  0121A8  C08A  F0C5         	movff	?___flneg+3,pow@x+3
  8259  0121AC                     l2942:
  8260  0121AC  C0C2  F0AF         	movff	pow@x,log@x
  8261  0121B0  C0C3  F0B0         	movff	pow@x+1,log@x+1
  8262  0121B4  C0C4  F0B1         	movff	pow@x+2,log@x+2
  8263  0121B8  C0C5  F0B2         	movff	pow@x+3,log@x+3
  8264  0121BC  EC84  F094         	call	_log	;wreg free
  8265  0121C0  C0AF  F0CA         	movff	?_log,_pow$15838
  8266  0121C4  C0B0  F0CB         	movff	?_log+1,_pow$15838+1
  8267  0121C8  C0B1  F0CC         	movff	?_log+2,_pow$15838+2
  8268  0121CC  C0B2  F0CD         	movff	?_log+3,_pow$15838+3
  8269  0121D0  C0CA  F06E         	movff	_pow$15838,___flmul@b
  8270  0121D4  C0CB  F06F         	movff	_pow$15838+1,___flmul@b+1
  8271  0121D8  C0CC  F070         	movff	_pow$15838+2,___flmul@b+2
  8272  0121DC  C0CD  F071         	movff	_pow$15838+3,___flmul@b+3
  8273  0121E0  C0C6  F072         	movff	pow@y,___flmul@a
  8274  0121E4  C0C7  F073         	movff	pow@y+1,___flmul@a+1
  8275  0121E8  C0C8  F074         	movff	pow@y+2,___flmul@a+2
  8276  0121EC  C0C9  F075         	movff	pow@y+3,___flmul@a+3
  8277  0121F0  EC61  F084         	call	___flmul	;wreg free
  8278  0121F4  C06E  F0CE         	movff	?___flmul,_pow$15839
  8279  0121F8  C06F  F0CF         	movff	?___flmul+1,_pow$15839+1
  8280  0121FC  C070  F0D0         	movff	?___flmul+2,_pow$15839+2
  8281  012200  C071  F0D1         	movff	?___flmul+3,_pow$15839+3
  8282  012204  C0CE  F0B7         	movff	_pow$15839,exp@x
  8283  012208  C0CF  F0B8         	movff	_pow$15839+1,exp@x+1
  8284  01220C  C0D0  F0B9         	movff	_pow$15839+2,exp@x+2
  8285  012210  C0D1  F0BA         	movff	_pow$15839+3,exp@x+3
  8286  012214  EC13  F08D         	call	_exp	;wreg free
  8287  012218  C0B7  F0C2         	movff	?_exp,pow@x
  8288  01221C  C0B8  F0C3         	movff	?_exp+1,pow@x+1
  8289  012220  C0B9  F0C4         	movff	?_exp+2,pow@x+2
  8290  012224  C0BA  F0C5         	movff	?_exp+3,pow@x+3
  8291  012228  0100               	movlb	0	; () banked
  8292  01222A  51D2               	movf	pow@sign& (0+255),w,b
  8293  01222C  B4D8               	btfsc	status,2,c
  8294  01222E  D013               	goto	l2944
  8295                           
  8296                           ; BSR set to: 0
  8297  012230  C0C2  F087         	movff	pow@x,___flneg@f1
  8298  012234  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
  8299  012238  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
  8300  01223C  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
  8301  012240  EC49  F0AB         	call	___flneg	;wreg free
  8302  012244  C087  F0C2         	movff	?___flneg,?_pow
  8303  012248  C088  F0C3         	movff	?___flneg+1,?_pow+1
  8304  01224C  C089  F0C4         	movff	?___flneg+2,?_pow+2
  8305  012250  C08A  F0C5         	movff	?___flneg+3,?_pow+3
  8306  012254  0012               	return	
  8307  012256                     l2944:
  8308                           
  8309                           ; BSR set to: 0
  8310  012256  C0C2  F0C2         	movff	pow@x,?_pow
  8311  01225A  C0C3  F0C3         	movff	pow@x+1,?_pow+1
  8312  01225E  C0C4  F0C4         	movff	pow@x+2,?_pow+2
  8313  012262  C0C5  F0C5         	movff	pow@x+3,?_pow+3
  8314  012266  0012               	return		;funcret
  8315  012268                     __end_of_pow:
  8316                           	opt stack 0
  8317                           tosu	equ	0xFFF
  8318                           tosh	equ	0xFFE
  8319                           tosl	equ	0xFFD
  8320                           pclath	equ	0xFFA
  8321                           tblptru	equ	0xFF8
  8322                           tblptrh	equ	0xFF7
  8323                           tblptrl	equ	0xFF6
  8324                           tablat	equ	0xFF5
  8325                           prodh	equ	0xFF4
  8326                           prodl	equ	0xFF3
  8327                           postinc0	equ	0xFEE
  8328                           wreg	equ	0xFE8
  8329                           postdec1	equ	0xFE5
  8330                           fsr1h	equ	0xFE2
  8331                           fsr1l	equ	0xFE1
  8332                           indf2	equ	0xFDF
  8333                           postinc2	equ	0xFDE
  8334                           postdec2	equ	0xFDD
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function _log *****************
  8340 ;; Defined at:
  8341 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;  x               4   79[BANK0 ] unsigned char 
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  exponent        2   83[BANK0 ] int 
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  4   79[BANK0 ] int 
  8348 ;; Registers used:
  8349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8355 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;Total ram usage:        6 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    9
  8362 ;; This function calls:
  8363 ;;		___fladd
  8364 ;;		___flmul
  8365 ;;		___xxtofl
  8366 ;;		_eval_poly
  8367 ;;		_frexp
  8368 ;; This function is called by:
  8369 ;;		_pow
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           	psect	text23
  8374  012908                     __ptext23:
  8375                           	opt stack 0
  8376  012908                     _log:
  8377                           	opt stack 18
  8378                           
  8379                           ;incstack = 0
  8380  012908  0100               	movlb	0	; () banked
  8381  01290A  AFB2               	btfss	(log@x+3)& (0+255),7,b
  8382  01290C  D00F               	goto	l3140
  8383                           
  8384                           ; BSR set to: 0
  8385  01290E  0E00               	movlw	0
  8386  012910  0101               	movlb	1	; () banked
  8387  012912  6F1B               	movwf	(_errno+1)& (0+255),b
  8388  012914  0E21               	movlw	33
  8389  012916  6F1A               	movwf	_errno& (0+255),b
  8390  012918  0E00               	movlw	0
  8391  01291A  0100               	movlb	0	; () banked
  8392  01291C  6FAF               	movwf	?_log& (0+255),b
  8393  01291E  0E00               	movlw	0
  8394  012920  6FB0               	movwf	(?_log+1)& (0+255),b
  8395  012922  0E00               	movlw	0
  8396  012924  6FB1               	movwf	(?_log+2)& (0+255),b
  8397  012926  0E00               	movlw	0
  8398  012928  6FB2               	movwf	(?_log+3)& (0+255),b
  8399                           
  8400                           ; BSR set to: 0
  8401  01292A  0012               	return	
  8402  01292C                     l3140:
  8403                           
  8404                           ; BSR set to: 0
  8405                           
  8406                           ; BSR set to: 0
  8407  01292C  51AF               	movf	log@x& (0+255),w,b
  8408  01292E  11B0               	iorwf	(log@x+1)& (0+255),w,b
  8409  012930  11B1               	iorwf	(log@x+2)& (0+255),w,b
  8410  012932  11B2               	iorwf	(log@x+3)& (0+255),w,b
  8411  012934  A4D8               	btfss	status,2,c
  8412  012936  D00F               	goto	l3142
  8413                           
  8414                           ; BSR set to: 0
  8415  012938  0E00               	movlw	0
  8416  01293A  0101               	movlb	1	; () banked
  8417  01293C  6F1B               	movwf	(_errno+1)& (0+255),b
  8418  01293E  0E22               	movlw	34
  8419  012940  6F1A               	movwf	_errno& (0+255),b
  8420  012942  0E00               	movlw	0
  8421  012944  0100               	movlb	0	; () banked
  8422  012946  6FAF               	movwf	?_log& (0+255),b
  8423  012948  0E00               	movlw	0
  8424  01294A  6FB0               	movwf	(?_log+1)& (0+255),b
  8425  01294C  0E00               	movlw	0
  8426  01294E  6FB1               	movwf	(?_log+2)& (0+255),b
  8427  012950  0E00               	movlw	0
  8428  012952  6FB2               	movwf	(?_log+3)& (0+255),b
  8429                           
  8430                           ; BSR set to: 0
  8431  012954  0012               	return	
  8432  012956                     l3142:
  8433                           
  8434                           ; BSR set to: 0
  8435                           
  8436                           ; BSR set to: 0
  8437  012956  0E00               	movlw	0
  8438  012958  6F72               	movwf	___flmul@a& (0+255),b
  8439  01295A  0E00               	movlw	0
  8440  01295C  6F73               	movwf	(___flmul@a+1)& (0+255),b
  8441  01295E  0E00               	movlw	0
  8442  012960  6F74               	movwf	(___flmul@a+2)& (0+255),b
  8443  012962  0E40               	movlw	64
  8444  012964  6F75               	movwf	(___flmul@a+3)& (0+255),b
  8445  012966  0EB3               	movlw	low log@exponent
  8446  012968  6F64               	movwf	frexp@eptr& (0+255),b
  8447  01296A  0E00               	movlw	high log@exponent
  8448  01296C  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  8449  01296E  C0AF  F060         	movff	log@x,frexp@value
  8450  012972  C0B0  F061         	movff	log@x+1,frexp@value+1
  8451  012976  C0B1  F062         	movff	log@x+2,frexp@value+2
  8452  01297A  C0B2  F063         	movff	log@x+3,frexp@value+3
  8453  01297E  ECB7  F09F         	call	_frexp	;wreg free
  8454  012982  C060  F06E         	movff	?_frexp,___flmul@b
  8455  012986  C061  F06F         	movff	?_frexp+1,___flmul@b+1
  8456  01298A  C062  F070         	movff	?_frexp+2,___flmul@b+2
  8457  01298E  C063  F071         	movff	?_frexp+3,___flmul@b+3
  8458  012992  EC61  F084         	call	___flmul	;wreg free
  8459  012996  C06E  F08B         	movff	?___flmul,___fladd@b
  8460  01299A  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
  8461  01299E  C070  F08D         	movff	?___flmul+2,___fladd@b+2
  8462  0129A2  C071  F08E         	movff	?___flmul+3,___fladd@b+3
  8463  0129A6  0E00               	movlw	0
  8464  0129A8  0100               	movlb	0	; () banked
  8465  0129AA  6F8F               	movwf	___fladd@a& (0+255),b
  8466  0129AC  0E00               	movlw	0
  8467  0129AE  6F90               	movwf	(___fladd@a+1)& (0+255),b
  8468  0129B0  0E80               	movlw	128
  8469  0129B2  6F91               	movwf	(___fladd@a+2)& (0+255),b
  8470  0129B4  0EBF               	movlw	191
  8471  0129B6  6F92               	movwf	(___fladd@a+3)& (0+255),b
  8472  0129B8  EC0A  F086         	call	___fladd	;wreg free
  8473  0129BC  C08B  F0AF         	movff	?___fladd,log@x
  8474  0129C0  C08C  F0B0         	movff	?___fladd+1,log@x+1
  8475  0129C4  C08D  F0B1         	movff	?___fladd+2,log@x+2
  8476  0129C8  C08E  F0B2         	movff	?___fladd+3,log@x+3
  8477  0129CC  0100               	movlb	0	; () banked
  8478  0129CE  07B3               	decf	log@exponent& (0+255),f,b
  8479  0129D0  A0D8               	btfss	status,0,c
  8480  0129D2  07B4               	decf	(log@exponent+1)& (0+255),f,b
  8481                           
  8482                           ; BSR set to: 0
  8483  0129D4  C0AF  F09F         	movff	log@x,eval_poly@x
  8484  0129D8  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
  8485  0129DC  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
  8486  0129E0  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
  8487  0129E4  0E0D               	movlw	low log@coeff
  8488  0129E6  6FA3               	movwf	eval_poly@d& (0+255),b
  8489  0129E8  0EFE               	movlw	high log@coeff
  8490  0129EA  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
  8491  0129EC  0E00               	movlw	0
  8492  0129EE  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
  8493  0129F0  0E08               	movlw	8
  8494  0129F2  6FA5               	movwf	eval_poly@n& (0+255),b
  8495  0129F4  EC1D  F09C         	call	_eval_poly	;wreg free
  8496  0129F8  C09F  F0AF         	movff	?_eval_poly,log@x
  8497  0129FC  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
  8498  012A00  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
  8499  012A04  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
  8500  012A08  0E18               	movlw	24
  8501  012A0A  0100               	movlb	0	; () banked
  8502  012A0C  6F72               	movwf	___flmul@a& (0+255),b
  8503  012A0E  0E72               	movlw	114
  8504  012A10  6F73               	movwf	(___flmul@a+1)& (0+255),b
  8505  012A12  0E31               	movlw	49
  8506  012A14  6F74               	movwf	(___flmul@a+2)& (0+255),b
  8507  012A16  0E3F               	movlw	63
  8508  012A18  6F75               	movwf	(___flmul@a+3)& (0+255),b
  8509  012A1A  C0B3  F060         	movff	log@exponent,___xxtofl@val
  8510  012A1E  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
  8511  012A22  0E00               	movlw	0
  8512  012A24  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  8513  012A26  0EFF               	movlw	-1
  8514  012A28  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  8515  012A2A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  8516  012A2C  0E01               	movlw	1
  8517  012A2E  ECAC  F096         	call	___xxtofl
  8518  012A32  C060  F06E         	movff	?___xxtofl,___flmul@b
  8519  012A36  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
  8520  012A3A  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
  8521  012A3E  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
  8522  012A42  EC61  F084         	call	___flmul	;wreg free
  8523  012A46  C06E  F08B         	movff	?___flmul,___fladd@b
  8524  012A4A  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
  8525  012A4E  C070  F08D         	movff	?___flmul+2,___fladd@b+2
  8526  012A52  C071  F08E         	movff	?___flmul+3,___fladd@b+3
  8527  012A56  C0AF  F08F         	movff	log@x,___fladd@a
  8528  012A5A  C0B0  F090         	movff	log@x+1,___fladd@a+1
  8529  012A5E  C0B1  F091         	movff	log@x+2,___fladd@a+2
  8530  012A62  C0B2  F092         	movff	log@x+3,___fladd@a+3
  8531  012A66  EC0A  F086         	call	___fladd	;wreg free
  8532  012A6A  C08B  F0AF         	movff	?___fladd,?_log
  8533  012A6E  C08C  F0B0         	movff	?___fladd+1,?_log+1
  8534  012A72  C08D  F0B1         	movff	?___fladd+2,?_log+2
  8535  012A76  C08E  F0B2         	movff	?___fladd+3,?_log+3
  8536  012A7A  0012               	return	
  8537  012A7C                     __end_of_log:
  8538                           	opt stack 0
  8539                           tosu	equ	0xFFF
  8540                           tosh	equ	0xFFE
  8541                           tosl	equ	0xFFD
  8542                           pclath	equ	0xFFA
  8543                           tblptru	equ	0xFF8
  8544                           tblptrh	equ	0xFF7
  8545                           tblptrl	equ	0xFF6
  8546                           tablat	equ	0xFF5
  8547                           prodh	equ	0xFF4
  8548                           prodl	equ	0xFF3
  8549                           postinc0	equ	0xFEE
  8550                           wreg	equ	0xFE8
  8551                           postdec1	equ	0xFE5
  8552                           fsr1h	equ	0xFE2
  8553                           fsr1l	equ	0xFE1
  8554                           indf2	equ	0xFDF
  8555                           postinc2	equ	0xFDE
  8556                           postdec2	equ	0xFDD
  8557                           fsr2h	equ	0xFDA
  8558                           fsr2l	equ	0xFD9
  8559                           status	equ	0xFD8
  8560                           
  8561 ;; *************** function _exp *****************
  8562 ;; Defined at:
  8563 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;  x               4   87[BANK0 ] int 
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;  exponent        2   95[BANK0 ] int 
  8568 ;;  sign            1   97[BANK0 ] unsigned char 
  8569 ;; Return value:  Size  Location     Type
  8570 ;;                  4   87[BANK0 ] unsigned char 
  8571 ;; Registers used:
  8572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8578 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;Total ram usage:       11 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; Hardware stack levels required when called:    9
  8585 ;; This function calls:
  8586 ;;		___fldiv
  8587 ;;		___flge
  8588 ;;		___flmul
  8589 ;;		___flneg
  8590 ;;		___flsub
  8591 ;;		___fltol
  8592 ;;		___xxtofl
  8593 ;;		_eval_poly
  8594 ;;		_floor
  8595 ;;		_ldexp
  8596 ;; This function is called by:
  8597 ;;		_pow
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           	psect	text24
  8602  011A26                     __ptext24:
  8603                           	opt stack 0
  8604  011A26                     _exp:
  8605                           	opt stack 18
  8606                           
  8607                           ;incstack = 0
  8608  011A26  0100               	movlb	0	; () banked
  8609  011A28  51B7               	movf	exp@x& (0+255),w,b
  8610  011A2A  11B8               	iorwf	(exp@x+1)& (0+255),w,b
  8611  011A2C  11B9               	iorwf	(exp@x+2)& (0+255),w,b
  8612  011A2E  11BA               	iorwf	(exp@x+3)& (0+255),w,b
  8613  011A30  A4D8               	btfss	status,2,c
  8614  011A32  D009               	goto	l3098
  8615                           
  8616                           ; BSR set to: 0
  8617  011A34  0E00               	movlw	0
  8618  011A36  6FB7               	movwf	?_exp& (0+255),b
  8619  011A38  0E00               	movlw	0
  8620  011A3A  6FB8               	movwf	(?_exp+1)& (0+255),b
  8621  011A3C  0E80               	movlw	128
  8622  011A3E  6FB9               	movwf	(?_exp+2)& (0+255),b
  8623  011A40  0E3F               	movlw	63
  8624  011A42  6FBA               	movwf	(?_exp+3)& (0+255),b
  8625                           
  8626                           ; BSR set to: 0
  8627  011A44  0012               	return	
  8628  011A46                     l3098:
  8629                           
  8630                           ; BSR set to: 0
  8631                           
  8632                           ; BSR set to: 0
  8633  011A46  0E18               	movlw	24
  8634  011A48  6F60               	movwf	___flge@ff1& (0+255),b
  8635  011A4A  0E72               	movlw	114
  8636  011A4C  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  8637  011A4E  0E31               	movlw	49
  8638  011A50  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  8639  011A52  0E44               	movlw	68
  8640  011A54  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  8641  011A56  C0B7  F064         	movff	exp@x,___flge@ff2
  8642  011A5A  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
  8643  011A5E  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
  8644  011A62  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
  8645  011A66  EC7A  F09A         	call	___flge	;wreg free
  8646  011A6A  0100               	movlb	0	; () banked
  8647  011A6C  B0D8               	btfsc	status,0,c
  8648  011A6E  D00F               	goto	l3100
  8649                           
  8650                           ; BSR set to: 0
  8651  011A70  0E00               	movlw	0
  8652  011A72  0101               	movlb	1	; () banked
  8653  011A74  6F1B               	movwf	(_errno+1)& (0+255),b
  8654  011A76  0E22               	movlw	34
  8655  011A78  6F1A               	movwf	_errno& (0+255),b
  8656  011A7A  0EFF               	movlw	255
  8657  011A7C  0100               	movlb	0	; () banked
  8658  011A7E  6FB7               	movwf	?_exp& (0+255),b
  8659  011A80  0EFF               	movlw	255
  8660  011A82  6FB8               	movwf	(?_exp+1)& (0+255),b
  8661  011A84  0E7F               	movlw	127
  8662  011A86  6FB9               	movwf	(?_exp+2)& (0+255),b
  8663  011A88  0E7F               	movlw	127
  8664  011A8A  6FBA               	movwf	(?_exp+3)& (0+255),b
  8665                           
  8666                           ; BSR set to: 0
  8667  011A8C  0012               	return	
  8668  011A8E                     l3100:
  8669                           
  8670                           ; BSR set to: 0
  8671                           
  8672                           ; BSR set to: 0
  8673  011A8E  C0B7  F060         	movff	exp@x,___flge@ff1
  8674  011A92  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
  8675  011A96  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
  8676  011A9A  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
  8677  011A9E  0E87               	movlw	135
  8678  011AA0  6F64               	movwf	___flge@ff2& (0+255),b
  8679  011AA2  0E48               	movlw	72
  8680  011AA4  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  8681  011AA6  0E3A               	movlw	58
  8682  011AA8  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  8683  011AAA  0EC4               	movlw	196
  8684  011AAC  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  8685  011AAE  EC7A  F09A         	call	___flge	;wreg free
  8686  011AB2  0100               	movlb	0	; () banked
  8687  011AB4  B0D8               	btfsc	status,0,c
  8688  011AB6  D00F               	goto	l3101
  8689                           
  8690                           ; BSR set to: 0
  8691  011AB8  0E00               	movlw	0
  8692  011ABA  0101               	movlb	1	; () banked
  8693  011ABC  6F1B               	movwf	(_errno+1)& (0+255),b
  8694  011ABE  0E22               	movlw	34
  8695  011AC0  6F1A               	movwf	_errno& (0+255),b
  8696  011AC2  0E00               	movlw	0
  8697  011AC4  0100               	movlb	0	; () banked
  8698  011AC6  6FB7               	movwf	?_exp& (0+255),b
  8699  011AC8  0E00               	movlw	0
  8700  011ACA  6FB8               	movwf	(?_exp+1)& (0+255),b
  8701  011ACC  0E00               	movlw	0
  8702  011ACE  6FB9               	movwf	(?_exp+2)& (0+255),b
  8703  011AD0  0E00               	movlw	0
  8704  011AD2  6FBA               	movwf	(?_exp+3)& (0+255),b
  8705                           
  8706                           ; BSR set to: 0
  8707  011AD4  0012               	return	
  8708  011AD6                     l3101:
  8709                           
  8710                           ; BSR set to: 0
  8711                           
  8712                           ; BSR set to: 0
  8713  011AD6  AFBA               	btfss	(exp@x+3)& (0+255),7,b
  8714  011AD8  D002               	goto	u12150
  8715  011ADA  0E01               	movlw	1
  8716  011ADC  D001               	goto	u12160
  8717  011ADE                     u12150:
  8718  011ADE  0E00               	movlw	0
  8719  011AE0                     u12160:
  8720  011AE0  6FC1               	movwf	exp@sign& (0+255),b
  8721                           
  8722                           ; BSR set to: 0
  8723  011AE2  51C1               	movf	exp@sign& (0+255),w,b
  8724  011AE4  B4D8               	btfsc	status,2,c
  8725  011AE6  D012               	goto	l3102
  8726                           
  8727                           ; BSR set to: 0
  8728  011AE8  C0B7  F087         	movff	exp@x,___flneg@f1
  8729  011AEC  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
  8730  011AF0  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
  8731  011AF4  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
  8732  011AF8  EC49  F0AB         	call	___flneg	;wreg free
  8733  011AFC  C087  F0B7         	movff	?___flneg,exp@x
  8734  011B00  C088  F0B8         	movff	?___flneg+1,exp@x+1
  8735  011B04  C089  F0B9         	movff	?___flneg+2,exp@x+2
  8736  011B08  C08A  F0BA         	movff	?___flneg+3,exp@x+3
  8737  011B0C                     l3102:
  8738  011B0C  C0B7  F06E         	movff	exp@x,___flmul@b
  8739  011B10  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
  8740  011B14  C0B9  F070         	movff	exp@x+2,___flmul@b+2
  8741  011B18  C0BA  F071         	movff	exp@x+3,___flmul@b+3
  8742  011B1C  0E3B               	movlw	59
  8743  011B1E  0100               	movlb	0	; () banked
  8744  011B20  6F72               	movwf	___flmul@a& (0+255),b
  8745  011B22  0EAA               	movlw	170
  8746  011B24  6F73               	movwf	(___flmul@a+1)& (0+255),b
  8747  011B26  0EB8               	movlw	184
  8748  011B28  6F74               	movwf	(___flmul@a+2)& (0+255),b
  8749  011B2A  0E3F               	movlw	63
  8750  011B2C  6F75               	movwf	(___flmul@a+3)& (0+255),b
  8751  011B2E  EC61  F084         	call	___flmul	;wreg free
  8752  011B32  C06E  F0B7         	movff	?___flmul,exp@x
  8753  011B36  C06F  F0B8         	movff	?___flmul+1,exp@x+1
  8754  011B3A  C070  F0B9         	movff	?___flmul+2,exp@x+2
  8755  011B3E  C071  F0BA         	movff	?___flmul+3,exp@x+3
  8756  011B42  C0B7  F0A9         	movff	exp@x,floor@x
  8757  011B46  C0B8  F0AA         	movff	exp@x+1,floor@x+1
  8758  011B4A  C0B9  F0AB         	movff	exp@x+2,floor@x+2
  8759  011B4E  C0BA  F0AC         	movff	exp@x+3,floor@x+3
  8760  011B52  EC0B  F09B         	call	_floor	;wreg free
  8761  011B56  C0A9  F0BB         	movff	?_floor,_exp$15840
  8762  011B5A  C0AA  F0BC         	movff	?_floor+1,_exp$15840+1
  8763  011B5E  C0AB  F0BD         	movff	?_floor+2,_exp$15840+2
  8764  011B62  C0AC  F0BE         	movff	?_floor+3,_exp$15840+3
  8765  011B66  C0BB  F09F         	movff	_exp$15840,___fltol@f1
  8766  011B6A  C0BC  F0A0         	movff	_exp$15840+1,___fltol@f1+1
  8767  011B6E  C0BD  F0A1         	movff	_exp$15840+2,___fltol@f1+2
  8768  011B72  C0BE  F0A2         	movff	_exp$15840+3,___fltol@f1+3
  8769  011B76  EC8F  F09D         	call	___fltol	;wreg free
  8770  011B7A  C09F  F0BF         	movff	?___fltol,exp@exponent
  8771  011B7E  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
  8772  011B82  C0B7  F09F         	movff	exp@x,___flsub@b
  8773  011B86  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
  8774  011B8A  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
  8775  011B8E  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
  8776  011B92  C0BF  F060         	movff	exp@exponent,___xxtofl@val
  8777  011B96  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
  8778  011B9A  0100               	movlb	0	; () banked
  8779  011B9C  0E00               	movlw	0
  8780  011B9E  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  8781  011BA0  0EFF               	movlw	-1
  8782  011BA2  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  8783  011BA4  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  8784  011BA6  0E01               	movlw	1
  8785  011BA8  ECAC  F096         	call	___xxtofl
  8786  011BAC  C060  F0A3         	movff	?___xxtofl,___flsub@a
  8787  011BB0  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
  8788  011BB4  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
  8789  011BB8  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
  8790  011BBC  EC07  F0A9         	call	___flsub	;wreg free
  8791  011BC0  C09F  F0B7         	movff	?___flsub,exp@x
  8792  011BC4  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
  8793  011BC8  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
  8794  011BCC  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
  8795  011BD0  C0B7  F09F         	movff	exp@x,eval_poly@x
  8796  011BD4  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
  8797  011BD8  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
  8798  011BDC  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
  8799  011BE0  0EE5               	movlw	low exp@coeff
  8800  011BE2  0100               	movlb	0	; () banked
  8801  011BE4  6FA3               	movwf	eval_poly@d& (0+255),b
  8802  011BE6  0EFD               	movlw	high exp@coeff
  8803  011BE8  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
  8804  011BEA  0E00               	movlw	0
  8805  011BEC  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
  8806  011BEE  0E09               	movlw	9
  8807  011BF0  6FA5               	movwf	eval_poly@n& (0+255),b
  8808  011BF2  EC1D  F09C         	call	_eval_poly	;wreg free
  8809  011BF6  C09F  F0AF         	movff	?_eval_poly,ldexp@value
  8810  011BFA  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
  8811  011BFE  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
  8812  011C02  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
  8813  011C06  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
  8814  011C0A  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
  8815  011C0E  EC1D  F09D         	call	_ldexp	;wreg free
  8816  011C12  C0AF  F0B7         	movff	?_ldexp,exp@x
  8817  011C16  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
  8818  011C1A  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
  8819  011C1E  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
  8820  011C22  0100               	movlb	0	; () banked
  8821  011C24  51C1               	movf	exp@sign& (0+255),w,b
  8822  011C26  B4D8               	btfsc	status,2,c
  8823  011C28  D02F               	goto	l3103
  8824                           
  8825                           ; BSR set to: 0
  8826  011C2A  29B7               	incf	exp@x& (0+255),w,b
  8827  011C2C  E112               	bnz	l14639
  8828  011C2E  29B8               	incf	(exp@x+1)& (0+255),w,b
  8829  011C30  E110               	bnz	l14639
  8830  011C32  0E7F               	movlw	127
  8831  011C34  19B9               	xorwf	(exp@x+2)& (0+255),w,b
  8832  011C36  E10D               	bnz	l14639
  8833  011C38  0E7F               	movlw	127
  8834  011C3A  19BA               	xorwf	(exp@x+3)& (0+255),w,b
  8835  011C3C  A4D8               	btfss	status,2,c
  8836  011C3E  D009               	goto	l3104
  8837                           
  8838                           ; BSR set to: 0
  8839  011C40  0E00               	movlw	0
  8840  011C42  6FB7               	movwf	?_exp& (0+255),b
  8841  011C44  0E00               	movlw	0
  8842  011C46  6FB8               	movwf	(?_exp+1)& (0+255),b
  8843  011C48  0E00               	movlw	0
  8844  011C4A  6FB9               	movwf	(?_exp+2)& (0+255),b
  8845  011C4C  0E00               	movlw	0
  8846  011C4E  6FBA               	movwf	(?_exp+3)& (0+255),b
  8847                           
  8848                           ; BSR set to: 0
  8849  011C50  0012               	return	
  8850  011C52                     l3104:
  8851  011C52                     l14639:
  8852                           
  8853                           ; BSR set to: 0
  8854  011C52  0E00               	movlw	0
  8855  011C54  6F60               	movwf	___fldiv@b& (0+255),b
  8856  011C56  0E00               	movlw	0
  8857  011C58  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  8858  011C5A  0E80               	movlw	128
  8859  011C5C  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  8860  011C5E  0E3F               	movlw	63
  8861  011C60  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  8862  011C62  C0B7  F064         	movff	exp@x,___fldiv@a
  8863  011C66  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
  8864  011C6A  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
  8865  011C6E  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
  8866  011C72  EC21  F089         	call	___fldiv	;wreg free
  8867  011C76  C060  F0B7         	movff	?___fldiv,?_exp
  8868  011C7A  C061  F0B8         	movff	?___fldiv+1,?_exp+1
  8869  011C7E  C062  F0B9         	movff	?___fldiv+2,?_exp+2
  8870  011C82  C063  F0BA         	movff	?___fldiv+3,?_exp+3
  8871  011C86  0012               	return	
  8872  011C88                     l3103:
  8873                           
  8874                           ; BSR set to: 0
  8875  011C88  C0B7  F0B7         	movff	exp@x,?_exp
  8876  011C8C  C0B8  F0B8         	movff	exp@x+1,?_exp+1
  8877  011C90  C0B9  F0B9         	movff	exp@x+2,?_exp+2
  8878  011C94  C0BA  F0BA         	movff	exp@x+3,?_exp+3
  8879  011C98  0012               	return		;funcret
  8880  011C9A                     __end_of_exp:
  8881                           	opt stack 0
  8882                           tosu	equ	0xFFF
  8883                           tosh	equ	0xFFE
  8884                           tosl	equ	0xFFD
  8885                           pclath	equ	0xFFA
  8886                           tblptru	equ	0xFF8
  8887                           tblptrh	equ	0xFF7
  8888                           tblptrl	equ	0xFF6
  8889                           tablat	equ	0xFF5
  8890                           prodh	equ	0xFF4
  8891                           prodl	equ	0xFF3
  8892                           postinc0	equ	0xFEE
  8893                           wreg	equ	0xFE8
  8894                           postdec1	equ	0xFE5
  8895                           fsr1h	equ	0xFE2
  8896                           fsr1l	equ	0xFE1
  8897                           indf2	equ	0xFDF
  8898                           postinc2	equ	0xFDE
  8899                           postdec2	equ	0xFDD
  8900                           fsr2h	equ	0xFDA
  8901                           fsr2l	equ	0xFD9
  8902                           status	equ	0xFD8
  8903                           
  8904 ;; *************** function _ldexp *****************
  8905 ;; Defined at:
  8906 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;  value           4   79[BANK0 ] unsigned char 
  8909 ;;  newexp          2   83[BANK0 ] int 
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;		None
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  4   79[BANK0 ] int 
  8914 ;; Registers used:
  8915 ;;		wreg, status,2, status,0
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8921 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;Total ram usage:        8 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    7
  8928 ;; This function calls:
  8929 ;;		Nothing
  8930 ;; This function is called by:
  8931 ;;		_exp
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           	psect	text25
  8936  013A3A                     __ptext25:
  8937                           	opt stack 0
  8938  013A3A                     _ldexp:
  8939                           	opt stack 19
  8940                           
  8941                           ;incstack = 0
  8942  013A3A  0100               	movlb	0	; () banked
  8943  013A3C  51AF               	movf	ldexp@value& (0+255),w,b
  8944  013A3E  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
  8945  013A40  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
  8946  013A42  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
  8947  013A44  A4D8               	btfss	status,2,c
  8948  013A46  D009               	goto	l3122
  8949                           
  8950                           ; BSR set to: 0
  8951  013A48  0E00               	movlw	0
  8952  013A4A  6FAF               	movwf	?_ldexp& (0+255),b
  8953  013A4C  0E00               	movlw	0
  8954  013A4E  6FB0               	movwf	(?_ldexp+1)& (0+255),b
  8955  013A50  0E00               	movlw	0
  8956  013A52  6FB1               	movwf	(?_ldexp+2)& (0+255),b
  8957  013A54  0E00               	movlw	0
  8958  013A56  6FB2               	movwf	(?_ldexp+3)& (0+255),b
  8959                           
  8960                           ; BSR set to: 0
  8961  013A58  0012               	return	
  8962  013A5A                     l3122:
  8963                           
  8964                           ; BSR set to: 0
  8965                           
  8966                           ; BSR set to: 0
  8967  013A5A  51B2               	movf	(ldexp@value+3)& (0+255),w,b
  8968  013A5C  0B7F               	andlw	127
  8969  013A5E  6FB5               	movwf	??_ldexp& (0+255),b
  8970  013A60  6BB6               	clrf	(??_ldexp+1)& (0+255),b
  8971  013A62  90D8               	bcf	status,0,c
  8972  013A64  37B5               	rlcf	??_ldexp& (0+255),f,b
  8973  013A66  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
  8974  013A68  51B5               	movf	??_ldexp& (0+255),w,b
  8975  013A6A  27B3               	addwf	ldexp@newexp& (0+255),f,b
  8976  013A6C  51B6               	movf	(??_ldexp+1)& (0+255),w,b
  8977  013A6E  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8978  013A70  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
  8979  013A72  D003               	goto	u11780
  8980  013A74  6BB5               	clrf	??_ldexp& (0+255),b
  8981  013A76  2BB5               	incf	??_ldexp& (0+255),f,b
  8982  013A78  D002               	goto	u11788
  8983  013A7A                     u11780:
  8984  013A7A  0100               	movlb	0	; () banked
  8985  013A7C  6BB5               	clrf	??_ldexp& (0+255),b
  8986  013A7E                     u11788:
  8987  013A7E  51B5               	movf	??_ldexp& (0+255),w,b
  8988  013A80  27B3               	addwf	ldexp@newexp& (0+255),f,b
  8989  013A82  0E00               	movlw	0
  8990  013A84  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8991  013A86  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
  8992  013A88  D00F               	goto	l3124
  8993                           
  8994                           ; BSR set to: 0
  8995  013A8A  0E00               	movlw	0
  8996  013A8C  0101               	movlb	1	; () banked
  8997  013A8E  6F1B               	movwf	(_errno+1)& (0+255),b
  8998  013A90  0E22               	movlw	34
  8999  013A92  6F1A               	movwf	_errno& (0+255),b
  9000  013A94  0E00               	movlw	0
  9001  013A96  0100               	movlb	0	; () banked
  9002  013A98  6FAF               	movwf	?_ldexp& (0+255),b
  9003  013A9A  0E00               	movlw	0
  9004  013A9C  6FB0               	movwf	(?_ldexp+1)& (0+255),b
  9005  013A9E  0E00               	movlw	0
  9006  013AA0  6FB1               	movwf	(?_ldexp+2)& (0+255),b
  9007  013AA2  0E00               	movlw	0
  9008  013AA4                     L4:
  9009  013AA4  6FB2               	movwf	(?_ldexp+3)& (0+255),b
  9010                           
  9011                           ; BSR set to: 0
  9012  013AA6  0012               	return	
  9013  013AA8                     l3124:
  9014                           
  9015                           ; BSR set to: 0
  9016                           
  9017                           ; BSR set to: 0
  9018  013AA8  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  9019  013AAA  D01B               	goto	l3126
  9020  013AAC  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
  9021  013AAE  A0D8               	btfss	status,0,c
  9022  013AB0  D018               	goto	l3126
  9023                           
  9024                           ; BSR set to: 0
  9025  013AB2  0E00               	movlw	0
  9026  013AB4  0101               	movlb	1	; () banked
  9027  013AB6  6F1B               	movwf	(_errno+1)& (0+255),b
  9028  013AB8  0E22               	movlw	34
  9029  013ABA  6F1A               	movwf	_errno& (0+255),b
  9030                           
  9031                           ; BSR set to: 1
  9032  013ABC  0100               	movlb	0	; () banked
  9033  013ABE  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
  9034  013AC0  D008               	goto	l3127
  9035                           
  9036                           ; BSR set to: 0
  9037  013AC2  0EFF               	movlw	255
  9038  013AC4  6FAF               	movwf	?_ldexp& (0+255),b
  9039  013AC6  0EFF               	movlw	255
  9040  013AC8  6FB0               	movwf	(?_ldexp+1)& (0+255),b
  9041  013ACA  0E7F               	movlw	127
  9042  013ACC  6FB1               	movwf	(?_ldexp+2)& (0+255),b
  9043  013ACE  0EFF               	movlw	255
  9044  013AD0  D7E9               	goto	L4
  9045  013AD2                     l3127:
  9046                           
  9047                           ; BSR set to: 0
  9048                           
  9049                           ; BSR set to: 0
  9050  013AD2  0EFF               	movlw	255
  9051  013AD4  6FAF               	movwf	?_ldexp& (0+255),b
  9052  013AD6  0EFF               	movlw	255
  9053  013AD8  6FB0               	movwf	(?_ldexp+1)& (0+255),b
  9054  013ADA  0E7F               	movlw	127
  9055  013ADC  6FB1               	movwf	(?_ldexp+2)& (0+255),b
  9056  013ADE  0E7F               	movlw	127
  9057  013AE0  D7E1               	goto	L4
  9058  013AE2                     l3126:
  9059                           
  9060                           ; BSR set to: 0
  9061                           
  9062                           ; BSR set to: 0
  9063  013AE2  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  9064  013AE4  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  9065  013AE6  6FB6               	movwf	(??_ldexp+1)& (0+255),b
  9066  013AE8  31B3               	rrcf	ldexp@newexp& (0+255),w,b
  9067  013AEA  6FB5               	movwf	??_ldexp& (0+255),b
  9068  013AEC  51B2               	movf	(ldexp@value+3)& (0+255),w,b
  9069  013AEE  19B5               	xorwf	??_ldexp& (0+255),w,b
  9070  013AF0  0B80               	andlw	-128
  9071  013AF2  19B5               	xorwf	??_ldexp& (0+255),w,b
  9072  013AF4  6FB2               	movwf	(ldexp@value+3)& (0+255),b
  9073  013AF6  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
  9074  013AFA  0E01               	movlw	1
  9075  013AFC  17B5               	andwf	??_ldexp& (0+255),f,b
  9076  013AFE  33B5               	rrcf	??_ldexp& (0+255),f,b
  9077  013B00  33B5               	rrcf	??_ldexp& (0+255),f,b
  9078  013B02  51B1               	movf	(ldexp@value+2)& (0+255),w,b
  9079  013B04  19B5               	xorwf	??_ldexp& (0+255),w,b
  9080  013B06  0B7F               	andlw	-129
  9081  013B08  19B5               	xorwf	??_ldexp& (0+255),w,b
  9082  013B0A  6FB1               	movwf	(ldexp@value+2)& (0+255),b
  9083                           
  9084                           ; BSR set to: 0
  9085                           
  9086                           ; BSR set to: 0
  9087                           
  9088                           ; BSR set to: 0
  9089  013B0C  C0AF  F0AF         	movff	ldexp@value,?_ldexp
  9090  013B10  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
  9091  013B14  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
  9092  013B18  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
  9093  013B1C  0012               	return	
  9094  013B1E                     __end_of_ldexp:
  9095                           	opt stack 0
  9096                           tosu	equ	0xFFF
  9097                           tosh	equ	0xFFE
  9098                           tosl	equ	0xFFD
  9099                           pclath	equ	0xFFA
  9100                           tblptru	equ	0xFF8
  9101                           tblptrh	equ	0xFF7
  9102                           tblptrl	equ	0xFF6
  9103                           tablat	equ	0xFF5
  9104                           prodh	equ	0xFF4
  9105                           prodl	equ	0xFF3
  9106                           postinc0	equ	0xFEE
  9107                           wreg	equ	0xFE8
  9108                           postdec1	equ	0xFE5
  9109                           fsr1h	equ	0xFE2
  9110                           fsr1l	equ	0xFE1
  9111                           indf2	equ	0xFDF
  9112                           postinc2	equ	0xFDE
  9113                           postdec2	equ	0xFDD
  9114                           fsr2h	equ	0xFDA
  9115                           fsr2l	equ	0xFD9
  9116                           status	equ	0xFD8
  9117                           
  9118 ;; *************** function _floor *****************
  9119 ;; Defined at:
  9120 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;  x               4   73[BANK0 ] int 
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;  i               4   77[BANK0 ] int 
  9125 ;;  expon           2   81[BANK0 ] int 
  9126 ;; Return value:  Size  Location     Type
  9127 ;;                  4   73[BANK0 ] int 
  9128 ;; Registers used:
  9129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9135 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9136 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9138 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9139 ;;Total ram usage:       10 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    8
  9142 ;; This function calls:
  9143 ;;		___fladd
  9144 ;;		___flge
  9145 ;;		___fltol
  9146 ;;		___xxtofl
  9147 ;;		_frexp
  9148 ;; This function is called by:
  9149 ;;		_exp
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           	psect	text26
  9154  013616                     __ptext26:
  9155                           	opt stack 0
  9156  013616                     _floor:
  9157                           	opt stack 18
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;incstack = 0
  9161  013616  C0A9  F060         	movff	floor@x,frexp@value
  9162  01361A  C0AA  F061         	movff	floor@x+1,frexp@value+1
  9163  01361E  C0AB  F062         	movff	floor@x+2,frexp@value+2
  9164  013622  C0AC  F063         	movff	floor@x+3,frexp@value+3
  9165  013626  0EB1               	movlw	low floor@expon
  9166  013628  0100               	movlb	0	; () banked
  9167  01362A  6F64               	movwf	frexp@eptr& (0+255),b
  9168  01362C  0E00               	movlw	high floor@expon
  9169  01362E  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  9170  013630  ECB7  F09F         	call	_frexp	;wreg free
  9171  013634  0100               	movlb	0	; () banked
  9172  013636  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
  9173  013638  D014               	goto	l3109
  9174                           
  9175                           ; BSR set to: 0
  9176  01363A  AFAC               	btfss	(floor@x+3)& (0+255),7,b
  9177  01363C  D009               	goto	l3110
  9178                           
  9179                           ; BSR set to: 0
  9180  01363E  0E00               	movlw	0
  9181  013640  6FA9               	movwf	?_floor& (0+255),b
  9182  013642  0E00               	movlw	0
  9183  013644  6FAA               	movwf	(?_floor+1)& (0+255),b
  9184  013646  0E80               	movlw	128
  9185  013648  6FAB               	movwf	(?_floor+2)& (0+255),b
  9186  01364A  0EBF               	movlw	191
  9187  01364C  6FAC               	movwf	(?_floor+3)& (0+255),b
  9188                           
  9189                           ; BSR set to: 0
  9190  01364E  0012               	return	
  9191  013650                     l3110:
  9192                           
  9193                           ; BSR set to: 0
  9194                           
  9195                           ; BSR set to: 0
  9196  013650  0E00               	movlw	0
  9197  013652  6FA9               	movwf	?_floor& (0+255),b
  9198  013654  0E00               	movlw	0
  9199  013656  6FAA               	movwf	(?_floor+1)& (0+255),b
  9200  013658  0E00               	movlw	0
  9201  01365A  6FAB               	movwf	(?_floor+2)& (0+255),b
  9202  01365C  0E00               	movlw	0
  9203  01365E  6FAC               	movwf	(?_floor+3)& (0+255),b
  9204                           
  9205                           ; BSR set to: 0
  9206  013660  0012               	return	
  9207  013662                     l3109:
  9208                           
  9209                           ; BSR set to: 0
  9210                           
  9211                           ; BSR set to: 0
  9212  013662  51B2               	movf	(floor@expon+1)& (0+255),w,b
  9213  013664  E104               	bnz	u11740
  9214  013666  0E1D               	movlw	29
  9215  013668  5DB1               	subwf	floor@expon& (0+255),w,b
  9216  01366A  A0D8               	btfss	status,0,c
  9217  01366C  D009               	goto	l3112
  9218  01366E                     u11740:
  9219                           
  9220                           ; BSR set to: 0
  9221  01366E  C0A9  F0A9         	movff	floor@x,?_floor
  9222  013672  C0AA  F0AA         	movff	floor@x+1,?_floor+1
  9223  013676  C0AB  F0AB         	movff	floor@x+2,?_floor+2
  9224  01367A  C0AC  F0AC         	movff	floor@x+3,?_floor+3
  9225  01367E  0012               	return	
  9226  013680                     l3112:
  9227                           
  9228                           ; BSR set to: 0
  9229                           
  9230                           ; BSR set to: 0
  9231  013680  C0A9  F09F         	movff	floor@x,___fltol@f1
  9232  013684  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
  9233  013688  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
  9234  01368C  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
  9235  013690  EC8F  F09D         	call	___fltol	;wreg free
  9236  013694  C09F  F060         	movff	?___fltol,___xxtofl@val
  9237  013698  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
  9238  01369C  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
  9239  0136A0  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
  9240  0136A4  0E01               	movlw	1
  9241  0136A6  ECAC  F096         	call	___xxtofl
  9242  0136AA  C060  F0AD         	movff	?___xxtofl,floor@i
  9243  0136AE  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
  9244  0136B2  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
  9245  0136B6  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
  9246  0136BA  C0A9  F060         	movff	floor@x,___flge@ff1
  9247  0136BE  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
  9248  0136C2  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
  9249  0136C6  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
  9250  0136CA  C0AD  F064         	movff	floor@i,___flge@ff2
  9251  0136CE  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
  9252  0136D2  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
  9253  0136D6  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
  9254  0136DA  EC7A  F09A         	call	___flge	;wreg free
  9255  0136DE  0100               	movlb	0	; () banked
  9256  0136E0  B0D8               	btfsc	status,0,c
  9257  0136E2  D01B               	goto	l3113
  9258                           
  9259                           ; BSR set to: 0
  9260  0136E4  C0AD  F08B         	movff	floor@i,___fladd@b
  9261  0136E8  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
  9262  0136EC  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
  9263  0136F0  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
  9264  0136F4  0E00               	movlw	0
  9265  0136F6  6F8F               	movwf	___fladd@a& (0+255),b
  9266  0136F8  0E00               	movlw	0
  9267  0136FA  6F90               	movwf	(___fladd@a+1)& (0+255),b
  9268  0136FC  0E80               	movlw	128
  9269  0136FE  6F91               	movwf	(___fladd@a+2)& (0+255),b
  9270  013700  0EBF               	movlw	191
  9271  013702  6F92               	movwf	(___fladd@a+3)& (0+255),b
  9272  013704  EC0A  F086         	call	___fladd	;wreg free
  9273  013708  C08B  F0A9         	movff	?___fladd,?_floor
  9274  01370C  C08C  F0AA         	movff	?___fladd+1,?_floor+1
  9275  013710  C08D  F0AB         	movff	?___fladd+2,?_floor+2
  9276  013714  C08E  F0AC         	movff	?___fladd+3,?_floor+3
  9277  013718  0012               	return	
  9278  01371A                     l3113:
  9279                           
  9280                           ; BSR set to: 0
  9281  01371A  C0AD  F0A9         	movff	floor@i,?_floor
  9282  01371E  C0AE  F0AA         	movff	floor@i+1,?_floor+1
  9283  013722  C0AF  F0AB         	movff	floor@i+2,?_floor+2
  9284  013726  C0B0  F0AC         	movff	floor@i+3,?_floor+3
  9285  01372A  0012               	return		;funcret
  9286  01372C                     __end_of_floor:
  9287                           	opt stack 0
  9288                           tosu	equ	0xFFF
  9289                           tosh	equ	0xFFE
  9290                           tosl	equ	0xFFD
  9291                           pclath	equ	0xFFA
  9292                           tblptru	equ	0xFF8
  9293                           tblptrh	equ	0xFF7
  9294                           tblptrl	equ	0xFF6
  9295                           tablat	equ	0xFF5
  9296                           prodh	equ	0xFF4
  9297                           prodl	equ	0xFF3
  9298                           postinc0	equ	0xFEE
  9299                           wreg	equ	0xFE8
  9300                           postdec1	equ	0xFE5
  9301                           fsr1h	equ	0xFE2
  9302                           fsr1l	equ	0xFE1
  9303                           indf2	equ	0xFDF
  9304                           postinc2	equ	0xFDE
  9305                           postdec2	equ	0xFDD
  9306                           fsr2h	equ	0xFDA
  9307                           fsr2l	equ	0xFD9
  9308                           status	equ	0xFD8
  9309                           
  9310 ;; *************** function _frexp *****************
  9311 ;; Defined at:
  9312 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;  value           4    0[BANK0 ] int 
  9315 ;;  eptr            2    4[BANK0 ] PTR int 
  9316 ;;		 -> log@exponent(2), floor@expon(2), 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;		None
  9319 ;; Return value:  Size  Location     Type
  9320 ;;                  4    0[BANK0 ] PTR int 
  9321 ;; Registers used:
  9322 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9328 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;Total ram usage:        8 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; Hardware stack levels required when called:    7
  9335 ;; This function calls:
  9336 ;;		Nothing
  9337 ;; This function is called by:
  9338 ;;		_floor
  9339 ;;		_log
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text27
  9344  013F6E                     __ptext27:
  9345                           	opt stack 0
  9346  013F6E                     _frexp:
  9347                           	opt stack 19
  9348                           
  9349                           ;incstack = 0
  9350  013F6E  0100               	movlb	0	; () banked
  9351  013F70  5160               	movf	frexp@value& (0+255),w,b
  9352  013F72  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  9353  013F74  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  9354  013F76  1163               	iorwf	(frexp@value+3)& (0+255),w,b
  9355  013F78  A4D8               	btfss	status,2,c
  9356  013F7A  D011               	goto	l3118
  9357                           
  9358                           ; BSR set to: 0
  9359  013F7C  C064  FFD9         	movff	frexp@eptr,fsr2l
  9360  013F80  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  9361  013F84  0E00               	movlw	0
  9362  013F86  6EDE               	movwf	postinc2,c
  9363  013F88  0E00               	movlw	0
  9364  013F8A  6EDD               	movwf	postdec2,c
  9365                           
  9366                           ; BSR set to: 0
  9367  013F8C  0E00               	movlw	0
  9368  013F8E  6F60               	movwf	?_frexp& (0+255),b
  9369  013F90  0E00               	movlw	0
  9370  013F92  6F61               	movwf	(?_frexp+1)& (0+255),b
  9371  013F94  0E00               	movlw	0
  9372  013F96  6F62               	movwf	(?_frexp+2)& (0+255),b
  9373  013F98  0E00               	movlw	0
  9374  013F9A  6F63               	movwf	(?_frexp+3)& (0+255),b
  9375                           
  9376                           ; BSR set to: 0
  9377  013F9C  0012               	return	
  9378  013F9E                     l3118:
  9379                           
  9380                           ; BSR set to: 0
  9381                           
  9382                           ; BSR set to: 0
  9383  013F9E  5163               	movf	(frexp@value+3)& (0+255),w,b
  9384  013FA0  0B7F               	andlw	127
  9385  013FA2  6F66               	movwf	??_frexp& (0+255),b
  9386  013FA4  6B67               	clrf	(??_frexp+1)& (0+255),b
  9387  013FA6  90D8               	bcf	status,0,c
  9388  013FA8  3766               	rlcf	??_frexp& (0+255),f,b
  9389  013FAA  3767               	rlcf	(??_frexp+1)& (0+255),f,b
  9390  013FAC  C064  FFD9         	movff	frexp@eptr,fsr2l
  9391  013FB0  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  9392  013FB4  C066  FFDE         	movff	??_frexp,postinc2
  9393  013FB8  C067  FFDD         	movff	??_frexp+1,postdec2
  9394  013FBC  AF62               	btfss	(frexp@value+2)& (0+255),7,b
  9395  013FBE  D003               	goto	u11320
  9396  013FC0  6B66               	clrf	??_frexp& (0+255),b
  9397  013FC2  2B66               	incf	??_frexp& (0+255),f,b
  9398  013FC4  D002               	goto	u11328
  9399  013FC6                     u11320:
  9400  013FC6  0100               	movlb	0	; () banked
  9401  013FC8  6B66               	clrf	??_frexp& (0+255),b
  9402  013FCA                     u11328:
  9403  013FCA  5166               	movf	??_frexp& (0+255),w,b
  9404  013FCC  C064  FFD9         	movff	frexp@eptr,fsr2l
  9405  013FD0  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  9406  013FD4  12DE               	iorwf	postinc2,f,c
  9407  013FD6  0E00               	movlw	0
  9408  013FD8  12DD               	iorwf	postdec2,f,c
  9409                           
  9410                           ; BSR set to: 0
  9411  013FDA  C064  FFD9         	movff	frexp@eptr,fsr2l
  9412  013FDE  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  9413  013FE2  0E82               	movlw	130
  9414  013FE4  26DE               	addwf	postinc2,f,c
  9415  013FE6  0EFF               	movlw	255
  9416  013FE8  22DD               	addwfc	postdec2,f,c
  9417                           
  9418                           ; BSR set to: 0
  9419  013FEA  8163               	bsf	(frexp@value+3)& (0+255),0,b
  9420  013FEC  8363               	bsf	(frexp@value+3)& (0+255),1,b
  9421  013FEE  8563               	bsf	(frexp@value+3)& (0+255),2,b
  9422  013FF0  8763               	bsf	(frexp@value+3)& (0+255),3,b
  9423  013FF2  8963               	bsf	(frexp@value+3)& (0+255),4,b
  9424  013FF4  8B63               	bsf	(frexp@value+3)& (0+255),5,b
  9425  013FF6  9D63               	bcf	(frexp@value+3)& (0+255),6,b
  9426                           
  9427                           ; BSR set to: 0
  9428  013FF8  9F62               	bcf	(frexp@value+2)& (0+255),7,b
  9429                           
  9430                           ; BSR set to: 0
  9431  013FFA  C060  F060         	movff	frexp@value,?_frexp
  9432  013FFE  C061  F061         	movff	frexp@value+1,?_frexp+1
  9433  014002  C062  F062         	movff	frexp@value+2,?_frexp+2
  9434  014006  C063  F063         	movff	frexp@value+3,?_frexp+3
  9435  01400A  0012               	return	
  9436  01400C                     __end_of_frexp:
  9437                           	opt stack 0
  9438                           tosu	equ	0xFFF
  9439                           tosh	equ	0xFFE
  9440                           tosl	equ	0xFFD
  9441                           pclath	equ	0xFFA
  9442                           tblptru	equ	0xFF8
  9443                           tblptrh	equ	0xFF7
  9444                           tblptrl	equ	0xFF6
  9445                           tablat	equ	0xFF5
  9446                           prodh	equ	0xFF4
  9447                           prodl	equ	0xFF3
  9448                           postinc0	equ	0xFEE
  9449                           wreg	equ	0xFE8
  9450                           postdec1	equ	0xFE5
  9451                           fsr1h	equ	0xFE2
  9452                           fsr1l	equ	0xFE1
  9453                           indf2	equ	0xFDF
  9454                           postinc2	equ	0xFDE
  9455                           postdec2	equ	0xFDD
  9456                           fsr2h	equ	0xFDA
  9457                           fsr2l	equ	0xFD9
  9458                           status	equ	0xFD8
  9459                           
  9460 ;; *************** function ___xxtofl *****************
  9461 ;; Defined at:
  9462 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\xxtofl.c"
  9463 ;; Parameters:    Size  Location     Type
  9464 ;;  sign            1    wreg     unsigned char 
  9465 ;;  val             4    0[BANK0 ] long 
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;  sign            1    8[BANK0 ] unsigned char 
  9468 ;;  arg             4   10[BANK0 ] unsigned long 
  9469 ;;  exp             1    9[BANK0 ] unsigned char 
  9470 ;; Return value:  Size  Location     Type
  9471 ;;                  4    0[BANK0 ] unsigned char 
  9472 ;; Registers used:
  9473 ;;		wreg, status,2, status,0
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9479 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9480 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;Total ram usage:       14 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    7
  9486 ;; This function calls:
  9487 ;;		Nothing
  9488 ;; This function is called by:
  9489 ;;		_ADCAverage
  9490 ;;		_pow
  9491 ;;		_exp
  9492 ;;		_floor
  9493 ;;		_log
  9494 ;;		_ADC_Voltage
  9495 ;;		_Move_ADC_To
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           	psect	text28
  9500  012D58                     __ptext28:
  9501                           	opt stack 0
  9502  012D58                     ___xxtofl:
  9503                           	opt stack 19
  9504                           
  9505                           ; BSR set to: 0
  9506                           ;incstack = 0
  9507                           ;___xxtofl@sign stored from wreg
  9508  012D58  0100               	movlb	0	; () banked
  9509  012D5A  6F68               	movwf	___xxtofl@sign& (0+255),b
  9510  012D5C  0100               	movlb	0	; () banked
  9511  012D5E  5168               	movf	___xxtofl@sign& (0+255),w,b
  9512  012D60  A4D8               	btfss	status,2,c
  9513                           
  9514                           ; BSR set to: 0
  9515  012D62  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
  9516  012D64  D01A               	goto	l3067
  9517                           
  9518                           ; BSR set to: 0
  9519  012D66  C060  F064         	movff	___xxtofl@val,??___xxtofl
  9520  012D6A  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
  9521  012D6E  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
  9522  012D72  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
  9523  012D76  1F64               	comf	??___xxtofl& (0+255),f,b
  9524  012D78  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
  9525  012D7A  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
  9526  012D7C  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
  9527  012D7E  2B64               	incf	??___xxtofl& (0+255),f,b
  9528  012D80  0E00               	movlw	0
  9529  012D82  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
  9530  012D84  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
  9531  012D86  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
  9532  012D88  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
  9533  012D8C  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
  9534  012D90  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
  9535  012D94  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
  9536  012D98  D008               	goto	l3068
  9537  012D9A                     l3067:
  9538                           
  9539                           ; BSR set to: 0
  9540  012D9A  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
  9541  012D9E  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
  9542  012DA2  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
  9543  012DA6  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
  9544  012DAA                     l3068:
  9545                           
  9546                           ; BSR set to: 0
  9547                           
  9548                           ; BSR set to: 0
  9549  012DAA  5160               	movf	___xxtofl@val& (0+255),w,b
  9550  012DAC  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
  9551  012DAE  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
  9552  012DB0  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
  9553  012DB2  A4D8               	btfss	status,2,c
  9554  012DB4  D009               	goto	l3069
  9555                           
  9556                           ; BSR set to: 0
  9557  012DB6  0E00               	movlw	0
  9558  012DB8  6F60               	movwf	?___xxtofl& (0+255),b
  9559  012DBA  0E00               	movlw	0
  9560  012DBC  6F61               	movwf	(?___xxtofl+1)& (0+255),b
  9561  012DBE  0E00               	movlw	0
  9562  012DC0  6F62               	movwf	(?___xxtofl+2)& (0+255),b
  9563  012DC2  0E00               	movlw	0
  9564  012DC4  6F63               	movwf	(?___xxtofl+3)& (0+255),b
  9565                           
  9566                           ; BSR set to: 0
  9567  012DC6  0012               	return	
  9568  012DC8                     l3069:
  9569                           
  9570                           ; BSR set to: 0
  9571                           
  9572                           ; BSR set to: 0
  9573  012DC8  0E96               	movlw	150
  9574  012DCA  6F69               	movwf	___xxtofl@exp& (0+255),b
  9575  012DCC  D006               	goto	l3071
  9576  012DCE                     
  9577                           ; BSR set to: 0
  9578                           
  9579                           ; BSR set to: 0
  9580  012DCE  2B69               	incf	___xxtofl@exp& (0+255),f,b
  9581  012DD0  90D8               	bcf	status,0,c
  9582  012DD2  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
  9583  012DD4  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
  9584  012DD6  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
  9585  012DD8  336A               	rrcf	___xxtofl@arg& (0+255),f,b
  9586  012DDA                     l3071:
  9587                           
  9588                           ; BSR set to: 0
  9589                           
  9590                           ; BSR set to: 0
  9591  012DDA  0E00               	movlw	0
  9592  012DDC  156A               	andwf	___xxtofl@arg& (0+255),w,b
  9593  012DDE  6F64               	movwf	??___xxtofl& (0+255),b
  9594  012DE0  0E00               	movlw	0
  9595  012DE2  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
  9596  012DE4  6F65               	movwf	(??___xxtofl+1)& (0+255),b
  9597  012DE6  0E00               	movlw	0
  9598  012DE8  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
  9599  012DEA  6F66               	movwf	(??___xxtofl+2)& (0+255),b
  9600  012DEC  0EFE               	movlw	254
  9601  012DEE  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
  9602  012DF0  6F67               	movwf	(??___xxtofl+3)& (0+255),b
  9603  012DF2  5164               	movf	??___xxtofl& (0+255),w,b
  9604  012DF4  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
  9605  012DF6  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
  9606  012DF8  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
  9607  012DFA  B4D8               	btfsc	status,2,c
  9608  012DFC  D00D               	goto	l3074
  9609  012DFE  D7E7               	goto	l3072
  9610  012E00                     
  9611                           ; BSR set to: 0
  9612                           
  9613                           ; BSR set to: 0
  9614  012E00  2B69               	incf	___xxtofl@exp& (0+255),f,b
  9615                           
  9616                           ; BSR set to: 0
  9617  012E02  0E01               	movlw	1
  9618  012E04  276A               	addwf	___xxtofl@arg& (0+255),f,b
  9619  012E06  0E00               	movlw	0
  9620  012E08  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
  9621  012E0A  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
  9622  012E0C  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
  9623                           
  9624                           ; BSR set to: 0
  9625  012E0E  90D8               	bcf	status,0,c
  9626  012E10  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
  9627  012E12  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
  9628  012E14  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
  9629  012E16  336A               	rrcf	___xxtofl@arg& (0+255),f,b
  9630  012E18                     l3074:
  9631                           
  9632                           ; BSR set to: 0
  9633  012E18  0E00               	movlw	0
  9634  012E1A  156A               	andwf	___xxtofl@arg& (0+255),w,b
  9635  012E1C  6F64               	movwf	??___xxtofl& (0+255),b
  9636  012E1E  0E00               	movlw	0
  9637  012E20  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
  9638  012E22  6F65               	movwf	(??___xxtofl+1)& (0+255),b
  9639  012E24  0E00               	movlw	0
  9640  012E26  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
  9641  012E28  6F66               	movwf	(??___xxtofl+2)& (0+255),b
  9642  012E2A  0EFF               	movlw	255
  9643  012E2C  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
  9644  012E2E  6F67               	movwf	(??___xxtofl+3)& (0+255),b
  9645  012E30  5164               	movf	??___xxtofl& (0+255),w,b
  9646  012E32  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
  9647  012E34  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
  9648  012E36  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
  9649  012E38  B4D8               	btfsc	status,2,c
  9650  012E3A  D007               	goto	l3077
  9651  012E3C  D7E1               	goto	l3075
  9652  012E3E                     
  9653                           ; BSR set to: 0
  9654                           
  9655                           ; BSR set to: 0
  9656  012E3E  0769               	decf	___xxtofl@exp& (0+255),f,b
  9657  012E40  90D8               	bcf	status,0,c
  9658  012E42  376A               	rlcf	___xxtofl@arg& (0+255),f,b
  9659  012E44  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
  9660  012E46  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
  9661  012E48  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
  9662  012E4A                     l3077:
  9663                           
  9664                           ; BSR set to: 0
  9665                           
  9666                           ; BSR set to: 0
  9667  012E4A  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
  9668  012E4C  D003               	goto	u11270
  9669                           
  9670                           ; BSR set to: 0
  9671  012E4E  0E02               	movlw	2
  9672  012E50  6169               	cpfslt	___xxtofl@exp& (0+255),b
  9673  012E52  D7F5               	goto	l3078
  9674  012E54                     u11270:
  9675                           
  9676                           ; BSR set to: 0
  9677                           
  9678                           ; BSR set to: 0
  9679  012E54  B169               	btfsc	___xxtofl@exp& (0+255),0,b
  9680  012E56  D008               	goto	l3082
  9681                           
  9682                           ; BSR set to: 0
  9683  012E58  0EFF               	movlw	255
  9684  012E5A  176A               	andwf	___xxtofl@arg& (0+255),f,b
  9685  012E5C  0EFF               	movlw	255
  9686  012E5E  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
  9687  012E60  0E7F               	movlw	127
  9688  012E62  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
  9689  012E64  0EFF               	movlw	255
  9690  012E66  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
  9691  012E68                     l3082:
  9692                           
  9693                           ; BSR set to: 0
  9694  012E68  90D8               	bcf	status,0,c
  9695  012E6A  3369               	rrcf	___xxtofl@exp& (0+255),f,b
  9696  012E6C  C069  F064         	movff	___xxtofl@exp,??___xxtofl
  9697  012E70  6B65               	clrf	(??___xxtofl+1)& (0+255),b
  9698  012E72  6B66               	clrf	(??___xxtofl+2)& (0+255),b
  9699  012E74  6B67               	clrf	(??___xxtofl+3)& (0+255),b
  9700  012E76  C064  F067         	movff	??___xxtofl,??___xxtofl+3
  9701  012E7A  6B66               	clrf	(??___xxtofl+2)& (0+255),b
  9702  012E7C  6B65               	clrf	(??___xxtofl+1)& (0+255),b
  9703  012E7E  6B64               	clrf	??___xxtofl& (0+255),b
  9704  012E80  5164               	movf	??___xxtofl& (0+255),w,b
  9705  012E82  136A               	iorwf	___xxtofl@arg& (0+255),f,b
  9706  012E84  5165               	movf	(??___xxtofl+1)& (0+255),w,b
  9707  012E86  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
  9708  012E88  5166               	movf	(??___xxtofl+2)& (0+255),w,b
  9709  012E8A  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
  9710  012E8C  5167               	movf	(??___xxtofl+3)& (0+255),w,b
  9711  012E8E  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
  9712                           
  9713                           ; BSR set to: 0
  9714  012E90  5168               	movf	___xxtofl@sign& (0+255),w,b
  9715  012E92  A4D8               	btfss	status,2,c
  9716                           
  9717                           ; BSR set to: 0
  9718  012E94  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
  9719  012E96  D001               	goto	l3083
  9720                           
  9721                           ; BSR set to: 0
  9722  012E98  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
  9723  012E9A                     l3083:
  9724                           
  9725                           ; BSR set to: 0
  9726                           
  9727                           ; BSR set to: 0
  9728  012E9A  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
  9729  012E9E  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
  9730  012EA2  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
  9731  012EA6  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
  9732  012EAA  0012               	return	
  9733  012EAC                     __end_of___xxtofl:
  9734                           	opt stack 0
  9735                           tosu	equ	0xFFF
  9736                           tosh	equ	0xFFE
  9737                           tosl	equ	0xFFD
  9738                           pclath	equ	0xFFA
  9739                           tblptru	equ	0xFF8
  9740                           tblptrh	equ	0xFF7
  9741                           tblptrl	equ	0xFF6
  9742                           tablat	equ	0xFF5
  9743                           prodh	equ	0xFF4
  9744                           prodl	equ	0xFF3
  9745                           postinc0	equ	0xFEE
  9746                           wreg	equ	0xFE8
  9747                           postdec1	equ	0xFE5
  9748                           fsr1h	equ	0xFE2
  9749                           fsr1l	equ	0xFE1
  9750                           indf2	equ	0xFDF
  9751                           postinc2	equ	0xFDE
  9752                           postdec2	equ	0xFDD
  9753                           fsr2h	equ	0xFDA
  9754                           fsr2l	equ	0xFD9
  9755                           status	equ	0xFD8
  9756                           
  9757 ;; *************** function ___fltol *****************
  9758 ;; Defined at:
  9759 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fltol.c"
  9760 ;; Parameters:    Size  Location     Type
  9761 ;;  f1              4   63[BANK0 ] unsigned char 
  9762 ;; Auto vars:     Size  Location     Type
  9763 ;;  exp1            1   72[BANK0 ] unsigned char 
  9764 ;;  sign1           1   71[BANK0 ] unsigned char 
  9765 ;; Return value:  Size  Location     Type
  9766 ;;                  4   63[BANK0 ] long 
  9767 ;; Registers used:
  9768 ;;		wreg, status,2, status,0
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9774 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9776 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;Total ram usage:       10 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; Hardware stack levels required when called:    7
  9781 ;; This function calls:
  9782 ;;		Nothing
  9783 ;; This function is called by:
  9784 ;;		_ADCAverage
  9785 ;;		_pow
  9786 ;;		_exp
  9787 ;;		_floor
  9788 ;;		_Move_ADC_To
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           	psect	text29
  9793  013B1E                     __ptext29:
  9794                           	opt stack 0
  9795  013B1E                     ___fltol:
  9796                           	opt stack 18
  9797                           
  9798                           ; BSR set to: 0
  9799                           ;incstack = 0
  9800  013B1E  0100               	movlb	0	; () banked
  9801  013B20  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
  9802  013B22  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
  9803  013B24  6FA8               	movwf	___fltol@exp1& (0+255),b
  9804  013B26  51A8               	movf	___fltol@exp1& (0+255),w,b
  9805  013B28  A4D8               	btfss	status,2,c
  9806  013B2A  D009               	goto	l2734
  9807                           
  9808                           ; BSR set to: 0
  9809  013B2C  0E00               	movlw	0
  9810  013B2E  6F9F               	movwf	?___fltol& (0+255),b
  9811  013B30  0E00               	movlw	0
  9812  013B32  6FA0               	movwf	(?___fltol+1)& (0+255),b
  9813  013B34  0E00               	movlw	0
  9814  013B36  6FA1               	movwf	(?___fltol+2)& (0+255),b
  9815  013B38  0E00               	movlw	0
  9816  013B3A  6FA2               	movwf	(?___fltol+3)& (0+255),b
  9817                           
  9818                           ; BSR set to: 0
  9819  013B3C  0012               	return	
  9820  013B3E                     l2734:
  9821                           
  9822                           ; BSR set to: 0
  9823                           
  9824                           ; BSR set to: 0
  9825  013B3E  C09F  F0A3         	movff	___fltol@f1,??___fltol
  9826  013B42  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
  9827  013B46  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
  9828  013B4A  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
  9829  013B4E  0E20               	movlw	32
  9830  013B50  D005               	goto	u11090
  9831  013B52                     u11095:
  9832  013B52  90D8               	bcf	status,0,c
  9833  013B54  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
  9834  013B56  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
  9835  013B58  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
  9836  013B5A  33A3               	rrcf	??___fltol& (0+255),f,b
  9837  013B5C                     u11090:
  9838  013B5C  2EE8               	decfsz	wreg,f,c
  9839  013B5E  D7F9               	goto	u11095
  9840  013B60  51A3               	movf	??___fltol& (0+255),w,b
  9841  013B62  6FA7               	movwf	___fltol@sign1& (0+255),b
  9842                           
  9843                           ; BSR set to: 0
  9844  013B64  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
  9845                           
  9846                           ; BSR set to: 0
  9847  013B66  0EFF               	movlw	255
  9848  013B68  179F               	andwf	___fltol@f1& (0+255),f,b
  9849  013B6A  0EFF               	movlw	255
  9850  013B6C  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
  9851  013B6E  0EFF               	movlw	255
  9852  013B70  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
  9853  013B72  0E00               	movlw	0
  9854  013B74  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
  9855                           
  9856                           ; BSR set to: 0
  9857  013B76  0E96               	movlw	150
  9858  013B78  5FA8               	subwf	___fltol@exp1& (0+255),f,b
  9859                           
  9860                           ; BSR set to: 0
  9861  013B7A  AFA8               	btfss	___fltol@exp1& (0+255),7,b
  9862  013B7C  D016               	goto	l2736
  9863                           
  9864                           ; BSR set to: 0
  9865  013B7E  51A8               	movf	___fltol@exp1& (0+255),w,b
  9866  013B80  0A80               	xorlw	128
  9867  013B82  0F97               	addlw	151
  9868  013B84  B0D8               	btfsc	status,0,c
  9869  013B86  D009               	goto	l2737
  9870                           
  9871                           ; BSR set to: 0
  9872  013B88  0E00               	movlw	0
  9873  013B8A  6F9F               	movwf	?___fltol& (0+255),b
  9874  013B8C  0E00               	movlw	0
  9875  013B8E  6FA0               	movwf	(?___fltol+1)& (0+255),b
  9876  013B90  0E00               	movlw	0
  9877  013B92  6FA1               	movwf	(?___fltol+2)& (0+255),b
  9878  013B94  0E00               	movlw	0
  9879  013B96  6FA2               	movwf	(?___fltol+3)& (0+255),b
  9880                           
  9881                           ; BSR set to: 0
  9882  013B98  0012               	return	
  9883  013B9A                     l2737:
  9884                           
  9885                           ; BSR set to: 0
  9886                           
  9887                           ; BSR set to: 0
  9888                           
  9889                           ; BSR set to: 0
  9890  013B9A  90D8               	bcf	status,0,c
  9891  013B9C  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9892  013B9E  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9893  013BA0  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9894  013BA2  339F               	rrcf	___fltol@f1& (0+255),f,b
  9895                           
  9896                           ; BSR set to: 0
  9897  013BA4  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
  9898  013BA6  D7F9               	goto	l2737
  9899                           
  9900                           ; BSR set to: 0
  9901  013BA8  D015               	goto	u11130
  9902  013BAA                     l2736:
  9903                           
  9904                           ; BSR set to: 0
  9905                           
  9906                           ; BSR set to: 0
  9907  013BAA  0E1F               	movlw	31
  9908  013BAC  65A8               	cpfsgt	___fltol@exp1& (0+255),b
  9909  013BAE  D00F               	goto	l2742
  9910                           
  9911                           ; BSR set to: 0
  9912  013BB0  0E00               	movlw	0
  9913  013BB2  6F9F               	movwf	?___fltol& (0+255),b
  9914  013BB4  0E00               	movlw	0
  9915  013BB6  6FA0               	movwf	(?___fltol+1)& (0+255),b
  9916  013BB8  0E00               	movlw	0
  9917  013BBA  6FA1               	movwf	(?___fltol+2)& (0+255),b
  9918  013BBC  0E00               	movlw	0
  9919  013BBE  6FA2               	movwf	(?___fltol+3)& (0+255),b
  9920                           
  9921                           ; BSR set to: 0
  9922  013BC0  0012               	return	
  9923  013BC2                     
  9924                           ; BSR set to: 0
  9925                           
  9926                           ; BSR set to: 0
  9927  013BC2  90D8               	bcf	status,0,c
  9928  013BC4  379F               	rlcf	___fltol@f1& (0+255),f,b
  9929  013BC6  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9930  013BC8  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9931  013BCA  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9932  013BCC  07A8               	decf	___fltol@exp1& (0+255),f,b
  9933  013BCE                     l2742:
  9934                           
  9935                           ; BSR set to: 0
  9936                           
  9937                           ; BSR set to: 0
  9938  013BCE  51A8               	movf	___fltol@exp1& (0+255),w,b
  9939  013BD0  A4D8               	btfss	status,2,c
  9940  013BD2  D7F7               	goto	l2743
  9941  013BD4                     u11130:
  9942                           
  9943                           ; BSR set to: 0
  9944                           
  9945                           ; BSR set to: 0
  9946                           
  9947                           ; BSR set to: 0
  9948  013BD4  51A7               	movf	___fltol@sign1& (0+255),w,b
  9949  013BD6  B4D8               	btfsc	status,2,c
  9950  013BD8  D008               	goto	l2745
  9951                           
  9952                           ; BSR set to: 0
  9953  013BDA  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
  9954  013BDC  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
  9955  013BDE  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
  9956  013BE0  6D9F               	negf	___fltol@f1& (0+255),b
  9957  013BE2  0E00               	movlw	0
  9958  013BE4  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9959  013BE6  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9960  013BE8  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9961  013BEA                     l2745:
  9962                           
  9963                           ; BSR set to: 0
  9964                           
  9965                           ; BSR set to: 0
  9966  013BEA  C09F  F09F         	movff	___fltol@f1,?___fltol
  9967  013BEE  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
  9968  013BF2  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
  9969  013BF6  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
  9970  013BFA  0012               	return	
  9971  013BFC                     __end_of___fltol:
  9972                           	opt stack 0
  9973                           tosu	equ	0xFFF
  9974                           tosh	equ	0xFFE
  9975                           tosl	equ	0xFFD
  9976                           pclath	equ	0xFFA
  9977                           tblptru	equ	0xFF8
  9978                           tblptrh	equ	0xFF7
  9979                           tblptrl	equ	0xFF6
  9980                           tablat	equ	0xFF5
  9981                           prodh	equ	0xFF4
  9982                           prodl	equ	0xFF3
  9983                           postinc0	equ	0xFEE
  9984                           wreg	equ	0xFE8
  9985                           postdec1	equ	0xFE5
  9986                           fsr1h	equ	0xFE2
  9987                           fsr1l	equ	0xFE1
  9988                           indf2	equ	0xFDF
  9989                           postinc2	equ	0xFDE
  9990                           postdec2	equ	0xFDD
  9991                           fsr2h	equ	0xFDA
  9992                           fsr2l	equ	0xFD9
  9993                           status	equ	0xFD8
  9994                           
  9995 ;; *************** function ___flge *****************
  9996 ;; Defined at:
  9997 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flge.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;  ff1             4    0[BANK0 ] long 
 10000 ;;  ff2             4    4[BANK0 ] long 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;		None
 10003 ;; Return value:  Size  Location     Type
 10004 ;;		None               void
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10012 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;Total ram usage:       12 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    7
 10019 ;; This function calls:
 10020 ;;		Nothing
 10021 ;; This function is called by:
 10022 ;;		_pow
 10023 ;;		_exp
 10024 ;;		_floor
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028                           	psect	text30
 10029  0134F4                     __ptext30:
 10030                           	opt stack 0
 10031  0134F4                     ___flge:
 10032                           	opt stack 18
 10033                           
 10034                           ; BSR set to: 0
 10035                           ;incstack = 0
 10036  0134F4  0E00               	movlw	0
 10037  0134F6  0100               	movlb	0	; () banked
 10038  0134F8  1560               	andwf	___flge@ff1& (0+255),w,b
 10039  0134FA  6F68               	movwf	??___flge& (0+255),b
 10040  0134FC  0E00               	movlw	0
 10041  0134FE  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 10042  013500  6F69               	movwf	(??___flge+1)& (0+255),b
 10043  013502  0E80               	movlw	128
 10044  013504  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 10045  013506  6F6A               	movwf	(??___flge+2)& (0+255),b
 10046  013508  0E7F               	movlw	127
 10047  01350A  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 10048  01350C  6F6B               	movwf	(??___flge+3)& (0+255),b
 10049  01350E  5168               	movf	??___flge& (0+255),w,b
 10050  013510  1169               	iorwf	(??___flge+1)& (0+255),w,b
 10051  013512  116A               	iorwf	(??___flge+2)& (0+255),w,b
 10052  013514  116B               	iorwf	(??___flge+3)& (0+255),w,b
 10053  013516  A4D8               	btfss	status,2,c
 10054  013518  D008               	goto	l2704
 10055                           
 10056                           ; BSR set to: 0
 10057  01351A  0E00               	movlw	0
 10058  01351C  6F60               	movwf	___flge@ff1& (0+255),b
 10059  01351E  0E00               	movlw	0
 10060  013520  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 10061  013522  0E00               	movlw	0
 10062  013524  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 10063  013526  0E00               	movlw	0
 10064  013528  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 10065  01352A                     l2704:
 10066                           
 10067                           ; BSR set to: 0
 10068                           
 10069                           ; BSR set to: 0
 10070  01352A  0E00               	movlw	0
 10071  01352C  1564               	andwf	___flge@ff2& (0+255),w,b
 10072  01352E  6F68               	movwf	??___flge& (0+255),b
 10073  013530  0E00               	movlw	0
 10074  013532  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 10075  013534  6F69               	movwf	(??___flge+1)& (0+255),b
 10076  013536  0E80               	movlw	128
 10077  013538  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 10078  01353A  6F6A               	movwf	(??___flge+2)& (0+255),b
 10079  01353C  0E7F               	movlw	127
 10080  01353E  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 10081  013540  6F6B               	movwf	(??___flge+3)& (0+255),b
 10082  013542  5168               	movf	??___flge& (0+255),w,b
 10083  013544  1169               	iorwf	(??___flge+1)& (0+255),w,b
 10084  013546  116A               	iorwf	(??___flge+2)& (0+255),w,b
 10085  013548  116B               	iorwf	(??___flge+3)& (0+255),w,b
 10086  01354A  A4D8               	btfss	status,2,c
 10087  01354C  D008               	goto	l2705
 10088                           
 10089                           ; BSR set to: 0
 10090  01354E  0E00               	movlw	0
 10091  013550  6F64               	movwf	___flge@ff2& (0+255),b
 10092  013552  0E00               	movlw	0
 10093  013554  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 10094  013556  0E00               	movlw	0
 10095  013558  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 10096  01355A  0E00               	movlw	0
 10097  01355C  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 10098  01355E                     l2705:
 10099                           
 10100                           ; BSR set to: 0
 10101                           
 10102                           ; BSR set to: 0
 10103  01355E  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 10104  013560  D01D               	goto	l2706
 10105                           
 10106                           ; BSR set to: 0
 10107  013562  C060  F068         	movff	___flge@ff1,??___flge
 10108  013566  C061  F069         	movff	___flge@ff1+1,??___flge+1
 10109  01356A  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 10110  01356E  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 10111  013572  1F68               	comf	??___flge& (0+255),f,b
 10112  013574  1F69               	comf	(??___flge+1)& (0+255),f,b
 10113  013576  1F6A               	comf	(??___flge+2)& (0+255),f,b
 10114  013578  1F6B               	comf	(??___flge+3)& (0+255),f,b
 10115  01357A  2B68               	incf	??___flge& (0+255),f,b
 10116  01357C  0E00               	movlw	0
 10117  01357E  2369               	addwfc	(??___flge+1)& (0+255),f,b
 10118  013580  236A               	addwfc	(??___flge+2)& (0+255),f,b
 10119  013582  236B               	addwfc	(??___flge+3)& (0+255),f,b
 10120  013584  0E00               	movlw	0
 10121  013586  2568               	addwf	??___flge& (0+255),w,b
 10122  013588  6F60               	movwf	___flge@ff1& (0+255),b
 10123  01358A  0E00               	movlw	0
 10124  01358C  2169               	addwfc	(??___flge+1)& (0+255),w,b
 10125  01358E  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 10126  013590  0E00               	movlw	0
 10127  013592  216A               	addwfc	(??___flge+2)& (0+255),w,b
 10128  013594  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 10129  013596  0E80               	movlw	128
 10130  013598  216B               	addwfc	(??___flge+3)& (0+255),w,b
 10131  01359A  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 10132  01359C                     l2706:
 10133                           
 10134                           ; BSR set to: 0
 10135                           
 10136                           ; BSR set to: 0
 10137  01359C  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 10138  01359E  D01D               	goto	l2707
 10139                           
 10140                           ; BSR set to: 0
 10141  0135A0  C064  F068         	movff	___flge@ff2,??___flge
 10142  0135A4  C065  F069         	movff	___flge@ff2+1,??___flge+1
 10143  0135A8  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 10144  0135AC  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 10145  0135B0  1F68               	comf	??___flge& (0+255),f,b
 10146  0135B2  1F69               	comf	(??___flge+1)& (0+255),f,b
 10147  0135B4  1F6A               	comf	(??___flge+2)& (0+255),f,b
 10148  0135B6  1F6B               	comf	(??___flge+3)& (0+255),f,b
 10149  0135B8  2B68               	incf	??___flge& (0+255),f,b
 10150  0135BA  0E00               	movlw	0
 10151  0135BC  2369               	addwfc	(??___flge+1)& (0+255),f,b
 10152  0135BE  236A               	addwfc	(??___flge+2)& (0+255),f,b
 10153  0135C0  236B               	addwfc	(??___flge+3)& (0+255),f,b
 10154  0135C2  0E00               	movlw	0
 10155  0135C4  2568               	addwf	??___flge& (0+255),w,b
 10156  0135C6  6F64               	movwf	___flge@ff2& (0+255),b
 10157  0135C8  0E00               	movlw	0
 10158  0135CA  2169               	addwfc	(??___flge+1)& (0+255),w,b
 10159  0135CC  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 10160  0135CE  0E00               	movlw	0
 10161  0135D0  216A               	addwfc	(??___flge+2)& (0+255),w,b
 10162  0135D2  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 10163  0135D4  0E80               	movlw	128
 10164  0135D6  216B               	addwfc	(??___flge+3)& (0+255),w,b
 10165  0135D8  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 10166  0135DA                     l2707:
 10167                           
 10168                           ; BSR set to: 0
 10169  0135DA  0E00               	movlw	0
 10170  0135DC  1B60               	xorwf	___flge@ff1& (0+255),f,b
 10171  0135DE  0E00               	movlw	0
 10172  0135E0  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 10173  0135E2  0E00               	movlw	0
 10174  0135E4  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 10175  0135E6  0E80               	movlw	128
 10176  0135E8  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 10177  0135EA  0E00               	movlw	0
 10178  0135EC  1B64               	xorwf	___flge@ff2& (0+255),f,b
 10179  0135EE  0E00               	movlw	0
 10180  0135F0  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 10181  0135F2  0E00               	movlw	0
 10182  0135F4  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 10183  0135F6  0E80               	movlw	128
 10184  0135F8  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 10185  0135FA  5164               	movf	___flge@ff2& (0+255),w,b
 10186  0135FC  5D60               	subwf	___flge@ff1& (0+255),w,b
 10187  0135FE  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 10188  013600  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 10189  013602  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 10190  013604  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 10191  013606  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 10192  013608  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 10193  01360A  B0D8               	btfsc	status,0,c
 10194  01360C  D002               	goto	l12877
 10195                           
 10196                           ; BSR set to: 0
 10197  01360E  90D8               	bcf	status,0,c
 10198  013610  0012               	return	
 10199  013612                     l12877:
 10200                           
 10201                           ; BSR set to: 0
 10202                           
 10203                           ; BSR set to: 0
 10204  013612  80D8               	bsf	status,0,c
 10205                           
 10206                           ; BSR set to: 0
 10207  013614  0012               	return	
 10208  013616                     __end_of___flge:
 10209                           	opt stack 0
 10210                           tosu	equ	0xFFF
 10211                           tosh	equ	0xFFE
 10212                           tosl	equ	0xFFD
 10213                           pclath	equ	0xFFA
 10214                           tblptru	equ	0xFF8
 10215                           tblptrh	equ	0xFF7
 10216                           tblptrl	equ	0xFF6
 10217                           tablat	equ	0xFF5
 10218                           prodh	equ	0xFF4
 10219                           prodl	equ	0xFF3
 10220                           postinc0	equ	0xFEE
 10221                           wreg	equ	0xFE8
 10222                           postdec1	equ	0xFE5
 10223                           fsr1h	equ	0xFE2
 10224                           fsr1l	equ	0xFE1
 10225                           indf2	equ	0xFDF
 10226                           postinc2	equ	0xFDE
 10227                           postdec2	equ	0xFDD
 10228                           fsr2h	equ	0xFDA
 10229                           fsr2l	equ	0xFD9
 10230                           status	equ	0xFD8
 10231                           
 10232 ;; *************** function _eval_poly *****************
 10233 ;; Defined at:
 10234 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
 10235 ;; Parameters:    Size  Location     Type
 10236 ;;  x               4   63[BANK0 ] long 
 10237 ;;  d               2   67[BANK0 ] PTR const 
 10238 ;;		 -> log@coeff(36), exp@coeff(40), 
 10239 ;;  n               2   69[BANK0 ] int 
 10240 ;; Auto vars:     Size  Location     Type
 10241 ;;  res             4   75[BANK0 ] int 
 10242 ;; Return value:  Size  Location     Type
 10243 ;;                  4   63[BANK0 ] int 
 10244 ;; Registers used:
 10245 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10246 ;; Tracked objects:
 10247 ;;		On entry : 0/0
 10248 ;;		On exit  : 0/0
 10249 ;;		Unchanged: 0/0
 10250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10251 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10252 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10253 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10254 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10255 ;;Total ram usage:       16 bytes
 10256 ;; Hardware stack levels used:    1
 10257 ;; Hardware stack levels required when called:    8
 10258 ;; This function calls:
 10259 ;;		___fladd
 10260 ;;		___flmul
 10261 ;; This function is called by:
 10262 ;;		_exp
 10263 ;;		_log
 10264 ;; This function uses a non-reentrant model
 10265 ;;
 10266                           
 10267                           	psect	text31
 10268  01383A                     __ptext31:
 10269                           	opt stack 0
 10270  01383A                     _eval_poly:
 10271                           	opt stack 18
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;incstack = 0
 10275  01383A  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 10276  01383E  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 10277  013842  0100               	movlb	0	; () banked
 10278  013844  90D8               	bcf	status,0,c
 10279  013846  37A7               	rlcf	??_eval_poly& (0+255),f,b
 10280  013848  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 10281  01384A  90D8               	bcf	status,0,c
 10282  01384C  37A7               	rlcf	??_eval_poly& (0+255),f,b
 10283  01384E  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 10284  013850  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 10285  013854  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 10286  013858  51A7               	movf	??_eval_poly& (0+255),w,b
 10287  01385A  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 10288  01385C  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 10289  01385E  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 10290  013860  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 10291  013864  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 10292  013868                     	if	0	;tblptru may be non-zero
 10293  013868                     	endif
 10294  013868                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10295  013868  0E00               	movlw	low (__mediumconst shr (0+16))
 10296  01386A  6EF8               	movwf	tblptru,c
 10297  01386C                     	endif
 10298  01386C  0009               	tblrd		*+
 10299  01386E  CFF5 F0AB          	movff	tablat,eval_poly@res
 10300  013872  0009               	tblrd		*+
 10301  013874  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 10302  013878  0009               	tblrd		*+
 10303  01387A  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 10304  01387E  000A               	tblrd		*-
 10305  013880  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 10306  013884  D04C               	goto	l3148
 10307  013886                     
 10308                           ; BSR set to: 0
 10309                           
 10310                           ; BSR set to: 0
 10311  013886  C0AB  F072         	movff	eval_poly@res,___flmul@a
 10312  01388A  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 10313  01388E  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 10314  013892  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 10315  013896  C09F  F06E         	movff	eval_poly@x,___flmul@b
 10316  01389A  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 10317  01389E  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 10318  0138A2  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 10319  0138A6  EC61  F084         	call	___flmul	;wreg free
 10320  0138AA  C06E  F08B         	movff	?___flmul,___fladd@b
 10321  0138AE  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 10322  0138B2  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 10323  0138B6  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 10324  0138BA  0100               	movlb	0	; () banked
 10325  0138BC  07A5               	decf	eval_poly@n& (0+255),f,b
 10326  0138BE  A0D8               	btfss	status,0,c
 10327  0138C0  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 10328  0138C2  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 10329  0138C6  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 10330  0138CA  90D8               	bcf	status,0,c
 10331  0138CC  37A7               	rlcf	??_eval_poly& (0+255),f,b
 10332  0138CE  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 10333  0138D0  90D8               	bcf	status,0,c
 10334  0138D2  37A7               	rlcf	??_eval_poly& (0+255),f,b
 10335  0138D4  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 10336  0138D6  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 10337  0138DA  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 10338  0138DE  51A7               	movf	??_eval_poly& (0+255),w,b
 10339  0138E0  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 10340  0138E2  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 10341  0138E4  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 10342  0138E6  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 10343  0138EA  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 10344  0138EE                     	if	0	;tblptru may be non-zero
 10345  0138EE                     	endif
 10346  0138EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10347  0138EE  0E00               	movlw	low (__mediumconst shr (0+16))
 10348  0138F0  6EF8               	movwf	tblptru,c
 10349  0138F2                     	endif
 10350  0138F2  0009               	tblrd		*+
 10351  0138F4  CFF5 F08F          	movff	tablat,___fladd@a
 10352  0138F8  0009               	tblrd		*+
 10353  0138FA  CFF5 F090          	movff	tablat,___fladd@a+1
 10354  0138FE  0009               	tblrd		*+
 10355  013900  CFF5 F091          	movff	tablat,___fladd@a+2
 10356  013904  000A               	tblrd		*-
 10357  013906  CFF5 F092          	movff	tablat,___fladd@a+3
 10358  01390A  EC0A  F086         	call	___fladd	;wreg free
 10359  01390E  C08B  F0AB         	movff	?___fladd,eval_poly@res
 10360  013912  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 10361  013916  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 10362  01391A  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 10363  01391E                     l3148:
 10364  01391E  0100               	movlb	0	; () banked
 10365  013920  51A5               	movf	eval_poly@n& (0+255),w,b
 10366  013922  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 10367  013924  A4D8               	btfss	status,2,c
 10368  013926  D7AF               	goto	l3149
 10369                           
 10370                           ; BSR set to: 0
 10371  013928  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 10372  01392C  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 10373  013930  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 10374  013934  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 10375                           
 10376                           ; BSR set to: 0
 10377  013938  0012               	return		;funcret
 10378  01393A                     __end_of_eval_poly:
 10379                           	opt stack 0
 10380                           tosu	equ	0xFFF
 10381                           tosh	equ	0xFFE
 10382                           tosl	equ	0xFFD
 10383                           pclath	equ	0xFFA
 10384                           tblptru	equ	0xFF8
 10385                           tblptrh	equ	0xFF7
 10386                           tblptrl	equ	0xFF6
 10387                           tablat	equ	0xFF5
 10388                           prodh	equ	0xFF4
 10389                           prodl	equ	0xFF3
 10390                           postinc0	equ	0xFEE
 10391                           wreg	equ	0xFE8
 10392                           postdec1	equ	0xFE5
 10393                           fsr1h	equ	0xFE2
 10394                           fsr1l	equ	0xFE1
 10395                           indf2	equ	0xFDF
 10396                           postinc2	equ	0xFDE
 10397                           postdec2	equ	0xFDD
 10398                           fsr2h	equ	0xFDA
 10399                           fsr2l	equ	0xFD9
 10400                           status	equ	0xFD8
 10401                           
 10402 ;; *************** function ___flmul *****************
 10403 ;; Defined at:
 10404 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcmul.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;  b               4   14[BANK0 ] int 
 10407 ;;  a               4   18[BANK0 ] int 
 10408 ;; Auto vars:     Size  Location     Type
 10409 ;;  prod            4   33[BANK0 ] struct .
 10410 ;;  grs             4   28[BANK0 ] unsigned long 
 10411 ;;  temp            2   37[BANK0 ] struct .
 10412 ;;  bexp            1   32[BANK0 ] unsigned char 
 10413 ;;  aexp            1   27[BANK0 ] unsigned char 
 10414 ;;  sign            1   26[BANK0 ] unsigned char 
 10415 ;; Return value:  Size  Location     Type
 10416 ;;                  4   14[BANK0 ] unsigned char 
 10417 ;; Registers used:
 10418 ;;		wreg, status,2, status,0, prodl, prodh
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10424 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10425 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10426 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;Total ram usage:       25 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    7
 10431 ;; This function calls:
 10432 ;;		Nothing
 10433 ;; This function is called by:
 10434 ;;		_ADCAverage
 10435 ;;		_pow
 10436 ;;		_exp
 10437 ;;		_log
 10438 ;;		_eval_poly
 10439 ;;		_ADC_Voltage
 10440 ;;		_Move_ADC_To
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           	psect	text32
 10445  0108C2                     __ptext32:
 10446                           	opt stack 0
 10447  0108C2                     ___flmul:
 10448                           	opt stack 18
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;incstack = 0
 10452  0108C2  0100               	movlb	0	; () banked
 10453  0108C4  5171               	movf	(___flmul@b+3)& (0+255),w,b
 10454  0108C6  0B80               	andlw	128
 10455  0108C8  6F7A               	movwf	___flmul@sign& (0+255),b
 10456  0108CA  5171               	movf	(___flmul@b+3)& (0+255),w,b
 10457  0108CC  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 10458  0108CE  6F80               	movwf	___flmul@bexp& (0+255),b
 10459                           
 10460                           ; BSR set to: 0
 10461  0108D0  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 10462                           
 10463                           ; BSR set to: 0
 10464  0108D2  8180               	bsf	___flmul@bexp& (0+255),0,b
 10465                           
 10466                           ; BSR set to: 0
 10467                           
 10468                           ; BSR set to: 0
 10469  0108D4  5180               	movf	___flmul@bexp& (0+255),w,b
 10470  0108D6  B4D8               	btfsc	status,2,c
 10471  0108D8  D00D               	goto	l3039
 10472                           
 10473                           ; BSR set to: 0
 10474  0108DA  2980               	incf	___flmul@bexp& (0+255),w,b
 10475  0108DC  A4D8               	btfss	status,2,c
 10476  0108DE  D008               	goto	l3040
 10477                           
 10478                           ; BSR set to: 0
 10479  0108E0  0E00               	movlw	0
 10480  0108E2  6F6E               	movwf	___flmul@b& (0+255),b
 10481  0108E4  0E00               	movlw	0
 10482  0108E6  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 10483  0108E8  0E00               	movlw	0
 10484  0108EA  6F70               	movwf	(___flmul@b+2)& (0+255),b
 10485  0108EC  0E00               	movlw	0
 10486  0108EE  6F71               	movwf	(___flmul@b+3)& (0+255),b
 10487  0108F0                     l3040:
 10488                           
 10489                           ; BSR set to: 0
 10490                           
 10491                           ; BSR set to: 0
 10492  0108F0  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 10493  0108F2  D008               	goto	l3041
 10494  0108F4                     l3039:
 10495                           
 10496                           ; BSR set to: 0
 10497                           
 10498                           ; BSR set to: 0
 10499  0108F4  0E00               	movlw	0
 10500  0108F6  6F6E               	movwf	___flmul@b& (0+255),b
 10501  0108F8  0E00               	movlw	0
 10502  0108FA  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 10503  0108FC  0E00               	movlw	0
 10504  0108FE  6F70               	movwf	(___flmul@b+2)& (0+255),b
 10505  010900  0E00               	movlw	0
 10506  010902  6F71               	movwf	(___flmul@b+3)& (0+255),b
 10507  010904                     l3041:
 10508                           
 10509                           ; BSR set to: 0
 10510                           
 10511                           ; BSR set to: 0
 10512  010904  5175               	movf	(___flmul@a+3)& (0+255),w,b
 10513  010906  0B80               	andlw	128
 10514  010908  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 10515                           
 10516                           ; BSR set to: 0
 10517  01090A  5175               	movf	(___flmul@a+3)& (0+255),w,b
 10518  01090C  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 10519  01090E  6F7B               	movwf	___flmul@aexp& (0+255),b
 10520                           
 10521                           ; BSR set to: 0
 10522  010910  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 10523                           
 10524                           ; BSR set to: 0
 10525  010912  817B               	bsf	___flmul@aexp& (0+255),0,b
 10526                           
 10527                           ; BSR set to: 0
 10528                           
 10529                           ; BSR set to: 0
 10530  010914  517B               	movf	___flmul@aexp& (0+255),w,b
 10531  010916  B4D8               	btfsc	status,2,c
 10532  010918  D00D               	goto	l3043
 10533                           
 10534                           ; BSR set to: 0
 10535  01091A  297B               	incf	___flmul@aexp& (0+255),w,b
 10536  01091C  A4D8               	btfss	status,2,c
 10537  01091E  D008               	goto	l3044
 10538                           
 10539                           ; BSR set to: 0
 10540  010920  0E00               	movlw	0
 10541  010922  6F72               	movwf	___flmul@a& (0+255),b
 10542  010924  0E00               	movlw	0
 10543  010926  6F73               	movwf	(___flmul@a+1)& (0+255),b
 10544  010928  0E00               	movlw	0
 10545  01092A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 10546  01092C  0E00               	movlw	0
 10547  01092E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 10548  010930                     l3044:
 10549                           
 10550                           ; BSR set to: 0
 10551                           
 10552                           ; BSR set to: 0
 10553  010930  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 10554  010932  D008               	goto	l3045
 10555  010934                     l3043:
 10556                           
 10557                           ; BSR set to: 0
 10558                           
 10559                           ; BSR set to: 0
 10560  010934  0E00               	movlw	0
 10561  010936  6F72               	movwf	___flmul@a& (0+255),b
 10562  010938  0E00               	movlw	0
 10563  01093A  6F73               	movwf	(___flmul@a+1)& (0+255),b
 10564  01093C  0E00               	movlw	0
 10565  01093E  6F74               	movwf	(___flmul@a+2)& (0+255),b
 10566  010940  0E00               	movlw	0
 10567  010942  6F75               	movwf	(___flmul@a+3)& (0+255),b
 10568  010944                     l3045:
 10569                           
 10570                           ; BSR set to: 0
 10571  010944  517B               	movf	___flmul@aexp& (0+255),w,b
 10572  010946  B4D8               	btfsc	status,2,c
 10573  010948  D003               	goto	u10850
 10574                           
 10575                           ; BSR set to: 0
 10576  01094A  5180               	movf	___flmul@bexp& (0+255),w,b
 10577  01094C  A4D8               	btfss	status,2,c
 10578  01094E  D009               	goto	l3046
 10579  010950                     u10850:
 10580                           
 10581                           ; BSR set to: 0
 10582                           
 10583                           ; BSR set to: 0
 10584  010950  0E00               	movlw	0
 10585  010952  6F6E               	movwf	?___flmul& (0+255),b
 10586  010954  0E00               	movlw	0
 10587  010956  6F6F               	movwf	(?___flmul+1)& (0+255),b
 10588  010958  0E00               	movlw	0
 10589  01095A  6F70               	movwf	(?___flmul+2)& (0+255),b
 10590  01095C  0E00               	movlw	0
 10591  01095E  6F71               	movwf	(?___flmul+3)& (0+255),b
 10592                           
 10593                           ; BSR set to: 0
 10594  010960  0012               	return	
 10595  010962                     l3046:
 10596                           
 10597                           ; BSR set to: 0
 10598                           
 10599                           ; BSR set to: 0
 10600  010962  5174               	movf	(___flmul@a+2)& (0+255),w,b
 10601  010964  036E               	mulwf	___flmul@b& (0+255),b
 10602  010966  CFF3 F085          	movff	prodl,___flmul@temp
 10603  01096A  CFF4 F086          	movff	prodh,___flmul@temp+1
 10604                           
 10605                           ; BSR set to: 0
 10606  01096E  5185               	movf	___flmul@temp& (0+255),w,b
 10607  010970  6F7C               	movwf	___flmul@grs& (0+255),b
 10608  010972  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 10609  010974  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 10610  010976  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 10611                           
 10612                           ; BSR set to: 0
 10613  010978  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10614  01097A  6F81               	movwf	___flmul@prod& (0+255),b
 10615  01097C  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 10616  01097E  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 10617  010980  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 10618  010982  5173               	movf	(___flmul@a+1)& (0+255),w,b
 10619  010984  036F               	mulwf	(___flmul@b+1)& (0+255),b
 10620  010986  CFF3 F085          	movff	prodl,___flmul@temp
 10621  01098A  CFF4 F086          	movff	prodh,___flmul@temp+1
 10622                           
 10623                           ; BSR set to: 0
 10624  01098E  5185               	movf	___flmul@temp& (0+255),w,b
 10625  010990  277C               	addwf	___flmul@grs& (0+255),f,b
 10626  010992  0E00               	movlw	0
 10627  010994  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10628  010996  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10629  010998  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10630                           
 10631                           ; BSR set to: 0
 10632  01099A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10633  01099C  2781               	addwf	___flmul@prod& (0+255),f,b
 10634  01099E  0E00               	movlw	0
 10635  0109A0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10636  0109A2  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10637  0109A4  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10638  0109A6  5172               	movf	___flmul@a& (0+255),w,b
 10639  0109A8  0370               	mulwf	(___flmul@b+2)& (0+255),b
 10640  0109AA  CFF3 F085          	movff	prodl,___flmul@temp
 10641  0109AE  CFF4 F086          	movff	prodh,___flmul@temp+1
 10642                           
 10643                           ; BSR set to: 0
 10644  0109B2  5185               	movf	___flmul@temp& (0+255),w,b
 10645  0109B4  277C               	addwf	___flmul@grs& (0+255),f,b
 10646  0109B6  0E00               	movlw	0
 10647  0109B8  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10648  0109BA  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10649  0109BC  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10650                           
 10651                           ; BSR set to: 0
 10652  0109BE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10653  0109C0  2781               	addwf	___flmul@prod& (0+255),f,b
 10654  0109C2  0E00               	movlw	0
 10655  0109C4  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10656  0109C6  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10657  0109C8  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10658                           
 10659                           ; BSR set to: 0
 10660  0109CA  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 10661  0109CE  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 10662  0109D2  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 10663  0109D6  6B7C               	clrf	___flmul@grs& (0+255),b
 10664                           
 10665                           ; BSR set to: 0
 10666  0109D8  5172               	movf	___flmul@a& (0+255),w,b
 10667  0109DA  036F               	mulwf	(___flmul@b+1)& (0+255),b
 10668  0109DC  CFF3 F085          	movff	prodl,___flmul@temp
 10669  0109E0  CFF4 F086          	movff	prodh,___flmul@temp+1
 10670                           
 10671                           ; BSR set to: 0
 10672  0109E4  5185               	movf	___flmul@temp& (0+255),w,b
 10673  0109E6  277C               	addwf	___flmul@grs& (0+255),f,b
 10674  0109E8  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10675  0109EA  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10676  0109EC  0E00               	movlw	0
 10677  0109EE  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10678  0109F0  0E00               	movlw	0
 10679  0109F2  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10680                           
 10681                           ; BSR set to: 0
 10682  0109F4  5173               	movf	(___flmul@a+1)& (0+255),w,b
 10683  0109F6  036E               	mulwf	___flmul@b& (0+255),b
 10684  0109F8  CFF3 F085          	movff	prodl,___flmul@temp
 10685  0109FC  CFF4 F086          	movff	prodh,___flmul@temp+1
 10686                           
 10687                           ; BSR set to: 0
 10688  010A00  5185               	movf	___flmul@temp& (0+255),w,b
 10689  010A02  277C               	addwf	___flmul@grs& (0+255),f,b
 10690  010A04  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10691  010A06  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10692  010A08  0E00               	movlw	0
 10693  010A0A  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10694  010A0C  0E00               	movlw	0
 10695  010A0E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10696                           
 10697                           ; BSR set to: 0
 10698  010A10  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 10699  010A14  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 10700  010A18  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 10701  010A1C  6B7C               	clrf	___flmul@grs& (0+255),b
 10702  010A1E  5172               	movf	___flmul@a& (0+255),w,b
 10703  010A20  036E               	mulwf	___flmul@b& (0+255),b
 10704  010A22  CFF3 F085          	movff	prodl,___flmul@temp
 10705  010A26  CFF4 F086          	movff	prodh,___flmul@temp+1
 10706                           
 10707                           ; BSR set to: 0
 10708  010A2A  5185               	movf	___flmul@temp& (0+255),w,b
 10709  010A2C  277C               	addwf	___flmul@grs& (0+255),f,b
 10710  010A2E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10711  010A30  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10712  010A32  0E00               	movlw	0
 10713  010A34  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10714  010A36  0E00               	movlw	0
 10715  010A38  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10716                           
 10717                           ; BSR set to: 0
 10718  010A3A  5174               	movf	(___flmul@a+2)& (0+255),w,b
 10719  010A3C  036F               	mulwf	(___flmul@b+1)& (0+255),b
 10720  010A3E  CFF3 F085          	movff	prodl,___flmul@temp
 10721  010A42  CFF4 F086          	movff	prodh,___flmul@temp+1
 10722  010A46  5185               	movf	___flmul@temp& (0+255),w,b
 10723  010A48  2781               	addwf	___flmul@prod& (0+255),f,b
 10724  010A4A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10725  010A4C  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10726  010A4E  0E00               	movlw	0
 10727  010A50  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10728  010A52  0E00               	movlw	0
 10729  010A54  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10730                           
 10731                           ; BSR set to: 0
 10732  010A56  5173               	movf	(___flmul@a+1)& (0+255),w,b
 10733  010A58  0370               	mulwf	(___flmul@b+2)& (0+255),b
 10734  010A5A  CFF3 F085          	movff	prodl,___flmul@temp
 10735  010A5E  CFF4 F086          	movff	prodh,___flmul@temp+1
 10736                           
 10737                           ; BSR set to: 0
 10738  010A62  5185               	movf	___flmul@temp& (0+255),w,b
 10739  010A64  2781               	addwf	___flmul@prod& (0+255),f,b
 10740  010A66  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10741  010A68  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10742  010A6A  0E00               	movlw	0
 10743  010A6C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10744  010A6E  0E00               	movlw	0
 10745  010A70  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10746  010A72  5174               	movf	(___flmul@a+2)& (0+255),w,b
 10747  010A74  0370               	mulwf	(___flmul@b+2)& (0+255),b
 10748  010A76  CFF3 F085          	movff	prodl,___flmul@temp
 10749  010A7A  CFF4 F086          	movff	prodh,___flmul@temp+1
 10750                           
 10751                           ; BSR set to: 0
 10752  010A7E  5185               	movf	___flmul@temp& (0+255),w,b
 10753  010A80  6F76               	movwf	??___flmul& (0+255),b
 10754  010A82  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10755  010A84  6F77               	movwf	(??___flmul+1)& (0+255),b
 10756  010A86  6B78               	clrf	(??___flmul+2)& (0+255),b
 10757  010A88  6B79               	clrf	(??___flmul+3)& (0+255),b
 10758  010A8A  C078  F079         	movff	??___flmul+2,??___flmul+3
 10759  010A8E  C077  F078         	movff	??___flmul+1,??___flmul+2
 10760  010A92  C076  F077         	movff	??___flmul,??___flmul+1
 10761  010A96  6B76               	clrf	??___flmul& (0+255),b
 10762  010A98  5176               	movf	??___flmul& (0+255),w,b
 10763  010A9A  2781               	addwf	___flmul@prod& (0+255),f,b
 10764  010A9C  5177               	movf	(??___flmul+1)& (0+255),w,b
 10765  010A9E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10766  010AA0  5178               	movf	(??___flmul+2)& (0+255),w,b
 10767  010AA2  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10768  010AA4  5179               	movf	(??___flmul+3)& (0+255),w,b
 10769  010AA6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10770                           
 10771                           ; BSR set to: 0
 10772  010AA8  C07C  F076         	movff	___flmul@grs,??___flmul
 10773  010AAC  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 10774  010AB0  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 10775  010AB4  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 10776  010AB8  0E19               	movlw	25
 10777  010ABA  D005               	goto	u10860
 10778  010ABC                     u10865:
 10779  010ABC  90D8               	bcf	status,0,c
 10780  010ABE  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 10781  010AC0  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 10782  010AC2  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 10783  010AC4  3376               	rrcf	??___flmul& (0+255),f,b
 10784  010AC6                     u10860:
 10785  010AC6  2EE8               	decfsz	wreg,f,c
 10786  010AC8  D7F9               	goto	u10865
 10787  010ACA  5176               	movf	??___flmul& (0+255),w,b
 10788  010ACC  2781               	addwf	___flmul@prod& (0+255),f,b
 10789  010ACE  5177               	movf	(??___flmul+1)& (0+255),w,b
 10790  010AD0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10791  010AD2  5178               	movf	(??___flmul+2)& (0+255),w,b
 10792  010AD4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10793  010AD6  5179               	movf	(??___flmul+3)& (0+255),w,b
 10794  010AD8  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10795                           
 10796                           ; BSR set to: 0
 10797  010ADA  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 10798  010ADE  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 10799  010AE2  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 10800  010AE6  6B7C               	clrf	___flmul@grs& (0+255),b
 10801                           
 10802                           ; BSR set to: 0
 10803  010AE8  517B               	movf	___flmul@aexp& (0+255),w,b
 10804  010AEA  C080  F076         	movff	___flmul@bexp,??___flmul
 10805  010AEE  6B77               	clrf	(??___flmul+1)& (0+255),b
 10806  010AF0  2776               	addwf	??___flmul& (0+255),f,b
 10807  010AF2  0E00               	movlw	0
 10808  010AF4  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 10809  010AF6  0E82               	movlw	130
 10810  010AF8  2576               	addwf	??___flmul& (0+255),w,b
 10811  010AFA  6F85               	movwf	___flmul@temp& (0+255),b
 10812  010AFC  0EFF               	movlw	255
 10813  010AFE  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 10814  010B00  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 10815  010B02  D00F               	goto	l3050
 10816  010B04                     
 10817                           ; BSR set to: 0
 10818                           
 10819                           ; BSR set to: 0
 10820  010B04  90D8               	bcf	status,0,c
 10821  010B06  3781               	rlcf	___flmul@prod& (0+255),f,b
 10822  010B08  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 10823  010B0A  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 10824  010B0C  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 10825                           
 10826                           ; BSR set to: 0
 10827  010B0E  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 10828                           
 10829                           ; BSR set to: 0
 10830  010B10  8181               	bsf	___flmul@prod& (0+255),0,b
 10831                           
 10832                           ; BSR set to: 0
 10833  010B12  90D8               	bcf	status,0,c
 10834  010B14  377C               	rlcf	___flmul@grs& (0+255),f,b
 10835  010B16  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 10836  010B18  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 10837  010B1A  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 10838  010B1C  0785               	decf	___flmul@temp& (0+255),f,b
 10839  010B1E  A0D8               	btfss	status,0,c
 10840  010B20  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 10841  010B22                     l3050:
 10842                           
 10843                           ; BSR set to: 0
 10844                           
 10845                           ; BSR set to: 0
 10846  010B22  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 10847  010B24  D7EF               	goto	l3051
 10848                           
 10849                           ; BSR set to: 0
 10850                           
 10851                           ; BSR set to: 0
 10852  010B26  0E00               	movlw	0
 10853  010B28  6F7B               	movwf	___flmul@aexp& (0+255),b
 10854                           
 10855                           ; BSR set to: 0
 10856  010B2A  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 10857  010B2C  D016               	goto	l3057
 10858                           
 10859                           ; BSR set to: 0
 10860  010B2E  0EFF               	movlw	255
 10861  010B30  157C               	andwf	___flmul@grs& (0+255),w,b
 10862  010B32  6F76               	movwf	??___flmul& (0+255),b
 10863  010B34  0EFF               	movlw	255
 10864  010B36  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 10865  010B38  6F77               	movwf	(??___flmul+1)& (0+255),b
 10866  010B3A  0EFF               	movlw	255
 10867  010B3C  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 10868  010B3E  6F78               	movwf	(??___flmul+2)& (0+255),b
 10869  010B40  0E7F               	movlw	127
 10870  010B42  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 10871  010B44  6F79               	movwf	(??___flmul+3)& (0+255),b
 10872  010B46  5176               	movf	??___flmul& (0+255),w,b
 10873  010B48  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 10874  010B4A  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 10875  010B4C  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 10876  010B4E  A4D8               	btfss	status,2,c
 10877  010B50  D002               	goto	u10910
 10878                           
 10879                           ; BSR set to: 0
 10880                           
 10881                           ; BSR set to: 0
 10882  010B52  A181               	btfss	___flmul@prod& (0+255),0,b
 10883  010B54  D002               	goto	l3057
 10884  010B56                     u10910:
 10885                           
 10886                           ; BSR set to: 0
 10887  010B56  0E01               	movlw	1
 10888  010B58  6F7B               	movwf	___flmul@aexp& (0+255),b
 10889  010B5A                     l3057:
 10890                           
 10891                           ; BSR set to: 0
 10892                           
 10893                           ; BSR set to: 0
 10894                           
 10895                           ; BSR set to: 0
 10896  010B5A  517B               	movf	___flmul@aexp& (0+255),w,b
 10897  010B5C  B4D8               	btfsc	status,2,c
 10898  010B5E  D01F               	goto	l3059
 10899                           
 10900                           ; BSR set to: 0
 10901  010B60  0E01               	movlw	1
 10902  010B62  2781               	addwf	___flmul@prod& (0+255),f,b
 10903  010B64  0E00               	movlw	0
 10904  010B66  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10905  010B68  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10906  010B6A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10907                           
 10908                           ; BSR set to: 0
 10909  010B6C  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 10910  010B6E  D017               	goto	l3059
 10911                           
 10912                           ; BSR set to: 0
 10913  010B70  C081  F076         	movff	___flmul@prod,??___flmul
 10914  010B74  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 10915  010B78  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 10916  010B7C  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 10917  010B80  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 10918  010B82  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 10919  010B84  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 10920  010B86  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 10921  010B88  3376               	rrcf	??___flmul& (0+255),f,b
 10922  010B8A  C076  F081         	movff	??___flmul,___flmul@prod
 10923  010B8E  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 10924  010B92  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 10925  010B96  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 10926                           
 10927                           ; BSR set to: 0
 10928  010B9A  4B85               	infsnz	___flmul@temp& (0+255),f,b
 10929  010B9C  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 10930  010B9E                     l3059:
 10931                           
 10932                           ; BSR set to: 0
 10933                           
 10934                           ; BSR set to: 0
 10935                           
 10936                           ; BSR set to: 0
 10937  010B9E  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10938  010BA0  D00D               	goto	l3060
 10939  010BA2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10940  010BA4  E103               	bnz	u10940
 10941  010BA6  2985               	incf	___flmul@temp& (0+255),w,b
 10942  010BA8  A0D8               	btfss	status,0,c
 10943  010BAA  D008               	goto	l3060
 10944  010BAC                     u10940:
 10945                           
 10946                           ; BSR set to: 0
 10947  010BAC  0E00               	movlw	0
 10948  010BAE  6F81               	movwf	___flmul@prod& (0+255),b
 10949  010BB0  0E00               	movlw	0
 10950  010BB2  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 10951  010BB4  0E80               	movlw	128
 10952  010BB6  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 10953  010BB8  0E7F               	movlw	127
 10954  010BBA  D020               	goto	L5
 10955  010BBC                     l3060:
 10956                           
 10957                           ; BSR set to: 0
 10958                           
 10959                           ; BSR set to: 0
 10960  010BBC  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10961  010BBE  D005               	goto	u10950
 10962  010BC0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10963  010BC2  E10E               	bnz	l3062
 10964  010BC4  0585               	decf	___flmul@temp& (0+255),w,b
 10965  010BC6  B0D8               	btfsc	status,0,c
 10966  010BC8  D00B               	goto	l3062
 10967  010BCA                     u10950:
 10968                           
 10969                           ; BSR set to: 0
 10970  010BCA  0E00               	movlw	0
 10971  010BCC  6F81               	movwf	___flmul@prod& (0+255),b
 10972  010BCE  0E00               	movlw	0
 10973  010BD0  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 10974  010BD2  0E00               	movlw	0
 10975  010BD4  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 10976  010BD6  0E00               	movlw	0
 10977  010BD8  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 10978  010BDA  0E00               	movlw	0
 10979  010BDC  6F7A               	movwf	___flmul@sign& (0+255),b
 10980  010BDE  D00F               	goto	l3063
 10981  010BE0                     l3062:
 10982                           
 10983                           ; BSR set to: 0
 10984  010BE0  C085  F080         	movff	___flmul@temp,___flmul@bexp
 10985                           
 10986                           ; BSR set to: 0
 10987  010BE4  0EFF               	movlw	255
 10988  010BE6  1781               	andwf	___flmul@prod& (0+255),f,b
 10989  010BE8  0EFF               	movlw	255
 10990  010BEA  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 10991  010BEC  0E7F               	movlw	127
 10992  010BEE  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 10993  010BF0  0E00               	movlw	0
 10994  010BF2  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 10995                           
 10996                           ; BSR set to: 0
 10997  010BF4  B180               	btfsc	___flmul@bexp& (0+255),0,b
 10998                           
 10999                           ; BSR set to: 0
 11000  010BF6  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 11001                           
 11002                           ; BSR set to: 0
 11003                           
 11004                           ; BSR set to: 0
 11005  010BF8  90D8               	bcf	status,0,c
 11006  010BFA  3180               	rrcf	___flmul@bexp& (0+255),w,b
 11007  010BFC                     L5:
 11008  010BFC  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 11009  010BFE                     l3063:
 11010                           
 11011                           ; BSR set to: 0
 11012                           
 11013                           ; BSR set to: 0
 11014                           
 11015                           ; BSR set to: 0
 11016  010BFE  517A               	movf	___flmul@sign& (0+255),w,b
 11017  010C00  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 11018                           
 11019                           ; BSR set to: 0
 11020  010C02  C081  F06E         	movff	___flmul@prod,?___flmul
 11021  010C06  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 11022  010C0A  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 11023  010C0E  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 11024  010C12  0012               	return	
 11025  010C14                     __end_of___flmul:
 11026                           	opt stack 0
 11027                           tosu	equ	0xFFF
 11028                           tosh	equ	0xFFE
 11029                           tosl	equ	0xFFD
 11030                           pclath	equ	0xFFA
 11031                           tblptru	equ	0xFF8
 11032                           tblptrh	equ	0xFF7
 11033                           tblptrl	equ	0xFF6
 11034                           tablat	equ	0xFF5
 11035                           prodh	equ	0xFF4
 11036                           prodl	equ	0xFF3
 11037                           postinc0	equ	0xFEE
 11038                           wreg	equ	0xFE8
 11039                           postdec1	equ	0xFE5
 11040                           fsr1h	equ	0xFE2
 11041                           fsr1l	equ	0xFE1
 11042                           indf2	equ	0xFDF
 11043                           postinc2	equ	0xFDE
 11044                           postdec2	equ	0xFDD
 11045                           fsr2h	equ	0xFDA
 11046                           fsr2l	equ	0xFD9
 11047                           status	equ	0xFD8
 11048                           
 11049 ;; *************** function ___flsub *****************
 11050 ;; Defined at:
 11051 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  b               4   63[BANK0 ] unsigned char 
 11054 ;;  a               4   67[BANK0 ] unsigned char 
 11055 ;; Auto vars:     Size  Location     Type
 11056 ;;		None
 11057 ;; Return value:  Size  Location     Type
 11058 ;;                  4   63[BANK0 ] unsigned char 
 11059 ;; Registers used:
 11060 ;;		wreg, status,2, status,0, cstack
 11061 ;; Tracked objects:
 11062 ;;		On entry : 0/0
 11063 ;;		On exit  : 0/0
 11064 ;;		Unchanged: 0/0
 11065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11066 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11069 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11070 ;;Total ram usage:        8 bytes
 11071 ;; Hardware stack levels used:    1
 11072 ;; Hardware stack levels required when called:    8
 11073 ;; This function calls:
 11074 ;;		___fladd
 11075 ;; This function is called by:
 11076 ;;		_exp
 11077 ;; This function uses a non-reentrant model
 11078 ;;
 11079                           
 11080                           	psect	text33
 11081  01520E                     __ptext33:
 11082                           	opt stack 0
 11083  01520E                     ___flsub:
 11084                           	opt stack 18
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;incstack = 0
 11088  01520E  0E00               	movlw	0
 11089  015210  0100               	movlb	0	; () banked
 11090  015212  1BA3               	xorwf	___flsub@a& (0+255),f,b
 11091  015214  0E00               	movlw	0
 11092  015216  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 11093  015218  0E00               	movlw	0
 11094  01521A  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 11095  01521C  0E80               	movlw	128
 11096  01521E  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 11097                           
 11098                           ; BSR set to: 0
 11099  015220  C09F  F08B         	movff	___flsub@b,___fladd@b
 11100  015224  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 11101  015228  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 11102  01522C  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 11103  015230  C0A3  F08F         	movff	___flsub@a,___fladd@a
 11104  015234  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 11105  015238  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 11106  01523C  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 11107  015240  EC0A  F086         	call	___fladd	;wreg free
 11108  015244  C08B  F09F         	movff	?___fladd,?___flsub
 11109  015248  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 11110  01524C  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 11111  015250  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 11112  015254  0012               	return	
 11113  015256                     __end_of___flsub:
 11114                           	opt stack 0
 11115                           tosu	equ	0xFFF
 11116                           tosh	equ	0xFFE
 11117                           tosl	equ	0xFFD
 11118                           pclath	equ	0xFFA
 11119                           tblptru	equ	0xFF8
 11120                           tblptrh	equ	0xFF7
 11121                           tblptrl	equ	0xFF6
 11122                           tablat	equ	0xFF5
 11123                           prodh	equ	0xFF4
 11124                           prodl	equ	0xFF3
 11125                           postinc0	equ	0xFEE
 11126                           wreg	equ	0xFE8
 11127                           postdec1	equ	0xFE5
 11128                           fsr1h	equ	0xFE2
 11129                           fsr1l	equ	0xFE1
 11130                           indf2	equ	0xFDF
 11131                           postinc2	equ	0xFDE
 11132                           postdec2	equ	0xFDD
 11133                           fsr2h	equ	0xFDA
 11134                           fsr2l	equ	0xFD9
 11135                           status	equ	0xFD8
 11136                           
 11137 ;; *************** function ___fladd *****************
 11138 ;; Defined at:
 11139 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 11140 ;; Parameters:    Size  Location     Type
 11141 ;;  b               4   43[BANK0 ] unsigned char 
 11142 ;;  a               4   47[BANK0 ] unsigned char 
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;  grs             1   62[BANK0 ] unsigned char 
 11145 ;;  bexp            1   61[BANK0 ] unsigned char 
 11146 ;;  aexp            1   60[BANK0 ] unsigned char 
 11147 ;;  signs           1   59[BANK0 ] unsigned char 
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  4   43[BANK0 ] unsigned char 
 11150 ;; Registers used:
 11151 ;;		wreg, status,2, status,0
 11152 ;; Tracked objects:
 11153 ;;		On entry : 0/0
 11154 ;;		On exit  : 0/0
 11155 ;;		Unchanged: 0/0
 11156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11157 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11158 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11159 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11160 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11161 ;;Total ram usage:       20 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:    7
 11164 ;; This function calls:
 11165 ;;		Nothing
 11166 ;; This function is called by:
 11167 ;;		_ADCAverage
 11168 ;;		___flsub
 11169 ;;		_floor
 11170 ;;		_log
 11171 ;;		_eval_poly
 11172 ;;		_Move_ADC_To
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           	psect	text34
 11177  010C14                     __ptext34:
 11178                           	opt stack 0
 11179  010C14                     ___fladd:
 11180                           	opt stack 18
 11181                           
 11182                           ;incstack = 0
 11183  010C14  0100               	movlb	0	; () banked
 11184  010C16  518E               	movf	(___fladd@b+3)& (0+255),w,b
 11185  010C18  0B80               	andlw	128
 11186  010C1A  6F9B               	movwf	___fladd@signs& (0+255),b
 11187  010C1C  518E               	movf	(___fladd@b+3)& (0+255),w,b
 11188  010C1E  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 11189  010C20  6F9D               	movwf	___fladd@bexp& (0+255),b
 11190                           
 11191                           ; BSR set to: 0
 11192  010C22  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 11193                           
 11194                           ; BSR set to: 0
 11195  010C24  819D               	bsf	___fladd@bexp& (0+255),0,b
 11196                           
 11197                           ; BSR set to: 0
 11198                           
 11199                           ; BSR set to: 0
 11200  010C26  519D               	movf	___fladd@bexp& (0+255),w,b
 11201  010C28  B4D8               	btfsc	status,2,c
 11202  010C2A  D00D               	goto	l2948
 11203                           
 11204                           ; BSR set to: 0
 11205  010C2C  299D               	incf	___fladd@bexp& (0+255),w,b
 11206  010C2E  A4D8               	btfss	status,2,c
 11207  010C30  D008               	goto	l2949
 11208                           
 11209                           ; BSR set to: 0
 11210  010C32  0E00               	movlw	0
 11211  010C34  6F8B               	movwf	___fladd@b& (0+255),b
 11212  010C36  0E00               	movlw	0
 11213  010C38  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11214  010C3A  0E00               	movlw	0
 11215  010C3C  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11216  010C3E  0E00               	movlw	0
 11217  010C40  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11218  010C42                     l2949:
 11219                           
 11220                           ; BSR set to: 0
 11221                           
 11222                           ; BSR set to: 0
 11223  010C42  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 11224  010C44  D006               	goto	L6
 11225  010C46                     l2948:
 11226                           
 11227                           ; BSR set to: 0
 11228                           
 11229                           ; BSR set to: 0
 11230  010C46  0E00               	movlw	0
 11231  010C48  6F8B               	movwf	___fladd@b& (0+255),b
 11232  010C4A  0E00               	movlw	0
 11233  010C4C  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11234  010C4E  0E00               	movlw	0
 11235  010C50  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11236  010C52                     L6:
 11237  010C52  0E00               	movlw	0
 11238  010C54  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11239                           
 11240                           ; BSR set to: 0
 11241                           
 11242                           ; BSR set to: 0
 11243  010C56  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11244  010C58  0B80               	andlw	128
 11245  010C5A  6F9C               	movwf	___fladd@aexp& (0+255),b
 11246                           
 11247                           ; BSR set to: 0
 11248  010C5C  519B               	movf	___fladd@signs& (0+255),w,b
 11249  010C5E  199C               	xorwf	___fladd@aexp& (0+255),w,b
 11250  010C60  A4D8               	btfss	status,2,c
 11251                           
 11252                           ; BSR set to: 0
 11253  010C62  8D9B               	bsf	___fladd@signs& (0+255),6,b
 11254                           
 11255                           ; BSR set to: 0
 11256                           
 11257                           ; BSR set to: 0
 11258  010C64  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11259  010C66  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 11260  010C68  6F9C               	movwf	___fladd@aexp& (0+255),b
 11261                           
 11262                           ; BSR set to: 0
 11263  010C6A  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 11264                           
 11265                           ; BSR set to: 0
 11266  010C6C  819C               	bsf	___fladd@aexp& (0+255),0,b
 11267                           
 11268                           ; BSR set to: 0
 11269                           
 11270                           ; BSR set to: 0
 11271  010C6E  519C               	movf	___fladd@aexp& (0+255),w,b
 11272  010C70  B4D8               	btfsc	status,2,c
 11273  010C72  D00D               	goto	l2953
 11274                           
 11275                           ; BSR set to: 0
 11276  010C74  299C               	incf	___fladd@aexp& (0+255),w,b
 11277  010C76  A4D8               	btfss	status,2,c
 11278  010C78  D008               	goto	l2954
 11279                           
 11280                           ; BSR set to: 0
 11281  010C7A  0E00               	movlw	0
 11282  010C7C  6F8F               	movwf	___fladd@a& (0+255),b
 11283  010C7E  0E00               	movlw	0
 11284  010C80  6F90               	movwf	(___fladd@a+1)& (0+255),b
 11285  010C82  0E00               	movlw	0
 11286  010C84  6F91               	movwf	(___fladd@a+2)& (0+255),b
 11287  010C86  0E00               	movlw	0
 11288  010C88  6F92               	movwf	(___fladd@a+3)& (0+255),b
 11289  010C8A                     l2954:
 11290                           
 11291                           ; BSR set to: 0
 11292                           
 11293                           ; BSR set to: 0
 11294  010C8A  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 11295  010C8C  D006               	goto	L7
 11296  010C8E                     l2953:
 11297                           
 11298                           ; BSR set to: 0
 11299                           
 11300                           ; BSR set to: 0
 11301  010C8E  0E00               	movlw	0
 11302  010C90  6F8F               	movwf	___fladd@a& (0+255),b
 11303  010C92  0E00               	movlw	0
 11304  010C94  6F90               	movwf	(___fladd@a+1)& (0+255),b
 11305  010C96  0E00               	movlw	0
 11306  010C98  6F91               	movwf	(___fladd@a+2)& (0+255),b
 11307  010C9A                     L7:
 11308  010C9A  0E00               	movlw	0
 11309  010C9C  6F92               	movwf	(___fladd@a+3)& (0+255),b
 11310                           
 11311                           ; BSR set to: 0
 11312                           
 11313                           ; BSR set to: 0
 11314  010C9E  519D               	movf	___fladd@bexp& (0+255),w,b
 11315  010CA0  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 11316  010CA2  B0D8               	btfsc	status,0,c
 11317  010CA4  D022               	goto	l2956
 11318                           
 11319                           ; BSR set to: 0
 11320  010CA6  AD9B               	btfss	___fladd@signs& (0+255),6,b
 11321  010CA8  D002               	goto	l2957
 11322                           
 11323                           ; BSR set to: 0
 11324  010CAA  0E80               	movlw	128
 11325  010CAC  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 11326  010CAE                     l2957:
 11327                           
 11328                           ; BSR set to: 0
 11329                           
 11330                           ; BSR set to: 0
 11331  010CAE  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 11332                           
 11333                           ; BSR set to: 0
 11334  010CB2  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 11335                           
 11336                           ; BSR set to: 0
 11337  010CB6  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 11338                           
 11339                           ; BSR set to: 0
 11340  010CBA  C08B  F09E         	movff	___fladd@b,___fladd@grs
 11341                           
 11342                           ; BSR set to: 0
 11343  010CBE  C08F  F08B         	movff	___fladd@a,___fladd@b
 11344                           
 11345                           ; BSR set to: 0
 11346  010CC2  C09E  F08F         	movff	___fladd@grs,___fladd@a
 11347                           
 11348                           ; BSR set to: 0
 11349  010CC6  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 11350                           
 11351                           ; BSR set to: 0
 11352  010CCA  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 11353                           
 11354                           ; BSR set to: 0
 11355  010CCE  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 11356                           
 11357                           ; BSR set to: 0
 11358  010CD2  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 11359                           
 11360                           ; BSR set to: 0
 11361  010CD6  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 11362                           
 11363                           ; BSR set to: 0
 11364  010CDA  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 11365                           
 11366                           ; BSR set to: 0
 11367  010CDE  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 11368                           
 11369                           ; BSR set to: 0
 11370  010CE2  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 11371                           
 11372                           ; BSR set to: 0
 11373  010CE6  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 11374  010CEA                     l2956:
 11375                           
 11376                           ; BSR set to: 0
 11377                           
 11378                           ; BSR set to: 0
 11379  010CEA  0E00               	movlw	0
 11380  010CEC  6F9E               	movwf	___fladd@grs& (0+255),b
 11381                           
 11382                           ; BSR set to: 0
 11383  010CEE  519D               	movf	___fladd@bexp& (0+255),w,b
 11384  010CF0  6F93               	movwf	??___fladd& (0+255),b
 11385  010CF2  6B94               	clrf	(??___fladd+1)& (0+255),b
 11386  010CF4  1F93               	comf	??___fladd& (0+255),f,b
 11387  010CF6  1F94               	comf	(??___fladd+1)& (0+255),f,b
 11388  010CF8  4B93               	infsnz	??___fladd& (0+255),f,b
 11389  010CFA  2B94               	incf	(??___fladd+1)& (0+255),f,b
 11390  010CFC  519C               	movf	___fladd@aexp& (0+255),w,b
 11391  010CFE  6F95               	movwf	(??___fladd+2)& (0+255),b
 11392  010D00  6B96               	clrf	(??___fladd+3)& (0+255),b
 11393  010D02  5193               	movf	??___fladd& (0+255),w,b
 11394  010D04  2795               	addwf	(??___fladd+2)& (0+255),f,b
 11395  010D06  5194               	movf	(??___fladd+1)& (0+255),w,b
 11396  010D08  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 11397  010D0A  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 11398  010D0C  D02C               	goto	l2960
 11399  010D0E  5196               	movf	(??___fladd+3)& (0+255),w,b
 11400  010D10  E104               	bnz	u10480
 11401  010D12  0E1A               	movlw	26
 11402  010D14  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 11403  010D16  A0D8               	btfss	status,0,c
 11404  010D18  D026               	goto	l2960
 11405  010D1A                     u10480:
 11406                           
 11407                           ; BSR set to: 0
 11408  010D1A  518B               	movf	___fladd@b& (0+255),w,b
 11409  010D1C  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 11410  010D1E  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 11411  010D20  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 11412  010D22  B4D8               	btfsc	status,2,c
 11413  010D24  D002               	goto	u10490
 11414  010D26  0E01               	movlw	1
 11415  010D28  D001               	goto	u10500
 11416  010D2A                     u10490:
 11417  010D2A  0E00               	movlw	0
 11418  010D2C                     u10500:
 11419  010D2C  6F9E               	movwf	___fladd@grs& (0+255),b
 11420                           
 11421                           ; BSR set to: 0
 11422  010D2E  0E00               	movlw	0
 11423  010D30  6F8B               	movwf	___fladd@b& (0+255),b
 11424  010D32  0E00               	movlw	0
 11425  010D34  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11426  010D36  0E00               	movlw	0
 11427  010D38  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11428  010D3A  0E00               	movlw	0
 11429  010D3C  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11430                           
 11431                           ; BSR set to: 0
 11432  010D3E  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 11433  010D42  D015               	goto	u10530
 11434  010D44                     l2961:
 11435                           
 11436                           ; BSR set to: 0
 11437  010D44  A19E               	btfss	___fladd@grs& (0+255),0,b
 11438  010D46  D005               	goto	l2962
 11439                           
 11440                           ; BSR set to: 0
 11441  010D48  90D8               	bcf	status,0,c
 11442  010D4A  319E               	rrcf	___fladd@grs& (0+255),w,b
 11443  010D4C  0901               	iorlw	1
 11444  010D4E  6F9E               	movwf	___fladd@grs& (0+255),b
 11445  010D50  D002               	goto	l2963
 11446  010D52                     l2962:
 11447                           
 11448                           ; BSR set to: 0
 11449                           
 11450                           ; BSR set to: 0
 11451  010D52  90D8               	bcf	status,0,c
 11452  010D54  339E               	rrcf	___fladd@grs& (0+255),f,b
 11453  010D56                     l2963:
 11454                           
 11455                           ; BSR set to: 0
 11456                           
 11457                           ; BSR set to: 0
 11458  010D56  B18B               	btfsc	___fladd@b& (0+255),0,b
 11459                           
 11460                           ; BSR set to: 0
 11461  010D58  8F9E               	bsf	___fladd@grs& (0+255),7,b
 11462                           
 11463                           ; BSR set to: 0
 11464                           
 11465                           ; BSR set to: 0
 11466  010D5A  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 11467  010D5C  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 11468  010D5E  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 11469  010D60  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 11470  010D62  338B               	rrcf	___fladd@b& (0+255),f,b
 11471                           
 11472                           ; BSR set to: 0
 11473  010D64  2B9D               	incf	___fladd@bexp& (0+255),f,b
 11474  010D66                     l2960:
 11475                           
 11476                           ; BSR set to: 0
 11477  010D66  519C               	movf	___fladd@aexp& (0+255),w,b
 11478  010D68  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 11479  010D6A  A0D8               	btfss	status,0,c
 11480  010D6C  D7EB               	goto	l2961
 11481  010D6E                     u10530:
 11482                           
 11483                           ; BSR set to: 0
 11484                           
 11485                           ; BSR set to: 0
 11486  010D6E  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 11487  010D70  D029               	goto	l2966
 11488                           
 11489                           ; BSR set to: 0
 11490  010D72  519D               	movf	___fladd@bexp& (0+255),w,b
 11491  010D74  A4D8               	btfss	status,2,c
 11492  010D76  D009               	goto	l2967
 11493                           
 11494                           ; BSR set to: 0
 11495  010D78  0E00               	movlw	0
 11496  010D7A  6F8B               	movwf	?___fladd& (0+255),b
 11497  010D7C  0E00               	movlw	0
 11498  010D7E  6F8C               	movwf	(?___fladd+1)& (0+255),b
 11499  010D80  0E00               	movlw	0
 11500  010D82  6F8D               	movwf	(?___fladd+2)& (0+255),b
 11501  010D84  0E00               	movlw	0
 11502  010D86  6F8E               	movwf	(?___fladd+3)& (0+255),b
 11503                           
 11504                           ; BSR set to: 0
 11505  010D88  0012               	return	
 11506  010D8A                     l2967:
 11507                           
 11508                           ; BSR set to: 0
 11509                           
 11510                           ; BSR set to: 0
 11511  010D8A  518F               	movf	___fladd@a& (0+255),w,b
 11512  010D8C  278B               	addwf	___fladd@b& (0+255),f,b
 11513  010D8E  5190               	movf	(___fladd@a+1)& (0+255),w,b
 11514  010D90  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 11515  010D92  5191               	movf	(___fladd@a+2)& (0+255),w,b
 11516  010D94  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 11517  010D96  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11518  010D98  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 11519                           
 11520                           ; BSR set to: 0
 11521  010D9A  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 11522  010D9C  D083               	goto	u10660
 11523                           
 11524                           ; BSR set to: 0
 11525  010D9E  A19E               	btfss	___fladd@grs& (0+255),0,b
 11526  010DA0  D006               	goto	l2970
 11527                           
 11528                           ; BSR set to: 0
 11529  010DA2  90D8               	bcf	status,0,c
 11530  010DA4  339E               	rrcf	___fladd@grs& (0+255),f,b
 11531  010DA6  519E               	movf	___fladd@grs& (0+255),w,b
 11532  010DA8  0901               	iorlw	1
 11533  010DAA  6F9E               	movwf	___fladd@grs& (0+255),b
 11534  010DAC  D002               	goto	l2971
 11535  010DAE                     l2970:
 11536                           
 11537                           ; BSR set to: 0
 11538                           
 11539                           ; BSR set to: 0
 11540  010DAE  90D8               	bcf	status,0,c
 11541  010DB0  339E               	rrcf	___fladd@grs& (0+255),f,b
 11542  010DB2                     l2971:
 11543                           
 11544                           ; BSR set to: 0
 11545                           
 11546                           ; BSR set to: 0
 11547  010DB2  B18B               	btfsc	___fladd@b& (0+255),0,b
 11548                           
 11549                           ; BSR set to: 0
 11550  010DB4  8F9E               	bsf	___fladd@grs& (0+255),7,b
 11551                           
 11552                           ; BSR set to: 0
 11553                           
 11554                           ; BSR set to: 0
 11555  010DB6  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 11556  010DB8  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 11557  010DBA  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 11558  010DBC  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 11559  010DBE  338B               	rrcf	___fladd@b& (0+255),f,b
 11560                           
 11561                           ; BSR set to: 0
 11562  010DC0  2B9D               	incf	___fladd@bexp& (0+255),f,b
 11563                           
 11564                           ; BSR set to: 0
 11565  010DC2  D070               	goto	u10660
 11566  010DC4                     l2966:
 11567                           
 11568                           ; BSR set to: 0
 11569                           
 11570                           ; BSR set to: 0
 11571  010DC4  518F               	movf	___fladd@a& (0+255),w,b
 11572  010DC6  5D8B               	subwf	___fladd@b& (0+255),w,b
 11573  010DC8  5190               	movf	(___fladd@a+1)& (0+255),w,b
 11574  010DCA  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 11575  010DCC  5191               	movf	(___fladd@a+2)& (0+255),w,b
 11576  010DCE  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 11577  010DD0  518E               	movf	(___fladd@b+3)& (0+255),w,b
 11578  010DD2  0A80               	xorlw	128
 11579  010DD4  6F93               	movwf	??___fladd& (0+255),b
 11580  010DD6  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11581  010DD8  0A80               	xorlw	128
 11582  010DDA  5993               	subwfb	??___fladd& (0+255),w,b
 11583  010DDC  B0D8               	btfsc	status,0,c
 11584  010DDE  D036               	goto	l2974
 11585                           
 11586                           ; BSR set to: 0
 11587  010DE0  C08B  F093         	movff	___fladd@b,??___fladd
 11588  010DE4  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 11589  010DE8  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 11590  010DEC  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 11591  010DF0  1F93               	comf	??___fladd& (0+255),f,b
 11592  010DF2  1F94               	comf	(??___fladd+1)& (0+255),f,b
 11593  010DF4  1F95               	comf	(??___fladd+2)& (0+255),f,b
 11594  010DF6  1F96               	comf	(??___fladd+3)& (0+255),f,b
 11595  010DF8  2B93               	incf	??___fladd& (0+255),f,b
 11596  010DFA  0E00               	movlw	0
 11597  010DFC  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 11598  010DFE  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 11599  010E00  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 11600  010E02  518F               	movf	___fladd@a& (0+255),w,b
 11601  010E04  2593               	addwf	??___fladd& (0+255),w,b
 11602  010E06  6F97               	movwf	(??___fladd+4)& (0+255),b
 11603  010E08  5190               	movf	(___fladd@a+1)& (0+255),w,b
 11604  010E0A  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 11605  010E0C  6F98               	movwf	(??___fladd+5)& (0+255),b
 11606  010E0E  5191               	movf	(___fladd@a+2)& (0+255),w,b
 11607  010E10  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 11608  010E12  6F99               	movwf	(??___fladd+6)& (0+255),b
 11609  010E14  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11610  010E16  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 11611  010E18  6F9A               	movwf	(??___fladd+7)& (0+255),b
 11612  010E1A  0EFF               	movlw	255
 11613  010E1C  2597               	addwf	(??___fladd+4)& (0+255),w,b
 11614  010E1E  6F8B               	movwf	___fladd@b& (0+255),b
 11615  010E20  0EFF               	movlw	255
 11616  010E22  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 11617  010E24  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11618  010E26  0EFF               	movlw	255
 11619  010E28  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 11620  010E2A  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11621  010E2C  0EFF               	movlw	255
 11622  010E2E  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 11623  010E30  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11624  010E32  0E80               	movlw	128
 11625  010E34  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 11626                           
 11627                           ; BSR set to: 0
 11628  010E36  6D9E               	negf	___fladd@grs& (0+255),b
 11629                           
 11630                           ; BSR set to: 0
 11631  010E38  519E               	movf	___fladd@grs& (0+255),w,b
 11632  010E3A  A4D8               	btfss	status,2,c
 11633  010E3C  D00F               	goto	l2976
 11634                           
 11635                           ; BSR set to: 0
 11636  010E3E  0E01               	movlw	1
 11637  010E40  278B               	addwf	___fladd@b& (0+255),f,b
 11638  010E42  0E00               	movlw	0
 11639  010E44  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 11640  010E46  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 11641  010E48  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 11642                           
 11643                           ; BSR set to: 0
 11644  010E4A  D008               	goto	l2976
 11645  010E4C                     l2974:
 11646                           
 11647                           ; BSR set to: 0
 11648                           
 11649                           ; BSR set to: 0
 11650  010E4C  518F               	movf	___fladd@a& (0+255),w,b
 11651  010E4E  5F8B               	subwf	___fladd@b& (0+255),f,b
 11652  010E50  5190               	movf	(___fladd@a+1)& (0+255),w,b
 11653  010E52  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 11654  010E54  5191               	movf	(___fladd@a+2)& (0+255),w,b
 11655  010E56  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 11656  010E58  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11657  010E5A  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 11658  010E5C                     l2976:
 11659                           
 11660                           ; BSR set to: 0
 11661  010E5C  518B               	movf	___fladd@b& (0+255),w,b
 11662  010E5E  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 11663  010E60  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 11664  010E62  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 11665  010E64  A4D8               	btfss	status,2,c
 11666  010E66  D01C               	goto	l2983
 11667                           
 11668                           ; BSR set to: 0
 11669  010E68  519E               	movf	___fladd@grs& (0+255),w,b
 11670  010E6A  A4D8               	btfss	status,2,c
 11671  010E6C  D019               	goto	l2983
 11672                           
 11673                           ; BSR set to: 0
 11674  010E6E  0E00               	movlw	0
 11675  010E70  6F8B               	movwf	?___fladd& (0+255),b
 11676  010E72  0E00               	movlw	0
 11677  010E74  6F8C               	movwf	(?___fladd+1)& (0+255),b
 11678  010E76  0E00               	movlw	0
 11679  010E78  6F8D               	movwf	(?___fladd+2)& (0+255),b
 11680  010E7A  0E00               	movlw	0
 11681  010E7C  6F8E               	movwf	(?___fladd+3)& (0+255),b
 11682                           
 11683                           ; BSR set to: 0
 11684  010E7E  0012               	return	
 11685  010E80                     
 11686                           ; BSR set to: 0
 11687                           
 11688                           ; BSR set to: 0
 11689  010E80  90D8               	bcf	status,0,c
 11690  010E82  378B               	rlcf	___fladd@b& (0+255),f,b
 11691  010E84  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 11692  010E86  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 11693  010E88  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 11694                           
 11695                           ; BSR set to: 0
 11696  010E8A  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 11697                           
 11698                           ; BSR set to: 0
 11699  010E8C  818B               	bsf	___fladd@b& (0+255),0,b
 11700                           
 11701                           ; BSR set to: 0
 11702                           
 11703                           ; BSR set to: 0
 11704  010E8E  A19E               	btfss	___fladd@grs& (0+255),0,b
 11705  010E90  D002               	goto	l2981
 11706                           
 11707                           ; BSR set to: 0
 11708  010E92  80D8               	bsf	status,0,c
 11709  010E94  D001               	goto	L8
 11710  010E96                     l2981:
 11711                           
 11712                           ; BSR set to: 0
 11713                           
 11714                           ; BSR set to: 0
 11715  010E96  90D8               	bcf	status,0,c
 11716  010E98                     L8:
 11717  010E98  379E               	rlcf	___fladd@grs& (0+255),f,b
 11718                           
 11719                           ; BSR set to: 0
 11720                           
 11721                           ; BSR set to: 0
 11722  010E9A  519D               	movf	___fladd@bexp& (0+255),w,b
 11723  010E9C  A4D8               	btfss	status,2,c
 11724                           
 11725                           ; BSR set to: 0
 11726  010E9E  079D               	decf	___fladd@bexp& (0+255),f,b
 11727  010EA0                     l2983:
 11728                           
 11729                           ; BSR set to: 0
 11730                           
 11731                           ; BSR set to: 0
 11732                           
 11733                           ; BSR set to: 0
 11734  010EA0  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 11735  010EA2  D7EE               	goto	l2979
 11736  010EA4                     u10660:
 11737                           
 11738                           ; BSR set to: 0
 11739                           
 11740                           ; BSR set to: 0
 11741                           
 11742                           ; BSR set to: 0
 11743  010EA4  0E00               	movlw	0
 11744  010EA6  6F9C               	movwf	___fladd@aexp& (0+255),b
 11745                           
 11746                           ; BSR set to: 0
 11747  010EA8  AF9E               	btfss	___fladd@grs& (0+255),7,b
 11748  010EAA  D00A               	goto	l2988
 11749                           
 11750                           ; BSR set to: 0
 11751  010EAC  C09E  F093         	movff	___fladd@grs,??___fladd
 11752  010EB0  0E7F               	movlw	127
 11753  010EB2  1793               	andwf	??___fladd& (0+255),f,b
 11754  010EB4  A4D8               	btfss	status,2,c
 11755  010EB6  D002               	goto	u10690
 11756                           
 11757                           ; BSR set to: 0
 11758                           
 11759                           ; BSR set to: 0
 11760  010EB8  A18B               	btfss	___fladd@b& (0+255),0,b
 11761  010EBA  D002               	goto	l2988
 11762  010EBC                     u10690:
 11763                           
 11764                           ; BSR set to: 0
 11765  010EBC  0E01               	movlw	1
 11766  010EBE  6F9C               	movwf	___fladd@aexp& (0+255),b
 11767  010EC0                     l2988:
 11768                           
 11769                           ; BSR set to: 0
 11770                           
 11771                           ; BSR set to: 0
 11772                           
 11773                           ; BSR set to: 0
 11774  010EC0  519C               	movf	___fladd@aexp& (0+255),w,b
 11775  010EC2  B4D8               	btfsc	status,2,c
 11776  010EC4  D020               	goto	l2991
 11777                           
 11778                           ; BSR set to: 0
 11779  010EC6  0E01               	movlw	1
 11780  010EC8  278B               	addwf	___fladd@b& (0+255),f,b
 11781  010ECA  0E00               	movlw	0
 11782  010ECC  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 11783  010ECE  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 11784  010ED0  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 11785                           
 11786                           ; BSR set to: 0
 11787  010ED2  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 11788  010ED4  D018               	goto	l2991
 11789                           
 11790                           ; BSR set to: 0
 11791  010ED6  C08B  F093         	movff	___fladd@b,??___fladd
 11792  010EDA  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 11793  010EDE  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 11794  010EE2  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 11795  010EE6  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 11796  010EE8  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 11797  010EEA  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 11798  010EEC  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 11799  010EEE  3393               	rrcf	??___fladd& (0+255),f,b
 11800  010EF0  C093  F08B         	movff	??___fladd,___fladd@b
 11801  010EF4  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 11802  010EF8  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 11803  010EFC  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 11804  010F00  299D               	incf	___fladd@bexp& (0+255),w,b
 11805  010F02  A4D8               	btfss	status,2,c
 11806                           
 11807                           ; BSR set to: 0
 11808  010F04  2B9D               	incf	___fladd@bexp& (0+255),f,b
 11809  010F06                     l2991:
 11810                           
 11811                           ; BSR set to: 0
 11812                           
 11813                           ; BSR set to: 0
 11814                           
 11815                           ; BSR set to: 0
 11816                           
 11817                           ; BSR set to: 0
 11818  010F06  299D               	incf	___fladd@bexp& (0+255),w,b
 11819  010F08  B4D8               	btfsc	status,2,c
 11820  010F0A  D003               	goto	u10740
 11821                           
 11822                           ; BSR set to: 0
 11823  010F0C  519D               	movf	___fladd@bexp& (0+255),w,b
 11824  010F0E  A4D8               	btfss	status,2,c
 11825  010F10  D00D               	goto	l2995
 11826  010F12                     u10740:
 11827                           
 11828                           ; BSR set to: 0
 11829                           
 11830                           ; BSR set to: 0
 11831  010F12  0E00               	movlw	0
 11832  010F14  6F8B               	movwf	___fladd@b& (0+255),b
 11833  010F16  0E00               	movlw	0
 11834  010F18  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11835  010F1A  0E00               	movlw	0
 11836  010F1C  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11837  010F1E  0E00               	movlw	0
 11838  010F20  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11839  010F22  519D               	movf	___fladd@bexp& (0+255),w,b
 11840  010F24  A4D8               	btfss	status,2,c
 11841  010F26  D002               	goto	l2995
 11842                           
 11843                           ; BSR set to: 0
 11844  010F28  0E00               	movlw	0
 11845  010F2A  6F9B               	movwf	___fladd@signs& (0+255),b
 11846  010F2C                     l2995:
 11847                           
 11848                           ; BSR set to: 0
 11849                           
 11850                           ; BSR set to: 0
 11851                           
 11852                           ; BSR set to: 0
 11853  010F2C  A19D               	btfss	___fladd@bexp& (0+255),0,b
 11854  010F2E  D002               	goto	l2996
 11855                           
 11856                           ; BSR set to: 0
 11857  010F30  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 11858  010F32  D001               	goto	l2997
 11859  010F34                     l2996:
 11860                           
 11861                           ; BSR set to: 0
 11862                           
 11863                           ; BSR set to: 0
 11864  010F34  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 11865  010F36                     l2997:
 11866                           
 11867                           ; BSR set to: 0
 11868                           
 11869                           ; BSR set to: 0
 11870  010F36  90D8               	bcf	status,0,c
 11871  010F38  319D               	rrcf	___fladd@bexp& (0+255),w,b
 11872  010F3A  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11873                           
 11874                           ; BSR set to: 0
 11875  010F3C  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 11876                           
 11877                           ; BSR set to: 0
 11878  010F3E  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 11879                           
 11880                           ; BSR set to: 0
 11881                           
 11882                           ; BSR set to: 0
 11883  010F40  C08B  F08B         	movff	___fladd@b,?___fladd
 11884  010F44  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 11885  010F48  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 11886  010F4C  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 11887  010F50  0012               	return	
 11888  010F52                     __end_of___fladd:
 11889                           	opt stack 0
 11890                           tosu	equ	0xFFF
 11891                           tosh	equ	0xFFE
 11892                           tosl	equ	0xFFD
 11893                           pclath	equ	0xFFA
 11894                           tblptru	equ	0xFF8
 11895                           tblptrh	equ	0xFF7
 11896                           tblptrl	equ	0xFF6
 11897                           tablat	equ	0xFF5
 11898                           prodh	equ	0xFF4
 11899                           prodl	equ	0xFF3
 11900                           postinc0	equ	0xFEE
 11901                           wreg	equ	0xFE8
 11902                           postdec1	equ	0xFE5
 11903                           fsr1h	equ	0xFE2
 11904                           fsr1l	equ	0xFE1
 11905                           indf2	equ	0xFDF
 11906                           postinc2	equ	0xFDE
 11907                           postdec2	equ	0xFDD
 11908                           fsr2h	equ	0xFDA
 11909                           fsr2l	equ	0xFD9
 11910                           status	equ	0xFD8
 11911                           
 11912 ;; *************** function ___flneg *****************
 11913 ;; Defined at:
 11914 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flneg.c"
 11915 ;; Parameters:    Size  Location     Type
 11916 ;;  f1              4   39[BANK0 ] unsigned char 
 11917 ;; Auto vars:     Size  Location     Type
 11918 ;;		None
 11919 ;; Return value:  Size  Location     Type
 11920 ;;                  4   39[BANK0 ] unsigned char 
 11921 ;; Registers used:
 11922 ;;		wreg, status,2, status,0
 11923 ;; Tracked objects:
 11924 ;;		On entry : 0/0
 11925 ;;		On exit  : 0/0
 11926 ;;		Unchanged: 0/0
 11927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11928 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11931 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11932 ;;Total ram usage:        4 bytes
 11933 ;; Hardware stack levels used:    1
 11934 ;; Hardware stack levels required when called:    7
 11935 ;; This function calls:
 11936 ;;		Nothing
 11937 ;; This function is called by:
 11938 ;;		_ADCAverage
 11939 ;;		_pow
 11940 ;;		_exp
 11941 ;; This function uses a non-reentrant model
 11942 ;;
 11943                           
 11944                           	psect	text35
 11945  015692                     __ptext35:
 11946                           	opt stack 0
 11947  015692                     ___flneg:
 11948                           	opt stack 19
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;incstack = 0
 11952  015692  0100               	movlb	0	; () banked
 11953  015694  5187               	movf	___flneg@f1& (0+255),w,b
 11954  015696  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 11955  015698  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 11956  01569A  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 11957  01569C  B4D8               	btfsc	status,2,c
 11958  01569E  D008               	goto	l2711
 11959                           
 11960                           ; BSR set to: 0
 11961  0156A0  0E00               	movlw	0
 11962  0156A2  1B87               	xorwf	___flneg@f1& (0+255),f,b
 11963  0156A4  0E00               	movlw	0
 11964  0156A6  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 11965  0156A8  0E00               	movlw	0
 11966  0156AA  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 11967  0156AC  0E80               	movlw	128
 11968  0156AE  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 11969  0156B0                     l2711:
 11970                           
 11971                           ; BSR set to: 0
 11972                           
 11973                           ; BSR set to: 0
 11974  0156B0  C087  F087         	movff	___flneg@f1,?___flneg
 11975  0156B4  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 11976  0156B8  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 11977  0156BC  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 11978  0156C0  0012               	return	
 11979  0156C2                     __end_of___flneg:
 11980                           	opt stack 0
 11981                           tosu	equ	0xFFF
 11982                           tosh	equ	0xFFE
 11983                           tosl	equ	0xFFD
 11984                           pclath	equ	0xFFA
 11985                           tblptru	equ	0xFF8
 11986                           tblptrh	equ	0xFF7
 11987                           tblptrl	equ	0xFF6
 11988                           tablat	equ	0xFF5
 11989                           prodh	equ	0xFF4
 11990                           prodl	equ	0xFF3
 11991                           postinc0	equ	0xFEE
 11992                           wreg	equ	0xFE8
 11993                           postdec1	equ	0xFE5
 11994                           fsr1h	equ	0xFE2
 11995                           fsr1l	equ	0xFE1
 11996                           indf2	equ	0xFDF
 11997                           postinc2	equ	0xFDE
 11998                           postdec2	equ	0xFDD
 11999                           fsr2h	equ	0xFDA
 12000                           fsr2l	equ	0xFD9
 12001                           status	equ	0xFD8
 12002                           
 12003 ;; *************** function ___fldiv *****************
 12004 ;; Defined at:
 12005 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcdiv.c"
 12006 ;; Parameters:    Size  Location     Type
 12007 ;;  b               4    0[BANK0 ] unsigned char 
 12008 ;;  a               4    4[BANK0 ] unsigned char 
 12009 ;; Auto vars:     Size  Location     Type
 12010 ;;  grs             4   19[BANK0 ] unsigned long 
 12011 ;;  rem             4   13[BANK0 ] unsigned long 
 12012 ;;  new_exp         2   17[BANK0 ] int 
 12013 ;;  aexp            1   24[BANK0 ] unsigned char 
 12014 ;;  bexp            1   23[BANK0 ] unsigned char 
 12015 ;;  sign            1   12[BANK0 ] unsigned char 
 12016 ;; Return value:  Size  Location     Type
 12017 ;;                  4    0[BANK0 ] unsigned char 
 12018 ;; Registers used:
 12019 ;;		wreg, status,2, status,0
 12020 ;; Tracked objects:
 12021 ;;		On entry : 0/0
 12022 ;;		On exit  : 0/0
 12023 ;;		Unchanged: 0/0
 12024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12025 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12026 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12027 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12028 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12029 ;;Total ram usage:       25 bytes
 12030 ;; Hardware stack levels used:    1
 12031 ;; Hardware stack levels required when called:    7
 12032 ;; This function calls:
 12033 ;;		Nothing
 12034 ;; This function is called by:
 12035 ;;		_exp
 12036 ;;		_ADC_Voltage
 12037 ;; This function uses a non-reentrant model
 12038 ;;
 12039                           
 12040                           	psect	text36
 12041  011242                     __ptext36:
 12042                           	opt stack 0
 12043  011242                     ___fldiv:
 12044                           	opt stack 19
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;incstack = 0
 12048  011242  0100               	movlb	0	; () banked
 12049  011244  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 12050  011246  0B80               	andlw	128
 12051  011248  6F6C               	movwf	___fldiv@sign& (0+255),b
 12052  01124A  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 12053  01124C  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 12054  01124E  6F77               	movwf	___fldiv@bexp& (0+255),b
 12055                           
 12056                           ; BSR set to: 0
 12057  011250  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 12058                           
 12059                           ; BSR set to: 0
 12060  011252  8177               	bsf	___fldiv@bexp& (0+255),0,b
 12061                           
 12062                           ; BSR set to: 0
 12063                           
 12064                           ; BSR set to: 0
 12065  011254  5177               	movf	___fldiv@bexp& (0+255),w,b
 12066  011256  B4D8               	btfsc	status,2,c
 12067  011258  D00D               	goto	l3005
 12068                           
 12069                           ; BSR set to: 0
 12070  01125A  2977               	incf	___fldiv@bexp& (0+255),w,b
 12071  01125C  A4D8               	btfss	status,2,c
 12072  01125E  D008               	goto	l3006
 12073                           
 12074                           ; BSR set to: 0
 12075  011260  0E00               	movlw	0
 12076  011262  6F60               	movwf	___fldiv@b& (0+255),b
 12077  011264  0E00               	movlw	0
 12078  011266  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12079  011268  0E00               	movlw	0
 12080  01126A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12081  01126C  0E00               	movlw	0
 12082  01126E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12083  011270                     l3006:
 12084                           
 12085                           ; BSR set to: 0
 12086                           
 12087                           ; BSR set to: 0
 12088  011270  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 12089  011272  D006               	goto	L9
 12090  011274                     l3005:
 12091                           
 12092                           ; BSR set to: 0
 12093                           
 12094                           ; BSR set to: 0
 12095  011274  0E00               	movlw	0
 12096  011276  6F60               	movwf	___fldiv@b& (0+255),b
 12097  011278  0E00               	movlw	0
 12098  01127A  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12099  01127C  0E00               	movlw	0
 12100  01127E  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12101  011280                     L9:
 12102  011280  0E00               	movlw	0
 12103  011282  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12104                           
 12105                           ; BSR set to: 0
 12106                           
 12107                           ; BSR set to: 0
 12108  011284  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 12109  011286  0B80               	andlw	128
 12110  011288  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 12111                           
 12112                           ; BSR set to: 0
 12113  01128A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 12114  01128C  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 12115  01128E  6F78               	movwf	___fldiv@aexp& (0+255),b
 12116                           
 12117                           ; BSR set to: 0
 12118  011290  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 12119                           
 12120                           ; BSR set to: 0
 12121  011292  8178               	bsf	___fldiv@aexp& (0+255),0,b
 12122                           
 12123                           ; BSR set to: 0
 12124                           
 12125                           ; BSR set to: 0
 12126  011294  5178               	movf	___fldiv@aexp& (0+255),w,b
 12127  011296  B4D8               	btfsc	status,2,c
 12128  011298  D00D               	goto	l3009
 12129                           
 12130                           ; BSR set to: 0
 12131  01129A  2978               	incf	___fldiv@aexp& (0+255),w,b
 12132  01129C  A4D8               	btfss	status,2,c
 12133  01129E  D008               	goto	l3010
 12134                           
 12135                           ; BSR set to: 0
 12136  0112A0  0E00               	movlw	0
 12137  0112A2  6F64               	movwf	___fldiv@a& (0+255),b
 12138  0112A4  0E00               	movlw	0
 12139  0112A6  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 12140  0112A8  0E00               	movlw	0
 12141  0112AA  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 12142  0112AC  0E00               	movlw	0
 12143  0112AE  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 12144  0112B0                     l3010:
 12145                           
 12146                           ; BSR set to: 0
 12147                           
 12148                           ; BSR set to: 0
 12149  0112B0  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 12150  0112B2  D006               	goto	L10
 12151  0112B4                     l3009:
 12152                           
 12153                           ; BSR set to: 0
 12154                           
 12155                           ; BSR set to: 0
 12156  0112B4  0E00               	movlw	0
 12157  0112B6  6F64               	movwf	___fldiv@a& (0+255),b
 12158  0112B8  0E00               	movlw	0
 12159  0112BA  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 12160  0112BC  0E00               	movlw	0
 12161  0112BE  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 12162  0112C0                     L10:
 12163  0112C0  0E00               	movlw	0
 12164  0112C2  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 12165                           
 12166                           ; BSR set to: 0
 12167                           
 12168                           ; BSR set to: 0
 12169  0112C4  5164               	movf	___fldiv@a& (0+255),w,b
 12170  0112C6  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12171  0112C8  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12172  0112CA  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12173  0112CC  A4D8               	btfss	status,2,c
 12174  0112CE  D015               	goto	l3012
 12175                           
 12176                           ; BSR set to: 0
 12177  0112D0  0E00               	movlw	0
 12178  0112D2  6F60               	movwf	___fldiv@b& (0+255),b
 12179  0112D4  0E00               	movlw	0
 12180  0112D6  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12181  0112D8  0E00               	movlw	0
 12182  0112DA  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12183  0112DC  0E00               	movlw	0
 12184  0112DE  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12185                           
 12186                           ; BSR set to: 0
 12187  0112E0  0E80               	movlw	128
 12188  0112E2  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12189  0112E4  0E7F               	movlw	127
 12190  0112E6  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12191                           
 12192                           ; BSR set to: 0
 12193  0112E8  C060  F060         	movff	___fldiv@b,?___fldiv
 12194  0112EC  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 12195  0112F0  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 12196  0112F4  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 12197                           
 12198                           ; BSR set to: 0
 12199  0112F8  0012               	return	
 12200  0112FA                     l3012:
 12201                           
 12202                           ; BSR set to: 0
 12203                           
 12204                           ; BSR set to: 0
 12205  0112FA  5177               	movf	___fldiv@bexp& (0+255),w,b
 12206  0112FC  A4D8               	btfss	status,2,c
 12207  0112FE  D011               	goto	l3014
 12208                           
 12209                           ; BSR set to: 0
 12210  011300  0E00               	movlw	0
 12211  011302  6F60               	movwf	___fldiv@b& (0+255),b
 12212  011304  0E00               	movlw	0
 12213  011306  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12214  011308  0E00               	movlw	0
 12215  01130A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12216  01130C  0E00               	movlw	0
 12217  01130E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12218                           
 12219                           ; BSR set to: 0
 12220  011310  C060  F060         	movff	___fldiv@b,?___fldiv
 12221  011314  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 12222  011318  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 12223  01131C  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 12224                           
 12225                           ; BSR set to: 0
 12226  011320  0012               	return	
 12227  011322                     l3014:
 12228                           
 12229                           ; BSR set to: 0
 12230                           
 12231                           ; BSR set to: 0
 12232  011322  5178               	movf	___fldiv@aexp& (0+255),w,b
 12233  011324  6F68               	movwf	??___fldiv& (0+255),b
 12234  011326  6B69               	clrf	(??___fldiv+1)& (0+255),b
 12235  011328  1F68               	comf	??___fldiv& (0+255),f,b
 12236  01132A  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 12237  01132C  4B68               	infsnz	??___fldiv& (0+255),f,b
 12238  01132E  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 12239  011330  5177               	movf	___fldiv@bexp& (0+255),w,b
 12240  011332  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 12241  011334  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 12242  011336  5168               	movf	??___fldiv& (0+255),w,b
 12243  011338  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 12244  01133A  5169               	movf	(??___fldiv+1)& (0+255),w,b
 12245  01133C  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 12246  01133E  0E7F               	movlw	127
 12247  011340  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 12248  011342  6F71               	movwf	___fldiv@new_exp& (0+255),b
 12249  011344  0E00               	movlw	0
 12250  011346  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 12251  011348  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12252                           
 12253                           ; BSR set to: 0
 12254  01134A  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 12255  01134E  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 12256  011352  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 12257  011356  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 12258                           
 12259                           ; BSR set to: 0
 12260  01135A  0E00               	movlw	0
 12261  01135C  6F60               	movwf	___fldiv@b& (0+255),b
 12262  01135E  0E00               	movlw	0
 12263  011360  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12264  011362  0E00               	movlw	0
 12265  011364  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12266  011366  0E00               	movlw	0
 12267  011368  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12268                           
 12269                           ; BSR set to: 0
 12270  01136A  0E00               	movlw	0
 12271  01136C  6F73               	movwf	___fldiv@grs& (0+255),b
 12272  01136E  0E00               	movlw	0
 12273  011370  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 12274  011372  0E00               	movlw	0
 12275  011374  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 12276  011376  0E00               	movlw	0
 12277  011378  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 12278                           
 12279                           ; BSR set to: 0
 12280  01137A  0E00               	movlw	0
 12281  01137C  6F78               	movwf	___fldiv@aexp& (0+255),b
 12282  01137E  D028               	goto	l3015
 12283  011380                     
 12284                           ; BSR set to: 0
 12285                           
 12286                           ; BSR set to: 0
 12287  011380  5178               	movf	___fldiv@aexp& (0+255),w,b
 12288  011382  B4D8               	btfsc	status,2,c
 12289  011384  D011               	goto	l3017
 12290                           
 12291                           ; BSR set to: 0
 12292  011386  90D8               	bcf	status,0,c
 12293  011388  376D               	rlcf	___fldiv@rem& (0+255),f,b
 12294  01138A  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12295  01138C  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12296  01138E  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12297  011390  90D8               	bcf	status,0,c
 12298  011392  3760               	rlcf	___fldiv@b& (0+255),f,b
 12299  011394  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12300  011396  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12301  011398  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12302                           
 12303                           ; BSR set to: 0
 12304  01139A  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 12305                           
 12306                           ; BSR set to: 0
 12307  01139C  8160               	bsf	___fldiv@b& (0+255),0,b
 12308                           
 12309                           ; BSR set to: 0
 12310  01139E  90D8               	bcf	status,0,c
 12311  0113A0  3773               	rlcf	___fldiv@grs& (0+255),f,b
 12312  0113A2  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12313  0113A4  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12314  0113A6  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12315  0113A8                     l3017:
 12316                           
 12317                           ; BSR set to: 0
 12318                           
 12319                           ; BSR set to: 0
 12320  0113A8  5164               	movf	___fldiv@a& (0+255),w,b
 12321  0113AA  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 12322  0113AC  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 12323  0113AE  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12324  0113B0  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 12325  0113B2  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12326  0113B4  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 12327  0113B6  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12328  0113B8  A0D8               	btfss	status,0,c
 12329  0113BA  D009               	goto	l3019
 12330                           
 12331                           ; BSR set to: 0
 12332  0113BC  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12333                           
 12334                           ; BSR set to: 0
 12335  0113BE  5164               	movf	___fldiv@a& (0+255),w,b
 12336  0113C0  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 12337  0113C2  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 12338  0113C4  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12339  0113C6  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 12340  0113C8  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12341  0113CA  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 12342  0113CC  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12343  0113CE                     l3019:
 12344                           
 12345                           ; BSR set to: 0
 12346                           
 12347                           ; BSR set to: 0
 12348  0113CE  2B78               	incf	___fldiv@aexp& (0+255),f,b
 12349  0113D0                     l3015:
 12350                           
 12351                           ; BSR set to: 0
 12352  0113D0  0E19               	movlw	25
 12353  0113D2  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 12354  0113D4  D7D5               	goto	l3016
 12355                           
 12356                           ; BSR set to: 0
 12357                           
 12358                           ; BSR set to: 0
 12359  0113D6  516D               	movf	___fldiv@rem& (0+255),w,b
 12360  0113D8  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12361  0113DA  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12362  0113DC  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12363  0113DE  B4D8               	btfsc	status,2,c
 12364  0113E0  D011               	goto	l3022
 12365                           
 12366                           ; BSR set to: 0
 12367  0113E2  8173               	bsf	___fldiv@grs& (0+255),0,b
 12368                           
 12369                           ; BSR set to: 0
 12370  0113E4  D00F               	goto	l3022
 12371  0113E6                     
 12372                           ; BSR set to: 0
 12373                           
 12374                           ; BSR set to: 0
 12375  0113E6  90D8               	bcf	status,0,c
 12376  0113E8  3760               	rlcf	___fldiv@b& (0+255),f,b
 12377  0113EA  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12378  0113EC  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12379  0113EE  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12380                           
 12381                           ; BSR set to: 0
 12382  0113F0  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 12383                           
 12384                           ; BSR set to: 0
 12385  0113F2  8160               	bsf	___fldiv@b& (0+255),0,b
 12386                           
 12387                           ; BSR set to: 0
 12388  0113F4  90D8               	bcf	status,0,c
 12389  0113F6  3773               	rlcf	___fldiv@grs& (0+255),f,b
 12390  0113F8  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12391  0113FA  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12392  0113FC  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12393  0113FE  0771               	decf	___fldiv@new_exp& (0+255),f,b
 12394  011400  A0D8               	btfss	status,0,c
 12395  011402  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12396  011404                     l3022:
 12397                           
 12398                           ; BSR set to: 0
 12399                           
 12400                           ; BSR set to: 0
 12401  011404  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 12402  011406  D7EF               	goto	l3023
 12403                           
 12404                           ; BSR set to: 0
 12405                           
 12406                           ; BSR set to: 0
 12407  011408  0E00               	movlw	0
 12408  01140A  6F78               	movwf	___fldiv@aexp& (0+255),b
 12409                           
 12410                           ; BSR set to: 0
 12411  01140C  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12412  01140E  D016               	goto	l3029
 12413                           
 12414                           ; BSR set to: 0
 12415  011410  0EFF               	movlw	255
 12416  011412  1573               	andwf	___fldiv@grs& (0+255),w,b
 12417  011414  6F68               	movwf	??___fldiv& (0+255),b
 12418  011416  0EFF               	movlw	255
 12419  011418  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12420  01141A  6F69               	movwf	(??___fldiv+1)& (0+255),b
 12421  01141C  0EFF               	movlw	255
 12422  01141E  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12423  011420  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 12424  011422  0E7F               	movlw	127
 12425  011424  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12426  011426  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 12427  011428  5168               	movf	??___fldiv& (0+255),w,b
 12428  01142A  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 12429  01142C  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 12430  01142E  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 12431  011430  A4D8               	btfss	status,2,c
 12432  011432  D002               	goto	u11620
 12433                           
 12434                           ; BSR set to: 0
 12435                           
 12436                           ; BSR set to: 0
 12437  011434  A160               	btfss	___fldiv@b& (0+255),0,b
 12438  011436  D002               	goto	l3029
 12439  011438                     u11620:
 12440                           
 12441                           ; BSR set to: 0
 12442  011438  0E01               	movlw	1
 12443  01143A  6F78               	movwf	___fldiv@aexp& (0+255),b
 12444  01143C                     l3029:
 12445                           
 12446                           ; BSR set to: 0
 12447                           
 12448                           ; BSR set to: 0
 12449                           
 12450                           ; BSR set to: 0
 12451  01143C  5178               	movf	___fldiv@aexp& (0+255),w,b
 12452  01143E  B4D8               	btfsc	status,2,c
 12453  011440  D01F               	goto	l3031
 12454                           
 12455                           ; BSR set to: 0
 12456  011442  0E01               	movlw	1
 12457  011444  2760               	addwf	___fldiv@b& (0+255),f,b
 12458  011446  0E00               	movlw	0
 12459  011448  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12460  01144A  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12461  01144C  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12462                           
 12463                           ; BSR set to: 0
 12464  01144E  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 12465  011450  D017               	goto	l3031
 12466                           
 12467                           ; BSR set to: 0
 12468  011452  C060  F068         	movff	___fldiv@b,??___fldiv
 12469  011456  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 12470  01145A  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 12471  01145E  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 12472  011462  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 12473  011464  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 12474  011466  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 12475  011468  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 12476  01146A  3368               	rrcf	??___fldiv& (0+255),f,b
 12477  01146C  C068  F060         	movff	??___fldiv,___fldiv@b
 12478  011470  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 12479  011474  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 12480  011478  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 12481                           
 12482                           ; BSR set to: 0
 12483  01147C  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 12484  01147E  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12485  011480                     l3031:
 12486                           
 12487                           ; BSR set to: 0
 12488                           
 12489                           ; BSR set to: 0
 12490                           
 12491                           ; BSR set to: 0
 12492  011480  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12493  011482  D010               	goto	l3032
 12494  011484  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12495  011486  E103               	bnz	u11650
 12496  011488  2971               	incf	___fldiv@new_exp& (0+255),w,b
 12497  01148A  A0D8               	btfss	status,0,c
 12498  01148C  D00B               	goto	l3032
 12499  01148E                     u11650:
 12500                           
 12501                           ; BSR set to: 0
 12502  01148E  0E00               	movlw	0
 12503  011490  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12504  011492  6971               	setf	___fldiv@new_exp& (0+255),b
 12505  011494  0E00               	movlw	0
 12506  011496  6F60               	movwf	___fldiv@b& (0+255),b
 12507  011498  0E00               	movlw	0
 12508  01149A  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12509  01149C  0E00               	movlw	0
 12510  01149E  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12511  0114A0  0E00               	movlw	0
 12512  0114A2  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12513  0114A4                     l3032:
 12514                           
 12515                           ; BSR set to: 0
 12516                           
 12517                           ; BSR set to: 0
 12518  0114A4  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12519  0114A6  D005               	goto	u11660
 12520  0114A8  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12521  0114AA  E111               	bnz	l14161
 12522  0114AC  0571               	decf	___fldiv@new_exp& (0+255),w,b
 12523  0114AE  B0D8               	btfsc	status,0,c
 12524  0114B0  D00E               	goto	l3033
 12525  0114B2                     u11660:
 12526                           
 12527                           ; BSR set to: 0
 12528  0114B2  0E00               	movlw	0
 12529  0114B4  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12530  0114B6  0E00               	movlw	0
 12531  0114B8  6F71               	movwf	___fldiv@new_exp& (0+255),b
 12532  0114BA  0E00               	movlw	0
 12533  0114BC  6F60               	movwf	___fldiv@b& (0+255),b
 12534  0114BE  0E00               	movlw	0
 12535  0114C0  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12536  0114C2  0E00               	movlw	0
 12537  0114C4  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12538  0114C6  0E00               	movlw	0
 12539  0114C8  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12540  0114CA  0E00               	movlw	0
 12541  0114CC  6F6C               	movwf	___fldiv@sign& (0+255),b
 12542  0114CE                     l3033:
 12543  0114CE                     l14161:
 12544                           
 12545                           ; BSR set to: 0
 12546  0114CE  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 12547                           
 12548                           ; BSR set to: 0
 12549  0114D2  A177               	btfss	___fldiv@bexp& (0+255),0,b
 12550  0114D4  D002               	goto	l3034
 12551                           
 12552                           ; BSR set to: 0
 12553  0114D6  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 12554  0114D8  D001               	goto	l3035
 12555  0114DA                     l3034:
 12556                           
 12557                           ; BSR set to: 0
 12558                           
 12559                           ; BSR set to: 0
 12560  0114DA  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 12561  0114DC                     l3035:
 12562                           
 12563                           ; BSR set to: 0
 12564                           
 12565                           ; BSR set to: 0
 12566  0114DC  90D8               	bcf	status,0,c
 12567  0114DE  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 12568  0114E0  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12569                           
 12570                           ; BSR set to: 0
 12571  0114E2  516C               	movf	___fldiv@sign& (0+255),w,b
 12572  0114E4  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12573                           
 12574                           ; BSR set to: 0
 12575  0114E6  C060  F060         	movff	___fldiv@b,?___fldiv
 12576  0114EA  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 12577  0114EE  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 12578  0114F2  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 12579  0114F6  0012               	return	
 12580  0114F8                     __end_of___fldiv:
 12581                           	opt stack 0
 12582                           tosu	equ	0xFFF
 12583                           tosh	equ	0xFFE
 12584                           tosl	equ	0xFFD
 12585                           pclath	equ	0xFFA
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           postinc0	equ	0xFEE
 12593                           wreg	equ	0xFE8
 12594                           postdec1	equ	0xFE5
 12595                           fsr1h	equ	0xFE2
 12596                           fsr1l	equ	0xFE1
 12597                           indf2	equ	0xFDF
 12598                           postinc2	equ	0xFDE
 12599                           postdec2	equ	0xFDD
 12600                           fsr2h	equ	0xFDA
 12601                           fsr2l	equ	0xFD9
 12602                           status	equ	0xFD8
 12603                           
 12604 ;; *************** function ___awdiv *****************
 12605 ;; Defined at:
 12606 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
 12607 ;; Parameters:    Size  Location     Type
 12608 ;;  dividend        2    0[BANK0 ] int 
 12609 ;;  divisor         2    2[BANK0 ] int 
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;  quotient        2    6[BANK0 ] int 
 12612 ;;  sign            1    5[BANK0 ] unsigned char 
 12613 ;;  counter         1    4[BANK0 ] unsigned char 
 12614 ;; Return value:  Size  Location     Type
 12615 ;;                  2    0[BANK0 ] int 
 12616 ;; Registers used:
 12617 ;;		wreg, status,2, status,0
 12618 ;; Tracked objects:
 12619 ;;		On entry : 0/0
 12620 ;;		On exit  : 0/0
 12621 ;;		Unchanged: 0/0
 12622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12623 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12624 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12626 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12627 ;;Total ram usage:        8 bytes
 12628 ;; Hardware stack levels used:    1
 12629 ;; Hardware stack levels required when called:    7
 12630 ;; This function calls:
 12631 ;;		Nothing
 12632 ;; This function is called by:
 12633 ;;		_Console_Tab
 12634 ;;		_ADCAverage
 12635 ;; This function uses a non-reentrant model
 12636 ;;
 12637                           
 12638                           	psect	text37
 12639  014524                     __ptext37:
 12640                           	opt stack 0
 12641  014524                     ___awdiv:
 12642                           	opt stack 19
 12643                           
 12644                           ; BSR set to: 0
 12645                           ;incstack = 0
 12646  014524  0E00               	movlw	0
 12647  014526  0100               	movlb	0	; () banked
 12648  014528  6F65               	movwf	___awdiv@sign& (0+255),b
 12649                           
 12650                           ; BSR set to: 0
 12651  01452A  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12652  01452C  D006               	goto	l2672
 12653                           
 12654                           ; BSR set to: 0
 12655  01452E  6D62               	negf	___awdiv@divisor& (0+255),b
 12656  014530  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12657  014532  B0D8               	btfsc	status,0,c
 12658  014534  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12659                           
 12660                           ; BSR set to: 0
 12661  014536  0E01               	movlw	1
 12662  014538  6F65               	movwf	___awdiv@sign& (0+255),b
 12663  01453A                     l2672:
 12664                           
 12665                           ; BSR set to: 0
 12666                           
 12667                           ; BSR set to: 0
 12668  01453A  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12669  01453C  D006               	goto	l2673
 12670                           
 12671                           ; BSR set to: 0
 12672  01453E  6D60               	negf	___awdiv@dividend& (0+255),b
 12673  014540  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12674  014542  B0D8               	btfsc	status,0,c
 12675  014544  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12676                           
 12677                           ; BSR set to: 0
 12678  014546  0E01               	movlw	1
 12679  014548  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 12680  01454A                     l2673:
 12681                           
 12682                           ; BSR set to: 0
 12683                           
 12684                           ; BSR set to: 0
 12685  01454A  0E00               	movlw	0
 12686  01454C  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 12687  01454E  0E00               	movlw	0
 12688  014550  6F66               	movwf	___awdiv@quotient& (0+255),b
 12689                           
 12690                           ; BSR set to: 0
 12691  014552  5162               	movf	___awdiv@divisor& (0+255),w,b
 12692  014554  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12693  014556  B4D8               	btfsc	status,2,c
 12694  014558  D01C               	goto	l2680
 12695                           
 12696                           ; BSR set to: 0
 12697  01455A  0E01               	movlw	1
 12698  01455C  6F64               	movwf	___awdiv@counter& (0+255),b
 12699  01455E  D004               	goto	l2675
 12700  014560                     
 12701                           ; BSR set to: 0
 12702                           
 12703                           ; BSR set to: 0
 12704  014560  90D8               	bcf	status,0,c
 12705  014562  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 12706  014564  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12707  014566  2B64               	incf	___awdiv@counter& (0+255),f,b
 12708  014568                     l2675:
 12709                           
 12710                           ; BSR set to: 0
 12711                           
 12712                           ; BSR set to: 0
 12713  014568  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12714  01456A  D7FA               	goto	l2676
 12715  01456C                     u11000:
 12716                           
 12717                           ; BSR set to: 0
 12718                           
 12719                           ; BSR set to: 0
 12720                           
 12721                           ; BSR set to: 0
 12722  01456C  90D8               	bcf	status,0,c
 12723  01456E  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 12724  014570  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12725                           
 12726                           ; BSR set to: 0
 12727  014572  5162               	movf	___awdiv@divisor& (0+255),w,b
 12728  014574  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 12729  014576  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12730  014578  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12731  01457A  A0D8               	btfss	status,0,c
 12732  01457C  D005               	goto	l2679
 12733                           
 12734                           ; BSR set to: 0
 12735  01457E  5162               	movf	___awdiv@divisor& (0+255),w,b
 12736  014580  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 12737  014582  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12738  014584  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12739                           
 12740                           ; BSR set to: 0
 12741  014586  8166               	bsf	___awdiv@quotient& (0+255),0,b
 12742  014588                     l2679:
 12743                           
 12744                           ; BSR set to: 0
 12745                           
 12746                           ; BSR set to: 0
 12747  014588  90D8               	bcf	status,0,c
 12748  01458A  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12749  01458C  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 12750                           
 12751                           ; BSR set to: 0
 12752  01458E  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 12753  014590  D7ED               	goto	u11000
 12754  014592                     l2680:
 12755                           
 12756                           ; BSR set to: 0
 12757                           
 12758                           ; BSR set to: 0
 12759                           
 12760                           ; BSR set to: 0
 12761  014592  5165               	movf	___awdiv@sign& (0+255),w,b
 12762  014594  B4D8               	btfsc	status,2,c
 12763  014596  D004               	goto	l2681
 12764                           
 12765                           ; BSR set to: 0
 12766  014598  6D66               	negf	___awdiv@quotient& (0+255),b
 12767  01459A  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12768  01459C  B0D8               	btfsc	status,0,c
 12769  01459E  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12770  0145A0                     l2681:
 12771                           
 12772                           ; BSR set to: 0
 12773                           
 12774                           ; BSR set to: 0
 12775  0145A0  C066  F060         	movff	___awdiv@quotient,?___awdiv
 12776  0145A4  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 12777  0145A8  0012               	return	
 12778  0145AA                     __end_of___awdiv:
 12779                           	opt stack 0
 12780                           tosu	equ	0xFFF
 12781                           tosh	equ	0xFFE
 12782                           tosl	equ	0xFFD
 12783                           pclath	equ	0xFFA
 12784                           tblptru	equ	0xFF8
 12785                           tblptrh	equ	0xFF7
 12786                           tblptrl	equ	0xFF6
 12787                           tablat	equ	0xFF5
 12788                           prodh	equ	0xFF4
 12789                           prodl	equ	0xFF3
 12790                           postinc0	equ	0xFEE
 12791                           wreg	equ	0xFE8
 12792                           postdec1	equ	0xFE5
 12793                           fsr1h	equ	0xFE2
 12794                           fsr1l	equ	0xFE1
 12795                           indf2	equ	0xFDF
 12796                           postinc2	equ	0xFDE
 12797                           postdec2	equ	0xFDD
 12798                           fsr2h	equ	0xFDA
 12799                           fsr2l	equ	0xFD9
 12800                           status	equ	0xFD8
 12801                           
 12802 ;; *************** function _HMI_Render *****************
 12803 ;; Defined at:
 12804 ;;		line 138 in file "HMI.c"
 12805 ;; Parameters:    Size  Location     Type
 12806 ;;		None
 12807 ;; Auto vars:     Size  Location     Type
 12808 ;;  a               2    8[BANK0 ] unsigned short 
 12809 ;; Return value:  Size  Location     Type
 12810 ;;                  1    wreg      void 
 12811 ;; Registers used:
 12812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12813 ;; Tracked objects:
 12814 ;;		On entry : 0/0
 12815 ;;		On exit  : 0/0
 12816 ;;		Unchanged: 0/0
 12817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12819 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12821 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12822 ;;Total ram usage:        2 bytes
 12823 ;; Hardware stack levels used:    1
 12824 ;; Hardware stack levels required when called:    9
 12825 ;; This function calls:
 12826 ;;		_OutSeg
 12827 ;; This function is called by:
 12828 ;;		_main
 12829 ;;		_ADCAverage
 12830 ;; This function uses a non-reentrant model
 12831 ;;
 12832                           
 12833                           	psect	text38
 12834  015590                     __ptext38:
 12835                           	opt stack 0
 12836  015590                     _HMI_Render:
 12837                           	opt stack 19
 12838                           
 12839                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 12840                           
 12841                           ; BSR set to: 0
 12842                           ;incstack = 0
 12843  015590  0E00               	movlw	0
 12844  015592  0100               	movlb	0	; () banked
 12845  015594  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 12846  015596  0E00               	movlw	0
 12847  015598  6F68               	movwf	HMI_Render@a& (0+255),b
 12848  01559A                     l15013:
 12849                           
 12850                           ; BSR set to: 0
 12851  01559A  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 12852  01559C  E113               	bnz	l1158
 12853  01559E  0E08               	movlw	8
 12854  0155A0  5D68               	subwf	HMI_Render@a& (0+255),w,b
 12855  0155A2  B0D8               	btfsc	status,0,c
 12856  0155A4  0012               	return	
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 12860                           
 12861                           ; BSR set to: 0
 12862                           
 12863                           ; BSR set to: 0
 12864  0155A6  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 12865  0155AA  0E82               	movlw	low _HMIBoard
 12866  0155AC  2568               	addwf	HMI_Render@a& (0+255),w,b
 12867  0155AE  6ED9               	movwf	fsr2l,c
 12868  0155B0  0E02               	movlw	high _HMIBoard
 12869  0155B2  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 12870  0155B4  6EDA               	movwf	fsr2h,c
 12871  0155B6  50DF               	movf	indf2,w,c
 12872  0155B8  ECBF  F0A4         	call	_OutSeg
 12873  0155BC  0100               	movlb	0	; () banked
 12874  0155BE  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 12875  0155C0  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 12876  0155C2  D7EB               	goto	l15013
 12877  0155C4                     l1158:
 12878                           
 12879                           ; BSR set to: 0
 12880  0155C4  0012               	return		;funcret
 12881  0155C6                     __end_of_HMI_Render:
 12882                           	opt stack 0
 12883                           tosu	equ	0xFFF
 12884                           tosh	equ	0xFFE
 12885                           tosl	equ	0xFFD
 12886                           pclath	equ	0xFFA
 12887                           tblptru	equ	0xFF8
 12888                           tblptrh	equ	0xFF7
 12889                           tblptrl	equ	0xFF6
 12890                           tablat	equ	0xFF5
 12891                           prodh	equ	0xFF4
 12892                           prodl	equ	0xFF3
 12893                           postinc0	equ	0xFEE
 12894                           wreg	equ	0xFE8
 12895                           postdec1	equ	0xFE5
 12896                           fsr1h	equ	0xFE2
 12897                           fsr1l	equ	0xFE1
 12898                           indf2	equ	0xFDF
 12899                           postinc2	equ	0xFDE
 12900                           postdec2	equ	0xFDD
 12901                           fsr2h	equ	0xFDA
 12902                           fsr2l	equ	0xFD9
 12903                           status	equ	0xFD8
 12904                           
 12905 ;; *************** function _OutSeg *****************
 12906 ;; Defined at:
 12907 ;;		line 54 in file "HMI.c"
 12908 ;; Parameters:    Size  Location     Type
 12909 ;;  pInput          1    wreg     unsigned char 
 12910 ;;  pSegment        1    3[BANK0 ] unsigned char 
 12911 ;; Auto vars:     Size  Location     Type
 12912 ;;  pInput          1    6[BANK0 ] unsigned char 
 12913 ;;  out             1    7[BANK0 ] volatile unsigned char 
 12914 ;; Return value:  Size  Location     Type
 12915 ;;                  1    wreg      void 
 12916 ;; Registers used:
 12917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12918 ;; Tracked objects:
 12919 ;;		On entry : 0/0
 12920 ;;		On exit  : 0/0
 12921 ;;		Unchanged: 0/0
 12922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12923 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12924 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12925 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12926 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12927 ;;Total ram usage:        5 bytes
 12928 ;; Hardware stack levels used:    1
 12929 ;; Hardware stack levels required when called:    8
 12930 ;; This function calls:
 12931 ;;		_SPI_Send
 12932 ;; This function is called by:
 12933 ;;		_HMI_Render
 12934 ;;		_HMI_GRender
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938                           	psect	text39
 12939  01497E                     __ptext39:
 12940                           	opt stack 0
 12941  01497E                     _OutSeg:
 12942                           	opt stack 19
 12943                           
 12944                           ; BSR set to: 0
 12945                           ;incstack = 0
 12946                           ;OutSeg@pInput stored from wreg
 12947  01497E  0100               	movlb	0	; () banked
 12948  014980  6F66               	movwf	OutSeg@pInput& (0+255),b
 12949                           
 12950                           ;HMI.c: 58: static UINT8 cur;
 12951                           ;HMI.c: 59: volatile UINT8 out;
 12952                           ;HMI.c: 60: static UINT8 segset;
 12953                           ;HMI.c: 61: static UINT8 a;
 12954                           ;HMI.c: 83: if (pSegment <= 8)
 12955  014982  0E09               	movlw	9
 12956  014984  0100               	movlb	0	; () banked
 12957  014986  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 12958  014988  0012               	return	
 12959                           
 12960                           ; BSR set to: 0
 12961                           ;HMI.c: 84: {
 12962                           ;HMI.c: 85: cur = pInput;
 12963  01498A  C066  F044         	movff	OutSeg@pInput,OutSeg@cur
 12964                           
 12965                           ; BSR set to: 0
 12966                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 12967  01498E  0E00               	movlw	0
 12968  014990  6E42               	movwf	OutSeg@a,c
 12969  014992                     l14529:
 12970                           
 12971                           ; BSR set to: 0
 12972  014992  0E07               	movlw	7
 12973  014994  6442               	cpfsgt	OutSeg@a,c
 12974  014996  D001               	goto	l1146
 12975  014998  D01F               	goto	u12070
 12976  01499A                     l1146:
 12977                           
 12978                           ;HMI.c: 87: {
 12979                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 12980                           
 12981                           ; BSR set to: 0
 12982  01499A  C044  F064         	movff	OutSeg@cur,??_OutSeg
 12983  01499E  0E01               	movlw	1
 12984  0149A0  0100               	movlb	0	; () banked
 12985  0149A2  1764               	andwf	??_OutSeg& (0+255),f,b
 12986  0149A4  0E06               	movlw	6
 12987  0149A6  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 12988  0149A8                     u12065:
 12989  0149A8  90D8               	bcf	status,0,c
 12990  0149AA  3764               	rlcf	??_OutSeg& (0+255),f,b
 12991  0149AC  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 12992  0149AE  D7FC               	goto	u12065
 12993  0149B0  5164               	movf	??_OutSeg& (0+255),w,b
 12994  0149B2  6E43               	movwf	OutSeg@segset,c
 12995                           
 12996                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 12997  0149B4  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 12998  0149B6  42E8               	rrncf	wreg,f,c
 12999  0149B8  0BF8               	andlw	248
 13000  0149BA  1042               	iorwf	OutSeg@a,w,c
 13001  0149BC  1043               	iorwf	OutSeg@segset,w,c
 13002  0149BE  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 13003                           
 13004                           ;HMI.c: 90: cur >>= 1;
 13005  0149C0  90D8               	bcf	status,0,c
 13006  0149C2  3244               	rrcf	OutSeg@cur,f,c
 13007                           
 13008                           ; BSR set to: 0
 13009                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 13010  0149C4  0E61               	movlw	low _SPI1
 13011  0149C6  6F60               	movwf	SPI_Send@pInput& (0+255),b
 13012  0149C8  0E01               	movlw	high _SPI1
 13013  0149CA  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 13014  0149CC  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 13015  0149D0  EC2C  F0A5         	call	_SPI_Send	;wreg free
 13016  0149D4  2A42               	incf	OutSeg@a,f,c
 13017  0149D6  D7DD               	goto	l14529
 13018  0149D8                     u12070:
 13019                           
 13020                           ;HMI.c: 96: }
 13021                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 13022  0149D8  0E61               	movlw	low _SPI1
 13023  0149DA  0100               	movlb	0	; () banked
 13024  0149DC  6F60               	movwf	SPI_Send@pInput& (0+255),b
 13025  0149DE  0E01               	movlw	high _SPI1
 13026  0149E0  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 13027  0149E2  0E00               	movlw	0
 13028  0149E4  6F62               	movwf	SPI_Send@pData& (0+255),b
 13029  0149E6  EC2C  F0A5         	call	_SPI_Send	;wreg free
 13030  0149EA  0012               	return	
 13031  0149EC                     __end_of_OutSeg:
 13032                           	opt stack 0
 13033                           tosu	equ	0xFFF
 13034                           tosh	equ	0xFFE
 13035                           tosl	equ	0xFFD
 13036                           pclath	equ	0xFFA
 13037                           tblptru	equ	0xFF8
 13038                           tblptrh	equ	0xFF7
 13039                           tblptrl	equ	0xFF6
 13040                           tablat	equ	0xFF5
 13041                           prodh	equ	0xFF4
 13042                           prodl	equ	0xFF3
 13043                           postinc0	equ	0xFEE
 13044                           wreg	equ	0xFE8
 13045                           postdec1	equ	0xFE5
 13046                           fsr1h	equ	0xFE2
 13047                           fsr1l	equ	0xFE1
 13048                           indf2	equ	0xFDF
 13049                           postinc2	equ	0xFDE
 13050                           postdec2	equ	0xFDD
 13051                           fsr2h	equ	0xFDA
 13052                           fsr2l	equ	0xFD9
 13053                           status	equ	0xFD8
 13054                           
 13055 ;; *************** function _FunctReadADC *****************
 13056 ;; Defined at:
 13057 ;;		line 37 in file "dans.c"
 13058 ;; Parameters:    Size  Location     Type
 13059 ;;  channel         2    0[BANK0 ] int 
 13060 ;; Auto vars:     Size  Location     Type
 13061 ;;		None
 13062 ;; Return value:  Size  Location     Type
 13063 ;;                  2    0[BANK0 ] int 
 13064 ;; Registers used:
 13065 ;;		wreg, status,2, status,0
 13066 ;; Tracked objects:
 13067 ;;		On entry : 0/0
 13068 ;;		On exit  : 0/0
 13069 ;;		Unchanged: 0/0
 13070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13071 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13074 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13075 ;;Total ram usage:        2 bytes
 13076 ;; Hardware stack levels used:    1
 13077 ;; Hardware stack levels required when called:    7
 13078 ;; This function calls:
 13079 ;;		Nothing
 13080 ;; This function is called by:
 13081 ;;		_ADCAverage
 13082 ;; This function uses a non-reentrant model
 13083 ;;
 13084                           
 13085                           	psect	text40
 13086  01546E                     __ptext40:
 13087                           	opt stack 0
 13088  01546E                     _FunctReadADC:
 13089                           	opt stack 21
 13090                           
 13091                           ;dans.c: 39: if(channel>4) return 0;
 13092                           
 13093                           ;incstack = 0
 13094  01546E  0100               	movlb	0	; () banked
 13095  015470  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 13096  015472  D00B               	goto	l2327
 13097  015474  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 13098  015476  E104               	bnz	u12480
 13099  015478  0E05               	movlw	5
 13100  01547A  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 13101  01547C  A0D8               	btfss	status,0,c
 13102  01547E  D005               	goto	l2327
 13103  015480                     u12480:
 13104                           
 13105                           ; BSR set to: 0
 13106  015480  0E00               	movlw	0
 13107  015482  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 13108  015484  0E00               	movlw	0
 13109  015486  6F60               	movwf	?_FunctReadADC& (0+255),b
 13110                           
 13111                           ; BSR set to: 0
 13112  015488  0012               	return	
 13113  01548A                     l2327:
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;dans.c: 40: ADCON0=0x00;
 13117                           
 13118                           ; BSR set to: 0
 13119  01548A  0E00               	movlw	0
 13120  01548C  6EC2               	movwf	4034,c	;volatile
 13121                           
 13122                           ; BSR set to: 0
 13123                           ;dans.c: 41: ADCON0=(channel<<2);
 13124  01548E  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 13125  015490  46E8               	rlncf	wreg,f,c
 13126  015492  0BFC               	andlw	252
 13127  015494  6EC2               	movwf	4034,c	;volatile
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;dans.c: 42: ADON=1;
 13131  015496  80C2               	bsf	4034,0,c	;volatile
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;dans.c: 43: GODONE=1;
 13135  015498  82C2               	bsf	4034,1,c	;volatile
 13136  01549A                     
 13137                           ; BSR set to: 0
 13138  01549A  B2C2               	btfsc	4034,1,c	;volatile
 13139  01549C  D7FE               	goto	l2330
 13140                           
 13141                           ;dans.c: 45: ADON=0;
 13142  01549E  90C2               	bcf	4034,0,c	;volatile
 13143                           
 13144                           ;dans.c: 46: return ADRES;
 13145  0154A0  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 13146  0154A4  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 13147  0154A8  0012               	return		;funcret
 13148  0154AA                     __end_of_FunctReadADC:
 13149                           	opt stack 0
 13150                           tosu	equ	0xFFF
 13151                           tosh	equ	0xFFE
 13152                           tosl	equ	0xFFD
 13153                           pclath	equ	0xFFA
 13154                           tblptru	equ	0xFF8
 13155                           tblptrh	equ	0xFF7
 13156                           tblptrl	equ	0xFF6
 13157                           tablat	equ	0xFF5
 13158                           prodh	equ	0xFF4
 13159                           prodl	equ	0xFF3
 13160                           postinc0	equ	0xFEE
 13161                           wreg	equ	0xFE8
 13162                           postdec1	equ	0xFE5
 13163                           fsr1h	equ	0xFE2
 13164                           fsr1l	equ	0xFE1
 13165                           indf2	equ	0xFDF
 13166                           postinc2	equ	0xFDE
 13167                           postdec2	equ	0xFDD
 13168                           fsr2h	equ	0xFDA
 13169                           fsr2l	equ	0xFD9
 13170                           status	equ	0xFD8
 13171                           
 13172 ;; *************** function _Robot_Init *****************
 13173 ;; Defined at:
 13174 ;;		line 154 in file "main.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;		None
 13177 ;; Auto vars:     Size  Location     Type
 13178 ;;		None
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  1    wreg      void 
 13181 ;; Registers used:
 13182 ;;		wreg, status,2, status,0, cstack
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13192 ;;Total ram usage:        0 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    9
 13195 ;; This function calls:
 13196 ;;		_Robot_Stop
 13197 ;;		_UpdateDistance
 13198 ;;		_eusartSend
 13199 ;; This function is called by:
 13200 ;;		_main
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           	psect	text41
 13205  015A34                     __ptext41:
 13206                           	opt stack 0
 13207  015A34                     _Robot_Init:
 13208                           	opt stack 21
 13209                           
 13210                           ;main.c: 155: eusartSend(128);
 13211                           
 13212                           ;incstack = 0
 13213  015A34  0E80               	movlw	128
 13214  015A36  EC86  F0AD         	call	_eusartSend
 13215                           
 13216                           ;main.c: 156: eusartSend(132);
 13217  015A3A  0E84               	movlw	132
 13218  015A3C  EC86  F0AD         	call	_eusartSend
 13219                           
 13220                           ;main.c: 157: Robot_Stop();
 13221  015A40  EC4A  F0AC         	call	_Robot_Stop	;wreg free
 13222                           
 13223                           ;main.c: 158: UpdateDistance();
 13224  015A44  EC33  F0A6         	call	_UpdateDistance	;wreg free
 13225  015A48  0012               	return		;funcret
 13226  015A4A                     __end_of_Robot_Init:
 13227                           	opt stack 0
 13228                           tosu	equ	0xFFF
 13229                           tosh	equ	0xFFE
 13230                           tosl	equ	0xFFD
 13231                           pclath	equ	0xFFA
 13232                           tblptru	equ	0xFF8
 13233                           tblptrh	equ	0xFF7
 13234                           tblptrl	equ	0xFF6
 13235                           tablat	equ	0xFF5
 13236                           prodh	equ	0xFF4
 13237                           prodl	equ	0xFF3
 13238                           postinc0	equ	0xFEE
 13239                           wreg	equ	0xFE8
 13240                           postdec1	equ	0xFE5
 13241                           fsr1h	equ	0xFE2
 13242                           fsr1l	equ	0xFE1
 13243                           indf2	equ	0xFDF
 13244                           postinc2	equ	0xFDE
 13245                           postdec2	equ	0xFDD
 13246                           fsr2h	equ	0xFDA
 13247                           fsr2l	equ	0xFD9
 13248                           status	equ	0xFD8
 13249                           
 13250 ;; *************** function _UpdateDistance *****************
 13251 ;; Defined at:
 13252 ;;		line 236 in file "dans.c"
 13253 ;; Parameters:    Size  Location     Type
 13254 ;;		None
 13255 ;; Auto vars:     Size  Location     Type
 13256 ;;		None
 13257 ;; Return value:  Size  Location     Type
 13258 ;;                  2    1[BANK0 ] int 
 13259 ;; Registers used:
 13260 ;;		wreg, status,2, status,0, cstack
 13261 ;; Tracked objects:
 13262 ;;		On entry : 0/0
 13263 ;;		On exit  : 0/0
 13264 ;;		Unchanged: 0/0
 13265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13266 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13268 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;Total ram usage:        6 bytes
 13271 ;; Hardware stack levels used:    1
 13272 ;; Hardware stack levels required when called:    8
 13273 ;; This function calls:
 13274 ;;		_eusartRec
 13275 ;;		_eusartSend
 13276 ;; This function is called by:
 13277 ;;		_Robot_Init
 13278 ;;		_Travel
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282                           	psect	text42
 13283  014C66                     __ptext42:
 13284                           	opt stack 0
 13285  014C66                     _UpdateDistance:
 13286                           	opt stack 21
 13287                           
 13288                           ;dans.c: 237: eusartSend(142);
 13289                           
 13290                           ;incstack = 0
 13291  014C66  0E8E               	movlw	142
 13292  014C68  EC86  F0AD         	call	_eusartSend
 13293                           
 13294                           ;dans.c: 238: eusartSend(19);
 13295  014C6C  0E13               	movlw	19
 13296  014C6E  EC86  F0AD         	call	_eusartSend
 13297                           
 13298                           ;dans.c: 239: Current_Dist1 = eusartRec();
 13299  014C72  ECBD  F0AD         	call	_eusartRec	;wreg free
 13300  014C76  0100               	movlb	0	; () banked
 13301  014C78  6F63               	movwf	??_UpdateDistance& (0+255),b
 13302  014C7A  5163               	movf	??_UpdateDistance& (0+255),w,b
 13303  014C7C  0101               	movlb	1	; () banked
 13304  014C7E  6F4C               	movwf	_Current_Dist1& (0+255),b
 13305  014C80  6B4D               	clrf	(_Current_Dist1+1)& (0+255),b
 13306                           
 13307                           ; BSR set to: 1
 13308                           ;dans.c: 240: Current_Dist2 = eusartRec();
 13309  014C82  ECBD  F0AD         	call	_eusartRec	;wreg free
 13310  014C86  0100               	movlb	0	; () banked
 13311  014C88  6F63               	movwf	??_UpdateDistance& (0+255),b
 13312  014C8A  5163               	movf	??_UpdateDistance& (0+255),w,b
 13313  014C8C  0101               	movlb	1	; () banked
 13314  014C8E  6F4A               	movwf	_Current_Dist2& (0+255),b
 13315  014C90  6B4B               	clrf	(_Current_Dist2+1)& (0+255),b
 13316                           
 13317                           ; BSR set to: 1
 13318                           ;dans.c: 242: Current_Dist = ((Current_Dist1 <<(8)) & 0b1111111100000000 | (Current_Dist
      +                          2 & 255));
 13319  014C92  0E00               	movlw	0
 13320  014C94  0100               	movlb	0	; () banked
 13321  014C96  6F63               	movwf	??_UpdateDistance& (0+255),b
 13322  014C98  0EFF               	movlw	255
 13323  014C9A  6F64               	movwf	(??_UpdateDistance+1)& (0+255),b
 13324  014C9C  0101               	movlb	1	; () banked
 13325  014C9E  514C               	movf	_Current_Dist1& (0+255),w,b
 13326  014CA0  0100               	movlb	0	; () banked
 13327  014CA2  6F66               	movwf	(??_UpdateDistance+3)& (0+255),b
 13328  014CA4  6B65               	clrf	(??_UpdateDistance+2)& (0+255),b
 13329  014CA6  5163               	movf	??_UpdateDistance& (0+255),w,b
 13330  014CA8  1765               	andwf	(??_UpdateDistance+2)& (0+255),f,b
 13331  014CAA  5164               	movf	(??_UpdateDistance+1)& (0+255),w,b
 13332  014CAC  1766               	andwf	(??_UpdateDistance+3)& (0+255),f,b
 13333  014CAE  0101               	movlb	1	; () banked
 13334  014CB0  514A               	movf	_Current_Dist2& (0+255),w,b
 13335  014CB2  0100               	movlb	0	; () banked
 13336  014CB4  1165               	iorwf	(??_UpdateDistance+2)& (0+255),w,b
 13337  014CB6  0101               	movlb	1	; () banked
 13338  014CB8  6F4E               	movwf	_Current_Dist& (0+255),b
 13339  014CBA  0100               	movlb	0	; () banked
 13340  014CBC  5166               	movf	(??_UpdateDistance+3)& (0+255),w,b
 13341  014CBE  0101               	movlb	1	; () banked
 13342  014CC0  6F4F               	movwf	(_Current_Dist+1)& (0+255),b
 13343                           
 13344                           ; BSR set to: 1
 13345                           ;dans.c: 243: return Current_Dist;
 13346  014CC2  C14E  F061         	movff	_Current_Dist,?_UpdateDistance
 13347  014CC6  C14F  F062         	movff	_Current_Dist+1,?_UpdateDistance+1
 13348  014CCA  0012               	return	
 13349  014CCC                     __end_of_UpdateDistance:
 13350                           	opt stack 0
 13351                           tosu	equ	0xFFF
 13352                           tosh	equ	0xFFE
 13353                           tosl	equ	0xFFD
 13354                           pclath	equ	0xFFA
 13355                           tblptru	equ	0xFF8
 13356                           tblptrh	equ	0xFF7
 13357                           tblptrl	equ	0xFF6
 13358                           tablat	equ	0xFF5
 13359                           prodh	equ	0xFF4
 13360                           prodl	equ	0xFF3
 13361                           postinc0	equ	0xFEE
 13362                           wreg	equ	0xFE8
 13363                           postdec1	equ	0xFE5
 13364                           fsr1h	equ	0xFE2
 13365                           fsr1l	equ	0xFE1
 13366                           indf2	equ	0xFDF
 13367                           postinc2	equ	0xFDE
 13368                           postdec2	equ	0xFDD
 13369                           fsr2h	equ	0xFDA
 13370                           fsr2l	equ	0xFD9
 13371                           status	equ	0xFD8
 13372                           
 13373 ;; *************** function _eusartRec *****************
 13374 ;; Defined at:
 13375 ;;		line 78 in file "dans.c"
 13376 ;; Parameters:    Size  Location     Type
 13377 ;;		None
 13378 ;; Auto vars:     Size  Location     Type
 13379 ;;		None
 13380 ;; Return value:  Size  Location     Type
 13381 ;;                  1    wreg      unsigned char 
 13382 ;; Registers used:
 13383 ;;		wreg, status,2
 13384 ;; Tracked objects:
 13385 ;;		On entry : 0/0
 13386 ;;		On exit  : 0/0
 13387 ;;		Unchanged: 0/0
 13388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13393 ;;Total ram usage:        0 bytes
 13394 ;; Hardware stack levels used:    1
 13395 ;; Hardware stack levels required when called:    7
 13396 ;; This function calls:
 13397 ;;		Nothing
 13398 ;; This function is called by:
 13399 ;;		_UpdateDistance
 13400 ;;		_Get_VirtualWall_State
 13401 ;;		_Turn
 13402 ;;		_Detect_Victim
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           	psect	text43
 13407  015B7A                     __ptext43:
 13408                           	opt stack 0
 13409  015B7A                     _eusartRec:
 13410                           	opt stack 21
 13411                           
 13412                           ;dans.c: 79: while(!PIR1bits.RC1IF){}
 13413                           
 13414                           ; BSR set to: 1
 13415                           ;incstack = 0
 13416  015B7A  AA9E               	btfss	3998,5,c	;volatile
 13417  015B7C  D7FE               	goto	_eusartRec
 13418                           
 13419                           ;dans.c: 80: return (int) RCREG1;
 13420  015B7E  50AF               	movf	4015,w,c	;volatile
 13421  015B80  0012               	return	
 13422  015B82                     __end_of_eusartRec:
 13423                           	opt stack 0
 13424                           tosu	equ	0xFFF
 13425                           tosh	equ	0xFFE
 13426                           tosl	equ	0xFFD
 13427                           pclath	equ	0xFFA
 13428                           tblptru	equ	0xFF8
 13429                           tblptrh	equ	0xFF7
 13430                           tblptrl	equ	0xFF6
 13431                           tablat	equ	0xFF5
 13432                           prodh	equ	0xFF4
 13433                           prodl	equ	0xFF3
 13434                           postinc0	equ	0xFEE
 13435                           wreg	equ	0xFE8
 13436                           postdec1	equ	0xFE5
 13437                           fsr1h	equ	0xFE2
 13438                           fsr1l	equ	0xFE1
 13439                           indf2	equ	0xFDF
 13440                           postinc2	equ	0xFDE
 13441                           postdec2	equ	0xFDD
 13442                           fsr2h	equ	0xFDA
 13443                           fsr2l	equ	0xFD9
 13444                           status	equ	0xFD8
 13445                           
 13446 ;; *************** function _Robot_Stop *****************
 13447 ;; Defined at:
 13448 ;;		line 245 in file "dans.c"
 13449 ;; Parameters:    Size  Location     Type
 13450 ;;		None
 13451 ;; Auto vars:     Size  Location     Type
 13452 ;;		None
 13453 ;; Return value:  Size  Location     Type
 13454 ;;                  1    wreg      void 
 13455 ;; Registers used:
 13456 ;;		wreg, cstack
 13457 ;; Tracked objects:
 13458 ;;		On entry : 0/0
 13459 ;;		On exit  : 0/0
 13460 ;;		Unchanged: 0/0
 13461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13466 ;;Total ram usage:        0 bytes
 13467 ;; Hardware stack levels used:    1
 13468 ;; Hardware stack levels required when called:    8
 13469 ;; This function calls:
 13470 ;;		_eusartSend
 13471 ;; This function is called by:
 13472 ;;		_Robot_Init
 13473 ;;		_Turn
 13474 ;;		_Travel
 13475 ;; This function uses a non-reentrant model
 13476 ;;
 13477                           
 13478                           	psect	text44
 13479  015894                     __ptext44:
 13480                           	opt stack 0
 13481  015894                     _Robot_Stop:
 13482                           	opt stack 20
 13483                           
 13484                           ;dans.c: 246: eusartSend(137);
 13485                           
 13486                           ;incstack = 0
 13487  015894  0E89               	movlw	137
 13488  015896  EC86  F0AD         	call	_eusartSend
 13489                           
 13490                           ;dans.c: 247: eusartSend(0);
 13491  01589A  0E00               	movlw	0
 13492  01589C  EC86  F0AD         	call	_eusartSend
 13493                           
 13494                           ;dans.c: 248: eusartSend(0);
 13495  0158A0  0E00               	movlw	0
 13496  0158A2  EC86  F0AD         	call	_eusartSend
 13497                           
 13498                           ;dans.c: 249: eusartSend(0);
 13499  0158A6  0E00               	movlw	0
 13500  0158A8  EC86  F0AD         	call	_eusartSend
 13501                           
 13502                           ;dans.c: 250: eusartSend(0);
 13503  0158AC  0E00               	movlw	0
 13504  0158AE  EC86  F0AD         	call	_eusartSend
 13505  0158B2  0012               	return		;funcret
 13506  0158B4                     __end_of_Robot_Stop:
 13507                           	opt stack 0
 13508                           tosu	equ	0xFFF
 13509                           tosh	equ	0xFFE
 13510                           tosl	equ	0xFFD
 13511                           pclath	equ	0xFFA
 13512                           tblptru	equ	0xFF8
 13513                           tblptrh	equ	0xFF7
 13514                           tblptrl	equ	0xFF6
 13515                           tablat	equ	0xFF5
 13516                           prodh	equ	0xFF4
 13517                           prodl	equ	0xFF3
 13518                           postinc0	equ	0xFEE
 13519                           wreg	equ	0xFE8
 13520                           postdec1	equ	0xFE5
 13521                           fsr1h	equ	0xFE2
 13522                           fsr1l	equ	0xFE1
 13523                           indf2	equ	0xFDF
 13524                           postinc2	equ	0xFDE
 13525                           postdec2	equ	0xFDD
 13526                           fsr2h	equ	0xFDA
 13527                           fsr2l	equ	0xFD9
 13528                           status	equ	0xFD8
 13529                           
 13530 ;; *************** function _eusartSend *****************
 13531 ;; Defined at:
 13532 ;;		line 74 in file "dans.c"
 13533 ;; Parameters:    Size  Location     Type
 13534 ;;  sendChar        1    wreg     unsigned char 
 13535 ;; Auto vars:     Size  Location     Type
 13536 ;;  sendChar        1    0[BANK0 ] unsigned char 
 13537 ;; Return value:  Size  Location     Type
 13538 ;;                  1    wreg      void 
 13539 ;; Registers used:
 13540 ;;		wreg
 13541 ;; Tracked objects:
 13542 ;;		On entry : 0/0
 13543 ;;		On exit  : 0/0
 13544 ;;		Unchanged: 0/0
 13545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13549 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13550 ;;Total ram usage:        1 bytes
 13551 ;; Hardware stack levels used:    1
 13552 ;; Hardware stack levels required when called:    7
 13553 ;; This function calls:
 13554 ;;		Nothing
 13555 ;; This function is called by:
 13556 ;;		_Robot_Init
 13557 ;;		_Drive
 13558 ;;		_UpdateDistance
 13559 ;;		_Robot_Stop
 13560 ;;		_Get_VirtualWall_State
 13561 ;;		_Turn
 13562 ;;		_Get_Sensor_State
 13563 ;;		_BangBang
 13564 ;;		_LEDOn
 13565 ;;		_LEDOff
 13566 ;;		_Detect_Victim
 13567 ;; This function uses a non-reentrant model
 13568 ;;
 13569                           
 13570                           	psect	text45
 13571  015B0C                     __ptext45:
 13572                           	opt stack 0
 13573  015B0C                     _eusartSend:
 13574                           	opt stack 21
 13575                           
 13576                           ;incstack = 0
 13577                           ;eusartSend@sendChar stored from wreg
 13578  015B0C  0100               	movlb	0	; () banked
 13579  015B0E  6F60               	movwf	eusartSend@sendChar& (0+255),b
 13580  015B10                     
 13581                           ;dans.c: 75: while(!TXSTA1bits.TRMT){};
 13582  015B10  A2AD               	btfss	4013,1,c	;volatile
 13583  015B12  D7FE               	goto	l14565
 13584                           
 13585                           ;dans.c: 76: TXREG1 = sendChar;
 13586  015B14  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
 13587  015B18  0012               	return		;funcret
 13588  015B1A                     __end_of_eusartSend:
 13589                           	opt stack 0
 13590                           tosu	equ	0xFFF
 13591                           tosh	equ	0xFFE
 13592                           tosl	equ	0xFFD
 13593                           pclath	equ	0xFFA
 13594                           tblptru	equ	0xFF8
 13595                           tblptrh	equ	0xFF7
 13596                           tblptrl	equ	0xFF6
 13597                           tablat	equ	0xFF5
 13598                           prodh	equ	0xFF4
 13599                           prodl	equ	0xFF3
 13600                           postinc0	equ	0xFEE
 13601                           wreg	equ	0xFE8
 13602                           postdec1	equ	0xFE5
 13603                           fsr1h	equ	0xFE2
 13604                           fsr1l	equ	0xFE1
 13605                           indf2	equ	0xFDF
 13606                           postinc2	equ	0xFDE
 13607                           postdec2	equ	0xFDD
 13608                           fsr2h	equ	0xFDA
 13609                           fsr2l	equ	0xFD9
 13610                           status	equ	0xFD8
 13611                           
 13612 ;; *************** function _MXK_Init *****************
 13613 ;; Defined at:
 13614 ;;		line 33 in file "Library/MXK.c"
 13615 ;; Parameters:    Size  Location     Type
 13616 ;;		None
 13617 ;; Auto vars:     Size  Location     Type
 13618 ;;		None
 13619 ;; Return value:  Size  Location     Type
 13620 ;;                  1    wreg      void 
 13621 ;; Registers used:
 13622 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13623 ;; Tracked objects:
 13624 ;;		On entry : 0/0
 13625 ;;		On exit  : 0/0
 13626 ;;		Unchanged: 0/0
 13627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13632 ;;Total ram usage:        0 bytes
 13633 ;; Hardware stack levels used:    1
 13634 ;; Hardware stack levels required when called:   16
 13635 ;; This function calls:
 13636 ;;		_LED_Init
 13637 ;;		_Port_Init
 13638 ;;		_Port_SetPin
 13639 ;;		_Port_SetPinType
 13640 ;;		_Port_SetQuadType
 13641 ;;		_Port_SetType
 13642 ;;		_delay_ms
 13643 ;; This function is called by:
 13644 ;;		_main
 13645 ;; This function uses a non-reentrant model
 13646 ;;
 13647                           
 13648                           	psect	text46
 13649  01328A                     __ptext46:
 13650                           	opt stack 0
 13651  01328A                     _MXK_Init:
 13652                           	opt stack 14
 13653                           
 13654                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 13655                           
 13656                           ;incstack = 0
 13657  01328A  0E01               	movlw	1
 13658  01328C  6E4D               	movwf	_Bus_State,c
 13659                           
 13660                           ;MXK.c: 36: lQueue = (Function)0;
 13661  01328E  0E00               	movlw	0
 13662  013290  6E29               	movwf	_lQueue,c	;volatile
 13663  013292  0E00               	movlw	0
 13664  013294  6E2A               	movwf	_lQueue+1,c	;volatile
 13665  013296  0E00               	movlw	0
 13666  013298  6E2B               	movwf	_lQueue+2,c	;volatile
 13667                           
 13668                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 13669  01329A  0ED0               	movlw	low _PortA
 13670  01329C  0100               	movlb	0	; () banked
 13671  01329E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13672  0132A0  0E02               	movlw	high _PortA
 13673  0132A2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13674  0132A4  0E00               	movlw	0
 13675  0132A6  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13676  0132A8  EC3E  F095         	call	_Port_Init	;wreg free
 13677                           
 13678                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 13679  0132AC  0E95               	movlw	low _PortB
 13680  0132AE  0100               	movlb	0	; () banked
 13681  0132B0  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13682  0132B2  0E01               	movlw	high _PortB
 13683  0132B4  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13684  0132B6  0E01               	movlw	1
 13685  0132B8  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13686  0132BA  EC3E  F095         	call	_Port_Init	;wreg free
 13687                           
 13688                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 13689  0132BE  0E9F               	movlw	low _PortC
 13690  0132C0  0100               	movlb	0	; () banked
 13691  0132C2  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13692  0132C4  0E01               	movlw	high _PortC
 13693  0132C6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13694  0132C8  0E02               	movlw	2
 13695  0132CA  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13696  0132CC  EC3E  F095         	call	_Port_Init	;wreg free
 13697                           
 13698                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 13699  0132D0  0E8B               	movlw	low _PortD
 13700  0132D2  0100               	movlb	0	; () banked
 13701  0132D4  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13702  0132D6  0E01               	movlw	high _PortD
 13703  0132D8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13704  0132DA  0E03               	movlw	3
 13705  0132DC  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13706  0132DE  EC3E  F095         	call	_Port_Init	;wreg free
 13707                           
 13708                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 13709  0132E2  0E81               	movlw	low _PortE
 13710  0132E4  0100               	movlb	0	; () banked
 13711  0132E6  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13712  0132E8  0E01               	movlw	high _PortE
 13713  0132EA  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13714  0132EC  0E04               	movlw	4
 13715  0132EE  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13716  0132F0  EC3E  F095         	call	_Port_Init	;wreg free
 13717                           
 13718                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 13719  0132F4  0EA9               	movlw	low _PortF
 13720  0132F6  0100               	movlb	0	; () banked
 13721  0132F8  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13722  0132FA  0E01               	movlw	high _PortF
 13723  0132FC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13724  0132FE  0E05               	movlw	5
 13725  013300  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13726  013302  EC3E  F095         	call	_Port_Init	;wreg free
 13727                           
 13728                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 13729  013306  0E77               	movlw	low _PortG
 13730  013308  0100               	movlb	0	; () banked
 13731  01330A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13732  01330C  0E01               	movlw	high _PortG
 13733  01330E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13734  013310  0E06               	movlw	6
 13735  013312  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13736  013314  EC3E  F095         	call	_Port_Init	;wreg free
 13737                           
 13738                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 13739  013318  0EA9               	movlw	low _PortF
 13740  01331A  0100               	movlb	0	; () banked
 13741  01331C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13742  01331E  0E01               	movlw	high _PortF
 13743  013320  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13744  013322  0E05               	movlw	5
 13745  013324  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13746  013326  0E00               	movlw	0
 13747  013328  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13748  01332A  ECF7  F092         	call	_Port_SetPinType	;wreg free
 13749                           
 13750                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 13751  01332E  0E95               	movlw	low _PortB
 13752  013330  0100               	movlb	0	; () banked
 13753  013332  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 13754  013334  0E01               	movlw	high _PortB
 13755  013336  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 13756  013338  0E00               	movlw	0
 13757  01333A  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 13758  01333C  0E00               	movlw	0
 13759  01333E  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 13760  013340  EC4D  F08E         	call	_Port_SetQuadType	;wreg free
 13761                           
 13762                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 13763  013344  0EA9               	movlw	low _PortF
 13764  013346  0100               	movlb	0	; () banked
 13765  013348  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13766  01334A  0E01               	movlw	high _PortF
 13767  01334C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13768  01334E  0E06               	movlw	6
 13769  013350  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13770  013352  0E03               	movlw	3
 13771  013354  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13772  013356  ECF7  F092         	call	_Port_SetPinType	;wreg free
 13773                           
 13774                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 13775  01335A  0E77               	movlw	low _PortG
 13776  01335C  0100               	movlb	0	; () banked
 13777  01335E  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 13778  013360  0E01               	movlw	high _PortG
 13779  013362  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 13780  013364  0E03               	movlw	3
 13781  013366  6F9C               	movwf	Port_SetType@pType& (0+255),b
 13782  013368  EC34  F091         	call	_Port_SetType	;wreg free
 13783                           
 13784                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 13785  01336C  0E77               	movlw	low _PortG
 13786  01336E  0100               	movlb	0	; () banked
 13787  013370  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13788  013372  0E01               	movlw	high _PortG
 13789  013374  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13790  013376  0E04               	movlw	4
 13791  013378  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13792  01337A  0E00               	movlw	0
 13793  01337C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13794  01337E  EC5D  F09E         	call	_Port_SetPin	;wreg free
 13795                           
 13796                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 13797  013382  0EA9               	movlw	low _PortF
 13798  013384  0100               	movlb	0	; () banked
 13799  013386  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13800  013388  0E01               	movlw	high _PortF
 13801  01338A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13802  01338C  0E06               	movlw	6
 13803  01338E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13804  013390  0E01               	movlw	1
 13805  013392  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13806  013394  EC5D  F09E         	call	_Port_SetPin	;wreg free
 13807                           
 13808                           ;MXK.c: 55: LED_Init(eLED1);
 13809  013398  0E00               	movlw	0
 13810  01339A  EC77  F0A7         	call	_LED_Init
 13811                           
 13812                           ;MXK.c: 56: LED_Init(eLED2);
 13813  01339E  0E01               	movlw	1
 13814  0133A0  EC77  F0A7         	call	_LED_Init
 13815                           
 13816                           ;MXK.c: 58: PIR1 = 0;
 13817  0133A4  0E00               	movlw	0
 13818  0133A6  6E9E               	movwf	3998,c	;volatile
 13819                           
 13820                           ;MXK.c: 59: PIR2 = 0;
 13821  0133A8  0E00               	movlw	0
 13822  0133AA  6EA1               	movwf	4001,c	;volatile
 13823                           
 13824                           ;MXK.c: 60: PIR3 = 0;
 13825  0133AC  0E00               	movlw	0
 13826  0133AE  6EA4               	movwf	4004,c	;volatile
 13827                           
 13828                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 13829  0133B0  8E9B               	bsf	3995,7,c	;volatile
 13830                           
 13831                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 13832  0133B2  8C9B               	bsf	3995,6,c	;volatile
 13833                           
 13834                           ;MXK.c: 66: delay_ms(100);
 13835  0133B4  0E00               	movlw	0
 13836  0133B6  0100               	movlb	0	; () banked
 13837  0133B8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13838  0133BA  0E64               	movlw	100
 13839  0133BC  6F60               	movwf	delay_ms@ms& (0+255),b
 13840  0133BE  ECF5  F0A6         	call	_delay_ms	;wreg free
 13841                           
 13842                           ;MXK.c: 68: RCONbits.IPEN = 1;
 13843  0133C2  8ED0               	bsf	4048,7,c	;volatile
 13844  0133C4  0012               	return		;funcret
 13845  0133C6                     __end_of_MXK_Init:
 13846                           	opt stack 0
 13847                           tosu	equ	0xFFF
 13848                           tosh	equ	0xFFE
 13849                           tosl	equ	0xFFD
 13850                           pclath	equ	0xFFA
 13851                           tblptru	equ	0xFF8
 13852                           tblptrh	equ	0xFF7
 13853                           tblptrl	equ	0xFF6
 13854                           tablat	equ	0xFF5
 13855                           prodh	equ	0xFF4
 13856                           prodl	equ	0xFF3
 13857                           postinc0	equ	0xFEE
 13858                           wreg	equ	0xFE8
 13859                           postdec1	equ	0xFE5
 13860                           fsr1h	equ	0xFE2
 13861                           fsr1l	equ	0xFE1
 13862                           indf2	equ	0xFDF
 13863                           postinc2	equ	0xFDE
 13864                           postdec2	equ	0xFDD
 13865                           fsr2h	equ	0xFDA
 13866                           fsr2l	equ	0xFD9
 13867                           status	equ	0xFD8
 13868                           
 13869 ;; *************** function _Port_Init *****************
 13870 ;; Defined at:
 13871 ;;		line 150 in file "Library/Port.c"
 13872 ;; Parameters:    Size  Location     Type
 13873 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 13874 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13875 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13876 ;;  pPort           1   66[BANK0 ] enum E6786
 13877 ;; Auto vars:     Size  Location     Type
 13878 ;;  i               1   69[BANK0 ] unsigned char 
 13879 ;; Return value:  Size  Location     Type
 13880 ;;                  1    wreg      void 
 13881 ;; Registers used:
 13882 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13883 ;; Tracked objects:
 13884 ;;		On entry : 0/0
 13885 ;;		On exit  : 0/0
 13886 ;;		Unchanged: 0/0
 13887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13888 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13891 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13892 ;;Total ram usage:        6 bytes
 13893 ;; Hardware stack levels used:    1
 13894 ;; Hardware stack levels required when called:   15
 13895 ;; This function calls:
 13896 ;;		_GetPortPORT
 13897 ;;		_GetPortProperties
 13898 ;;		_GetPortTRIS
 13899 ;;		_Port_Set
 13900 ;;		_Port_SetPinType
 13901 ;;		_Port_SetType
 13902 ;;		_Word_GetPair
 13903 ;; This function is called by:
 13904 ;;		_MXK_Init
 13905 ;; This function uses a non-reentrant model
 13906 ;;
 13907                           
 13908                           	psect	text47
 13909  012A7C                     __ptext47:
 13910                           	opt stack 0
 13911  012A7C                     _Port_Init:
 13912                           	opt stack 14
 13913                           
 13914                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 13915                           
 13916                           ;incstack = 0
 13917  012A7C  0100               	movlb	0	; () banked
 13918  012A7E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 13919  012A80  EC0A  F0A2         	call	_GetPortProperties
 13920  012A84  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 13921  012A88  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 13922  012A8C  0100               	movlb	0	; () banked
 13923  012A8E  C060  FFDE         	movff	?_GetPortProperties,postinc2
 13924  012A92  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 13925                           
 13926                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 13927  012A96  51A2               	movf	Port_Init@pPort& (0+255),w,b
 13928  012A98  EC4E  F0A2         	call	_GetPortPORT
 13929  012A9C  0100               	movlb	0	; () banked
 13930  012A9E  EE20 F006          	lfsr	2,6
 13931  012AA2  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13932  012AA4  26D9               	addwf	fsr2l,f,c
 13933  012AA6  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13934  012AA8  22DA               	addwfc	fsr2h,f,c
 13935  012AAA  C060  FFDE         	movff	?_GetPortPORT,postinc2
 13936  012AAE  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 13937                           
 13938                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 13939  012AB2  51A2               	movf	Port_Init@pPort& (0+255),w,b
 13940  012AB4  EC4E  F0A2         	call	_GetPortPORT
 13941  012AB8  0100               	movlb	0	; () banked
 13942  012ABA  EE20 F004          	lfsr	2,4
 13943  012ABE  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13944  012AC0  26D9               	addwf	fsr2l,f,c
 13945  012AC2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13946  012AC4  22DA               	addwfc	fsr2h,f,c
 13947  012AC6  C060  FFDE         	movff	?_GetPortPORT,postinc2
 13948  012ACA  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 13949                           
 13950                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 13951  012ACE  51A2               	movf	Port_Init@pPort& (0+255),w,b
 13952  012AD0  ECC6  F0A1         	call	_GetPortTRIS
 13953  012AD4  0100               	movlb	0	; () banked
 13954  012AD6  EE20 F002          	lfsr	2,2
 13955  012ADA  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13956  012ADC  26D9               	addwf	fsr2l,f,c
 13957  012ADE  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13958  012AE0  22DA               	addwfc	fsr2h,f,c
 13959  012AE2  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 13960  012AE6  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 13961                           
 13962                           ; BSR set to: 0
 13963                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 13964  012AEA  EE20 F004          	lfsr	2,4
 13965  012AEE  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13966  012AF0  26D9               	addwf	fsr2l,f,c
 13967  012AF2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13968  012AF4  22DA               	addwfc	fsr2h,f,c
 13969  012AF6  CFDE F0A3          	movff	postinc2,??_Port_Init
 13970  012AFA  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 13971  012AFE  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 13972  012B02  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 13973  012B06  0E00               	movlw	0
 13974  012B08  6EDF               	movwf	indf2,c
 13975                           
 13976                           ; BSR set to: 0
 13977                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 13978  012B0A  EE20 F002          	lfsr	2,2
 13979  012B0E  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13980  012B10  26D9               	addwf	fsr2l,f,c
 13981  012B12  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13982  012B14  22DA               	addwfc	fsr2h,f,c
 13983  012B16  CFDE F0A3          	movff	postinc2,??_Port_Init
 13984  012B1A  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 13985  012B1E  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 13986  012B22  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 13987  012B26  0EFF               	movlw	255
 13988  012B28  6EDF               	movwf	indf2,c
 13989                           
 13990                           ; BSR set to: 0
 13991                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 13992  012B2A  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 13993  012B2E  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 13994  012B32  0E00               	movlw	0
 13995  012B34  6F9C               	movwf	Port_SetType@pType& (0+255),b
 13996  012B36  EC34  F091         	call	_Port_SetType	;wreg free
 13997                           
 13998                           ;Port.c: 166: UINT8 i;
 13999                           ;Port.c: 167: for (i=0; i<8; i++)
 14000  012B3A  0E00               	movlw	0
 14001  012B3C  0100               	movlb	0	; () banked
 14002  012B3E  6FA5               	movwf	Port_Init@i& (0+255),b
 14003  012B40                     l15299:
 14004                           
 14005                           ; BSR set to: 0
 14006  012B40  0E07               	movlw	7
 14007  012B42  65A5               	cpfsgt	Port_Init@i& (0+255),b
 14008  012B44  D031               	goto	l403
 14009  012B46  D04B               	goto	u12740
 14010  012B48                     
 14011                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14012                           
 14013                           ; BSR set to: 0
 14014  012B48  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14015  012B4C  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14016  012B50  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14017  012B54  0E03               	movlw	3
 14018  012B56  0100               	movlb	0	; () banked
 14019  012B58  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14020  012B5A  ECF7  F092         	call	_Port_SetPinType	;wreg free
 14021                           
 14022                           ;Port.c: 173: break;
 14023  012B5E  D03C               	goto	l405
 14024  012B60                     
 14025                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14026  012B60  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14027  012B64  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14028  012B68  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14029  012B6C  0E02               	movlw	2
 14030  012B6E  0100               	movlb	0	; () banked
 14031  012B70  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14032  012B72  ECF7  F092         	call	_Port_SetPinType	;wreg free
 14033                           
 14034                           ;Port.c: 176: break;
 14035  012B76  D030               	goto	l405
 14036  012B78                     
 14037                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14038  012B78  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14039  012B7C  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14040  012B80  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14041  012B84  0E01               	movlw	1
 14042  012B86  0100               	movlb	0	; () banked
 14043  012B88  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14044  012B8A  ECF7  F092         	call	_Port_SetPinType	;wreg free
 14045                           
 14046                           ;Port.c: 179: break;
 14047  012B8E  D024               	goto	l405
 14048  012B90                     
 14049                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14050  012B90  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14051  012B94  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14052  012B98  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14053  012B9C  0E00               	movlw	0
 14054  012B9E  0100               	movlb	0	; () banked
 14055  012BA0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14056  012BA2  ECF7  F092         	call	_Port_SetPinType	;wreg free
 14057                           
 14058                           ;Port.c: 183: }
 14059                           
 14060                           ;Port.c: 182: break;
 14061  012BA6  D018               	goto	l405
 14062  012BA8                     l403:
 14063  012BA8  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 14064  012BAC  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14065  012BB0  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 14066  012BB4  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 14067  012BB8  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 14068  012BBC  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14069                           
 14070                           ; Switch size 1, requested type "space"
 14071                           ; Number of cases is 4, Range of values is 0 to 3
 14072                           ; switch strategies available:
 14073                           ; Name         Instructions Cycles
 14074                           ; simple_byte           13     7 (average)
 14075                           ;	Chosen strategy is simple_byte
 14076  012BC0  0A00               	xorlw	0	; case 0
 14077  012BC2  B4D8               	btfsc	status,2,c
 14078  012BC4  D7C1               	goto	l404
 14079  012BC6  0A01               	xorlw	1	; case 1
 14080  012BC8  B4D8               	btfsc	status,2,c
 14081  012BCA  D7D6               	goto	l407
 14082  012BCC  0A03               	xorlw	3	; case 2
 14083  012BCE  B4D8               	btfsc	status,2,c
 14084  012BD0  D7C7               	goto	l406
 14085  012BD2  0A01               	xorlw	1	; case 3
 14086  012BD4  B4D8               	btfsc	status,2,c
 14087  012BD6  D7DC               	goto	l408
 14088  012BD8                     l405:
 14089  012BD8  0100               	movlb	0	; () banked
 14090  012BDA  2BA5               	incf	Port_Init@i& (0+255),f,b
 14091  012BDC  D7B1               	goto	l15299
 14092  012BDE                     u12740:
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;Port.c: 184: }
 14096                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14097                           
 14098                           ; BSR set to: 0
 14099  012BDE  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 14100  012BE2  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14101  012BE6  0E00               	movlw	0
 14102  012BE8  6F71               	movwf	Port_Set@pValue& (0+255),b
 14103  012BEA  EC7C  F08A         	call	_Port_Set	;wreg free
 14104  012BEE  0012               	return		;funcret
 14105  012BF0                     __end_of_Port_Init:
 14106                           	opt stack 0
 14107                           tosu	equ	0xFFF
 14108                           tosh	equ	0xFFE
 14109                           tosl	equ	0xFFD
 14110                           pclath	equ	0xFFA
 14111                           tblptru	equ	0xFF8
 14112                           tblptrh	equ	0xFF7
 14113                           tblptrl	equ	0xFF6
 14114                           tablat	equ	0xFF5
 14115                           prodh	equ	0xFF4
 14116                           prodl	equ	0xFF3
 14117                           postinc0	equ	0xFEE
 14118                           wreg	equ	0xFE8
 14119                           postdec1	equ	0xFE5
 14120                           fsr1h	equ	0xFE2
 14121                           fsr1l	equ	0xFE1
 14122                           indf2	equ	0xFDF
 14123                           postinc2	equ	0xFDE
 14124                           postdec2	equ	0xFDD
 14125                           fsr2h	equ	0xFDA
 14126                           fsr2l	equ	0xFD9
 14127                           status	equ	0xFD8
 14128                           
 14129 ;; *************** function _Port_SetType *****************
 14130 ;; Defined at:
 14131 ;;		line 513 in file "Library/Port.c"
 14132 ;; Parameters:    Size  Location     Type
 14133 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14134 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14135 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14136 ;;  pType           1   60[BANK0 ] enum E6795
 14137 ;; Auto vars:     Size  Location     Type
 14138 ;;  Output          1   63[BANK0 ] enum E6475
 14139 ;; Return value:  Size  Location     Type
 14140 ;;                  1    wreg      enum E6475
 14141 ;; Registers used:
 14142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14143 ;; Tracked objects:
 14144 ;;		On entry : 0/0
 14145 ;;		On exit  : 0/0
 14146 ;;		Unchanged: 0/0
 14147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14148 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14150 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14151 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14152 ;;Total ram usage:        6 bytes
 14153 ;; Hardware stack levels used:    1
 14154 ;; Hardware stack levels required when called:   14
 14155 ;; This function calls:
 14156 ;;		_Port_CheckPortType
 14157 ;;		_Word_SetPair
 14158 ;; This function is called by:
 14159 ;;		_Port_Init
 14160 ;;		_MXK_Init
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           	psect	text48
 14165  012268                     __ptext48:
 14166                           	opt stack 0
 14167  012268                     _Port_SetType:
 14168                           	opt stack 15
 14169                           
 14170                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14171                           
 14172                           ;incstack = 0
 14173  012268  0E05               	movlw	5
 14174  01226A  0100               	movlb	0	; () banked
 14175  01226C  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14176                           
 14177                           ;Port.c: 517: switch (pType)
 14178  01226E  D06E               	goto	l509
 14179  012270                     
 14180                           ; BSR set to: 0
 14181                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14182                           
 14183                           ; BSR set to: 0
 14184  012270  EE20 F002          	lfsr	2,2
 14185  012274  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14186  012276  26D9               	addwf	fsr2l,f,c
 14187  012278  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14188  01227A  22DA               	addwfc	fsr2h,f,c
 14189  01227C  CFDE F09D          	movff	postinc2,??_Port_SetType
 14190  012280  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14191  012284  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14192  012288  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14193  01228C  0EFF               	movlw	255
 14194  01228E  D05C               	goto	L13
 14195  012290                     
 14196                           ; BSR set to: 0
 14197                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14198                           
 14199                           ; BSR set to: 0
 14200  012290  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14201  012294  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14202  012298  0E01               	movlw	1
 14203  01229A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14204  01229C  ECB8  F0A9         	call	_Port_CheckPortType	;wreg free
 14205  0122A0  0100               	movlb	0	; () banked
 14206  0122A2  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14207  0122A4  519F               	movf	Port_SetType@Output& (0+255),w,b
 14208  0122A6  A4D8               	btfss	status,2,c
 14209  0122A8  0012               	return	
 14210                           
 14211                           ; BSR set to: 0
 14212                           ;Port.c: 527: {
 14213                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 14214  0122AA  EE20 F002          	lfsr	2,2
 14215  0122AE  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14216  0122B0  26D9               	addwf	fsr2l,f,c
 14217  0122B2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14218  0122B4  22DA               	addwfc	fsr2h,f,c
 14219  0122B6  CFDE F09D          	movff	postinc2,??_Port_SetType
 14220  0122BA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14221  0122BE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14222  0122C2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14223  0122C6  0E00               	movlw	0
 14224  0122C8  6EDF               	movwf	indf2,c
 14225                           
 14226                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 14227  0122CA  EE20 F004          	lfsr	2,4
 14228  0122CE  D02F               	goto	L19
 14229  0122D0                     
 14230                           ; BSR set to: 0
 14231                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 14232                           
 14233                           ; BSR set to: 0
 14234  0122D0  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14235  0122D4  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14236  0122D8  0E02               	movlw	2
 14237  0122DA  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14238  0122DC  ECB8  F0A9         	call	_Port_CheckPortType	;wreg free
 14239  0122E0  0100               	movlb	0	; () banked
 14240  0122E2  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14241  0122E4  519F               	movf	Port_SetType@Output& (0+255),w,b
 14242  0122E6  A4D8               	btfss	status,2,c
 14243  0122E8  0012               	return	
 14244                           
 14245                           ; BSR set to: 0
 14246                           ;Port.c: 538: {
 14247                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 14248  0122EA  EE20 F002          	lfsr	2,2
 14249  0122EE  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14250  0122F0  26D9               	addwf	fsr2l,f,c
 14251  0122F2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14252  0122F4  22DA               	addwfc	fsr2h,f,c
 14253  0122F6  CFDE F09D          	movff	postinc2,??_Port_SetType
 14254  0122FA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14255  0122FE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14256  012302  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14257  012306  0EFF               	movlw	255
 14258  012308  6EDF               	movwf	indf2,c
 14259                           
 14260                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 14261  01230A  EE20 F004          	lfsr	2,4
 14262  01230E  D7B2               	goto	L14
 14263  012310                     
 14264                           ; BSR set to: 0
 14265                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 14266                           
 14267                           ; BSR set to: 0
 14268  012310  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14269  012314  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14270  012318  0E00               	movlw	0
 14271  01231A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14272  01231C  ECB8  F0A9         	call	_Port_CheckPortType	;wreg free
 14273  012320  0100               	movlb	0	; () banked
 14274  012322  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14275  012324  519F               	movf	Port_SetType@Output& (0+255),w,b
 14276  012326  A4D8               	btfss	status,2,c
 14277  012328  0012               	return	
 14278                           
 14279                           ; BSR set to: 0
 14280                           ;Port.c: 549: {
 14281                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 14282  01232A  EE20 F002          	lfsr	2,2
 14283  01232E                     L19:
 14284  01232E  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14285  012330  26D9               	addwf	fsr2l,f,c
 14286  012332  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14287  012334  22DA               	addwfc	fsr2h,f,c
 14288  012336  CFDE F09D          	movff	postinc2,??_Port_SetType
 14289  01233A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14290  01233E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14291  012342  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14292  012346  0E00               	movlw	0
 14293  012348                     L13:
 14294  012348  6EDF               	movwf	indf2,c
 14295                           
 14296                           ;Port.c: 552: }
 14297  01234A  D00D               	goto	l511
 14298  01234C                     l509:
 14299                           
 14300                           ; BSR set to: 0
 14301                           
 14302                           ; BSR set to: 0
 14303  01234C  519C               	movf	Port_SetType@pType& (0+255),w,b
 14304                           
 14305                           ; Switch size 1, requested type "space"
 14306                           ; Number of cases is 4, Range of values is 0 to 3
 14307                           ; switch strategies available:
 14308                           ; Name         Instructions Cycles
 14309                           ; simple_byte           13     7 (average)
 14310                           ;	Chosen strategy is simple_byte
 14311  01234E  0A00               	xorlw	0	; case 0
 14312  012350  B4D8               	btfsc	status,2,c
 14313  012352  D78E               	goto	l510
 14314  012354  0A01               	xorlw	1	; case 1
 14315  012356  B4D8               	btfsc	status,2,c
 14316  012358  D79B               	goto	l512
 14317  01235A  0A03               	xorlw	3	; case 2
 14318  01235C  B4D8               	btfsc	status,2,c
 14319  01235E  D7B8               	goto	l516
 14320  012360  0A01               	xorlw	1	; case 3
 14321  012362  B4D8               	btfsc	status,2,c
 14322  012364  D7D5               	goto	l519
 14323  012366                     l511:
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 14327                           
 14328                           ; BSR set to: 0
 14329  012366  0E08               	movlw	8
 14330  012368  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14331  01236A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14332  01236C  0E00               	movlw	0
 14333  01236E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14334  012370  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14335  012372  0E00               	movlw	0
 14336  012374  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14337  012376  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14338  01237A  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14339                           
 14340                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 14341  01237E  0E08               	movlw	8
 14342  012380  0100               	movlb	0	; () banked
 14343  012382  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14344  012384  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14345  012386  0E00               	movlw	0
 14346  012388  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14347  01238A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14348  01238C  0E01               	movlw	1
 14349  01238E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14350  012390  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14351  012394  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14352                           
 14353                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 14354  012398  0E08               	movlw	8
 14355  01239A  0100               	movlb	0	; () banked
 14356  01239C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14357  01239E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14358  0123A0  0E00               	movlw	0
 14359  0123A2  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14360  0123A4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14361  0123A6  0E02               	movlw	2
 14362  0123A8  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14363  0123AA  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14364  0123AE  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14365                           
 14366                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 14367  0123B2  0E08               	movlw	8
 14368  0123B4  0100               	movlb	0	; () banked
 14369  0123B6  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14370  0123B8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14371  0123BA  0E00               	movlw	0
 14372  0123BC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14373  0123BE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14374  0123C0  0E03               	movlw	3
 14375  0123C2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14376  0123C4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14377  0123C8  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14378                           
 14379                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 14380  0123CC  0E08               	movlw	8
 14381  0123CE  0100               	movlb	0	; () banked
 14382  0123D0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14383  0123D2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14384  0123D4  0E00               	movlw	0
 14385  0123D6  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14386  0123D8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14387  0123DA  0E04               	movlw	4
 14388  0123DC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14389  0123DE  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14390  0123E2  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14391                           
 14392                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 14393  0123E6  0E08               	movlw	8
 14394  0123E8  0100               	movlb	0	; () banked
 14395  0123EA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14396  0123EC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14397  0123EE  0E00               	movlw	0
 14398  0123F0  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14399  0123F2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14400  0123F4  0E05               	movlw	5
 14401  0123F6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14402  0123F8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14403  0123FC  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14404                           
 14405                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 14406  012400  0E08               	movlw	8
 14407  012402  0100               	movlb	0	; () banked
 14408  012404  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14409  012406  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14410  012408  0E00               	movlw	0
 14411  01240A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14412  01240C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14413  01240E  0E06               	movlw	6
 14414  012410  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14415  012412  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14416  012416  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14417                           
 14418                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 14419  01241A  0E08               	movlw	8
 14420  01241C  0100               	movlb	0	; () banked
 14421  01241E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14422  012420  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14423  012422  0E00               	movlw	0
 14424  012424  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14425  012426  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14426  012428  0E07               	movlw	7
 14427  01242A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14428  01242C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14429  012430  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14430  012434  0012               	return	
 14431  012436                     __end_of_Port_SetType:
 14432                           	opt stack 0
 14433                           tosu	equ	0xFFF
 14434                           tosh	equ	0xFFE
 14435                           tosl	equ	0xFFD
 14436                           pclath	equ	0xFFA
 14437                           tblptru	equ	0xFF8
 14438                           tblptrh	equ	0xFF7
 14439                           tblptrl	equ	0xFF6
 14440                           tablat	equ	0xFF5
 14441                           prodh	equ	0xFF4
 14442                           prodl	equ	0xFF3
 14443                           postinc0	equ	0xFEE
 14444                           wreg	equ	0xFE8
 14445                           postdec1	equ	0xFE5
 14446                           fsr1h	equ	0xFE2
 14447                           fsr1l	equ	0xFE1
 14448                           indf2	equ	0xFDF
 14449                           postinc2	equ	0xFDE
 14450                           postdec2	equ	0xFDD
 14451                           fsr2h	equ	0xFDA
 14452                           fsr2l	equ	0xFD9
 14453                           status	equ	0xFD8
 14454                           
 14455 ;; *************** function _Port_CheckPortType *****************
 14456 ;; Defined at:
 14457 ;;		line 138 in file "Library/Port.c"
 14458 ;; Parameters:    Size  Location     Type
 14459 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 14460 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14461 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14462 ;;  pDrive          1   56[BANK0 ] enum E6469
 14463 ;; Auto vars:     Size  Location     Type
 14464 ;;  Output          1   57[BANK0 ] enum E6475
 14465 ;; Return value:  Size  Location     Type
 14466 ;;                  1    wreg      enum E6475
 14467 ;; Registers used:
 14468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14469 ;; Tracked objects:
 14470 ;;		On entry : 0/0
 14471 ;;		On exit  : 0/0
 14472 ;;		Unchanged: 0/0
 14473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14474 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14477 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14478 ;;Total ram usage:        4 bytes
 14479 ;; Hardware stack levels used:    1
 14480 ;; Hardware stack levels required when called:   13
 14481 ;; This function calls:
 14482 ;;		_Port_CheckQuadType
 14483 ;; This function is called by:
 14484 ;;		_Port_SetType
 14485 ;; This function uses a non-reentrant model
 14486 ;;
 14487                           
 14488                           	psect	text49
 14489  015370                     __ptext49:
 14490                           	opt stack 0
 14491  015370                     _Port_CheckPortType:
 14492                           	opt stack 15
 14493                           
 14494                           ;Port.c: 140: ePinError Output = ePinErrorState;
 14495                           
 14496                           ;incstack = 0
 14497  015370  0E05               	movlw	5
 14498  015372  0100               	movlb	0	; () banked
 14499  015374  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14500                           
 14501                           ; BSR set to: 0
 14502                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 14503  015376  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14504  01537A  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14505  01537E  0E00               	movlw	0
 14506  015380  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14507  015382  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14508  015386  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 14509  01538A  0100               	movlb	0	; () banked
 14510  01538C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14511  01538E  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 14512  015390  A4D8               	btfss	status,2,c
 14513  015392  D00C               	goto	l397
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 14517  015394  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14518  015398  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14519  01539C  0E01               	movlw	1
 14520  01539E  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14521  0153A0  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14522  0153A4  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 14523  0153A8  0100               	movlb	0	; () banked
 14524  0153AA  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14525  0153AC                     l397:
 14526                           
 14527                           ; BSR set to: 0
 14528                           ;Port.c: 146: return Output;
 14529                           
 14530                           ; BSR set to: 0
 14531  0153AC  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 14532  0153AE  0012               	return	
 14533  0153B0                     __end_of_Port_CheckPortType:
 14534                           	opt stack 0
 14535                           tosu	equ	0xFFF
 14536                           tosh	equ	0xFFE
 14537                           tosl	equ	0xFFD
 14538                           pclath	equ	0xFFA
 14539                           tblptru	equ	0xFF8
 14540                           tblptrh	equ	0xFF7
 14541                           tblptrl	equ	0xFF6
 14542                           tablat	equ	0xFF5
 14543                           prodh	equ	0xFF4
 14544                           prodl	equ	0xFF3
 14545                           postinc0	equ	0xFEE
 14546                           wreg	equ	0xFE8
 14547                           postdec1	equ	0xFE5
 14548                           fsr1h	equ	0xFE2
 14549                           fsr1l	equ	0xFE1
 14550                           indf2	equ	0xFDF
 14551                           postinc2	equ	0xFDE
 14552                           postdec2	equ	0xFDD
 14553                           fsr2h	equ	0xFDA
 14554                           fsr2l	equ	0xFD9
 14555                           status	equ	0xFD8
 14556                           
 14557 ;; *************** function _Port_Set *****************
 14558 ;; Defined at:
 14559 ;;		line 570 in file "Library/Port.c"
 14560 ;; Parameters:    Size  Location     Type
 14561 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14562 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14563 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14564 ;;  pValue          1   17[BANK0 ] unsigned char 
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 14567 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 14568 ;;  Type            1   38[BANK0 ] enum E6795
 14569 ;; Return value:  Size  Location     Type
 14570 ;;                  1    wreg      void 
 14571 ;; Registers used:
 14572 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14573 ;; Tracked objects:
 14574 ;;		On entry : 0/0
 14575 ;;		On exit  : 0/0
 14576 ;;		Unchanged: 0/0
 14577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14578 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14579 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14580 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14581 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14582 ;;Total ram usage:       24 bytes
 14583 ;; Hardware stack levels used:    1
 14584 ;; Hardware stack levels required when called:   10
 14585 ;; This function calls:
 14586 ;;		_Byte_SetByte
 14587 ;;		_Word_GetPair
 14588 ;; This function is called by:
 14589 ;;		_Port_Init
 14590 ;;		_Port_Toggle
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594                           	psect	text50
 14595  0114F8                     __ptext50:
 14596                           	opt stack 0
 14597  0114F8                     _Port_Set:
 14598                           	opt stack 18
 14599                           
 14600                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 14601                           
 14602                           ; BSR set to: 0
 14603                           ;incstack = 0
 14604  0114F8  0E08               	movlw	8
 14605  0114FA  0100               	movlb	0	; () banked
 14606  0114FC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14607  0114FE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14608  011500  0E00               	movlw	0
 14609  011502  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14610  011504  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14611  011506  0E00               	movlw	0
 14612  011508  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14613  01150A  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14614  01150E  0100               	movlb	0	; () banked
 14615  011510  6F86               	movwf	Port_Set@Type& (0+255),b
 14616                           
 14617                           ; BSR set to: 0
 14618                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 14619  011512  5186               	movf	Port_Set@Type& (0+255),w,b
 14620  011514  6F72               	movwf	??_Port_Set& (0+255),b
 14621  011516  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14622  011518  0E0E               	movlw	14
 14623  01151A                     u12285:
 14624  01151A  90D8               	bcf	status,0,c
 14625  01151C  3772               	rlcf	??_Port_Set& (0+255),f,b
 14626  01151E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14627  011520  2EE8               	decfsz	wreg,f,c
 14628  011522  D7FB               	goto	u12285
 14629  011524  5186               	movf	Port_Set@Type& (0+255),w,b
 14630  011526  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 14631  011528  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 14632  01152A  0E0C               	movlw	12
 14633  01152C                     u12295:
 14634  01152C  90D8               	bcf	status,0,c
 14635  01152E  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 14636  011530  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 14637  011532  2EE8               	decfsz	wreg,f,c
 14638  011534  D7FB               	goto	u12295
 14639  011536  5186               	movf	Port_Set@Type& (0+255),w,b
 14640  011538  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 14641  01153A  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 14642  01153C  0E0A               	movlw	10
 14643  01153E                     u12305:
 14644  01153E  90D8               	bcf	status,0,c
 14645  011540  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 14646  011542  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 14647  011544  2EE8               	decfsz	wreg,f,c
 14648  011546  D7FB               	goto	u12305
 14649  011548  5186               	movf	Port_Set@Type& (0+255),w,b
 14650  01154A  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 14651  01154C  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 14652  01154E  5186               	movf	Port_Set@Type& (0+255),w,b
 14653  011550  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 14654  011552  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 14655  011554  0E06               	movlw	6
 14656  011556                     u12315:
 14657  011556  90D8               	bcf	status,0,c
 14658  011558  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 14659  01155A  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 14660  01155C  2EE8               	decfsz	wreg,f,c
 14661  01155E  D7FB               	goto	u12315
 14662  011560  5186               	movf	Port_Set@Type& (0+255),w,b
 14663  011562  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 14664  011564  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 14665  011566  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 14666  011568  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 14667  01156A  0EF0               	movlw	240
 14668  01156C  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 14669  01156E  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 14670  011570  0B0F               	andlw	15
 14671  011572  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 14672  011574  0EF0               	movlw	240
 14673  011576  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 14674  011578  5186               	movf	Port_Set@Type& (0+255),w,b
 14675  01157A  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 14676  01157C  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 14677  01157E  90D8               	bcf	status,0,c
 14678  011580  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 14679  011582  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 14680  011584  90D8               	bcf	status,0,c
 14681  011586  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 14682  011588  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 14683  01158A  5186               	movf	Port_Set@Type& (0+255),w,b
 14684  01158C  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 14685  01158E  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 14686  011590  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 14687  011592  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14688  011594  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 14689  011596  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14690  011598  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 14691  01159A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14692  01159C  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 14693  01159E  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14694  0115A0  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 14695  0115A2  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14696  0115A4  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 14697  0115A6  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14698  0115A8  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 14699  0115AA  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14700  0115AC  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 14701  0115AE  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14702  0115B0  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 14703  0115B2  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14704  0115B4  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 14705  0115B6  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14706  0115B8  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 14707  0115BA  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14708  0115BC  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 14709  0115BE  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14710  0115C0  5172               	movf	??_Port_Set& (0+255),w,b
 14711  0115C2  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 14712  0115C4  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 14713  0115C6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14714  0115C8  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 14715  0115CA  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 14716                           
 14717                           ; BSR set to: 0
 14718                           ;Port.c: 574: UINT16 TypeActual = Type;
 14719  0115CC  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 14720  0115D0  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 14724  0115D2  0E08               	movlw	8
 14725  0115D4  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14726  0115D6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14727  0115D8  0E00               	movlw	0
 14728  0115DA  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14729  0115DC  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14730  0115DE  0E01               	movlw	1
 14731  0115E0  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14732  0115E2  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14733  0115E6  0100               	movlb	0	; () banked
 14734  0115E8  6F72               	movwf	??_Port_Set& (0+255),b
 14735  0115EA  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14736  0115EC  90D8               	bcf	status,0,c
 14737  0115EE  3772               	rlcf	??_Port_Set& (0+255),f,b
 14738  0115F0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14739  0115F2  90D8               	bcf	status,0,c
 14740  0115F4  3772               	rlcf	??_Port_Set& (0+255),f,b
 14741  0115F6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14742  0115F8  5172               	movf	??_Port_Set& (0+255),w,b
 14743  0115FA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14744  0115FC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14745  0115FE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14746                           
 14747                           ; BSR set to: 0
 14748                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 14749  011600  0E08               	movlw	8
 14750  011602  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14751  011604  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14752  011606  0E00               	movlw	0
 14753  011608  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14754  01160A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14755  01160C  0E02               	movlw	2
 14756  01160E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14757  011610  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14758  011614  0100               	movlb	0	; () banked
 14759  011616  6F72               	movwf	??_Port_Set& (0+255),b
 14760  011618  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14761  01161A  3B72               	swapf	??_Port_Set& (0+255),f,b
 14762  01161C  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 14763  01161E  0EF0               	movlw	240
 14764  011620  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 14765  011622  5172               	movf	??_Port_Set& (0+255),w,b
 14766  011624  0B0F               	andlw	15
 14767  011626  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 14768  011628  0EF0               	movlw	240
 14769  01162A  1772               	andwf	??_Port_Set& (0+255),f,b
 14770  01162C  5172               	movf	??_Port_Set& (0+255),w,b
 14771  01162E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14772  011630  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14773  011632  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 14777  011634  0E08               	movlw	8
 14778  011636  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14779  011638  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14780  01163A  0E00               	movlw	0
 14781  01163C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14782  01163E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14783  011640  0E03               	movlw	3
 14784  011642  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14785  011644  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14786  011648  0100               	movlb	0	; () banked
 14787  01164A  6F72               	movwf	??_Port_Set& (0+255),b
 14788  01164C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14789  01164E  0E06               	movlw	6
 14790  011650                     u12325:
 14791  011650  90D8               	bcf	status,0,c
 14792  011652  3772               	rlcf	??_Port_Set& (0+255),f,b
 14793  011654  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14794  011656  2EE8               	decfsz	wreg,f,c
 14795  011658  D7FB               	goto	u12325
 14796  01165A  5172               	movf	??_Port_Set& (0+255),w,b
 14797  01165C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14798  01165E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14799  011660  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14800                           
 14801                           ; BSR set to: 0
 14802                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 14803  011662  0E08               	movlw	8
 14804  011664  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14805  011666  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14806  011668  0E00               	movlw	0
 14807  01166A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14808  01166C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14809  01166E  0E04               	movlw	4
 14810  011670  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14811  011672  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14812  011676  0100               	movlb	0	; () banked
 14813  011678  6F72               	movwf	??_Port_Set& (0+255),b
 14814  01167A  5172               	movf	??_Port_Set& (0+255),w,b
 14815  01167C  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 14816  01167E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14817  011680  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14818  011682  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14819  011684  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 14820  011686  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14821                           
 14822                           ; BSR set to: 0
 14823                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 14824  011688  0E08               	movlw	8
 14825  01168A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14826  01168C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14827  01168E  0E00               	movlw	0
 14828  011690  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14829  011692  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14830  011694  0E05               	movlw	5
 14831  011696  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14832  011698  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14833  01169C  0100               	movlb	0	; () banked
 14834  01169E  6F72               	movwf	??_Port_Set& (0+255),b
 14835  0116A0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14836  0116A2  0E0A               	movlw	10
 14837  0116A4                     u12335:
 14838  0116A4  90D8               	bcf	status,0,c
 14839  0116A6  3772               	rlcf	??_Port_Set& (0+255),f,b
 14840  0116A8  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14841  0116AA  2EE8               	decfsz	wreg,f,c
 14842  0116AC  D7FB               	goto	u12335
 14843  0116AE  5172               	movf	??_Port_Set& (0+255),w,b
 14844  0116B0  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14845  0116B2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14846  0116B4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14847                           
 14848                           ; BSR set to: 0
 14849                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 14850  0116B6  0E08               	movlw	8
 14851  0116B8  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14852  0116BA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14853  0116BC  0E00               	movlw	0
 14854  0116BE  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14855  0116C0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14856  0116C2  0E06               	movlw	6
 14857  0116C4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14858  0116C6  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14859  0116CA  0100               	movlb	0	; () banked
 14860  0116CC  6F72               	movwf	??_Port_Set& (0+255),b
 14861  0116CE  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14862  0116D0  0E0C               	movlw	12
 14863  0116D2                     u12345:
 14864  0116D2  90D8               	bcf	status,0,c
 14865  0116D4  3772               	rlcf	??_Port_Set& (0+255),f,b
 14866  0116D6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14867  0116D8  2EE8               	decfsz	wreg,f,c
 14868  0116DA  D7FB               	goto	u12345
 14869  0116DC  5172               	movf	??_Port_Set& (0+255),w,b
 14870  0116DE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14871  0116E0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14872  0116E2  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14873                           
 14874                           ; BSR set to: 0
 14875                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 14876  0116E4  0E08               	movlw	8
 14877  0116E6  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14878  0116E8  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14879  0116EA  0E00               	movlw	0
 14880  0116EC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14881  0116EE  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14882  0116F0  0E07               	movlw	7
 14883  0116F2  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14884  0116F4  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14885  0116F8  0100               	movlb	0	; () banked
 14886  0116FA  6F72               	movwf	??_Port_Set& (0+255),b
 14887  0116FC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14888  0116FE  0E0E               	movlw	14
 14889  011700                     u12355:
 14890  011700  90D8               	bcf	status,0,c
 14891  011702  3772               	rlcf	??_Port_Set& (0+255),f,b
 14892  011704  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14893  011706  2EE8               	decfsz	wreg,f,c
 14894  011708  D7FB               	goto	u12355
 14895  01170A  5172               	movf	??_Port_Set& (0+255),w,b
 14896  01170C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14897  01170E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14898  011710  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14899                           
 14900                           ;Port.c: 584: if (TypeRequired == TypeActual)
 14901  011712  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 14902  011714  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 14903  011716  E144               	bnz	l528
 14904  011718  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 14905  01171A  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 14906  01171C  A4D8               	btfss	status,2,c
 14907  01171E  0012               	return	
 14908  011720  D030               	goto	l526
 14909  011722                     
 14910                           ; BSR set to: 0
 14911                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 14912                           
 14913                           ; BSR set to: 0
 14914  011722  EE20 F002          	lfsr	2,2
 14915  011726  516F               	movf	Port_Set@pInput& (0+255),w,b
 14916  011728  26D9               	addwf	fsr2l,f,c
 14917  01172A  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 14918  01172C  22DA               	addwfc	fsr2h,f,c
 14919  01172E  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 14920  011732  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 14921  011736  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 14922  01173A  EC8D  F0AD         	call	_Byte_SetByte	;wreg free
 14923                           
 14924                           ;Port.c: 594: break;
 14925  01173E  0012               	return	
 14926  011740                     
 14927                           ;Port.c: 597: pValue = ~pValue;
 14928  011740  0100               	movlb	0	; () banked
 14929  011742  1F71               	comf	Port_Set@pValue& (0+255),f,b
 14930                           
 14931                           ; BSR set to: 0
 14932                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 14933  011744  EE20 F002          	lfsr	2,2
 14934  011748  516F               	movf	Port_Set@pInput& (0+255),w,b
 14935  01174A  26D9               	addwf	fsr2l,f,c
 14936  01174C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 14937  01174E  22DA               	addwfc	fsr2h,f,c
 14938  011750  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 14939  011754  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 14940  011758  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 14941  01175C  EC8D  F0AD         	call	_Byte_SetByte	;wreg free
 14942                           
 14943                           ;Port.c: 599: break;
 14944  011760  0012               	return	
 14945  011762                     
 14946                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 14947  011762  0100               	movlb	0	; () banked
 14948  011764  EE20 F004          	lfsr	2,4
 14949  011768  516F               	movf	Port_Set@pInput& (0+255),w,b
 14950  01176A  26D9               	addwf	fsr2l,f,c
 14951  01176C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 14952  01176E  22DA               	addwfc	fsr2h,f,c
 14953  011770  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 14954  011774  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 14955  011778  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 14956  01177C  EC8D  F0AD         	call	_Byte_SetByte	;wreg free
 14957                           
 14958                           ;Port.c: 606: }
 14959                           
 14960                           ;Port.c: 605: break;
 14961                           
 14962                           ;Port.c: 604: default:
 14963                           
 14964                           ;Port.c: 603: break;
 14965  011780  0012               	return	
 14966  011782                     l526:
 14967  011782  0100               	movlb	0	; () banked
 14968  011784  5186               	movf	Port_Set@Type& (0+255),w,b
 14969                           
 14970                           ; Switch size 1, requested type "space"
 14971                           ; Number of cases is 4, Range of values is 0 to 3
 14972                           ; switch strategies available:
 14973                           ; Name         Instructions Cycles
 14974                           ; simple_byte           13     7 (average)
 14975                           ;	Chosen strategy is simple_byte
 14976  011786  0A00               	xorlw	0	; case 0
 14977  011788  B4D8               	btfsc	status,2,c
 14978  01178A  0012               	return	
 14979  01178C  0A01               	xorlw	1	; case 1
 14980  01178E  B4D8               	btfsc	status,2,c
 14981  011790  D7C8               	goto	l529
 14982  011792  0A03               	xorlw	3	; case 2
 14983  011794  B4D8               	btfsc	status,2,c
 14984  011796  D7D4               	goto	l531
 14985  011798  0A01               	xorlw	1	; case 3
 14986  01179A  A4D8               	btfss	status,2,c
 14987                           
 14988                           ; BSR set to: 0
 14989                           
 14990                           ; BSR set to: 0
 14991                           ;Port.c: 607: }
 14992  01179C  0012               	return	
 14993  01179E  D7E1               	goto	l532
 14994  0117A0                     l528:
 14995  0117A0  0012               	return		;funcret
 14996  0117A2                     __end_of_Port_Set:
 14997                           	opt stack 0
 14998                           tosu	equ	0xFFF
 14999                           tosh	equ	0xFFE
 15000                           tosl	equ	0xFFD
 15001                           pclath	equ	0xFFA
 15002                           tblptru	equ	0xFF8
 15003                           tblptrh	equ	0xFF7
 15004                           tblptrl	equ	0xFF6
 15005                           tablat	equ	0xFF5
 15006                           prodh	equ	0xFF4
 15007                           prodl	equ	0xFF3
 15008                           postinc0	equ	0xFEE
 15009                           wreg	equ	0xFE8
 15010                           postdec1	equ	0xFE5
 15011                           fsr1h	equ	0xFE2
 15012                           fsr1l	equ	0xFE1
 15013                           indf2	equ	0xFDF
 15014                           postinc2	equ	0xFDE
 15015                           postdec2	equ	0xFDD
 15016                           fsr2h	equ	0xFDA
 15017                           fsr2l	equ	0xFD9
 15018                           status	equ	0xFD8
 15019                           
 15020 ;; *************** function _Byte_SetByte *****************
 15021 ;; Defined at:
 15022 ;;		line 110 in file "Library/Types.c"
 15023 ;; Parameters:    Size  Location     Type
 15024 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15025 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15026 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15027 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15028 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15029 ;;		 -> NULL(0), 
 15030 ;;  pValue          1    2[BANK0 ] unsigned char 
 15031 ;; Auto vars:     Size  Location     Type
 15032 ;;		None
 15033 ;; Return value:  Size  Location     Type
 15034 ;;                  1    wreg      void 
 15035 ;; Registers used:
 15036 ;;		fsr2l, fsr2h
 15037 ;; Tracked objects:
 15038 ;;		On entry : 0/0
 15039 ;;		On exit  : 0/0
 15040 ;;		Unchanged: 0/0
 15041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15042 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15045 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15046 ;;Total ram usage:        3 bytes
 15047 ;; Hardware stack levels used:    1
 15048 ;; Hardware stack levels required when called:    7
 15049 ;; This function calls:
 15050 ;;		Nothing
 15051 ;; This function is called by:
 15052 ;;		_Port_Set
 15053 ;;		_I2C_Init
 15054 ;; This function uses a non-reentrant model
 15055 ;;
 15056                           
 15057                           	psect	text51
 15058  015B1A                     __ptext51:
 15059                           	opt stack 0
 15060  015B1A                     _Byte_SetByte:
 15061                           	opt stack 20
 15062                           
 15063                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 15064                           
 15065                           ;incstack = 0
 15066  015B1A  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 15067  015B1E  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 15068  015B22  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 15069  015B26  0012               	return		;funcret
 15070  015B28                     __end_of_Byte_SetByte:
 15071                           	opt stack 0
 15072                           tosu	equ	0xFFF
 15073                           tosh	equ	0xFFE
 15074                           tosl	equ	0xFFD
 15075                           pclath	equ	0xFFA
 15076                           tblptru	equ	0xFF8
 15077                           tblptrh	equ	0xFF7
 15078                           tblptrl	equ	0xFF6
 15079                           tablat	equ	0xFF5
 15080                           prodh	equ	0xFF4
 15081                           prodl	equ	0xFF3
 15082                           postinc0	equ	0xFEE
 15083                           wreg	equ	0xFE8
 15084                           postdec1	equ	0xFE5
 15085                           fsr1h	equ	0xFE2
 15086                           fsr1l	equ	0xFE1
 15087                           indf2	equ	0xFDF
 15088                           postinc2	equ	0xFDE
 15089                           postdec2	equ	0xFDD
 15090                           fsr2h	equ	0xFDA
 15091                           fsr2l	equ	0xFD9
 15092                           status	equ	0xFD8
 15093                           
 15094 ;; *************** function _GetPortTRIS *****************
 15095 ;; Defined at:
 15096 ;;		line 67 in file "Library/Port.c"
 15097 ;; Parameters:    Size  Location     Type
 15098 ;;  pInput          1    wreg     enum E6786
 15099 ;; Auto vars:     Size  Location     Type
 15100 ;;  pInput          1    2[BANK0 ] enum E6786
 15101 ;; Return value:  Size  Location     Type
 15102 ;;                  2    0[BANK0 ] PTR struct Byte
 15103 ;; Registers used:
 15104 ;;		wreg, status,2, status,0
 15105 ;; Tracked objects:
 15106 ;;		On entry : 0/0
 15107 ;;		On exit  : 0/0
 15108 ;;		Unchanged: 0/0
 15109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15110 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15113 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15114 ;;Total ram usage:        3 bytes
 15115 ;; Hardware stack levels used:    1
 15116 ;; Hardware stack levels required when called:    7
 15117 ;; This function calls:
 15118 ;;		Nothing
 15119 ;; This function is called by:
 15120 ;;		_Port_Init
 15121 ;; This function uses a non-reentrant model
 15122 ;;
 15123                           
 15124                           	psect	text52
 15125  01438C                     __ptext52:
 15126                           	opt stack 0
 15127  01438C                     _GetPortTRIS:
 15128                           	opt stack 21
 15129                           
 15130                           ;incstack = 0
 15131                           ;GetPortTRIS@pInput stored from wreg
 15132  01438C  0100               	movlb	0	; () banked
 15133  01438E  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 15134                           
 15135                           ;Port.c: 69: switch (pInput)
 15136  014390  D029               	goto	l363
 15137  014392                     
 15138                           ;Port.c: 72: return (BytePtr)&TRISA;
 15139  014392  0E92               	movlw	146
 15140  014394  0100               	movlb	0	; () banked
 15141  014396  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15142  014398  0E0F               	movlw	15
 15143  01439A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15144                           
 15145                           ; BSR set to: 0
 15146  01439C  0012               	return	
 15147  01439E                     
 15148                           ; BSR set to: 0
 15149                           ;Port.c: 74: return (BytePtr)&TRISB;
 15150                           
 15151                           ; BSR set to: 0
 15152  01439E  0E93               	movlw	147
 15153  0143A0  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15154  0143A2  0E0F               	movlw	15
 15155  0143A4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15156                           
 15157                           ; BSR set to: 0
 15158  0143A6  0012               	return	
 15159  0143A8                     
 15160                           ; BSR set to: 0
 15161                           ;Port.c: 76: return (BytePtr)&TRISC;
 15162                           
 15163                           ; BSR set to: 0
 15164  0143A8  0E94               	movlw	148
 15165  0143AA  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15166  0143AC  0E0F               	movlw	15
 15167  0143AE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15168                           
 15169                           ; BSR set to: 0
 15170  0143B0  0012               	return	
 15171  0143B2                     
 15172                           ; BSR set to: 0
 15173                           ;Port.c: 78: return (BytePtr)&TRISD;
 15174                           
 15175                           ; BSR set to: 0
 15176  0143B2  0E95               	movlw	149
 15177  0143B4  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15178  0143B6  0E0F               	movlw	15
 15179  0143B8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15180                           
 15181                           ; BSR set to: 0
 15182  0143BA  0012               	return	
 15183  0143BC                     
 15184                           ; BSR set to: 0
 15185                           ;Port.c: 80: return (BytePtr)&TRISE;
 15186                           
 15187                           ; BSR set to: 0
 15188  0143BC  0E96               	movlw	150
 15189  0143BE  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15190  0143C0  0E0F               	movlw	15
 15191  0143C2  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15192                           
 15193                           ; BSR set to: 0
 15194  0143C4  0012               	return	
 15195  0143C6                     
 15196                           ; BSR set to: 0
 15197                           ;Port.c: 82: return (BytePtr)&TRISF;
 15198                           
 15199                           ; BSR set to: 0
 15200  0143C6  0E97               	movlw	151
 15201  0143C8  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15202  0143CA  0E0F               	movlw	15
 15203  0143CC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15204                           
 15205                           ; BSR set to: 0
 15206  0143CE  0012               	return	
 15207  0143D0                     
 15208                           ; BSR set to: 0
 15209                           ;Port.c: 84: return (BytePtr)&TRISG;
 15210                           
 15211                           ; BSR set to: 0
 15212  0143D0  0E98               	movlw	152
 15213  0143D2  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15214  0143D4  0E0F               	movlw	15
 15215  0143D6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15216                           
 15217                           ; BSR set to: 0
 15218  0143D8  0012               	return	
 15219  0143DA                     
 15220                           ; BSR set to: 0
 15221                           ;Port.c: 86: return (void*)0;
 15222                           
 15223                           ; BSR set to: 0
 15224  0143DA  0E00               	movlw	0
 15225  0143DC  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15226  0143DE  0E00               	movlw	0
 15227  0143E0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15228                           
 15229                           ; BSR set to: 0
 15230                           ;Port.c: 87: }
 15231                           
 15232                           ; BSR set to: 0
 15233  0143E2  0012               	return	
 15234  0143E4                     l363:
 15235                           
 15236                           ; BSR set to: 0
 15237  0143E4  0100               	movlb	0	; () banked
 15238  0143E6  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 15239                           
 15240                           ; Switch size 1, requested type "space"
 15241                           ; Number of cases is 7, Range of values is 0 to 6
 15242                           ; switch strategies available:
 15243                           ; Name         Instructions Cycles
 15244                           ; simple_byte           22    12 (average)
 15245                           ;	Chosen strategy is simple_byte
 15246  0143E8  0A00               	xorlw	0	; case 0
 15247  0143EA  B4D8               	btfsc	status,2,c
 15248  0143EC  D7D2               	goto	l364
 15249  0143EE  0A01               	xorlw	1	; case 1
 15250  0143F0  B4D8               	btfsc	status,2,c
 15251  0143F2  D7D5               	goto	l366
 15252  0143F4  0A03               	xorlw	3	; case 2
 15253  0143F6  B4D8               	btfsc	status,2,c
 15254  0143F8  D7D7               	goto	l367
 15255  0143FA  0A01               	xorlw	1	; case 3
 15256  0143FC  B4D8               	btfsc	status,2,c
 15257  0143FE  D7D9               	goto	l368
 15258  014400  0A07               	xorlw	7	; case 4
 15259  014402  B4D8               	btfsc	status,2,c
 15260  014404  D7DB               	goto	l369
 15261  014406  0A01               	xorlw	1	; case 5
 15262  014408  B4D8               	btfsc	status,2,c
 15263  01440A  D7DD               	goto	l370
 15264  01440C  0A03               	xorlw	3	; case 6
 15265  01440E  B4D8               	btfsc	status,2,c
 15266  014410  D7DF               	goto	l371
 15267  014412  D7E3               	goto	l372
 15268  014414                     __end_of_GetPortTRIS:
 15269                           	opt stack 0
 15270                           tosu	equ	0xFFF
 15271                           tosh	equ	0xFFE
 15272                           tosl	equ	0xFFD
 15273                           pclath	equ	0xFFA
 15274                           tblptru	equ	0xFF8
 15275                           tblptrh	equ	0xFF7
 15276                           tblptrl	equ	0xFF6
 15277                           tablat	equ	0xFF5
 15278                           prodh	equ	0xFF4
 15279                           prodl	equ	0xFF3
 15280                           postinc0	equ	0xFEE
 15281                           wreg	equ	0xFE8
 15282                           postdec1	equ	0xFE5
 15283                           fsr1h	equ	0xFE2
 15284                           fsr1l	equ	0xFE1
 15285                           indf2	equ	0xFDF
 15286                           postinc2	equ	0xFDE
 15287                           postdec2	equ	0xFDD
 15288                           fsr2h	equ	0xFDA
 15289                           fsr2l	equ	0xFD9
 15290                           status	equ	0xFD8
 15291                           
 15292 ;; *************** function _GetPortProperties *****************
 15293 ;; Defined at:
 15294 ;;		line 21 in file "Library/Port.c"
 15295 ;; Parameters:    Size  Location     Type
 15296 ;;  pInput          1    wreg     enum E6786
 15297 ;; Auto vars:     Size  Location     Type
 15298 ;;  pInput          1    2[BANK0 ] enum E6786
 15299 ;; Return value:  Size  Location     Type
 15300 ;;                  2    0[BANK0 ] PTR struct PortProperty
 15301 ;; Registers used:
 15302 ;;		wreg, status,2, status,0
 15303 ;; Tracked objects:
 15304 ;;		On entry : 0/0
 15305 ;;		On exit  : 0/0
 15306 ;;		Unchanged: 0/0
 15307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15308 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15311 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15312 ;;Total ram usage:        3 bytes
 15313 ;; Hardware stack levels used:    1
 15314 ;; Hardware stack levels required when called:    7
 15315 ;; This function calls:
 15316 ;;		Nothing
 15317 ;; This function is called by:
 15318 ;;		_Port_Init
 15319 ;; This function uses a non-reentrant model
 15320 ;;
 15321                           
 15322                           	psect	text53
 15323  014414                     __ptext53:
 15324                           	opt stack 0
 15325  014414                     _GetPortProperties:
 15326                           	opt stack 21
 15327                           
 15328                           ; BSR set to: 0
 15329                           ;incstack = 0
 15330                           ;GetPortProperties@pInput stored from wreg
 15331  014414  0100               	movlb	0	; () banked
 15332  014416  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 15333                           
 15334                           ;Port.c: 23: switch (pInput)
 15335  014418  D029               	goto	l337
 15336  01441A                     
 15337                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 15338  01441A  0E3D               	movlw	low _PortA_Property
 15339  01441C  0100               	movlb	0	; () banked
 15340  01441E  6F60               	movwf	?_GetPortProperties& (0+255),b
 15341  014420  0EFE               	movlw	high _PortA_Property
 15342  014422  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15343                           
 15344                           ; BSR set to: 0
 15345  014424  0012               	return	
 15346  014426                     
 15347                           ; BSR set to: 0
 15348                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 15349                           
 15350                           ; BSR set to: 0
 15351  014426  0E3B               	movlw	low _PortB_Property
 15352  014428  6F60               	movwf	?_GetPortProperties& (0+255),b
 15353  01442A  0EFE               	movlw	high _PortB_Property
 15354  01442C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15355                           
 15356                           ; BSR set to: 0
 15357  01442E  0012               	return	
 15358  014430                     
 15359                           ; BSR set to: 0
 15360                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 15361                           
 15362                           ; BSR set to: 0
 15363  014430  0E39               	movlw	low _PortC_Property
 15364  014432  6F60               	movwf	?_GetPortProperties& (0+255),b
 15365  014434  0EFE               	movlw	high _PortC_Property
 15366  014436  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15367                           
 15368                           ; BSR set to: 0
 15369  014438  0012               	return	
 15370  01443A                     
 15371                           ; BSR set to: 0
 15372                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 15373                           
 15374                           ; BSR set to: 0
 15375  01443A  0E37               	movlw	low _PortD_Property
 15376  01443C  6F60               	movwf	?_GetPortProperties& (0+255),b
 15377  01443E  0EFE               	movlw	high _PortD_Property
 15378  014440  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15379                           
 15380                           ; BSR set to: 0
 15381  014442  0012               	return	
 15382  014444                     
 15383                           ; BSR set to: 0
 15384                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 15385                           
 15386                           ; BSR set to: 0
 15387  014444  0E35               	movlw	low _PortE_Property
 15388  014446  6F60               	movwf	?_GetPortProperties& (0+255),b
 15389  014448  0EFE               	movlw	high _PortE_Property
 15390  01444A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15391                           
 15392                           ; BSR set to: 0
 15393  01444C  0012               	return	
 15394  01444E                     
 15395                           ; BSR set to: 0
 15396                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 15397                           
 15398                           ; BSR set to: 0
 15399  01444E  0E33               	movlw	low _PortF_Property
 15400  014450  6F60               	movwf	?_GetPortProperties& (0+255),b
 15401  014452  0EFE               	movlw	high _PortF_Property
 15402  014454  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15403                           
 15404                           ; BSR set to: 0
 15405  014456  0012               	return	
 15406  014458                     
 15407                           ; BSR set to: 0
 15408                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 15409                           
 15410                           ; BSR set to: 0
 15411  014458  0E31               	movlw	low _PortG_Property
 15412  01445A  6F60               	movwf	?_GetPortProperties& (0+255),b
 15413  01445C  0EFE               	movlw	high _PortG_Property
 15414  01445E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15415                           
 15416                           ; BSR set to: 0
 15417  014460  0012               	return	
 15418  014462                     
 15419                           ; BSR set to: 0
 15420                           ;Port.c: 40: return (void*)0;
 15421                           
 15422                           ; BSR set to: 0
 15423  014462  0E00               	movlw	0
 15424  014464  6F60               	movwf	?_GetPortProperties& (0+255),b
 15425  014466  0E00               	movlw	0
 15426  014468  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15427                           
 15428                           ; BSR set to: 0
 15429                           ;Port.c: 41: }
 15430                           
 15431                           ; BSR set to: 0
 15432  01446A  0012               	return	
 15433  01446C                     l337:
 15434                           
 15435                           ; BSR set to: 0
 15436  01446C  0100               	movlb	0	; () banked
 15437  01446E  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 15438                           
 15439                           ; Switch size 1, requested type "space"
 15440                           ; Number of cases is 7, Range of values is 0 to 6
 15441                           ; switch strategies available:
 15442                           ; Name         Instructions Cycles
 15443                           ; simple_byte           22    12 (average)
 15444                           ;	Chosen strategy is simple_byte
 15445  014470  0A00               	xorlw	0	; case 0
 15446  014472  B4D8               	btfsc	status,2,c
 15447  014474  D7D2               	goto	l338
 15448  014476  0A01               	xorlw	1	; case 1
 15449  014478  B4D8               	btfsc	status,2,c
 15450  01447A  D7D5               	goto	l340
 15451  01447C  0A03               	xorlw	3	; case 2
 15452  01447E  B4D8               	btfsc	status,2,c
 15453  014480  D7D7               	goto	l341
 15454  014482  0A01               	xorlw	1	; case 3
 15455  014484  B4D8               	btfsc	status,2,c
 15456  014486  D7D9               	goto	l342
 15457  014488  0A07               	xorlw	7	; case 4
 15458  01448A  B4D8               	btfsc	status,2,c
 15459  01448C  D7DB               	goto	l343
 15460  01448E  0A01               	xorlw	1	; case 5
 15461  014490  B4D8               	btfsc	status,2,c
 15462  014492  D7DD               	goto	l344
 15463  014494  0A03               	xorlw	3	; case 6
 15464  014496  B4D8               	btfsc	status,2,c
 15465  014498  D7DF               	goto	l345
 15466  01449A  D7E3               	goto	l346
 15467  01449C                     __end_of_GetPortProperties:
 15468                           	opt stack 0
 15469                           tosu	equ	0xFFF
 15470                           tosh	equ	0xFFE
 15471                           tosl	equ	0xFFD
 15472                           pclath	equ	0xFFA
 15473                           tblptru	equ	0xFF8
 15474                           tblptrh	equ	0xFF7
 15475                           tblptrl	equ	0xFF6
 15476                           tablat	equ	0xFF5
 15477                           prodh	equ	0xFF4
 15478                           prodl	equ	0xFF3
 15479                           postinc0	equ	0xFEE
 15480                           wreg	equ	0xFE8
 15481                           postdec1	equ	0xFE5
 15482                           fsr1h	equ	0xFE2
 15483                           fsr1l	equ	0xFE1
 15484                           indf2	equ	0xFDF
 15485                           postinc2	equ	0xFDE
 15486                           postdec2	equ	0xFDD
 15487                           fsr2h	equ	0xFDA
 15488                           fsr2l	equ	0xFD9
 15489                           status	equ	0xFD8
 15490                           
 15491 ;; *************** function _GetPortPORT *****************
 15492 ;; Defined at:
 15493 ;;		line 44 in file "Library/Port.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;  pInput          1    wreg     enum E6786
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;  pInput          1    2[BANK0 ] enum E6786
 15498 ;; Return value:  Size  Location     Type
 15499 ;;                  2    0[BANK0 ] PTR struct Byte
 15500 ;; Registers used:
 15501 ;;		wreg, status,2, status,0
 15502 ;; Tracked objects:
 15503 ;;		On entry : 0/0
 15504 ;;		On exit  : 0/0
 15505 ;;		Unchanged: 0/0
 15506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15510 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15511 ;;Total ram usage:        3 bytes
 15512 ;; Hardware stack levels used:    1
 15513 ;; Hardware stack levels required when called:    7
 15514 ;; This function calls:
 15515 ;;		Nothing
 15516 ;; This function is called by:
 15517 ;;		_Port_Init
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           	psect	text54
 15522  01449C                     __ptext54:
 15523                           	opt stack 0
 15524  01449C                     _GetPortPORT:
 15525                           	opt stack 21
 15526                           
 15527                           ; BSR set to: 0
 15528                           ;incstack = 0
 15529                           ;GetPortPORT@pInput stored from wreg
 15530  01449C  0100               	movlb	0	; () banked
 15531  01449E  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 15532                           
 15533                           ;Port.c: 46: switch (pInput)
 15534  0144A0  D029               	goto	l350
 15535  0144A2                     
 15536                           ;Port.c: 49: return (BytePtr)&PORTA;
 15537  0144A2  0E80               	movlw	128
 15538  0144A4  0100               	movlb	0	; () banked
 15539  0144A6  6F60               	movwf	?_GetPortPORT& (0+255),b
 15540  0144A8  0E0F               	movlw	15
 15541  0144AA  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15542                           
 15543                           ; BSR set to: 0
 15544  0144AC  0012               	return	
 15545  0144AE                     
 15546                           ; BSR set to: 0
 15547                           ;Port.c: 51: return (BytePtr)&PORTB;
 15548                           
 15549                           ; BSR set to: 0
 15550  0144AE  0E81               	movlw	129
 15551  0144B0  6F60               	movwf	?_GetPortPORT& (0+255),b
 15552  0144B2  0E0F               	movlw	15
 15553  0144B4  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15554                           
 15555                           ; BSR set to: 0
 15556  0144B6  0012               	return	
 15557  0144B8                     
 15558                           ; BSR set to: 0
 15559                           ;Port.c: 53: return (BytePtr)&PORTC;
 15560                           
 15561                           ; BSR set to: 0
 15562  0144B8  0E82               	movlw	130
 15563  0144BA  6F60               	movwf	?_GetPortPORT& (0+255),b
 15564  0144BC  0E0F               	movlw	15
 15565  0144BE  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15566                           
 15567                           ; BSR set to: 0
 15568  0144C0  0012               	return	
 15569  0144C2                     
 15570                           ; BSR set to: 0
 15571                           ;Port.c: 55: return (BytePtr)&PORTD;
 15572                           
 15573                           ; BSR set to: 0
 15574  0144C2  0E83               	movlw	131
 15575  0144C4  6F60               	movwf	?_GetPortPORT& (0+255),b
 15576  0144C6  0E0F               	movlw	15
 15577  0144C8  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15578                           
 15579                           ; BSR set to: 0
 15580  0144CA  0012               	return	
 15581  0144CC                     
 15582                           ; BSR set to: 0
 15583                           ;Port.c: 57: return (BytePtr)&PORTE;
 15584                           
 15585                           ; BSR set to: 0
 15586  0144CC  0E84               	movlw	132
 15587  0144CE  6F60               	movwf	?_GetPortPORT& (0+255),b
 15588  0144D0  0E0F               	movlw	15
 15589  0144D2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15590                           
 15591                           ; BSR set to: 0
 15592  0144D4  0012               	return	
 15593  0144D6                     
 15594                           ; BSR set to: 0
 15595                           ;Port.c: 59: return (BytePtr)&PORTF;
 15596                           
 15597                           ; BSR set to: 0
 15598  0144D6  0E85               	movlw	133
 15599  0144D8  6F60               	movwf	?_GetPortPORT& (0+255),b
 15600  0144DA  0E0F               	movlw	15
 15601  0144DC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15602                           
 15603                           ; BSR set to: 0
 15604  0144DE  0012               	return	
 15605  0144E0                     
 15606                           ; BSR set to: 0
 15607                           ;Port.c: 61: return (BytePtr)&PORTG;
 15608                           
 15609                           ; BSR set to: 0
 15610  0144E0  0E86               	movlw	134
 15611  0144E2  6F60               	movwf	?_GetPortPORT& (0+255),b
 15612  0144E4  0E0F               	movlw	15
 15613  0144E6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15614                           
 15615                           ; BSR set to: 0
 15616  0144E8  0012               	return	
 15617  0144EA                     
 15618                           ; BSR set to: 0
 15619                           ;Port.c: 63: return (void*)0;
 15620                           
 15621                           ; BSR set to: 0
 15622  0144EA  0E00               	movlw	0
 15623  0144EC  6F60               	movwf	?_GetPortPORT& (0+255),b
 15624  0144EE  0E00               	movlw	0
 15625  0144F0  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15626                           
 15627                           ; BSR set to: 0
 15628                           ;Port.c: 64: }
 15629                           
 15630                           ; BSR set to: 0
 15631  0144F2  0012               	return	
 15632  0144F4                     l350:
 15633                           
 15634                           ; BSR set to: 0
 15635  0144F4  0100               	movlb	0	; () banked
 15636  0144F6  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 15637                           
 15638                           ; Switch size 1, requested type "space"
 15639                           ; Number of cases is 7, Range of values is 0 to 6
 15640                           ; switch strategies available:
 15641                           ; Name         Instructions Cycles
 15642                           ; simple_byte           22    12 (average)
 15643                           ;	Chosen strategy is simple_byte
 15644  0144F8  0A00               	xorlw	0	; case 0
 15645  0144FA  B4D8               	btfsc	status,2,c
 15646  0144FC  D7D2               	goto	l351
 15647  0144FE  0A01               	xorlw	1	; case 1
 15648  014500  B4D8               	btfsc	status,2,c
 15649  014502  D7D5               	goto	l353
 15650  014504  0A03               	xorlw	3	; case 2
 15651  014506  B4D8               	btfsc	status,2,c
 15652  014508  D7D7               	goto	l354
 15653  01450A  0A01               	xorlw	1	; case 3
 15654  01450C  B4D8               	btfsc	status,2,c
 15655  01450E  D7D9               	goto	l355
 15656  014510  0A07               	xorlw	7	; case 4
 15657  014512  B4D8               	btfsc	status,2,c
 15658  014514  D7DB               	goto	l356
 15659  014516  0A01               	xorlw	1	; case 5
 15660  014518  B4D8               	btfsc	status,2,c
 15661  01451A  D7DD               	goto	l357
 15662  01451C  0A03               	xorlw	3	; case 6
 15663  01451E  B4D8               	btfsc	status,2,c
 15664  014520  D7DF               	goto	l358
 15665  014522  D7E3               	goto	l359
 15666  014524                     __end_of_GetPortPORT:
 15667                           	opt stack 0
 15668                           tosu	equ	0xFFF
 15669                           tosh	equ	0xFFE
 15670                           tosl	equ	0xFFD
 15671                           pclath	equ	0xFFA
 15672                           tblptru	equ	0xFF8
 15673                           tblptrh	equ	0xFF7
 15674                           tblptrl	equ	0xFF6
 15675                           tablat	equ	0xFF5
 15676                           prodh	equ	0xFF4
 15677                           prodl	equ	0xFF3
 15678                           postinc0	equ	0xFEE
 15679                           wreg	equ	0xFE8
 15680                           postdec1	equ	0xFE5
 15681                           fsr1h	equ	0xFE2
 15682                           fsr1l	equ	0xFE1
 15683                           indf2	equ	0xFDF
 15684                           postinc2	equ	0xFDE
 15685                           postdec2	equ	0xFDD
 15686                           fsr2h	equ	0xFDA
 15687                           fsr2l	equ	0xFD9
 15688                           status	equ	0xFD8
 15689                           
 15690 ;; *************** function _LED_Init *****************
 15691 ;; Defined at:
 15692 ;;		line 15 in file "Library/LED.c"
 15693 ;; Parameters:    Size  Location     Type
 15694 ;;  pLED            1    wreg     enum E6739
 15695 ;; Auto vars:     Size  Location     Type
 15696 ;;  pLED            1   45[BANK0 ] enum E6739
 15697 ;; Return value:  Size  Location     Type
 15698 ;;                  1    wreg      void 
 15699 ;; Registers used:
 15700 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15701 ;; Tracked objects:
 15702 ;;		On entry : 0/0
 15703 ;;		On exit  : 0/0
 15704 ;;		Unchanged: 0/0
 15705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15709 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15710 ;;Total ram usage:        1 bytes
 15711 ;; Hardware stack levels used:    1
 15712 ;; Hardware stack levels required when called:   12
 15713 ;; This function calls:
 15714 ;;		_LED_Set
 15715 ;;		_Port_SetPinType
 15716 ;; This function is called by:
 15717 ;;		_MXK_Init
 15718 ;;		_main
 15719 ;; This function uses a non-reentrant model
 15720 ;;
 15721                           
 15722                           	psect	text55
 15723  014EEE                     __ptext55:
 15724                           	opt stack 0
 15725  014EEE                     _LED_Init:
 15726                           	opt stack 17
 15727                           
 15728                           ; BSR set to: 0
 15729                           ;incstack = 0
 15730                           ;LED_Init@pLED stored from wreg
 15731  014EEE  0100               	movlb	0	; () banked
 15732  014EF0  6F8D               	movwf	LED_Init@pLED& (0+255),b
 15733                           
 15734                           ;LED.c: 17: switch (pLED)
 15735  014EF2  D018               	goto	l220
 15736  014EF4                     
 15737                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 15738  014EF4  0E9F               	movlw	low _PortC
 15739  014EF6  0100               	movlb	0	; () banked
 15740  014EF8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15741  014EFA  0E01               	movlw	high _PortC
 15742  014EFC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15743  014EFE  0E00               	movlw	0
 15744  014F00  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15745  014F02  0E03               	movlw	3
 15746  014F04  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15747  014F06  ECF7  F092         	call	_Port_SetPinType	;wreg free
 15748                           
 15749                           ;LED.c: 21: break;
 15750  014F0A  D014               	goto	l222
 15751  014F0C                     
 15752                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 15753  014F0C  0E9F               	movlw	low _PortC
 15754  014F0E  0100               	movlb	0	; () banked
 15755  014F10  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15756  014F12  0E01               	movlw	high _PortC
 15757  014F14  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15758  014F16  0E01               	movlw	1
 15759  014F18  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15760  014F1A  0E03               	movlw	3
 15761  014F1C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15762  014F1E  ECF7  F092         	call	_Port_SetPinType	;wreg free
 15763                           
 15764                           ;LED.c: 25: }
 15765                           
 15766                           ;LED.c: 24: break;
 15767  014F22  D008               	goto	l222
 15768  014F24                     l220:
 15769  014F24  0100               	movlb	0	; () banked
 15770  014F26  518D               	movf	LED_Init@pLED& (0+255),w,b
 15771                           
 15772                           ; Switch size 1, requested type "space"
 15773                           ; Number of cases is 2, Range of values is 0 to 1
 15774                           ; switch strategies available:
 15775                           ; Name         Instructions Cycles
 15776                           ; simple_byte            7     4 (average)
 15777                           ;	Chosen strategy is simple_byte
 15778  014F28  0A00               	xorlw	0	; case 0
 15779  014F2A  B4D8               	btfsc	status,2,c
 15780  014F2C  D7E3               	goto	l221
 15781  014F2E  0A01               	xorlw	1	; case 1
 15782  014F30  B4D8               	btfsc	status,2,c
 15783  014F32  D7EC               	goto	l223
 15784  014F34                     l222:
 15785                           
 15786                           ;LED.c: 26: LED_Set(pLED, 0);
 15787                           
 15788                           ; BSR set to: 0
 15789  014F34  0E00               	movlw	0
 15790  014F36  0100               	movlb	0	; () banked
 15791  014F38  6F74               	movwf	LED_Set@pValue& (0+255),b
 15792  014F3A  518D               	movf	LED_Init@pLED& (0+255),w,b
 15793  014F3C  EC2B  F0A9         	call	_LED_Set
 15794  014F40  0012               	return		;funcret
 15795  014F42                     __end_of_LED_Init:
 15796                           	opt stack 0
 15797                           tosu	equ	0xFFF
 15798                           tosh	equ	0xFFE
 15799                           tosl	equ	0xFFD
 15800                           pclath	equ	0xFFA
 15801                           tblptru	equ	0xFF8
 15802                           tblptrh	equ	0xFF7
 15803                           tblptrl	equ	0xFF6
 15804                           tablat	equ	0xFF5
 15805                           prodh	equ	0xFF4
 15806                           prodl	equ	0xFF3
 15807                           postinc0	equ	0xFEE
 15808                           wreg	equ	0xFE8
 15809                           postdec1	equ	0xFE5
 15810                           fsr1h	equ	0xFE2
 15811                           fsr1l	equ	0xFE1
 15812                           indf2	equ	0xFDF
 15813                           postinc2	equ	0xFDE
 15814                           postdec2	equ	0xFDD
 15815                           fsr2h	equ	0xFDA
 15816                           fsr2l	equ	0xFD9
 15817                           status	equ	0xFD8
 15818                           
 15819 ;; *************** function _LED_Set *****************
 15820 ;; Defined at:
 15821 ;;		line 33 in file "Library/LED.c"
 15822 ;; Parameters:    Size  Location     Type
 15823 ;;  pLED            1    wreg     enum E6739
 15824 ;;  pValue          1   20[BANK0 ] unsigned char 
 15825 ;; Auto vars:     Size  Location     Type
 15826 ;;  pLED            1   21[BANK0 ] enum E6739
 15827 ;; Return value:  Size  Location     Type
 15828 ;;                  1    wreg      void 
 15829 ;; Registers used:
 15830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15831 ;; Tracked objects:
 15832 ;;		On entry : 0/0
 15833 ;;		On exit  : 0/0
 15834 ;;		Unchanged: 0/0
 15835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15836 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15840 ;;Total ram usage:        2 bytes
 15841 ;; Hardware stack levels used:    1
 15842 ;; Hardware stack levels required when called:   11
 15843 ;; This function calls:
 15844 ;;		_Port_SetPin
 15845 ;; This function is called by:
 15846 ;;		_LED_Init
 15847 ;;		_SYSTEM_Initialize
 15848 ;; This function uses a non-reentrant model
 15849 ;;
 15850                           
 15851                           	psect	text56
 15852  015256                     __ptext56:
 15853                           	opt stack 0
 15854  015256                     _LED_Set:
 15855                           	opt stack 17
 15856                           
 15857                           ;incstack = 0
 15858                           ;LED_Set@pLED stored from wreg
 15859  015256  0100               	movlb	0	; () banked
 15860  015258  6F75               	movwf	LED_Set@pLED& (0+255),b
 15861                           
 15862                           ;LED.c: 35: switch (pLED)
 15863  01525A  D018               	goto	l227
 15864  01525C                     
 15865                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 15866  01525C  0E9F               	movlw	low _PortC
 15867  01525E  0100               	movlb	0	; () banked
 15868  015260  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15869  015262  0E01               	movlw	high _PortC
 15870  015264  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15871  015266  0E00               	movlw	0
 15872  015268  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15873  01526A  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 15874  01526E  EC5D  F09E         	call	_Port_SetPin	;wreg free
 15875                           
 15876                           ;LED.c: 39: break;
 15877  015272  0012               	return	
 15878  015274                     
 15879                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 15880  015274  0E9F               	movlw	low _PortC
 15881  015276  0100               	movlb	0	; () banked
 15882  015278  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15883  01527A  0E01               	movlw	high _PortC
 15884  01527C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15885  01527E  0E01               	movlw	1
 15886  015280  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15887  015282  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 15888  015286  EC5D  F09E         	call	_Port_SetPin	;wreg free
 15889                           
 15890                           ;LED.c: 43: }
 15891                           
 15892                           ;LED.c: 42: break;
 15893  01528A  0012               	return	
 15894  01528C                     l227:
 15895  01528C  0100               	movlb	0	; () banked
 15896  01528E  5175               	movf	LED_Set@pLED& (0+255),w,b
 15897                           
 15898                           ; Switch size 1, requested type "space"
 15899                           ; Number of cases is 2, Range of values is 0 to 1
 15900                           ; switch strategies available:
 15901                           ; Name         Instructions Cycles
 15902                           ; simple_byte            7     4 (average)
 15903                           ;	Chosen strategy is simple_byte
 15904  015290  0A00               	xorlw	0	; case 0
 15905  015292  B4D8               	btfsc	status,2,c
 15906  015294  D7E3               	goto	l228
 15907  015296  0A01               	xorlw	1	; case 1
 15908  015298  A4D8               	btfss	status,2,c
 15909  01529A  0012               	return	
 15910  01529C  D7EB               	goto	l230
 15911  01529E                     __end_of_LED_Set:
 15912                           	opt stack 0
 15913                           tosu	equ	0xFFF
 15914                           tosh	equ	0xFFE
 15915                           tosl	equ	0xFFD
 15916                           pclath	equ	0xFFA
 15917                           tblptru	equ	0xFF8
 15918                           tblptrh	equ	0xFF7
 15919                           tblptrl	equ	0xFF6
 15920                           tablat	equ	0xFF5
 15921                           prodh	equ	0xFF4
 15922                           prodl	equ	0xFF3
 15923                           postinc0	equ	0xFEE
 15924                           wreg	equ	0xFE8
 15925                           postdec1	equ	0xFE5
 15926                           fsr1h	equ	0xFE2
 15927                           fsr1l	equ	0xFE1
 15928                           indf2	equ	0xFDF
 15929                           postinc2	equ	0xFDE
 15930                           postdec2	equ	0xFDD
 15931                           fsr2h	equ	0xFDA
 15932                           fsr2l	equ	0xFD9
 15933                           status	equ	0xFD8
 15934                           
 15935 ;; *************** function _MXK_Dequeue *****************
 15936 ;; Defined at:
 15937 ;;		line 153 in file "Library/MXK.c"
 15938 ;; Parameters:    Size  Location     Type
 15939 ;;		None
 15940 ;; Auto vars:     Size  Location     Type
 15941 ;;		None
 15942 ;; Return value:  Size  Location     Type
 15943 ;;                  1    wreg      void 
 15944 ;; Registers used:
 15945 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15946 ;; Tracked objects:
 15947 ;;		On entry : 0/0
 15948 ;;		On exit  : 0/0
 15949 ;;		Unchanged: 0/0
 15950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15955 ;;Total ram usage:        0 bytes
 15956 ;; Hardware stack levels used:    1
 15957 ;; Hardware stack levels required when called:   12
 15958 ;; This function calls:
 15959 ;;		Absolute function
 15960 ;;		_Motor_Step
 15961 ;; This function is called by:
 15962 ;;		_main
 15963 ;; This function uses a non-reentrant model
 15964 ;;
 15965                           
 15966                           	psect	text57
 15967  0156C2                     __ptext57:
 15968                           	opt stack 0
 15969  0156C2                     _MXK_Dequeue:
 15970                           	opt stack 18
 15971                           
 15972                           ;MXK.c: 155: if (lQueue)
 15973                           
 15974                           ;incstack = 0
 15975  0156C2  5029               	movf	_lQueue,w,c	;volatile
 15976  0156C4  102A               	iorwf	_lQueue+1,w,c	;volatile
 15977  0156C6  102B               	iorwf	_lQueue+2,w,c	;volatile
 15978  0156C8  B4D8               	btfsc	status,2,c
 15979  0156CA  D00C               	goto	u14889
 15980                           
 15981                           ;MXK.c: 156: lQueue();
 15982  0156CC  D801               	call	u14888
 15983  0156CE  D00A               	goto	u14889
 15984  0156D0                     u14888:
 15985  0156D0  0005               	push	
 15986  0156D2  6EFA               	movwf	pclath,c
 15987  0156D4  5029               	movf	_lQueue,w,c	;volatile
 15988  0156D6  6EFD               	movwf	tosl,c
 15989  0156D8  502A               	movf	_lQueue+1,w,c	;volatile
 15990  0156DA  6EFE               	movwf	tosh,c
 15991  0156DC  502B               	movf	_lQueue+2,w,c	;volatile
 15992  0156DE  6EFF               	movwf	tosu,c
 15993  0156E0  50FA               	movf	pclath,w,c
 15994  0156E2  0012               	return		;indir
 15995  0156E4                     u14889:
 15996                           
 15997                           ;MXK.c: 157: lQueue = 0;
 15998  0156E4  0E00               	movlw	0
 15999  0156E6  6E29               	movwf	_lQueue,c	;volatile
 16000  0156E8  0E00               	movlw	0
 16001  0156EA  6E2A               	movwf	_lQueue+1,c	;volatile
 16002  0156EC  0E00               	movlw	0
 16003  0156EE  6E2B               	movwf	_lQueue+2,c	;volatile
 16004  0156F0  0012               	return		;funcret
 16005  0156F2                     __end_of_MXK_Dequeue:
 16006                           	opt stack 0
 16007                           tosu	equ	0xFFF
 16008                           tosh	equ	0xFFE
 16009                           tosl	equ	0xFFD
 16010                           pclath	equ	0xFFA
 16011                           tblptru	equ	0xFF8
 16012                           tblptrh	equ	0xFF7
 16013                           tblptrl	equ	0xFF6
 16014                           tablat	equ	0xFF5
 16015                           prodh	equ	0xFF4
 16016                           prodl	equ	0xFF3
 16017                           postinc0	equ	0xFEE
 16018                           wreg	equ	0xFE8
 16019                           postdec1	equ	0xFE5
 16020                           fsr1h	equ	0xFE2
 16021                           fsr1l	equ	0xFE1
 16022                           indf2	equ	0xFDF
 16023                           postinc2	equ	0xFDE
 16024                           postdec2	equ	0xFDD
 16025                           fsr2h	equ	0xFDA
 16026                           fsr2l	equ	0xFD9
 16027                           status	equ	0xFD8
 16028                           
 16029 ;; *************** function _Motor_Step *****************
 16030 ;; Defined at:
 16031 ;;		line 75 in file "Library/Motor.c"
 16032 ;; Parameters:    Size  Location     Type
 16033 ;;		None
 16034 ;; Auto vars:     Size  Location     Type
 16035 ;;		None
 16036 ;; Return value:  Size  Location     Type
 16037 ;;                  1    wreg      void 
 16038 ;; Registers used:
 16039 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16040 ;; Tracked objects:
 16041 ;;		On entry : 0/0
 16042 ;;		On exit  : 0/0
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16049 ;;Total ram usage:        2 bytes
 16050 ;; Hardware stack levels used:    1
 16051 ;; Hardware stack levels required when called:   11
 16052 ;; This function calls:
 16053 ;;		_MXK_Queue
 16054 ;;		_MXK_Release
 16055 ;;		_MXK_SwitchTo
 16056 ;;		_Port_SetPin
 16057 ;;		_Timer0_Restart
 16058 ;;		_Timer0_Stop
 16059 ;; This function is called by:
 16060 ;;		_Motor_Init
 16061 ;;		_Timer0_ISR
 16062 ;;		_MXK_Dequeue
 16063 ;; This function uses a non-reentrant model
 16064 ;;
 16065                           
 16066                           	psect	text58
 16067  01372C                     __ptext58:
 16068                           	opt stack 0
 16069  01372C                     _Motor_Step:
 16070                           	opt stack 0
 16071                           
 16072                           ;Skip over the trampoline to the duplicate function for level 2
 16073  01372C  B251               	btfsc	btemp,1,c
 16074  01372E  EF9D  F09C         	goto	i2_Motor_Step
 16075  013732                     _Motor_Step$intlevel0:
 16076                           	opt stack 18
 16077                           
 16078                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 16079                           
 16080                           ;incstack = 0
 16081  013732  0100               	movlb	0	; () banked
 16082  013734  EE20 F004          	lfsr	2,4
 16083  013738  51FD               	movf	_lMotor& (0+255),w,b
 16084  01373A  26D9               	addwf	fsr2l,f,c
 16085  01373C  51FE               	movf	(_lMotor+1)& (0+255),w,b
 16086  01373E  22DA               	addwfc	fsr2h,f,c
 16087  013740  50DF               	movf	indf2,w,c
 16088  013742  EC55  F0AA         	call	_MXK_SwitchTo
 16089  013746  0900               	iorlw	0
 16090  013748  B4D8               	btfsc	status,2,c
 16091  01374A  D06E               	goto	l1627
 16092                           
 16093                           ;Motor.c: 78: {
 16094                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 16095  01374C  C0FD  FFD9         	movff	_lMotor,fsr2l
 16096  013750  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16097  013754  50DE               	movf	postinc2,w,c
 16098  013756  10DE               	iorwf	postinc2,w,c
 16099  013758  B4D8               	btfsc	status,2,c
 16100  01375A  D061               	goto	l1628
 16101                           
 16102                           ;Motor.c: 80: {
 16103                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 16104  01375C  C0FD  FFD9         	movff	_lMotor,fsr2l
 16105  013760  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16106  013764  0E01               	movlw	1
 16107  013766  BEDB               	btfsc	plusw2,7,c
 16108  013768  D023               	goto	l1629
 16109  01376A  0E01               	movlw	1
 16110  01376C  50DB               	movf	plusw2,w,c
 16111  01376E  E103               	bnz	u12850
 16112  013770  04DE               	decf	postinc2,w,c
 16113  013772  A0D8               	btfss	status,0,c
 16114  013774  D01D               	goto	l1629
 16115  013776                     u12850:
 16116                           
 16117                           ;Motor.c: 83: {
 16118                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 16119  013776  C0FD  FFD9         	movff	_lMotor,fsr2l
 16120  01377A  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16121  01377E  28DE               	incf	postinc2,w,c
 16122  013780  E104               	bnz	u12860
 16123  013782  0E7F               	movlw	127
 16124  013784  18DE               	xorwf	postinc2,w,c
 16125  013786  B4D8               	btfsc	status,2,c
 16126  013788  D007               	goto	l1630
 16127  01378A                     u12860:
 16128                           
 16129                           ;Motor.c: 85: lMotor->mDelta --;
 16130  01378A  C0FD  FFD9         	movff	_lMotor,fsr2l
 16131  01378E  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16132  013792  06DE               	decf	postinc2,f,c
 16133  013794  0E00               	movlw	0
 16134  013796  5ADD               	subwfb	postdec2,f,c
 16135  013798                     l1630:
 16136                           
 16137                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 16138  013798  0E81               	movlw	low _PortE
 16139  01379A  0100               	movlb	0	; () banked
 16140  01379C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16141  01379E  0E01               	movlw	high _PortE
 16142  0137A0  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16143  0137A2  0E00               	movlw	0
 16144  0137A4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16145  0137A6  0E01               	movlw	1
 16146  0137A8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16147  0137AA  EC5D  F09E         	call	_Port_SetPin	;wreg free
 16148                           
 16149                           ;Motor.c: 88: }
 16150  0137AE  D01C               	goto	l1631
 16151  0137B0                     l1629:
 16152                           
 16153                           ;Motor.c: 89: else
 16154                           ;Motor.c: 90: {
 16155                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 16156  0137B0  C0FD  FFD9         	movff	_lMotor,fsr2l
 16157  0137B4  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16158  0137B8  04DE               	decf	postinc2,w,c
 16159  0137BA  E104               	bnz	u12870
 16160  0137BC  0E80               	movlw	128
 16161  0137BE  18DE               	xorwf	postinc2,w,c
 16162  0137C0  B4D8               	btfsc	status,2,c
 16163  0137C2  D007               	goto	l1632
 16164  0137C4                     u12870:
 16165                           
 16166                           ;Motor.c: 92: lMotor->mDelta ++;
 16167  0137C4  C0FD  FFD9         	movff	_lMotor,fsr2l
 16168  0137C8  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16169  0137CC  2ADE               	incf	postinc2,f,c
 16170  0137CE  0E00               	movlw	0
 16171  0137D0  22DD               	addwfc	postdec2,f,c
 16172  0137D2                     l1632:
 16173                           
 16174                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 16175  0137D2  0E81               	movlw	low _PortE
 16176  0137D4  0100               	movlb	0	; () banked
 16177  0137D6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16178  0137D8  0E01               	movlw	high _PortE
 16179  0137DA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16180  0137DC  0E00               	movlw	0
 16181  0137DE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16182  0137E0  0E00               	movlw	0
 16183  0137E2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16184  0137E4  EC5D  F09E         	call	_Port_SetPin	;wreg free
 16185  0137E8                     l1631:
 16186                           
 16187                           ;Motor.c: 95: }
 16188                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 16189  0137E8  0E81               	movlw	low _PortE
 16190  0137EA  0100               	movlb	0	; () banked
 16191  0137EC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16192  0137EE  0E01               	movlw	high _PortE
 16193  0137F0  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16194  0137F2  0E01               	movlw	1
 16195  0137F4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16196  0137F6  0E01               	movlw	1
 16197  0137F8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16198  0137FA  EC5D  F09E         	call	_Port_SetPin	;wreg free
 16199                           
 16200                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 16201  0137FE  0E81               	movlw	low _PortE
 16202  013800  0100               	movlb	0	; () banked
 16203  013802  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16204  013804  0E01               	movlw	high _PortE
 16205  013806  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16206  013808  0E01               	movlw	1
 16207  01380A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16208  01380C  0E00               	movlw	0
 16209  01380E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16210  013810  EC5D  F09E         	call	_Port_SetPin	;wreg free
 16211                           
 16212                           ;Motor.c: 101: MXK_Release();
 16213  013814  EC25  F0AD         	call	_MXK_Release	;wreg free
 16214                           
 16215                           ;Motor.c: 102: Timer0_Restart();
 16216  013818  ECA2  F0AD         	call	_Timer0_Restart	;wreg free
 16217                           
 16218                           ;Motor.c: 103: return;
 16219  01381C  0012               	return	
 16220  01381E                     l1628:
 16221                           
 16222                           ;Motor.c: 104: }
 16223                           ;Motor.c: 105: MXK_Release();
 16224  01381E  EC25  F0AD         	call	_MXK_Release	;wreg free
 16225                           
 16226                           ;Motor.c: 106: Timer0_Stop();
 16227  013822  ECC5  F0AD         	call	_Timer0_Stop	;wreg free
 16228                           
 16229                           ;Motor.c: 107: return;
 16230  013826  0012               	return	
 16231  013828                     l1627:
 16232                           
 16233                           ;Motor.c: 108: }
 16234                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 16235  013828  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 16236  01382C  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 16237  013830  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 16238  013834  EC94  F0AD         	call	_MXK_Queue	;wreg free
 16239  013838  0012               	return		;funcret
 16240  01383A                     __end_of_Motor_Step:
 16241                           	opt stack 0
 16242                           tosu	equ	0xFFF
 16243                           tosh	equ	0xFFE
 16244                           tosl	equ	0xFFD
 16245                           pclath	equ	0xFFA
 16246                           tblptru	equ	0xFF8
 16247                           tblptrh	equ	0xFF7
 16248                           tblptrl	equ	0xFF6
 16249                           tablat	equ	0xFF5
 16250                           prodh	equ	0xFF4
 16251                           prodl	equ	0xFF3
 16252                           postinc0	equ	0xFEE
 16253                           wreg	equ	0xFE8
 16254                           postdec1	equ	0xFE5
 16255                           fsr1h	equ	0xFE2
 16256                           fsr1l	equ	0xFE1
 16257                           indf2	equ	0xFDF
 16258                           postinc2	equ	0xFDE
 16259                           postdec2	equ	0xFDD
 16260                           plusw2	equ	0xFDB
 16261                           fsr2h	equ	0xFDA
 16262                           fsr2l	equ	0xFD9
 16263                           status	equ	0xFD8
 16264                           
 16265 ;; *************** function _Timer0_Stop *****************
 16266 ;; Defined at:
 16267 ;;		line 89 in file "Library/Timer0.c"
 16268 ;; Parameters:    Size  Location     Type
 16269 ;;		None
 16270 ;; Auto vars:     Size  Location     Type
 16271 ;;		None
 16272 ;; Return value:  Size  Location     Type
 16273 ;;                  1    wreg      void 
 16274 ;; Registers used:
 16275 ;;		None
 16276 ;; Tracked objects:
 16277 ;;		On entry : 0/0
 16278 ;;		On exit  : 0/0
 16279 ;;		Unchanged: 0/0
 16280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16285 ;;Total ram usage:        0 bytes
 16286 ;; Hardware stack levels used:    1
 16287 ;; Hardware stack levels required when called:    7
 16288 ;; This function calls:
 16289 ;;		Nothing
 16290 ;; This function is called by:
 16291 ;;		_Motor_Step
 16292 ;; This function uses a non-reentrant model
 16293 ;;
 16294                           
 16295                           	psect	text59
 16296  015B8A                     __ptext59:
 16297                           	opt stack 0
 16298  015B8A                     _Timer0_Stop:
 16299                           	opt stack 21
 16300                           
 16301                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 16302                           
 16303                           ;incstack = 0
 16304  015B8A  9AF2               	bcf	intcon,5,c	;volatile
 16305                           
 16306                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 16307  015B8C  94F2               	bcf	intcon,2,c	;volatile
 16308  015B8E  0012               	return		;funcret
 16309  015B90                     __end_of_Timer0_Stop:
 16310                           	opt stack 0
 16311                           tosu	equ	0xFFF
 16312                           tosh	equ	0xFFE
 16313                           tosl	equ	0xFFD
 16314                           pclath	equ	0xFFA
 16315                           tblptru	equ	0xFF8
 16316                           tblptrh	equ	0xFF7
 16317                           tblptrl	equ	0xFF6
 16318                           tablat	equ	0xFF5
 16319                           prodh	equ	0xFF4
 16320                           prodl	equ	0xFF3
 16321                           intcon	equ	0xFF2
 16322                           postinc0	equ	0xFEE
 16323                           wreg	equ	0xFE8
 16324                           postdec1	equ	0xFE5
 16325                           fsr1h	equ	0xFE2
 16326                           fsr1l	equ	0xFE1
 16327                           indf2	equ	0xFDF
 16328                           postinc2	equ	0xFDE
 16329                           postdec2	equ	0xFDD
 16330                           plusw2	equ	0xFDB
 16331                           fsr2h	equ	0xFDA
 16332                           fsr2l	equ	0xFD9
 16333                           status	equ	0xFD8
 16334                           
 16335 ;; *************** function _Timer0_Restart *****************
 16336 ;; Defined at:
 16337 ;;		line 83 in file "Library/Timer0.c"
 16338 ;; Parameters:    Size  Location     Type
 16339 ;;		None
 16340 ;; Auto vars:     Size  Location     Type
 16341 ;;		None
 16342 ;; Return value:  Size  Location     Type
 16343 ;;                  1    wreg      void 
 16344 ;; Registers used:
 16345 ;;		None
 16346 ;; Tracked objects:
 16347 ;;		On entry : 0/0
 16348 ;;		On exit  : 0/0
 16349 ;;		Unchanged: 0/0
 16350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16355 ;;Total ram usage:        0 bytes
 16356 ;; Hardware stack levels used:    1
 16357 ;; Hardware stack levels required when called:    7
 16358 ;; This function calls:
 16359 ;;		Nothing
 16360 ;; This function is called by:
 16361 ;;		_Motor_Step
 16362 ;; This function uses a non-reentrant model
 16363 ;;
 16364                           
 16365                           	psect	text60
 16366  015B44                     __ptext60:
 16367                           	opt stack 0
 16368  015B44                     _Timer0_Restart:
 16369                           	opt stack 21
 16370                           
 16371                           ;Timer0.c: 85: TMR0 = COUNTER;
 16372                           
 16373                           ;incstack = 0
 16374  015B44  C038  FFD6         	movff	_COUNTER,4054	;volatile
 16375  015B48  C039  FFD7         	movff	_COUNTER+1,4055	;volatile
 16376                           
 16377                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 16378  015B4C  8AF2               	bsf	intcon,5,c	;volatile
 16379  015B4E  0012               	return		;funcret
 16380  015B50                     __end_of_Timer0_Restart:
 16381                           	opt stack 0
 16382                           tosu	equ	0xFFF
 16383                           tosh	equ	0xFFE
 16384                           tosl	equ	0xFFD
 16385                           pclath	equ	0xFFA
 16386                           tblptru	equ	0xFF8
 16387                           tblptrh	equ	0xFF7
 16388                           tblptrl	equ	0xFF6
 16389                           tablat	equ	0xFF5
 16390                           prodh	equ	0xFF4
 16391                           prodl	equ	0xFF3
 16392                           intcon	equ	0xFF2
 16393                           postinc0	equ	0xFEE
 16394                           wreg	equ	0xFE8
 16395                           postdec1	equ	0xFE5
 16396                           fsr1h	equ	0xFE2
 16397                           fsr1l	equ	0xFE1
 16398                           indf2	equ	0xFDF
 16399                           postinc2	equ	0xFDE
 16400                           postdec2	equ	0xFDD
 16401                           plusw2	equ	0xFDB
 16402                           fsr2h	equ	0xFDA
 16403                           fsr2l	equ	0xFD9
 16404                           status	equ	0xFD8
 16405                           
 16406 ;; *************** function _MXK_SwitchTo *****************
 16407 ;; Defined at:
 16408 ;;		line 105 in file "Library/MXK.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;  pModule         1    wreg     enum E6927
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  pModule         1    7[BANK0 ] enum E6927
 16413 ;;  CUR             1    6[BANK0 ] unsigned char 
 16414 ;; Return value:  Size  Location     Type
 16415 ;;                  1    wreg      unsigned char 
 16416 ;; Registers used:
 16417 ;;		wreg, status,2, status,0, cstack
 16418 ;; Tracked objects:
 16419 ;;		On entry : 0/0
 16420 ;;		On exit  : 0/0
 16421 ;;		Unchanged: 0/0
 16422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16424 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16426 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16427 ;;Total ram usage:        2 bytes
 16428 ;; Hardware stack levels used:    1
 16429 ;; Hardware stack levels required when called:    8
 16430 ;; This function calls:
 16431 ;;		_delay_us
 16432 ;; This function is called by:
 16433 ;;		_Motor_Step
 16434 ;; This function uses a non-reentrant model
 16435 ;;
 16436                           
 16437                           	psect	text61
 16438  0154AA                     __ptext61:
 16439                           	opt stack 0
 16440  0154AA                     _MXK_SwitchTo:
 16441                           	opt stack 20
 16442                           
 16443                           ;incstack = 0
 16444                           ;MXK_SwitchTo@pModule stored from wreg
 16445  0154AA  0100               	movlb	0	; () banked
 16446  0154AC  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 16447                           
 16448                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 16449  0154AE  5086               	movf	3974,w,c	;volatile
 16450  0154B0  0B0F               	andlw	15
 16451  0154B2  0100               	movlb	0	; () banked
 16452  0154B4  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 16456  0154B6  504D               	movf	_Bus_State,w,c
 16457  0154B8  A4D8               	btfss	status,2,c
 16458  0154BA  D002               	goto	l1730
 16459                           
 16460                           ; BSR set to: 0
 16461                           ;MXK.c: 110: return 0;
 16462  0154BC  0E00               	movlw	0
 16463                           
 16464                           ; BSR set to: 0
 16465  0154BE  0012               	return	
 16466  0154C0                     l1730:
 16467                           
 16468                           ; BSR set to: 0
 16469                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 16470                           
 16471                           ; BSR set to: 0
 16472  0154C0  0E00               	movlw	0
 16473  0154C2  6E4D               	movwf	_Bus_State,c
 16474                           
 16475                           ; BSR set to: 0
 16476                           ;MXK.c: 114: if (CUR != pModule)
 16477  0154C4  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 16478  0154C6  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 16479  0154C8  B4D8               	btfsc	status,2,c
 16480  0154CA  D00A               	goto	l1732
 16481                           
 16482                           ; BSR set to: 0
 16483                           ;MXK.c: 115: {
 16484                           ;MXK.c: 116: PORTG &= ~(0xF);
 16485  0154CC  0EF0               	movlw	240
 16486  0154CE  1686               	andwf	3974,f,c	;volatile
 16487                           
 16488                           ;MXK.c: 117: PORTG |= pModule;
 16489  0154D0  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 16490  0154D2  1286               	iorwf	3974,f,c	;volatile
 16491                           
 16492                           ; BSR set to: 0
 16493                           ;MXK.c: 120: delay_us(10);
 16494  0154D4  0E00               	movlw	0
 16495  0154D6  6F61               	movwf	(delay_us@us+1)& (0+255),b
 16496  0154D8  0E0A               	movlw	10
 16497  0154DA  6F60               	movwf	delay_us@us& (0+255),b
 16498  0154DC  EC73  F0A9         	call	_delay_us	;wreg free
 16499  0154E0                     l1732:
 16500                           
 16501                           ;MXK.c: 121: }
 16502                           ;MXK.c: 122: return 1;
 16503  0154E0  0E01               	movlw	1
 16504  0154E2  0012               	return	
 16505  0154E4                     __end_of_MXK_SwitchTo:
 16506                           	opt stack 0
 16507                           tosu	equ	0xFFF
 16508                           tosh	equ	0xFFE
 16509                           tosl	equ	0xFFD
 16510                           pclath	equ	0xFFA
 16511                           tblptru	equ	0xFF8
 16512                           tblptrh	equ	0xFF7
 16513                           tblptrl	equ	0xFF6
 16514                           tablat	equ	0xFF5
 16515                           prodh	equ	0xFF4
 16516                           prodl	equ	0xFF3
 16517                           intcon	equ	0xFF2
 16518                           postinc0	equ	0xFEE
 16519                           wreg	equ	0xFE8
 16520                           postdec1	equ	0xFE5
 16521                           fsr1h	equ	0xFE2
 16522                           fsr1l	equ	0xFE1
 16523                           indf2	equ	0xFDF
 16524                           postinc2	equ	0xFDE
 16525                           postdec2	equ	0xFDD
 16526                           plusw2	equ	0xFDB
 16527                           fsr2h	equ	0xFDA
 16528                           fsr2l	equ	0xFD9
 16529                           status	equ	0xFD8
 16530                           
 16531 ;; *************** function _MXK_Release *****************
 16532 ;; Defined at:
 16533 ;;		line 130 in file "Library/MXK.c"
 16534 ;; Parameters:    Size  Location     Type
 16535 ;;		None
 16536 ;; Auto vars:     Size  Location     Type
 16537 ;;		None
 16538 ;; Return value:  Size  Location     Type
 16539 ;;                  1    wreg      unsigned char 
 16540 ;; Registers used:
 16541 ;;		wreg, status,2, status,0
 16542 ;; Tracked objects:
 16543 ;;		On entry : 0/0
 16544 ;;		On exit  : 0/0
 16545 ;;		Unchanged: 0/0
 16546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16551 ;;Total ram usage:        0 bytes
 16552 ;; Hardware stack levels used:    1
 16553 ;; Hardware stack levels required when called:    7
 16554 ;; This function calls:
 16555 ;;		Nothing
 16556 ;; This function is called by:
 16557 ;;		_Motor_Step
 16558 ;;		_main
 16559 ;; This function uses a non-reentrant model
 16560 ;;
 16561                           
 16562                           	psect	text62
 16563  015A4A                     __ptext62:
 16564                           	opt stack 0
 16565  015A4A                     _MXK_Release:
 16566                           	opt stack 23
 16567                           
 16568                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 16569                           
 16570                           ;incstack = 0
 16571  015A4A  0E01               	movlw	1
 16572  015A4C  6E4D               	movwf	_Bus_State,c
 16573                           
 16574                           ;MXK.c: 134: if (lQueue != 0)
 16575  015A4E  5029               	movf	_lQueue,w,c	;volatile
 16576  015A50  102A               	iorwf	_lQueue+1,w,c	;volatile
 16577  015A52  102B               	iorwf	_lQueue+2,w,c	;volatile
 16578  015A54  B4D8               	btfsc	status,2,c
 16579  015A56  D002               	goto	l1735
 16580                           
 16581                           ;MXK.c: 135: return 1;
 16582  015A58  0E01               	movlw	1
 16583  015A5A  0012               	return	
 16584  015A5C                     l1735:
 16585                           
 16586                           ;MXK.c: 137: return 0;
 16587  015A5C  0E00               	movlw	0
 16588  015A5E  0012               	return	
 16589  015A60                     __end_of_MXK_Release:
 16590                           	opt stack 0
 16591                           tosu	equ	0xFFF
 16592                           tosh	equ	0xFFE
 16593                           tosl	equ	0xFFD
 16594                           pclath	equ	0xFFA
 16595                           tblptru	equ	0xFF8
 16596                           tblptrh	equ	0xFF7
 16597                           tblptrl	equ	0xFF6
 16598                           tablat	equ	0xFF5
 16599                           prodh	equ	0xFF4
 16600                           prodl	equ	0xFF3
 16601                           intcon	equ	0xFF2
 16602                           postinc0	equ	0xFEE
 16603                           wreg	equ	0xFE8
 16604                           postdec1	equ	0xFE5
 16605                           fsr1h	equ	0xFE2
 16606                           fsr1l	equ	0xFE1
 16607                           indf2	equ	0xFDF
 16608                           postinc2	equ	0xFDE
 16609                           postdec2	equ	0xFDD
 16610                           plusw2	equ	0xFDB
 16611                           fsr2h	equ	0xFDA
 16612                           fsr2l	equ	0xFD9
 16613                           status	equ	0xFD8
 16614                           
 16615 ;; *************** function _MXK_Queue *****************
 16616 ;; Defined at:
 16617 ;;		line 144 in file "Library/MXK.c"
 16618 ;; Parameters:    Size  Location     Type
 16619 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 16620 ;;		 -> Absolute function(1), Motor_Step(1), 
 16621 ;; Auto vars:     Size  Location     Type
 16622 ;;		None
 16623 ;; Return value:  Size  Location     Type
 16624 ;;                  1    wreg      void 
 16625 ;; Registers used:
 16626 ;;		wreg, status,2, status,0
 16627 ;; Tracked objects:
 16628 ;;		On entry : 0/0
 16629 ;;		On exit  : 0/0
 16630 ;;		Unchanged: 0/0
 16631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16632 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16635 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16636 ;;Total ram usage:        3 bytes
 16637 ;; Hardware stack levels used:    1
 16638 ;; Hardware stack levels required when called:    7
 16639 ;; This function calls:
 16640 ;;		Nothing
 16641 ;; This function is called by:
 16642 ;;		_Motor_Step
 16643 ;; This function uses a non-reentrant model
 16644 ;;
 16645                           
 16646                           	psect	text63
 16647  015B28                     __ptext63:
 16648                           	opt stack 0
 16649  015B28                     _MXK_Queue:
 16650                           	opt stack 21
 16651                           
 16652                           ;MXK.c: 146: lQueue = pCallback;
 16653                           
 16654                           ;incstack = 0
 16655  015B28  C060  F029         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 16656  015B2C  C061  F02A         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 16657  015B30  C062  F02B         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 16658  015B34  0012               	return		;funcret
 16659  015B36                     __end_of_MXK_Queue:
 16660                           	opt stack 0
 16661                           tosu	equ	0xFFF
 16662                           tosh	equ	0xFFE
 16663                           tosl	equ	0xFFD
 16664                           pclath	equ	0xFFA
 16665                           tblptru	equ	0xFF8
 16666                           tblptrh	equ	0xFF7
 16667                           tblptrl	equ	0xFF6
 16668                           tablat	equ	0xFF5
 16669                           prodh	equ	0xFF4
 16670                           prodl	equ	0xFF3
 16671                           intcon	equ	0xFF2
 16672                           postinc0	equ	0xFEE
 16673                           wreg	equ	0xFE8
 16674                           postdec1	equ	0xFE5
 16675                           fsr1h	equ	0xFE2
 16676                           fsr1l	equ	0xFE1
 16677                           indf2	equ	0xFDF
 16678                           postinc2	equ	0xFDE
 16679                           postdec2	equ	0xFDD
 16680                           plusw2	equ	0xFDB
 16681                           fsr2h	equ	0xFDA
 16682                           fsr2l	equ	0xFD9
 16683                           status	equ	0xFD8
 16684                           
 16685 ;; *************** function _MXK_BlockSwitchTo *****************
 16686 ;; Defined at:
 16687 ;;		line 82 in file "Library/MXK.c"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;  pModule         1    wreg     enum E6927
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;  pModule         1    7[BANK0 ] enum E6927
 16692 ;;  CUR             1    6[BANK0 ] unsigned char 
 16693 ;; Return value:  Size  Location     Type
 16694 ;;                  1    wreg      unsigned char 
 16695 ;; Registers used:
 16696 ;;		wreg, status,2, status,0, cstack
 16697 ;; Tracked objects:
 16698 ;;		On entry : 0/0
 16699 ;;		On exit  : 0/0
 16700 ;;		Unchanged: 0/0
 16701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16703 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16705 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16706 ;;Total ram usage:        2 bytes
 16707 ;; Hardware stack levels used:    1
 16708 ;; Hardware stack levels required when called:    8
 16709 ;; This function calls:
 16710 ;;		_delay_us
 16711 ;; This function is called by:
 16712 ;;		_main
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716                           	psect	text64
 16717  015558                     __ptext64:
 16718                           	opt stack 0
 16719  015558                     _MXK_BlockSwitchTo:
 16720                           	opt stack 22
 16721                           
 16722                           ;incstack = 0
 16723                           ;MXK_BlockSwitchTo@pModule stored from wreg
 16724  015558  0100               	movlb	0	; () banked
 16725  01555A  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 16726                           
 16727                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 16728  01555C  5086               	movf	3974,w,c	;volatile
 16729  01555E  0B0F               	andlw	15
 16730  015560  0100               	movlb	0	; () banked
 16731  015562  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 16732  015564                     
 16733                           ; BSR set to: 0
 16734                           
 16735                           ; BSR set to: 0
 16736  015564  504D               	movf	_Bus_State,w,c
 16737  015566  B4D8               	btfsc	status,2,c
 16738  015568  D7FD               	goto	l1724
 16739                           
 16740                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 16741  01556A  0E00               	movlw	0
 16742  01556C  6E4D               	movwf	_Bus_State,c
 16743                           
 16744                           ;MXK.c: 90: if (CUR != pModule)
 16745  01556E  0100               	movlb	0	; () banked
 16746  015570  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 16747  015572  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 16748  015574  B4D8               	btfsc	status,2,c
 16749  015576  D00A               	goto	l1726
 16750                           
 16751                           ; BSR set to: 0
 16752                           ;MXK.c: 91: {
 16753                           ;MXK.c: 92: PORTG &= ~(0xF);
 16754  015578  0EF0               	movlw	240
 16755  01557A  1686               	andwf	3974,f,c	;volatile
 16756                           
 16757                           ;MXK.c: 93: PORTG |= pModule;
 16758  01557C  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 16759  01557E  1286               	iorwf	3974,f,c	;volatile
 16760                           
 16761                           ; BSR set to: 0
 16762                           ;MXK.c: 96: delay_us(10);
 16763  015580  0E00               	movlw	0
 16764  015582  6F61               	movwf	(delay_us@us+1)& (0+255),b
 16765  015584  0E0A               	movlw	10
 16766  015586  6F60               	movwf	delay_us@us& (0+255),b
 16767  015588  EC73  F0A9         	call	_delay_us	;wreg free
 16768  01558C                     l1726:
 16769                           
 16770                           ;MXK.c: 97: }
 16771                           ;MXK.c: 98: return 1;
 16772  01558C  0E01               	movlw	1
 16773  01558E  0012               	return	
 16774  015590                     __end_of_MXK_BlockSwitchTo:
 16775                           	opt stack 0
 16776                           tosu	equ	0xFFF
 16777                           tosh	equ	0xFFE
 16778                           tosl	equ	0xFFD
 16779                           pclath	equ	0xFFA
 16780                           tblptru	equ	0xFF8
 16781                           tblptrh	equ	0xFF7
 16782                           tblptrl	equ	0xFF6
 16783                           tablat	equ	0xFF5
 16784                           prodh	equ	0xFF4
 16785                           prodl	equ	0xFF3
 16786                           intcon	equ	0xFF2
 16787                           postinc0	equ	0xFEE
 16788                           wreg	equ	0xFE8
 16789                           postdec1	equ	0xFE5
 16790                           fsr1h	equ	0xFE2
 16791                           fsr1l	equ	0xFE1
 16792                           indf2	equ	0xFDF
 16793                           postinc2	equ	0xFDE
 16794                           postdec2	equ	0xFDD
 16795                           plusw2	equ	0xFDB
 16796                           fsr2h	equ	0xFDA
 16797                           fsr2l	equ	0xFD9
 16798                           status	equ	0xFD8
 16799                           
 16800 ;; *************** function _delay_us *****************
 16801 ;; Defined at:
 16802 ;;		line 255 in file "Library/Types.c"
 16803 ;; Parameters:    Size  Location     Type
 16804 ;;  us              2    0[BANK0 ] unsigned short 
 16805 ;; Auto vars:     Size  Location     Type
 16806 ;;  u               4    2[BANK0 ] unsigned long 
 16807 ;; Return value:  Size  Location     Type
 16808 ;;                  1    wreg      void 
 16809 ;; Registers used:
 16810 ;;		wreg, status,2, status,0
 16811 ;; Tracked objects:
 16812 ;;		On entry : 0/0
 16813 ;;		On exit  : 0/0
 16814 ;;		Unchanged: 0/0
 16815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16816 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16817 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16819 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16820 ;;Total ram usage:        6 bytes
 16821 ;; Hardware stack levels used:    1
 16822 ;; Hardware stack levels required when called:    7
 16823 ;; This function calls:
 16824 ;;		Nothing
 16825 ;; This function is called by:
 16826 ;;		_MXK_BlockSwitchTo
 16827 ;;		_MXK_SwitchTo
 16828 ;; This function uses a non-reentrant model
 16829 ;;
 16830                           
 16831                           	psect	text65
 16832  0152E6                     __ptext65:
 16833                           	opt stack 0
 16834  0152E6                     _delay_us:
 16835                           	opt stack 20
 16836                           
 16837                           ;Types.c: 256: unsigned long u;
 16838                           ;Types.c: 257: while (us--) {
 16839                           
 16840                           ;incstack = 0
 16841  0152E6  D018               	goto	u11990
 16842  0152E8                     l14465:
 16843                           
 16844                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 16845  0152E8  0E00               	movlw	0
 16846  0152EA  0100               	movlb	0	; () banked
 16847  0152EC  6F62               	movwf	delay_us@u& (0+255),b
 16848  0152EE  0E00               	movlw	0
 16849  0152F0  6F63               	movwf	(delay_us@u+1)& (0+255),b
 16850  0152F2  0E00               	movlw	0
 16851  0152F4  6F64               	movwf	(delay_us@u+2)& (0+255),b
 16852  0152F6  0E00               	movlw	0
 16853  0152F8  6F65               	movwf	(delay_us@u+3)& (0+255),b
 16854  0152FA                     l14467:
 16855                           
 16856                           ; BSR set to: 0
 16857  0152FA  5162               	movf	delay_us@u& (0+255),w,b
 16858  0152FC  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 16859  0152FE  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 16860  015300  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 16861  015302  A4D8               	btfss	status,2,c
 16862  015304  D009               	goto	u11990
 16863                           
 16864                           ; BSR set to: 0
 16865                           
 16866                           ; BSR set to: 0
 16867  015306  F000               	nop		; ;# 
 16868  015308  0E01               	movlw	1
 16869  01530A  0100               	movlb	0	; () banked
 16870  01530C  2762               	addwf	delay_us@u& (0+255),f,b
 16871  01530E  0E00               	movlw	0
 16872  015310  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 16873  015312  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 16874  015314  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 16875  015316  D7F1               	goto	l14467
 16876  015318                     u11990:
 16877                           
 16878                           ; BSR set to: 0
 16879                           
 16880                           ; BSR set to: 0
 16881  015318  0100               	movlb	0	; () banked
 16882  01531A  0760               	decf	delay_us@us& (0+255),f,b
 16883  01531C  A0D8               	btfss	status,0,c
 16884  01531E  0761               	decf	(delay_us@us+1)& (0+255),f,b
 16885  015320  2960               	incf	delay_us@us& (0+255),w,b
 16886  015322  E1E2               	bnz	l14465
 16887  015324  2961               	incf	(delay_us@us+1)& (0+255),w,b
 16888  015326  B4D8               	btfsc	status,2,c
 16889  015328  0012               	return	
 16890  01532A  D7DE               	goto	l832
 16891  01532C                     __end_of_delay_us:
 16892                           	opt stack 0
 16893                           tosu	equ	0xFFF
 16894                           tosh	equ	0xFFE
 16895                           tosl	equ	0xFFD
 16896                           pclath	equ	0xFFA
 16897                           tblptru	equ	0xFF8
 16898                           tblptrh	equ	0xFF7
 16899                           tblptrl	equ	0xFF6
 16900                           tablat	equ	0xFF5
 16901                           prodh	equ	0xFF4
 16902                           prodl	equ	0xFF3
 16903                           intcon	equ	0xFF2
 16904                           postinc0	equ	0xFEE
 16905                           wreg	equ	0xFE8
 16906                           postdec1	equ	0xFE5
 16907                           fsr1h	equ	0xFE2
 16908                           fsr1l	equ	0xFE1
 16909                           indf2	equ	0xFDF
 16910                           postinc2	equ	0xFDE
 16911                           postdec2	equ	0xFDD
 16912                           plusw2	equ	0xFDB
 16913                           fsr2h	equ	0xFDA
 16914                           fsr2l	equ	0xFD9
 16915                           status	equ	0xFD8
 16916                           
 16917 ;; *************** function _LCD_Init *****************
 16918 ;; Defined at:
 16919 ;;		line 172 in file "Library/LCD.c"
 16920 ;; Parameters:    Size  Location     Type
 16921 ;;		None
 16922 ;; Auto vars:     Size  Location     Type
 16923 ;;  i               2   55[BANK0 ] unsigned short 
 16924 ;; Return value:  Size  Location     Type
 16925 ;;                  1    wreg      void 
 16926 ;; Registers used:
 16927 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16928 ;; Tracked objects:
 16929 ;;		On entry : 0/0
 16930 ;;		On exit  : 0/0
 16931 ;;		Unchanged: 0/0
 16932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16936 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16937 ;;Total ram usage:        4 bytes
 16938 ;; Hardware stack levels used:    1
 16939 ;; Hardware stack levels required when called:   15
 16940 ;; This function calls:
 16941 ;;		_Configure_GPIOs
 16942 ;;		_LCD_Fill
 16943 ;;		_LCD_Write
 16944 ;;		_Set_Rotation
 16945 ;;		_delay_ms
 16946 ;; This function is called by:
 16947 ;;		_main
 16948 ;; This function uses a non-reentrant model
 16949 ;;
 16950                           
 16951                           	psect	text66
 16952  012FFC                     __ptext66:
 16953                           	opt stack 0
 16954  012FFC                     _LCD_Init:
 16955                           	opt stack 15
 16956                           
 16957                           ;LCD.c: 174: UINT16 i;
 16958                           ;LCD.c: 175: Configure_GPIOs();
 16959                           
 16960                           ; BSR set to: 0
 16961                           ;incstack = 0
 16962  012FFC  ECC6  F0A6         	call	_Configure_GPIOs	;wreg free
 16963                           
 16964                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 16965  013000  0E00               	movlw	0
 16966  013002  0100               	movlb	0	; () banked
 16967  013004  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 16968  013006  0E00               	movlw	0
 16969  013008  6F97               	movwf	LCD_Init@i& (0+255),b
 16970                           
 16971                           ; BSR set to: 0
 16972  01300A  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 16973  01300C  E17D               	bnz	u13040
 16974  01300E  0E59               	movlw	89
 16975  013010  5D97               	subwf	LCD_Init@i& (0+255),w,b
 16976  013012  B0D8               	btfsc	status,0,c
 16977  013014  D079               	goto	u13040
 16978                           
 16979                           ; BSR set to: 0
 16980                           ;LCD.c: 178: {
 16981                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 16982                           
 16983                           ; BSR set to: 0
 16984                           
 16985                           ; BSR set to: 0
 16986  013016  90D8               	bcf	status,0,c
 16987  013018  3597               	rlcf	LCD_Init@i& (0+255),w,b
 16988  01301A  6EF6               	movwf	tblptrl,c
 16989  01301C  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16990  01301E  6EF7               	movwf	tblptrh,c
 16991  013020  0E19               	movlw	low _InitList
 16992  013022  26F6               	addwf	tblptrl,f,c
 16993  013024  0EFB               	movlw	high _InitList
 16994  013026  22F7               	addwfc	tblptrh,f,c
 16995  013028                     	if	1	;There are 3 active tblptr bytes
 16996  013028  6AF8               	clrf	tblptru,c
 16997  01302A  0E00               	movlw	low (__mediumconst shr (0+16))
 16998  01302C  22F8               	addwfc	tblptru,f,c
 16999  01302E                     	endif
 17000  01302E  0009               	tblrd		*+
 17001  013030  0E80               	movlw	128
 17002  013032  18F5               	xorwf	tablat,w,c
 17003  013034  0009               	tblrd		*+
 17004  013036  10F5               	iorwf	tablat,w,c
 17005  013038  A4D8               	btfss	status,2,c
 17006  01303A  D01D               	goto	l87
 17007                           
 17008                           ; BSR set to: 0
 17009  01303C  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17010  01303E  E11B               	bnz	l15587
 17011  013040  0E58               	movlw	88
 17012  013042  5D97               	subwf	LCD_Init@i& (0+255),w,b
 17013  013044  B0D8               	btfsc	status,0,c
 17014  013046  D017               	goto	l87
 17015                           
 17016                           ; BSR set to: 0
 17017                           ;LCD.c: 180: delay_ms(InitList[++i]);
 17018  013048  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17019  01304A  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17020  01304C  90D8               	bcf	status,0,c
 17021  01304E  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17022  013050  6EF6               	movwf	tblptrl,c
 17023  013052  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17024  013054  6EF7               	movwf	tblptrh,c
 17025  013056  0E19               	movlw	low _InitList
 17026  013058  26F6               	addwf	tblptrl,f,c
 17027  01305A  0EFB               	movlw	high _InitList
 17028  01305C  22F7               	addwfc	tblptrh,f,c
 17029  01305E                     	if	1	;There are 3 active tblptr bytes
 17030  01305E  6AF8               	clrf	tblptru,c
 17031  013060  0E00               	movlw	low (__mediumconst shr (0+16))
 17032  013062  22F8               	addwfc	tblptru,f,c
 17033  013064                     	endif
 17034  013064  0009               	tblrd		*+
 17035  013066  CFF5 F060          	movff	tablat,delay_ms@ms
 17036  01306A  000A               	tblrd		*-
 17037  01306C  CFF5 F061          	movff	tablat,delay_ms@ms+1
 17038  013070  ECF5  F0A6         	call	_delay_ms	;wreg free
 17039  013074  D043               	goto	l90
 17040  013076                     l87:
 17041  013076                     l15587:
 17042                           
 17043                           ;LCD.c: 181: else
 17044                           ;LCD.c: 182: {
 17045                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 17046  013076  90D8               	bcf	status,0,c
 17047  013078  0100               	movlb	0	; () banked
 17048  01307A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17049  01307C  6EF6               	movwf	tblptrl,c
 17050  01307E  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17051  013080  6EF7               	movwf	tblptrh,c
 17052  013082  0E19               	movlw	low _InitList
 17053  013084  26F6               	addwf	tblptrl,f,c
 17054  013086  0EFB               	movlw	high _InitList
 17055  013088  22F7               	addwfc	tblptrh,f,c
 17056  01308A                     	if	1	;There are 3 active tblptr bytes
 17057  01308A  6AF8               	clrf	tblptru,c
 17058  01308C  0E00               	movlw	low (__mediumconst shr (0+16))
 17059  01308E  22F8               	addwfc	tblptru,f,c
 17060  013090                     	endif
 17061  013090  0009               	tblrd		*+
 17062  013092  0E00               	movlw	0
 17063  013094  5EF5               	subwf	tablat,f,c
 17064  013096  0009               	tblrd		*+
 17065  013098  0E01               	movlw	1
 17066  01309A  5AF5               	subwfb	tablat,f,c
 17067  01309C  A0D8               	btfss	status,0,c
 17068  01309E  D01B               	goto	l89
 17069                           
 17070                           ; BSR set to: 0
 17071  0130A0  0E00               	movlw	0
 17072  0130A2  6F63               	movwf	LCD_Write@mode& (0+255),b
 17073  0130A4  90D8               	bcf	status,0,c
 17074  0130A6  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17075  0130A8  6EF6               	movwf	tblptrl,c
 17076  0130AA  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17077  0130AC  6EF7               	movwf	tblptrh,c
 17078  0130AE  0E19               	movlw	low _InitList
 17079  0130B0  26F6               	addwf	tblptrl,f,c
 17080  0130B2  0EFB               	movlw	high _InitList
 17081  0130B4  22F7               	addwfc	tblptrh,f,c
 17082  0130B6                     	if	1	;There are 3 active tblptr bytes
 17083  0130B6  6AF8               	clrf	tblptru,c
 17084  0130B8  0E00               	movlw	low (__mediumconst shr (0+16))
 17085  0130BA  22F8               	addwfc	tblptru,f,c
 17086  0130BC                     	endif
 17087  0130BC  0009               	tblrd		*+
 17088  0130BE  CFF5 F095          	movff	tablat,??_LCD_Init
 17089  0130C2  0009               	tblrd		*+
 17090  0130C4  CFF5 F096          	movff	tablat,??_LCD_Init+1
 17091  0130C8  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 17092  0130CC  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 17093  0130CE  5195               	movf	??_LCD_Init& (0+255),w,b
 17094  0130D0  EC5A  F0AC         	call	_LCD_Write
 17095  0130D4  D013               	goto	l90
 17096  0130D6                     l89:
 17097                           
 17098                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 17099  0130D6  0E01               	movlw	1
 17100  0130D8  0100               	movlb	0	; () banked
 17101  0130DA  6F63               	movwf	LCD_Write@mode& (0+255),b
 17102  0130DC  90D8               	bcf	status,0,c
 17103  0130DE  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17104  0130E0  6EF6               	movwf	tblptrl,c
 17105  0130E2  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17106  0130E4  6EF7               	movwf	tblptrh,c
 17107  0130E6  0E19               	movlw	low _InitList
 17108  0130E8  26F6               	addwf	tblptrl,f,c
 17109  0130EA  0EFB               	movlw	high _InitList
 17110  0130EC  22F7               	addwfc	tblptrh,f,c
 17111  0130EE                     	if	1	;There are 3 active tblptr bytes
 17112  0130EE  6AF8               	clrf	tblptru,c
 17113  0130F0  0E00               	movlw	low (__mediumconst shr (0+16))
 17114  0130F2  22F8               	addwfc	tblptru,f,c
 17115  0130F4                     	endif
 17116  0130F4  0008               	tblrd		*
 17117  0130F6  50F5               	movf	tablat,w,c
 17118  0130F8  EC5A  F0AC         	call	_LCD_Write
 17119  0130FC                     l90:
 17120  0130FC  0100               	movlb	0	; () banked
 17121  0130FE  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17122  013100  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17123                           
 17124                           ; BSR set to: 0
 17125  013102  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17126  013104  E101               	bnz	l15597
 17127  013106  D783               	goto	L15
 17128  013108                     u13040:
 17129  013108                     l15597:
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;LCD.c: 185: }
 17133                           ;LCD.c: 186: }
 17134                           ;LCD.c: 187: delay_ms(100);
 17135  013108  0E00               	movlw	0
 17136  01310A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17137  01310C  0E64               	movlw	100
 17138  01310E  6F60               	movwf	delay_ms@ms& (0+255),b
 17139  013110  ECF5  F0A6         	call	_delay_ms	;wreg free
 17140                           
 17141                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 17142  013114  0E00               	movlw	0
 17143  013116  0100               	movlb	0	; () banked
 17144  013118  6F63               	movwf	LCD_Write@mode& (0+255),b
 17145  01311A  0E29               	movlw	41
 17146  01311C  EC5A  F0AC         	call	_LCD_Write
 17147                           
 17148                           ;LCD.c: 189: Set_Rotation(1);
 17149  013120  0E01               	movlw	1
 17150  013122  EC36  F0A1         	call	_Set_Rotation
 17151                           
 17152                           ;LCD.c: 191: delay_ms(100);
 17153  013126  0E00               	movlw	0
 17154  013128  0100               	movlb	0	; () banked
 17155  01312A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17156  01312C  0E64               	movlw	100
 17157  01312E  6F60               	movwf	delay_ms@ms& (0+255),b
 17158  013130  ECF5  F0A6         	call	_delay_ms	;wreg free
 17159                           
 17160                           ;LCD.c: 192: LCD_Fill(0x0000);
 17161  013134  0E00               	movlw	0
 17162  013136  0100               	movlb	0	; () banked
 17163  013138  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 17164  01313A  0E00               	movlw	0
 17165  01313C  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 17166  01313E  EC4F  F0A9         	call	_LCD_Fill	;wreg free
 17167  013142  0012               	return		;funcret
 17168  013144                     __end_of_LCD_Init:
 17169                           	opt stack 0
 17170                           tosu	equ	0xFFF
 17171                           tosh	equ	0xFFE
 17172                           tosl	equ	0xFFD
 17173                           pclath	equ	0xFFA
 17174                           tblptru	equ	0xFF8
 17175                           tblptrh	equ	0xFF7
 17176                           tblptrl	equ	0xFF6
 17177                           tablat	equ	0xFF5
 17178                           prodh	equ	0xFF4
 17179                           prodl	equ	0xFF3
 17180                           intcon	equ	0xFF2
 17181                           postinc0	equ	0xFEE
 17182                           wreg	equ	0xFE8
 17183                           postdec1	equ	0xFE5
 17184                           fsr1h	equ	0xFE2
 17185                           fsr1l	equ	0xFE1
 17186                           indf2	equ	0xFDF
 17187                           postinc2	equ	0xFDE
 17188                           postdec2	equ	0xFDD
 17189                           plusw2	equ	0xFDB
 17190                           fsr2h	equ	0xFDA
 17191                           fsr2l	equ	0xFD9
 17192                           status	equ	0xFD8
 17193                           
 17194 ;; *************** function _Set_Rotation *****************
 17195 ;; Defined at:
 17196 ;;		line 248 in file "Library/LCD.c"
 17197 ;; Parameters:    Size  Location     Type
 17198 ;;  m               1    wreg     unsigned char 
 17199 ;; Auto vars:     Size  Location     Type
 17200 ;;  m               1    5[BANK0 ] unsigned char 
 17201 ;;  rotation        1    6[BANK0 ] unsigned char 
 17202 ;; Return value:  Size  Location     Type
 17203 ;;                  1    wreg      void 
 17204 ;; Registers used:
 17205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17206 ;; Tracked objects:
 17207 ;;		On entry : 0/0
 17208 ;;		On exit  : 0/0
 17209 ;;		Unchanged: 0/0
 17210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17215 ;;Total ram usage:        2 bytes
 17216 ;; Hardware stack levels used:    1
 17217 ;; Hardware stack levels required when called:    9
 17218 ;; This function calls:
 17219 ;;		_LCD_Write
 17220 ;; This function is called by:
 17221 ;;		_LCD_Init
 17222 ;; This function uses a non-reentrant model
 17223 ;;
 17224                           
 17225                           	psect	text67
 17226  01426C                     __ptext67:
 17227                           	opt stack 0
 17228  01426C                     _Set_Rotation:
 17229                           	opt stack 20
 17230                           
 17231                           ;incstack = 0
 17232                           ;Set_Rotation@m stored from wreg
 17233  01426C  0100               	movlb	0	; () banked
 17234  01426E  6F65               	movwf	Set_Rotation@m& (0+255),b
 17235                           
 17236                           ;LCD.c: 250: UINT8 rotation = 0x00;
 17237  014270  0E00               	movlw	0
 17238  014272  0100               	movlb	0	; () banked
 17239  014274  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 17240                           
 17241                           ; BSR set to: 0
 17242                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 17243  014276  0E00               	movlw	0
 17244  014278  6F63               	movwf	LCD_Write@mode& (0+255),b
 17245  01427A  0E36               	movlw	54
 17246  01427C  EC5A  F0AC         	call	_LCD_Write
 17247                           
 17248                           ;LCD.c: 253: rotation = (m % 4);
 17249  014280  0100               	movlb	0	; () banked
 17250  014282  5165               	movf	Set_Rotation@m& (0+255),w,b
 17251  014284  0B03               	andlw	3
 17252  014286  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 17253                           
 17254                           ;LCD.c: 255: switch(rotation)
 17255  014288  D02B               	goto	l117
 17256  01428A                     
 17257                           ; BSR set to: 0
 17258                           ;LCD.c: 258: {
 17259                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 17260                           
 17261                           ; BSR set to: 0
 17262  01428A  0E01               	movlw	1
 17263  01428C  6F63               	movwf	LCD_Write@mode& (0+255),b
 17264  01428E  0EC8               	movlw	200
 17265  014290  EC5A  F0AC         	call	_LCD_Write
 17266                           
 17267                           ;LCD.c: 260: w = 128;
 17268  014294  0E80               	movlw	128
 17269  014296  6E50               	movwf	_w,c
 17270                           
 17271                           ;LCD.c: 261: l = 128;
 17272  014298  0E80               	movlw	128
 17273  01429A  6E4F               	movwf	_l,c
 17274                           
 17275                           ;LCD.c: 262: break;
 17276  01429C  0012               	return	
 17277  01429E                     
 17278                           ;LCD.c: 265: {
 17279                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 17280  01429E  0E01               	movlw	1
 17281  0142A0  0100               	movlb	0	; () banked
 17282  0142A2  6F63               	movwf	LCD_Write@mode& (0+255),b
 17283  0142A4  0EA8               	movlw	168
 17284  0142A6  EC5A  F0AC         	call	_LCD_Write
 17285                           
 17286                           ;LCD.c: 267: w = 128;
 17287  0142AA  0E80               	movlw	128
 17288  0142AC  6E50               	movwf	_w,c
 17289                           
 17290                           ;LCD.c: 268: l = 128;
 17291  0142AE  0E80               	movlw	128
 17292  0142B0  6E4F               	movwf	_l,c
 17293                           
 17294                           ;LCD.c: 269: break;
 17295  0142B2  0012               	return	
 17296  0142B4                     
 17297                           ;LCD.c: 272: {
 17298                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 17299  0142B4  0E01               	movlw	1
 17300  0142B6  0100               	movlb	0	; () banked
 17301  0142B8  6F63               	movwf	LCD_Write@mode& (0+255),b
 17302  0142BA  0E08               	movlw	8
 17303  0142BC  EC5A  F0AC         	call	_LCD_Write
 17304                           
 17305                           ;LCD.c: 274: w = 128;
 17306  0142C0  0E80               	movlw	128
 17307  0142C2  6E50               	movwf	_w,c
 17308                           
 17309                           ;LCD.c: 275: l = 128;
 17310  0142C4  0E80               	movlw	128
 17311  0142C6  6E4F               	movwf	_l,c
 17312                           
 17313                           ;LCD.c: 276: break;
 17314  0142C8  0012               	return	
 17315  0142CA                     
 17316                           ;LCD.c: 279: {
 17317                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 17318  0142CA  0E01               	movlw	1
 17319  0142CC  0100               	movlb	0	; () banked
 17320  0142CE  6F63               	movwf	LCD_Write@mode& (0+255),b
 17321  0142D0  0E68               	movlw	104
 17322  0142D2  EC5A  F0AC         	call	_LCD_Write
 17323                           
 17324                           ;LCD.c: 281: w = 128;
 17325  0142D6  0E80               	movlw	128
 17326  0142D8  6E50               	movwf	_w,c
 17327                           
 17328                           ;LCD.c: 282: l = 128;
 17329  0142DA  0E80               	movlw	128
 17330  0142DC  6E4F               	movwf	_l,c
 17331                           
 17332                           ;LCD.c: 284: }
 17333                           ;LCD.c: 285: }
 17334                           
 17335                           ;LCD.c: 283: break;
 17336  0142DE  0012               	return	
 17337  0142E0                     l117:
 17338  0142E0  0100               	movlb	0	; () banked
 17339  0142E2  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 17340                           
 17341                           ; Switch size 1, requested type "space"
 17342                           ; Number of cases is 4, Range of values is 0 to 3
 17343                           ; switch strategies available:
 17344                           ; Name         Instructions Cycles
 17345                           ; simple_byte           13     7 (average)
 17346                           ;	Chosen strategy is simple_byte
 17347  0142E4  0A00               	xorlw	0	; case 0
 17348  0142E6  B4D8               	btfsc	status,2,c
 17349  0142E8  D7D0               	goto	l118
 17350  0142EA  0A01               	xorlw	1	; case 1
 17351  0142EC  B4D8               	btfsc	status,2,c
 17352  0142EE  D7D7               	goto	l120
 17353  0142F0  0A03               	xorlw	3	; case 2
 17354  0142F2  B4D8               	btfsc	status,2,c
 17355  0142F4  D7DF               	goto	l121
 17356  0142F6  0A01               	xorlw	1	; case 3
 17357  0142F8  A4D8               	btfss	status,2,c
 17358  0142FA  0012               	return	
 17359  0142FC  D7E6               	goto	l122
 17360  0142FE                     __end_of_Set_Rotation:
 17361                           	opt stack 0
 17362                           tosu	equ	0xFFF
 17363                           tosh	equ	0xFFE
 17364                           tosl	equ	0xFFD
 17365                           pclath	equ	0xFFA
 17366                           tblptru	equ	0xFF8
 17367                           tblptrh	equ	0xFF7
 17368                           tblptrl	equ	0xFF6
 17369                           tablat	equ	0xFF5
 17370                           prodh	equ	0xFF4
 17371                           prodl	equ	0xFF3
 17372                           intcon	equ	0xFF2
 17373                           postinc0	equ	0xFEE
 17374                           wreg	equ	0xFE8
 17375                           postdec1	equ	0xFE5
 17376                           fsr1h	equ	0xFE2
 17377                           fsr1l	equ	0xFE1
 17378                           indf2	equ	0xFDF
 17379                           postinc2	equ	0xFDE
 17380                           postdec2	equ	0xFDD
 17381                           plusw2	equ	0xFDB
 17382                           fsr2h	equ	0xFDA
 17383                           fsr2l	equ	0xFD9
 17384                           status	equ	0xFD8
 17385                           
 17386 ;; *************** function _LCD_Fill *****************
 17387 ;; Defined at:
 17388 ;;		line 287 in file "Library/LCD.c"
 17389 ;; Parameters:    Size  Location     Type
 17390 ;;  pColour         2    9[BANK0 ] unsigned short 
 17391 ;; Auto vars:     Size  Location     Type
 17392 ;;  j               1   12[BANK0 ] unsigned char 
 17393 ;;  i               1   11[BANK0 ] unsigned char 
 17394 ;; Return value:  Size  Location     Type
 17395 ;;                  1    wreg      void 
 17396 ;; Registers used:
 17397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17398 ;; Tracked objects:
 17399 ;;		On entry : 0/0
 17400 ;;		On exit  : 0/0
 17401 ;;		Unchanged: 0/0
 17402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17403 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17404 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17406 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17407 ;;Total ram usage:        4 bytes
 17408 ;; Hardware stack levels used:    1
 17409 ;; Hardware stack levels required when called:   10
 17410 ;; This function calls:
 17411 ;;		_LCD_Word_Write
 17412 ;;		_Set_Addr_Window
 17413 ;; This function is called by:
 17414 ;;		_LCD_Init
 17415 ;; This function uses a non-reentrant model
 17416 ;;
 17417                           
 17418                           	psect	text68
 17419  01529E                     __ptext68:
 17420                           	opt stack 0
 17421  01529E                     _LCD_Fill:
 17422                           	opt stack 19
 17423                           
 17424                           ;LCD.c: 296: UINT8 i = 0x00;
 17425                           
 17426                           ;incstack = 0
 17427  01529E  0E00               	movlw	0
 17428  0152A0  0100               	movlb	0	; () banked
 17429  0152A2  6F6B               	movwf	LCD_Fill@i& (0+255),b
 17430                           
 17431                           ;LCD.c: 297: UINT8 j = 0x00;
 17432  0152A4  0E00               	movlw	0
 17433  0152A6  6F6C               	movwf	LCD_Fill@j& (0+255),b
 17434                           
 17435                           ; BSR set to: 0
 17436                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 17437  0152A8  0E00               	movlw	0
 17438  0152AA  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 17439  0152AC  0450               	decf	_w,w,c
 17440  0152AE  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 17441  0152B0  044F               	decf	_l,w,c
 17442  0152B2  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 17443  0152B4  0E00               	movlw	0
 17444  0152B6  EC54  F0A0         	call	_Set_Addr_Window
 17445                           
 17446                           ;LCD.c: 299: for (j = l; j > 0; j--)
 17447  0152BA  C04F  F06C         	movff	_l,LCD_Fill@j
 17448  0152BE  0100               	movlb	0	; () banked
 17449  0152C0  516C               	movf	LCD_Fill@j& (0+255),w,b
 17450  0152C2  B4D8               	btfsc	status,2,c
 17451  0152C4  0012               	return	
 17452                           
 17453                           ; BSR set to: 0
 17454                           ;LCD.c: 300: for (i = w; i > 0; i--)
 17455                           
 17456                           ; BSR set to: 0
 17457  0152C6  C050  F06B         	movff	_w,LCD_Fill@i
 17458  0152CA                     l15261:
 17459                           
 17460                           ; BSR set to: 0
 17461  0152CA  516B               	movf	LCD_Fill@i& (0+255),w,b
 17462  0152CC  B4D8               	btfsc	status,2,c
 17463  0152CE  D009               	goto	u12710
 17464                           
 17465                           ; BSR set to: 0
 17466                           ;LCD.c: 301: LCD_Word_Write(pColour);
 17467                           
 17468                           ; BSR set to: 0
 17469                           
 17470                           ; BSR set to: 0
 17471  0152D0  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 17472  0152D4  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 17473  0152D8  ECC4  F0AC         	call	_LCD_Word_Write	;wreg free
 17474  0152DC  0100               	movlb	0	; () banked
 17475  0152DE  076B               	decf	LCD_Fill@i& (0+255),f,b
 17476  0152E0  D7F4               	goto	l15261
 17477  0152E2                     u12710:
 17478                           
 17479                           ; BSR set to: 0
 17480                           
 17481                           ; BSR set to: 0
 17482  0152E2  076C               	decf	LCD_Fill@j& (0+255),f,b
 17483  0152E4  D7ED               	goto	L16
 17484  0152E6                     __end_of_LCD_Fill:
 17485                           	opt stack 0
 17486                           tosu	equ	0xFFF
 17487                           tosh	equ	0xFFE
 17488                           tosl	equ	0xFFD
 17489                           pclath	equ	0xFFA
 17490                           tblptru	equ	0xFF8
 17491                           tblptrh	equ	0xFF7
 17492                           tblptrl	equ	0xFF6
 17493                           tablat	equ	0xFF5
 17494                           prodh	equ	0xFF4
 17495                           prodl	equ	0xFF3
 17496                           intcon	equ	0xFF2
 17497                           postinc0	equ	0xFEE
 17498                           wreg	equ	0xFE8
 17499                           postdec1	equ	0xFE5
 17500                           fsr1h	equ	0xFE2
 17501                           fsr1l	equ	0xFE1
 17502                           indf2	equ	0xFDF
 17503                           postinc2	equ	0xFDE
 17504                           postdec2	equ	0xFDD
 17505                           plusw2	equ	0xFDB
 17506                           fsr2h	equ	0xFDA
 17507                           fsr2l	equ	0xFD9
 17508                           status	equ	0xFD8
 17509                           
 17510 ;; *************** function _Set_Addr_Window *****************
 17511 ;; Defined at:
 17512 ;;		line 214 in file "Library/LCD.c"
 17513 ;; Parameters:    Size  Location     Type
 17514 ;;  xs              1    wreg     unsigned char 
 17515 ;;  ys              1    5[BANK0 ] unsigned char 
 17516 ;;  xe              1    6[BANK0 ] unsigned char 
 17517 ;;  ye              1    7[BANK0 ] unsigned char 
 17518 ;; Auto vars:     Size  Location     Type
 17519 ;;  xs              1    8[BANK0 ] unsigned char 
 17520 ;; Return value:  Size  Location     Type
 17521 ;;                  1    wreg      void 
 17522 ;; Registers used:
 17523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17524 ;; Tracked objects:
 17525 ;;		On entry : 0/0
 17526 ;;		On exit  : 0/0
 17527 ;;		Unchanged: 0/0
 17528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17529 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17532 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17533 ;;Total ram usage:        4 bytes
 17534 ;; Hardware stack levels used:    1
 17535 ;; Hardware stack levels required when called:    9
 17536 ;; This function calls:
 17537 ;;		_LCD_Write
 17538 ;; This function is called by:
 17539 ;;		_LCD_Fill
 17540 ;;		_LCD_FillRectangle
 17541 ;;		_LCD_DrawField
 17542 ;;		_RAM_Address_Set
 17543 ;;		_LCD_DrawPixel
 17544 ;; This function uses a non-reentrant model
 17545 ;;
 17546                           
 17547                           	psect	text69
 17548  0140A8                     __ptext69:
 17549                           	opt stack 0
 17550  0140A8                     _Set_Addr_Window:
 17551                           	opt stack 18
 17552                           
 17553                           ; BSR set to: 0
 17554                           ;incstack = 0
 17555                           ;Set_Addr_Window@xs stored from wreg
 17556  0140A8  0100               	movlb	0	; () banked
 17557  0140AA  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 17558                           
 17559                           ;LCD.c: 216: ys+=2;
 17560  0140AC  0E02               	movlw	2
 17561  0140AE  0100               	movlb	0	; () banked
 17562  0140B0  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 17563                           
 17564                           ;LCD.c: 217: ye+=2;
 17565  0140B2  0E02               	movlw	2
 17566  0140B4  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 17567                           
 17568                           ;LCD.c: 218: xs+=3;
 17569  0140B6  0E03               	movlw	3
 17570  0140B8  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 17571                           
 17572                           ;LCD.c: 219: xe+=3;
 17573  0140BA  0E03               	movlw	3
 17574  0140BC  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 17578  0140BE  0E00               	movlw	0
 17579  0140C0  6F63               	movwf	LCD_Write@mode& (0+255),b
 17580  0140C2  0E2A               	movlw	42
 17581  0140C4  EC5A  F0AC         	call	_LCD_Write
 17582                           
 17583                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 17584  0140C8  0E01               	movlw	1
 17585  0140CA  0100               	movlb	0	; () banked
 17586  0140CC  6F63               	movwf	LCD_Write@mode& (0+255),b
 17587  0140CE  0E00               	movlw	0
 17588  0140D0  EC5A  F0AC         	call	_LCD_Write
 17589                           
 17590                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 17591  0140D4  0E01               	movlw	1
 17592  0140D6  0100               	movlb	0	; () banked
 17593  0140D8  6F63               	movwf	LCD_Write@mode& (0+255),b
 17594  0140DA  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 17595  0140DC  EC5A  F0AC         	call	_LCD_Write
 17596                           
 17597                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 17598  0140E0  0E01               	movlw	1
 17599  0140E2  0100               	movlb	0	; () banked
 17600  0140E4  6F63               	movwf	LCD_Write@mode& (0+255),b
 17601  0140E6  0E00               	movlw	0
 17602  0140E8  EC5A  F0AC         	call	_LCD_Write
 17603                           
 17604                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 17605  0140EC  0E01               	movlw	1
 17606  0140EE  0100               	movlb	0	; () banked
 17607  0140F0  6F63               	movwf	LCD_Write@mode& (0+255),b
 17608  0140F2  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 17609  0140F4  EC5A  F0AC         	call	_LCD_Write
 17610                           
 17611                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 17612  0140F8  0E00               	movlw	0
 17613  0140FA  0100               	movlb	0	; () banked
 17614  0140FC  6F63               	movwf	LCD_Write@mode& (0+255),b
 17615  0140FE  0E2B               	movlw	43
 17616  014100  EC5A  F0AC         	call	_LCD_Write
 17617                           
 17618                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 17619  014104  0E01               	movlw	1
 17620  014106  0100               	movlb	0	; () banked
 17621  014108  6F63               	movwf	LCD_Write@mode& (0+255),b
 17622  01410A  0E00               	movlw	0
 17623  01410C  EC5A  F0AC         	call	_LCD_Write
 17624                           
 17625                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 17626  014110  0E01               	movlw	1
 17627  014112  0100               	movlb	0	; () banked
 17628  014114  6F63               	movwf	LCD_Write@mode& (0+255),b
 17629  014116  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 17630  014118  EC5A  F0AC         	call	_LCD_Write
 17631                           
 17632                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 17633  01411C  0E01               	movlw	1
 17634  01411E  0100               	movlb	0	; () banked
 17635  014120  6F63               	movwf	LCD_Write@mode& (0+255),b
 17636  014122  0E00               	movlw	0
 17637  014124  EC5A  F0AC         	call	_LCD_Write
 17638                           
 17639                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 17640  014128  0E01               	movlw	1
 17641  01412A  0100               	movlb	0	; () banked
 17642  01412C  6F63               	movwf	LCD_Write@mode& (0+255),b
 17643  01412E  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 17644  014130  EC5A  F0AC         	call	_LCD_Write
 17645                           
 17646                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 17647  014134  0E00               	movlw	0
 17648  014136  0100               	movlb	0	; () banked
 17649  014138  6F63               	movwf	LCD_Write@mode& (0+255),b
 17650  01413A  0E2C               	movlw	44
 17651  01413C  EC5A  F0AC         	call	_LCD_Write
 17652  014140  0012               	return		;funcret
 17653  014142                     __end_of_Set_Addr_Window:
 17654                           	opt stack 0
 17655                           tosu	equ	0xFFF
 17656                           tosh	equ	0xFFE
 17657                           tosl	equ	0xFFD
 17658                           pclath	equ	0xFFA
 17659                           tblptru	equ	0xFF8
 17660                           tblptrh	equ	0xFF7
 17661                           tblptrl	equ	0xFF6
 17662                           tablat	equ	0xFF5
 17663                           prodh	equ	0xFF4
 17664                           prodl	equ	0xFF3
 17665                           intcon	equ	0xFF2
 17666                           postinc0	equ	0xFEE
 17667                           wreg	equ	0xFE8
 17668                           postdec1	equ	0xFE5
 17669                           fsr1h	equ	0xFE2
 17670                           fsr1l	equ	0xFE1
 17671                           indf2	equ	0xFDF
 17672                           postinc2	equ	0xFDE
 17673                           postdec2	equ	0xFDD
 17674                           plusw2	equ	0xFDB
 17675                           fsr2h	equ	0xFDA
 17676                           fsr2l	equ	0xFD9
 17677                           status	equ	0xFD8
 17678                           
 17679 ;; *************** function _LCD_Word_Write *****************
 17680 ;; Defined at:
 17681 ;;		line 198 in file "Library/LCD.c"
 17682 ;; Parameters:    Size  Location     Type
 17683 ;;  value           2    5[BANK0 ] unsigned short 
 17684 ;; Auto vars:     Size  Location     Type
 17685 ;;		None
 17686 ;; Return value:  Size  Location     Type
 17687 ;;                  1    wreg      void 
 17688 ;; Registers used:
 17689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17690 ;; Tracked objects:
 17691 ;;		On entry : 0/0
 17692 ;;		On exit  : 0/0
 17693 ;;		Unchanged: 0/0
 17694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17695 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17699 ;;Total ram usage:        2 bytes
 17700 ;; Hardware stack levels used:    1
 17701 ;; Hardware stack levels required when called:    9
 17702 ;; This function calls:
 17703 ;;		_LCD_Write
 17704 ;; This function is called by:
 17705 ;;		_LCD_Fill
 17706 ;;		_LCD_FillRectangle
 17707 ;;		_LCD_DrawField
 17708 ;;		_LCD_DrawPixel
 17709 ;; This function uses a non-reentrant model
 17710 ;;
 17711                           
 17712                           	psect	text70
 17713  015988                     __ptext70:
 17714                           	opt stack 0
 17715  015988                     _LCD_Word_Write:
 17716                           	opt stack 18
 17717                           
 17718                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 17719                           
 17720                           ;incstack = 0
 17721  015988  0E01               	movlw	1
 17722  01598A  0100               	movlb	0	; () banked
 17723  01598C  6F63               	movwf	LCD_Write@mode& (0+255),b
 17724  01598E  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 17725  015990  EC5A  F0AC         	call	_LCD_Write
 17726                           
 17727                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 17728  015994  0E01               	movlw	1
 17729  015996  0100               	movlb	0	; () banked
 17730  015998  6F63               	movwf	LCD_Write@mode& (0+255),b
 17731  01599A  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 17732  01599C  EC5A  F0AC         	call	_LCD_Write
 17733  0159A0  0012               	return		;funcret
 17734  0159A2                     __end_of_LCD_Word_Write:
 17735                           	opt stack 0
 17736                           tosu	equ	0xFFF
 17737                           tosh	equ	0xFFE
 17738                           tosl	equ	0xFFD
 17739                           pclath	equ	0xFFA
 17740                           tblptru	equ	0xFF8
 17741                           tblptrh	equ	0xFF7
 17742                           tblptrl	equ	0xFF6
 17743                           tablat	equ	0xFF5
 17744                           prodh	equ	0xFF4
 17745                           prodl	equ	0xFF3
 17746                           intcon	equ	0xFF2
 17747                           postinc0	equ	0xFEE
 17748                           wreg	equ	0xFE8
 17749                           postdec1	equ	0xFE5
 17750                           fsr1h	equ	0xFE2
 17751                           fsr1l	equ	0xFE1
 17752                           indf2	equ	0xFDF
 17753                           postinc2	equ	0xFDE
 17754                           postdec2	equ	0xFDD
 17755                           plusw2	equ	0xFDB
 17756                           fsr2h	equ	0xFDA
 17757                           fsr2l	equ	0xFD9
 17758                           status	equ	0xFD8
 17759                           
 17760 ;; *************** function _LCD_Write *****************
 17761 ;; Defined at:
 17762 ;;		line 67 in file "Library/LCD.c"
 17763 ;; Parameters:    Size  Location     Type
 17764 ;;  value           1    wreg     unsigned char 
 17765 ;;  mode            1    3[BANK0 ] enum E6761
 17766 ;; Auto vars:     Size  Location     Type
 17767 ;;  value           1    4[BANK0 ] unsigned char 
 17768 ;; Return value:  Size  Location     Type
 17769 ;;                  1    wreg      void 
 17770 ;; Registers used:
 17771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17772 ;; Tracked objects:
 17773 ;;		On entry : 0/0
 17774 ;;		On exit  : 0/0
 17775 ;;		Unchanged: 0/0
 17776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17777 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17778 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17780 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17781 ;;Total ram usage:        2 bytes
 17782 ;; Hardware stack levels used:    1
 17783 ;; Hardware stack levels required when called:    8
 17784 ;; This function calls:
 17785 ;;		_Mode_Set
 17786 ;;		_SPI_Send
 17787 ;; This function is called by:
 17788 ;;		_LCD_Init
 17789 ;;		_LCD_Word_Write
 17790 ;;		_Set_Addr_Window
 17791 ;;		_Set_Rotation
 17792 ;;		_LCD_WriteCMD
 17793 ;;		_LCD_WriteData
 17794 ;;		_LCD_Data_Write
 17795 ;;		_LCD_Data_Write_4k
 17796 ;;		_Invert_Display
 17797 ;; This function uses a non-reentrant model
 17798 ;;
 17799                           
 17800                           	psect	text71
 17801  0158B4                     __ptext71:
 17802                           	opt stack 0
 17803  0158B4                     _LCD_Write:
 17804                           	opt stack 18
 17805                           
 17806                           ;incstack = 0
 17807                           ;LCD_Write@value stored from wreg
 17808  0158B4  0100               	movlb	0	; () banked
 17809  0158B6  6F64               	movwf	LCD_Write@value& (0+255),b
 17810                           
 17811                           ;LCD.c: 89: Mode_Set(mode);
 17812  0158B8  0100               	movlb	0	; () banked
 17813  0158BA  5163               	movf	LCD_Write@mode& (0+255),w,b
 17814  0158BC  EC76  F0AD         	call	_Mode_Set
 17815                           
 17816                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 17817  0158C0  0E6C               	movlw	low _SPI2
 17818  0158C2  0100               	movlb	0	; () banked
 17819  0158C4  6F60               	movwf	SPI_Send@pInput& (0+255),b
 17820  0158C6  0E01               	movlw	high _SPI2
 17821  0158C8  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 17822  0158CA  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 17823  0158CE  EC2C  F0A5         	call	_SPI_Send	;wreg free
 17824  0158D2  0012               	return		;funcret
 17825  0158D4                     __end_of_LCD_Write:
 17826                           	opt stack 0
 17827                           tosu	equ	0xFFF
 17828                           tosh	equ	0xFFE
 17829                           tosl	equ	0xFFD
 17830                           pclath	equ	0xFFA
 17831                           tblptru	equ	0xFF8
 17832                           tblptrh	equ	0xFF7
 17833                           tblptrl	equ	0xFF6
 17834                           tablat	equ	0xFF5
 17835                           prodh	equ	0xFF4
 17836                           prodl	equ	0xFF3
 17837                           intcon	equ	0xFF2
 17838                           postinc0	equ	0xFEE
 17839                           wreg	equ	0xFE8
 17840                           postdec1	equ	0xFE5
 17841                           fsr1h	equ	0xFE2
 17842                           fsr1l	equ	0xFE1
 17843                           indf2	equ	0xFDF
 17844                           postinc2	equ	0xFDE
 17845                           postdec2	equ	0xFDD
 17846                           plusw2	equ	0xFDB
 17847                           fsr2h	equ	0xFDA
 17848                           fsr2l	equ	0xFD9
 17849                           status	equ	0xFD8
 17850                           
 17851 ;; *************** function _SPI_Send *****************
 17852 ;; Defined at:
 17853 ;;		line 226 in file "Library/SPI.c"
 17854 ;; Parameters:    Size  Location     Type
 17855 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17856 ;;		 -> SPI1(11), SPI2(11), 
 17857 ;;  pData           1    2[BANK0 ] unsigned char 
 17858 ;; Auto vars:     Size  Location     Type
 17859 ;;		None
 17860 ;; Return value:  Size  Location     Type
 17861 ;;                  1    wreg      unsigned char 
 17862 ;; Registers used:
 17863 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17864 ;; Tracked objects:
 17865 ;;		On entry : 0/0
 17866 ;;		On exit  : 0/0
 17867 ;;		Unchanged: 0/0
 17868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17869 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17872 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17873 ;;Total ram usage:        3 bytes
 17874 ;; Hardware stack levels used:    1
 17875 ;; Hardware stack levels required when called:    7
 17876 ;; This function calls:
 17877 ;;		Nothing
 17878 ;; This function is called by:
 17879 ;;		_LCD_Write
 17880 ;;		_OutSeg
 17881 ;; This function uses a non-reentrant model
 17882 ;;
 17883                           
 17884                           	psect	text72
 17885  014A58                     __ptext72:
 17886                           	opt stack 0
 17887  014A58                     _SPI_Send:
 17888                           	opt stack 18
 17889                           
 17890                           ;SPI.c: 253: switch (pInput->mChannel)
 17891                           
 17892                           ;incstack = 0
 17893  014A58  D026               	goto	l678
 17894  014A5A                     
 17895                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 17896  014A5A  C1A3  FFD9         	movff	_PortC+4,fsr2l
 17897  014A5E  C1A4  FFDA         	movff	_PortC+5,fsr2h
 17898  014A62  0101               	movlb	1	; () banked
 17899  014A64  94DF               	bcf	indf2,2,c
 17900                           
 17901                           ; BSR set to: 1
 17902                           ;SPI.c: 257: SSP1BUF = pData;
 17903  014A66  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 17904  014A6A                     
 17905                           ; BSR set to: 1
 17906  014A6A  A0C7               	btfss	4039,0,c	;volatile
 17907  014A6C  D7FE               	goto	l681
 17908                           
 17909                           ;SPI.c: 259: pData = SSP1BUF;
 17910  014A6E  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 17911                           
 17912                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 17913  014A72  C1A3  FFD9         	movff	_PortC+4,fsr2l
 17914  014A76  C1A4  FFDA         	movff	_PortC+5,fsr2h
 17915  014A7A  0101               	movlb	1	; () banked
 17916  014A7C  84DF               	bsf	indf2,2,c
 17917                           
 17918                           ; BSR set to: 1
 17919                           ;SPI.c: 261: return pData;
 17920                           ;	Return value of _SPI_Send is never used
 17921  014A7E  0012               	return	
 17922  014A80                     
 17923                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 17924                           
 17925                           ; BSR set to: 1
 17926  014A80  C18F  FFD9         	movff	_PortD+4,fsr2l
 17927  014A84  C190  FFDA         	movff	_PortD+5,fsr2h
 17928  014A88  0101               	movlb	1	; () banked
 17929  014A8A  9EDF               	bcf	indf2,7,c
 17930                           
 17931                           ; BSR set to: 1
 17932                           ;SPI.c: 264: SSP2BUF = pData;
 17933  014A8C  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 17934  014A90                     
 17935                           ; BSR set to: 1
 17936  014A90  A06D               	btfss	3949,0,c	;volatile
 17937  014A92  D7FE               	goto	l686
 17938                           
 17939                           ;SPI.c: 266: pData = SSP2BUF;
 17940  014A94  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 17941                           
 17942                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 17943  014A98  C18F  FFD9         	movff	_PortD+4,fsr2l
 17944  014A9C  C190  FFDA         	movff	_PortD+5,fsr2h
 17945  014AA0  0101               	movlb	1	; () banked
 17946  014AA2  8EDF               	bsf	indf2,7,c
 17947                           
 17948                           ; BSR set to: 1
 17949                           ;SPI.c: 269: };
 17950                           
 17951                           ; BSR set to: 1
 17952                           ;SPI.c: 268: return pData;
 17953                           ;	Return value of _SPI_Send is never used
 17954  014AA4  0012               	return	
 17955  014AA6                     l678:
 17956                           
 17957                           ; BSR set to: 1
 17958  014AA6  0100               	movlb	0	; () banked
 17959  014AA8  EE20 F002          	lfsr	2,2
 17960  014AAC  5160               	movf	SPI_Send@pInput& (0+255),w,b
 17961  014AAE  26D9               	addwf	fsr2l,f,c
 17962  014AB0  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 17963  014AB2  22DA               	addwfc	fsr2h,f,c
 17964  014AB4  50DF               	movf	indf2,w,c
 17965                           
 17966                           ; Switch size 1, requested type "space"
 17967                           ; Number of cases is 2, Range of values is 0 to 1
 17968                           ; switch strategies available:
 17969                           ; Name         Instructions Cycles
 17970                           ; simple_byte            7     4 (average)
 17971                           ;	Chosen strategy is simple_byte
 17972  014AB6  0A00               	xorlw	0	; case 0
 17973  014AB8  B4D8               	btfsc	status,2,c
 17974  014ABA  D7CF               	goto	l679
 17975  014ABC  0A01               	xorlw	1	; case 1
 17976  014ABE  A4D8               	btfss	status,2,c
 17977  014AC0  0012               	return	
 17978  014AC2  D7DE               	goto	l684
 17979  014AC4                     __end_of_SPI_Send:
 17980                           	opt stack 0
 17981                           tosu	equ	0xFFF
 17982                           tosh	equ	0xFFE
 17983                           tosl	equ	0xFFD
 17984                           pclath	equ	0xFFA
 17985                           tblptru	equ	0xFF8
 17986                           tblptrh	equ	0xFF7
 17987                           tblptrl	equ	0xFF6
 17988                           tablat	equ	0xFF5
 17989                           prodh	equ	0xFF4
 17990                           prodl	equ	0xFF3
 17991                           intcon	equ	0xFF2
 17992                           postinc0	equ	0xFEE
 17993                           wreg	equ	0xFE8
 17994                           postdec1	equ	0xFE5
 17995                           fsr1h	equ	0xFE2
 17996                           fsr1l	equ	0xFE1
 17997                           indf2	equ	0xFDF
 17998                           postinc2	equ	0xFDE
 17999                           postdec2	equ	0xFDD
 18000                           plusw2	equ	0xFDB
 18001                           fsr2h	equ	0xFDA
 18002                           fsr2l	equ	0xFD9
 18003                           status	equ	0xFD8
 18004                           
 18005 ;; *************** function _Mode_Set *****************
 18006 ;; Defined at:
 18007 ;;		line 40 in file "Library/LCD.c"
 18008 ;; Parameters:    Size  Location     Type
 18009 ;;  pMode           1    wreg     enum E6761
 18010 ;; Auto vars:     Size  Location     Type
 18011 ;;  pMode           1    0[BANK0 ] enum E6761
 18012 ;; Return value:  Size  Location     Type
 18013 ;;                  1    wreg      void 
 18014 ;; Registers used:
 18015 ;;		wreg
 18016 ;; Tracked objects:
 18017 ;;		On entry : 0/0
 18018 ;;		On exit  : 0/0
 18019 ;;		Unchanged: 0/0
 18020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18025 ;;Total ram usage:        1 bytes
 18026 ;; Hardware stack levels used:    1
 18027 ;; Hardware stack levels required when called:    7
 18028 ;; This function calls:
 18029 ;;		Nothing
 18030 ;; This function is called by:
 18031 ;;		_LCD_Write
 18032 ;; This function uses a non-reentrant model
 18033 ;;
 18034                           
 18035                           	psect	text73
 18036  015AEC                     __ptext73:
 18037                           	opt stack 0
 18038  015AEC                     _Mode_Set:
 18039                           	opt stack 18
 18040                           
 18041                           ;incstack = 0
 18042                           ;Mode_Set@pMode stored from wreg
 18043  015AEC  0100               	movlb	0	; () banked
 18044  015AEE  6F60               	movwf	Mode_Set@pMode& (0+255),b
 18045                           
 18046                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 18047  015AF0  0100               	movlb	0	; () banked
 18048  015AF2  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 18049  015AF4  D002               	bra	u10315
 18050  015AF6  9E85               	bcf	3973,7,c	;volatile
 18051  015AF8  D001               	bra	u10316
 18052  015AFA                     u10315:
 18053  015AFA  8E85               	bsf	3973,7,c	;volatile
 18054  015AFC                     u10316:
 18055  015AFC  0012               	return		;funcret
 18056  015AFE                     __end_of_Mode_Set:
 18057                           	opt stack 0
 18058                           tosu	equ	0xFFF
 18059                           tosh	equ	0xFFE
 18060                           tosl	equ	0xFFD
 18061                           pclath	equ	0xFFA
 18062                           tblptru	equ	0xFF8
 18063                           tblptrh	equ	0xFF7
 18064                           tblptrl	equ	0xFF6
 18065                           tablat	equ	0xFF5
 18066                           prodh	equ	0xFF4
 18067                           prodl	equ	0xFF3
 18068                           intcon	equ	0xFF2
 18069                           postinc0	equ	0xFEE
 18070                           wreg	equ	0xFE8
 18071                           postdec1	equ	0xFE5
 18072                           fsr1h	equ	0xFE2
 18073                           fsr1l	equ	0xFE1
 18074                           indf2	equ	0xFDF
 18075                           postinc2	equ	0xFDE
 18076                           postdec2	equ	0xFDD
 18077                           plusw2	equ	0xFDB
 18078                           fsr2h	equ	0xFDA
 18079                           fsr2l	equ	0xFD9
 18080                           status	equ	0xFD8
 18081                           
 18082 ;; *************** function _Configure_GPIOs *****************
 18083 ;; Defined at:
 18084 ;;		line 46 in file "Library/LCD.c"
 18085 ;; Parameters:    Size  Location     Type
 18086 ;;		None
 18087 ;; Auto vars:     Size  Location     Type
 18088 ;;		None
 18089 ;; Return value:  Size  Location     Type
 18090 ;;                  1    wreg      void 
 18091 ;; Registers used:
 18092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18093 ;; Tracked objects:
 18094 ;;		On entry : 0/0
 18095 ;;		On exit  : 0/0
 18096 ;;		Unchanged: 0/0
 18097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18102 ;;Total ram usage:        0 bytes
 18103 ;; Hardware stack levels used:    1
 18104 ;; Hardware stack levels required when called:   14
 18105 ;; This function calls:
 18106 ;;		_LCD_Reset
 18107 ;;		_Port_SetPinType
 18108 ;;		_SPI_Init
 18109 ;;		_SPI_MaxSpeed
 18110 ;; This function is called by:
 18111 ;;		_LCD_Init
 18112 ;; This function uses a non-reentrant model
 18113 ;;
 18114                           
 18115                           	psect	text74
 18116  014D8C                     __ptext74:
 18117                           	opt stack 0
 18118  014D8C                     _Configure_GPIOs:
 18119                           	opt stack 15
 18120                           
 18121                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 18122                           
 18123                           ;incstack = 0
 18124  014D8C  0EA9               	movlw	low _PortF
 18125  014D8E  0100               	movlb	0	; () banked
 18126  014D90  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18127  014D92  0E01               	movlw	high _PortF
 18128  014D94  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18129  014D96  0E07               	movlw	7
 18130  014D98  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18131  014D9A  0E03               	movlw	3
 18132  014D9C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18133  014D9E  ECF7  F092         	call	_Port_SetPinType	;wreg free
 18134                           
 18135                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 18136  014DA2  0EA9               	movlw	low _PortF
 18137  014DA4  0100               	movlb	0	; () banked
 18138  014DA6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18139  014DA8  0E01               	movlw	high _PortF
 18140  014DAA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18141  014DAC  0E06               	movlw	6
 18142  014DAE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18143  014DB0  0E03               	movlw	3
 18144  014DB2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18145  014DB4  ECF7  F092         	call	_Port_SetPinType	;wreg free
 18146                           
 18147                           ;LCD.c: 55: LCD_Reset();
 18148  014DB8  EC46  F0A8         	call	_LCD_Reset	;wreg free
 18149                           
 18150                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 18151  014DBC  0EC0               	movlw	192
 18152  014DBE  0100               	movlb	0	; () banked
 18153  014DC0  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 18154  014DC2  0EC6               	movlw	198
 18155  014DC4  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18156  014DC6  0E2D               	movlw	45
 18157  014DC8  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18158  014DCA  0E00               	movlw	0
 18159  014DCC  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18160  014DCE  0E01               	movlw	1
 18161  014DD0  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 18162  014DD2  0E01               	movlw	1
 18163  014DD4  6F92               	movwf	SPI_Init@pMode& (0+255),b
 18164  014DD6  EC8F  F082         	call	_SPI_Init	;wreg free
 18165                           
 18166                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 18167  014DDA  0E6C               	movlw	low _SPI2
 18168  014DDC  0100               	movlb	0	; () banked
 18169  014DDE  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 18170  014DE0  0E01               	movlw	high _SPI2
 18171  014DE2  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 18172  014DE4  EC97  F0A5         	call	_SPI_MaxSpeed	;wreg free
 18173  014DE8  0012               	return		;funcret
 18174  014DEA                     __end_of_Configure_GPIOs:
 18175                           	opt stack 0
 18176                           tosu	equ	0xFFF
 18177                           tosh	equ	0xFFE
 18178                           tosl	equ	0xFFD
 18179                           pclath	equ	0xFFA
 18180                           tblptru	equ	0xFF8
 18181                           tblptrh	equ	0xFF7
 18182                           tblptrl	equ	0xFF6
 18183                           tablat	equ	0xFF5
 18184                           prodh	equ	0xFF4
 18185                           prodl	equ	0xFF3
 18186                           intcon	equ	0xFF2
 18187                           postinc0	equ	0xFEE
 18188                           wreg	equ	0xFE8
 18189                           postdec1	equ	0xFE5
 18190                           fsr1h	equ	0xFE2
 18191                           fsr1l	equ	0xFE1
 18192                           indf2	equ	0xFDF
 18193                           postinc2	equ	0xFDE
 18194                           postdec2	equ	0xFDD
 18195                           plusw2	equ	0xFDB
 18196                           fsr2h	equ	0xFDA
 18197                           fsr2l	equ	0xFD9
 18198                           status	equ	0xFD8
 18199                           
 18200 ;; *************** function _SPI_MaxSpeed *****************
 18201 ;; Defined at:
 18202 ;;		line 201 in file "Library/SPI.c"
 18203 ;; Parameters:    Size  Location     Type
 18204 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18205 ;;		 -> SPI2(11), 
 18206 ;; Auto vars:     Size  Location     Type
 18207 ;;		None
 18208 ;; Return value:  Size  Location     Type
 18209 ;;                  1    wreg      void 
 18210 ;; Registers used:
 18211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18212 ;; Tracked objects:
 18213 ;;		On entry : 0/0
 18214 ;;		On exit  : 0/0
 18215 ;;		Unchanged: 0/0
 18216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18217 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18221 ;;Total ram usage:        2 bytes
 18222 ;; Hardware stack levels used:    1
 18223 ;; Hardware stack levels required when called:    9
 18224 ;; This function calls:
 18225 ;;		_Byte_SetBit
 18226 ;;		_Byte_SetQuad
 18227 ;; This function is called by:
 18228 ;;		_Configure_GPIOs
 18229 ;; This function uses a non-reentrant model
 18230 ;;
 18231                           
 18232                           	psect	text75
 18233  014B2E                     __ptext75:
 18234                           	opt stack 0
 18235  014B2E                     _SPI_MaxSpeed:
 18236                           	opt stack 19
 18237                           
 18238                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18239                           
 18240                           ;incstack = 0
 18241  014B2E  0100               	movlb	0	; () banked
 18242  014B30  EE20 F006          	lfsr	2,6
 18243  014B34  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18244  014B36  26D9               	addwf	fsr2l,f,c
 18245  014B38  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18246  014B3A  22DA               	addwfc	fsr2h,f,c
 18247  014B3C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18248  014B40  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18249  014B44  0E05               	movlw	5
 18250  014B46  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 18251  014B48  0E00               	movlw	0
 18252  014B4A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18253  014B4C  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 18254                           
 18255                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 18256  014B50  0100               	movlb	0	; () banked
 18257  014B52  EE20 F006          	lfsr	2,6
 18258  014B56  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18259  014B58  26D9               	addwf	fsr2l,f,c
 18260  014B5A  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18261  014B5C  22DA               	addwfc	fsr2h,f,c
 18262  014B5E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18263  014B62  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18264  014B66  0E00               	movlw	0
 18265  014B68  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 18266  014B6A  0E00               	movlw	0
 18267  014B6C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18268  014B6E  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 18269                           
 18270                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 18271  014B72  0100               	movlb	0	; () banked
 18272  014B74  EE20 F006          	lfsr	2,6
 18273  014B78  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18274  014B7A  26D9               	addwf	fsr2l,f,c
 18275  014B7C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18276  014B7E  22DA               	addwfc	fsr2h,f,c
 18277  014B80  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18278  014B84  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18279  014B88  0E05               	movlw	5
 18280  014B8A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 18281  014B8C  0E01               	movlw	1
 18282  014B8E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18283  014B90  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 18284  014B94  0012               	return		;funcret
 18285  014B96                     __end_of_SPI_MaxSpeed:
 18286                           	opt stack 0
 18287                           tosu	equ	0xFFF
 18288                           tosh	equ	0xFFE
 18289                           tosl	equ	0xFFD
 18290                           pclath	equ	0xFFA
 18291                           tblptru	equ	0xFF8
 18292                           tblptrh	equ	0xFF7
 18293                           tblptrl	equ	0xFF6
 18294                           tablat	equ	0xFF5
 18295                           prodh	equ	0xFF4
 18296                           prodl	equ	0xFF3
 18297                           intcon	equ	0xFF2
 18298                           postinc0	equ	0xFEE
 18299                           wreg	equ	0xFE8
 18300                           postdec1	equ	0xFE5
 18301                           fsr1h	equ	0xFE2
 18302                           fsr1l	equ	0xFE1
 18303                           indf2	equ	0xFDF
 18304                           postinc2	equ	0xFDE
 18305                           postdec2	equ	0xFDD
 18306                           plusw2	equ	0xFDB
 18307                           fsr2h	equ	0xFDA
 18308                           fsr2l	equ	0xFD9
 18309                           status	equ	0xFD8
 18310                           
 18311 ;; *************** function _LCD_Reset *****************
 18312 ;; Defined at:
 18313 ;;		line 95 in file "Library/LCD.c"
 18314 ;; Parameters:    Size  Location     Type
 18315 ;;		None
 18316 ;; Auto vars:     Size  Location     Type
 18317 ;;		None
 18318 ;; Return value:  Size  Location     Type
 18319 ;;                  1    wreg      void 
 18320 ;; Registers used:
 18321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18322 ;; Tracked objects:
 18323 ;;		On entry : 0/0
 18324 ;;		On exit  : 0/0
 18325 ;;		Unchanged: 0/0
 18326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18331 ;;Total ram usage:        0 bytes
 18332 ;; Hardware stack levels used:    1
 18333 ;; Hardware stack levels required when called:   13
 18334 ;; This function calls:
 18335 ;;		_LED_Toggle
 18336 ;;		_Reset_High
 18337 ;;		_Reset_Low
 18338 ;;		_delay_ms
 18339 ;; This function is called by:
 18340 ;;		_Configure_GPIOs
 18341 ;; This function uses a non-reentrant model
 18342 ;;
 18343                           
 18344                           	psect	text76
 18345  01508C                     __ptext76:
 18346                           	opt stack 0
 18347  01508C                     _LCD_Reset:
 18348                           	opt stack 15
 18349                           
 18350                           ;LCD.c: 97: Reset_High();
 18351                           
 18352                           ;incstack = 0
 18353  01508C  ECEA  F0AC         	call	_Reset_High	;wreg free
 18354                           
 18355                           ;LCD.c: 98: LED_Toggle(eLED2);
 18356  015090  0E01               	movlw	1
 18357  015092  ECD8  F0A9         	call	_LED_Toggle
 18358                           
 18359                           ;LCD.c: 99: delay_ms(0x80);
 18360  015096  0E00               	movlw	0
 18361  015098  0100               	movlb	0	; () banked
 18362  01509A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18363  01509C  0E80               	movlw	128
 18364  01509E  6F60               	movwf	delay_ms@ms& (0+255),b
 18365  0150A0  ECF5  F0A6         	call	_delay_ms	;wreg free
 18366                           
 18367                           ;LCD.c: 100: LED_Toggle(eLED2);
 18368  0150A4  0E01               	movlw	1
 18369  0150A6  ECD8  F0A9         	call	_LED_Toggle
 18370                           
 18371                           ;LCD.c: 101: Reset_Low();
 18372  0150AA  ECDE  F0AC         	call	_Reset_Low	;wreg free
 18373                           
 18374                           ;LCD.c: 102: delay_ms(0x80);
 18375  0150AE  0E00               	movlw	0
 18376  0150B0  0100               	movlb	0	; () banked
 18377  0150B2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18378  0150B4  0E80               	movlw	128
 18379  0150B6  6F60               	movwf	delay_ms@ms& (0+255),b
 18380  0150B8  ECF5  F0A6         	call	_delay_ms	;wreg free
 18381                           
 18382                           ;LCD.c: 103: LED_Toggle(eLED2);
 18383  0150BC  0E01               	movlw	1
 18384  0150BE  ECD8  F0A9         	call	_LED_Toggle
 18385                           
 18386                           ;LCD.c: 104: Reset_High();
 18387  0150C2  ECEA  F0AC         	call	_Reset_High	;wreg free
 18388                           
 18389                           ;LCD.c: 105: delay_ms(0x80);
 18390  0150C6  0E00               	movlw	0
 18391  0150C8  0100               	movlb	0	; () banked
 18392  0150CA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18393  0150CC  0E80               	movlw	128
 18394  0150CE  6F60               	movwf	delay_ms@ms& (0+255),b
 18395  0150D0  ECF5  F0A6         	call	_delay_ms	;wreg free
 18396                           
 18397                           ;LCD.c: 106: LED_Toggle(eLED2);
 18398  0150D4  0E01               	movlw	1
 18399  0150D6  ECD8  F0A9         	call	_LED_Toggle
 18400  0150DA  0012               	return		;funcret
 18401  0150DC                     __end_of_LCD_Reset:
 18402                           	opt stack 0
 18403                           tosu	equ	0xFFF
 18404                           tosh	equ	0xFFE
 18405                           tosl	equ	0xFFD
 18406                           pclath	equ	0xFFA
 18407                           tblptru	equ	0xFF8
 18408                           tblptrh	equ	0xFF7
 18409                           tblptrl	equ	0xFF6
 18410                           tablat	equ	0xFF5
 18411                           prodh	equ	0xFF4
 18412                           prodl	equ	0xFF3
 18413                           intcon	equ	0xFF2
 18414                           postinc0	equ	0xFEE
 18415                           wreg	equ	0xFE8
 18416                           postdec1	equ	0xFE5
 18417                           fsr1h	equ	0xFE2
 18418                           fsr1l	equ	0xFE1
 18419                           indf2	equ	0xFDF
 18420                           postinc2	equ	0xFDE
 18421                           postdec2	equ	0xFDD
 18422                           plusw2	equ	0xFDB
 18423                           fsr2h	equ	0xFDA
 18424                           fsr2l	equ	0xFD9
 18425                           status	equ	0xFD8
 18426                           
 18427 ;; *************** function _delay_ms *****************
 18428 ;; Defined at:
 18429 ;;		line 240 in file "Library/Types.c"
 18430 ;; Parameters:    Size  Location     Type
 18431 ;;  ms              2    0[BANK0 ] unsigned short 
 18432 ;; Auto vars:     Size  Location     Type
 18433 ;;  u               4    2[BANK0 ] volatile unsigned long 
 18434 ;; Return value:  Size  Location     Type
 18435 ;;                  1    wreg      void 
 18436 ;; Registers used:
 18437 ;;		wreg, status,2, status,0
 18438 ;; Tracked objects:
 18439 ;;		On entry : 0/0
 18440 ;;		On exit  : 0/0
 18441 ;;		Unchanged: 0/0
 18442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18443 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18444 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18446 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18447 ;;Total ram usage:        6 bytes
 18448 ;; Hardware stack levels used:    1
 18449 ;; Hardware stack levels required when called:    7
 18450 ;; This function calls:
 18451 ;;		Nothing
 18452 ;; This function is called by:
 18453 ;;		_LCD_Reset
 18454 ;;		_LCD_Init
 18455 ;;		_MXK_Init
 18456 ;;		_SteppingCCW
 18457 ;;		_SteppingCW
 18458 ;; This function uses a non-reentrant model
 18459 ;;
 18460                           
 18461                           	psect	text77
 18462  014DEA                     __ptext77:
 18463                           	opt stack 0
 18464  014DEA                     _delay_ms:
 18465                           	opt stack 22
 18466                           
 18467                           ;Types.c: 242: volatile unsigned long u;
 18468                           ;Types.c: 243: while (ms--)
 18469                           
 18470                           ;incstack = 0
 18471  014DEA  D01B               	goto	u11860
 18472  014DEC                     l14325:
 18473                           
 18474                           ;Types.c: 244: {
 18475                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 18476  014DEC  0E00               	movlw	0
 18477  014DEE  0100               	movlb	0	; () banked
 18478  014DF0  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 18479  014DF2  0E00               	movlw	0
 18480  014DF4  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 18481  014DF6  0E00               	movlw	0
 18482  014DF8  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 18483  014DFA  0E00               	movlw	0
 18484  014DFC  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 18485  014DFE                     l14327:
 18486                           
 18487                           ; BSR set to: 0
 18488  014DFE  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 18489  014E00  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 18490  014E02  E10F               	bnz	l14333
 18491  014E04  0EB0               	movlw	176
 18492  014E06  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 18493  014E08  0E04               	movlw	4
 18494  014E0A  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 18495  014E0C  B0D8               	btfsc	status,0,c
 18496  014E0E  D009               	goto	u11860
 18497                           
 18498                           ; BSR set to: 0
 18499                           
 18500                           ; BSR set to: 0
 18501  014E10  F000               	nop		; ;# 
 18502  014E12  0E01               	movlw	1
 18503  014E14  0100               	movlb	0	; () banked
 18504  014E16  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 18505  014E18  0E00               	movlw	0
 18506  014E1A  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 18507  014E1C  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 18508  014E1E  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 18509  014E20  D7EE               	goto	l14327
 18510  014E22                     u11860:
 18511  014E22                     l14333:
 18512  014E22  0100               	movlb	0	; () banked
 18513  014E24  0760               	decf	delay_ms@ms& (0+255),f,b
 18514  014E26  A0D8               	btfss	status,0,c
 18515  014E28  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 18516  014E2A  2960               	incf	delay_ms@ms& (0+255),w,b
 18517  014E2C  E1DF               	bnz	l14325
 18518  014E2E  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 18519  014E30  A4D8               	btfss	status,2,c
 18520  014E32  D7DC               	goto	l824
 18521                           
 18522                           ; BSR set to: 0
 18523                           ;Types.c: 251: }
 18524                           ;Types.c: 252: }
 18525                           ;Types.c: 253: u = 0x8008;
 18526                           
 18527                           ; BSR set to: 0
 18528  014E34  0E08               	movlw	8
 18529  014E36  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 18530  014E38  0E80               	movlw	128
 18531  014E3A  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 18532  014E3C  0E00               	movlw	0
 18533  014E3E  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 18534  014E40  0E00               	movlw	0
 18535  014E42  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 18536                           
 18537                           ; BSR set to: 0
 18538  014E44  0012               	return		;funcret
 18539  014E46                     __end_of_delay_ms:
 18540                           	opt stack 0
 18541                           tosu	equ	0xFFF
 18542                           tosh	equ	0xFFE
 18543                           tosl	equ	0xFFD
 18544                           pclath	equ	0xFFA
 18545                           tblptru	equ	0xFF8
 18546                           tblptrh	equ	0xFF7
 18547                           tblptrl	equ	0xFF6
 18548                           tablat	equ	0xFF5
 18549                           prodh	equ	0xFF4
 18550                           prodl	equ	0xFF3
 18551                           intcon	equ	0xFF2
 18552                           postinc0	equ	0xFEE
 18553                           wreg	equ	0xFE8
 18554                           postdec1	equ	0xFE5
 18555                           fsr1h	equ	0xFE2
 18556                           fsr1l	equ	0xFE1
 18557                           indf2	equ	0xFDF
 18558                           postinc2	equ	0xFDE
 18559                           postdec2	equ	0xFDD
 18560                           plusw2	equ	0xFDB
 18561                           fsr2h	equ	0xFDA
 18562                           fsr2l	equ	0xFD9
 18563                           status	equ	0xFD8
 18564                           
 18565 ;; *************** function _Reset_Low *****************
 18566 ;; Defined at:
 18567 ;;		line 32 in file "Library/LCD.c"
 18568 ;; Parameters:    Size  Location     Type
 18569 ;;		None
 18570 ;; Auto vars:     Size  Location     Type
 18571 ;;		None
 18572 ;; Return value:  Size  Location     Type
 18573 ;;                  1    wreg      void 
 18574 ;; Registers used:
 18575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18576 ;; Tracked objects:
 18577 ;;		On entry : 0/0
 18578 ;;		On exit  : 0/0
 18579 ;;		Unchanged: 0/0
 18580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18585 ;;Total ram usage:        0 bytes
 18586 ;; Hardware stack levels used:    1
 18587 ;; Hardware stack levels required when called:   11
 18588 ;; This function calls:
 18589 ;;		_Port_SetPin
 18590 ;; This function is called by:
 18591 ;;		_LCD_Reset
 18592 ;; This function uses a non-reentrant model
 18593 ;;
 18594                           
 18595                           	psect	text78
 18596  0159BC                     __ptext78:
 18597                           	opt stack 0
 18598  0159BC                     _Reset_Low:
 18599                           	opt stack 16
 18600                           
 18601                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 18602                           
 18603                           ; BSR set to: 0
 18604                           ;incstack = 0
 18605  0159BC  0EA9               	movlw	low _PortF
 18606  0159BE  0100               	movlb	0	; () banked
 18607  0159C0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18608  0159C2  0E01               	movlw	high _PortF
 18609  0159C4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18610  0159C6  0E06               	movlw	6
 18611  0159C8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18612  0159CA  0E01               	movlw	1
 18613  0159CC  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18614  0159CE  EC5D  F09E         	call	_Port_SetPin	;wreg free
 18615  0159D2  0012               	return		;funcret
 18616  0159D4                     __end_of_Reset_Low:
 18617                           	opt stack 0
 18618                           tosu	equ	0xFFF
 18619                           tosh	equ	0xFFE
 18620                           tosl	equ	0xFFD
 18621                           pclath	equ	0xFFA
 18622                           tblptru	equ	0xFF8
 18623                           tblptrh	equ	0xFF7
 18624                           tblptrl	equ	0xFF6
 18625                           tablat	equ	0xFF5
 18626                           prodh	equ	0xFF4
 18627                           prodl	equ	0xFF3
 18628                           intcon	equ	0xFF2
 18629                           postinc0	equ	0xFEE
 18630                           wreg	equ	0xFE8
 18631                           postdec1	equ	0xFE5
 18632                           fsr1h	equ	0xFE2
 18633                           fsr1l	equ	0xFE1
 18634                           indf2	equ	0xFDF
 18635                           postinc2	equ	0xFDE
 18636                           postdec2	equ	0xFDD
 18637                           plusw2	equ	0xFDB
 18638                           fsr2h	equ	0xFDA
 18639                           fsr2l	equ	0xFD9
 18640                           status	equ	0xFD8
 18641                           
 18642 ;; *************** function _Reset_High *****************
 18643 ;; Defined at:
 18644 ;;		line 36 in file "Library/LCD.c"
 18645 ;; Parameters:    Size  Location     Type
 18646 ;;		None
 18647 ;; Auto vars:     Size  Location     Type
 18648 ;;		None
 18649 ;; Return value:  Size  Location     Type
 18650 ;;                  1    wreg      void 
 18651 ;; Registers used:
 18652 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18653 ;; Tracked objects:
 18654 ;;		On entry : 0/0
 18655 ;;		On exit  : 0/0
 18656 ;;		Unchanged: 0/0
 18657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18662 ;;Total ram usage:        0 bytes
 18663 ;; Hardware stack levels used:    1
 18664 ;; Hardware stack levels required when called:   11
 18665 ;; This function calls:
 18666 ;;		_Port_SetPin
 18667 ;; This function is called by:
 18668 ;;		_LCD_Reset
 18669 ;; This function uses a non-reentrant model
 18670 ;;
 18671                           
 18672                           	psect	text79
 18673  0159D4                     __ptext79:
 18674                           	opt stack 0
 18675  0159D4                     _Reset_High:
 18676                           	opt stack 16
 18677                           
 18678                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 18679                           
 18680                           ;incstack = 0
 18681  0159D4  0EA9               	movlw	low _PortF
 18682  0159D6  0100               	movlb	0	; () banked
 18683  0159D8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18684  0159DA  0E01               	movlw	high _PortF
 18685  0159DC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18686  0159DE  0E06               	movlw	6
 18687  0159E0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18688  0159E2  0E00               	movlw	0
 18689  0159E4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18690  0159E6  EC5D  F09E         	call	_Port_SetPin	;wreg free
 18691  0159EA  0012               	return		;funcret
 18692  0159EC                     __end_of_Reset_High:
 18693                           	opt stack 0
 18694                           tosu	equ	0xFFF
 18695                           tosh	equ	0xFFE
 18696                           tosl	equ	0xFFD
 18697                           pclath	equ	0xFFA
 18698                           tblptru	equ	0xFF8
 18699                           tblptrh	equ	0xFF7
 18700                           tblptrl	equ	0xFF6
 18701                           tablat	equ	0xFF5
 18702                           prodh	equ	0xFF4
 18703                           prodl	equ	0xFF3
 18704                           intcon	equ	0xFF2
 18705                           postinc0	equ	0xFEE
 18706                           wreg	equ	0xFE8
 18707                           postdec1	equ	0xFE5
 18708                           fsr1h	equ	0xFE2
 18709                           fsr1l	equ	0xFE1
 18710                           indf2	equ	0xFDF
 18711                           postinc2	equ	0xFDE
 18712                           postdec2	equ	0xFDD
 18713                           plusw2	equ	0xFDB
 18714                           fsr2h	equ	0xFDA
 18715                           fsr2l	equ	0xFD9
 18716                           status	equ	0xFD8
 18717                           
 18718 ;; *************** function _Init_Timer0 *****************
 18719 ;; Defined at:
 18720 ;;		line 68 in file "main.c"
 18721 ;; Parameters:    Size  Location     Type
 18722 ;;		None
 18723 ;; Auto vars:     Size  Location     Type
 18724 ;;		None
 18725 ;; Return value:  Size  Location     Type
 18726 ;;                  2  2128[None  ] int 
 18727 ;; Registers used:
 18728 ;;		None
 18729 ;; Tracked objects:
 18730 ;;		On entry : 0/0
 18731 ;;		On exit  : 0/0
 18732 ;;		Unchanged: 0/0
 18733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18738 ;;Total ram usage:        0 bytes
 18739 ;; Hardware stack levels used:    1
 18740 ;; Hardware stack levels required when called:    7
 18741 ;; This function calls:
 18742 ;;		Nothing
 18743 ;; This function is called by:
 18744 ;;		_main
 18745 ;; This function uses a non-reentrant model
 18746 ;;
 18747                           
 18748                           	psect	text80
 18749  0159EC                     __ptext80:
 18750                           	opt stack 0
 18751  0159EC                     _Init_Timer0:
 18752                           	opt stack 23
 18753                           
 18754                           ;main.c: 70: T0CONbits.TMR0ON = 1;
 18755                           
 18756                           ;incstack = 0
 18757  0159EC  8ED5               	bsf	4053,7,c	;volatile
 18758                           
 18759                           ;main.c: 71: T0CONbits.T08BIT = 1;
 18760  0159EE  8CD5               	bsf	4053,6,c	;volatile
 18761                           
 18762                           ;main.c: 72: T0CONbits.T0CS=0;
 18763  0159F0  9AD5               	bcf	4053,5,c	;volatile
 18764                           
 18765                           ;main.c: 73: T0CONbits.T0SE=0;
 18766  0159F2  98D5               	bcf	4053,4,c	;volatile
 18767                           
 18768                           ;main.c: 74: T0CONbits.PSA=0;
 18769  0159F4  96D5               	bcf	4053,3,c	;volatile
 18770                           
 18771                           ;main.c: 75: T0CONbits.T0PS2=1;
 18772  0159F6  84D5               	bsf	4053,2,c	;volatile
 18773                           
 18774                           ;main.c: 76: T0CONbits.T0PS1=1;
 18775  0159F8  82D5               	bsf	4053,1,c	;volatile
 18776                           
 18777                           ;main.c: 77: T0CONbits.T0PS0=1;
 18778  0159FA  80D5               	bsf	4053,0,c	;volatile
 18779                           
 18780                           ;main.c: 79: INTCONbits.TMR0IE = 1;
 18781  0159FC  8AF2               	bsf	intcon,5,c	;volatile
 18782                           
 18783                           ;main.c: 80: INTCONbits.PEIE = 1;
 18784  0159FE  8CF2               	bsf	intcon,6,c	;volatile
 18785                           
 18786                           ;main.c: 81: INTCONbits.GIE = 1;
 18787  015A00  8EF2               	bsf	intcon,7,c	;volatile
 18788  015A02  0012               	return		;funcret
 18789  015A04                     __end_of_Init_Timer0:
 18790                           	opt stack 0
 18791                           tosu	equ	0xFFF
 18792                           tosh	equ	0xFFE
 18793                           tosl	equ	0xFFD
 18794                           pclath	equ	0xFFA
 18795                           tblptru	equ	0xFF8
 18796                           tblptrh	equ	0xFF7
 18797                           tblptrl	equ	0xFF6
 18798                           tablat	equ	0xFF5
 18799                           prodh	equ	0xFF4
 18800                           prodl	equ	0xFF3
 18801                           intcon	equ	0xFF2
 18802                           postinc0	equ	0xFEE
 18803                           wreg	equ	0xFE8
 18804                           postdec1	equ	0xFE5
 18805                           fsr1h	equ	0xFE2
 18806                           fsr1l	equ	0xFE1
 18807                           indf2	equ	0xFDF
 18808                           postinc2	equ	0xFDE
 18809                           postdec2	equ	0xFDD
 18810                           plusw2	equ	0xFDB
 18811                           fsr2h	equ	0xFDA
 18812                           fsr2l	equ	0xFD9
 18813                           status	equ	0xFD8
 18814                           
 18815 ;; *************** function _InitSerialCommunication *****************
 18816 ;; Defined at:
 18817 ;;		line 91 in file "main.c"
 18818 ;; Parameters:    Size  Location     Type
 18819 ;;		None
 18820 ;; Auto vars:     Size  Location     Type
 18821 ;;		None
 18822 ;; Return value:  Size  Location     Type
 18823 ;;                  1    wreg      void 
 18824 ;; Registers used:
 18825 ;;		wreg, status,2
 18826 ;; Tracked objects:
 18827 ;;		On entry : 0/0
 18828 ;;		On exit  : 0/0
 18829 ;;		Unchanged: 0/0
 18830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18835 ;;Total ram usage:        0 bytes
 18836 ;; Hardware stack levels used:    1
 18837 ;; Hardware stack levels required when called:    7
 18838 ;; This function calls:
 18839 ;;		Nothing
 18840 ;; This function is called by:
 18841 ;;		_main
 18842 ;; This function uses a non-reentrant model
 18843 ;;
 18844                           
 18845                           	psect	text81
 18846  015914                     __ptext81:
 18847                           	opt stack 0
 18848  015914                     _InitSerialCommunication:
 18849                           	opt stack 23
 18850                           
 18851                           ;main.c: 93: TRISCbits.TRISC6 = 0;
 18852                           
 18853                           ;incstack = 0
 18854  015914  9C94               	bcf	3988,6,c	;volatile
 18855                           
 18856                           ;main.c: 94: TRISCbits.TRISC7 = 1;
 18857  015916  8E94               	bsf	3988,7,c	;volatile
 18858                           
 18859                           ;main.c: 96: TXSTA1 = 0b00100100;
 18860  015918  0E24               	movlw	36
 18861  01591A  6EAD               	movwf	4013,c	;volatile
 18862                           
 18863                           ;main.c: 97: RCSTA1 = 0b10010000;
 18864  01591C  0E90               	movlw	144
 18865  01591E  6EAC               	movwf	4012,c	;volatile
 18866                           
 18867                           ;main.c: 99: BAUDCON1bits.DTRXP = 0;
 18868  015920  9A7E               	bcf	3966,5,c	;volatile
 18869                           
 18870                           ;main.c: 100: BAUDCON1bits.SCKP = 0;
 18871  015922  987E               	bcf	3966,4,c	;volatile
 18872                           
 18873                           ;main.c: 101: BAUDCON1bits.WUE = 0;
 18874  015924  927E               	bcf	3966,1,c	;volatile
 18875                           
 18876                           ;main.c: 102: BAUDCON1bits.ABDEN = 0;
 18877  015926  907E               	bcf	3966,0,c	;volatile
 18878                           
 18879                           ;main.c: 105: TXSTA1bits.BRGH = 1;
 18880  015928  84AD               	bsf	4013,2,c	;volatile
 18881                           
 18882                           ;main.c: 106: BAUDCON1bits.BRG16 = 0;
 18883  01592A  967E               	bcf	3966,3,c	;volatile
 18884                           
 18885                           ;main.c: 107: SPBRG1 = 51;
 18886  01592C  0E33               	movlw	51
 18887  01592E  6EB0               	movwf	4016,c	;volatile
 18888  015930  0012               	return		;funcret
 18889  015932                     __end_of_InitSerialCommunication:
 18890                           	opt stack 0
 18891                           tosu	equ	0xFFF
 18892                           tosh	equ	0xFFE
 18893                           tosl	equ	0xFFD
 18894                           pclath	equ	0xFFA
 18895                           tblptru	equ	0xFF8
 18896                           tblptrh	equ	0xFF7
 18897                           tblptrl	equ	0xFF6
 18898                           tablat	equ	0xFF5
 18899                           prodh	equ	0xFF4
 18900                           prodl	equ	0xFF3
 18901                           intcon	equ	0xFF2
 18902                           postinc0	equ	0xFEE
 18903                           wreg	equ	0xFE8
 18904                           postdec1	equ	0xFE5
 18905                           fsr1h	equ	0xFE2
 18906                           fsr1l	equ	0xFE1
 18907                           indf2	equ	0xFDF
 18908                           postinc2	equ	0xFDE
 18909                           postdec2	equ	0xFDD
 18910                           plusw2	equ	0xFDB
 18911                           fsr2h	equ	0xFDA
 18912                           fsr2l	equ	0xFD9
 18913                           status	equ	0xFD8
 18914                           
 18915 ;; *************** function _InitADC *****************
 18916 ;; Defined at:
 18917 ;;		line 29 in file "dans.c"
 18918 ;; Parameters:    Size  Location     Type
 18919 ;;		None
 18920 ;; Auto vars:     Size  Location     Type
 18921 ;;		None
 18922 ;; Return value:  Size  Location     Type
 18923 ;;                  1    wreg      void 
 18924 ;; Registers used:
 18925 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18926 ;; Tracked objects:
 18927 ;;		On entry : 0/0
 18928 ;;		On exit  : 0/0
 18929 ;;		Unchanged: 0/0
 18930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18934 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18935 ;;Total ram usage:        1 bytes
 18936 ;; Hardware stack levels used:    1
 18937 ;; Hardware stack levels required when called:    7
 18938 ;; This function calls:
 18939 ;;		Nothing
 18940 ;; This function is called by:
 18941 ;;		_main
 18942 ;; This function uses a non-reentrant model
 18943 ;;
 18944                           
 18945                           	psect	text82
 18946  01512C                     __ptext82:
 18947                           	opt stack 0
 18948  01512C                     _InitADC:
 18949                           	opt stack 23
 18950                           
 18951                           ;dans.c: 31: ADCON1 = 0b10101101;
 18952                           
 18953                           ;incstack = 0
 18954  01512C  0EAD               	movlw	173
 18955  01512E  6EC1               	movwf	4033,c	;volatile
 18956                           
 18957                           ;dans.c: 32: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 18958  015130  0E00               	movlw	0
 18959  015132  0101               	movlb	1	; () banked
 18960  015134  6F43               	movwf	(_thisReading+1)& (0+255),b
 18961  015136  0E00               	movlw	0
 18962  015138  6F42               	movwf	_thisReading& (0+255),b
 18963  01513A  D010               	goto	l2321
 18964  01513C                     
 18965                           ;dans.c: 33: readings[thisReading] = 0;
 18966                           
 18967                           ; BSR set to: 1
 18968  01513C  90D8               	bcf	status,0,c
 18969  01513E  0101               	movlb	1	; () banked
 18970  015140  3542               	rlcf	_thisReading& (0+255),w,b
 18971  015142  6ED9               	movwf	fsr2l,c
 18972  015144  3543               	rlcf	(_thisReading+1)& (0+255),w,b
 18973  015146  6EDA               	movwf	fsr2h,c
 18974  015148  0E6E               	movlw	low _readings
 18975  01514A  26D9               	addwf	fsr2l,f,c
 18976  01514C  0E02               	movlw	high _readings
 18977  01514E  22DA               	addwfc	fsr2h,f,c
 18978  015150  0E00               	movlw	0
 18979  015152  6EDE               	movwf	postinc2,c
 18980  015154  0E00               	movlw	0
 18981  015156  6EDD               	movwf	postdec2,c
 18982                           
 18983                           ; BSR set to: 1
 18984  015158  4B42               	infsnz	_thisReading& (0+255),f,b
 18985  01515A  2B43               	incf	(_thisReading+1)& (0+255),f,b
 18986  01515C                     l2321:
 18987                           
 18988                           ; BSR set to: 1
 18989                           
 18990                           ; BSR set to: 1
 18991  01515C  51F1               	movf	_numReadings& (0+255),w,b
 18992  01515E  5D42               	subwf	_thisReading& (0+255),w,b
 18993  015160  5143               	movf	(_thisReading+1)& (0+255),w,b
 18994  015162  0A80               	xorlw	128
 18995  015164  0100               	movlb	0	; () banked
 18996  015166  6F60               	movwf	??_InitADC& (0+255),b
 18997  015168  0101               	movlb	1	; () banked
 18998  01516A  51F2               	movf	(_numReadings+1)& (0+255),w,b
 18999  01516C  0A80               	xorlw	128
 19000  01516E  0100               	movlb	0	; () banked
 19001  015170  5960               	subwfb	??_InitADC& (0+255),w,b
 19002  015172  B0D8               	btfsc	status,0,c
 19003  015174  0012               	return	
 19004  015176  D7E2               	goto	l2322
 19005  015178                     __end_of_InitADC:
 19006                           	opt stack 0
 19007                           tosu	equ	0xFFF
 19008                           tosh	equ	0xFFE
 19009                           tosl	equ	0xFFD
 19010                           pclath	equ	0xFFA
 19011                           tblptru	equ	0xFF8
 19012                           tblptrh	equ	0xFF7
 19013                           tblptrl	equ	0xFF6
 19014                           tablat	equ	0xFF5
 19015                           prodh	equ	0xFF4
 19016                           prodl	equ	0xFF3
 19017                           intcon	equ	0xFF2
 19018                           postinc0	equ	0xFEE
 19019                           wreg	equ	0xFE8
 19020                           postdec1	equ	0xFE5
 19021                           fsr1h	equ	0xFE2
 19022                           fsr1l	equ	0xFE1
 19023                           indf2	equ	0xFDF
 19024                           postinc2	equ	0xFDE
 19025                           postdec2	equ	0xFDD
 19026                           plusw2	equ	0xFDB
 19027                           fsr2h	equ	0xFDA
 19028                           fsr2l	equ	0xFD9
 19029                           status	equ	0xFD8
 19030                           
 19031 ;; *************** function _ISR_Enable *****************
 19032 ;; Defined at:
 19033 ;;		line 27 in file "Library/ISR.c"
 19034 ;; Parameters:    Size  Location     Type
 19035 ;;		None
 19036 ;; Auto vars:     Size  Location     Type
 19037 ;;		None
 19038 ;; Return value:  Size  Location     Type
 19039 ;;                  1    wreg      void 
 19040 ;; Registers used:
 19041 ;;		None
 19042 ;; Tracked objects:
 19043 ;;		On entry : 0/0
 19044 ;;		On exit  : 0/0
 19045 ;;		Unchanged: 0/0
 19046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19051 ;;Total ram usage:        0 bytes
 19052 ;; Hardware stack levels used:    1
 19053 ;; Hardware stack levels required when called:    7
 19054 ;; This function calls:
 19055 ;;		Nothing
 19056 ;; This function is called by:
 19057 ;;		_main
 19058 ;; This function uses a non-reentrant model
 19059 ;;
 19060                           
 19061                           	psect	text83
 19062  015B66                     __ptext83:
 19063                           	opt stack 0
 19064  015B66                     _ISR_Enable:
 19065                           	opt stack 23
 19066                           
 19067                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19068                           
 19069                           ; BSR set to: 0
 19070                           ;incstack = 0
 19071  015B66  8CF2               	bsf	intcon,6,c	;volatile
 19072                           
 19073                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19074  015B68  8EF2               	bsf	intcon,7,c	;volatile
 19075                           
 19076                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19077  015B6A  88F2               	bsf	intcon,4,c	;volatile
 19078                           
 19079                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19080  015B6C  92F2               	bcf	intcon,1,c	;volatile
 19081  015B6E  0012               	return		;funcret
 19082  015B70                     __end_of_ISR_Enable:
 19083                           	opt stack 0
 19084                           tosu	equ	0xFFF
 19085                           tosh	equ	0xFFE
 19086                           tosl	equ	0xFFD
 19087                           pclath	equ	0xFFA
 19088                           tblptru	equ	0xFF8
 19089                           tblptrh	equ	0xFF7
 19090                           tblptrl	equ	0xFF6
 19091                           tablat	equ	0xFF5
 19092                           prodh	equ	0xFF4
 19093                           prodl	equ	0xFF3
 19094                           intcon	equ	0xFF2
 19095                           postinc0	equ	0xFEE
 19096                           wreg	equ	0xFE8
 19097                           postdec1	equ	0xFE5
 19098                           fsr1h	equ	0xFE2
 19099                           fsr1l	equ	0xFE1
 19100                           indf2	equ	0xFDF
 19101                           postinc2	equ	0xFDE
 19102                           postdec2	equ	0xFDD
 19103                           plusw2	equ	0xFDB
 19104                           fsr2h	equ	0xFDA
 19105                           fsr2l	equ	0xFD9
 19106                           status	equ	0xFD8
 19107                           
 19108 ;; *************** function _HMI_Poll *****************
 19109 ;; Defined at:
 19110 ;;		line 252 in file "HMI.c"
 19111 ;; Parameters:    Size  Location     Type
 19112 ;;		None
 19113 ;; Auto vars:     Size  Location     Type
 19114 ;;		None
 19115 ;; Return value:  Size  Location     Type
 19116 ;;                  1    wreg      void 
 19117 ;; Registers used:
 19118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 19119 ;; Tracked objects:
 19120 ;;		On entry : 0/0
 19121 ;;		On exit  : 0/0
 19122 ;;		Unchanged: 0/0
 19123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19128 ;;Total ram usage:        0 bytes
 19129 ;; Hardware stack levels used:    1
 19130 ;; Hardware stack levels required when called:   15
 19131 ;; This function calls:
 19132 ;;		_Button_Poll
 19133 ;; This function is called by:
 19134 ;;		_main
 19135 ;; This function uses a non-reentrant model
 19136 ;;
 19137                           
 19138                           	psect	text84
 19139  014CCC                     __ptext84:
 19140                           	opt stack 0
 19141  014CCC                     _HMI_Poll:
 19142                           	opt stack 15
 19143                           
 19144                           ;HMI.c: 254: TRISE = 0xFC;
 19145                           
 19146                           ;incstack = 0
 19147  014CCC  0EFC               	movlw	252
 19148  014CCE  6E96               	movwf	3990,c	;volatile
 19149                           
 19150                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 19151  014CD0  0EB2               	movlw	low (_HMIBoard+48)
 19152  014CD2  0100               	movlb	0	; () banked
 19153  014CD4  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19154  014CD6  0E02               	movlw	high (_HMIBoard+48)
 19155  014CD8  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19156  014CDA  0E01               	movlw	1
 19157  014CDC  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19158  014CDE  ECE3  F099         	call	_Button_Poll	;wreg free
 19159                           
 19160                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 19161  014CE2  0E94               	movlw	low (_HMIBoard+18)
 19162  014CE4  0100               	movlb	0	; () banked
 19163  014CE6  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19164  014CE8  0E02               	movlw	high (_HMIBoard+18)
 19165  014CEA  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19166  014CEC  0E01               	movlw	1
 19167  014CEE  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19168  014CF0  ECE3  F099         	call	_Button_Poll	;wreg free
 19169                           
 19170                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 19171  014CF4  0E8A               	movlw	low (_HMIBoard+8)
 19172  014CF6  0100               	movlb	0	; () banked
 19173  014CF8  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19174  014CFA  0E02               	movlw	high (_HMIBoard+8)
 19175  014CFC  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19176  014CFE  0E01               	movlw	1
 19177  014D00  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19178  014D02  ECE3  F099         	call	_Button_Poll	;wreg free
 19179                           
 19180                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 19181  014D06  0E9E               	movlw	low (_HMIBoard+28)
 19182  014D08  0100               	movlb	0	; () banked
 19183  014D0A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19184  014D0C  0E02               	movlw	high (_HMIBoard+28)
 19185  014D0E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19186  014D10  0E01               	movlw	1
 19187  014D12  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19188  014D14  ECE3  F099         	call	_Button_Poll	;wreg free
 19189                           
 19190                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 19191  014D18  0EA8               	movlw	low (_HMIBoard+38)
 19192  014D1A  0100               	movlb	0	; () banked
 19193  014D1C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19194  014D1E  0E02               	movlw	high (_HMIBoard+38)
 19195  014D20  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19196  014D22  0E01               	movlw	1
 19197  014D24  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19198  014D26  ECE3  F099         	call	_Button_Poll	;wreg free
 19199  014D2A  0012               	return		;funcret
 19200  014D2C                     __end_of_HMI_Poll:
 19201                           	opt stack 0
 19202                           tosu	equ	0xFFF
 19203                           tosh	equ	0xFFE
 19204                           tosl	equ	0xFFD
 19205                           pclath	equ	0xFFA
 19206                           tblptru	equ	0xFF8
 19207                           tblptrh	equ	0xFF7
 19208                           tblptrl	equ	0xFF6
 19209                           tablat	equ	0xFF5
 19210                           prodh	equ	0xFF4
 19211                           prodl	equ	0xFF3
 19212                           intcon	equ	0xFF2
 19213                           postinc0	equ	0xFEE
 19214                           wreg	equ	0xFE8
 19215                           postdec1	equ	0xFE5
 19216                           fsr1h	equ	0xFE2
 19217                           fsr1l	equ	0xFE1
 19218                           indf2	equ	0xFDF
 19219                           postinc2	equ	0xFDE
 19220                           postdec2	equ	0xFDD
 19221                           plusw2	equ	0xFDB
 19222                           fsr2h	equ	0xFDA
 19223                           fsr2l	equ	0xFD9
 19224                           status	equ	0xFD8
 19225                           
 19226 ;; *************** function _Button_Poll *****************
 19227 ;; Defined at:
 19228 ;;		line 57 in file "Library/Button.c"
 19229 ;; Parameters:    Size  Location     Type
 19230 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 19231 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 19232 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 19233 ;; Auto vars:     Size  Location     Type
 19234 ;;  Pin             1   35[BANK0 ] unsigned char 
 19235 ;; Return value:  Size  Location     Type
 19236 ;;                  1    wreg      unsigned char 
 19237 ;; Registers used:
 19238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 19239 ;; Tracked objects:
 19240 ;;		On entry : 0/0
 19241 ;;		On exit  : 0/0
 19242 ;;		Unchanged: 0/0
 19243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19244 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19246 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19247 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19248 ;;Total ram usage:        9 bytes
 19249 ;; Hardware stack levels used:    1
 19250 ;; Hardware stack levels required when called:   14
 19251 ;; This function calls:
 19252 ;;		_Event_DIPSwitch
 19253 ;;		_Event_NULL
 19254 ;;		_Event_TestButton
 19255 ;;		_HMI_DIPSwitch
 19256 ;;		_HMI_DownSwitch
 19257 ;;		_HMI_LeftSwitch
 19258 ;;		_HMI_RightSwitch
 19259 ;;		_HMI_UpSwitch
 19260 ;;		_MXK_DIPSwitch
 19261 ;;		_MXK_TestButton
 19262 ;; This function is called by:
 19263 ;;		_HMI_Poll
 19264 ;;		_MXK_Poll
 19265 ;; This function uses a non-reentrant model
 19266 ;;
 19267                           
 19268                           	psect	text85
 19269  0133C6                     __ptext85:
 19270                           	opt stack 0
 19271  0133C6                     _Button_Poll:
 19272                           	opt stack 15
 19273                           
 19274                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 19275                           
 19276                           ;incstack = 0
 19277  0133C6  0100               	movlb	0	; () banked
 19278  0133C8  EE20 F007          	lfsr	2,7
 19279  0133CC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19280  0133CE  26D9               	addwf	fsr2l,f,c
 19281  0133D0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19282  0133D2  22DA               	addwfc	fsr2h,f,c
 19283  0133D4  D801               	call	u12638
 19284  0133D6  D00A               	goto	u12639
 19285  0133D8                     u12638:
 19286  0133D8  0005               	push	
 19287  0133DA  6EFA               	movwf	pclath,c
 19288  0133DC  50DE               	movf	postinc2,w,c
 19289  0133DE  6EFD               	movwf	tosl,c
 19290  0133E0  50DE               	movf	postinc2,w,c
 19291  0133E2  6EFE               	movwf	tosh,c
 19292  0133E4  50DE               	movf	postinc2,w,c
 19293  0133E6  6EFF               	movwf	tosu,c
 19294  0133E8  50FA               	movf	pclath,w,c
 19295  0133EA  0012               	return		;indir
 19296  0133EC                     u12639:
 19297  0133EC  0100               	movlb	0	; () banked
 19298  0133EE  6F83               	movwf	Button_Poll@Pin& (0+255),b
 19299                           
 19300                           ; BSR set to: 0
 19301                           ;Button.c: 61: if (pButton->mState == Pin)
 19302  0133F0  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 19303  0133F4  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 19304  0133F8  5183               	movf	Button_Poll@Pin& (0+255),w,b
 19305  0133FA  18DE               	xorwf	postinc2,w,c
 19306  0133FC  A4D8               	btfss	status,2,c
 19307  0133FE  D01C               	goto	l11
 19308                           
 19309                           ; BSR set to: 0
 19310                           ;Button.c: 62: {
 19311                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 19312  013400  EE20 F001          	lfsr	2,1
 19313  013404  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19314  013406  26D9               	addwf	fsr2l,f,c
 19315  013408  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19316  01340A  22DA               	addwfc	fsr2h,f,c
 19317  01340C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 19318  01340E  5CDE               	subwf	postinc2,w,c
 19319  013410  B0D8               	btfsc	status,0,c
 19320  013412  D009               	goto	l12
 19321                           
 19322                           ; BSR set to: 0
 19323                           ;Button.c: 66: pButton->mCount = 0;
 19324  013414  EE20 F001          	lfsr	2,1
 19325  013418  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19326  01341A  26D9               	addwf	fsr2l,f,c
 19327  01341C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19328  01341E  22DA               	addwfc	fsr2h,f,c
 19329  013420  0E00               	movlw	0
 19330  013422  6EDF               	movwf	indf2,c
 19331  013424  0012               	return	
 19332  013426                     l12:
 19333                           
 19334                           ; BSR set to: 0
 19335                           ;Button.c: 67: else
 19336                           ;Button.c: 68: pButton->mCount -= pIncrement;
 19337                           
 19338                           ; BSR set to: 0
 19339  013426  EE20 F001          	lfsr	2,1
 19340  01342A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19341  01342C  26D9               	addwf	fsr2l,f,c
 19342  01342E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19343  013430  22DA               	addwfc	fsr2h,f,c
 19344  013432  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 19345  013434  5EDF               	subwf	indf2,f,c
 19346                           
 19347                           ; BSR set to: 0
 19348                           ;Button.c: 69: }
 19349  013436  0012               	return	
 19350  013438                     l11:
 19351                           
 19352                           ; BSR set to: 0
 19353                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 19354                           
 19355                           ; BSR set to: 0
 19356  013438  EE20 F001          	lfsr	2,1
 19357  01343C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19358  01343E  26D9               	addwf	fsr2l,f,c
 19359  013440  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19360  013442  22DA               	addwfc	fsr2h,f,c
 19361  013444  50DF               	movf	indf2,w,c
 19362  013446  6F7E               	movwf	??_Button_Poll& (0+255),b
 19363  013448  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 19364  01344A  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 19365  01344C  277E               	addwf	??_Button_Poll& (0+255),f,b
 19366  01344E  0E00               	movlw	0
 19367  013450  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 19368  013452  EE20 F001          	lfsr	2,1
 19369  013456  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19370  013458  26D9               	addwf	fsr2l,f,c
 19371  01345A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19372  01345C  22DA               	addwfc	fsr2h,f,c
 19373  01345E  50DF               	movf	indf2,w,c
 19374  013460  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 19375  013462  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 19376  013464  517E               	movf	??_Button_Poll& (0+255),w,b
 19377  013466  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 19378  013468  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 19379  01346A  0A80               	xorlw	128
 19380  01346C  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 19381  01346E  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 19382  013470  0A80               	xorlw	128
 19383  013472  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 19384  013474  B0D8               	btfsc	status,0,c
 19385  013476  0012               	return	
 19386                           
 19387                           ; BSR set to: 0
 19388                           ;Button.c: 73: {
 19389                           ;Button.c: 75: pButton->mCount += pIncrement;
 19390  013478  EE20 F001          	lfsr	2,1
 19391  01347C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19392  01347E  26D9               	addwf	fsr2l,f,c
 19393  013480  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19394  013482  22DA               	addwfc	fsr2h,f,c
 19395  013484  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 19396  013486  26DF               	addwf	indf2,f,c
 19397                           
 19398                           ; BSR set to: 0
 19399                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 19400  013488  EE20 F002          	lfsr	2,2
 19401  01348C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19402  01348E  26D9               	addwf	fsr2l,f,c
 19403  013490  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19404  013492  22DA               	addwfc	fsr2h,f,c
 19405  013494  EE10 F001          	lfsr	1,1
 19406  013498  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19407  01349A  26E1               	addwf	fsr1l,f,c
 19408  01349C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19409  01349E  22E2               	addwfc	fsr1h,f,c
 19410  0134A0  50E7               	movf	indf1,w,c
 19411  0134A2  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 19412  0134A4  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 19413  0134A6  50DE               	movf	postinc2,w,c
 19414  0134A8  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 19415  0134AA  50DE               	movf	postinc2,w,c
 19416  0134AC  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 19417  0134AE  A0D8               	btfss	status,0,c
 19418  0134B0  0012               	return	
 19419                           
 19420                           ; BSR set to: 0
 19421                           ;Button.c: 77: {
 19422                           ;Button.c: 79: pButton->mState = Pin;
 19423  0134B2  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 19424  0134B6  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 19425  0134BA  C083  FFDF         	movff	Button_Poll@Pin,indf2
 19426                           
 19427                           ; BSR set to: 0
 19428                           ;Button.c: 80: pButton->mCount = 0;
 19429  0134BE  EE20 F001          	lfsr	2,1
 19430  0134C2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19431  0134C4  26D9               	addwf	fsr2l,f,c
 19432  0134C6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19433  0134C8  22DA               	addwfc	fsr2h,f,c
 19434  0134CA  0E00               	movlw	0
 19435  0134CC  6EDF               	movwf	indf2,c
 19436                           
 19437                           ; BSR set to: 0
 19438                           ;Button.c: 83: pButton->mFunction(Pin);
 19439  0134CE  EE20 F004          	lfsr	2,4
 19440  0134D2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19441  0134D4  26D9               	addwf	fsr2l,f,c
 19442  0134D6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19443  0134D8  22DA               	addwfc	fsr2h,f,c
 19444  0134DA  D801               	call	u12688
 19445  0134DC  0012               	return	
 19446  0134DE                     u12688:
 19447  0134DE  0005               	push	
 19448  0134E0  6EFA               	movwf	pclath,c
 19449  0134E2  50DE               	movf	postinc2,w,c
 19450  0134E4  6EFD               	movwf	tosl,c
 19451  0134E6  50DE               	movf	postinc2,w,c
 19452  0134E8  6EFE               	movwf	tosh,c
 19453  0134EA  50DE               	movf	postinc2,w,c
 19454  0134EC  6EFF               	movwf	tosu,c
 19455  0134EE  50FA               	movf	pclath,w,c
 19456  0134F0  5183               	movf	Button_Poll@Pin& (0+255),w,b
 19457  0134F2  0012               	return		;indir
 19458  0134F4                     __end_of_Button_Poll:
 19459                           	opt stack 0
 19460                           tosu	equ	0xFFF
 19461                           tosh	equ	0xFFE
 19462                           tosl	equ	0xFFD
 19463                           pclath	equ	0xFFA
 19464                           tblptru	equ	0xFF8
 19465                           tblptrh	equ	0xFF7
 19466                           tblptrl	equ	0xFF6
 19467                           tablat	equ	0xFF5
 19468                           prodh	equ	0xFF4
 19469                           prodl	equ	0xFF3
 19470                           intcon	equ	0xFF2
 19471                           postinc0	equ	0xFEE
 19472                           wreg	equ	0xFE8
 19473                           indf1	equ	0xFE7
 19474                           postdec1	equ	0xFE5
 19475                           fsr1h	equ	0xFE2
 19476                           fsr1l	equ	0xFE1
 19477                           indf2	equ	0xFDF
 19478                           postinc2	equ	0xFDE
 19479                           postdec2	equ	0xFDD
 19480                           plusw2	equ	0xFDB
 19481                           fsr2h	equ	0xFDA
 19482                           fsr2l	equ	0xFD9
 19483                           status	equ	0xFD8
 19484                           
 19485 ;; *************** function _MXK_DIPSwitch *****************
 19486 ;; Defined at:
 19487 ;;		line 24 in file "Library/MXK.c"
 19488 ;; Parameters:    Size  Location     Type
 19489 ;;		None
 19490 ;; Auto vars:     Size  Location     Type
 19491 ;;		None
 19492 ;; Return value:  Size  Location     Type
 19493 ;;                  1    wreg      unsigned char 
 19494 ;; Registers used:
 19495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19496 ;; Tracked objects:
 19497 ;;		On entry : 0/0
 19498 ;;		On exit  : 0/0
 19499 ;;		Unchanged: 0/0
 19500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19505 ;;Total ram usage:        0 bytes
 19506 ;; Hardware stack levels used:    1
 19507 ;; Hardware stack levels required when called:    8
 19508 ;; This function calls:
 19509 ;;		_Port_GetQuad
 19510 ;; This function is called by:
 19511 ;;		_FunctInitButton
 19512 ;;		_Button_Poll
 19513 ;;		_main
 19514 ;; This function uses a non-reentrant model
 19515 ;;
 19516                           
 19517                           	psect	text86
 19518  015A60                     __ptext86:
 19519                           	opt stack 0
 19520  015A60                     _MXK_DIPSwitch:
 19521                           	opt stack 22
 19522                           
 19523                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 19524                           
 19525                           ;incstack = 0
 19526  015A60  0E8B               	movlw	low _PortD
 19527  015A62  0100               	movlb	0	; () banked
 19528  015A64  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 19529  015A66  0E01               	movlw	high _PortD
 19530  015A68  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 19531  015A6A  0E00               	movlw	0
 19532  015A6C  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 19533  015A6E  EC18  F0AA         	call	_Port_GetQuad
 19534  015A72  0012               	return	
 19535  015A74                     __end_of_MXK_DIPSwitch:
 19536                           	opt stack 0
 19537                           tosu	equ	0xFFF
 19538                           tosh	equ	0xFFE
 19539                           tosl	equ	0xFFD
 19540                           pclath	equ	0xFFA
 19541                           tblptru	equ	0xFF8
 19542                           tblptrh	equ	0xFF7
 19543                           tblptrl	equ	0xFF6
 19544                           tablat	equ	0xFF5
 19545                           prodh	equ	0xFF4
 19546                           prodl	equ	0xFF3
 19547                           intcon	equ	0xFF2
 19548                           postinc0	equ	0xFEE
 19549                           wreg	equ	0xFE8
 19550                           indf1	equ	0xFE7
 19551                           postdec1	equ	0xFE5
 19552                           fsr1h	equ	0xFE2
 19553                           fsr1l	equ	0xFE1
 19554                           indf2	equ	0xFDF
 19555                           postinc2	equ	0xFDE
 19556                           postdec2	equ	0xFDD
 19557                           plusw2	equ	0xFDB
 19558                           fsr2h	equ	0xFDA
 19559                           fsr2l	equ	0xFD9
 19560                           status	equ	0xFD8
 19561                           
 19562 ;; *************** function _HMI_DIPSwitch *****************
 19563 ;; Defined at:
 19564 ;;		line 47 in file "HMI.c"
 19565 ;; Parameters:    Size  Location     Type
 19566 ;;		None
 19567 ;; Auto vars:     Size  Location     Type
 19568 ;;		None
 19569 ;; Return value:  Size  Location     Type
 19570 ;;                  1    wreg      unsigned char 
 19571 ;; Registers used:
 19572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19573 ;; Tracked objects:
 19574 ;;		On entry : 0/0
 19575 ;;		On exit  : 0/0
 19576 ;;		Unchanged: 0/0
 19577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19582 ;;Total ram usage:        0 bytes
 19583 ;; Hardware stack levels used:    1
 19584 ;; Hardware stack levels required when called:    8
 19585 ;; This function calls:
 19586 ;;		_Port_GetQuad
 19587 ;; This function is called by:
 19588 ;;		_HMI_Init
 19589 ;;		_Button_Poll
 19590 ;;		_main
 19591 ;; This function uses a non-reentrant model
 19592 ;;
 19593                           
 19594                           	psect	text87
 19595  015A74                     __ptext87:
 19596                           	opt stack 0
 19597  015A74                     _HMI_DIPSwitch:
 19598                           	opt stack 20
 19599                           
 19600                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 19601                           
 19602                           ;incstack = 0
 19603  015A74  0E81               	movlw	low _PortE
 19604  015A76  0100               	movlb	0	; () banked
 19605  015A78  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 19606  015A7A  0E01               	movlw	high _PortE
 19607  015A7C  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 19608  015A7E  0E00               	movlw	0
 19609  015A80  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 19610  015A82  EC18  F0AA         	call	_Port_GetQuad	;wreg free
 19611  015A86  0012               	return	
 19612  015A88                     __end_of_HMI_DIPSwitch:
 19613                           	opt stack 0
 19614                           tosu	equ	0xFFF
 19615                           tosh	equ	0xFFE
 19616                           tosl	equ	0xFFD
 19617                           pclath	equ	0xFFA
 19618                           tblptru	equ	0xFF8
 19619                           tblptrh	equ	0xFF7
 19620                           tblptrl	equ	0xFF6
 19621                           tablat	equ	0xFF5
 19622                           prodh	equ	0xFF4
 19623                           prodl	equ	0xFF3
 19624                           intcon	equ	0xFF2
 19625                           postinc0	equ	0xFEE
 19626                           wreg	equ	0xFE8
 19627                           indf1	equ	0xFE7
 19628                           postdec1	equ	0xFE5
 19629                           fsr1h	equ	0xFE2
 19630                           fsr1l	equ	0xFE1
 19631                           indf2	equ	0xFDF
 19632                           postinc2	equ	0xFDE
 19633                           postdec2	equ	0xFDD
 19634                           plusw2	equ	0xFDB
 19635                           fsr2h	equ	0xFDA
 19636                           fsr2l	equ	0xFD9
 19637                           status	equ	0xFD8
 19638                           
 19639 ;; *************** function _HMI_DownSwitch *****************
 19640 ;; Defined at:
 19641 ;;		line 42 in file "HMI.c"
 19642 ;; Parameters:    Size  Location     Type
 19643 ;;		None
 19644 ;; Auto vars:     Size  Location     Type
 19645 ;;		None
 19646 ;; Return value:  Size  Location     Type
 19647 ;;                  1    wreg      unsigned char 
 19648 ;; Registers used:
 19649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19650 ;; Tracked objects:
 19651 ;;		On entry : 0/0
 19652 ;;		On exit  : 0/0
 19653 ;;		Unchanged: 0/0
 19654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19659 ;;Total ram usage:        0 bytes
 19660 ;; Hardware stack levels used:    1
 19661 ;; Hardware stack levels required when called:    8
 19662 ;; This function calls:
 19663 ;;		_Port_GetPin
 19664 ;; This function is called by:
 19665 ;;		_HMI_Init
 19666 ;;		_Button_Poll
 19667 ;;		_main
 19668 ;; This function uses a non-reentrant model
 19669 ;;
 19670                           
 19671                           	psect	text88
 19672  015A88                     __ptext88:
 19673                           	opt stack 0
 19674  015A88                     _HMI_DownSwitch:
 19675                           	opt stack 20
 19676                           
 19677                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 19678                           
 19679                           ;incstack = 0
 19680  015A88  0E81               	movlw	low _PortE
 19681  015A8A  0100               	movlb	0	; () banked
 19682  015A8C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19683  015A8E  0E01               	movlw	high _PortE
 19684  015A90  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19685  015A92  0E06               	movlw	6
 19686  015A94  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19687  015A96  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19688  015A9A  0012               	return	
 19689  015A9C                     __end_of_HMI_DownSwitch:
 19690                           	opt stack 0
 19691                           tosu	equ	0xFFF
 19692                           tosh	equ	0xFFE
 19693                           tosl	equ	0xFFD
 19694                           pclath	equ	0xFFA
 19695                           tblptru	equ	0xFF8
 19696                           tblptrh	equ	0xFF7
 19697                           tblptrl	equ	0xFF6
 19698                           tablat	equ	0xFF5
 19699                           prodh	equ	0xFF4
 19700                           prodl	equ	0xFF3
 19701                           intcon	equ	0xFF2
 19702                           postinc0	equ	0xFEE
 19703                           wreg	equ	0xFE8
 19704                           indf1	equ	0xFE7
 19705                           postdec1	equ	0xFE5
 19706                           fsr1h	equ	0xFE2
 19707                           fsr1l	equ	0xFE1
 19708                           indf2	equ	0xFDF
 19709                           postinc2	equ	0xFDE
 19710                           postdec2	equ	0xFDD
 19711                           plusw2	equ	0xFDB
 19712                           fsr2h	equ	0xFDA
 19713                           fsr2l	equ	0xFD9
 19714                           status	equ	0xFD8
 19715                           
 19716 ;; *************** function _HMI_UpSwitch *****************
 19717 ;; Defined at:
 19718 ;;		line 37 in file "HMI.c"
 19719 ;; Parameters:    Size  Location     Type
 19720 ;;		None
 19721 ;; Auto vars:     Size  Location     Type
 19722 ;;		None
 19723 ;; Return value:  Size  Location     Type
 19724 ;;                  1    wreg      unsigned char 
 19725 ;; Registers used:
 19726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19727 ;; Tracked objects:
 19728 ;;		On entry : 0/0
 19729 ;;		On exit  : 0/0
 19730 ;;		Unchanged: 0/0
 19731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19736 ;;Total ram usage:        0 bytes
 19737 ;; Hardware stack levels used:    1
 19738 ;; Hardware stack levels required when called:    8
 19739 ;; This function calls:
 19740 ;;		_Port_GetPin
 19741 ;; This function is called by:
 19742 ;;		_HMI_Init
 19743 ;;		_Button_Poll
 19744 ;;		_main
 19745 ;; This function uses a non-reentrant model
 19746 ;;
 19747                           
 19748                           	psect	text89
 19749  015A9C                     __ptext89:
 19750                           	opt stack 0
 19751  015A9C                     _HMI_UpSwitch:
 19752                           	opt stack 22
 19753                           
 19754                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 19755                           
 19756                           ;incstack = 0
 19757  015A9C  0E81               	movlw	low _PortE
 19758  015A9E  0100               	movlb	0	; () banked
 19759  015AA0  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19760  015AA2  0E01               	movlw	high _PortE
 19761  015AA4  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19762  015AA6  0E07               	movlw	7
 19763  015AA8  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19764  015AAA  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19765  015AAE  0012               	return	
 19766  015AB0                     __end_of_HMI_UpSwitch:
 19767                           	opt stack 0
 19768                           tosu	equ	0xFFF
 19769                           tosh	equ	0xFFE
 19770                           tosl	equ	0xFFD
 19771                           pclath	equ	0xFFA
 19772                           tblptru	equ	0xFF8
 19773                           tblptrh	equ	0xFF7
 19774                           tblptrl	equ	0xFF6
 19775                           tablat	equ	0xFF5
 19776                           prodh	equ	0xFF4
 19777                           prodl	equ	0xFF3
 19778                           intcon	equ	0xFF2
 19779                           postinc0	equ	0xFEE
 19780                           wreg	equ	0xFE8
 19781                           indf1	equ	0xFE7
 19782                           postdec1	equ	0xFE5
 19783                           fsr1h	equ	0xFE2
 19784                           fsr1l	equ	0xFE1
 19785                           indf2	equ	0xFDF
 19786                           postinc2	equ	0xFDE
 19787                           postdec2	equ	0xFDD
 19788                           plusw2	equ	0xFDB
 19789                           fsr2h	equ	0xFDA
 19790                           fsr2l	equ	0xFD9
 19791                           status	equ	0xFD8
 19792                           
 19793 ;; *************** function _HMI_RightSwitch *****************
 19794 ;; Defined at:
 19795 ;;		line 32 in file "HMI.c"
 19796 ;; Parameters:    Size  Location     Type
 19797 ;;		None
 19798 ;; Auto vars:     Size  Location     Type
 19799 ;;		None
 19800 ;; Return value:  Size  Location     Type
 19801 ;;                  1    wreg      unsigned char 
 19802 ;; Registers used:
 19803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19804 ;; Tracked objects:
 19805 ;;		On entry : 0/0
 19806 ;;		On exit  : 0/0
 19807 ;;		Unchanged: 0/0
 19808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19813 ;;Total ram usage:        0 bytes
 19814 ;; Hardware stack levels used:    1
 19815 ;; Hardware stack levels required when called:    8
 19816 ;; This function calls:
 19817 ;;		_Port_GetPin
 19818 ;; This function is called by:
 19819 ;;		_HMI_Init
 19820 ;;		_Button_Poll
 19821 ;;		_main
 19822 ;; This function uses a non-reentrant model
 19823 ;;
 19824                           
 19825                           	psect	text90
 19826  015AB0                     __ptext90:
 19827                           	opt stack 0
 19828  015AB0                     _HMI_RightSwitch:
 19829                           	opt stack 22
 19830                           
 19831                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 19832                           
 19833                           ;incstack = 0
 19834  015AB0  0E81               	movlw	low _PortE
 19835  015AB2  0100               	movlb	0	; () banked
 19836  015AB4  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19837  015AB6  0E01               	movlw	high _PortE
 19838  015AB8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19839  015ABA  0E04               	movlw	4
 19840  015ABC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19841  015ABE  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19842  015AC2  0012               	return	
 19843  015AC4                     __end_of_HMI_RightSwitch:
 19844                           	opt stack 0
 19845                           tosu	equ	0xFFF
 19846                           tosh	equ	0xFFE
 19847                           tosl	equ	0xFFD
 19848                           pclath	equ	0xFFA
 19849                           tblptru	equ	0xFF8
 19850                           tblptrh	equ	0xFF7
 19851                           tblptrl	equ	0xFF6
 19852                           tablat	equ	0xFF5
 19853                           prodh	equ	0xFF4
 19854                           prodl	equ	0xFF3
 19855                           intcon	equ	0xFF2
 19856                           postinc0	equ	0xFEE
 19857                           wreg	equ	0xFE8
 19858                           indf1	equ	0xFE7
 19859                           postdec1	equ	0xFE5
 19860                           fsr1h	equ	0xFE2
 19861                           fsr1l	equ	0xFE1
 19862                           indf2	equ	0xFDF
 19863                           postinc2	equ	0xFDE
 19864                           postdec2	equ	0xFDD
 19865                           plusw2	equ	0xFDB
 19866                           fsr2h	equ	0xFDA
 19867                           fsr2l	equ	0xFD9
 19868                           status	equ	0xFD8
 19869                           
 19870 ;; *************** function _HMI_LeftSwitch *****************
 19871 ;; Defined at:
 19872 ;;		line 27 in file "HMI.c"
 19873 ;; Parameters:    Size  Location     Type
 19874 ;;		None
 19875 ;; Auto vars:     Size  Location     Type
 19876 ;;		None
 19877 ;; Return value:  Size  Location     Type
 19878 ;;                  1    wreg      unsigned char 
 19879 ;; Registers used:
 19880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19881 ;; Tracked objects:
 19882 ;;		On entry : 0/0
 19883 ;;		On exit  : 0/0
 19884 ;;		Unchanged: 0/0
 19885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19890 ;;Total ram usage:        0 bytes
 19891 ;; Hardware stack levels used:    1
 19892 ;; Hardware stack levels required when called:    8
 19893 ;; This function calls:
 19894 ;;		_Port_GetPin
 19895 ;; This function is called by:
 19896 ;;		_HMI_Init
 19897 ;;		_Button_Poll
 19898 ;;		_main
 19899 ;; This function uses a non-reentrant model
 19900 ;;
 19901                           
 19902                           	psect	text91
 19903  015AC4                     __ptext91:
 19904                           	opt stack 0
 19905  015AC4                     _HMI_LeftSwitch:
 19906                           	opt stack 20
 19907                           
 19908                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 19909                           
 19910                           ;incstack = 0
 19911  015AC4  0E81               	movlw	low _PortE
 19912  015AC6  0100               	movlb	0	; () banked
 19913  015AC8  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19914  015ACA  0E01               	movlw	high _PortE
 19915  015ACC  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19916  015ACE  0E05               	movlw	5
 19917  015AD0  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19918  015AD2  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19919  015AD6  0012               	return	
 19920  015AD8                     __end_of_HMI_LeftSwitch:
 19921                           	opt stack 0
 19922                           tosu	equ	0xFFF
 19923                           tosh	equ	0xFFE
 19924                           tosl	equ	0xFFD
 19925                           pclath	equ	0xFFA
 19926                           tblptru	equ	0xFF8
 19927                           tblptrh	equ	0xFF7
 19928                           tblptrl	equ	0xFF6
 19929                           tablat	equ	0xFF5
 19930                           prodh	equ	0xFF4
 19931                           prodl	equ	0xFF3
 19932                           intcon	equ	0xFF2
 19933                           postinc0	equ	0xFEE
 19934                           wreg	equ	0xFE8
 19935                           indf1	equ	0xFE7
 19936                           postdec1	equ	0xFE5
 19937                           fsr1h	equ	0xFE2
 19938                           fsr1l	equ	0xFE1
 19939                           indf2	equ	0xFDF
 19940                           postinc2	equ	0xFDE
 19941                           postdec2	equ	0xFDD
 19942                           plusw2	equ	0xFDB
 19943                           fsr2h	equ	0xFDA
 19944                           fsr2l	equ	0xFD9
 19945                           status	equ	0xFD8
 19946                           
 19947 ;; *************** function _MXK_TestButton *****************
 19948 ;; Defined at:
 19949 ;;		line 14 in file "Library/MXK.c"
 19950 ;; Parameters:    Size  Location     Type
 19951 ;;		None
 19952 ;; Auto vars:     Size  Location     Type
 19953 ;;		None
 19954 ;; Return value:  Size  Location     Type
 19955 ;;                  1    wreg      unsigned char 
 19956 ;; Registers used:
 19957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19958 ;; Tracked objects:
 19959 ;;		On entry : 0/0
 19960 ;;		On exit  : 0/0
 19961 ;;		Unchanged: 0/0
 19962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19967 ;;Total ram usage:        0 bytes
 19968 ;; Hardware stack levels used:    1
 19969 ;; Hardware stack levels required when called:    8
 19970 ;; This function calls:
 19971 ;;		_Port_GetPin
 19972 ;; This function is called by:
 19973 ;;		_FunctInitButton
 19974 ;;		_Button_Poll
 19975 ;;		_main
 19976 ;; This function uses a non-reentrant model
 19977 ;;
 19978                           
 19979                           	psect	text92
 19980  015AD8                     __ptext92:
 19981                           	opt stack 0
 19982  015AD8                     _MXK_TestButton:
 19983                           	opt stack 22
 19984                           
 19985                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 19986                           
 19987                           ;incstack = 0
 19988  015AD8  0E95               	movlw	low _PortB
 19989  015ADA  0100               	movlb	0	; () banked
 19990  015ADC  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19991  015ADE  0E01               	movlw	high _PortB
 19992  015AE0  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19993  015AE2  0E04               	movlw	4
 19994  015AE4  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19995  015AE6  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19996  015AEA  0012               	return	
 19997  015AEC                     __end_of_MXK_TestButton:
 19998                           	opt stack 0
 19999                           tosu	equ	0xFFF
 20000                           tosh	equ	0xFFE
 20001                           tosl	equ	0xFFD
 20002                           pclath	equ	0xFFA
 20003                           tblptru	equ	0xFF8
 20004                           tblptrh	equ	0xFF7
 20005                           tblptrl	equ	0xFF6
 20006                           tablat	equ	0xFF5
 20007                           prodh	equ	0xFF4
 20008                           prodl	equ	0xFF3
 20009                           intcon	equ	0xFF2
 20010                           postinc0	equ	0xFEE
 20011                           wreg	equ	0xFE8
 20012                           indf1	equ	0xFE7
 20013                           postdec1	equ	0xFE5
 20014                           fsr1h	equ	0xFE2
 20015                           fsr1l	equ	0xFE1
 20016                           indf2	equ	0xFDF
 20017                           postinc2	equ	0xFDE
 20018                           postdec2	equ	0xFDD
 20019                           plusw2	equ	0xFDB
 20020                           fsr2h	equ	0xFDA
 20021                           fsr2l	equ	0xFD9
 20022                           status	equ	0xFD8
 20023                           
 20024 ;; *************** function _Port_GetQuad *****************
 20025 ;; Defined at:
 20026 ;;		line 498 in file "Library/Port.c"
 20027 ;; Parameters:    Size  Location     Type
 20028 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 20029 ;;		 -> PortE(10), PortD(10), 
 20030 ;;  pQuad           1    2[BANK0 ] enum E6776
 20031 ;; Auto vars:     Size  Location     Type
 20032 ;;  Output          1    5[BANK0 ] unsigned char 
 20033 ;; Return value:  Size  Location     Type
 20034 ;;                  1    wreg      unsigned char 
 20035 ;; Registers used:
 20036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20037 ;; Tracked objects:
 20038 ;;		On entry : 0/0
 20039 ;;		On exit  : 0/0
 20040 ;;		Unchanged: 0/0
 20041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20042 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20044 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20045 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20046 ;;Total ram usage:        6 bytes
 20047 ;; Hardware stack levels used:    1
 20048 ;; Hardware stack levels required when called:    7
 20049 ;; This function calls:
 20050 ;;		Nothing
 20051 ;; This function is called by:
 20052 ;;		_HMI_DIPSwitch
 20053 ;;		_MXK_DIPSwitch
 20054 ;;		_Port_ToggleQuad
 20055 ;; This function uses a non-reentrant model
 20056 ;;
 20057                           
 20058                           	psect	text93
 20059  015430                     __ptext93:
 20060                           	opt stack 0
 20061  015430                     _Port_GetQuad:
 20062                           	opt stack 22
 20063                           
 20064                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 20065                           
 20066                           ;incstack = 0
 20067  015430  0100               	movlb	0	; () banked
 20068  015432  EE20 F006          	lfsr	2,6
 20069  015436  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 20070  015438  26D9               	addwf	fsr2l,f,c
 20071  01543A  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 20072  01543C  22DA               	addwfc	fsr2h,f,c
 20073  01543E  CFDE F063          	movff	postinc2,??_Port_GetQuad
 20074  015442  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 20075  015446  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 20076  01544A  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 20077  01544E  50DF               	movf	indf2,w,c
 20078  015450  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 20079                           
 20080                           ; BSR set to: 0
 20081                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 20082  015452  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 20083  015454  0D04               	mullw	4
 20084  015456  28F3               	incf	prodl,w,c
 20085  015458  6F63               	movwf	??_Port_GetQuad& (0+255),b
 20086  01545A  D002               	goto	u11920
 20087  01545C                     u11925:
 20088  01545C  90D8               	bcf	status,0,c
 20089  01545E  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 20090  015460                     u11920:
 20091  015460  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 20092  015462  D7FC               	goto	u11925
 20093                           
 20094                           ;Port.c: 502: Output &= 0xF;
 20095  015464  0E0F               	movlw	15
 20096  015466  0100               	movlb	0	; () banked
 20097  015468  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 20098                           
 20099                           ; BSR set to: 0
 20100                           ;Port.c: 503: return Output;
 20101  01546A  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 20102  01546C  0012               	return	
 20103  01546E                     __end_of_Port_GetQuad:
 20104                           	opt stack 0
 20105                           tosu	equ	0xFFF
 20106                           tosh	equ	0xFFE
 20107                           tosl	equ	0xFFD
 20108                           pclath	equ	0xFFA
 20109                           tblptru	equ	0xFF8
 20110                           tblptrh	equ	0xFF7
 20111                           tblptrl	equ	0xFF6
 20112                           tablat	equ	0xFF5
 20113                           prodh	equ	0xFF4
 20114                           prodl	equ	0xFF3
 20115                           intcon	equ	0xFF2
 20116                           postinc0	equ	0xFEE
 20117                           wreg	equ	0xFE8
 20118                           indf1	equ	0xFE7
 20119                           postdec1	equ	0xFE5
 20120                           fsr1h	equ	0xFE2
 20121                           fsr1l	equ	0xFE1
 20122                           indf2	equ	0xFDF
 20123                           postinc2	equ	0xFDE
 20124                           postdec2	equ	0xFDD
 20125                           plusw2	equ	0xFDB
 20126                           fsr2h	equ	0xFDA
 20127                           fsr2l	equ	0xFD9
 20128                           status	equ	0xFD8
 20129                           
 20130 ;; *************** function _Event_DIPSwitch *****************
 20131 ;; Defined at:
 20132 ;;		line 22 in file "Events.c"
 20133 ;; Parameters:    Size  Location     Type
 20134 ;;  pState          1    wreg     unsigned char 
 20135 ;; Auto vars:     Size  Location     Type
 20136 ;;  pState          1   25[BANK0 ] unsigned char 
 20137 ;;  Bar             1   26[BANK0 ] unsigned char 
 20138 ;; Return value:  Size  Location     Type
 20139 ;;                  1    wreg      void 
 20140 ;; Registers used:
 20141 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20142 ;; Tracked objects:
 20143 ;;		On entry : 0/0
 20144 ;;		On exit  : 0/0
 20145 ;;		Unchanged: 0/0
 20146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20148 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20150 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20151 ;;Total ram usage:        2 bytes
 20152 ;; Hardware stack levels used:    1
 20153 ;; Hardware stack levels required when called:   13
 20154 ;; This function calls:
 20155 ;;		_HMI_GetBar
 20156 ;;		_HMI_SetBar
 20157 ;;		_LED_Toggle
 20158 ;; This function is called by:
 20159 ;;		_FunctInitButton
 20160 ;;		_Button_Poll
 20161 ;; This function uses a non-reentrant model
 20162 ;;
 20163                           
 20164                           	psect	text94
 20165  015824                     __ptext94:
 20166                           	opt stack 0
 20167  015824                     _Event_DIPSwitch:
 20168                           	opt stack 15
 20169                           
 20170                           ; BSR set to: 0
 20171                           ;incstack = 0
 20172                           ;Event_DIPSwitch@pState stored from wreg
 20173  015824  0100               	movlb	0	; () banked
 20174  015826  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 20175                           
 20176                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 20177  015828  ECC8  F0AD         	call	_HMI_GetBar	;wreg free
 20178  01582C  0100               	movlb	0	; () banked
 20179  01582E  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 20180                           
 20181                           ; BSR set to: 0
 20182                           ;Events.c: 25: Bar &= 0x0F;
 20183  015830  0E0F               	movlw	15
 20184  015832  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 20185                           
 20186                           ; BSR set to: 0
 20187                           ;Events.c: 26: pState <<= 4;
 20188  015834  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 20189  015836  0EF0               	movlw	240
 20190  015838  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 20191                           
 20192                           ; BSR set to: 0
 20193                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 20194  01583A  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 20195  01583C  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 20196  01583E  ECB8  F0AD         	call	_HMI_SetBar
 20197                           
 20198                           ;Events.c: 32: LED_Toggle(eLED1);
 20199  015842  0E00               	movlw	0
 20200  015844  ECD8  F0A9         	call	_LED_Toggle
 20201  015848  0012               	return		;funcret
 20202  01584A                     __end_of_Event_DIPSwitch:
 20203                           	opt stack 0
 20204                           tosu	equ	0xFFF
 20205                           tosh	equ	0xFFE
 20206                           tosl	equ	0xFFD
 20207                           pclath	equ	0xFFA
 20208                           tblptru	equ	0xFF8
 20209                           tblptrh	equ	0xFF7
 20210                           tblptrl	equ	0xFF6
 20211                           tablat	equ	0xFF5
 20212                           prodh	equ	0xFF4
 20213                           prodl	equ	0xFF3
 20214                           intcon	equ	0xFF2
 20215                           postinc0	equ	0xFEE
 20216                           wreg	equ	0xFE8
 20217                           indf1	equ	0xFE7
 20218                           postdec1	equ	0xFE5
 20219                           fsr1h	equ	0xFE2
 20220                           fsr1l	equ	0xFE1
 20221                           indf2	equ	0xFDF
 20222                           postinc2	equ	0xFDE
 20223                           postdec2	equ	0xFDD
 20224                           plusw2	equ	0xFDB
 20225                           fsr2h	equ	0xFDA
 20226                           fsr2l	equ	0xFD9
 20227                           status	equ	0xFD8
 20228                           
 20229 ;; *************** function _Event_NULL *****************
 20230 ;; Defined at:
 20231 ;;		line 9 in file "Events.c"
 20232 ;; Parameters:    Size  Location     Type
 20233 ;;  pState          1    wreg     unsigned char 
 20234 ;; Auto vars:     Size  Location     Type
 20235 ;;  pState          1    0[COMRAM] unsigned char 
 20236 ;; Return value:  Size  Location     Type
 20237 ;;                  1    wreg      void 
 20238 ;; Registers used:
 20239 ;;		wreg
 20240 ;; Tracked objects:
 20241 ;;		On entry : 0/0
 20242 ;;		On exit  : 0/0
 20243 ;;		Unchanged: 0/0
 20244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20249 ;;Total ram usage:        0 bytes
 20250 ;; Hardware stack levels used:    1
 20251 ;; Hardware stack levels required when called:    7
 20252 ;; This function calls:
 20253 ;;		Nothing
 20254 ;; This function is called by:
 20255 ;;		_HMI_Init
 20256 ;;		_Button_Poll
 20257 ;; This function uses a non-reentrant model
 20258 ;;
 20259                           
 20260                           	psect	text95
 20261  001404                     __ptext95:
 20262                           	opt stack 0
 20263  001404                     _Event_NULL:
 20264                           	opt stack 21
 20265                           
 20266                           ;incstack = 0
 20267  001404  0012               	return		;funcret
 20268  001406                     __end_of_Event_NULL:
 20269                           	opt stack 0
 20270                           tosu	equ	0xFFF
 20271                           tosh	equ	0xFFE
 20272                           tosl	equ	0xFFD
 20273                           pclath	equ	0xFFA
 20274                           tblptru	equ	0xFF8
 20275                           tblptrh	equ	0xFF7
 20276                           tblptrl	equ	0xFF6
 20277                           tablat	equ	0xFF5
 20278                           prodh	equ	0xFF4
 20279                           prodl	equ	0xFF3
 20280                           intcon	equ	0xFF2
 20281                           postinc0	equ	0xFEE
 20282                           wreg	equ	0xFE8
 20283                           indf1	equ	0xFE7
 20284                           postdec1	equ	0xFE5
 20285                           fsr1h	equ	0xFE2
 20286                           fsr1l	equ	0xFE1
 20287                           indf2	equ	0xFDF
 20288                           postinc2	equ	0xFDE
 20289                           postdec2	equ	0xFDD
 20290                           plusw2	equ	0xFDB
 20291                           fsr2h	equ	0xFDA
 20292                           fsr2l	equ	0xFD9
 20293                           status	equ	0xFD8
 20294                           
 20295 ;; *************** function _Event_TestButton *****************
 20296 ;; Defined at:
 20297 ;;		line 52 in file "Events.c"
 20298 ;; Parameters:    Size  Location     Type
 20299 ;;  pState          1    wreg     unsigned char 
 20300 ;; Auto vars:     Size  Location     Type
 20301 ;;  pState          1   25[BANK0 ] unsigned char 
 20302 ;; Return value:  Size  Location     Type
 20303 ;;                  1    wreg      void 
 20304 ;; Registers used:
 20305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20306 ;; Tracked objects:
 20307 ;;		On entry : 0/0
 20308 ;;		On exit  : 0/0
 20309 ;;		Unchanged: 0/0
 20310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20314 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20315 ;;Total ram usage:        1 bytes
 20316 ;; Hardware stack levels used:    1
 20317 ;; Hardware stack levels required when called:   13
 20318 ;; This function calls:
 20319 ;;		_HMI_SetButton
 20320 ;;		_HMI_SetNumber
 20321 ;;		_LED_Toggle
 20322 ;; This function is called by:
 20323 ;;		_FunctInitButton
 20324 ;;		_Button_Poll
 20325 ;; This function uses a non-reentrant model
 20326 ;;
 20327                           
 20328                           	psect	text96
 20329  0155FC                     __ptext96:
 20330                           	opt stack 0
 20331  0155FC                     _Event_TestButton:
 20332                           	opt stack 15
 20333                           
 20334                           ;incstack = 0
 20335                           ;Event_TestButton@pState stored from wreg
 20336  0155FC  0100               	movlb	0	; () banked
 20337  0155FE  6F79               	movwf	Event_TestButton@pState& (0+255),b
 20338                           
 20339                           ;Events.c: 56: static UINT8 j = 0;
 20340                           ;Events.c: 60: if (pState == 0)
 20341  015600  0100               	movlb	0	; () banked
 20342  015602  5179               	movf	Event_TestButton@pState& (0+255),w,b
 20343  015604  A4D8               	btfss	status,2,c
 20344  015606  D010               	goto	l1873
 20345                           
 20346                           ; BSR set to: 0
 20347                           ;Events.c: 61: {
 20348                           ;Events.c: 62: j++;
 20349  015608  2A3C               	incf	Event_TestButton@j,f,c
 20350                           
 20351                           ; BSR set to: 0
 20352                           ;Events.c: 63: val += j;
 20353  01560A  503C               	movf	Event_TestButton@j,w,c
 20354  01560C  0101               	movlb	1	; () banked
 20355  01560E  2750               	addwf	_val& (0+255),f,b
 20356  015610  0E00               	movlw	0
 20357  015612  2351               	addwfc	(_val+1)& (0+255),f,b
 20358                           
 20359                           ; BSR set to: 1
 20360                           ;Events.c: 64: HMI_SetNumber( val );
 20361  015614  C150  F076         	movff	_val,HMI_SetNumber@pInput
 20362  015618  C151  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 20363  01561C  EC25  F0AC         	call	_HMI_SetNumber	;wreg free
 20364                           
 20365                           ;Events.c: 67: HMI_SetButton( j & 3 );
 20366  015620  503C               	movf	Event_TestButton@j,w,c
 20367  015622  0B03               	andlw	3
 20368  015624  EC94  F0A3         	call	_HMI_SetButton
 20369  015628                     l1873:
 20370                           
 20371                           ;Events.c: 68: }
 20372                           ;Events.c: 72: LED_Toggle(eLED1);
 20373  015628  0E00               	movlw	0
 20374  01562A  ECD8  F0A9         	call	_LED_Toggle
 20375  01562E  0012               	return		;funcret
 20376  015630                     __end_of_Event_TestButton:
 20377                           	opt stack 0
 20378                           tosu	equ	0xFFF
 20379                           tosh	equ	0xFFE
 20380                           tosl	equ	0xFFD
 20381                           pclath	equ	0xFFA
 20382                           tblptru	equ	0xFF8
 20383                           tblptrh	equ	0xFF7
 20384                           tblptrl	equ	0xFF6
 20385                           tablat	equ	0xFF5
 20386                           prodh	equ	0xFF4
 20387                           prodl	equ	0xFF3
 20388                           intcon	equ	0xFF2
 20389                           postinc0	equ	0xFEE
 20390                           wreg	equ	0xFE8
 20391                           indf1	equ	0xFE7
 20392                           postdec1	equ	0xFE5
 20393                           fsr1h	equ	0xFE2
 20394                           fsr1l	equ	0xFE1
 20395                           indf2	equ	0xFDF
 20396                           postinc2	equ	0xFDE
 20397                           postdec2	equ	0xFDD
 20398                           plusw2	equ	0xFDB
 20399                           fsr2h	equ	0xFDA
 20400                           fsr2l	equ	0xFD9
 20401                           status	equ	0xFD8
 20402                           
 20403 ;; *************** function _HMI_SetNumber *****************
 20404 ;; Defined at:
 20405 ;;		line 221 in file "HMI.c"
 20406 ;; Parameters:    Size  Location     Type
 20407 ;;  pInput          2   22[BANK0 ] int 
 20408 ;; Auto vars:     Size  Location     Type
 20409 ;;		None
 20410 ;; Return value:  Size  Location     Type
 20411 ;;                  1    wreg      void 
 20412 ;; Registers used:
 20413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 20414 ;; Tracked objects:
 20415 ;;		On entry : 0/0
 20416 ;;		On exit  : 0/0
 20417 ;;		Unchanged: 0/0
 20418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20419 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20422 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20423 ;;Total ram usage:        2 bytes
 20424 ;; Hardware stack levels used:    1
 20425 ;; Hardware stack levels required when called:    9
 20426 ;; This function calls:
 20427 ;;		_HMI_SetSegments
 20428 ;;		_itos
 20429 ;; This function is called by:
 20430 ;;		_Event_TestButton
 20431 ;;		_main
 20432 ;;		_ADCAverage
 20433 ;;		_Event_HMI_UpButton
 20434 ;;		_Event_HMI_DownButton
 20435 ;; This function uses a non-reentrant model
 20436 ;;
 20437                           
 20438                           	psect	text97
 20439  01584A                     __ptext97:
 20440                           	opt stack 0
 20441  01584A                     _HMI_SetNumber:
 20442                           	opt stack 19
 20443                           
 20444                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 20445                           
 20446                           ;incstack = 0
 20447  01584A  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 20448  01584E  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 20449  015852  0E82               	movlw	low _HMIBoard
 20450  015854  0100               	movlb	0	; () banked
 20451  015856  6F6E               	movwf	itos@destination& (0+255),b
 20452  015858  0E02               	movlw	high _HMIBoard
 20453  01585A  6F6F               	movwf	(itos@destination+1)& (0+255),b
 20454  01585C  ECFE  F09D         	call	_itos	;wreg free
 20455                           
 20456                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 20457  015860  0E82               	movlw	low _HMIBoard
 20458  015862  0100               	movlb	0	; () banked
 20459  015864  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 20460  015866  0E02               	movlw	high _HMIBoard
 20461  015868  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 20462  01586A  EC06  F0A0         	call	_HMI_SetSegments	;wreg free
 20463  01586E  0012               	return		;funcret
 20464  015870                     __end_of_HMI_SetNumber:
 20465                           	opt stack 0
 20466                           tosu	equ	0xFFF
 20467                           tosh	equ	0xFFE
 20468                           tosl	equ	0xFFD
 20469                           pclath	equ	0xFFA
 20470                           tblptru	equ	0xFF8
 20471                           tblptrh	equ	0xFF7
 20472                           tblptrl	equ	0xFF6
 20473                           tablat	equ	0xFF5
 20474                           prodh	equ	0xFF4
 20475                           prodl	equ	0xFF3
 20476                           intcon	equ	0xFF2
 20477                           postinc0	equ	0xFEE
 20478                           wreg	equ	0xFE8
 20479                           indf1	equ	0xFE7
 20480                           postdec1	equ	0xFE5
 20481                           fsr1h	equ	0xFE2
 20482                           fsr1l	equ	0xFE1
 20483                           indf2	equ	0xFDF
 20484                           postinc2	equ	0xFDE
 20485                           postdec2	equ	0xFDD
 20486                           plusw2	equ	0xFDB
 20487                           fsr2h	equ	0xFDA
 20488                           fsr2l	equ	0xFD9
 20489                           status	equ	0xFD8
 20490                           
 20491 ;; *************** function _itos *****************
 20492 ;; Defined at:
 20493 ;;		line 369 in file "Library/Types.c"
 20494 ;; Parameters:    Size  Location     Type
 20495 ;;  input           2   12[BANK0 ] unsigned short 
 20496 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 20497 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 20498 ;; Auto vars:     Size  Location     Type
 20499 ;;  Out             2   20[BANK0 ] unsigned short 
 20500 ;;  Length          2   18[BANK0 ] unsigned short 
 20501 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 20502 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 20503 ;; Return value:  Size  Location     Type
 20504 ;;                  1    wreg      void 
 20505 ;; Registers used:
 20506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 20507 ;; Tracked objects:
 20508 ;;		On entry : 0/0
 20509 ;;		On exit  : 0/0
 20510 ;;		Unchanged: 0/0
 20511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20512 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20513 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20515 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20516 ;;Total ram usage:       10 bytes
 20517 ;; Hardware stack levels used:    1
 20518 ;; Hardware stack levels required when called:    8
 20519 ;; This function calls:
 20520 ;;		___lwdiv
 20521 ;;		___lwmod
 20522 ;;		_reverse
 20523 ;; This function is called by:
 20524 ;;		_HMI_SetNumber
 20525 ;; This function uses a non-reentrant model
 20526 ;;
 20527                           
 20528                           	psect	text98
 20529  013BFC                     __ptext98:
 20530                           	opt stack 0
 20531  013BFC                     _itos:
 20532                           	opt stack 19
 20533                           
 20534                           ;Types.c: 371: UINT16 Out = input;
 20535                           
 20536                           ;incstack = 0
 20537  013BFC  C06C  F074         	movff	itos@input,itos@Out
 20538  013C00  C06D  F075         	movff	itos@input+1,itos@Out+1
 20539                           
 20540                           ;Types.c: 372: UINT16 Length = 0;
 20541  013C04  0E00               	movlw	0
 20542  013C06  0100               	movlb	0	; () banked
 20543  013C08  6F73               	movwf	(itos@Length+1)& (0+255),b
 20544  013C0A  0E00               	movlw	0
 20545  013C0C  6F72               	movwf	itos@Length& (0+255),b
 20546                           
 20547                           ; BSR set to: 0
 20548                           ;Types.c: 373: char *Data = destination;
 20549  013C0E  C06E  F070         	movff	itos@destination,itos@Data
 20550  013C12  C06F  F071         	movff	itos@destination+1,itos@Data+1
 20551                           
 20552                           ; BSR set to: 0
 20553                           ;Types.c: 374: if(Out == 0)
 20554  013C16  5174               	movf	itos@Out& (0+255),w,b
 20555  013C18  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 20556  013C1A  A4D8               	btfss	status,2,c
 20557  013C1C  D030               	goto	l929
 20558                           
 20559                           ; BSR set to: 0
 20560                           ;Types.c: 375: {
 20561                           ;Types.c: 376: Data[0] = (UINT16)'0';
 20562  013C1E  C070  FFD9         	movff	itos@Data,fsr2l
 20563  013C22  C071  FFDA         	movff	itos@Data+1,fsr2h
 20564  013C26  0E30               	movlw	48
 20565  013C28  6EDF               	movwf	indf2,c
 20566                           
 20567                           ; BSR set to: 0
 20568                           ;Types.c: 377: Length = 1;
 20569  013C2A  0E00               	movlw	0
 20570  013C2C  6F73               	movwf	(itos@Length+1)& (0+255),b
 20571  013C2E  0E01               	movlw	1
 20572  013C30  6F72               	movwf	itos@Length& (0+255),b
 20573                           
 20574                           ;Types.c: 378: }
 20575  013C32  D039               	goto	l928
 20576  013C34                     
 20577                           ; BSR set to: 0
 20578                           ;Types.c: 382: {
 20579                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 20580                           
 20581                           ; BSR set to: 0
 20582  013C34  C074  F067         	movff	itos@Out,___lwmod@dividend
 20583  013C38  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 20584  013C3C  0E00               	movlw	0
 20585  013C3E  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 20586  013C40  0E0A               	movlw	10
 20587  013C42  6F69               	movwf	___lwmod@divisor& (0+255),b
 20588  013C44  EC96  F0A9         	call	___lwmod	;wreg free
 20589  013C48  0100               	movlb	0	; () banked
 20590  013C4A  5167               	movf	?___lwmod& (0+255),w,b
 20591  013C4C  0F30               	addlw	48
 20592  013C4E  C070  FFD9         	movff	itos@Data,fsr2l
 20593  013C52  C071  FFDA         	movff	itos@Data+1,fsr2h
 20594  013C56  6EDF               	movwf	indf2,c
 20595                           
 20596                           ; BSR set to: 0
 20597                           ;Types.c: 384: Out /= 10;
 20598  013C58  C074  F060         	movff	itos@Out,___lwdiv@dividend
 20599  013C5C  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 20600  013C60  0E00               	movlw	0
 20601  013C62  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 20602  013C64  0E0A               	movlw	10
 20603  013C66  6F62               	movwf	___lwdiv@divisor& (0+255),b
 20604  013C68  ECCB  F0A7         	call	___lwdiv	;wreg free
 20605  013C6C  C060  F074         	movff	?___lwdiv,itos@Out
 20606  013C70  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 20607                           
 20608                           ;Types.c: 385: Length ++;
 20609  013C74  0100               	movlb	0	; () banked
 20610  013C76  4B72               	infsnz	itos@Length& (0+255),f,b
 20611  013C78  2B73               	incf	(itos@Length+1)& (0+255),f,b
 20612                           
 20613                           ; BSR set to: 0
 20614                           ;Types.c: 386: Data++;
 20615  013C7A  4B70               	infsnz	itos@Data& (0+255),f,b
 20616  013C7C  2B71               	incf	(itos@Data+1)& (0+255),f,b
 20617  013C7E                     l929:
 20618                           
 20619                           ; BSR set to: 0
 20620                           
 20621                           ; BSR set to: 0
 20622  013C7E  5174               	movf	itos@Out& (0+255),w,b
 20623  013C80  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 20624  013C82  B4D8               	btfsc	status,2,c
 20625  013C84  D006               	goto	u11370
 20626                           
 20627                           ; BSR set to: 0
 20628  013C86  5173               	movf	(itos@Length+1)& (0+255),w,b
 20629  013C88  E104               	bnz	l13975
 20630  013C8A  0E06               	movlw	6
 20631  013C8C  5D72               	subwf	itos@Length& (0+255),w,b
 20632  013C8E  A0D8               	btfss	status,0,c
 20633  013C90  D7D1               	goto	l930
 20634  013C92                     u11370:
 20635  013C92                     l13975:
 20636                           
 20637                           ; BSR set to: 0
 20638                           ;Types.c: 387: }
 20639                           ;Types.c: 388: reverse(destination, Length);
 20640  013C92  C06E  F060         	movff	itos@destination,reverse@input
 20641  013C96  C06F  F061         	movff	itos@destination+1,reverse@input+1
 20642  013C9A  C072  F062         	movff	itos@Length,reverse@length
 20643  013C9E  C073  F063         	movff	itos@Length+1,reverse@length+1
 20644  013CA2  ECA1  F0A7         	call	_reverse	;wreg free
 20645  013CA6                     l928:
 20646                           
 20647                           ;Types.c: 389: }
 20648                           ;Types.c: 390: destination[Length] = '\0';
 20649  013CA6  0100               	movlb	0	; () banked
 20650  013CA8  5172               	movf	itos@Length& (0+255),w,b
 20651  013CAA  256E               	addwf	itos@destination& (0+255),w,b
 20652  013CAC  6ED9               	movwf	fsr2l,c
 20653  013CAE  5173               	movf	(itos@Length+1)& (0+255),w,b
 20654  013CB0  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 20655  013CB2  6EDA               	movwf	fsr2h,c
 20656  013CB4  0E00               	movlw	0
 20657  013CB6  6EDF               	movwf	indf2,c
 20658                           
 20659                           ; BSR set to: 0
 20660  013CB8  0012               	return		;funcret
 20661  013CBA                     __end_of_itos:
 20662                           	opt stack 0
 20663                           tosu	equ	0xFFF
 20664                           tosh	equ	0xFFE
 20665                           tosl	equ	0xFFD
 20666                           pclath	equ	0xFFA
 20667                           tblptru	equ	0xFF8
 20668                           tblptrh	equ	0xFF7
 20669                           tblptrl	equ	0xFF6
 20670                           tablat	equ	0xFF5
 20671                           prodh	equ	0xFF4
 20672                           prodl	equ	0xFF3
 20673                           intcon	equ	0xFF2
 20674                           postinc0	equ	0xFEE
 20675                           wreg	equ	0xFE8
 20676                           indf1	equ	0xFE7
 20677                           postdec1	equ	0xFE5
 20678                           fsr1h	equ	0xFE2
 20679                           fsr1l	equ	0xFE1
 20680                           indf2	equ	0xFDF
 20681                           postinc2	equ	0xFDE
 20682                           postdec2	equ	0xFDD
 20683                           plusw2	equ	0xFDB
 20684                           fsr2h	equ	0xFDA
 20685                           fsr2l	equ	0xFD9
 20686                           status	equ	0xFD8
 20687                           
 20688 ;; *************** function _reverse *****************
 20689 ;; Defined at:
 20690 ;;		line 357 in file "Library/Types.c"
 20691 ;; Parameters:    Size  Location     Type
 20692 ;;  input           2    0[BANK0 ] PTR unsigned char 
 20693 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 20694 ;;  length          2    2[BANK0 ] unsigned short 
 20695 ;; Auto vars:     Size  Location     Type
 20696 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 20697 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 20698 ;;  tempVar         1    4[BANK0 ] unsigned char 
 20699 ;; Return value:  Size  Location     Type
 20700 ;;                  1    wreg      void 
 20701 ;; Registers used:
 20702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20703 ;; Tracked objects:
 20704 ;;		On entry : 0/0
 20705 ;;		On exit  : 0/0
 20706 ;;		Unchanged: 0/0
 20707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20708 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20709 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20711 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20712 ;;Total ram usage:        7 bytes
 20713 ;; Hardware stack levels used:    1
 20714 ;; Hardware stack levels required when called:    7
 20715 ;; This function calls:
 20716 ;;		Nothing
 20717 ;; This function is called by:
 20718 ;;		_itos
 20719 ;; This function uses a non-reentrant model
 20720 ;;
 20721                           
 20722                           	psect	text99
 20723  014F42                     __ptext99:
 20724                           	opt stack 0
 20725  014F42                     _reverse:
 20726                           	opt stack 19
 20727                           
 20728                           ;Types.c: 359: char tempVar,
 20729                           ;Types.c: 360: *iterator = input + length;
 20730                           
 20731                           ; BSR set to: 0
 20732                           ;incstack = 0
 20733  014F42  0100               	movlb	0	; () banked
 20734  014F44  5162               	movf	reverse@length& (0+255),w,b
 20735  014F46  2560               	addwf	reverse@input& (0+255),w,b
 20736  014F48  6F65               	movwf	reverse@iterator& (0+255),b
 20737  014F4A  5163               	movf	(reverse@length+1)& (0+255),w,b
 20738  014F4C  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 20739  014F4E  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 20740                           
 20741                           ;Types.c: 362: while ( --iterator > input )
 20742  014F50  D018               	goto	l921
 20743  014F52                     
 20744                           ; BSR set to: 0
 20745                           ;Types.c: 363: {
 20746                           ;Types.c: 364: tempVar = *input;
 20747                           
 20748                           ; BSR set to: 0
 20749  014F52  C060  FFD9         	movff	reverse@input,fsr2l
 20750  014F56  C061  FFDA         	movff	reverse@input+1,fsr2h
 20751  014F5A  50DF               	movf	indf2,w,c
 20752  014F5C  6F64               	movwf	reverse@tempVar& (0+255),b
 20753                           
 20754                           ; BSR set to: 0
 20755                           ;Types.c: 365: *input++=*iterator;
 20756  014F5E  C065  FFD9         	movff	reverse@iterator,fsr2l
 20757  014F62  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 20758  014F66  C060  FFE1         	movff	reverse@input,fsr1l
 20759  014F6A  C061  FFE2         	movff	reverse@input+1,fsr1h
 20760  014F6E  CFDF FFE7          	movff	indf2,indf1
 20761                           
 20762                           ; BSR set to: 0
 20763  014F72  4B60               	infsnz	reverse@input& (0+255),f,b
 20764  014F74  2B61               	incf	(reverse@input+1)& (0+255),f,b
 20765                           
 20766                           ; BSR set to: 0
 20767                           ;Types.c: 366: *iterator=tempVar;
 20768  014F76  C065  FFD9         	movff	reverse@iterator,fsr2l
 20769  014F7A  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 20770  014F7E  C064  FFDF         	movff	reverse@tempVar,indf2
 20771  014F82                     l921:
 20772                           
 20773                           ; BSR set to: 0
 20774                           
 20775                           ; BSR set to: 0
 20776  014F82  0765               	decf	reverse@iterator& (0+255),f,b
 20777  014F84  A0D8               	btfss	status,0,c
 20778  014F86  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 20779  014F88  5165               	movf	reverse@iterator& (0+255),w,b
 20780  014F8A  5D60               	subwf	reverse@input& (0+255),w,b
 20781  014F8C  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 20782  014F8E  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 20783  014F90  B0D8               	btfsc	status,0,c
 20784  014F92  0012               	return	
 20785  014F94  D7DE               	goto	l922
 20786  014F96                     __end_of_reverse:
 20787                           	opt stack 0
 20788                           tosu	equ	0xFFF
 20789                           tosh	equ	0xFFE
 20790                           tosl	equ	0xFFD
 20791                           pclath	equ	0xFFA
 20792                           tblptru	equ	0xFF8
 20793                           tblptrh	equ	0xFF7
 20794                           tblptrl	equ	0xFF6
 20795                           tablat	equ	0xFF5
 20796                           prodh	equ	0xFF4
 20797                           prodl	equ	0xFF3
 20798                           intcon	equ	0xFF2
 20799                           postinc0	equ	0xFEE
 20800                           wreg	equ	0xFE8
 20801                           indf1	equ	0xFE7
 20802                           postdec1	equ	0xFE5
 20803                           fsr1h	equ	0xFE2
 20804                           fsr1l	equ	0xFE1
 20805                           indf2	equ	0xFDF
 20806                           postinc2	equ	0xFDE
 20807                           postdec2	equ	0xFDD
 20808                           plusw2	equ	0xFDB
 20809                           fsr2h	equ	0xFDA
 20810                           fsr2l	equ	0xFD9
 20811                           status	equ	0xFD8
 20812                           
 20813 ;; *************** function ___lwmod *****************
 20814 ;; Defined at:
 20815 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 20816 ;; Parameters:    Size  Location     Type
 20817 ;;  dividend        2    7[BANK0 ] unsigned int 
 20818 ;;  divisor         2    9[BANK0 ] unsigned int 
 20819 ;; Auto vars:     Size  Location     Type
 20820 ;;  counter         1   11[BANK0 ] unsigned char 
 20821 ;; Return value:  Size  Location     Type
 20822 ;;                  2    7[BANK0 ] unsigned int 
 20823 ;; Registers used:
 20824 ;;		wreg, status,2, status,0
 20825 ;; Tracked objects:
 20826 ;;		On entry : 0/0
 20827 ;;		On exit  : 0/0
 20828 ;;		Unchanged: 0/0
 20829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20830 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20833 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20834 ;;Total ram usage:        5 bytes
 20835 ;; Hardware stack levels used:    1
 20836 ;; Hardware stack levels required when called:    7
 20837 ;; This function calls:
 20838 ;;		Nothing
 20839 ;; This function is called by:
 20840 ;;		_itos
 20841 ;;		_printf
 20842 ;; This function uses a non-reentrant model
 20843 ;;
 20844                           
 20845                           	psect	text100
 20846  01532C                     __ptext100:
 20847                           	opt stack 0
 20848  01532C                     ___lwmod:
 20849                           	opt stack 22
 20850                           
 20851                           ; BSR set to: 0
 20852                           ;incstack = 0
 20853  01532C  0100               	movlb	0	; () banked
 20854  01532E  5169               	movf	___lwmod@divisor& (0+255),w,b
 20855  015330  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 20856  015332  B4D8               	btfsc	status,2,c
 20857  015334  D018               	goto	l2923
 20858                           
 20859                           ; BSR set to: 0
 20860  015336  0E01               	movlw	1
 20861  015338  6F6B               	movwf	___lwmod@counter& (0+255),b
 20862  01533A  D004               	goto	l2918
 20863  01533C                     
 20864                           ; BSR set to: 0
 20865                           
 20866                           ; BSR set to: 0
 20867  01533C  90D8               	bcf	status,0,c
 20868  01533E  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 20869  015340  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 20870  015342  2B6B               	incf	___lwmod@counter& (0+255),f,b
 20871  015344                     l2918:
 20872                           
 20873                           ; BSR set to: 0
 20874                           
 20875                           ; BSR set to: 0
 20876  015344  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 20877  015346  D7FA               	goto	l2919
 20878  015348                     u11190:
 20879                           
 20880                           ; BSR set to: 0
 20881                           
 20882                           ; BSR set to: 0
 20883                           
 20884                           ; BSR set to: 0
 20885  015348  5169               	movf	___lwmod@divisor& (0+255),w,b
 20886  01534A  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 20887  01534C  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 20888  01534E  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 20889  015350  A0D8               	btfss	status,0,c
 20890  015352  D004               	goto	l2922
 20891                           
 20892                           ; BSR set to: 0
 20893  015354  5169               	movf	___lwmod@divisor& (0+255),w,b
 20894  015356  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 20895  015358  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 20896  01535A  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 20897  01535C                     l2922:
 20898                           
 20899                           ; BSR set to: 0
 20900                           
 20901                           ; BSR set to: 0
 20902  01535C  90D8               	bcf	status,0,c
 20903  01535E  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 20904  015360  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 20905                           
 20906                           ; BSR set to: 0
 20907  015362  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 20908  015364  D7F1               	goto	u11190
 20909  015366                     l2923:
 20910                           
 20911                           ; BSR set to: 0
 20912                           
 20913                           ; BSR set to: 0
 20914  015366  C067  F067         	movff	___lwmod@dividend,?___lwmod
 20915  01536A  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 20916                           
 20917                           ; BSR set to: 0
 20918  01536E  0012               	return		;funcret
 20919  015370                     __end_of___lwmod:
 20920                           	opt stack 0
 20921                           tosu	equ	0xFFF
 20922                           tosh	equ	0xFFE
 20923                           tosl	equ	0xFFD
 20924                           pclath	equ	0xFFA
 20925                           tblptru	equ	0xFF8
 20926                           tblptrh	equ	0xFF7
 20927                           tblptrl	equ	0xFF6
 20928                           tablat	equ	0xFF5
 20929                           prodh	equ	0xFF4
 20930                           prodl	equ	0xFF3
 20931                           intcon	equ	0xFF2
 20932                           postinc0	equ	0xFEE
 20933                           wreg	equ	0xFE8
 20934                           indf1	equ	0xFE7
 20935                           postdec1	equ	0xFE5
 20936                           fsr1h	equ	0xFE2
 20937                           fsr1l	equ	0xFE1
 20938                           indf2	equ	0xFDF
 20939                           postinc2	equ	0xFDE
 20940                           postdec2	equ	0xFDD
 20941                           plusw2	equ	0xFDB
 20942                           fsr2h	equ	0xFDA
 20943                           fsr2l	equ	0xFD9
 20944                           status	equ	0xFD8
 20945                           
 20946 ;; *************** function ___lwdiv *****************
 20947 ;; Defined at:
 20948 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 20949 ;; Parameters:    Size  Location     Type
 20950 ;;  dividend        2    0[BANK0 ] unsigned int 
 20951 ;;  divisor         2    2[BANK0 ] unsigned int 
 20952 ;; Auto vars:     Size  Location     Type
 20953 ;;  quotient        2    5[BANK0 ] unsigned int 
 20954 ;;  counter         1    4[BANK0 ] unsigned char 
 20955 ;; Return value:  Size  Location     Type
 20956 ;;                  2    0[BANK0 ] unsigned int 
 20957 ;; Registers used:
 20958 ;;		wreg, status,2, status,0
 20959 ;; Tracked objects:
 20960 ;;		On entry : 0/0
 20961 ;;		On exit  : 0/0
 20962 ;;		Unchanged: 0/0
 20963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20964 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20965 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20967 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20968 ;;Total ram usage:        7 bytes
 20969 ;; Hardware stack levels used:    1
 20970 ;; Hardware stack levels required when called:    7
 20971 ;; This function calls:
 20972 ;;		Nothing
 20973 ;; This function is called by:
 20974 ;;		_itos
 20975 ;;		_printf
 20976 ;; This function uses a non-reentrant model
 20977 ;;
 20978                           
 20979                           	psect	text101
 20980  014F96                     __ptext101:
 20981                           	opt stack 0
 20982  014F96                     ___lwdiv:
 20983                           	opt stack 22
 20984                           
 20985                           ; BSR set to: 0
 20986                           ;incstack = 0
 20987  014F96  0E00               	movlw	0
 20988  014F98  0100               	movlb	0	; () banked
 20989  014F9A  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 20990  014F9C  0E00               	movlw	0
 20991  014F9E  6F65               	movwf	___lwdiv@quotient& (0+255),b
 20992                           
 20993                           ; BSR set to: 0
 20994  014FA0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 20995  014FA2  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 20996  014FA4  B4D8               	btfsc	status,2,c
 20997  014FA6  D01C               	goto	l2913
 20998                           
 20999                           ; BSR set to: 0
 21000  014FA8  0E01               	movlw	1
 21001  014FAA  6F64               	movwf	___lwdiv@counter& (0+255),b
 21002  014FAC  D004               	goto	l2908
 21003  014FAE                     
 21004                           ; BSR set to: 0
 21005                           
 21006                           ; BSR set to: 0
 21007  014FAE  90D8               	bcf	status,0,c
 21008  014FB0  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 21009  014FB2  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 21010  014FB4  2B64               	incf	___lwdiv@counter& (0+255),f,b
 21011  014FB6                     l2908:
 21012                           
 21013                           ; BSR set to: 0
 21014                           
 21015                           ; BSR set to: 0
 21016  014FB6  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 21017  014FB8  D7FA               	goto	l2909
 21018  014FBA                     u11160:
 21019                           
 21020                           ; BSR set to: 0
 21021                           
 21022                           ; BSR set to: 0
 21023                           
 21024                           ; BSR set to: 0
 21025  014FBA  90D8               	bcf	status,0,c
 21026  014FBC  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 21027  014FBE  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 21028                           
 21029                           ; BSR set to: 0
 21030  014FC0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 21031  014FC2  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 21032  014FC4  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 21033  014FC6  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 21034  014FC8  A0D8               	btfss	status,0,c
 21035  014FCA  D005               	goto	l2912
 21036                           
 21037                           ; BSR set to: 0
 21038  014FCC  5162               	movf	___lwdiv@divisor& (0+255),w,b
 21039  014FCE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 21040  014FD0  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 21041  014FD2  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 21042                           
 21043                           ; BSR set to: 0
 21044  014FD4  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 21045  014FD6                     l2912:
 21046                           
 21047                           ; BSR set to: 0
 21048                           
 21049                           ; BSR set to: 0
 21050  014FD6  90D8               	bcf	status,0,c
 21051  014FD8  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 21052  014FDA  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 21053                           
 21054                           ; BSR set to: 0
 21055  014FDC  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 21056  014FDE  D7ED               	goto	u11160
 21057  014FE0                     l2913:
 21058                           
 21059                           ; BSR set to: 0
 21060                           
 21061                           ; BSR set to: 0
 21062  014FE0  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 21063  014FE4  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 21064                           
 21065                           ; BSR set to: 0
 21066  014FE8  0012               	return		;funcret
 21067  014FEA                     __end_of___lwdiv:
 21068                           	opt stack 0
 21069                           tosu	equ	0xFFF
 21070                           tosh	equ	0xFFE
 21071                           tosl	equ	0xFFD
 21072                           pclath	equ	0xFFA
 21073                           tblptru	equ	0xFF8
 21074                           tblptrh	equ	0xFF7
 21075                           tblptrl	equ	0xFF6
 21076                           tablat	equ	0xFF5
 21077                           prodh	equ	0xFF4
 21078                           prodl	equ	0xFF3
 21079                           intcon	equ	0xFF2
 21080                           postinc0	equ	0xFEE
 21081                           wreg	equ	0xFE8
 21082                           indf1	equ	0xFE7
 21083                           postdec1	equ	0xFE5
 21084                           fsr1h	equ	0xFE2
 21085                           fsr1l	equ	0xFE1
 21086                           indf2	equ	0xFDF
 21087                           postinc2	equ	0xFDE
 21088                           postdec2	equ	0xFDD
 21089                           plusw2	equ	0xFDB
 21090                           fsr2h	equ	0xFDA
 21091                           fsr2l	equ	0xFD9
 21092                           status	equ	0xFD8
 21093                           
 21094 ;; *************** function _HMI_SetSegments *****************
 21095 ;; Defined at:
 21096 ;;		line 226 in file "HMI.c"
 21097 ;; Parameters:    Size  Location     Type
 21098 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 21099 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 21100 ;; Auto vars:     Size  Location     Type
 21101 ;;  in              2    4[BANK0 ] unsigned short 
 21102 ;; Return value:  Size  Location     Type
 21103 ;;                  1    wreg      void 
 21104 ;; Registers used:
 21105 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21106 ;; Tracked objects:
 21107 ;;		On entry : 0/0
 21108 ;;		On exit  : 0/0
 21109 ;;		Unchanged: 0/0
 21110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21111 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21112 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21114 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21115 ;;Total ram usage:        5 bytes
 21116 ;; Hardware stack levels used:    1
 21117 ;; Hardware stack levels required when called:    8
 21118 ;; This function calls:
 21119 ;;		_ToSegment
 21120 ;; This function is called by:
 21121 ;;		_HMI_SetNumber
 21122 ;; This function uses a non-reentrant model
 21123 ;;
 21124                           
 21125                           	psect	text102
 21126  01400C                     __ptext102:
 21127                           	opt stack 0
 21128  01400C                     _HMI_SetSegments:
 21129                           	opt stack 19
 21130                           
 21131                           ;HMI.c: 228: UINT16 in=0;
 21132                           
 21133                           ; BSR set to: 0
 21134                           ;incstack = 0
 21135  01400C  0E00               	movlw	0
 21136  01400E  0100               	movlb	0	; () banked
 21137  014010  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 21138  014012  0E00               	movlw	0
 21139  014014  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 21140                           
 21141                           ;HMI.c: 229: while(*pString)
 21142  014016  D02E               	goto	l1202
 21143  014018                     
 21144                           ; BSR set to: 0
 21145                           ;HMI.c: 230: {
 21146                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 21147                           
 21148                           ; BSR set to: 0
 21149  014018  0E82               	movlw	low _HMIBoard
 21150  01401A  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 21151  01401C  6ED9               	movwf	fsr2l,c
 21152  01401E  0E02               	movlw	high _HMIBoard
 21153  014020  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 21154  014022  6EDA               	movwf	fsr2h,c
 21155  014024  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 21156  014028  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 21157  01402C  50E7               	movf	indf1,w,c
 21158  01402E  ECD1  F08B         	call	_ToSegment
 21159  014032  6EDF               	movwf	indf2,c
 21160                           
 21161                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 21162  014034  0E82               	movlw	low _HMIBoard
 21163  014036  0100               	movlb	0	; () banked
 21164  014038  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 21165  01403A  6ED9               	movwf	fsr2l,c
 21166  01403C  0E02               	movlw	high _HMIBoard
 21167  01403E  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 21168  014040  6EDA               	movwf	fsr2h,c
 21169  014042  0E80               	movlw	128
 21170  014044  18DE               	xorwf	postinc2,w,c
 21171  014046  A4D8               	btfss	status,2,c
 21172  014048  D00B               	goto	l1201
 21173                           
 21174                           ; BSR set to: 0
 21175                           ;HMI.c: 234: {
 21176                           ;HMI.c: 235: in--;
 21177  01404A  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 21178  01404C  A0D8               	btfss	status,0,c
 21179  01404E  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 21180                           
 21181                           ; BSR set to: 0
 21182                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 21183  014050  0E82               	movlw	low _HMIBoard
 21184  014052  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 21185  014054  6ED9               	movwf	fsr2l,c
 21186  014056  0E02               	movlw	high _HMIBoard
 21187  014058  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 21188  01405A  6EDA               	movwf	fsr2h,c
 21189  01405C  0E00               	movlw	0
 21190  01405E  8EDB               	bsf	plusw2,7,c
 21191  014060                     l1201:
 21192                           
 21193                           ; BSR set to: 0
 21194                           ;HMI.c: 237: }
 21195                           ;HMI.c: 239: pString++;
 21196                           
 21197                           ; BSR set to: 0
 21198  014060  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 21199  014062  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 21200                           
 21201                           ; BSR set to: 0
 21202                           ;HMI.c: 240: in++;
 21203  014064  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 21204  014066  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 21205                           
 21206                           ; BSR set to: 0
 21207                           ;HMI.c: 241: if (in>=6)
 21208  014068  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 21209  01406A  E116               	bnz	l14037
 21210  01406C  0E06               	movlw	6
 21211  01406E  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 21212  014070  B0D8               	btfsc	status,0,c
 21213  014072  D012               	goto	l1204
 21214  014074                     l1202:
 21215                           
 21216                           ; BSR set to: 0
 21217                           
 21218                           ; BSR set to: 0
 21219                           
 21220                           ; BSR set to: 0
 21221  014074  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 21222  014078  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 21223  01407C  50DF               	movf	indf2,w,c
 21224  01407E  B4D8               	btfsc	status,2,c
 21225  014080  D00B               	goto	l1204
 21226  014082  D7CA               	goto	l1200
 21227  014084                     
 21228                           ; BSR set to: 0
 21229                           ;HMI.c: 245: {
 21230                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 21231                           
 21232                           ; BSR set to: 0
 21233  014084  0E82               	movlw	low _HMIBoard
 21234  014086  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 21235  014088  6ED9               	movwf	fsr2l,c
 21236  01408A  0E02               	movlw	high _HMIBoard
 21237  01408C  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 21238  01408E  6EDA               	movwf	fsr2h,c
 21239  014090  0E00               	movlw	0
 21240  014092  6EDF               	movwf	indf2,c
 21241                           
 21242                           ; BSR set to: 0
 21243                           ;HMI.c: 247: in++;
 21244  014094  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 21245  014096  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 21246  014098                     l1204:
 21247  014098                     l14037:
 21248                           
 21249                           ; BSR set to: 0
 21250  014098  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 21251  01409A  E105               	bnz	l1207
 21252  01409C  0E06               	movlw	6
 21253  01409E  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 21254  0140A0  B0D8               	btfsc	status,0,c
 21255  0140A2  0012               	return	
 21256  0140A4  D7EF               	goto	l1205
 21257  0140A6                     l1207:
 21258                           
 21259                           ; BSR set to: 0
 21260  0140A6  0012               	return		;funcret
 21261  0140A8                     __end_of_HMI_SetSegments:
 21262                           	opt stack 0
 21263                           tosu	equ	0xFFF
 21264                           tosh	equ	0xFFE
 21265                           tosl	equ	0xFFD
 21266                           pclath	equ	0xFFA
 21267                           tblptru	equ	0xFF8
 21268                           tblptrh	equ	0xFF7
 21269                           tblptrl	equ	0xFF6
 21270                           tablat	equ	0xFF5
 21271                           prodh	equ	0xFF4
 21272                           prodl	equ	0xFF3
 21273                           intcon	equ	0xFF2
 21274                           postinc0	equ	0xFEE
 21275                           wreg	equ	0xFE8
 21276                           indf1	equ	0xFE7
 21277                           postdec1	equ	0xFE5
 21278                           fsr1h	equ	0xFE2
 21279                           fsr1l	equ	0xFE1
 21280                           indf2	equ	0xFDF
 21281                           postinc2	equ	0xFDE
 21282                           postdec2	equ	0xFDD
 21283                           plusw2	equ	0xFDB
 21284                           fsr2h	equ	0xFDA
 21285                           fsr2l	equ	0xFD9
 21286                           status	equ	0xFD8
 21287                           
 21288 ;; *************** function _ToSegment *****************
 21289 ;; Defined at:
 21290 ;;		line 284 in file "Library/Types.c"
 21291 ;; Parameters:    Size  Location     Type
 21292 ;;  pCHR            1    wreg     unsigned char 
 21293 ;; Auto vars:     Size  Location     Type
 21294 ;;  pCHR            1    0[BANK0 ] unsigned char 
 21295 ;; Return value:  Size  Location     Type
 21296 ;;                  1    wreg      unsigned char 
 21297 ;; Registers used:
 21298 ;;		wreg, status,2, status,0
 21299 ;; Tracked objects:
 21300 ;;		On entry : 0/0
 21301 ;;		On exit  : 0/0
 21302 ;;		Unchanged: 0/0
 21303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21307 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21308 ;;Total ram usage:        1 bytes
 21309 ;; Hardware stack levels used:    1
 21310 ;; Hardware stack levels required when called:    7
 21311 ;; This function calls:
 21312 ;;		Nothing
 21313 ;; This function is called by:
 21314 ;;		_HMI_SetSegments
 21315 ;; This function uses a non-reentrant model
 21316 ;;
 21317                           
 21318                           	psect	text103
 21319  0117A2                     __ptext103:
 21320                           	opt stack 0
 21321  0117A2                     _ToSegment:
 21322                           	opt stack 19
 21323                           
 21324                           ; BSR set to: 0
 21325                           ;incstack = 0
 21326                           ;ToSegment@pCHR stored from wreg
 21327  0117A2  0100               	movlb	0	; () banked
 21328  0117A4  6F60               	movwf	ToSegment@pCHR& (0+255),b
 21329                           
 21330                           ;Types.c: 286: switch(pCHR)
 21331  0117A6  D07E               	goto	l853
 21332  0117A8  0E3F               	movlw	63
 21333  0117AA  0012               	return	
 21334  0117AC  0E06               	movlw	6
 21335  0117AE  0012               	return	
 21336  0117B0  0E5B               	movlw	91
 21337  0117B2  0012               	return	
 21338  0117B4  0E4F               	movlw	79
 21339  0117B6  0012               	return	
 21340  0117B8  0E66               	movlw	102
 21341  0117BA  0012               	return	
 21342  0117BC  0E6D               	movlw	109
 21343  0117BE  0012               	return	
 21344  0117C0  0E7D               	movlw	125
 21345  0117C2  0012               	return	
 21346  0117C4  0E07               	movlw	7
 21347  0117C6  0012               	return	
 21348  0117C8  0E7F               	movlw	127
 21349  0117CA  0012               	return	
 21350  0117CC  0E6F               	movlw	111
 21351  0117CE  0012               	return	
 21352  0117D0  0E5F               	movlw	95
 21353  0117D2  0012               	return	
 21354  0117D4  0E7C               	movlw	124
 21355  0117D6  0012               	return	
 21356  0117D8  0E58               	movlw	88
 21357  0117DA  0012               	return	
 21358  0117DC  0E5E               	movlw	94
 21359  0117DE  0012               	return	
 21360  0117E0  0E7B               	movlw	123
 21361  0117E2  0012               	return	
 21362  0117E4  0E71               	movlw	113
 21363  0117E6  0012               	return	
 21364  0117E8  0E6F               	movlw	111
 21365  0117EA  0012               	return	
 21366  0117EC  0E74               	movlw	116
 21367  0117EE  0012               	return	
 21368  0117F0  0E04               	movlw	4
 21369  0117F2  0012               	return	
 21370  0117F4  0E0E               	movlw	14
 21371  0117F6  0012               	return	
 21372  0117F8  0E7A               	movlw	122
 21373  0117FA  0012               	return	
 21374  0117FC  0E06               	movlw	6
 21375  0117FE  0012               	return	
 21376  011800  0E14               	movlw	20
 21377  011802  0012               	return	
 21378  011804  0E54               	movlw	84
 21379  011806  0012               	return	
 21380  011808  0E5C               	movlw	92
 21381  01180A  0012               	return	
 21382  01180C  0E73               	movlw	115
 21383  01180E  0012               	return	
 21384  011810  0E67               	movlw	103
 21385  011812  0012               	return	
 21386  011814  0E50               	movlw	80
 21387  011816  0012               	return	
 21388  011818  0E6D               	movlw	109
 21389  01181A  0012               	return	
 21390  01181C  0E78               	movlw	120
 21391  01181E  0012               	return	
 21392  011820  0E1C               	movlw	28
 21393  011822  0012               	return	
 21394  011824  0E62               	movlw	98
 21395  011826  0012               	return	
 21396  011828  0E2A               	movlw	42
 21397  01182A  0012               	return	
 21398  01182C  0E64               	movlw	100
 21399  01182E  0012               	return	
 21400  011830  0E6E               	movlw	110
 21401  011832  0012               	return	
 21402  011834  0E5B               	movlw	91
 21403  011836  0012               	return	
 21404  011838  0E77               	movlw	119
 21405  01183A  0012               	return	
 21406  01183C  0E7F               	movlw	127
 21407  01183E  0012               	return	
 21408  011840  0E39               	movlw	57
 21409  011842  0012               	return	
 21410  011844  0E3F               	movlw	63
 21411  011846  0012               	return	
 21412  011848  0E79               	movlw	121
 21413  01184A  0012               	return	
 21414  01184C  0E71               	movlw	113
 21415  01184E  0012               	return	
 21416  011850  0E3D               	movlw	61
 21417  011852  0012               	return	
 21418  011854  0E76               	movlw	118
 21419  011856  0012               	return	
 21420  011858  0E06               	movlw	6
 21421  01185A  0012               	return	
 21422  01185C  0E1E               	movlw	30
 21423  01185E  0012               	return	
 21424  011860  0E57               	movlw	87
 21425  011862  0012               	return	
 21426  011864  0E38               	movlw	56
 21427  011866  0012               	return	
 21428  011868  0E76               	movlw	118
 21429  01186A  0012               	return	
 21430  01186C  0E76               	movlw	118
 21431  01186E  0012               	return	
 21432  011870  0E3F               	movlw	63
 21433  011872  0012               	return	
 21434  011874  0E73               	movlw	115
 21435  011876  0012               	return	
 21436  011878  0E3F               	movlw	63
 21437  01187A  0012               	return	
 21438  01187C  0E77               	movlw	119
 21439  01187E  0012               	return	
 21440  011880  0E6D               	movlw	109
 21441  011882  0012               	return	
 21442  011884  0E31               	movlw	49
 21443  011886  0012               	return	
 21444  011888  0E3E               	movlw	62
 21445  01188A  0012               	return	
 21446  01188C  0E3E               	movlw	62
 21447  01188E  0012               	return	
 21448  011890  0E7E               	movlw	126
 21449  011892  0012               	return	
 21450  011894  0E76               	movlw	118
 21451  011896  0012               	return	
 21452  011898  0E66               	movlw	102
 21453  01189A  0012               	return	
 21454  01189C  0E5B               	movlw	91
 21455  01189E  0012               	return	
 21456  0118A0  0E80               	movlw	128
 21457  0118A2  0012               	return	
 21458  0118A4                     l853:
 21459  0118A4  0100               	movlb	0	; () banked
 21460  0118A6  5160               	movf	ToSegment@pCHR& (0+255),w,b
 21461                           
 21462                           ; Switch size 1, requested type "space"
 21463                           ; Number of cases is 63, Range of values is 46 to 122
 21464                           ; switch strategies available:
 21465                           ; Name         Instructions Cycles
 21466                           ; simple_byte          190    96 (average)
 21467                           ;	Chosen strategy is simple_byte
 21468  0118A8  0A2E               	xorlw	46	; case 46
 21469  0118AA  B4D8               	btfsc	status,2,c
 21470  0118AC  D7F9               	goto	l917
 21471  0118AE  0A1E               	xorlw	30	; case 48
 21472  0118B0  B4D8               	btfsc	status,2,c
 21473  0118B2  D77A               	goto	l854
 21474  0118B4  0A01               	xorlw	1	; case 49
 21475  0118B6  B4D8               	btfsc	status,2,c
 21476  0118B8  D779               	goto	l856
 21477  0118BA  0A03               	xorlw	3	; case 50
 21478  0118BC  B4D8               	btfsc	status,2,c
 21479  0118BE  D778               	goto	l857
 21480  0118C0  0A01               	xorlw	1	; case 51
 21481  0118C2  B4D8               	btfsc	status,2,c
 21482  0118C4  D777               	goto	l858
 21483  0118C6  0A07               	xorlw	7	; case 52
 21484  0118C8  B4D8               	btfsc	status,2,c
 21485  0118CA  D776               	goto	l859
 21486  0118CC  0A01               	xorlw	1	; case 53
 21487  0118CE  B4D8               	btfsc	status,2,c
 21488  0118D0  D775               	goto	l860
 21489  0118D2  0A03               	xorlw	3	; case 54
 21490  0118D4  B4D8               	btfsc	status,2,c
 21491  0118D6  D774               	goto	l861
 21492  0118D8  0A01               	xorlw	1	; case 55
 21493  0118DA  B4D8               	btfsc	status,2,c
 21494  0118DC  D773               	goto	l862
 21495  0118DE  0A0F               	xorlw	15	; case 56
 21496  0118E0  B4D8               	btfsc	status,2,c
 21497  0118E2  D772               	goto	l863
 21498  0118E4  0A01               	xorlw	1	; case 57
 21499  0118E6  B4D8               	btfsc	status,2,c
 21500  0118E8  D771               	goto	l864
 21501  0118EA  0A78               	xorlw	120	; case 65
 21502  0118EC  B4D8               	btfsc	status,2,c
 21503  0118EE  D7A4               	goto	l891
 21504  0118F0  0A03               	xorlw	3	; case 66
 21505  0118F2  B4D8               	btfsc	status,2,c
 21506  0118F4  D7A3               	goto	l892
 21507  0118F6  0A01               	xorlw	1	; case 67
 21508  0118F8  B4D8               	btfsc	status,2,c
 21509  0118FA  D7A2               	goto	l893
 21510  0118FC  0A07               	xorlw	7	; case 68
 21511  0118FE  B4D8               	btfsc	status,2,c
 21512  011900  D7A1               	goto	l894
 21513  011902  0A01               	xorlw	1	; case 69
 21514  011904  B4D8               	btfsc	status,2,c
 21515  011906  D7A0               	goto	l895
 21516  011908  0A03               	xorlw	3	; case 70
 21517  01190A  B4D8               	btfsc	status,2,c
 21518  01190C  D79F               	goto	l896
 21519  01190E  0A01               	xorlw	1	; case 71
 21520  011910  B4D8               	btfsc	status,2,c
 21521  011912  D79E               	goto	l897
 21522  011914  0A0F               	xorlw	15	; case 72
 21523  011916  B4D8               	btfsc	status,2,c
 21524  011918  D79D               	goto	l898
 21525  01191A  0A01               	xorlw	1	; case 73
 21526  01191C  B4D8               	btfsc	status,2,c
 21527  01191E  D79C               	goto	l899
 21528  011920  0A03               	xorlw	3	; case 74
 21529  011922  B4D8               	btfsc	status,2,c
 21530  011924  D79B               	goto	l900
 21531  011926  0A01               	xorlw	1	; case 75
 21532  011928  B4D8               	btfsc	status,2,c
 21533  01192A  D79A               	goto	l901
 21534  01192C  0A07               	xorlw	7	; case 76
 21535  01192E  B4D8               	btfsc	status,2,c
 21536  011930  D799               	goto	l902
 21537  011932  0A01               	xorlw	1	; case 77
 21538  011934  B4D8               	btfsc	status,2,c
 21539  011936  D798               	goto	l903
 21540  011938  0A03               	xorlw	3	; case 78
 21541  01193A  B4D8               	btfsc	status,2,c
 21542  01193C  D797               	goto	l904
 21543  01193E  0A01               	xorlw	1	; case 79
 21544  011940  B4D8               	btfsc	status,2,c
 21545  011942  D796               	goto	l905
 21546  011944  0A1F               	xorlw	31	; case 80
 21547  011946  B4D8               	btfsc	status,2,c
 21548  011948  D795               	goto	l906
 21549  01194A  0A01               	xorlw	1	; case 81
 21550  01194C  B4D8               	btfsc	status,2,c
 21551  01194E  D794               	goto	l907
 21552  011950  0A03               	xorlw	3	; case 82
 21553  011952  B4D8               	btfsc	status,2,c
 21554  011954  D793               	goto	l908
 21555  011956  0A01               	xorlw	1	; case 83
 21556  011958  B4D8               	btfsc	status,2,c
 21557  01195A  D792               	goto	l909
 21558  01195C  0A07               	xorlw	7	; case 84
 21559  01195E  B4D8               	btfsc	status,2,c
 21560  011960  D791               	goto	l910
 21561  011962  0A01               	xorlw	1	; case 85
 21562  011964  B4D8               	btfsc	status,2,c
 21563  011966  D790               	goto	l911
 21564  011968  0A03               	xorlw	3	; case 86
 21565  01196A  B4D8               	btfsc	status,2,c
 21566  01196C  D78F               	goto	l912
 21567  01196E  0A01               	xorlw	1	; case 87
 21568  011970  B4D8               	btfsc	status,2,c
 21569  011972  D78E               	goto	l913
 21570  011974  0A0F               	xorlw	15	; case 88
 21571  011976  B4D8               	btfsc	status,2,c
 21572  011978  D78D               	goto	l914
 21573  01197A  0A01               	xorlw	1	; case 89
 21574  01197C  B4D8               	btfsc	status,2,c
 21575  01197E  D78C               	goto	l915
 21576  011980  0A03               	xorlw	3	; case 90
 21577  011982  B4D8               	btfsc	status,2,c
 21578  011984  D78B               	goto	l916
 21579  011986  0A3B               	xorlw	59	; case 97
 21580  011988  B4D8               	btfsc	status,2,c
 21581  01198A  D722               	goto	l865
 21582  01198C  0A03               	xorlw	3	; case 98
 21583  01198E  B4D8               	btfsc	status,2,c
 21584  011990  D721               	goto	l866
 21585  011992  0A01               	xorlw	1	; case 99
 21586  011994  B4D8               	btfsc	status,2,c
 21587  011996  D720               	goto	l867
 21588  011998  0A07               	xorlw	7	; case 100
 21589  01199A  B4D8               	btfsc	status,2,c
 21590  01199C  D71F               	goto	l868
 21591  01199E  0A01               	xorlw	1	; case 101
 21592  0119A0  B4D8               	btfsc	status,2,c
 21593  0119A2  D71E               	goto	l869
 21594  0119A4  0A03               	xorlw	3	; case 102
 21595  0119A6  B4D8               	btfsc	status,2,c
 21596  0119A8  D71D               	goto	l870
 21597  0119AA  0A01               	xorlw	1	; case 103
 21598  0119AC  B4D8               	btfsc	status,2,c
 21599  0119AE  D71C               	goto	l871
 21600  0119B0  0A0F               	xorlw	15	; case 104
 21601  0119B2  B4D8               	btfsc	status,2,c
 21602  0119B4  D71B               	goto	l872
 21603  0119B6  0A01               	xorlw	1	; case 105
 21604  0119B8  B4D8               	btfsc	status,2,c
 21605  0119BA  D71A               	goto	l873
 21606  0119BC  0A03               	xorlw	3	; case 106
 21607  0119BE  B4D8               	btfsc	status,2,c
 21608  0119C0  D719               	goto	l874
 21609  0119C2  0A01               	xorlw	1	; case 107
 21610  0119C4  B4D8               	btfsc	status,2,c
 21611  0119C6  D718               	goto	l875
 21612  0119C8  0A07               	xorlw	7	; case 108
 21613  0119CA  B4D8               	btfsc	status,2,c
 21614  0119CC  D717               	goto	l876
 21615  0119CE  0A01               	xorlw	1	; case 109
 21616  0119D0  B4D8               	btfsc	status,2,c
 21617  0119D2  D716               	goto	l877
 21618  0119D4  0A03               	xorlw	3	; case 110
 21619  0119D6  B4D8               	btfsc	status,2,c
 21620  0119D8  D715               	goto	l878
 21621  0119DA  0A01               	xorlw	1	; case 111
 21622  0119DC  B4D8               	btfsc	status,2,c
 21623  0119DE  D714               	goto	l879
 21624  0119E0  0A1F               	xorlw	31	; case 112
 21625  0119E2  B4D8               	btfsc	status,2,c
 21626  0119E4  D713               	goto	l880
 21627  0119E6  0A01               	xorlw	1	; case 113
 21628  0119E8  B4D8               	btfsc	status,2,c
 21629  0119EA  D712               	goto	l881
 21630  0119EC  0A03               	xorlw	3	; case 114
 21631  0119EE  B4D8               	btfsc	status,2,c
 21632  0119F0  D711               	goto	l882
 21633  0119F2  0A01               	xorlw	1	; case 115
 21634  0119F4  B4D8               	btfsc	status,2,c
 21635  0119F6  D710               	goto	l883
 21636  0119F8  0A07               	xorlw	7	; case 116
 21637  0119FA  B4D8               	btfsc	status,2,c
 21638  0119FC  D70F               	goto	l884
 21639  0119FE  0A01               	xorlw	1	; case 117
 21640  011A00  B4D8               	btfsc	status,2,c
 21641  011A02  D70E               	goto	l885
 21642  011A04  0A03               	xorlw	3	; case 118
 21643  011A06  B4D8               	btfsc	status,2,c
 21644  011A08  D70D               	goto	l886
 21645  011A0A  0A01               	xorlw	1	; case 119
 21646  011A0C  B4D8               	btfsc	status,2,c
 21647  011A0E  D70C               	goto	l887
 21648  011A10  0A0F               	xorlw	15	; case 120
 21649  011A12  B4D8               	btfsc	status,2,c
 21650  011A14  D70B               	goto	l888
 21651  011A16  0A01               	xorlw	1	; case 121
 21652  011A18  B4D8               	btfsc	status,2,c
 21653  011A1A  D70A               	goto	l889
 21654  011A1C  0A03               	xorlw	3	; case 122
 21655  011A1E  B4D8               	btfsc	status,2,c
 21656  011A20  D709               	goto	l890
 21657                           
 21658                           ;Types.c: 354: return 0;
 21659                           
 21660                           ; BSR set to: 0
 21661  011A22  0E00               	movlw	0
 21662  011A24  0012               	return	
 21663  011A26                     __end_of_ToSegment:
 21664                           	opt stack 0
 21665                           tosu	equ	0xFFF
 21666                           tosh	equ	0xFFE
 21667                           tosl	equ	0xFFD
 21668                           pclath	equ	0xFFA
 21669                           tblptru	equ	0xFF8
 21670                           tblptrh	equ	0xFF7
 21671                           tblptrl	equ	0xFF6
 21672                           tablat	equ	0xFF5
 21673                           prodh	equ	0xFF4
 21674                           prodl	equ	0xFF3
 21675                           intcon	equ	0xFF2
 21676                           postinc0	equ	0xFEE
 21677                           wreg	equ	0xFE8
 21678                           indf1	equ	0xFE7
 21679                           postdec1	equ	0xFE5
 21680                           fsr1h	equ	0xFE2
 21681                           fsr1l	equ	0xFE1
 21682                           indf2	equ	0xFDF
 21683                           postinc2	equ	0xFDE
 21684                           postdec2	equ	0xFDD
 21685                           plusw2	equ	0xFDB
 21686                           fsr2h	equ	0xFDA
 21687                           fsr2l	equ	0xFD9
 21688                           status	equ	0xFD8
 21689                           
 21690 ;; *************** function _HMI_SetButton *****************
 21691 ;; Defined at:
 21692 ;;		line 186 in file "HMI.c"
 21693 ;; Parameters:    Size  Location     Type
 21694 ;;  pValue          1    wreg     unsigned char 
 21695 ;; Auto vars:     Size  Location     Type
 21696 ;;  pValue          1    6[BANK0 ] unsigned char 
 21697 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 21698 ;;  v               1    7[BANK0 ] unsigned char 
 21699 ;; Return value:  Size  Location     Type
 21700 ;;                  1    wreg      void 
 21701 ;; Registers used:
 21702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 21703 ;; Tracked objects:
 21704 ;;		On entry : 0/0
 21705 ;;		On exit  : 0/0
 21706 ;;		Unchanged: 0/0
 21707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21709 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21711 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21712 ;;Total ram usage:        8 bytes
 21713 ;; Hardware stack levels used:    1
 21714 ;; Hardware stack levels required when called:    7
 21715 ;; This function calls:
 21716 ;;		Nothing
 21717 ;; This function is called by:
 21718 ;;		_Event_TestButton
 21719 ;; This function uses a non-reentrant model
 21720 ;;
 21721                           
 21722                           	psect	text104
 21723  014728                     __ptext104:
 21724                           	opt stack 0
 21725  014728                     _HMI_SetButton:
 21726                           	opt stack 20
 21727                           
 21728                           ;incstack = 0
 21729                           ;HMI_SetButton@pValue stored from wreg
 21730  014728  0100               	movlb	0	; () banked
 21731  01472A  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 21732                           
 21733                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 21734  01472C  0EFE               	movlw	low HMI_SetButton@F7213
 21735  01472E  6EF6               	movwf	tblptrl,c
 21736  014730                     	if	1	;There is more than 1 active tblptr byte
 21737  014730  0EFB               	movlw	high HMI_SetButton@F7213
 21738  014732  6EF7               	movwf	tblptrh,c
 21739  014734                     	endif
 21740  014734                     	if	1	;There are 3 active tblptr bytes
 21741  014734  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 21742  014736  6EF8               	movwf	tblptru,c
 21743  014738                     	endif
 21744  014738  0009               	tblrd		*+
 21745  01473A  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 21746  01473E  0009               	tblrd		*+
 21747  014740  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 21748  014744  0009               	tblrd		*+
 21749  014746  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 21750  01474A  000A               	tblrd		*-
 21751  01474C  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 21752                           
 21753                           ;HMI.c: 189: UINT8 v = 0b00010001;
 21754  014750  0E11               	movlw	17
 21755  014752  0100               	movlb	0	; () banked
 21756  014754  6F67               	movwf	HMI_SetButton@v& (0+255),b
 21757                           
 21758                           ; BSR set to: 0
 21759                           ;HMI.c: 190: pValue &= 3;
 21760  014756  0E03               	movlw	3
 21761  014758  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 21762                           
 21763                           ; BSR set to: 0
 21764                           ;HMI.c: 191: v = v << reindex[pValue];
 21765  01475A  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 21766  01475C  0D01               	mullw	1
 21767  01475E  0E62               	movlw	low HMI_SetButton@reindex
 21768  014760  24F3               	addwf	prodl,w,c
 21769  014762  6ED9               	movwf	fsr2l,c
 21770  014764  0E00               	movlw	high HMI_SetButton@reindex
 21771  014766  20F4               	addwfc	prodh,w,c
 21772  014768  6EDA               	movwf	fsr2h,c
 21773  01476A  50DF               	movf	indf2,w,c
 21774  01476C  6F60               	movwf	??_HMI_SetButton& (0+255),b
 21775  01476E  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 21776  014772  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 21777  014774  D002               	goto	u12084
 21778  014776                     u12085:
 21779  014776  90D8               	bcf	status,0,c
 21780  014778  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 21781  01477A                     u12084:
 21782  01477A  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 21783  01477C  D7FC               	goto	u12085
 21784  01477E  0100               	movlb	0	; () banked
 21785  014780  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 21786  014782  6F67               	movwf	HMI_SetButton@v& (0+255),b
 21787                           
 21788                           ; BSR set to: 0
 21789                           ;HMI.c: 192: v = v >> 4;
 21790  014784  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 21791  014786  0B0F               	andlw	15
 21792  014788  6F67               	movwf	HMI_SetButton@v& (0+255),b
 21793                           
 21794                           ; BSR set to: 0
 21795                           ;HMI.c: 193: v = v & 0x0F;
 21796  01478A  5167               	movf	HMI_SetButton@v& (0+255),w,b
 21797  01478C  0B0F               	andlw	15
 21798  01478E  6F67               	movwf	HMI_SetButton@v& (0+255),b
 21799                           
 21800                           ; BSR set to: 0
 21801                           ;HMI.c: 194: HMIBoard.pButton = v;
 21802  014790  0102               	movlb	2	; () banked
 21803  014792  5188               	movf	(_HMIBoard+6)& (0+255),w,b
 21804  014794  0100               	movlb	0	; () banked
 21805  014796  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 21806  014798  0BF0               	andlw	-16
 21807  01479A  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 21808  01479C  0102               	movlb	2	; () banked
 21809  01479E  6F88               	movwf	(_HMIBoard+6)& (0+255),b
 21810                           
 21811                           ; BSR set to: 2
 21812  0147A0  0012               	return		;funcret
 21813  0147A2                     __end_of_HMI_SetButton:
 21814                           	opt stack 0
 21815                           tosu	equ	0xFFF
 21816                           tosh	equ	0xFFE
 21817                           tosl	equ	0xFFD
 21818                           pclath	equ	0xFFA
 21819                           tblptru	equ	0xFF8
 21820                           tblptrh	equ	0xFF7
 21821                           tblptrl	equ	0xFF6
 21822                           tablat	equ	0xFF5
 21823                           prodh	equ	0xFF4
 21824                           prodl	equ	0xFF3
 21825                           intcon	equ	0xFF2
 21826                           postinc0	equ	0xFEE
 21827                           wreg	equ	0xFE8
 21828                           indf1	equ	0xFE7
 21829                           postdec1	equ	0xFE5
 21830                           fsr1h	equ	0xFE2
 21831                           fsr1l	equ	0xFE1
 21832                           indf2	equ	0xFDF
 21833                           postinc2	equ	0xFDE
 21834                           postdec2	equ	0xFDD
 21835                           plusw2	equ	0xFDB
 21836                           fsr2h	equ	0xFDA
 21837                           fsr2l	equ	0xFD9
 21838                           status	equ	0xFD8
 21839                           
 21840 ;; *************** function _LED_Toggle *****************
 21841 ;; Defined at:
 21842 ;;		line 50 in file "Library/LED.c"
 21843 ;; Parameters:    Size  Location     Type
 21844 ;;  pLED            1    wreg     enum E6739
 21845 ;; Auto vars:     Size  Location     Type
 21846 ;;  pLED            1   24[BANK0 ] enum E6739
 21847 ;; Return value:  Size  Location     Type
 21848 ;;                  1    wreg      void 
 21849 ;; Registers used:
 21850 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21851 ;; Tracked objects:
 21852 ;;		On entry : 0/0
 21853 ;;		On exit  : 0/0
 21854 ;;		Unchanged: 0/0
 21855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21859 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21860 ;;Total ram usage:        1 bytes
 21861 ;; Hardware stack levels used:    1
 21862 ;; Hardware stack levels required when called:   12
 21863 ;; This function calls:
 21864 ;;		_Port_TogglePin
 21865 ;; This function is called by:
 21866 ;;		_LCD_Reset
 21867 ;;		_Event_DIPSwitch
 21868 ;;		_Event_TestButton
 21869 ;;		_Event_ADCSequenceComplete
 21870 ;;		_Event_HMI_DIPSwitch
 21871 ;;		_Event_HMI_LeftButton
 21872 ;;		_Event_HMI_RightButton
 21873 ;;		_Event_HMI_UpButton
 21874 ;;		_Event_HMI_DownButton
 21875 ;; This function uses a non-reentrant model
 21876 ;;
 21877                           
 21878                           	psect	text105
 21879  0153B0                     __ptext105:
 21880                           	opt stack 0
 21881  0153B0                     _LED_Toggle:
 21882                           	opt stack 15
 21883                           
 21884                           ; BSR set to: 2
 21885                           ;incstack = 0
 21886                           ;LED_Toggle@pLED stored from wreg
 21887  0153B0  0100               	movlb	0	; () banked
 21888  0153B2  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 21889                           
 21890                           ;LED.c: 52: switch (pLED)
 21891  0153B4  D014               	goto	l234
 21892  0153B6                     
 21893                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 21894  0153B6  0E9F               	movlw	low _PortC
 21895  0153B8  0100               	movlb	0	; () banked
 21896  0153BA  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21897  0153BC  0E01               	movlw	high _PortC
 21898  0153BE  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21899  0153C0  0E00               	movlw	0
 21900  0153C2  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21901  0153C4  ECA9  F0AB         	call	_Port_TogglePin	;wreg free
 21902                           
 21903                           ;LED.c: 56: break;
 21904  0153C8  0012               	return	
 21905  0153CA                     
 21906                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 21907  0153CA  0E9F               	movlw	low _PortC
 21908  0153CC  0100               	movlb	0	; () banked
 21909  0153CE  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21910  0153D0  0E01               	movlw	high _PortC
 21911  0153D2  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21912  0153D4  0E01               	movlw	1
 21913  0153D6  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21914  0153D8  ECA9  F0AB         	call	_Port_TogglePin	;wreg free
 21915                           
 21916                           ;LED.c: 60: }
 21917                           
 21918                           ;LED.c: 59: break;
 21919  0153DC  0012               	return	
 21920  0153DE                     l234:
 21921  0153DE  0100               	movlb	0	; () banked
 21922  0153E0  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 21923                           
 21924                           ; Switch size 1, requested type "space"
 21925                           ; Number of cases is 2, Range of values is 0 to 1
 21926                           ; switch strategies available:
 21927                           ; Name         Instructions Cycles
 21928                           ; simple_byte            7     4 (average)
 21929                           ;	Chosen strategy is simple_byte
 21930  0153E2  0A00               	xorlw	0	; case 0
 21931  0153E4  B4D8               	btfsc	status,2,c
 21932  0153E6  D7E7               	goto	l235
 21933  0153E8  0A01               	xorlw	1	; case 1
 21934  0153EA  A4D8               	btfss	status,2,c
 21935  0153EC  0012               	return	
 21936  0153EE  D7ED               	goto	l237
 21937  0153F0                     __end_of_LED_Toggle:
 21938                           	opt stack 0
 21939                           tosu	equ	0xFFF
 21940                           tosh	equ	0xFFE
 21941                           tosl	equ	0xFFD
 21942                           pclath	equ	0xFFA
 21943                           tblptru	equ	0xFF8
 21944                           tblptrh	equ	0xFF7
 21945                           tblptrl	equ	0xFF6
 21946                           tablat	equ	0xFF5
 21947                           prodh	equ	0xFF4
 21948                           prodl	equ	0xFF3
 21949                           intcon	equ	0xFF2
 21950                           postinc0	equ	0xFEE
 21951                           wreg	equ	0xFE8
 21952                           indf1	equ	0xFE7
 21953                           postdec1	equ	0xFE5
 21954                           fsr1h	equ	0xFE2
 21955                           fsr1l	equ	0xFE1
 21956                           indf2	equ	0xFDF
 21957                           postinc2	equ	0xFDE
 21958                           postdec2	equ	0xFDD
 21959                           plusw2	equ	0xFDB
 21960                           fsr2h	equ	0xFDA
 21961                           fsr2l	equ	0xFD9
 21962                           status	equ	0xFD8
 21963                           
 21964 ;; *************** function _Port_TogglePin *****************
 21965 ;; Defined at:
 21966 ;;		line 278 in file "Library/Port.c"
 21967 ;; Parameters:    Size  Location     Type
 21968 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 21969 ;;		 -> PortC(10), 
 21970 ;;  pPin            1   22[BANK0 ] enum E6750
 21971 ;; Auto vars:     Size  Location     Type
 21972 ;;  Value           1   23[BANK0 ] unsigned char 
 21973 ;; Return value:  Size  Location     Type
 21974 ;;                  1    wreg      void 
 21975 ;; Registers used:
 21976 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21977 ;; Tracked objects:
 21978 ;;		On entry : 0/0
 21979 ;;		On exit  : 0/0
 21980 ;;		Unchanged: 0/0
 21981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21982 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21985 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21986 ;;Total ram usage:        4 bytes
 21987 ;; Hardware stack levels used:    1
 21988 ;; Hardware stack levels required when called:   11
 21989 ;; This function calls:
 21990 ;;		_Port_GetPin
 21991 ;;		_Port_SetPin
 21992 ;; This function is called by:
 21993 ;;		_LED_Toggle
 21994 ;; This function uses a non-reentrant model
 21995 ;;
 21996                           
 21997                           	psect	text106
 21998  015752                     __ptext106:
 21999                           	opt stack 0
 22000  015752                     _Port_TogglePin:
 22001                           	opt stack 15
 22002                           
 22003                           ;Port.c: 280: UINT8 Value;
 22004                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 22005                           
 22006                           ;incstack = 0
 22007  015752  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 22008  015756  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 22009  01575A  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 22010  01575E  EC72  F0AA         	call	_Port_GetPin	;wreg free
 22011  015762  0100               	movlb	0	; () banked
 22012  015764  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 22013                           
 22014                           ; BSR set to: 0
 22015                           ;Port.c: 282: Value ^= 0x01;
 22016  015766  0E01               	movlw	1
 22017  015768  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 22018                           
 22019                           ; BSR set to: 0
 22020                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 22021  01576A  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 22022  01576E  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 22023  015772  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 22024  015776  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 22025  01577A  EC5D  F09E         	call	_Port_SetPin	;wreg free
 22026  01577E  0012               	return		;funcret
 22027  015780                     __end_of_Port_TogglePin:
 22028                           	opt stack 0
 22029                           tosu	equ	0xFFF
 22030                           tosh	equ	0xFFE
 22031                           tosl	equ	0xFFD
 22032                           pclath	equ	0xFFA
 22033                           tblptru	equ	0xFF8
 22034                           tblptrh	equ	0xFF7
 22035                           tblptrl	equ	0xFF6
 22036                           tablat	equ	0xFF5
 22037                           prodh	equ	0xFF4
 22038                           prodl	equ	0xFF3
 22039                           intcon	equ	0xFF2
 22040                           postinc0	equ	0xFEE
 22041                           wreg	equ	0xFE8
 22042                           indf1	equ	0xFE7
 22043                           postdec1	equ	0xFE5
 22044                           fsr1h	equ	0xFE2
 22045                           fsr1l	equ	0xFE1
 22046                           indf2	equ	0xFDF
 22047                           postinc2	equ	0xFDE
 22048                           postdec2	equ	0xFDD
 22049                           plusw2	equ	0xFDB
 22050                           fsr2h	equ	0xFDA
 22051                           fsr2l	equ	0xFD9
 22052                           status	equ	0xFD8
 22053                           
 22054 ;; *************** function _Port_SetPin *****************
 22055 ;; Defined at:
 22056 ;;		line 247 in file "Library/Port.c"
 22057 ;; Parameters:    Size  Location     Type
 22058 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 22059 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 22060 ;;  pPin            1   17[BANK0 ] enum E6750
 22061 ;;  pValue          1   18[BANK0 ] unsigned char 
 22062 ;; Auto vars:     Size  Location     Type
 22063 ;;  Type            1   19[BANK0 ] enum E6795
 22064 ;; Return value:  Size  Location     Type
 22065 ;;                  1    wreg      void 
 22066 ;; Registers used:
 22067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22068 ;; Tracked objects:
 22069 ;;		On entry : 0/0
 22070 ;;		On exit  : 0/0
 22071 ;;		Unchanged: 0/0
 22072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22073 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22076 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22077 ;;Total ram usage:        5 bytes
 22078 ;; Hardware stack levels used:    1
 22079 ;; Hardware stack levels required when called:   10
 22080 ;; This function calls:
 22081 ;;		_Byte_SetBit
 22082 ;;		_Word_GetPair
 22083 ;; This function is called by:
 22084 ;;		_Reset_Low
 22085 ;;		_Reset_High
 22086 ;;		_LED_Set
 22087 ;;		_Port_TogglePin
 22088 ;;		_Motor_Step
 22089 ;;		_MXK_Init
 22090 ;;		_Motor_Init
 22091 ;; This function uses a non-reentrant model
 22092 ;;
 22093                           
 22094                           	psect	text107
 22095  013CBA                     __ptext107:
 22096                           	opt stack 0
 22097  013CBA                     _Port_SetPin:
 22098                           	opt stack 19
 22099                           
 22100                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 22101                           
 22102                           ;incstack = 0
 22103  013CBA  0E08               	movlw	8
 22104  013CBC  0100               	movlb	0	; () banked
 22105  013CBE  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 22106  013CC0  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 22107  013CC2  0E00               	movlw	0
 22108  013CC4  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 22109  013CC6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 22110  013CC8  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 22111  013CCC  EC18  F0AB         	call	_Word_GetPair	;wreg free
 22112  013CD0  0100               	movlb	0	; () banked
 22113  013CD2  6F73               	movwf	Port_SetPin@Type& (0+255),b
 22114                           
 22115                           ;Port.c: 250: switch (Type)
 22116  013CD4  D03D               	goto	l427
 22117  013CD6                     
 22118                           ; BSR set to: 0
 22119                           ;Port.c: 256: pValue &= 1;
 22120                           
 22121                           ; BSR set to: 0
 22122  013CD6  0E01               	movlw	1
 22123  013CD8  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22124                           
 22125                           ; BSR set to: 0
 22126                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22127  013CDA  EE20 F002          	lfsr	2,2
 22128  013CDE  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22129  013CE0  26D9               	addwf	fsr2l,f,c
 22130  013CE2  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22131  013CE4  22DA               	addwfc	fsr2h,f,c
 22132  013CE6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22133  013CEA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22134  013CEE  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22135  013CF2  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22136  013CF6  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22137                           
 22138                           ;Port.c: 258: break;
 22139  013CFA  0012               	return	
 22140  013CFC                     
 22141                           ;Port.c: 261: pValue &= 1;
 22142  013CFC  0E01               	movlw	1
 22143  013CFE  0100               	movlb	0	; () banked
 22144  013D00  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22145                           
 22146                           ;Port.c: 262: pValue ^= 1;
 22147  013D02  0E01               	movlw	1
 22148  013D04  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 22149                           
 22150                           ; BSR set to: 0
 22151                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22152  013D06  EE20 F002          	lfsr	2,2
 22153  013D0A  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22154  013D0C  26D9               	addwf	fsr2l,f,c
 22155  013D0E  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22156  013D10  22DA               	addwfc	fsr2h,f,c
 22157  013D12  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22158  013D16  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22159  013D1A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22160  013D1E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22161  013D22  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22162                           
 22163                           ;Port.c: 264: break;
 22164  013D26  0012               	return	
 22165  013D28                     
 22166                           ;Port.c: 266: pValue &= 1;
 22167  013D28  0E01               	movlw	1
 22168  013D2A  0100               	movlb	0	; () banked
 22169  013D2C  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22170                           
 22171                           ; BSR set to: 0
 22172                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 22173  013D2E  EE20 F004          	lfsr	2,4
 22174  013D32  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22175  013D34  26D9               	addwf	fsr2l,f,c
 22176  013D36  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22177  013D38  22DA               	addwfc	fsr2h,f,c
 22178  013D3A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22179  013D3E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22180  013D42  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22181  013D46  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22182  013D4A  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22183                           
 22184                           ;Port.c: 269: }
 22185                           
 22186                           ;Port.c: 268: break;
 22187  013D4E  0012               	return	
 22188  013D50                     l427:
 22189  013D50  0100               	movlb	0	; () banked
 22190  013D52  5173               	movf	Port_SetPin@Type& (0+255),w,b
 22191                           
 22192                           ; Switch size 1, requested type "space"
 22193                           ; Number of cases is 4, Range of values is 0 to 3
 22194                           ; switch strategies available:
 22195                           ; Name         Instructions Cycles
 22196                           ; simple_byte           13     7 (average)
 22197                           ;	Chosen strategy is simple_byte
 22198  013D54  0A00               	xorlw	0	; case 0
 22199  013D56  B4D8               	btfsc	status,2,c
 22200  013D58  0012               	return	
 22201  013D5A  0A01               	xorlw	1	; case 1
 22202  013D5C  B4D8               	btfsc	status,2,c
 22203  013D5E  D7BB               	goto	l430
 22204  013D60  0A03               	xorlw	3	; case 2
 22205  013D62  B4D8               	btfsc	status,2,c
 22206  013D64  D7CB               	goto	l432
 22207  013D66  0A01               	xorlw	1	; case 3
 22208  013D68  A4D8               	btfss	status,2,c
 22209  013D6A  0012               	return	
 22210  013D6C  D7DD               	goto	l433
 22211  013D6E                     __end_of_Port_SetPin:
 22212                           	opt stack 0
 22213                           tosu	equ	0xFFF
 22214                           tosh	equ	0xFFE
 22215                           tosl	equ	0xFFD
 22216                           pclath	equ	0xFFA
 22217                           tblptru	equ	0xFF8
 22218                           tblptrh	equ	0xFF7
 22219                           tblptrl	equ	0xFF6
 22220                           tablat	equ	0xFF5
 22221                           prodh	equ	0xFF4
 22222                           prodl	equ	0xFF3
 22223                           intcon	equ	0xFF2
 22224                           postinc0	equ	0xFEE
 22225                           wreg	equ	0xFE8
 22226                           indf1	equ	0xFE7
 22227                           postdec1	equ	0xFE5
 22228                           fsr1h	equ	0xFE2
 22229                           fsr1l	equ	0xFE1
 22230                           indf2	equ	0xFDF
 22231                           postinc2	equ	0xFDE
 22232                           postdec2	equ	0xFDD
 22233                           plusw2	equ	0xFDB
 22234                           fsr2h	equ	0xFDA
 22235                           fsr2l	equ	0xFD9
 22236                           status	equ	0xFD8
 22237                           
 22238 ;; *************** function _Port_GetPin *****************
 22239 ;; Defined at:
 22240 ;;		line 271 in file "Library/Port.c"
 22241 ;; Parameters:    Size  Location     Type
 22242 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 22243 ;;		 -> PortB(10), PortE(10), PortC(10), 
 22244 ;;  pPin            1    2[BANK0 ] enum E6750
 22245 ;; Auto vars:     Size  Location     Type
 22246 ;;  Output          1    5[BANK0 ] unsigned char 
 22247 ;; Return value:  Size  Location     Type
 22248 ;;                  1    wreg      unsigned char 
 22249 ;; Registers used:
 22250 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22251 ;; Tracked objects:
 22252 ;;		On entry : 0/0
 22253 ;;		On exit  : 0/0
 22254 ;;		Unchanged: 0/0
 22255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22256 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22259 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22260 ;;Total ram usage:        6 bytes
 22261 ;; Hardware stack levels used:    1
 22262 ;; Hardware stack levels required when called:    7
 22263 ;; This function calls:
 22264 ;;		Nothing
 22265 ;; This function is called by:
 22266 ;;		_Port_TogglePin
 22267 ;;		_HMI_LeftSwitch
 22268 ;;		_HMI_RightSwitch
 22269 ;;		_HMI_UpSwitch
 22270 ;;		_HMI_DownSwitch
 22271 ;;		_MXK_TestButton
 22272 ;; This function uses a non-reentrant model
 22273 ;;
 22274                           
 22275                           	psect	text108
 22276  0154E4                     __ptext108:
 22277                           	opt stack 0
 22278  0154E4                     _Port_GetPin:
 22279                           	opt stack 22
 22280                           
 22281                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 22282                           
 22283                           ;incstack = 0
 22284  0154E4  0100               	movlb	0	; () banked
 22285  0154E6  EE20 F006          	lfsr	2,6
 22286  0154EA  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 22287  0154EC  26D9               	addwf	fsr2l,f,c
 22288  0154EE  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 22289  0154F0  22DA               	addwfc	fsr2h,f,c
 22290  0154F2  CFDE F063          	movff	postinc2,??_Port_GetPin
 22291  0154F6  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 22292  0154FA  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 22293  0154FE  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 22294  015502  50DF               	movf	indf2,w,c
 22295  015504  6F65               	movwf	Port_GetPin@Output& (0+255),b
 22296                           
 22297                           ; BSR set to: 0
 22298                           ;Port.c: 274: Output >>= (UINT8)pPin;
 22299  015506  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 22300  015508  6F63               	movwf	??_Port_GetPin& (0+255),b
 22301  01550A  D002               	goto	u10350
 22302  01550C                     u10355:
 22303  01550C  90D8               	bcf	status,0,c
 22304  01550E  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 22305  015510                     u10350:
 22306  015510  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 22307  015512  D7FC               	goto	u10355
 22308                           
 22309                           ;Port.c: 275: Output &= 1;
 22310  015514  0E01               	movlw	1
 22311  015516  0100               	movlb	0	; () banked
 22312  015518  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 22313                           
 22314                           ; BSR set to: 0
 22315                           ;Port.c: 276: return Output;
 22316  01551A  5165               	movf	Port_GetPin@Output& (0+255),w,b
 22317  01551C  0012               	return	
 22318  01551E                     __end_of_Port_GetPin:
 22319                           	opt stack 0
 22320                           tosu	equ	0xFFF
 22321                           tosh	equ	0xFFE
 22322                           tosl	equ	0xFFD
 22323                           pclath	equ	0xFFA
 22324                           tblptru	equ	0xFF8
 22325                           tblptrh	equ	0xFF7
 22326                           tblptrl	equ	0xFF6
 22327                           tablat	equ	0xFF5
 22328                           prodh	equ	0xFF4
 22329                           prodl	equ	0xFF3
 22330                           intcon	equ	0xFF2
 22331                           postinc0	equ	0xFEE
 22332                           wreg	equ	0xFE8
 22333                           indf1	equ	0xFE7
 22334                           postdec1	equ	0xFE5
 22335                           fsr1h	equ	0xFE2
 22336                           fsr1l	equ	0xFE1
 22337                           indf2	equ	0xFDF
 22338                           postinc2	equ	0xFDE
 22339                           postdec2	equ	0xFDD
 22340                           plusw2	equ	0xFDB
 22341                           fsr2h	equ	0xFDA
 22342                           fsr2l	equ	0xFD9
 22343                           status	equ	0xFD8
 22344                           
 22345 ;; *************** function _HMI_SetBar *****************
 22346 ;; Defined at:
 22347 ;;		line 205 in file "HMI.c"
 22348 ;; Parameters:    Size  Location     Type
 22349 ;;  pValue          1    wreg     unsigned char 
 22350 ;; Auto vars:     Size  Location     Type
 22351 ;;  pValue          1    0[BANK0 ] unsigned char 
 22352 ;; Return value:  Size  Location     Type
 22353 ;;                  1    wreg      void 
 22354 ;; Registers used:
 22355 ;;		wreg
 22356 ;; Tracked objects:
 22357 ;;		On entry : 0/0
 22358 ;;		On exit  : 0/0
 22359 ;;		Unchanged: 0/0
 22360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22364 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22365 ;;Total ram usage:        1 bytes
 22366 ;; Hardware stack levels used:    1
 22367 ;; Hardware stack levels required when called:    7
 22368 ;; This function calls:
 22369 ;;		Nothing
 22370 ;; This function is called by:
 22371 ;;		_Event_DIPSwitch
 22372 ;;		_Event_HMI_DIPSwitch
 22373 ;;		_Event_HMI_LeftButton
 22374 ;;		_Event_HMI_RightButton
 22375 ;; This function uses a non-reentrant model
 22376 ;;
 22377                           
 22378                           	psect	text109
 22379  015B70                     __ptext109:
 22380                           	opt stack 0
 22381  015B70                     _HMI_SetBar:
 22382                           	opt stack 20
 22383                           
 22384                           ; BSR set to: 0
 22385                           ;incstack = 0
 22386                           ;HMI_SetBar@pValue stored from wreg
 22387  015B70  0100               	movlb	0	; () banked
 22388  015B72  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 22389                           
 22390                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 22391  015B74  C060  F289         	movff	HMI_SetBar@pValue,_HMIBoard+7
 22392  015B78  0012               	return		;funcret
 22393  015B7A                     __end_of_HMI_SetBar:
 22394                           	opt stack 0
 22395                           tosu	equ	0xFFF
 22396                           tosh	equ	0xFFE
 22397                           tosl	equ	0xFFD
 22398                           pclath	equ	0xFFA
 22399                           tblptru	equ	0xFF8
 22400                           tblptrh	equ	0xFF7
 22401                           tblptrl	equ	0xFF6
 22402                           tablat	equ	0xFF5
 22403                           prodh	equ	0xFF4
 22404                           prodl	equ	0xFF3
 22405                           intcon	equ	0xFF2
 22406                           postinc0	equ	0xFEE
 22407                           wreg	equ	0xFE8
 22408                           indf1	equ	0xFE7
 22409                           postdec1	equ	0xFE5
 22410                           fsr1h	equ	0xFE2
 22411                           fsr1l	equ	0xFE1
 22412                           indf2	equ	0xFDF
 22413                           postinc2	equ	0xFDE
 22414                           postdec2	equ	0xFDD
 22415                           plusw2	equ	0xFDB
 22416                           fsr2h	equ	0xFDA
 22417                           fsr2l	equ	0xFD9
 22418                           status	equ	0xFD8
 22419                           
 22420 ;; *************** function _HMI_GetBar *****************
 22421 ;; Defined at:
 22422 ;;		line 209 in file "HMI.c"
 22423 ;; Parameters:    Size  Location     Type
 22424 ;;		None
 22425 ;; Auto vars:     Size  Location     Type
 22426 ;;		None
 22427 ;; Return value:  Size  Location     Type
 22428 ;;                  1    wreg      unsigned char 
 22429 ;; Registers used:
 22430 ;;		wreg, status,2
 22431 ;; Tracked objects:
 22432 ;;		On entry : 0/0
 22433 ;;		On exit  : 0/0
 22434 ;;		Unchanged: 0/0
 22435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22440 ;;Total ram usage:        0 bytes
 22441 ;; Hardware stack levels used:    1
 22442 ;; Hardware stack levels required when called:    7
 22443 ;; This function calls:
 22444 ;;		Nothing
 22445 ;; This function is called by:
 22446 ;;		_Event_DIPSwitch
 22447 ;;		_Event_HMI_DIPSwitch
 22448 ;; This function uses a non-reentrant model
 22449 ;;
 22450                           
 22451                           	psect	text110
 22452  015B90                     __ptext110:
 22453                           	opt stack 0
 22454  015B90                     _HMI_GetBar:
 22455                           	opt stack 20
 22456                           
 22457                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 22458                           
 22459                           ;incstack = 0
 22460  015B90  0102               	movlb	2	; () banked
 22461  015B92  5189               	movf	(_HMIBoard+7)& (0+255),w,b
 22462  015B94  0012               	return	
 22463  015B96                     __end_of_HMI_GetBar:
 22464                           	opt stack 0
 22465                           tosu	equ	0xFFF
 22466                           tosh	equ	0xFFE
 22467                           tosl	equ	0xFFD
 22468                           pclath	equ	0xFFA
 22469                           tblptru	equ	0xFF8
 22470                           tblptrh	equ	0xFF7
 22471                           tblptrl	equ	0xFF6
 22472                           tablat	equ	0xFF5
 22473                           prodh	equ	0xFF4
 22474                           prodl	equ	0xFF3
 22475                           intcon	equ	0xFF2
 22476                           postinc0	equ	0xFEE
 22477                           wreg	equ	0xFE8
 22478                           indf1	equ	0xFE7
 22479                           postdec1	equ	0xFE5
 22480                           fsr1h	equ	0xFE2
 22481                           fsr1l	equ	0xFE1
 22482                           indf2	equ	0xFDF
 22483                           postinc2	equ	0xFDE
 22484                           postdec2	equ	0xFDD
 22485                           plusw2	equ	0xFDB
 22486                           fsr2h	equ	0xFDA
 22487                           fsr2l	equ	0xFD9
 22488                           status	equ	0xFD8
 22489                           
 22490 ;; *************** function _HMI_Init *****************
 22491 ;; Defined at:
 22492 ;;		line 104 in file "HMI.c"
 22493 ;; Parameters:    Size  Location     Type
 22494 ;;		None
 22495 ;; Auto vars:     Size  Location     Type
 22496 ;;  in              2   72[BANK0 ] unsigned short 
 22497 ;; Return value:  Size  Location     Type
 22498 ;;                  1    wreg      void 
 22499 ;; Registers used:
 22500 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22501 ;; Tracked objects:
 22502 ;;		On entry : 0/0
 22503 ;;		On exit  : 0/0
 22504 ;;		Unchanged: 0/0
 22505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22507 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22509 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22510 ;;Total ram usage:        2 bytes
 22511 ;; Hardware stack levels used:    1
 22512 ;; Hardware stack levels required when called:   16
 22513 ;; This function calls:
 22514 ;;		_Button_Init
 22515 ;;		_SPI_Init
 22516 ;;		_SPI_MinSpeed
 22517 ;; This function is called by:
 22518 ;;		_main
 22519 ;; This function uses a non-reentrant model
 22520 ;;
 22521                           
 22522                           	psect	text111
 22523  01278C                     __ptext111:
 22524                           	opt stack 0
 22525  01278C                     _HMI_Init:
 22526                           	opt stack 14
 22527                           
 22528                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 22529                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 22530                           
 22531                           ; BSR set to: 2
 22532                           ;incstack = 0
 22533  01278C  0EB2               	movlw	low (_HMIBoard+48)
 22534  01278E  0100               	movlb	0	; () banked
 22535  012790  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22536  012792  0E02               	movlw	high (_HMIBoard+48)
 22537  012794  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22538  012796  0E00               	movlw	0
 22539  012798  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22540  01279A  0E02               	movlw	2
 22541  01279C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22542  01279E  0E96               	movlw	low _HMI_InitButtons
 22543  0127A0  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22544  0127A2  0E5B               	movlw	high _HMI_InitButtons
 22545  0127A4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22546  0127A6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22547  0127A8  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22548  0127AA  0E74               	movlw	low _HMI_DIPSwitch
 22549  0127AC  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22550  0127AE  0E5A               	movlw	high _HMI_DIPSwitch
 22551  0127B0  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22552  0127B2  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 22553  0127B4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22554  0127B6  0E04               	movlw	low _Event_NULL
 22555  0127B8  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22556  0127BA  0E14               	movlw	high _Event_NULL
 22557  0127BC  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22558  0127BE  0E00               	movlw	low (_Event_NULL shr (0+16))
 22559  0127C0  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22560  0127C2  ECB7  F09E         	call	_Button_Init	;wreg free
 22561                           
 22562                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 22563                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 22564  0127C6  0E94               	movlw	low (_HMIBoard+18)
 22565  0127C8  0100               	movlb	0	; () banked
 22566  0127CA  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22567  0127CC  0E02               	movlw	high (_HMIBoard+18)
 22568  0127CE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22569  0127D0  0E00               	movlw	0
 22570  0127D2  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22571  0127D4  0E02               	movlw	2
 22572  0127D6  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22573  0127D8  0E96               	movlw	low _HMI_InitButtons
 22574  0127DA  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22575  0127DC  0E5B               	movlw	high _HMI_InitButtons
 22576  0127DE  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22577  0127E0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22578  0127E2  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22579  0127E4  0EC4               	movlw	low _HMI_LeftSwitch
 22580  0127E6  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22581  0127E8  0E5A               	movlw	high _HMI_LeftSwitch
 22582  0127EA  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22583  0127EC  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 22584  0127EE  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22585  0127F0  0E04               	movlw	low _Event_NULL
 22586  0127F2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22587  0127F4  0E14               	movlw	high _Event_NULL
 22588  0127F6  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22589  0127F8  0E00               	movlw	low (_Event_NULL shr (0+16))
 22590  0127FA  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22591  0127FC  ECB7  F09E         	call	_Button_Init	;wreg free
 22592                           
 22593                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 22594                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 22595  012800  0E8A               	movlw	low (_HMIBoard+8)
 22596  012802  0100               	movlb	0	; () banked
 22597  012804  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22598  012806  0E02               	movlw	high (_HMIBoard+8)
 22599  012808  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22600  01280A  0E00               	movlw	0
 22601  01280C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22602  01280E  0E02               	movlw	2
 22603  012810  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22604  012812  0E96               	movlw	low _HMI_InitButtons
 22605  012814  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22606  012816  0E5B               	movlw	high _HMI_InitButtons
 22607  012818  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22608  01281A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22609  01281C  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22610  01281E  0EB0               	movlw	low _HMI_RightSwitch
 22611  012820  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22612  012822  0E5A               	movlw	high _HMI_RightSwitch
 22613  012824  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22614  012826  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 22615  012828  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22616  01282A  0E04               	movlw	low _Event_NULL
 22617  01282C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22618  01282E  0E14               	movlw	high _Event_NULL
 22619  012830  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22620  012832  0E00               	movlw	low (_Event_NULL shr (0+16))
 22621  012834  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22622  012836  ECB7  F09E         	call	_Button_Init	;wreg free
 22623                           
 22624                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 22625                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 22626  01283A  0E9E               	movlw	low (_HMIBoard+28)
 22627  01283C  0100               	movlb	0	; () banked
 22628  01283E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22629  012840  0E02               	movlw	high (_HMIBoard+28)
 22630  012842  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22631  012844  0E00               	movlw	0
 22632  012846  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22633  012848  0E02               	movlw	2
 22634  01284A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22635  01284C  0E96               	movlw	low _HMI_InitButtons
 22636  01284E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22637  012850  0E5B               	movlw	high _HMI_InitButtons
 22638  012852  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22639  012854  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22640  012856  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22641  012858  0E9C               	movlw	low _HMI_UpSwitch
 22642  01285A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22643  01285C  0E5A               	movlw	high _HMI_UpSwitch
 22644  01285E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22645  012860  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 22646  012862  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22647  012864  0E04               	movlw	low _Event_NULL
 22648  012866  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22649  012868  0E14               	movlw	high _Event_NULL
 22650  01286A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22651  01286C  0E00               	movlw	low (_Event_NULL shr (0+16))
 22652  01286E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22653  012870  ECB7  F09E         	call	_Button_Init	;wreg free
 22654                           
 22655                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 22656                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 22657  012874  0EA8               	movlw	low (_HMIBoard+38)
 22658  012876  0100               	movlb	0	; () banked
 22659  012878  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22660  01287A  0E02               	movlw	high (_HMIBoard+38)
 22661  01287C  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22662  01287E  0E00               	movlw	0
 22663  012880  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22664  012882  0E02               	movlw	2
 22665  012884  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22666  012886  0E96               	movlw	low _HMI_InitButtons
 22667  012888  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22668  01288A  0E5B               	movlw	high _HMI_InitButtons
 22669  01288C  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22670  01288E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22671  012890  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22672  012892  0E88               	movlw	low _HMI_DownSwitch
 22673  012894  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22674  012896  0E5A               	movlw	high _HMI_DownSwitch
 22675  012898  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22676  01289A  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 22677  01289C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22678  01289E  0E04               	movlw	low _Event_NULL
 22679  0128A0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22680  0128A2  0E14               	movlw	high _Event_NULL
 22681  0128A4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22682  0128A6  0E00               	movlw	low (_Event_NULL shr (0+16))
 22683  0128A8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22684  0128AA  ECB7  F09E         	call	_Button_Init	;wreg free
 22685                           
 22686                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 22687  0128AE  0EA0               	movlw	160
 22688  0128B0  0100               	movlb	0	; () banked
 22689  0128B2  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 22690  0128B4  0E86               	movlw	134
 22691  0128B6  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 22692  0128B8  0E01               	movlw	1
 22693  0128BA  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 22694  0128BC  0E00               	movlw	0
 22695  0128BE  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 22696  0128C0  0E00               	movlw	0
 22697  0128C2  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 22698  0128C4  0E02               	movlw	2
 22699  0128C6  6F92               	movwf	SPI_Init@pMode& (0+255),b
 22700  0128C8  EC8F  F082         	call	_SPI_Init	;wreg free
 22701                           
 22702                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 22703  0128CC  0E61               	movlw	low _SPI1
 22704  0128CE  0100               	movlb	0	; () banked
 22705  0128D0  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 22706  0128D2  0E01               	movlw	high _SPI1
 22707  0128D4  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 22708  0128D6  ECCB  F0A5         	call	_SPI_MinSpeed	;wreg free
 22709                           
 22710                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 22711  0128DA  0E00               	movlw	0
 22712  0128DC  0100               	movlb	0	; () banked
 22713  0128DE  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 22714  0128E0  0E00               	movlw	0
 22715  0128E2  6FA8               	movwf	HMI_Init@in& (0+255),b
 22716  0128E4                     l15771:
 22717                           
 22718                           ; BSR set to: 0
 22719  0128E4  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 22720  0128E6  E10F               	bnz	l1153
 22721  0128E8  0E08               	movlw	8
 22722  0128EA  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 22723  0128EC  B0D8               	btfsc	status,0,c
 22724  0128EE  0012               	return	
 22725                           
 22726                           ; BSR set to: 0
 22727                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 22728                           
 22729                           ; BSR set to: 0
 22730                           
 22731                           ; BSR set to: 0
 22732  0128F0  0E82               	movlw	low _HMIBoard
 22733  0128F2  25A8               	addwf	HMI_Init@in& (0+255),w,b
 22734  0128F4  6ED9               	movwf	fsr2l,c
 22735  0128F6  0E02               	movlw	high _HMIBoard
 22736  0128F8  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 22737  0128FA  6EDA               	movwf	fsr2h,c
 22738  0128FC  0E00               	movlw	0
 22739  0128FE  6EDF               	movwf	indf2,c
 22740                           
 22741                           ; BSR set to: 0
 22742  012900  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 22743  012902  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 22744  012904  D7EF               	goto	l15771
 22745  012906                     l1153:
 22746                           
 22747                           ; BSR set to: 0
 22748  012906  0012               	return		;funcret
 22749  012908                     __end_of_HMI_Init:
 22750                           	opt stack 0
 22751                           tosu	equ	0xFFF
 22752                           tosh	equ	0xFFE
 22753                           tosl	equ	0xFFD
 22754                           pclath	equ	0xFFA
 22755                           tblptru	equ	0xFF8
 22756                           tblptrh	equ	0xFF7
 22757                           tblptrl	equ	0xFF6
 22758                           tablat	equ	0xFF5
 22759                           prodh	equ	0xFF4
 22760                           prodl	equ	0xFF3
 22761                           intcon	equ	0xFF2
 22762                           postinc0	equ	0xFEE
 22763                           wreg	equ	0xFE8
 22764                           indf1	equ	0xFE7
 22765                           postdec1	equ	0xFE5
 22766                           fsr1h	equ	0xFE2
 22767                           fsr1l	equ	0xFE1
 22768                           indf2	equ	0xFDF
 22769                           postinc2	equ	0xFDE
 22770                           postdec2	equ	0xFDD
 22771                           plusw2	equ	0xFDB
 22772                           fsr2h	equ	0xFDA
 22773                           fsr2l	equ	0xFD9
 22774                           status	equ	0xFD8
 22775                           
 22776 ;; *************** function _SPI_MinSpeed *****************
 22777 ;; Defined at:
 22778 ;;		line 190 in file "Library/SPI.c"
 22779 ;; Parameters:    Size  Location     Type
 22780 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 22781 ;;		 -> SPI1(11), 
 22782 ;; Auto vars:     Size  Location     Type
 22783 ;;		None
 22784 ;; Return value:  Size  Location     Type
 22785 ;;                  1    wreg      void 
 22786 ;; Registers used:
 22787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22788 ;; Tracked objects:
 22789 ;;		On entry : 0/0
 22790 ;;		On exit  : 0/0
 22791 ;;		Unchanged: 0/0
 22792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22793 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22796 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22797 ;;Total ram usage:        2 bytes
 22798 ;; Hardware stack levels used:    1
 22799 ;; Hardware stack levels required when called:    9
 22800 ;; This function calls:
 22801 ;;		_Byte_SetBit
 22802 ;;		_Byte_SetQuad
 22803 ;; This function is called by:
 22804 ;;		_HMI_Init
 22805 ;; This function uses a non-reentrant model
 22806 ;;
 22807                           
 22808                           	psect	text112
 22809  014B96                     __ptext112:
 22810                           	opt stack 0
 22811  014B96                     _SPI_MinSpeed:
 22812                           	opt stack 20
 22813                           
 22814                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22815                           
 22816                           ; BSR set to: 0
 22817                           ;incstack = 0
 22818  014B96  0100               	movlb	0	; () banked
 22819  014B98  EE20 F006          	lfsr	2,6
 22820  014B9C  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22821  014B9E  26D9               	addwf	fsr2l,f,c
 22822  014BA0  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22823  014BA2  22DA               	addwfc	fsr2h,f,c
 22824  014BA4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22825  014BA8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22826  014BAC  0E05               	movlw	5
 22827  014BAE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22828  014BB0  0E00               	movlw	0
 22829  014BB2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22830  014BB4  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22831                           
 22832                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 22833  014BB8  0100               	movlb	0	; () banked
 22834  014BBA  EE20 F006          	lfsr	2,6
 22835  014BBE  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22836  014BC0  26D9               	addwf	fsr2l,f,c
 22837  014BC2  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22838  014BC4  22DA               	addwfc	fsr2h,f,c
 22839  014BC6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22840  014BCA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22841  014BCE  0E00               	movlw	0
 22842  014BD0  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22843  014BD2  0E02               	movlw	2
 22844  014BD4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22845  014BD6  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 22846                           
 22847                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22848  014BDA  0100               	movlb	0	; () banked
 22849  014BDC  EE20 F006          	lfsr	2,6
 22850  014BE0  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22851  014BE2  26D9               	addwf	fsr2l,f,c
 22852  014BE4  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22853  014BE6  22DA               	addwfc	fsr2h,f,c
 22854  014BE8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22855  014BEC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22856  014BF0  0E05               	movlw	5
 22857  014BF2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22858  014BF4  0E01               	movlw	1
 22859  014BF6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22860  014BF8  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22861  014BFC  0012               	return		;funcret
 22862  014BFE                     __end_of_SPI_MinSpeed:
 22863                           	opt stack 0
 22864                           tosu	equ	0xFFF
 22865                           tosh	equ	0xFFE
 22866                           tosl	equ	0xFFD
 22867                           pclath	equ	0xFFA
 22868                           tblptru	equ	0xFF8
 22869                           tblptrh	equ	0xFF7
 22870                           tblptrl	equ	0xFF6
 22871                           tablat	equ	0xFF5
 22872                           prodh	equ	0xFF4
 22873                           prodl	equ	0xFF3
 22874                           intcon	equ	0xFF2
 22875                           postinc0	equ	0xFEE
 22876                           wreg	equ	0xFE8
 22877                           indf1	equ	0xFE7
 22878                           postdec1	equ	0xFE5
 22879                           fsr1h	equ	0xFE2
 22880                           fsr1l	equ	0xFE1
 22881                           indf2	equ	0xFDF
 22882                           postinc2	equ	0xFDE
 22883                           postdec2	equ	0xFDD
 22884                           plusw2	equ	0xFDB
 22885                           fsr2h	equ	0xFDA
 22886                           fsr2l	equ	0xFD9
 22887                           status	equ	0xFD8
 22888                           
 22889 ;; *************** function _SPI_Init *****************
 22890 ;; Defined at:
 22891 ;;		line 12 in file "Library/SPI.c"
 22892 ;; Parameters:    Size  Location     Type
 22893 ;;  pClock          4   45[BANK0 ] unsigned long 
 22894 ;;  pChannel        1   49[BANK0 ] enum E6744
 22895 ;;  pMode           1   50[BANK0 ] enum E6748
 22896 ;; Auto vars:     Size  Location     Type
 22897 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 22898 ;;		 -> SPI1(11), SPI2(11), 
 22899 ;; Return value:  Size  Location     Type
 22900 ;;                  1    wreg      void 
 22901 ;; Registers used:
 22902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22903 ;; Tracked objects:
 22904 ;;		On entry : 0/0
 22905 ;;		On exit  : 0/0
 22906 ;;		Unchanged: 0/0
 22907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22908 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22909 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22911 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22912 ;;Total ram usage:        8 bytes
 22913 ;; Hardware stack levels used:    1
 22914 ;; Hardware stack levels required when called:   12
 22915 ;; This function calls:
 22916 ;;		_Byte_SetBit
 22917 ;;		_Byte_SetQuad
 22918 ;;		_Port_SetPinType
 22919 ;;		_SPI_DCS
 22920 ;;		_SPI_DisableISR
 22921 ;;		_Timer2_Init
 22922 ;; This function is called by:
 22923 ;;		_Configure_GPIOs
 22924 ;;		_HMI_Init
 22925 ;; This function uses a non-reentrant model
 22926 ;;
 22927                           
 22928                           	psect	text113
 22929  01051E                     __ptext113:
 22930                           	opt stack 0
 22931  01051E                     _SPI_Init:
 22932                           	opt stack 16
 22933                           
 22934                           ;SPI.c: 14: SPIPtr pInput;
 22935                           ;SPI.c: 16: switch (pChannel)
 22936                           
 22937                           ;incstack = 0
 22938  01051E  D00A               	goto	l597
 22939  010520                     
 22940                           ;SPI.c: 19: pInput = &SPI1;
 22941  010520  0E61               	movlw	low _SPI1
 22942  010522  0100               	movlb	0	; () banked
 22943  010524  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22944  010526  0E01               	movlw	high _SPI1
 22945  010528  D003               	goto	L17
 22946  01052A                     
 22947                           ; BSR set to: 0
 22948                           ;SPI.c: 22: pInput = &SPI2;
 22949                           
 22950                           ; BSR set to: 0
 22951  01052A  0E6C               	movlw	low _SPI2
 22952  01052C  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22953  01052E  0E01               	movlw	high _SPI2
 22954  010530                     L17:
 22955  010530  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 22956                           
 22957                           ; BSR set to: 0
 22958                           ;SPI.c: 24: };
 22959                           
 22960                           ;SPI.c: 23: break;
 22961  010532  D008               	goto	l599
 22962  010534                     l597:
 22963                           
 22964                           ; BSR set to: 0
 22965  010534  0100               	movlb	0	; () banked
 22966  010536  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 22967                           
 22968                           ; Switch size 1, requested type "space"
 22969                           ; Number of cases is 2, Range of values is 0 to 1
 22970                           ; switch strategies available:
 22971                           ; Name         Instructions Cycles
 22972                           ; simple_byte            7     4 (average)
 22973                           ;	Chosen strategy is simple_byte
 22974  010538  0A00               	xorlw	0	; case 0
 22975  01053A  B4D8               	btfsc	status,2,c
 22976  01053C  D7F1               	goto	l598
 22977  01053E  0A01               	xorlw	1	; case 1
 22978  010540  B4D8               	btfsc	status,2,c
 22979  010542  D7F3               	goto	l600
 22980  010544                     l599:
 22981                           
 22982                           ; BSR set to: 0
 22983                           ;SPI.c: 26: pInput->mChannel = pChannel;
 22984                           
 22985                           ; BSR set to: 0
 22986  010544  EE20 F002          	lfsr	2,2
 22987  010548  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22988  01054A  26D9               	addwf	fsr2l,f,c
 22989  01054C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22990  01054E  22DA               	addwfc	fsr2h,f,c
 22991  010550  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 22992                           
 22993                           ;SPI.c: 35: switch (pChannel)
 22994  010554  D093               	goto	l601
 22995  010556                     
 22996                           ; BSR set to: 0
 22997                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 22998                           
 22999                           ; BSR set to: 0
 23000  010556  0E9F               	movlw	low _PortC
 23001  010558  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23002  01055A  0E01               	movlw	high _PortC
 23003  01055C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23004  01055E  0E02               	movlw	2
 23005  010560  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23006  010562  0E03               	movlw	3
 23007  010564  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23008  010566  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23009                           
 23010                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 23011  01056A  0E9F               	movlw	low _PortC
 23012  01056C  0100               	movlb	0	; () banked
 23013  01056E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23014  010570  0E01               	movlw	high _PortC
 23015  010572  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23016  010574  0E03               	movlw	3
 23017  010576  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23018  010578  0E03               	movlw	3
 23019  01057A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23020  01057C  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23021                           
 23022                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 23023  010580  0E9F               	movlw	low _PortC
 23024  010582  0100               	movlb	0	; () banked
 23025  010584  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23026  010586  0E01               	movlw	high _PortC
 23027  010588  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23028  01058A  0E05               	movlw	5
 23029  01058C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23030  01058E  0E03               	movlw	3
 23031  010590  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23032  010592  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23033                           
 23034                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 23035  010596  0E9F               	movlw	low _PortC
 23036  010598  0100               	movlb	0	; () banked
 23037  01059A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23038  01059C  0E01               	movlw	high _PortC
 23039  01059E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23040  0105A0  0E04               	movlw	4
 23041  0105A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23042  0105A4  0E00               	movlw	0
 23043  0105A6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23044  0105A8  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23045                           
 23046                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 23047  0105AC  0100               	movlb	0	; () banked
 23048  0105AE  EE20 F003          	lfsr	2,3
 23049  0105B2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23050  0105B4  26D9               	addwf	fsr2l,f,c
 23051  0105B6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23052  0105B8  22DA               	addwfc	fsr2h,f,c
 23053  0105BA  0EC7               	movlw	199
 23054  0105BC  6EDE               	movwf	postinc2,c
 23055  0105BE  0E0F               	movlw	15
 23056  0105C0  6EDD               	movwf	postdec2,c
 23057                           
 23058                           ; BSR set to: 0
 23059                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 23060  0105C2  EE20 F006          	lfsr	2,6
 23061  0105C6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23062  0105C8  26D9               	addwf	fsr2l,f,c
 23063  0105CA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23064  0105CC  22DA               	addwfc	fsr2h,f,c
 23065  0105CE  0EC6               	movlw	198
 23066  0105D0  6EDE               	movwf	postinc2,c
 23067  0105D2  0E0F               	movlw	15
 23068  0105D4  6EDD               	movwf	postdec2,c
 23069                           
 23070                           ; BSR set to: 0
 23071                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 23072  0105D6  EE20 F009          	lfsr	2,9
 23073  0105DA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23074  0105DC  26D9               	addwf	fsr2l,f,c
 23075  0105DE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23076  0105E0  22DA               	addwfc	fsr2h,f,c
 23077  0105E2  0EC9               	movlw	201
 23078  0105E4  D047               	goto	L18
 23079  0105E6                     
 23080                           ; BSR set to: 0
 23081                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 23082                           
 23083                           ; BSR set to: 0
 23084  0105E6  0E8B               	movlw	low _PortD
 23085  0105E8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23086  0105EA  0E01               	movlw	high _PortD
 23087  0105EC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23088  0105EE  0E07               	movlw	7
 23089  0105F0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23090  0105F2  0E03               	movlw	3
 23091  0105F4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23092  0105F6  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23093                           
 23094                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 23095  0105FA  0E8B               	movlw	low _PortD
 23096  0105FC  0100               	movlb	0	; () banked
 23097  0105FE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23098  010600  0E01               	movlw	high _PortD
 23099  010602  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23100  010604  0E06               	movlw	6
 23101  010606  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23102  010608  0E03               	movlw	3
 23103  01060A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23104  01060C  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23105                           
 23106                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 23107  010610  0E8B               	movlw	low _PortD
 23108  010612  0100               	movlb	0	; () banked
 23109  010614  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23110  010616  0E01               	movlw	high _PortD
 23111  010618  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23112  01061A  0E04               	movlw	4
 23113  01061C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23114  01061E  0E03               	movlw	3
 23115  010620  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23116  010622  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23117                           
 23118                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 23119  010626  0E8B               	movlw	low _PortD
 23120  010628  0100               	movlb	0	; () banked
 23121  01062A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23122  01062C  0E01               	movlw	high _PortD
 23123  01062E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23124  010630  0E05               	movlw	5
 23125  010632  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23126  010634  0E00               	movlw	0
 23127  010636  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23128  010638  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23129                           
 23130                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 23131  01063C  0100               	movlb	0	; () banked
 23132  01063E  EE20 F003          	lfsr	2,3
 23133  010642  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23134  010644  26D9               	addwf	fsr2l,f,c
 23135  010646  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23136  010648  22DA               	addwfc	fsr2h,f,c
 23137  01064A  0E6D               	movlw	109
 23138  01064C  6EDE               	movwf	postinc2,c
 23139  01064E  0E0F               	movlw	15
 23140  010650  6EDD               	movwf	postdec2,c
 23141                           
 23142                           ; BSR set to: 0
 23143                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 23144  010652  EE20 F006          	lfsr	2,6
 23145  010656  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23146  010658  26D9               	addwf	fsr2l,f,c
 23147  01065A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23148  01065C  22DA               	addwfc	fsr2h,f,c
 23149  01065E  0E6C               	movlw	108
 23150  010660  6EDE               	movwf	postinc2,c
 23151  010662  0E0F               	movlw	15
 23152  010664  6EDD               	movwf	postdec2,c
 23153                           
 23154                           ; BSR set to: 0
 23155                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 23156  010666  EE20 F009          	lfsr	2,9
 23157  01066A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23158  01066C  26D9               	addwf	fsr2l,f,c
 23159  01066E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23160  010670  22DA               	addwfc	fsr2h,f,c
 23161  010672  0E6F               	movlw	111
 23162  010674                     L18:
 23163  010674  6EDE               	movwf	postinc2,c
 23164  010676  0E0F               	movlw	15
 23165  010678  6EDD               	movwf	postdec2,c
 23166                           
 23167                           ;SPI.c: 68: break;
 23168  01067A  D008               	goto	l603
 23169  01067C                     l601:
 23170                           
 23171                           ; BSR set to: 0
 23172                           
 23173                           ; BSR set to: 0
 23174  01067C  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 23175                           
 23176                           ; Switch size 1, requested type "space"
 23177                           ; Number of cases is 2, Range of values is 0 to 1
 23178                           ; switch strategies available:
 23179                           ; Name         Instructions Cycles
 23180                           ; simple_byte            7     4 (average)
 23181                           ;	Chosen strategy is simple_byte
 23182  01067E  0A00               	xorlw	0	; case 0
 23183  010680  B4D8               	btfsc	status,2,c
 23184  010682  D769               	goto	l602
 23185  010684  0A01               	xorlw	1	; case 1
 23186  010686  A4D8               	btfss	status,2,c
 23187  010688  0012               	return	
 23188  01068A  D7AD               	goto	l604
 23189  01068C                     l603:
 23190                           
 23191                           ; BSR set to: 0
 23192                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 23193                           
 23194                           ; BSR set to: 0
 23195  01068C  EE20 F006          	lfsr	2,6
 23196  010690  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23197  010692  26D9               	addwf	fsr2l,f,c
 23198  010694  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23199  010696  22DA               	addwfc	fsr2h,f,c
 23200  010698  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23201  01069C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23202  0106A0  0E05               	movlw	5
 23203  0106A2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23204  0106A4  0E00               	movlw	0
 23205  0106A6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23206  0106A8  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23207                           
 23208                           ;SPI.c: 77: switch(pMode)
 23209  0106AC  D08C               	goto	l607
 23210  0106AE                     
 23211                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23212  0106AE  0100               	movlb	0	; () banked
 23213  0106B0  EE20 F006          	lfsr	2,6
 23214  0106B4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23215  0106B6  26D9               	addwf	fsr2l,f,c
 23216  0106B8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23217  0106BA  22DA               	addwfc	fsr2h,f,c
 23218  0106BC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23219  0106C0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23220  0106C4  0E04               	movlw	4
 23221  0106C6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23222  0106C8  0E00               	movlw	0
 23223  0106CA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23224  0106CC  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23225                           
 23226                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23227  0106D0  0100               	movlb	0	; () banked
 23228  0106D2  EE20 F003          	lfsr	2,3
 23229  0106D6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23230  0106D8  26D9               	addwf	fsr2l,f,c
 23231  0106DA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23232  0106DC  22DA               	addwfc	fsr2h,f,c
 23233  0106DE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23234  0106E2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23235  0106E6  0E06               	movlw	6
 23236  0106E8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23237  0106EA  0E00               	movlw	0
 23238  0106EC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23239  0106EE  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23240                           
 23241                           ;SPI.c: 82: break;
 23242  0106F2  D078               	goto	l609
 23243  0106F4                     
 23244                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23245  0106F4  0100               	movlb	0	; () banked
 23246  0106F6  EE20 F006          	lfsr	2,6
 23247  0106FA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23248  0106FC  26D9               	addwf	fsr2l,f,c
 23249  0106FE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23250  010700  22DA               	addwfc	fsr2h,f,c
 23251  010702  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23252  010706  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23253  01070A  0E04               	movlw	4
 23254  01070C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23255  01070E  0E00               	movlw	0
 23256  010710  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23257  010712  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23258                           
 23259                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23260  010716  0100               	movlb	0	; () banked
 23261  010718  EE20 F003          	lfsr	2,3
 23262  01071C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23263  01071E  26D9               	addwf	fsr2l,f,c
 23264  010720  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23265  010722  22DA               	addwfc	fsr2h,f,c
 23266  010724  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23267  010728  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23268  01072C  0E06               	movlw	6
 23269  01072E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23270  010730  0E01               	movlw	1
 23271  010732  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23272  010734  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23273                           
 23274                           ;SPI.c: 86: break;
 23275  010738  D055               	goto	l609
 23276  01073A                     
 23277                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23278  01073A  0100               	movlb	0	; () banked
 23279  01073C  EE20 F006          	lfsr	2,6
 23280  010740  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23281  010742  26D9               	addwf	fsr2l,f,c
 23282  010744  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23283  010746  22DA               	addwfc	fsr2h,f,c
 23284  010748  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23285  01074C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23286  010750  0E04               	movlw	4
 23287  010752  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23288  010754  0E01               	movlw	1
 23289  010756  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23290  010758  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23291                           
 23292                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23293  01075C  0100               	movlb	0	; () banked
 23294  01075E  EE20 F003          	lfsr	2,3
 23295  010762  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23296  010764  26D9               	addwf	fsr2l,f,c
 23297  010766  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23298  010768  22DA               	addwfc	fsr2h,f,c
 23299  01076A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23300  01076E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23301  010772  0E06               	movlw	6
 23302  010774  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23303  010776  0E00               	movlw	0
 23304  010778  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23305  01077A  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23306                           
 23307                           ;SPI.c: 90: break;
 23308  01077E  D032               	goto	l609
 23309  010780                     
 23310                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23311  010780  0100               	movlb	0	; () banked
 23312  010782  EE20 F006          	lfsr	2,6
 23313  010786  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23314  010788  26D9               	addwf	fsr2l,f,c
 23315  01078A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23316  01078C  22DA               	addwfc	fsr2h,f,c
 23317  01078E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23318  010792  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23319  010796  0E04               	movlw	4
 23320  010798  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23321  01079A  0E01               	movlw	1
 23322  01079C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23323  01079E  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23324                           
 23325                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23326  0107A2  0100               	movlb	0	; () banked
 23327  0107A4  EE20 F003          	lfsr	2,3
 23328  0107A8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23329  0107AA  26D9               	addwf	fsr2l,f,c
 23330  0107AC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23331  0107AE  22DA               	addwfc	fsr2h,f,c
 23332  0107B0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23333  0107B4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23334  0107B8  0E06               	movlw	6
 23335  0107BA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23336  0107BC  0E01               	movlw	1
 23337  0107BE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23338  0107C0  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23339                           
 23340                           ;SPI.c: 94: break;
 23341  0107C4  D00F               	goto	l609
 23342  0107C6                     l607:
 23343  0107C6  0100               	movlb	0	; () banked
 23344  0107C8  5192               	movf	SPI_Init@pMode& (0+255),w,b
 23345                           
 23346                           ; Switch size 1, requested type "space"
 23347                           ; Number of cases is 4, Range of values is 0 to 3
 23348                           ; switch strategies available:
 23349                           ; Name         Instructions Cycles
 23350                           ; simple_byte           13     7 (average)
 23351                           ;	Chosen strategy is simple_byte
 23352  0107CA  0A00               	xorlw	0	; case 0
 23353  0107CC  B4D8               	btfsc	status,2,c
 23354  0107CE  D76F               	goto	l608
 23355  0107D0  0A01               	xorlw	1	; case 1
 23356  0107D2  B4D8               	btfsc	status,2,c
 23357  0107D4  D78F               	goto	l610
 23358  0107D6  0A03               	xorlw	3	; case 2
 23359  0107D8  B4D8               	btfsc	status,2,c
 23360  0107DA  D7AF               	goto	l611
 23361  0107DC  0A01               	xorlw	1	; case 3
 23362  0107DE  A4D8               	btfss	status,2,c
 23363  0107E0  0012               	return	
 23364  0107E2  D7CE               	goto	l612
 23365  0107E4                     l609:
 23366                           
 23367                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 23368                           
 23369                           ; BSR set to: 0
 23370  0107E4  0100               	movlb	0	; () banked
 23371  0107E6  EE20 F006          	lfsr	2,6
 23372  0107EA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23373  0107EC  26D9               	addwf	fsr2l,f,c
 23374  0107EE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23375  0107F0  22DA               	addwfc	fsr2h,f,c
 23376  0107F2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23377  0107F6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23378  0107FA  0E07               	movlw	7
 23379  0107FC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23380  0107FE  0E00               	movlw	0
 23381  010800  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23382  010802  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23383                           
 23384                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 23385  010806  0100               	movlb	0	; () banked
 23386  010808  EE20 F006          	lfsr	2,6
 23387  01080C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23388  01080E  26D9               	addwf	fsr2l,f,c
 23389  010810  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23390  010812  22DA               	addwfc	fsr2h,f,c
 23391  010814  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23392  010818  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23393  01081C  0E06               	movlw	6
 23394  01081E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23395  010820  0E00               	movlw	0
 23396  010822  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23397  010824  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23398                           
 23399                           ;SPI.c: 106: Timer2_Init(pClock);
 23400  010828  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 23401  01082C  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 23402  010830  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 23403  010834  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 23404  010838  ECA2  F098         	call	_Timer2_Init	;wreg free
 23405                           
 23406                           ;SPI.c: 112: SPI_DisableISR(pInput);
 23407  01083C  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 23408  010840  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 23409  010844  ECEA  F0AB         	call	_SPI_DisableISR	;wreg free
 23410                           
 23411                           ;SPI.c: 116: switch (pChannel)
 23412  010848  D004               	goto	l614
 23413  01084A                     l615:
 23414                           
 23415                           ; BSR set to: 0
 23416  01084A  869F               	bsf	3999,3,c	;volatile
 23417  01084C  D00B               	goto	l616
 23418  01084E                     l617:
 23419                           
 23420                           ; BSR set to: 0
 23421  01084E  8EA5               	bsf	4005,7,c	;volatile
 23422  010850  D009               	goto	l616
 23423  010852                     l614:
 23424                           
 23425                           ; BSR set to: 0
 23426  010852  0100               	movlb	0	; () banked
 23427  010854  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 23428                           
 23429                           ; Switch size 1, requested type "space"
 23430                           ; Number of cases is 2, Range of values is 0 to 1
 23431                           ; switch strategies available:
 23432                           ; Name         Instructions Cycles
 23433                           ; simple_byte            7     4 (average)
 23434                           ;	Chosen strategy is simple_byte
 23435  010856  0A00               	xorlw	0	; case 0
 23436  010858  B4D8               	btfsc	status,2,c
 23437  01085A  D7F7               	goto	l615
 23438  01085C  0A01               	xorlw	1	; case 1
 23439  01085E  A4D8               	btfss	status,2,c
 23440  010860  0012               	return	
 23441  010862  D7F5               	goto	l617
 23442  010864                     l616:
 23443                           
 23444                           ; BSR set to: 0
 23445                           ;SPI.c: 124: SPI_DCS(pInput);
 23446                           
 23447                           ; BSR set to: 0
 23448  010864  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 23449  010868  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 23450  01086C  EC79  F0AB         	call	_SPI_DCS	;wreg free
 23451                           
 23452                           ;SPI.c: 126: pInput->mBusy = 0;
 23453  010870  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 23454  010874  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 23455  010878  0E00               	movlw	0
 23456  01087A  6EDF               	movwf	indf2,c
 23457                           
 23458                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 23459  01087C  0100               	movlb	0	; () banked
 23460  01087E  EE20 F006          	lfsr	2,6
 23461  010882  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23462  010884  26D9               	addwf	fsr2l,f,c
 23463  010886  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23464  010888  22DA               	addwfc	fsr2h,f,c
 23465  01088A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 23466  01088E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 23467  010892  0E00               	movlw	0
 23468  010894  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 23469  010896  0E03               	movlw	3
 23470  010898  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 23471  01089A  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 23472                           
 23473                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 23474  01089E  0100               	movlb	0	; () banked
 23475  0108A0  EE20 F006          	lfsr	2,6
 23476  0108A4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23477  0108A6  26D9               	addwf	fsr2l,f,c
 23478  0108A8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23479  0108AA  22DA               	addwfc	fsr2h,f,c
 23480  0108AC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23481  0108B0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23482  0108B4  0E05               	movlw	5
 23483  0108B6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23484  0108B8  0E01               	movlw	1
 23485  0108BA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23486  0108BC  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23487  0108C0  0012               	return		;funcret
 23488  0108C2                     __end_of_SPI_Init:
 23489                           	opt stack 0
 23490                           tosu	equ	0xFFF
 23491                           tosh	equ	0xFFE
 23492                           tosl	equ	0xFFD
 23493                           pclath	equ	0xFFA
 23494                           tblptru	equ	0xFF8
 23495                           tblptrh	equ	0xFF7
 23496                           tblptrl	equ	0xFF6
 23497                           tablat	equ	0xFF5
 23498                           prodh	equ	0xFF4
 23499                           prodl	equ	0xFF3
 23500                           intcon	equ	0xFF2
 23501                           postinc0	equ	0xFEE
 23502                           wreg	equ	0xFE8
 23503                           indf1	equ	0xFE7
 23504                           postdec1	equ	0xFE5
 23505                           fsr1h	equ	0xFE2
 23506                           fsr1l	equ	0xFE1
 23507                           indf2	equ	0xFDF
 23508                           postinc2	equ	0xFDE
 23509                           postdec2	equ	0xFDD
 23510                           plusw2	equ	0xFDB
 23511                           fsr2h	equ	0xFDA
 23512                           fsr2l	equ	0xFD9
 23513                           status	equ	0xFD8
 23514                           
 23515 ;; *************** function _Timer2_Init *****************
 23516 ;; Defined at:
 23517 ;;		line 10 in file "Library/Timer2.c"
 23518 ;; Parameters:    Size  Location     Type
 23519 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 23520 ;; Auto vars:     Size  Location     Type
 23521 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 23522 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 23523 ;;  RDIV            4   18[BANK0 ] unsigned long 
 23524 ;; Return value:  Size  Location     Type
 23525 ;;                  1    wreg      void 
 23526 ;; Registers used:
 23527 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23528 ;; Tracked objects:
 23529 ;;		On entry : 0/0
 23530 ;;		On exit  : 0/0
 23531 ;;		Unchanged: 0/0
 23532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23533 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23534 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23535 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23536 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23537 ;;Total ram usage:       17 bytes
 23538 ;; Hardware stack levels used:    1
 23539 ;; Hardware stack levels required when called:    8
 23540 ;; This function calls:
 23541 ;;		_Timer2_Clear
 23542 ;;		___lldiv
 23543 ;; This function is called by:
 23544 ;;		_SPI_Init
 23545 ;; This function uses a non-reentrant model
 23546 ;;
 23547                           
 23548                           	psect	text114
 23549  013144                     __ptext114:
 23550                           	opt stack 0
 23551  013144                     _Timer2_Init:
 23552                           	opt stack 19
 23553                           
 23554                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 23555                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 23556                           ;Timer2.c: 14: static UINT8 PRE = 0;
 23557                           ;Timer2.c: 15: static UINT32 DIV = 0;
 23558                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 23559                           
 23560                           ;incstack = 0
 23561  013144  0E00               	movlw	0
 23562  013146  0100               	movlb	0	; () banked
 23563  013148  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 23564  01314A  0E6C               	movlw	108
 23565  01314C  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 23566  01314E  0EDC               	movlw	220
 23567  013150  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 23568  013152  0E02               	movlw	2
 23569  013154  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 23570                           
 23571                           ; BSR set to: 0
 23572                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 23573                           ;Timer2.c: 20: pFrequency *= 2;
 23574  013156  90D8               	bcf	status,0,c
 23575  013158  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 23576  01315A  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 23577  01315C  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 23578  01315E  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 23579                           
 23580                           ; BSR set to: 0
 23581                           ;Timer2.c: 23: pCPUClock /= 4;
 23582  013160  0E02               	movlw	2
 23583  013162  6F71               	movwf	??_Timer2_Init& (0+255),b
 23584  013164                     u11935:
 23585  013164  90D8               	bcf	status,0,c
 23586  013166  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 23587  013168  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 23588  01316A  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 23589  01316C  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 23590  01316E  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 23591  013170  D7F9               	goto	u11935
 23592                           
 23593                           ; BSR set to: 0
 23594                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 23595  013172  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 23596  013176  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 23597  01317A  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 23598  01317E  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 23599  013182  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 23600  013186  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 23601  01318A  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 23602  01318E  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 23603  013192  ECD5  F0A2         	call	___lldiv	;wreg free
 23604  013196  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 23605  01319A  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 23606  01319E  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 23607  0131A2  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 23608                           
 23609                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 23610  0131A6  D00E               	goto	l1828
 23611  0131A8                     l14417:
 23612                           
 23613                           ;Timer2.c: 28: {
 23614                           ;Timer2.c: 29: RDIV = 0;
 23615  0131A8  0E00               	movlw	0
 23616  0131AA  0100               	movlb	0	; () banked
 23617  0131AC  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 23618  0131AE  0E00               	movlw	0
 23619  0131B0  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 23620  0131B2  0E00               	movlw	0
 23621  0131B4  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 23622  0131B6  0E00               	movlw	0
 23623  0131B8  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 23624                           
 23625                           ; BSR set to: 0
 23626                           ;Timer2.c: 30: INDEX ++;
 23627  0131BA  2A3E               	incf	Timer2_Init@INDEX,f,c
 23628                           
 23629                           ; BSR set to: 0
 23630                           ;Timer2.c: 31: if (INDEX >= 3)
 23631  0131BC  0E02               	movlw	2
 23632  0131BE  643E               	cpfsgt	Timer2_Init@INDEX,c
 23633  0131C0  D001               	goto	l1828
 23634  0131C2  D023               	goto	u11950
 23635  0131C4                     l1828:
 23636                           
 23637                           ; BSR set to: 0
 23638                           
 23639                           ; BSR set to: 0
 23640  0131C4  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 23641  0131C8  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 23642  0131CC  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 23643  0131D0  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 23644  0131D4  503E               	movf	Timer2_Init@INDEX,w,c
 23645  0131D6  0D01               	mullw	1
 23646  0131D8  0E02               	movlw	low Timer2_Init@PRESCALE
 23647  0131DA  24F3               	addwf	prodl,w,c
 23648  0131DC  6EF6               	movwf	tblptrl,c
 23649  0131DE  0EFC               	movlw	high Timer2_Init@PRESCALE
 23650  0131E0  20F4               	addwfc	prodh,w,c
 23651  0131E2  6EF7               	movwf	tblptrh,c
 23652  0131E4                     	if	1	;There are 3 active tblptr bytes
 23653  0131E4  6AF8               	clrf	tblptru,c
 23654  0131E6  0E00               	movlw	low (__mediumconst shr (0+16))
 23655  0131E8  22F8               	addwfc	tblptru,f,c
 23656  0131EA                     	endif
 23657  0131EA  0008               	tblrd		*
 23658  0131EC  50F5               	movf	tablat,w,c
 23659  0131EE  0100               	movlb	0	; () banked
 23660  0131F0  6F64               	movwf	___lldiv@divisor& (0+255),b
 23661  0131F2  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23662  0131F4  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23663  0131F6  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23664  0131F8  ECD5  F0A2         	call	___lldiv	;wreg free
 23665  0131FC  0100               	movlb	0	; () banked
 23666  0131FE  5163               	movf	(?___lldiv+3)& (0+255),w,b
 23667  013200  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 23668  013202  E1D2               	bnz	l14417
 23669  013204  0561               	decf	(?___lldiv+1)& (0+255),w,b
 23670  013206  B0D8               	btfsc	status,0,c
 23671  013208  D7CF               	goto	l1827
 23672  01320A                     u11950:
 23673                           
 23674                           ; BSR set to: 0
 23675                           ;Timer2.c: 33: }
 23676                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 23677                           
 23678                           ; BSR set to: 0
 23679  01320A  50CA               	movf	4042,w,c	;volatile
 23680  01320C  183E               	xorwf	Timer2_Init@INDEX,w,c
 23681  01320E  0BFC               	andlw	-4
 23682  013210  183E               	xorwf	Timer2_Init@INDEX,w,c
 23683  013212  6ECA               	movwf	4042,c	;volatile
 23684                           
 23685                           ; BSR set to: 0
 23686                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 23687  013214  84CA               	bsf	4042,2,c	;volatile
 23688                           
 23689                           ; BSR set to: 0
 23690                           ;Timer2.c: 44: Timer2_Clear();
 23691  013216  ECC1  F0AD         	call	_Timer2_Clear	;wreg free
 23692                           
 23693                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 23694  01321A  503E               	movf	Timer2_Init@INDEX,w,c
 23695  01321C  0D01               	mullw	1
 23696  01321E  0E02               	movlw	low Timer2_Init@PRESCALE
 23697  013220  24F3               	addwf	prodl,w,c
 23698  013222  6EF6               	movwf	tblptrl,c
 23699  013224  0EFC               	movlw	high Timer2_Init@PRESCALE
 23700  013226  20F4               	addwfc	prodh,w,c
 23701  013228  6EF7               	movwf	tblptrh,c
 23702  01322A                     	if	1	;There are 3 active tblptr bytes
 23703  01322A  6AF8               	clrf	tblptru,c
 23704  01322C  0E00               	movlw	low (__mediumconst shr (0+16))
 23705  01322E  22F8               	addwfc	tblptru,f,c
 23706  013230                     	endif
 23707  013230  0008               	tblrd		*
 23708  013232  CFF5 F03D          	movff	tablat,Timer2_Init@PRE
 23709                           
 23710                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 23711  013236  0EFF               	movlw	255
 23712  013238  0100               	movlb	0	; () banked
 23713  01323A  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 23714  01323C  0101               	movlb	1	; () banked
 23715  01323E  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 23716  013240  0EFF               	movlw	255
 23717  013242  0100               	movlb	0	; () banked
 23718  013244  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 23719  013246  0101               	movlb	1	; () banked
 23720  013248  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 23721  01324A  0EFF               	movlw	255
 23722  01324C  0100               	movlb	0	; () banked
 23723  01324E  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 23724  013250  0101               	movlb	1	; () banked
 23725  013252  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 23726  013254  0EFF               	movlw	255
 23727  013256  0100               	movlb	0	; () banked
 23728  013258  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 23729  01325A  0101               	movlb	1	; () banked
 23730  01325C  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 23731                           
 23732                           ; BSR set to: 1
 23733                           ;Timer2.c: 48: INDEX = DIV/PRE;
 23734  01325E  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 23735  013262  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 23736  013266  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 23737  01326A  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 23738  01326E  503D               	movf	Timer2_Init@PRE,w,c
 23739  013270  0100               	movlb	0	; () banked
 23740  013272  6F64               	movwf	___lldiv@divisor& (0+255),b
 23741  013274  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23742  013276  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23743  013278  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23744  01327A  ECD5  F0A2         	call	___lldiv	;wreg free
 23745  01327E  0100               	movlb	0	; () banked
 23746  013280  5160               	movf	?___lldiv& (0+255),w,b
 23747  013282  6E3E               	movwf	Timer2_Init@INDEX,c
 23748                           
 23749                           ; BSR set to: 0
 23750                           ;Timer2.c: 49: PR2 = INDEX;
 23751  013284  C03E  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 23752                           
 23753                           ; BSR set to: 0
 23754  013288  0012               	return		;funcret
 23755  01328A                     __end_of_Timer2_Init:
 23756                           	opt stack 0
 23757                           tosu	equ	0xFFF
 23758                           tosh	equ	0xFFE
 23759                           tosl	equ	0xFFD
 23760                           pclath	equ	0xFFA
 23761                           tblptru	equ	0xFF8
 23762                           tblptrh	equ	0xFF7
 23763                           tblptrl	equ	0xFF6
 23764                           tablat	equ	0xFF5
 23765                           prodh	equ	0xFF4
 23766                           prodl	equ	0xFF3
 23767                           intcon	equ	0xFF2
 23768                           postinc0	equ	0xFEE
 23769                           wreg	equ	0xFE8
 23770                           indf1	equ	0xFE7
 23771                           postdec1	equ	0xFE5
 23772                           fsr1h	equ	0xFE2
 23773                           fsr1l	equ	0xFE1
 23774                           indf2	equ	0xFDF
 23775                           postinc2	equ	0xFDE
 23776                           postdec2	equ	0xFDD
 23777                           plusw2	equ	0xFDB
 23778                           fsr2h	equ	0xFDA
 23779                           fsr2l	equ	0xFD9
 23780                           status	equ	0xFD8
 23781                           
 23782 ;; *************** function ___lldiv *****************
 23783 ;; Defined at:
 23784 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 23785 ;; Parameters:    Size  Location     Type
 23786 ;;  dividend        4    0[BANK0 ] unsigned long 
 23787 ;;  divisor         4    4[BANK0 ] unsigned long 
 23788 ;; Auto vars:     Size  Location     Type
 23789 ;;  quotient        4    8[BANK0 ] unsigned long 
 23790 ;;  counter         1   12[BANK0 ] unsigned char 
 23791 ;; Return value:  Size  Location     Type
 23792 ;;                  4    0[BANK0 ] unsigned long 
 23793 ;; Registers used:
 23794 ;;		wreg, status,2, status,0
 23795 ;; Tracked objects:
 23796 ;;		On entry : 0/0
 23797 ;;		On exit  : 0/0
 23798 ;;		Unchanged: 0/0
 23799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23800 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23801 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23803 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23804 ;;Total ram usage:       13 bytes
 23805 ;; Hardware stack levels used:    1
 23806 ;; Hardware stack levels required when called:    7
 23807 ;; This function calls:
 23808 ;;		Nothing
 23809 ;; This function is called by:
 23810 ;;		_Timer2_Init
 23811 ;;		_rand_between
 23812 ;;		_I2C_Init
 23813 ;;		_Timer0_Init
 23814 ;; This function uses a non-reentrant model
 23815 ;;
 23816                           
 23817                           	psect	text115
 23818  0145AA                     __ptext115:
 23819                           	opt stack 0
 23820  0145AA                     ___lldiv:
 23821                           	opt stack 19
 23822                           
 23823                           ; BSR set to: 0
 23824                           ;incstack = 0
 23825  0145AA  0E00               	movlw	0
 23826  0145AC  0100               	movlb	0	; () banked
 23827  0145AE  6F68               	movwf	___lldiv@quotient& (0+255),b
 23828  0145B0  0E00               	movlw	0
 23829  0145B2  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 23830  0145B4  0E00               	movlw	0
 23831  0145B6  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 23832  0145B8  0E00               	movlw	0
 23833  0145BA  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 23834                           
 23835                           ; BSR set to: 0
 23836  0145BC  5164               	movf	___lldiv@divisor& (0+255),w,b
 23837  0145BE  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23838  0145C0  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23839  0145C2  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 23840  0145C4  B4D8               	btfsc	status,2,c
 23841  0145C6  D02A               	goto	l2860
 23842                           
 23843                           ; BSR set to: 0
 23844  0145C8  0E01               	movlw	1
 23845  0145CA  6F6C               	movwf	___lldiv@counter& (0+255),b
 23846  0145CC  D006               	goto	l2855
 23847  0145CE                     
 23848                           ; BSR set to: 0
 23849                           
 23850                           ; BSR set to: 0
 23851  0145CE  90D8               	bcf	status,0,c
 23852  0145D0  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23853  0145D2  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23854  0145D4  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23855  0145D6  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23856  0145D8  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23857  0145DA                     l2855:
 23858                           
 23859                           ; BSR set to: 0
 23860                           
 23861                           ; BSR set to: 0
 23862  0145DA  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23863  0145DC  D7F8               	goto	l2856
 23864  0145DE                     u11700:
 23865                           
 23866                           ; BSR set to: 0
 23867                           
 23868                           ; BSR set to: 0
 23869                           
 23870                           ; BSR set to: 0
 23871  0145DE  90D8               	bcf	status,0,c
 23872  0145E0  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23873  0145E2  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23874  0145E4  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23875  0145E6  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23876                           
 23877                           ; BSR set to: 0
 23878  0145E8  5164               	movf	___lldiv@divisor& (0+255),w,b
 23879  0145EA  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23880  0145EC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23881  0145EE  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23882  0145F0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23883  0145F2  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23884  0145F4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23885  0145F6  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23886  0145F8  A0D8               	btfss	status,0,c
 23887  0145FA  D009               	goto	l2859
 23888                           
 23889                           ; BSR set to: 0
 23890  0145FC  5164               	movf	___lldiv@divisor& (0+255),w,b
 23891  0145FE  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23892  014600  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23893  014602  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23894  014604  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23895  014606  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23896  014608  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23897  01460A  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23898                           
 23899                           ; BSR set to: 0
 23900  01460C  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23901  01460E                     l2859:
 23902                           
 23903                           ; BSR set to: 0
 23904                           
 23905                           ; BSR set to: 0
 23906  01460E  90D8               	bcf	status,0,c
 23907  014610  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23908  014612  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23909  014614  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23910  014616  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23911                           
 23912                           ; BSR set to: 0
 23913  014618  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23914  01461A  D7E1               	goto	u11700
 23915  01461C                     l2860:
 23916                           
 23917                           ; BSR set to: 0
 23918                           
 23919                           ; BSR set to: 0
 23920  01461C  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23921  014620  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23922  014624  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23923  014628  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23924                           
 23925                           ; BSR set to: 0
 23926  01462C  0012               	return		;funcret
 23927  01462E                     __end_of___lldiv:
 23928                           	opt stack 0
 23929                           tosu	equ	0xFFF
 23930                           tosh	equ	0xFFE
 23931                           tosl	equ	0xFFD
 23932                           pclath	equ	0xFFA
 23933                           tblptru	equ	0xFF8
 23934                           tblptrh	equ	0xFF7
 23935                           tblptrl	equ	0xFF6
 23936                           tablat	equ	0xFF5
 23937                           prodh	equ	0xFF4
 23938                           prodl	equ	0xFF3
 23939                           intcon	equ	0xFF2
 23940                           postinc0	equ	0xFEE
 23941                           wreg	equ	0xFE8
 23942                           indf1	equ	0xFE7
 23943                           postdec1	equ	0xFE5
 23944                           fsr1h	equ	0xFE2
 23945                           fsr1l	equ	0xFE1
 23946                           indf2	equ	0xFDF
 23947                           postinc2	equ	0xFDE
 23948                           postdec2	equ	0xFDD
 23949                           plusw2	equ	0xFDB
 23950                           fsr2h	equ	0xFDA
 23951                           fsr2l	equ	0xFD9
 23952                           status	equ	0xFD8
 23953                           
 23954 ;; *************** function _Timer2_Clear *****************
 23955 ;; Defined at:
 23956 ;;		line 3 in file "Library/Timer2.c"
 23957 ;; Parameters:    Size  Location     Type
 23958 ;;		None
 23959 ;; Auto vars:     Size  Location     Type
 23960 ;;		None
 23961 ;; Return value:  Size  Location     Type
 23962 ;;                  1    wreg      void 
 23963 ;; Registers used:
 23964 ;;		None
 23965 ;; Tracked objects:
 23966 ;;		On entry : 0/0
 23967 ;;		On exit  : 0/0
 23968 ;;		Unchanged: 0/0
 23969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23974 ;;Total ram usage:        0 bytes
 23975 ;; Hardware stack levels used:    1
 23976 ;; Hardware stack levels required when called:    7
 23977 ;; This function calls:
 23978 ;;		Nothing
 23979 ;; This function is called by:
 23980 ;;		_Timer2_Init
 23981 ;; This function uses a non-reentrant model
 23982 ;;
 23983                           
 23984                           	psect	text116
 23985  015B82                     __ptext116:
 23986                           	opt stack 0
 23987  015B82                     _Timer2_Clear:
 23988                           	opt stack 19
 23989                           
 23990                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 23991                           
 23992                           ; BSR set to: 0
 23993                           ;incstack = 0
 23994  015B82  929E               	bcf	3998,1,c	;volatile
 23995                           
 23996                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 23997  015B84  929D               	bcf	3997,1,c	;volatile
 23998                           
 23999                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 24000  015B86  929F               	bcf	3999,1,c	;volatile
 24001  015B88  0012               	return		;funcret
 24002  015B8A                     __end_of_Timer2_Clear:
 24003                           	opt stack 0
 24004                           tosu	equ	0xFFF
 24005                           tosh	equ	0xFFE
 24006                           tosl	equ	0xFFD
 24007                           pclath	equ	0xFFA
 24008                           tblptru	equ	0xFF8
 24009                           tblptrh	equ	0xFF7
 24010                           tblptrl	equ	0xFF6
 24011                           tablat	equ	0xFF5
 24012                           prodh	equ	0xFF4
 24013                           prodl	equ	0xFF3
 24014                           intcon	equ	0xFF2
 24015                           postinc0	equ	0xFEE
 24016                           wreg	equ	0xFE8
 24017                           indf1	equ	0xFE7
 24018                           postdec1	equ	0xFE5
 24019                           fsr1h	equ	0xFE2
 24020                           fsr1l	equ	0xFE1
 24021                           indf2	equ	0xFDF
 24022                           postinc2	equ	0xFDE
 24023                           postdec2	equ	0xFDD
 24024                           plusw2	equ	0xFDB
 24025                           fsr2h	equ	0xFDA
 24026                           fsr2l	equ	0xFD9
 24027                           status	equ	0xFD8
 24028                           
 24029 ;; *************** function _SPI_DisableISR *****************
 24030 ;; Defined at:
 24031 ;;		line 181 in file "Library/SPI.c"
 24032 ;; Parameters:    Size  Location     Type
 24033 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 24034 ;;		 -> SPI1(11), SPI2(11), 
 24035 ;; Auto vars:     Size  Location     Type
 24036 ;;		None
 24037 ;; Return value:  Size  Location     Type
 24038 ;;                  1    wreg      void 
 24039 ;; Registers used:
 24040 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24041 ;; Tracked objects:
 24042 ;;		On entry : 0/0
 24043 ;;		On exit  : 0/0
 24044 ;;		Unchanged: 0/0
 24045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24046 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24049 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24050 ;;Total ram usage:        2 bytes
 24051 ;; Hardware stack levels used:    1
 24052 ;; Hardware stack levels required when called:    7
 24053 ;; This function calls:
 24054 ;;		Nothing
 24055 ;; This function is called by:
 24056 ;;		_SPI_Init
 24057 ;; This function uses a non-reentrant model
 24058 ;;
 24059                           
 24060                           	psect	text117
 24061  0157D4                     __ptext117:
 24062                           	opt stack 0
 24063  0157D4                     _SPI_DisableISR:
 24064                           	opt stack 20
 24065                           
 24066                           ;SPI.c: 183: switch (pInput->mChannel)
 24067                           
 24068                           ;incstack = 0
 24069  0157D4  D004               	goto	l654
 24070  0157D6                     l655:
 24071                           
 24072                           ; BSR set to: 0
 24073  0157D6  969D               	bcf	3997,3,c	;volatile
 24074  0157D8  0012               	return	
 24075  0157DA                     l657:
 24076                           
 24077                           ; BSR set to: 0
 24078  0157DA  9EA3               	bcf	4003,7,c	;volatile
 24079                           
 24080                           ; BSR set to: 0
 24081                           ;SPI.c: 188: };
 24082                           
 24083                           ; BSR set to: 0
 24084                           
 24085                           ;SPI.c: 187: default: return;
 24086  0157DC  0012               	return	
 24087  0157DE                     l654:
 24088                           
 24089                           ; BSR set to: 0
 24090  0157DE  0100               	movlb	0	; () banked
 24091  0157E0  EE20 F002          	lfsr	2,2
 24092  0157E4  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 24093  0157E6  26D9               	addwf	fsr2l,f,c
 24094  0157E8  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 24095  0157EA  22DA               	addwfc	fsr2h,f,c
 24096  0157EC  50DF               	movf	indf2,w,c
 24097                           
 24098                           ; Switch size 1, requested type "space"
 24099                           ; Number of cases is 2, Range of values is 0 to 1
 24100                           ; switch strategies available:
 24101                           ; Name         Instructions Cycles
 24102                           ; simple_byte            7     4 (average)
 24103                           ;	Chosen strategy is simple_byte
 24104  0157EE  0A00               	xorlw	0	; case 0
 24105  0157F0  B4D8               	btfsc	status,2,c
 24106  0157F2  D7F1               	goto	l655
 24107  0157F4  0A01               	xorlw	1	; case 1
 24108  0157F6  A4D8               	btfss	status,2,c
 24109  0157F8  0012               	return	
 24110  0157FA  D7EF               	goto	l657
 24111  0157FC                     __end_of_SPI_DisableISR:
 24112                           	opt stack 0
 24113                           tosu	equ	0xFFF
 24114                           tosh	equ	0xFFE
 24115                           tosl	equ	0xFFD
 24116                           pclath	equ	0xFFA
 24117                           tblptru	equ	0xFF8
 24118                           tblptrh	equ	0xFF7
 24119                           tblptrl	equ	0xFF6
 24120                           tablat	equ	0xFF5
 24121                           prodh	equ	0xFF4
 24122                           prodl	equ	0xFF3
 24123                           intcon	equ	0xFF2
 24124                           postinc0	equ	0xFEE
 24125                           wreg	equ	0xFE8
 24126                           indf1	equ	0xFE7
 24127                           postdec1	equ	0xFE5
 24128                           fsr1h	equ	0xFE2
 24129                           fsr1l	equ	0xFE1
 24130                           indf2	equ	0xFDF
 24131                           postinc2	equ	0xFDE
 24132                           postdec2	equ	0xFDD
 24133                           plusw2	equ	0xFDB
 24134                           fsr2h	equ	0xFDA
 24135                           fsr2l	equ	0xFD9
 24136                           status	equ	0xFD8
 24137                           
 24138 ;; *************** function _SPI_DCS *****************
 24139 ;; Defined at:
 24140 ;;		line 219 in file "Library/SPI.c"
 24141 ;; Parameters:    Size  Location     Type
 24142 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 24143 ;;		 -> SPI1(11), SPI2(11), 
 24144 ;; Auto vars:     Size  Location     Type
 24145 ;;		None
 24146 ;; Return value:  Size  Location     Type
 24147 ;;                  1    wreg      void 
 24148 ;; Registers used:
 24149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24150 ;; Tracked objects:
 24151 ;;		On entry : 0/0
 24152 ;;		On exit  : 0/0
 24153 ;;		Unchanged: 0/0
 24154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24155 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24158 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24159 ;;Total ram usage:        2 bytes
 24160 ;; Hardware stack levels used:    1
 24161 ;; Hardware stack levels required when called:    7
 24162 ;; This function calls:
 24163 ;;		Nothing
 24164 ;; This function is called by:
 24165 ;;		_SPI_Init
 24166 ;; This function uses a non-reentrant model
 24167 ;;
 24168                           
 24169                           	psect	text118
 24170  0156F2                     __ptext118:
 24171                           	opt stack 0
 24172  0156F2                     _SPI_DCS:
 24173                           	opt stack 20
 24174                           
 24175                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 24176                           
 24177                           ; BSR set to: 0
 24178                           ;incstack = 0
 24179  0156F2  0100               	movlb	0	; () banked
 24180  0156F4  EE20 F002          	lfsr	2,2
 24181  0156F8  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 24182  0156FA  26D9               	addwf	fsr2l,f,c
 24183  0156FC  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 24184  0156FE  22DA               	addwfc	fsr2h,f,c
 24185  015700  50DF               	movf	indf2,w,c
 24186  015702  A4D8               	btfss	status,2,c
 24187  015704  D007               	goto	l673
 24188                           
 24189                           ; BSR set to: 0
 24190                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 24191  015706  C1A3  FFD9         	movff	_PortC+4,fsr2l
 24192  01570A  C1A4  FFDA         	movff	_PortC+5,fsr2h
 24193  01570E  0101               	movlb	1	; () banked
 24194  015710  84DF               	bsf	indf2,2,c
 24195  015712  0012               	return	
 24196  015714                     l673:
 24197                           
 24198                           ;SPI.c: 223: else
 24199                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 24200                           
 24201                           ; BSR set to: 1
 24202  015714  C18F  FFD9         	movff	_PortD+4,fsr2l
 24203  015718  C190  FFDA         	movff	_PortD+5,fsr2h
 24204  01571C  0101               	movlb	1	; () banked
 24205  01571E  8EDF               	bsf	indf2,7,c
 24206  015720  0012               	return	
 24207  015722                     __end_of_SPI_DCS:
 24208                           	opt stack 0
 24209                           tosu	equ	0xFFF
 24210                           tosh	equ	0xFFE
 24211                           tosl	equ	0xFFD
 24212                           pclath	equ	0xFFA
 24213                           tblptru	equ	0xFF8
 24214                           tblptrh	equ	0xFF7
 24215                           tblptrl	equ	0xFF6
 24216                           tablat	equ	0xFF5
 24217                           prodh	equ	0xFF4
 24218                           prodl	equ	0xFF3
 24219                           intcon	equ	0xFF2
 24220                           postinc0	equ	0xFEE
 24221                           wreg	equ	0xFE8
 24222                           indf1	equ	0xFE7
 24223                           postdec1	equ	0xFE5
 24224                           fsr1h	equ	0xFE2
 24225                           fsr1l	equ	0xFE1
 24226                           indf2	equ	0xFDF
 24227                           postinc2	equ	0xFDE
 24228                           postdec2	equ	0xFDD
 24229                           plusw2	equ	0xFDB
 24230                           fsr2h	equ	0xFDA
 24231                           fsr2l	equ	0xFD9
 24232                           status	equ	0xFD8
 24233                           
 24234 ;; *************** function _FunctInitButton *****************
 24235 ;; Defined at:
 24236 ;;		line 16 in file "Functions.c"
 24237 ;; Parameters:    Size  Location     Type
 24238 ;;		None
 24239 ;; Auto vars:     Size  Location     Type
 24240 ;;		None
 24241 ;; Return value:  Size  Location     Type
 24242 ;;                  1    wreg      void 
 24243 ;; Registers used:
 24244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24245 ;; Tracked objects:
 24246 ;;		On entry : 0/0
 24247 ;;		On exit  : 0/0
 24248 ;;		Unchanged: 0/0
 24249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24254 ;;Total ram usage:        0 bytes
 24255 ;; Hardware stack levels used:    1
 24256 ;; Hardware stack levels required when called:   16
 24257 ;; This function calls:
 24258 ;;		_Button_Init
 24259 ;; This function is called by:
 24260 ;;		_main
 24261 ;; This function uses a non-reentrant model
 24262 ;;
 24263                           
 24264                           	psect	text119
 24265  014892                     __ptext119:
 24266                           	opt stack 0
 24267  014892                     _FunctInitButton:
 24268                           	opt stack 14
 24269                           
 24270                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 24271                           
 24272                           ; BSR set to: 1
 24273                           ;incstack = 0
 24274  014892  0EC6               	movlw	low _TestButton
 24275  014894  0100               	movlb	0	; () banked
 24276  014896  6F9B               	movwf	Button_Init@pInput& (0+255),b
 24277  014898  0E02               	movlw	high _TestButton
 24278  01489A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 24279  01489C  0E00               	movlw	0
 24280  01489E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24281  0148A0  0E02               	movlw	2
 24282  0148A2  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24283  0148A4  0E1C               	movlw	low _MXK_InitTestButton
 24284  0148A6  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 24285  0148A8  0E5A               	movlw	high _MXK_InitTestButton
 24286  0148AA  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 24287  0148AC  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 24288  0148AE  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 24289  0148B0  0ED8               	movlw	low _MXK_TestButton
 24290  0148B2  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 24291  0148B4  0E5A               	movlw	high _MXK_TestButton
 24292  0148B6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 24293  0148B8  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 24294  0148BA  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 24295  0148BC  0EFC               	movlw	low _Event_TestButton
 24296  0148BE  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 24297  0148C0  0E55               	movlw	high _Event_TestButton
 24298  0148C2  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 24299  0148C4  0E01               	movlw	low (_Event_TestButton shr (0+16))
 24300  0148C6  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 24301  0148C8  ECB7  F09E         	call	_Button_Init	;wreg free
 24302                           
 24303                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 24304  0148CC  0EBC               	movlw	low _DIPSwitch
 24305  0148CE  0100               	movlb	0	; () banked
 24306  0148D0  6F9B               	movwf	Button_Init@pInput& (0+255),b
 24307  0148D2  0E02               	movlw	high _DIPSwitch
 24308  0148D4  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 24309  0148D6  0E00               	movlw	0
 24310  0148D8  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24311  0148DA  0E02               	movlw	2
 24312  0148DC  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24313  0148DE  0E04               	movlw	low _MXK_InitDIPSwitch
 24314  0148E0  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 24315  0148E2  0E5A               	movlw	high _MXK_InitDIPSwitch
 24316  0148E4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 24317  0148E6  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 24318  0148E8  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 24319  0148EA  0E60               	movlw	low _MXK_DIPSwitch
 24320  0148EC  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 24321  0148EE  0E5A               	movlw	high _MXK_DIPSwitch
 24322  0148F0  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 24323  0148F2  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 24324  0148F4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 24325  0148F6  0E24               	movlw	low _Event_DIPSwitch
 24326  0148F8  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 24327  0148FA  0E58               	movlw	high _Event_DIPSwitch
 24328  0148FC  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 24329  0148FE  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 24330  014900  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 24331  014902  ECB7  F09E         	call	_Button_Init	;wreg free
 24332  014906  0012               	return		;funcret
 24333  014908                     __end_of_FunctInitButton:
 24334                           	opt stack 0
 24335                           tosu	equ	0xFFF
 24336                           tosh	equ	0xFFE
 24337                           tosl	equ	0xFFD
 24338                           pclath	equ	0xFFA
 24339                           tblptru	equ	0xFF8
 24340                           tblptrh	equ	0xFF7
 24341                           tblptrl	equ	0xFF6
 24342                           tablat	equ	0xFF5
 24343                           prodh	equ	0xFF4
 24344                           prodl	equ	0xFF3
 24345                           intcon	equ	0xFF2
 24346                           postinc0	equ	0xFEE
 24347                           wreg	equ	0xFE8
 24348                           indf1	equ	0xFE7
 24349                           postdec1	equ	0xFE5
 24350                           fsr1h	equ	0xFE2
 24351                           fsr1l	equ	0xFE1
 24352                           indf2	equ	0xFDF
 24353                           postinc2	equ	0xFDE
 24354                           postdec2	equ	0xFDD
 24355                           plusw2	equ	0xFDB
 24356                           fsr2h	equ	0xFDA
 24357                           fsr2l	equ	0xFD9
 24358                           status	equ	0xFD8
 24359                           
 24360 ;; *************** function _Button_Init *****************
 24361 ;; Defined at:
 24362 ;;		line 18 in file "Library/Button.c"
 24363 ;; Parameters:    Size  Location     Type
 24364 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 24365 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 24366 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 24367 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 24368 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 24369 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 24370 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 24371 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 24372 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 24373 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 24374 ;; Auto vars:     Size  Location     Type
 24375 ;;		None
 24376 ;; Return value:  Size  Location     Type
 24377 ;;                  1    wreg      void 
 24378 ;; Registers used:
 24379 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24380 ;; Tracked objects:
 24381 ;;		On entry : 0/0
 24382 ;;		On exit  : 0/0
 24383 ;;		Unchanged: 0/0
 24384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24385 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24388 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24389 ;;Total ram usage:       13 bytes
 24390 ;; Hardware stack levels used:    1
 24391 ;; Hardware stack levels required when called:   15
 24392 ;; This function calls:
 24393 ;;		_HMI_InitButtons
 24394 ;;		_MXK_InitDIPSwitch
 24395 ;;		_MXK_InitTestButton
 24396 ;; This function is called by:
 24397 ;;		_HMI_Init
 24398 ;;		_FunctInitButton
 24399 ;; This function uses a non-reentrant model
 24400 ;;
 24401                           
 24402                           	psect	text120
 24403  013D6E                     __ptext120:
 24404                           	opt stack 0
 24405  013D6E                     _Button_Init:
 24406                           	opt stack 14
 24407                           
 24408                           ;Button.c: 21: if(pInput==(void*)0)
 24409                           
 24410                           ;incstack = 0
 24411  013D6E  0100               	movlb	0	; () banked
 24412  013D70  519B               	movf	Button_Init@pInput& (0+255),w,b
 24413  013D72  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 24414  013D74  B4D8               	btfsc	status,2,c
 24415  013D76  0012               	return	
 24416                           
 24417                           ; BSR set to: 0
 24418                           ;Button.c: 23: if(pInitIO==(void*)0)
 24419                           
 24420                           ; BSR set to: 0
 24421                           
 24422                           ; BSR set to: 0
 24423                           ;Button.c: 22: return;
 24424  013D78  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24425  013D7A  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 24426  013D7C  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 24427  013D7E  B4D8               	btfsc	status,2,c
 24428  013D80  0012               	return	
 24429                           
 24430                           ; BSR set to: 0
 24431                           ;Button.c: 25: if(pGetState==(void*)0)
 24432                           
 24433                           ; BSR set to: 0
 24434                           
 24435                           ; BSR set to: 0
 24436                           ;Button.c: 24: return;
 24437  013D82  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 24438  013D84  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 24439  013D86  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 24440  013D88  B4D8               	btfsc	status,2,c
 24441  013D8A  0012               	return	
 24442                           
 24443                           ; BSR set to: 0
 24444                           ;Button.c: 27: if(pFunction==(void*)0)
 24445                           
 24446                           ; BSR set to: 0
 24447                           
 24448                           ; BSR set to: 0
 24449                           ;Button.c: 26: return;
 24450  013D8C  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 24451  013D8E  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 24452  013D90  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 24453  013D92  B4D8               	btfsc	status,2,c
 24454  013D94  0012               	return	
 24455                           
 24456                           ; BSR set to: 0
 24457                           ;Button.c: 30: if(pThreshold == 0)
 24458                           
 24459                           ; BSR set to: 0
 24460                           
 24461                           ; BSR set to: 0
 24462                           ;Button.c: 28: return;
 24463  013D96  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 24464  013D98  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 24465  013D9A  A4D8               	btfss	status,2,c
 24466  013D9C  D004               	goto	l8
 24467                           
 24468                           ; BSR set to: 0
 24469                           ;Button.c: 31: pThreshold = 1;
 24470  013D9E  0E00               	movlw	0
 24471  013DA0  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24472  013DA2  0E01               	movlw	1
 24473  013DA4  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24474  013DA6                     l8:
 24475                           
 24476                           ; BSR set to: 0
 24477                           ;Button.c: 34: pInput->mState = 0;
 24478                           
 24479                           ; BSR set to: 0
 24480  013DA6  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 24481  013DAA  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 24482  013DAE  0E00               	movlw	0
 24483  013DB0  6EDF               	movwf	indf2,c
 24484                           
 24485                           ; BSR set to: 0
 24486                           ;Button.c: 35: pInput->mCount = 0;
 24487  013DB2  EE20 F001          	lfsr	2,1
 24488  013DB6  519B               	movf	Button_Init@pInput& (0+255),w,b
 24489  013DB8  26D9               	addwf	fsr2l,f,c
 24490  013DBA  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24491  013DBC  22DA               	addwfc	fsr2h,f,c
 24492  013DBE  0E00               	movlw	0
 24493  013DC0  6EDF               	movwf	indf2,c
 24494                           
 24495                           ; BSR set to: 0
 24496                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 24497  013DC2  EE20 F002          	lfsr	2,2
 24498  013DC6  519B               	movf	Button_Init@pInput& (0+255),w,b
 24499  013DC8  26D9               	addwf	fsr2l,f,c
 24500  013DCA  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24501  013DCC  22DA               	addwfc	fsr2h,f,c
 24502  013DCE  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 24503  013DD2  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 24504                           
 24505                           ; BSR set to: 0
 24506                           ;Button.c: 37: pInput->mFunction = pFunction;
 24507  013DD6  EE20 F004          	lfsr	2,4
 24508  013DDA  519B               	movf	Button_Init@pInput& (0+255),w,b
 24509  013DDC  26D9               	addwf	fsr2l,f,c
 24510  013DDE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24511  013DE0  22DA               	addwfc	fsr2h,f,c
 24512  013DE2  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 24513  013DE6  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 24514  013DEA  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 24515                           
 24516                           ; BSR set to: 0
 24517                           ;Button.c: 38: pInput->mGetState = pGetState;
 24518  013DEE  EE20 F007          	lfsr	2,7
 24519  013DF2  519B               	movf	Button_Init@pInput& (0+255),w,b
 24520  013DF4  26D9               	addwf	fsr2l,f,c
 24521  013DF6  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24522  013DF8  22DA               	addwfc	fsr2h,f,c
 24523  013DFA  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 24524  013DFE  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 24525  013E02  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 24526                           
 24527                           ; BSR set to: 0
 24528                           ;Button.c: 41: pInitIO();
 24529  013E06  D801               	call	u12628
 24530  013E08  0012               	return	
 24531  013E0A                     u12628:
 24532  013E0A  0005               	push	
 24533  013E0C  6EFA               	movwf	pclath,c
 24534  013E0E  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24535  013E10  6EFD               	movwf	tosl,c
 24536  013E12  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 24537  013E14  6EFE               	movwf	tosh,c
 24538  013E16  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 24539  013E18  6EFF               	movwf	tosu,c
 24540  013E1A  50FA               	movf	pclath,w,c
 24541  013E1C  0012               	return		;indir
 24542  013E1E                     __end_of_Button_Init:
 24543                           	opt stack 0
 24544                           tosu	equ	0xFFF
 24545                           tosh	equ	0xFFE
 24546                           tosl	equ	0xFFD
 24547                           pclath	equ	0xFFA
 24548                           tblptru	equ	0xFF8
 24549                           tblptrh	equ	0xFF7
 24550                           tblptrl	equ	0xFF6
 24551                           tablat	equ	0xFF5
 24552                           prodh	equ	0xFF4
 24553                           prodl	equ	0xFF3
 24554                           intcon	equ	0xFF2
 24555                           postinc0	equ	0xFEE
 24556                           wreg	equ	0xFE8
 24557                           indf1	equ	0xFE7
 24558                           postdec1	equ	0xFE5
 24559                           fsr1h	equ	0xFE2
 24560                           fsr1l	equ	0xFE1
 24561                           indf2	equ	0xFDF
 24562                           postinc2	equ	0xFDE
 24563                           postdec2	equ	0xFDD
 24564                           plusw2	equ	0xFDB
 24565                           fsr2h	equ	0xFDA
 24566                           fsr2l	equ	0xFD9
 24567                           status	equ	0xFD8
 24568                           
 24569 ;; *************** function _MXK_InitDIPSwitch *****************
 24570 ;; Defined at:
 24571 ;;		line 20 in file "Library/MXK.c"
 24572 ;; Parameters:    Size  Location     Type
 24573 ;;		None
 24574 ;; Auto vars:     Size  Location     Type
 24575 ;;		None
 24576 ;; Return value:  Size  Location     Type
 24577 ;;                  1    wreg      void 
 24578 ;; Registers used:
 24579 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24580 ;; Tracked objects:
 24581 ;;		On entry : 0/0
 24582 ;;		On exit  : 0/0
 24583 ;;		Unchanged: 0/0
 24584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24589 ;;Total ram usage:        0 bytes
 24590 ;; Hardware stack levels used:    1
 24591 ;; Hardware stack levels required when called:   14
 24592 ;; This function calls:
 24593 ;;		_Port_SetQuadType
 24594 ;; This function is called by:
 24595 ;;		_FunctInitButton
 24596 ;;		_Button_Init
 24597 ;; This function uses a non-reentrant model
 24598 ;;
 24599                           
 24600                           	psect	text121
 24601  015A04                     __ptext121:
 24602                           	opt stack 0
 24603  015A04                     _MXK_InitDIPSwitch:
 24604                           	opt stack 14
 24605                           
 24606                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 24607                           
 24608                           ;incstack = 0
 24609  015A04  0E8B               	movlw	low _PortD
 24610  015A06  0100               	movlb	0	; () banked
 24611  015A08  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 24612  015A0A  0E01               	movlw	high _PortD
 24613  015A0C  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 24614  015A0E  0E00               	movlw	0
 24615  015A10  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 24616  015A12  0E00               	movlw	0
 24617  015A14  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 24618  015A16  EC4D  F08E         	call	_Port_SetQuadType	;wreg free
 24619  015A1A  0012               	return		;funcret
 24620  015A1C                     __end_of_MXK_InitDIPSwitch:
 24621                           	opt stack 0
 24622                           tosu	equ	0xFFF
 24623                           tosh	equ	0xFFE
 24624                           tosl	equ	0xFFD
 24625                           pclath	equ	0xFFA
 24626                           tblptru	equ	0xFF8
 24627                           tblptrh	equ	0xFF7
 24628                           tblptrl	equ	0xFF6
 24629                           tablat	equ	0xFF5
 24630                           prodh	equ	0xFF4
 24631                           prodl	equ	0xFF3
 24632                           intcon	equ	0xFF2
 24633                           postinc0	equ	0xFEE
 24634                           wreg	equ	0xFE8
 24635                           indf1	equ	0xFE7
 24636                           postdec1	equ	0xFE5
 24637                           fsr1h	equ	0xFE2
 24638                           fsr1l	equ	0xFE1
 24639                           indf2	equ	0xFDF
 24640                           postinc2	equ	0xFDE
 24641                           postdec2	equ	0xFDD
 24642                           plusw2	equ	0xFDB
 24643                           fsr2h	equ	0xFDA
 24644                           fsr2l	equ	0xFD9
 24645                           status	equ	0xFD8
 24646                           
 24647 ;; *************** function _HMI_InitButtons *****************
 24648 ;; Defined at:
 24649 ;;		line 21 in file "HMI.c"
 24650 ;; Parameters:    Size  Location     Type
 24651 ;;		None
 24652 ;; Auto vars:     Size  Location     Type
 24653 ;;		None
 24654 ;; Return value:  Size  Location     Type
 24655 ;;                  1    wreg      void 
 24656 ;; Registers used:
 24657 ;;		wreg, status,2
 24658 ;; Tracked objects:
 24659 ;;		On entry : 0/0
 24660 ;;		On exit  : 0/0
 24661 ;;		Unchanged: 0/0
 24662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24667 ;;Total ram usage:        0 bytes
 24668 ;; Hardware stack levels used:    1
 24669 ;; Hardware stack levels required when called:    7
 24670 ;; This function calls:
 24671 ;;		Nothing
 24672 ;; This function is called by:
 24673 ;;		_HMI_Init
 24674 ;;		_Button_Init
 24675 ;; This function uses a non-reentrant model
 24676 ;;
 24677                           
 24678                           	psect	text122
 24679  015B96                     __ptext122:
 24680                           	opt stack 0
 24681  015B96                     _HMI_InitButtons:
 24682                           	opt stack 21
 24683                           
 24684                           ;HMI.c: 23: TRISE = 0xFC;
 24685                           
 24686                           ;incstack = 0
 24687  015B96  0EFC               	movlw	252
 24688  015B98  6E96               	movwf	3990,c	;volatile
 24689  015B9A  0012               	return		;funcret
 24690  015B9C                     __end_of_HMI_InitButtons:
 24691                           	opt stack 0
 24692                           tosu	equ	0xFFF
 24693                           tosh	equ	0xFFE
 24694                           tosl	equ	0xFFD
 24695                           pclath	equ	0xFFA
 24696                           tblptru	equ	0xFF8
 24697                           tblptrh	equ	0xFF7
 24698                           tblptrl	equ	0xFF6
 24699                           tablat	equ	0xFF5
 24700                           prodh	equ	0xFF4
 24701                           prodl	equ	0xFF3
 24702                           intcon	equ	0xFF2
 24703                           postinc0	equ	0xFEE
 24704                           wreg	equ	0xFE8
 24705                           indf1	equ	0xFE7
 24706                           postdec1	equ	0xFE5
 24707                           fsr1h	equ	0xFE2
 24708                           fsr1l	equ	0xFE1
 24709                           indf2	equ	0xFDF
 24710                           postinc2	equ	0xFDE
 24711                           postdec2	equ	0xFDD
 24712                           plusw2	equ	0xFDB
 24713                           fsr2h	equ	0xFDA
 24714                           fsr2l	equ	0xFD9
 24715                           status	equ	0xFD8
 24716                           
 24717 ;; *************** function _MXK_InitTestButton *****************
 24718 ;; Defined at:
 24719 ;;		line 10 in file "Library/MXK.c"
 24720 ;; Parameters:    Size  Location     Type
 24721 ;;		None
 24722 ;; Auto vars:     Size  Location     Type
 24723 ;;		None
 24724 ;; Return value:  Size  Location     Type
 24725 ;;                  1    wreg      void 
 24726 ;; Registers used:
 24727 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24728 ;; Tracked objects:
 24729 ;;		On entry : 0/0
 24730 ;;		On exit  : 0/0
 24731 ;;		Unchanged: 0/0
 24732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24737 ;;Total ram usage:        0 bytes
 24738 ;; Hardware stack levels used:    1
 24739 ;; Hardware stack levels required when called:   12
 24740 ;; This function calls:
 24741 ;;		_Port_SetPinType
 24742 ;; This function is called by:
 24743 ;;		_FunctInitButton
 24744 ;;		_Button_Init
 24745 ;; This function uses a non-reentrant model
 24746 ;;
 24747                           
 24748                           	psect	text123
 24749  015A1C                     __ptext123:
 24750                           	opt stack 0
 24751  015A1C                     _MXK_InitTestButton:
 24752                           	opt stack 16
 24753                           
 24754                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 24755                           
 24756                           ;incstack = 0
 24757  015A1C  0E95               	movlw	low _PortB
 24758  015A1E  0100               	movlb	0	; () banked
 24759  015A20  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24760  015A22  0E01               	movlw	high _PortB
 24761  015A24  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24762  015A26  0E04               	movlw	4
 24763  015A28  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24764  015A2A  0E00               	movlw	0
 24765  015A2C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24766  015A2E  ECF7  F092         	call	_Port_SetPinType	;wreg free
 24767  015A32  0012               	return		;funcret
 24768  015A34                     __end_of_MXK_InitTestButton:
 24769                           	opt stack 0
 24770                           tosu	equ	0xFFF
 24771                           tosh	equ	0xFFE
 24772                           tosl	equ	0xFFD
 24773                           pclath	equ	0xFFA
 24774                           tblptru	equ	0xFF8
 24775                           tblptrh	equ	0xFF7
 24776                           tblptrl	equ	0xFF6
 24777                           tablat	equ	0xFF5
 24778                           prodh	equ	0xFF4
 24779                           prodl	equ	0xFF3
 24780                           intcon	equ	0xFF2
 24781                           postinc0	equ	0xFEE
 24782                           wreg	equ	0xFE8
 24783                           indf1	equ	0xFE7
 24784                           postdec1	equ	0xFE5
 24785                           fsr1h	equ	0xFE2
 24786                           fsr1l	equ	0xFE1
 24787                           indf2	equ	0xFDF
 24788                           postinc2	equ	0xFDE
 24789                           postdec2	equ	0xFDD
 24790                           plusw2	equ	0xFDB
 24791                           fsr2h	equ	0xFDA
 24792                           fsr2l	equ	0xFD9
 24793                           status	equ	0xFD8
 24794                           
 24795 ;; *************** function _Port_SetPinType *****************
 24796 ;; Defined at:
 24797 ;;		line 189 in file "Library/Port.c"
 24798 ;; Parameters:    Size  Location     Type
 24799 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 24800 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24801 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24802 ;;  pPin            1   40[BANK0 ] enum E6750
 24803 ;;  pType           1   41[BANK0 ] enum E6795
 24804 ;; Auto vars:     Size  Location     Type
 24805 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 24806 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 24807 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 24808 ;;  Output          1   42[BANK0 ] enum E6475
 24809 ;; Return value:  Size  Location     Type
 24810 ;;                  1    wreg      enum E6475
 24811 ;; Registers used:
 24812 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24813 ;; Tracked objects:
 24814 ;;		On entry : 0/0
 24815 ;;		On exit  : 0/0
 24816 ;;		Unchanged: 0/0
 24817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24818 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24819 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24821 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24822 ;;Total ram usage:        7 bytes
 24823 ;; Hardware stack levels used:    1
 24824 ;; Hardware stack levels required when called:   11
 24825 ;; This function calls:
 24826 ;;		_Byte_SetBit
 24827 ;;		_PortProperty_Valid
 24828 ;;		_Word_SetPair
 24829 ;; This function is called by:
 24830 ;;		_Configure_GPIOs
 24831 ;;		_LED_Init
 24832 ;;		_Port_Init
 24833 ;;		_SPI_Init
 24834 ;;		_MXK_InitTestButton
 24835 ;;		_MXK_Init
 24836 ;;		_I2C_Init
 24837 ;;		_Motor_Init
 24838 ;; This function uses a non-reentrant model
 24839 ;;
 24840                           
 24841                           	psect	text124
 24842  0125EE                     __ptext124:
 24843                           	opt stack 0
 24844  0125EE                     _Port_SetPinType:
 24845                           	opt stack 18
 24846                           
 24847                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 24848                           
 24849                           ;incstack = 0
 24850  0125EE  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 24851  0125F2  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 24852  0125F6  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 24853  0125FA  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 24854                           
 24855                           ;Port.c: 192: ePinError Output = ePinErrorState;
 24856  0125FE  0E05               	movlw	5
 24857  012600  0100               	movlb	0	; () banked
 24858  012602  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24859                           
 24860                           ;Port.c: 193: switch (pType)
 24861  012604  D0A7               	goto	l412
 24862  012606                     
 24863                           ; BSR set to: 0
 24864                           ;Port.c: 197: {
 24865                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24866                           
 24867                           ; BSR set to: 0
 24868  012606  EE20 F002          	lfsr	2,2
 24869  01260A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24870  01260C  26D9               	addwf	fsr2l,f,c
 24871  01260E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24872  012610  22DA               	addwfc	fsr2h,f,c
 24873  012612  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24874  012616  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24875  01261A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24876  01261E  0E01               	movlw	1
 24877  012620  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24878  012622  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24879                           
 24880                           ;Port.c: 203: break;
 24881  012626  D0A4               	goto	l414
 24882  012628                     
 24883                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 24884  012628  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24885  01262C  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24886  012630  0E01               	movlw	1
 24887  012632  0100               	movlb	0	; () banked
 24888  012634  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24889  012636  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24890  01263A  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 24891  01263E  0100               	movlb	0	; () banked
 24892  012640  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24893  012642  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24894  012644  A4D8               	btfss	status,2,c
 24895  012646  0012               	return	
 24896                           
 24897                           ; BSR set to: 0
 24898                           ;Port.c: 208: {
 24899                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24900  012648  EE20 F002          	lfsr	2,2
 24901  01264C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24902  01264E  26D9               	addwf	fsr2l,f,c
 24903  012650  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24904  012652  22DA               	addwfc	fsr2h,f,c
 24905  012654  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24906  012658  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24907  01265C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24908  012660  0E00               	movlw	0
 24909  012662  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24910  012664  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24911                           
 24912                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24913  012668  0100               	movlb	0	; () banked
 24914  01266A  EE20 F004          	lfsr	2,4
 24915  01266E  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24916  012670  26D9               	addwf	fsr2l,f,c
 24917  012672  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24918  012674  22DA               	addwfc	fsr2h,f,c
 24919  012676  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24920  01267A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24921  01267E  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24922  012682  0E00               	movlw	0
 24923  012684  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24924  012686  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24925                           
 24926                           ;Port.c: 214: break;
 24927  01268A  D072               	goto	l414
 24928  01268C                     
 24929                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 24930                           
 24931                           ;Port.c: 218: case eTypeOutputOpenSource:
 24932  01268C  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24933  012690  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24934  012694  0E02               	movlw	2
 24935  012696  0100               	movlb	0	; () banked
 24936  012698  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24937  01269A  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24938  01269E  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 24939  0126A2  0100               	movlb	0	; () banked
 24940  0126A4  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24941  0126A6  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24942  0126A8  A4D8               	btfss	status,2,c
 24943  0126AA  0012               	return	
 24944                           
 24945                           ; BSR set to: 0
 24946                           ;Port.c: 220: {
 24947                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24948  0126AC  EE20 F002          	lfsr	2,2
 24949  0126B0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24950  0126B2  26D9               	addwf	fsr2l,f,c
 24951  0126B4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24952  0126B6  22DA               	addwfc	fsr2h,f,c
 24953  0126B8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24954  0126BC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24955  0126C0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24956  0126C4  0E01               	movlw	1
 24957  0126C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24958  0126C8  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24959                           
 24960                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 24961  0126CC  0100               	movlb	0	; () banked
 24962  0126CE  EE20 F004          	lfsr	2,4
 24963  0126D2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24964  0126D4  26D9               	addwf	fsr2l,f,c
 24965  0126D6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24966  0126D8  22DA               	addwfc	fsr2h,f,c
 24967  0126DA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24968  0126DE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24969  0126E2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24970  0126E6  0E01               	movlw	1
 24971  0126E8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24972  0126EA  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24973                           
 24974                           ;Port.c: 226: break;
 24975  0126EE  D040               	goto	l414
 24976  0126F0                     
 24977                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 24978                           
 24979                           ;Port.c: 230: case eTypeOutputPushPull:
 24980  0126F0  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24981  0126F4  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24982  0126F8  0E00               	movlw	0
 24983  0126FA  0100               	movlb	0	; () banked
 24984  0126FC  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24985  0126FE  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24986  012702  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 24987  012706  0100               	movlb	0	; () banked
 24988  012708  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24989  01270A  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24990  01270C  A4D8               	btfss	status,2,c
 24991  01270E  0012               	return	
 24992                           
 24993                           ; BSR set to: 0
 24994                           ;Port.c: 232: {
 24995                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24996  012710  EE20 F002          	lfsr	2,2
 24997  012714  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24998  012716  26D9               	addwf	fsr2l,f,c
 24999  012718  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 25000  01271A  22DA               	addwfc	fsr2h,f,c
 25001  01271C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25002  012720  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25003  012724  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 25004  012728  0E00               	movlw	0
 25005  01272A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25006  01272C  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 25007                           
 25008                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 25009  012730  0100               	movlb	0	; () banked
 25010  012732  EE20 F004          	lfsr	2,4
 25011  012736  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 25012  012738  26D9               	addwf	fsr2l,f,c
 25013  01273A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 25014  01273C  22DA               	addwfc	fsr2h,f,c
 25015  01273E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25016  012742  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25017  012746  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 25018  01274A  0E00               	movlw	0
 25019  01274C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25020  01274E  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 25021                           
 25022                           ;Port.c: 239: }
 25023                           
 25024                           ;Port.c: 238: break;
 25025  012752  D00E               	goto	l414
 25026  012754                     l412:
 25027  012754  0100               	movlb	0	; () banked
 25028  012756  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 25029                           
 25030                           ; Switch size 1, requested type "space"
 25031                           ; Number of cases is 4, Range of values is 0 to 3
 25032                           ; switch strategies available:
 25033                           ; Name         Instructions Cycles
 25034                           ; simple_byte           13     7 (average)
 25035                           ;	Chosen strategy is simple_byte
 25036  012758  0A00               	xorlw	0	; case 0
 25037  01275A  B4D8               	btfsc	status,2,c
 25038  01275C  D754               	goto	l413
 25039  01275E  0A01               	xorlw	1	; case 1
 25040  012760  B4D8               	btfsc	status,2,c
 25041  012762  D762               	goto	l415
 25042  012764  0A03               	xorlw	3	; case 2
 25043  012766  B4D8               	btfsc	status,2,c
 25044  012768  D791               	goto	l417
 25045  01276A  0A01               	xorlw	1	; case 3
 25046  01276C  B4D8               	btfsc	status,2,c
 25047  01276E  D7C0               	goto	l421
 25048  012770                     l414:
 25049                           
 25050                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 25051                           
 25052                           ; BSR set to: 0
 25053  012770  0E08               	movlw	8
 25054  012772  0100               	movlb	0	; () banked
 25055  012774  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 25056  012776  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25057  012778  0E00               	movlw	0
 25058  01277A  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 25059  01277C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25060  01277E  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 25061  012782  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 25062  012786  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25063  01278A  0012               	return	
 25064  01278C                     __end_of_Port_SetPinType:
 25065                           	opt stack 0
 25066                           tosu	equ	0xFFF
 25067                           tosh	equ	0xFFE
 25068                           tosl	equ	0xFFD
 25069                           pclath	equ	0xFFA
 25070                           tblptru	equ	0xFF8
 25071                           tblptrh	equ	0xFF7
 25072                           tblptrl	equ	0xFF6
 25073                           tablat	equ	0xFF5
 25074                           prodh	equ	0xFF4
 25075                           prodl	equ	0xFF3
 25076                           intcon	equ	0xFF2
 25077                           postinc0	equ	0xFEE
 25078                           wreg	equ	0xFE8
 25079                           indf1	equ	0xFE7
 25080                           postdec1	equ	0xFE5
 25081                           fsr1h	equ	0xFE2
 25082                           fsr1l	equ	0xFE1
 25083                           indf2	equ	0xFDF
 25084                           postinc2	equ	0xFDE
 25085                           postdec2	equ	0xFDD
 25086                           plusw2	equ	0xFDB
 25087                           fsr2h	equ	0xFDA
 25088                           fsr2l	equ	0xFD9
 25089                           status	equ	0xFD8
 25090                           
 25091 ;; *************** function _Byte_SetBit *****************
 25092 ;; Defined at:
 25093 ;;		line 32 in file "Library/Types.c"
 25094 ;; Parameters:    Size  Location     Type
 25095 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 25096 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 25097 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 25098 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 25099 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 25100 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 25101 ;;		 -> NULL(0), 
 25102 ;;  pBit            1    2[BANK0 ] unsigned char 
 25103 ;;  pValue          1    3[BANK0 ] unsigned char 
 25104 ;; Auto vars:     Size  Location     Type
 25105 ;;		None
 25106 ;; Return value:  Size  Location     Type
 25107 ;;                  1    wreg      void 
 25108 ;; Registers used:
 25109 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25110 ;; Tracked objects:
 25111 ;;		On entry : 0/0
 25112 ;;		On exit  : 0/0
 25113 ;;		Unchanged: 0/0
 25114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25115 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25117 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25118 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25119 ;;Total ram usage:        7 bytes
 25120 ;; Hardware stack levels used:    1
 25121 ;; Hardware stack levels required when called:    7
 25122 ;; This function calls:
 25123 ;;		Nothing
 25124 ;; This function is called by:
 25125 ;;		_Port_SetPinType
 25126 ;;		_Port_SetPin
 25127 ;;		_SPI_Init
 25128 ;;		_SPI_MinSpeed
 25129 ;;		_SPI_MaxSpeed
 25130 ;;		_Word_SetBit
 25131 ;;		_I2C_Init
 25132 ;; This function uses a non-reentrant model
 25133 ;;
 25134                           
 25135                           	psect	text125
 25136  014FEA                     __ptext125:
 25137                           	opt stack 0
 25138  014FEA                     _Byte_SetBit:
 25139                           	opt stack 21
 25140                           
 25141                           ;Types.c: 34: pValue &= 1;
 25142                           
 25143                           ;incstack = 0
 25144  014FEA  0E01               	movlw	1
 25145  014FEC  0100               	movlb	0	; () banked
 25146  014FEE  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 25147                           
 25148                           ; BSR set to: 0
 25149                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 25150  014FF0  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 25151  014FF4  0E01               	movlw	1
 25152  014FF6  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 25153  014FF8  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 25154  014FFA  D002               	goto	u10204
 25155  014FFC                     u10205:
 25156  014FFC  90D8               	bcf	status,0,c
 25157  014FFE  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 25158  015000                     u10204:
 25159  015000  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 25160  015002  D7FC               	goto	u10205
 25161  015004  0100               	movlb	0	; () banked
 25162  015006  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 25163  015008  0AFF               	xorlw	255
 25164  01500A  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 25165  01500C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 25166  015010  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 25167  015014  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 25168  015016  16DF               	andwf	indf2,f,c
 25169                           
 25170                           ; BSR set to: 0
 25171                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 25172  015018  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 25173  01501C  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 25174  015020  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 25175  015022  D002               	goto	u10214
 25176  015024                     u10215:
 25177  015024  90D8               	bcf	status,0,c
 25178  015026  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 25179  015028                     u10214:
 25180  015028  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 25181  01502A  D7FC               	goto	u10215
 25182  01502C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 25183  015030  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 25184  015034  0100               	movlb	0	; () banked
 25185  015036  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 25186  015038  12DF               	iorwf	indf2,f,c
 25187                           
 25188                           ; BSR set to: 0
 25189  01503A  0012               	return		;funcret
 25190  01503C                     __end_of_Byte_SetBit:
 25191                           	opt stack 0
 25192                           tosu	equ	0xFFF
 25193                           tosh	equ	0xFFE
 25194                           tosl	equ	0xFFD
 25195                           pclath	equ	0xFFA
 25196                           tblptru	equ	0xFF8
 25197                           tblptrh	equ	0xFF7
 25198                           tblptrl	equ	0xFF6
 25199                           tablat	equ	0xFF5
 25200                           prodh	equ	0xFF4
 25201                           prodl	equ	0xFF3
 25202                           intcon	equ	0xFF2
 25203                           postinc0	equ	0xFEE
 25204                           wreg	equ	0xFE8
 25205                           indf1	equ	0xFE7
 25206                           postdec1	equ	0xFE5
 25207                           fsr1h	equ	0xFE2
 25208                           fsr1l	equ	0xFE1
 25209                           indf2	equ	0xFDF
 25210                           postinc2	equ	0xFDE
 25211                           postdec2	equ	0xFDD
 25212                           plusw2	equ	0xFDB
 25213                           fsr2h	equ	0xFDA
 25214                           fsr2l	equ	0xFD9
 25215                           status	equ	0xFD8
 25216                           
 25217 ;; *************** function _Port_SetQuadType *****************
 25218 ;; Defined at:
 25219 ;;		line 399 in file "Library/Port.c"
 25220 ;; Parameters:    Size  Location     Type
 25221 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 25222 ;;		 -> PortB(10), PortD(10), 
 25223 ;;  pQuad           1   56[BANK0 ] enum E6776
 25224 ;;  pType           1   57[BANK0 ] enum E6795
 25225 ;; Auto vars:     Size  Location     Type
 25226 ;;  Output          1   58[BANK0 ] enum E6475
 25227 ;; Return value:  Size  Location     Type
 25228 ;;                  1    wreg      enum E6475
 25229 ;; Registers used:
 25230 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25231 ;; Tracked objects:
 25232 ;;		On entry : 0/0
 25233 ;;		On exit  : 0/0
 25234 ;;		Unchanged: 0/0
 25235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25236 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25237 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25239 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25240 ;;Total ram usage:        5 bytes
 25241 ;; Hardware stack levels used:    1
 25242 ;; Hardware stack levels required when called:   13
 25243 ;; This function calls:
 25244 ;;		_Byte_SetQuad
 25245 ;;		_Port_CheckQuadType
 25246 ;;		_Word_SetPair
 25247 ;; This function is called by:
 25248 ;;		_MXK_InitDIPSwitch
 25249 ;;		_MXK_Init
 25250 ;; This function uses a non-reentrant model
 25251 ;;
 25252                           
 25253                           	psect	text126
 25254  011C9A                     __ptext126:
 25255                           	opt stack 0
 25256  011C9A                     _Port_SetQuadType:
 25257                           	opt stack 16
 25258                           
 25259                           ;Port.c: 401: ePinError Output = ePinErrorState;
 25260                           
 25261                           ; BSR set to: 0
 25262                           ;incstack = 0
 25263  011C9A  0E05               	movlw	5
 25264  011C9C  0100               	movlb	0	; () banked
 25265  011C9E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25266                           
 25267                           ;Port.c: 403: switch (pType)
 25268  011CA0  D0B8               	goto	l476
 25269  011CA2                     
 25270                           ; BSR set to: 0
 25271                           ;Port.c: 407: {
 25272                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25273                           
 25274                           ; BSR set to: 0
 25275  011CA2  EE20 F002          	lfsr	2,2
 25276  011CA6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25277  011CA8  26D9               	addwf	fsr2l,f,c
 25278  011CAA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25279  011CAC  22DA               	addwfc	fsr2h,f,c
 25280  011CAE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25281  011CB2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25282  011CB6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25283  011CBA  0E0F               	movlw	15
 25284  011CBC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25285  011CBE  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25286                           
 25287                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25288  011CC2  0100               	movlb	0	; () banked
 25289  011CC4  EE20 F004          	lfsr	2,4
 25290  011CC8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25291  011CCA  26D9               	addwf	fsr2l,f,c
 25292  011CCC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25293  011CCE  22DA               	addwfc	fsr2h,f,c
 25294  011CD0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25295  011CD4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25296  011CD8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25297  011CDC  0E00               	movlw	0
 25298  011CDE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25299  011CE0  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25300                           
 25301                           ;Port.c: 413: }
 25302                           ;Port.c: 415: break;
 25303  011CE4  D0A4               	goto	l478
 25304  011CE6                     
 25305                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25306  011CE6  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25307  011CEA  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25308  011CEE  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25309  011CF2  0E03               	movlw	3
 25310  011CF4  0100               	movlb	0	; () banked
 25311  011CF6  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25312  011CF8  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 25313  011CFC  0100               	movlb	0	; () banked
 25314  011CFE  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25315  011D00  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25316  011D02  A4D8               	btfss	status,2,c
 25317  011D04  0012               	return	
 25318                           
 25319                           ; BSR set to: 0
 25320                           ;Port.c: 418: {
 25321                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25322  011D06  EE20 F002          	lfsr	2,2
 25323  011D0A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25324  011D0C  26D9               	addwf	fsr2l,f,c
 25325  011D0E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25326  011D10  22DA               	addwfc	fsr2h,f,c
 25327  011D12  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25328  011D16  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25329  011D1A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25330  011D1E  0E00               	movlw	0
 25331  011D20  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25332  011D22  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25333                           
 25334                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25335  011D26  0100               	movlb	0	; () banked
 25336  011D28  EE20 F004          	lfsr	2,4
 25337  011D2C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25338  011D2E  26D9               	addwf	fsr2l,f,c
 25339  011D30  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25340  011D32  22DA               	addwfc	fsr2h,f,c
 25341  011D34  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25342  011D38  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25343  011D3C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25344  011D40  0E00               	movlw	0
 25345  011D42  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25346  011D44  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25347                           
 25348                           ;Port.c: 424: }
 25349  011D48  D072               	goto	l478
 25350  011D4A                     
 25351                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25352  011D4A  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25353  011D4E  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25354  011D52  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25355  011D56  0E03               	movlw	3
 25356  011D58  0100               	movlb	0	; () banked
 25357  011D5A  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25358  011D5C  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 25359  011D60  0100               	movlb	0	; () banked
 25360  011D62  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25361  011D64  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25362  011D66  A4D8               	btfss	status,2,c
 25363  011D68  0012               	return	
 25364                           
 25365                           ; BSR set to: 0
 25366                           ;Port.c: 429: {
 25367                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25368  011D6A  EE20 F002          	lfsr	2,2
 25369  011D6E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25370  011D70  26D9               	addwf	fsr2l,f,c
 25371  011D72  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25372  011D74  22DA               	addwfc	fsr2h,f,c
 25373  011D76  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25374  011D7A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25375  011D7E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25376  011D82  0E0F               	movlw	15
 25377  011D84  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25378  011D86  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25379                           
 25380                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 25381  011D8A  0100               	movlb	0	; () banked
 25382  011D8C  EE20 F004          	lfsr	2,4
 25383  011D90  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25384  011D92  26D9               	addwf	fsr2l,f,c
 25385  011D94  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25386  011D96  22DA               	addwfc	fsr2h,f,c
 25387  011D98  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25388  011D9C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25389  011DA0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25390  011DA4  0E0F               	movlw	15
 25391  011DA6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25392  011DA8  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25393                           
 25394                           ;Port.c: 435: }
 25395  011DAC  D040               	goto	l478
 25396  011DAE                     
 25397                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25398  011DAE  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25399  011DB2  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25400  011DB6  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25401  011DBA  0E03               	movlw	3
 25402  011DBC  0100               	movlb	0	; () banked
 25403  011DBE  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25404  011DC0  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 25405  011DC4  0100               	movlb	0	; () banked
 25406  011DC6  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25407  011DC8  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25408  011DCA  A4D8               	btfss	status,2,c
 25409  011DCC  0012               	return	
 25410                           
 25411                           ; BSR set to: 0
 25412                           ;Port.c: 440: {
 25413                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25414  011DCE  EE20 F002          	lfsr	2,2
 25415  011DD2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25416  011DD4  26D9               	addwf	fsr2l,f,c
 25417  011DD6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25418  011DD8  22DA               	addwfc	fsr2h,f,c
 25419  011DDA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25420  011DDE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25421  011DE2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25422  011DE6  0E00               	movlw	0
 25423  011DE8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25424  011DEA  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25425                           
 25426                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25427  011DEE  0100               	movlb	0	; () banked
 25428  011DF0  EE20 F004          	lfsr	2,4
 25429  011DF4  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25430  011DF6  26D9               	addwf	fsr2l,f,c
 25431  011DF8  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25432  011DFA  22DA               	addwfc	fsr2h,f,c
 25433  011DFC  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25434  011E00  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25435  011E04  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25436  011E08  0E00               	movlw	0
 25437  011E0A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25438  011E0C  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25439                           
 25440                           ;Port.c: 446: }
 25441  011E10  D00E               	goto	l478
 25442  011E12                     l476:
 25443  011E12  0100               	movlb	0	; () banked
 25444  011E14  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 25445                           
 25446                           ; Switch size 1, requested type "space"
 25447                           ; Number of cases is 4, Range of values is 0 to 3
 25448                           ; switch strategies available:
 25449                           ; Name         Instructions Cycles
 25450                           ; simple_byte           13     7 (average)
 25451                           ;	Chosen strategy is simple_byte
 25452  011E16  0A00               	xorlw	0	; case 0
 25453  011E18  B4D8               	btfsc	status,2,c
 25454  011E1A  D743               	goto	l477
 25455  011E1C  0A01               	xorlw	1	; case 1
 25456  011E1E  B4D8               	btfsc	status,2,c
 25457  011E20  D762               	goto	l479
 25458  011E22  0A03               	xorlw	3	; case 2
 25459  011E24  B4D8               	btfsc	status,2,c
 25460  011E26  D791               	goto	l483
 25461  011E28  0A01               	xorlw	1	; case 3
 25462  011E2A  B4D8               	btfsc	status,2,c
 25463  011E2C  D7C0               	goto	l486
 25464  011E2E                     l478:
 25465                           
 25466                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 25467                           
 25468                           ; BSR set to: 0
 25469  011E2E  0E08               	movlw	8
 25470  011E30  0100               	movlb	0	; () banked
 25471  011E32  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25472  011E34  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25473  011E36  0E00               	movlw	0
 25474  011E38  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25475  011E3A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25476  011E3C  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25477  011E3E  0D04               	mullw	4
 25478  011E40  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 25479  011E44  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25480  011E48  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25481                           
 25482                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 25483  011E4C  0E08               	movlw	8
 25484  011E4E  0100               	movlb	0	; () banked
 25485  011E50  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25486  011E52  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25487  011E54  0E00               	movlw	0
 25488  011E56  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25489  011E58  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25490  011E5A  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25491  011E5C  0D04               	mullw	4
 25492  011E5E  28F3               	incf	prodl,w,c
 25493  011E60  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25494  011E62  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25495  011E66  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25496                           
 25497                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 25498  011E6A  0E08               	movlw	8
 25499  011E6C  0100               	movlb	0	; () banked
 25500  011E6E  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25501  011E70  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25502  011E72  0E00               	movlw	0
 25503  011E74  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25504  011E76  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25505  011E78  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25506  011E7A  0D04               	mullw	4
 25507  011E7C  50F3               	movf	prodl,w,c
 25508  011E7E  0F02               	addlw	2
 25509  011E80  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25510  011E82  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25511  011E86  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25512                           
 25513                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 25514  011E8A  0E08               	movlw	8
 25515  011E8C  0100               	movlb	0	; () banked
 25516  011E8E  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25517  011E90  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25518  011E92  0E00               	movlw	0
 25519  011E94  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25520  011E96  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25521  011E98  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25522  011E9A  0D04               	mullw	4
 25523  011E9C  50F3               	movf	prodl,w,c
 25524  011E9E  0F03               	addlw	3
 25525  011EA0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25526  011EA2  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25527  011EA6  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25528  011EAA  0012               	return	
 25529  011EAC                     __end_of_Port_SetQuadType:
 25530                           	opt stack 0
 25531                           tosu	equ	0xFFF
 25532                           tosh	equ	0xFFE
 25533                           tosl	equ	0xFFD
 25534                           pclath	equ	0xFFA
 25535                           tblptru	equ	0xFF8
 25536                           tblptrh	equ	0xFF7
 25537                           tblptrl	equ	0xFF6
 25538                           tablat	equ	0xFF5
 25539                           prodh	equ	0xFF4
 25540                           prodl	equ	0xFF3
 25541                           intcon	equ	0xFF2
 25542                           postinc0	equ	0xFEE
 25543                           wreg	equ	0xFE8
 25544                           indf1	equ	0xFE7
 25545                           postdec1	equ	0xFE5
 25546                           fsr1h	equ	0xFE2
 25547                           fsr1l	equ	0xFE1
 25548                           indf2	equ	0xFDF
 25549                           postinc2	equ	0xFDE
 25550                           postdec2	equ	0xFDD
 25551                           plusw2	equ	0xFDB
 25552                           fsr2h	equ	0xFDA
 25553                           fsr2l	equ	0xFD9
 25554                           status	equ	0xFD8
 25555                           
 25556 ;; *************** function _Word_SetPair *****************
 25557 ;; Defined at:
 25558 ;;		line 149 in file "Library/Types.c"
 25559 ;; Parameters:    Size  Location     Type
 25560 ;;  pInput          2   15[BANK0 ] PTR struct Word
 25561 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25562 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25563 ;;  pPair           1   17[BANK0 ] unsigned char 
 25564 ;;  pValue          1   18[BANK0 ] unsigned char 
 25565 ;; Auto vars:     Size  Location     Type
 25566 ;;		None
 25567 ;; Return value:  Size  Location     Type
 25568 ;;                  1    wreg      void 
 25569 ;; Registers used:
 25570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25571 ;; Tracked objects:
 25572 ;;		On entry : 0/0
 25573 ;;		On exit  : 0/0
 25574 ;;		Unchanged: 0/0
 25575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25576 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25579 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25580 ;;Total ram usage:        4 bytes
 25581 ;; Hardware stack levels used:    1
 25582 ;; Hardware stack levels required when called:    9
 25583 ;; This function calls:
 25584 ;;		_Byte_SetPair
 25585 ;; This function is called by:
 25586 ;;		_Port_SetPinType
 25587 ;;		_Port_SetQuadType
 25588 ;;		_Port_SetType
 25589 ;;		_Port_SetPairType
 25590 ;;		_PortProperty_Init
 25591 ;; This function uses a non-reentrant model
 25592 ;;
 25593                           
 25594                           	psect	text127
 25595  01551E                     __ptext127:
 25596                           	opt stack 0
 25597  01551E                     _Word_SetPair:
 25598                           	opt stack 19
 25599                           
 25600                           ;Types.c: 151: if (pPair >= 4)
 25601                           
 25602                           ;incstack = 0
 25603  01551E  0E03               	movlw	3
 25604  015520  0100               	movlb	0	; () banked
 25605  015522  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 25606  015524  D00E               	goto	l776
 25607                           
 25608                           ; BSR set to: 0
 25609                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 25610  015526  0E01               	movlw	1
 25611  015528  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 25612  01552A  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 25613  01552C  0E00               	movlw	0
 25614  01552E  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 25615  015530  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 25616  015532  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 25617  015534  0FFC               	addlw	252
 25618  015536  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 25619  015538  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25620  01553C  EC6A  F0AC         	call	_Byte_SetPair	;wreg free
 25621  015540  0012               	return	
 25622  015542                     l776:
 25623                           
 25624                           ;Types.c: 153: else
 25625                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 25626  015542  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 25627  015546  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 25628  01554A  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 25629  01554E  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25630  015552  EC6A  F0AC         	call	_Byte_SetPair	;wreg free
 25631  015556  0012               	return	
 25632  015558                     __end_of_Word_SetPair:
 25633                           	opt stack 0
 25634                           tosu	equ	0xFFF
 25635                           tosh	equ	0xFFE
 25636                           tosl	equ	0xFFD
 25637                           pclath	equ	0xFFA
 25638                           tblptru	equ	0xFF8
 25639                           tblptrh	equ	0xFF7
 25640                           tblptrl	equ	0xFF6
 25641                           tablat	equ	0xFF5
 25642                           prodh	equ	0xFF4
 25643                           prodl	equ	0xFF3
 25644                           intcon	equ	0xFF2
 25645                           postinc0	equ	0xFEE
 25646                           wreg	equ	0xFE8
 25647                           indf1	equ	0xFE7
 25648                           postdec1	equ	0xFE5
 25649                           fsr1h	equ	0xFE2
 25650                           fsr1l	equ	0xFE1
 25651                           indf2	equ	0xFDF
 25652                           postinc2	equ	0xFDE
 25653                           postdec2	equ	0xFDD
 25654                           plusw2	equ	0xFDB
 25655                           fsr2h	equ	0xFDA
 25656                           fsr2l	equ	0xFD9
 25657                           status	equ	0xFD8
 25658                           
 25659 ;; *************** function _Byte_SetPair *****************
 25660 ;; Defined at:
 25661 ;;		line 83 in file "Library/Types.c"
 25662 ;; Parameters:    Size  Location     Type
 25663 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 25664 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 25665 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 25666 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 25667 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 25668 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 25669 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 25670 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 25671 ;;		 -> NULL(0), 
 25672 ;;  pPair           1   13[BANK0 ] unsigned char 
 25673 ;;  pValue          1   14[BANK0 ] unsigned char 
 25674 ;; Auto vars:     Size  Location     Type
 25675 ;;		None
 25676 ;; Return value:  Size  Location     Type
 25677 ;;                  1    wreg      void 
 25678 ;; Registers used:
 25679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25680 ;; Tracked objects:
 25681 ;;		On entry : 0/0
 25682 ;;		On exit  : 0/0
 25683 ;;		Unchanged: 0/0
 25684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25685 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25688 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25689 ;;Total ram usage:        4 bytes
 25690 ;; Hardware stack levels used:    1
 25691 ;; Hardware stack levels required when called:    8
 25692 ;; This function calls:
 25693 ;;		_Byte_SetZone
 25694 ;; This function is called by:
 25695 ;;		_Word_SetPair
 25696 ;;		_Port_SetPairType
 25697 ;;		_Port_SetPair
 25698 ;; This function uses a non-reentrant model
 25699 ;;
 25700                           
 25701                           	psect	text128
 25702  0158D4                     __ptext128:
 25703                           	opt stack 0
 25704  0158D4                     _Byte_SetPair:
 25705                           	opt stack 19
 25706                           
 25707                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 25708                           
 25709                           ;incstack = 0
 25710  0158D4  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 25711  0158D8  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 25712  0158DC  0E04               	movlw	4
 25713  0158DE  0100               	movlb	0	; () banked
 25714  0158E0  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 25715  0158E2  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 25716  0158E6  0E02               	movlw	2
 25717  0158E8  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 25718  0158EA  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 25719  0158EE  EC7F  F0A1         	call	_Byte_SetZone	;wreg free
 25720  0158F2  0012               	return		;funcret
 25721  0158F4                     __end_of_Byte_SetPair:
 25722                           	opt stack 0
 25723                           tosu	equ	0xFFF
 25724                           tosh	equ	0xFFE
 25725                           tosl	equ	0xFFD
 25726                           pclath	equ	0xFFA
 25727                           tblptru	equ	0xFF8
 25728                           tblptrh	equ	0xFF7
 25729                           tblptrl	equ	0xFF6
 25730                           tablat	equ	0xFF5
 25731                           prodh	equ	0xFF4
 25732                           prodl	equ	0xFF3
 25733                           intcon	equ	0xFF2
 25734                           postinc0	equ	0xFEE
 25735                           wreg	equ	0xFE8
 25736                           indf1	equ	0xFE7
 25737                           postdec1	equ	0xFE5
 25738                           fsr1h	equ	0xFE2
 25739                           fsr1l	equ	0xFE1
 25740                           indf2	equ	0xFDF
 25741                           postinc2	equ	0xFDE
 25742                           postdec2	equ	0xFDD
 25743                           plusw2	equ	0xFDB
 25744                           fsr2h	equ	0xFDA
 25745                           fsr2l	equ	0xFD9
 25746                           status	equ	0xFD8
 25747                           
 25748 ;; *************** function _Port_CheckQuadType *****************
 25749 ;; Defined at:
 25750 ;;		line 126 in file "Library/Port.c"
 25751 ;; Parameters:    Size  Location     Type
 25752 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 25753 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25754 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25755 ;;  pQuad           1   49[BANK0 ] enum E6776
 25756 ;;  pDrive          1   50[BANK0 ] enum E6469
 25757 ;; Auto vars:     Size  Location     Type
 25758 ;;  Output          1   53[BANK0 ] enum E6475
 25759 ;;  Pair2           1   52[BANK0 ] enum E6760
 25760 ;;  Pair1           1   51[BANK0 ] enum E6760
 25761 ;; Return value:  Size  Location     Type
 25762 ;;                  1    wreg      enum E6475
 25763 ;; Registers used:
 25764 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25765 ;; Tracked objects:
 25766 ;;		On entry : 0/0
 25767 ;;		On exit  : 0/0
 25768 ;;		Unchanged: 0/0
 25769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25770 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25771 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25773 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25774 ;;Total ram usage:        7 bytes
 25775 ;; Hardware stack levels used:    1
 25776 ;; Hardware stack levels required when called:   12
 25777 ;; This function calls:
 25778 ;;		_Port_CheckPairType
 25779 ;; This function is called by:
 25780 ;;		_Port_CheckPortType
 25781 ;;		_Port_SetQuadType
 25782 ;; This function uses a non-reentrant model
 25783 ;;
 25784                           
 25785                           	psect	text129
 25786  0150DC                     __ptext129:
 25787                           	opt stack 0
 25788  0150DC                     _Port_CheckQuadType:
 25789                           	opt stack 15
 25790                           
 25791                           ;Port.c: 128: ePinError Output = ePinErrorState;
 25792                           
 25793                           ;incstack = 0
 25794  0150DC  0E05               	movlw	5
 25795  0150DE  0100               	movlb	0	; () banked
 25796  0150E0  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25797                           
 25798                           ; BSR set to: 0
 25799                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 25800  0150E2  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25801  0150E4  0D02               	mullw	2
 25802  0150E6  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 25803                           
 25804                           ; BSR set to: 0
 25805                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 25806  0150EA  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25807  0150EC  0D02               	mullw	2
 25808  0150EE  28F3               	incf	prodl,w,c
 25809  0150F0  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 25810                           
 25811                           ; BSR set to: 0
 25812                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 25813  0150F2  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25814  0150F6  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25815  0150FA  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 25816  0150FE  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25817  015102  EC96  F0A6         	call	_Port_CheckPairType	;wreg free
 25818  015106  0100               	movlb	0	; () banked
 25819  015108  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25820  01510A  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25821  01510C  A4D8               	btfss	status,2,c
 25822  01510E  D00C               	goto	l393
 25823                           
 25824                           ; BSR set to: 0
 25825                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 25826  015110  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25827  015114  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25828  015118  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 25829  01511C  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25830  015120  EC96  F0A6         	call	_Port_CheckPairType	;wreg free
 25831  015124  0100               	movlb	0	; () banked
 25832  015126  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25833  015128                     l393:
 25834                           
 25835                           ; BSR set to: 0
 25836                           ;Port.c: 136: return Output;
 25837                           
 25838                           ; BSR set to: 0
 25839  015128  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25840  01512A  0012               	return	
 25841  01512C                     __end_of_Port_CheckQuadType:
 25842                           	opt stack 0
 25843                           tosu	equ	0xFFF
 25844                           tosh	equ	0xFFE
 25845                           tosl	equ	0xFFD
 25846                           pclath	equ	0xFFA
 25847                           tblptru	equ	0xFF8
 25848                           tblptrh	equ	0xFF7
 25849                           tblptrl	equ	0xFF6
 25850                           tablat	equ	0xFF5
 25851                           prodh	equ	0xFF4
 25852                           prodl	equ	0xFF3
 25853                           intcon	equ	0xFF2
 25854                           postinc0	equ	0xFEE
 25855                           wreg	equ	0xFE8
 25856                           indf1	equ	0xFE7
 25857                           postdec1	equ	0xFE5
 25858                           fsr1h	equ	0xFE2
 25859                           fsr1l	equ	0xFE1
 25860                           indf2	equ	0xFDF
 25861                           postinc2	equ	0xFDE
 25862                           postdec2	equ	0xFDD
 25863                           plusw2	equ	0xFDB
 25864                           fsr2h	equ	0xFDA
 25865                           fsr2l	equ	0xFD9
 25866                           status	equ	0xFD8
 25867                           
 25868 ;; *************** function _Port_CheckPairType *****************
 25869 ;; Defined at:
 25870 ;;		line 112 in file "Library/Port.c"
 25871 ;; Parameters:    Size  Location     Type
 25872 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 25873 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25874 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25875 ;;  pPair           1   40[BANK0 ] enum E6760
 25876 ;;  pDrive          1   41[BANK0 ] enum E6469
 25877 ;; Auto vars:     Size  Location     Type
 25878 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 25879 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25880 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25881 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25882 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25883 ;;  Output          1   44[BANK0 ] enum E6475
 25884 ;;  Pin2            1   43[BANK0 ] enum E6750
 25885 ;;  Pin1            1   42[BANK0 ] enum E6750
 25886 ;; Return value:  Size  Location     Type
 25887 ;;                  1    wreg      enum E6475
 25888 ;; Registers used:
 25889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25890 ;; Tracked objects:
 25891 ;;		On entry : 0/0
 25892 ;;		On exit  : 0/0
 25893 ;;		Unchanged: 0/0
 25894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25895 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25896 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25898 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25899 ;;Total ram usage:        9 bytes
 25900 ;; Hardware stack levels used:    1
 25901 ;; Hardware stack levels required when called:   11
 25902 ;; This function calls:
 25903 ;;		_PortProperty_Valid
 25904 ;; This function is called by:
 25905 ;;		_Port_CheckQuadType
 25906 ;;		_Port_SetPairType
 25907 ;; This function uses a non-reentrant model
 25908 ;;
 25909                           
 25910                           	psect	text130
 25911  014D2C                     __ptext130:
 25912                           	opt stack 0
 25913  014D2C                     _Port_CheckPairType:
 25914                           	opt stack 15
 25915                           
 25916                           ;Port.c: 114: ePinError Output = ePinErrorState;
 25917                           
 25918                           ; BSR set to: 0
 25919                           ;incstack = 0
 25920  014D2C  0E05               	movlw	5
 25921  014D2E  0100               	movlb	0	; () banked
 25922  014D30  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25923                           
 25924                           ; BSR set to: 0
 25925                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 25926  014D32  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 25927  014D36  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 25928  014D3A  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 25929  014D3E  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 25930                           
 25931                           ; BSR set to: 0
 25932                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 25933  014D42  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25934  014D44  0D02               	mullw	2
 25935  014D46  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 25936                           
 25937                           ; BSR set to: 0
 25938                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 25939  014D4A  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25940  014D4C  0D02               	mullw	2
 25941  014D4E  28F3               	incf	prodl,w,c
 25942  014D50  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 25943                           
 25944                           ; BSR set to: 0
 25945                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 25946  014D52  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25947  014D56  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25948  014D5A  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25949  014D5E  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 25950  014D62  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 25951  014D66  0100               	movlb	0	; () banked
 25952  014D68  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25953  014D6A  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25954  014D6C  A4D8               	btfss	status,2,c
 25955  014D6E  D00C               	goto	l389
 25956                           
 25957                           ; BSR set to: 0
 25958                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 25959  014D70  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25960  014D74  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25961  014D78  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25962  014D7C  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 25963  014D80  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 25964  014D84  0100               	movlb	0	; () banked
 25965  014D86  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25966  014D88                     l389:
 25967                           
 25968                           ; BSR set to: 0
 25969                           ;Port.c: 124: return Output;
 25970                           
 25971                           ; BSR set to: 0
 25972  014D88  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25973  014D8A  0012               	return	
 25974  014D8C                     __end_of_Port_CheckPairType:
 25975                           	opt stack 0
 25976                           tosu	equ	0xFFF
 25977                           tosh	equ	0xFFE
 25978                           tosl	equ	0xFFD
 25979                           pclath	equ	0xFFA
 25980                           tblptru	equ	0xFF8
 25981                           tblptrh	equ	0xFF7
 25982                           tblptrl	equ	0xFF6
 25983                           tablat	equ	0xFF5
 25984                           prodh	equ	0xFF4
 25985                           prodl	equ	0xFF3
 25986                           intcon	equ	0xFF2
 25987                           postinc0	equ	0xFEE
 25988                           wreg	equ	0xFE8
 25989                           indf1	equ	0xFE7
 25990                           postdec1	equ	0xFE5
 25991                           fsr1h	equ	0xFE2
 25992                           fsr1l	equ	0xFE1
 25993                           indf2	equ	0xFDF
 25994                           postinc2	equ	0xFDE
 25995                           postdec2	equ	0xFDD
 25996                           plusw2	equ	0xFDB
 25997                           fsr2h	equ	0xFDA
 25998                           fsr2l	equ	0xFD9
 25999                           status	equ	0xFD8
 26000                           
 26001 ;; *************** function _PortProperty_Valid *****************
 26002 ;; Defined at:
 26003 ;;		line 220 in file "Library/Types.c"
 26004 ;; Parameters:    Size  Location     Type
 26005 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 26006 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 26007 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 26008 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 26009 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26010 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 26011 ;;  pPin            1   18[BANK0 ] unsigned char 
 26012 ;; Auto vars:     Size  Location     Type
 26013 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 26014 ;;  Pair            1   37[BANK0 ] enum E6469
 26015 ;; Return value:  Size  Location     Type
 26016 ;;                  1    wreg      enum E6475
 26017 ;; Registers used:
 26018 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26019 ;; Tracked objects:
 26020 ;;		On entry : 0/0
 26021 ;;		On exit  : 0/0
 26022 ;;		Unchanged: 0/0
 26023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26024 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26025 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26027 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26028 ;;Total ram usage:       23 bytes
 26029 ;; Hardware stack levels used:    1
 26030 ;; Hardware stack levels required when called:   10
 26031 ;; This function calls:
 26032 ;;		_Word_GetPair
 26033 ;; This function is called by:
 26034 ;;		_Port_CheckPairType
 26035 ;;		_Port_SetPinType
 26036 ;; This function uses a non-reentrant model
 26037 ;;
 26038                           
 26039                           	psect	text131
 26040  014BFE                     __ptext131:
 26041                           	opt stack 0
 26042  014BFE                     _PortProperty_Valid:
 26043                           	opt stack 15
 26044                           
 26045                           ;Types.c: 222: ePinDrive Pair;
 26046                           ;Types.c: 223: const ePinError Errors[4][4] =
 26047                           ;Types.c: 224: {
 26048                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 26049                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 26050                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 26051                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 26052                           ;Types.c: 230: };
 26053                           
 26054                           ; BSR set to: 0
 26055                           ;incstack = 0
 26056  014BFE  0EDB               	movlw	low PortProperty_Valid@F6830
 26057  014C00  6EF6               	movwf	tblptrl,c
 26058  014C02                     	if	1	;There is more than 1 active tblptr byte
 26059  014C02  0EFB               	movlw	high PortProperty_Valid@F6830
 26060  014C04  6EF7               	movwf	tblptrh,c
 26061  014C06                     	endif
 26062  014C06                     	if	1	;There are 3 active tblptr bytes
 26063  014C06  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 26064  014C08  6EF8               	movwf	tblptru,c
 26065  014C0A                     	endif
 26066  014C0A  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 26067  014C0E  0E0F               	movlw	15
 26068  014C10                     u10170:
 26069  014C10  0009               	tblrd		*+
 26070  014C12  CFF5 FFDE          	movff	tablat,postinc2
 26071  014C16  06E8               	decf	wreg,f,c
 26072  014C18  E2FB               	bc	u10170
 26073                           
 26074                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 26075  014C1A  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 26076  014C1E  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 26077  014C22  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 26078  014C26  EC18  F0AB         	call	_Word_GetPair	;wreg free
 26079  014C2A  0100               	movlb	0	; () banked
 26080  014C2C  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 26081                           
 26082                           ; BSR set to: 0
 26083                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 26084  014C2E  0E04               	movlw	4
 26085  014C30  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 26086  014C32  D017               	goto	l819
 26087                           
 26088                           ; BSR set to: 0
 26089  014C34  0E04               	movlw	4
 26090  014C36  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 26091  014C38  D014               	goto	l819
 26092                           
 26093                           ; BSR set to: 0
 26094                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 26095  014C3A  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 26096  014C3C  0D04               	mullw	4
 26097  014C3E  0E75               	movlw	low PortProperty_Valid@Errors
 26098  014C40  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 26099  014C42  0E00               	movlw	high PortProperty_Valid@Errors
 26100  014C44  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 26101  014C46  50F3               	movf	prodl,w,c
 26102  014C48  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 26103  014C4A  50F4               	movf	prodh,w,c
 26104  014C4C  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 26105  014C4E  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 26106  014C50  0D01               	mullw	1
 26107  014C52  50F3               	movf	prodl,w,c
 26108  014C54  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 26109  014C56  6ED9               	movwf	fsr2l,c
 26110  014C58  50F4               	movf	prodh,w,c
 26111  014C5A  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 26112  014C5C  6EDA               	movwf	fsr2h,c
 26113  014C5E  50DF               	movf	indf2,w,c
 26114                           
 26115                           ; BSR set to: 0
 26116  014C60  0012               	return	
 26117  014C62                     l819:
 26118                           
 26119                           ; BSR set to: 0
 26120                           ;Types.c: 237: return ePinErrorState;
 26121                           
 26122                           ; BSR set to: 0
 26123  014C62  0E05               	movlw	5
 26124  014C64  0012               	return	
 26125  014C66                     __end_of_PortProperty_Valid:
 26126                           	opt stack 0
 26127                           tosu	equ	0xFFF
 26128                           tosh	equ	0xFFE
 26129                           tosl	equ	0xFFD
 26130                           pclath	equ	0xFFA
 26131                           tblptru	equ	0xFF8
 26132                           tblptrh	equ	0xFF7
 26133                           tblptrl	equ	0xFF6
 26134                           tablat	equ	0xFF5
 26135                           prodh	equ	0xFF4
 26136                           prodl	equ	0xFF3
 26137                           intcon	equ	0xFF2
 26138                           postinc0	equ	0xFEE
 26139                           wreg	equ	0xFE8
 26140                           indf1	equ	0xFE7
 26141                           postdec1	equ	0xFE5
 26142                           fsr1h	equ	0xFE2
 26143                           fsr1l	equ	0xFE1
 26144                           indf2	equ	0xFDF
 26145                           postinc2	equ	0xFDE
 26146                           postdec2	equ	0xFDD
 26147                           plusw2	equ	0xFDB
 26148                           fsr2h	equ	0xFDA
 26149                           fsr2l	equ	0xFD9
 26150                           status	equ	0xFD8
 26151                           
 26152 ;; *************** function _Word_GetPair *****************
 26153 ;; Defined at:
 26154 ;;		line 156 in file "Library/Types.c"
 26155 ;; Parameters:    Size  Location     Type
 26156 ;;  pInput          2   12[BANK0 ] PTR struct Word
 26157 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 26158 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 26159 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 26160 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26161 ;;  pPair           1   14[BANK0 ] unsigned char 
 26162 ;; Auto vars:     Size  Location     Type
 26163 ;;		None
 26164 ;; Return value:  Size  Location     Type
 26165 ;;                  1    wreg      unsigned char 
 26166 ;; Registers used:
 26167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26168 ;; Tracked objects:
 26169 ;;		On entry : 0/0
 26170 ;;		On exit  : 0/0
 26171 ;;		Unchanged: 0/0
 26172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26173 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26176 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26177 ;;Total ram usage:        3 bytes
 26178 ;; Hardware stack levels used:    1
 26179 ;; Hardware stack levels required when called:    9
 26180 ;; This function calls:
 26181 ;;		_Byte_GetPair
 26182 ;; This function is called by:
 26183 ;;		_Port_Init
 26184 ;;		_Port_SetPin
 26185 ;;		_Port_Set
 26186 ;;		_PortProperty_Valid
 26187 ;;		_Port_SetPair
 26188 ;;		_Port_SetQuad
 26189 ;; This function uses a non-reentrant model
 26190 ;;
 26191                           
 26192                           	psect	text132
 26193  015630                     __ptext132:
 26194                           	opt stack 0
 26195  015630                     _Word_GetPair:
 26196                           	opt stack 15
 26197                           
 26198                           ;Types.c: 158: if (pPair >= 4)
 26199                           
 26200                           ; BSR set to: 0
 26201                           ;incstack = 0
 26202  015630  0E03               	movlw	3
 26203  015632  0100               	movlb	0	; () banked
 26204  015634  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 26205  015636  D00C               	goto	l781
 26206                           
 26207                           ; BSR set to: 0
 26208                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 26209  015638  0E01               	movlw	1
 26210  01563A  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 26211  01563C  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 26212  01563E  0E00               	movlw	0
 26213  015640  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 26214  015642  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 26215  015644  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 26216  015646  0FFC               	addlw	252
 26217  015648  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 26218  01564A  ECB6  F0AC         	call	_Byte_GetPair	;wreg free
 26219  01564E  0012               	return	
 26220  015650                     l781:
 26221                           
 26222                           ;Types.c: 160: else
 26223                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 26224  015650  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 26225  015654  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 26226  015658  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 26227  01565C  ECB6  F0AC         	call	_Byte_GetPair	;wreg free
 26228  015660  0012               	return	
 26229  015662                     __end_of_Word_GetPair:
 26230                           	opt stack 0
 26231                           tosu	equ	0xFFF
 26232                           tosh	equ	0xFFE
 26233                           tosl	equ	0xFFD
 26234                           pclath	equ	0xFFA
 26235                           tblptru	equ	0xFF8
 26236                           tblptrh	equ	0xFF7
 26237                           tblptrl	equ	0xFF6
 26238                           tablat	equ	0xFF5
 26239                           prodh	equ	0xFF4
 26240                           prodl	equ	0xFF3
 26241                           intcon	equ	0xFF2
 26242                           postinc0	equ	0xFEE
 26243                           wreg	equ	0xFE8
 26244                           indf1	equ	0xFE7
 26245                           postdec1	equ	0xFE5
 26246                           fsr1h	equ	0xFE2
 26247                           fsr1l	equ	0xFE1
 26248                           indf2	equ	0xFDF
 26249                           postinc2	equ	0xFDE
 26250                           postdec2	equ	0xFDD
 26251                           plusw2	equ	0xFDB
 26252                           fsr2h	equ	0xFDA
 26253                           fsr2l	equ	0xFD9
 26254                           status	equ	0xFD8
 26255                           
 26256 ;; *************** function _Byte_GetPair *****************
 26257 ;; Defined at:
 26258 ;;		line 87 in file "Library/Types.c"
 26259 ;; Parameters:    Size  Location     Type
 26260 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 26261 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26262 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26263 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26264 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26265 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26266 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26267 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26268 ;;		 -> NULL(0), 
 26269 ;;  pPair           1   11[BANK0 ] unsigned char 
 26270 ;; Auto vars:     Size  Location     Type
 26271 ;;		None
 26272 ;; Return value:  Size  Location     Type
 26273 ;;                  1    wreg      unsigned char 
 26274 ;; Registers used:
 26275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26276 ;; Tracked objects:
 26277 ;;		On entry : 0/0
 26278 ;;		On exit  : 0/0
 26279 ;;		Unchanged: 0/0
 26280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26281 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26284 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26285 ;;Total ram usage:        3 bytes
 26286 ;; Hardware stack levels used:    1
 26287 ;; Hardware stack levels required when called:    8
 26288 ;; This function calls:
 26289 ;;		_Byte_GetZone
 26290 ;; This function is called by:
 26291 ;;		_Word_GetPair
 26292 ;; This function uses a non-reentrant model
 26293 ;;
 26294                           
 26295                           	psect	text133
 26296  01596C                     __ptext133:
 26297                           	opt stack 0
 26298  01596C                     _Byte_GetPair:
 26299                           	opt stack 15
 26300                           
 26301                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 26302                           
 26303                           ;incstack = 0
 26304  01596C  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 26305  015970  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 26306  015974  0E04               	movlw	4
 26307  015976  0100               	movlb	0	; () banked
 26308  015978  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 26309  01597A  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 26310  01597E  0E02               	movlw	2
 26311  015980  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 26312  015982  ECD1  F0A3         	call	_Byte_GetZone	;wreg free
 26313  015986  0012               	return	
 26314  015988                     __end_of_Byte_GetPair:
 26315                           	opt stack 0
 26316                           tosu	equ	0xFFF
 26317                           tosh	equ	0xFFE
 26318                           tosl	equ	0xFFD
 26319                           pclath	equ	0xFFA
 26320                           tblptru	equ	0xFF8
 26321                           tblptrh	equ	0xFF7
 26322                           tblptrl	equ	0xFF6
 26323                           tablat	equ	0xFF5
 26324                           prodh	equ	0xFF4
 26325                           prodl	equ	0xFF3
 26326                           intcon	equ	0xFF2
 26327                           postinc0	equ	0xFEE
 26328                           wreg	equ	0xFE8
 26329                           indf1	equ	0xFE7
 26330                           postdec1	equ	0xFE5
 26331                           fsr1h	equ	0xFE2
 26332                           fsr1l	equ	0xFE1
 26333                           indf2	equ	0xFDF
 26334                           postinc2	equ	0xFDE
 26335                           postdec2	equ	0xFDD
 26336                           plusw2	equ	0xFDB
 26337                           fsr2h	equ	0xFDA
 26338                           fsr2l	equ	0xFD9
 26339                           status	equ	0xFD8
 26340                           
 26341 ;; *************** function _Byte_GetZone *****************
 26342 ;; Defined at:
 26343 ;;		line 64 in file "Library/Types.c"
 26344 ;; Parameters:    Size  Location     Type
 26345 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26346 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26347 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26348 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26349 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26350 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26351 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26352 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26353 ;;		 -> NULL(0), 
 26354 ;;  pMax            1    2[BANK0 ] unsigned char 
 26355 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26356 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26357 ;; Auto vars:     Size  Location     Type
 26358 ;;  Output          1    8[BANK0 ] unsigned char 
 26359 ;;  Offset          1    7[BANK0 ] unsigned char 
 26360 ;;  MASK            1    6[BANK0 ] unsigned char 
 26361 ;; Return value:  Size  Location     Type
 26362 ;;                  1    wreg      unsigned char 
 26363 ;; Registers used:
 26364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26365 ;; Tracked objects:
 26366 ;;		On entry : 0/0
 26367 ;;		On exit  : 0/0
 26368 ;;		Unchanged: 0/0
 26369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26370 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26371 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26373 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26374 ;;Total ram usage:        9 bytes
 26375 ;; Hardware stack levels used:    1
 26376 ;; Hardware stack levels required when called:    7
 26377 ;; This function calls:
 26378 ;;		Nothing
 26379 ;; This function is called by:
 26380 ;;		_Byte_GetPair
 26381 ;;		_Byte_GetTriple
 26382 ;;		_Byte_GetQuad
 26383 ;; This function uses a non-reentrant model
 26384 ;;
 26385                           
 26386                           	psect	text134
 26387  0147A2                     __ptext134:
 26388                           	opt stack 0
 26389  0147A2                     _Byte_GetZone:
 26390                           	opt stack 15
 26391                           
 26392                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 26393                           
 26394                           ;incstack = 0
 26395  0147A2  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 26396  0147A6  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 26397  0147AA  0E00               	movlw	low (__mediumconst shr (0+16))
 26398  0147AC  6EF8               	movwf	tblptru,c
 26399  0147AE  0E0F               	movlw	(high __ramtop+-1)
 26400  0147B0  64F7               	cpfsgt	tblptrh,c
 26401  0147B2  D003               	bra	u10137
 26402  0147B4  0008               	tblrd		*
 26403  0147B6  50F5               	movf	tablat,w,c
 26404  0147B8  D005               	bra	u10130
 26405  0147BA                     u10137:
 26406  0147BA  CFF6 FFE9          	movff	tblptrl,fsr0l
 26407  0147BE  CFF7 FFEA          	movff	tblptrh,fsr0h
 26408  0147C2  50EF               	movf	indf0,w,c
 26409  0147C4                     u10130:
 26410  0147C4  0100               	movlb	0	; () banked
 26411  0147C6  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 26412                           
 26413                           ; BSR set to: 0
 26414                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 26415  0147C8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26416  0147CA  0D01               	mullw	1
 26417  0147CC  0EF5               	movlw	low _MASKS
 26418  0147CE  24F3               	addwf	prodl,w,c
 26419  0147D0  6EF6               	movwf	tblptrl,c
 26420  0147D2  0EFB               	movlw	high _MASKS
 26421  0147D4  20F4               	addwfc	prodh,w,c
 26422  0147D6  6EF7               	movwf	tblptrh,c
 26423  0147D8                     	if	1	;There are 3 active tblptr bytes
 26424  0147D8  6AF8               	clrf	tblptru,c
 26425  0147DA  0E00               	movlw	low (__mediumconst shr (0+16))
 26426  0147DC  22F8               	addwfc	tblptru,f,c
 26427  0147DE                     	endif
 26428  0147DE  0008               	tblrd		*
 26429  0147E0  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 26430                           
 26431                           ; BSR set to: 0
 26432                           ;Types.c: 68: UINT8 Offset = 0;
 26433  0147E4  0E00               	movlw	0
 26434  0147E6  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 26435                           
 26436                           ;Types.c: 70: while (pChunk >= pMax)
 26437  0147E8  D003               	goto	l732
 26438  0147EA                     
 26439                           ; BSR set to: 0
 26440                           ;Types.c: 71: {
 26441                           ;Types.c: 72: pChunk -= pMax;
 26442                           
 26443                           ; BSR set to: 0
 26444  0147EA  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26445  0147EC  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 26446                           
 26447                           ; BSR set to: 0
 26448                           ;Types.c: 73: Offset += 1;
 26449  0147EE  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 26450  0147F0                     l732:
 26451                           
 26452                           ; BSR set to: 0
 26453                           
 26454                           ; BSR set to: 0
 26455  0147F0  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26456  0147F2  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 26457  0147F4  B0D8               	btfsc	status,0,c
 26458  0147F6  D7F9               	goto	l733
 26459                           
 26460                           ; BSR set to: 0
 26461                           ;Types.c: 74: }
 26462                           ;Types.c: 75: pChunk *= pChunkSize;
 26463                           
 26464                           ; BSR set to: 0
 26465  0147F8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26466  0147FA  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 26467  0147FC  50F3               	movf	prodl,w,c
 26468  0147FE  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 26469                           
 26470                           ; BSR set to: 0
 26471                           ;Types.c: 76: pChunk += Offset;
 26472  014800  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 26473  014802  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 26474                           
 26475                           ; BSR set to: 0
 26476                           ;Types.c: 78: Output >>= pChunk;
 26477  014804  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 26478  014806  6F65               	movwf	??_Byte_GetZone& (0+255),b
 26479  014808  D002               	goto	u10150
 26480  01480A                     u10155:
 26481  01480A  90D8               	bcf	status,0,c
 26482  01480C  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 26483  01480E                     u10150:
 26484  01480E  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 26485  014810  D7FC               	goto	u10155
 26486                           
 26487                           ;Types.c: 79: Output &= MASK;
 26488  014812  0100               	movlb	0	; () banked
 26489  014814  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 26490  014816  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 26491                           
 26492                           ; BSR set to: 0
 26493                           ;Types.c: 80: return Output;
 26494  014818  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 26495  01481A  0012               	return	
 26496  01481C                     __end_of_Byte_GetZone:
 26497                           	opt stack 0
 26498                           tosu	equ	0xFFF
 26499                           tosh	equ	0xFFE
 26500                           tosl	equ	0xFFD
 26501                           pclath	equ	0xFFA
 26502                           tblptru	equ	0xFF8
 26503                           tblptrh	equ	0xFF7
 26504                           tblptrl	equ	0xFF6
 26505                           tablat	equ	0xFF5
 26506                           prodh	equ	0xFF4
 26507                           prodl	equ	0xFF3
 26508                           intcon	equ	0xFF2
 26509                           indf0	equ	0xFEF
 26510                           postinc0	equ	0xFEE
 26511                           fsr0h	equ	0xFEA
 26512                           fsr0l	equ	0xFE9
 26513                           wreg	equ	0xFE8
 26514                           indf1	equ	0xFE7
 26515                           postdec1	equ	0xFE5
 26516                           fsr1h	equ	0xFE2
 26517                           fsr1l	equ	0xFE1
 26518                           indf2	equ	0xFDF
 26519                           postinc2	equ	0xFDE
 26520                           postdec2	equ	0xFDD
 26521                           plusw2	equ	0xFDB
 26522                           fsr2h	equ	0xFDA
 26523                           fsr2l	equ	0xFD9
 26524                           status	equ	0xFD8
 26525                           
 26526 ;; *************** function _Byte_SetQuad *****************
 26527 ;; Defined at:
 26528 ;;		line 101 in file "Library/Types.c"
 26529 ;; Parameters:    Size  Location     Type
 26530 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 26531 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 26532 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26533 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26534 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26535 ;;		 -> NULL(0), 
 26536 ;;  pQuad           1   13[BANK0 ] unsigned char 
 26537 ;;  pValue          1   14[BANK0 ] unsigned char 
 26538 ;; Auto vars:     Size  Location     Type
 26539 ;;		None
 26540 ;; Return value:  Size  Location     Type
 26541 ;;                  1    wreg      void 
 26542 ;; Registers used:
 26543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26544 ;; Tracked objects:
 26545 ;;		On entry : 0/0
 26546 ;;		On exit  : 0/0
 26547 ;;		Unchanged: 0/0
 26548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26549 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26552 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26553 ;;Total ram usage:        4 bytes
 26554 ;; Hardware stack levels used:    1
 26555 ;; Hardware stack levels required when called:    8
 26556 ;; This function calls:
 26557 ;;		_Byte_SetZone
 26558 ;; This function is called by:
 26559 ;;		_Port_SetQuadType
 26560 ;;		_SPI_Init
 26561 ;;		_SPI_MinSpeed
 26562 ;;		_SPI_MaxSpeed
 26563 ;;		_Port_SetQuad
 26564 ;;		_Word_SetQuad
 26565 ;;		_I2C_Init
 26566 ;; This function uses a non-reentrant model
 26567 ;;
 26568                           
 26569                           	psect	text135
 26570  0158F4                     __ptext135:
 26571                           	opt stack 0
 26572  0158F4                     _Byte_SetQuad:
 26573                           	opt stack 20
 26574                           
 26575                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 26576                           
 26577                           ; BSR set to: 0
 26578                           ;incstack = 0
 26579  0158F4  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 26580  0158F8  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 26581  0158FC  0E02               	movlw	2
 26582  0158FE  0100               	movlb	0	; () banked
 26583  015900  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 26584  015902  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 26585  015906  0E04               	movlw	4
 26586  015908  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 26587  01590A  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 26588  01590E  EC7F  F0A1         	call	_Byte_SetZone	;wreg free
 26589  015912  0012               	return		;funcret
 26590  015914                     __end_of_Byte_SetQuad:
 26591                           	opt stack 0
 26592                           tosu	equ	0xFFF
 26593                           tosh	equ	0xFFE
 26594                           tosl	equ	0xFFD
 26595                           pclath	equ	0xFFA
 26596                           tblptru	equ	0xFF8
 26597                           tblptrh	equ	0xFF7
 26598                           tblptrl	equ	0xFF6
 26599                           tablat	equ	0xFF5
 26600                           prodh	equ	0xFF4
 26601                           prodl	equ	0xFF3
 26602                           intcon	equ	0xFF2
 26603                           indf0	equ	0xFEF
 26604                           postinc0	equ	0xFEE
 26605                           fsr0h	equ	0xFEA
 26606                           fsr0l	equ	0xFE9
 26607                           wreg	equ	0xFE8
 26608                           indf1	equ	0xFE7
 26609                           postdec1	equ	0xFE5
 26610                           fsr1h	equ	0xFE2
 26611                           fsr1l	equ	0xFE1
 26612                           indf2	equ	0xFDF
 26613                           postinc2	equ	0xFDE
 26614                           postdec2	equ	0xFDD
 26615                           plusw2	equ	0xFDB
 26616                           fsr2h	equ	0xFDA
 26617                           fsr2l	equ	0xFD9
 26618                           status	equ	0xFD8
 26619                           
 26620 ;; *************** function _Byte_SetZone *****************
 26621 ;; Defined at:
 26622 ;;		line 47 in file "Library/Types.c"
 26623 ;; Parameters:    Size  Location     Type
 26624 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26625 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 26626 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 26627 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 26628 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 26629 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26630 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26631 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26632 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26633 ;;  pMax            1    2[BANK0 ] unsigned char 
 26634 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26635 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26636 ;;  pValue          1    5[BANK0 ] unsigned char 
 26637 ;; Auto vars:     Size  Location     Type
 26638 ;;  MASK            1   10[BANK0 ] unsigned char 
 26639 ;;  Offset          1    9[BANK0 ] unsigned char 
 26640 ;; Return value:  Size  Location     Type
 26641 ;;                  1    wreg      void 
 26642 ;; Registers used:
 26643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26644 ;; Tracked objects:
 26645 ;;		On entry : 0/0
 26646 ;;		On exit  : 0/0
 26647 ;;		Unchanged: 0/0
 26648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26649 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26650 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26651 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26652 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26653 ;;Total ram usage:       11 bytes
 26654 ;; Hardware stack levels used:    1
 26655 ;; Hardware stack levels required when called:    7
 26656 ;; This function calls:
 26657 ;;		Nothing
 26658 ;; This function is called by:
 26659 ;;		_Byte_SetPair
 26660 ;;		_Byte_SetQuad
 26661 ;;		_Byte_SetTriple
 26662 ;; This function uses a non-reentrant model
 26663 ;;
 26664                           
 26665                           	psect	text136
 26666  0142FE                     __ptext136:
 26667                           	opt stack 0
 26668  0142FE                     _Byte_SetZone:
 26669                           	opt stack 19
 26670                           
 26671                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 26672                           
 26673                           ;incstack = 0
 26674  0142FE  0100               	movlb	0	; () banked
 26675  014300  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26676  014302  0D01               	mullw	1
 26677  014304  0EF5               	movlw	low _MASKS
 26678  014306  24F3               	addwf	prodl,w,c
 26679  014308  6EF6               	movwf	tblptrl,c
 26680  01430A  0EFB               	movlw	high _MASKS
 26681  01430C  20F4               	addwfc	prodh,w,c
 26682  01430E  6EF7               	movwf	tblptrh,c
 26683  014310                     	if	1	;There are 3 active tblptr bytes
 26684  014310  6AF8               	clrf	tblptru,c
 26685  014312  0E00               	movlw	low (__mediumconst shr (0+16))
 26686  014314  22F8               	addwfc	tblptru,f,c
 26687  014316                     	endif
 26688  014316  0008               	tblrd		*
 26689  014318  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 26690                           
 26691                           ; BSR set to: 0
 26692                           ;Types.c: 50: UINT8 Offset = 0;
 26693  01431C  0E00               	movlw	0
 26694  01431E  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 26695                           
 26696                           ;Types.c: 52: while (pChunk >= pMax)
 26697  014320  D003               	goto	l726
 26698  014322                     
 26699                           ; BSR set to: 0
 26700                           ;Types.c: 53: {
 26701                           ;Types.c: 54: pChunk -= pMax;
 26702                           
 26703                           ; BSR set to: 0
 26704  014322  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26705  014324  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 26706                           
 26707                           ; BSR set to: 0
 26708                           ;Types.c: 55: Offset += 1;
 26709  014326  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 26710  014328                     l726:
 26711                           
 26712                           ; BSR set to: 0
 26713                           
 26714                           ; BSR set to: 0
 26715  014328  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26716  01432A  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 26717  01432C  B0D8               	btfsc	status,0,c
 26718  01432E  D7F9               	goto	l727
 26719                           
 26720                           ; BSR set to: 0
 26721                           ;Types.c: 56: }
 26722                           ;Types.c: 57: pChunk *= pChunkSize;
 26723                           
 26724                           ; BSR set to: 0
 26725  014330  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26726  014332  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 26727  014334  50F3               	movf	prodl,w,c
 26728  014336  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 26729                           
 26730                           ; BSR set to: 0
 26731                           ;Types.c: 58: pChunk += Offset;
 26732  014338  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 26733  01433A  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 26734                           
 26735                           ; BSR set to: 0
 26736                           ;Types.c: 60: pValue &= MASK;
 26737  01433C  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 26738  01433E  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 26739                           
 26740                           ; BSR set to: 0
 26741                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 26742  014340  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26743  014344  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 26744  014348  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26745  01434A  D002               	goto	u10234
 26746  01434C                     u10235:
 26747  01434C  90D8               	bcf	status,0,c
 26748  01434E  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26749  014350                     u10234:
 26750  014350  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26751  014352  D7FC               	goto	u10235
 26752  014354  0100               	movlb	0	; () banked
 26753  014356  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26754  014358  0AFF               	xorlw	255
 26755  01435A  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 26756  01435C  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26757  014360  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26758  014364  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 26759  014366  16DF               	andwf	indf2,f,c
 26760                           
 26761                           ; BSR set to: 0
 26762                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 26763  014368  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26764  01436C  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 26765  014370  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26766  014372  D002               	goto	u10244
 26767  014374                     u10245:
 26768  014374  90D8               	bcf	status,0,c
 26769  014376  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26770  014378                     u10244:
 26771  014378  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26772  01437A  D7FC               	goto	u10245
 26773  01437C  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26774  014380  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26775  014384  0100               	movlb	0	; () banked
 26776  014386  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26777  014388  12DF               	iorwf	indf2,f,c
 26778                           
 26779                           ; BSR set to: 0
 26780  01438A  0012               	return		;funcret
 26781  01438C                     __end_of_Byte_SetZone:
 26782                           	opt stack 0
 26783                           tosu	equ	0xFFF
 26784                           tosh	equ	0xFFE
 26785                           tosl	equ	0xFFD
 26786                           pclath	equ	0xFFA
 26787                           tblptru	equ	0xFF8
 26788                           tblptrh	equ	0xFF7
 26789                           tblptrl	equ	0xFF6
 26790                           tablat	equ	0xFF5
 26791                           prodh	equ	0xFF4
 26792                           prodl	equ	0xFF3
 26793                           intcon	equ	0xFF2
 26794                           indf0	equ	0xFEF
 26795                           postinc0	equ	0xFEE
 26796                           fsr0h	equ	0xFEA
 26797                           fsr0l	equ	0xFE9
 26798                           wreg	equ	0xFE8
 26799                           indf1	equ	0xFE7
 26800                           postdec1	equ	0xFE5
 26801                           fsr1h	equ	0xFE2
 26802                           fsr1l	equ	0xFE1
 26803                           indf2	equ	0xFDF
 26804                           postinc2	equ	0xFDE
 26805                           postdec2	equ	0xFDD
 26806                           plusw2	equ	0xFDB
 26807                           fsr2h	equ	0xFDA
 26808                           fsr2l	equ	0xFD9
 26809                           status	equ	0xFD8
 26810                           
 26811 ;; *************** function _Console_Init *****************
 26812 ;; Defined at:
 26813 ;;		line 157 in file "Library/Console.c"
 26814 ;; Parameters:    Size  Location     Type
 26815 ;;		None
 26816 ;; Auto vars:     Size  Location     Type
 26817 ;;  y               1    3[BANK0 ] unsigned char 
 26818 ;;  x               1    2[BANK0 ] unsigned char 
 26819 ;; Return value:  Size  Location     Type
 26820 ;;                  1    wreg      void 
 26821 ;; Registers used:
 26822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26823 ;; Tracked objects:
 26824 ;;		On entry : 0/0
 26825 ;;		On exit  : 0/0
 26826 ;;		Unchanged: 0/0
 26827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26829 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26830 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26831 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26832 ;;Total ram usage:        4 bytes
 26833 ;; Hardware stack levels used:    1
 26834 ;; Hardware stack levels required when called:    7
 26835 ;; This function calls:
 26836 ;;		Nothing
 26837 ;; This function is called by:
 26838 ;;		_main
 26839 ;; This function uses a non-reentrant model
 26840 ;;
 26841                           
 26842                           	psect	text137
 26843  014AC4                     __ptext137:
 26844                           	opt stack 0
 26845  014AC4                     _Console_Init:
 26846                           	opt stack 23
 26847                           
 26848                           ;Console.c: 160: lBufferX = 0;
 26849                           
 26850                           ; BSR set to: 0
 26851                           ;incstack = 0
 26852  014AC4  0E00               	movlw	0
 26853  014AC6  6E45               	movwf	_lBufferX,c
 26854                           
 26855                           ;Console.c: 161: lBufferY = 0;
 26856  014AC8  0E00               	movlw	0
 26857  014ACA  0100               	movlb	0	; () banked
 26858  014ACC  6FFF               	movwf	_lBufferY& (0+255),b
 26859                           
 26860                           ;Console.c: 163: UINT8 x, y;
 26861                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26862  014ACE  0E00               	movlw	0
 26863  014AD0  6F62               	movwf	Console_Init@x& (0+255),b
 26864  014AD2                     l15743:
 26865                           
 26866                           ; BSR set to: 0
 26867  014AD2  0E13               	movlw	19
 26868  014AD4  6562               	cpfsgt	Console_Init@x& (0+255),b
 26869  014AD6  D001               	goto	l976
 26870  014AD8  0012               	return	
 26871  014ADA                     l976:
 26872                           
 26873                           ; BSR set to: 0
 26874                           ;Console.c: 165: {
 26875                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 26876                           
 26877                           ; BSR set to: 0
 26878  014ADA  0E00               	movlw	0
 26879  014ADC  6F63               	movwf	Console_Init@y& (0+255),b
 26880  014ADE                     l15749:
 26881                           
 26882                           ; BSR set to: 0
 26883  014ADE  0E0E               	movlw	14
 26884  014AE0  6563               	cpfsgt	Console_Init@y& (0+255),b
 26885  014AE2  D001               	goto	l978
 26886  014AE4  D022               	goto	u13260
 26887  014AE6                     l978:
 26888                           
 26889                           ; BSR set to: 0
 26890                           ;Console.c: 167: {
 26891                           ;Console.c: 168: lBuffer[y][x] = '\0';
 26892                           
 26893                           ; BSR set to: 0
 26894  014AE6  5163               	movf	Console_Init@y& (0+255),w,b
 26895  014AE8  0D14               	mullw	20
 26896  014AEA  0E46               	movlw	low _lBuffer
 26897  014AEC  6F60               	movwf	??_Console_Init& (0+255),b
 26898  014AEE  0E03               	movlw	high _lBuffer
 26899  014AF0  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 26900  014AF2  50F3               	movf	prodl,w,c
 26901  014AF4  2760               	addwf	??_Console_Init& (0+255),f,b
 26902  014AF6  50F4               	movf	prodh,w,c
 26903  014AF8  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 26904  014AFA  5162               	movf	Console_Init@x& (0+255),w,b
 26905  014AFC  0D01               	mullw	1
 26906  014AFE  50F3               	movf	prodl,w,c
 26907  014B00  2560               	addwf	??_Console_Init& (0+255),w,b
 26908  014B02  6ED9               	movwf	fsr2l,c
 26909  014B04  50F4               	movf	prodh,w,c
 26910  014B06  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 26911  014B08  6EDA               	movwf	fsr2h,c
 26912  014B0A  0E00               	movlw	0
 26913  014B0C  6EDF               	movwf	indf2,c
 26914                           
 26915                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 26916  014B0E  5163               	movf	Console_Init@y& (0+255),w,b
 26917  014B10  0D02               	mullw	2
 26918  014B12  0E50               	movlw	low _lCBuffer
 26919  014B14  24F3               	addwf	prodl,w,c
 26920  014B16  6ED9               	movwf	fsr2l,c
 26921  014B18  0E02               	movlw	high _lCBuffer
 26922  014B1A  20F4               	addwfc	prodh,w,c
 26923  014B1C  6EDA               	movwf	fsr2h,c
 26924  014B1E  0EFF               	movlw	255
 26925  014B20  6EDE               	movwf	postinc2,c
 26926  014B22  0EFF               	movlw	255
 26927  014B24  6EDD               	movwf	postdec2,c
 26928                           
 26929                           ; BSR set to: 0
 26930  014B26  2B63               	incf	Console_Init@y& (0+255),f,b
 26931  014B28  D7DA               	goto	l15749
 26932  014B2A                     u13260:
 26933                           
 26934                           ; BSR set to: 0
 26935                           
 26936                           ; BSR set to: 0
 26937  014B2A  2B62               	incf	Console_Init@x& (0+255),f,b
 26938  014B2C  D7D2               	goto	l15743
 26939  014B2E                     __end_of_Console_Init:
 26940                           	opt stack 0
 26941                           tosu	equ	0xFFF
 26942                           tosh	equ	0xFFE
 26943                           tosl	equ	0xFFD
 26944                           pclath	equ	0xFFA
 26945                           tblptru	equ	0xFF8
 26946                           tblptrh	equ	0xFF7
 26947                           tblptrl	equ	0xFF6
 26948                           tablat	equ	0xFF5
 26949                           prodh	equ	0xFF4
 26950                           prodl	equ	0xFF3
 26951                           intcon	equ	0xFF2
 26952                           indf0	equ	0xFEF
 26953                           postinc0	equ	0xFEE
 26954                           fsr0h	equ	0xFEA
 26955                           fsr0l	equ	0xFE9
 26956                           wreg	equ	0xFE8
 26957                           indf1	equ	0xFE7
 26958                           postdec1	equ	0xFE5
 26959                           fsr1h	equ	0xFE2
 26960                           fsr1l	equ	0xFE1
 26961                           indf2	equ	0xFDF
 26962                           postinc2	equ	0xFDE
 26963                           postdec2	equ	0xFDD
 26964                           plusw2	equ	0xFDB
 26965                           fsr2h	equ	0xFDA
 26966                           fsr2l	equ	0xFD9
 26967                           status	equ	0xFD8
 26968                           
 26969 ;; *************** function _ISR_Function *****************
 26970 ;; Defined at:
 26971 ;;		line 38 in file "Library/ISR.c"
 26972 ;; Parameters:    Size  Location     Type
 26973 ;;		None
 26974 ;; Auto vars:     Size  Location     Type
 26975 ;;		None
 26976 ;; Return value:  Size  Location     Type
 26977 ;;                  1    wreg      void 
 26978 ;; Registers used:
 26979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26980 ;; Tracked objects:
 26981 ;;		On entry : 0/0
 26982 ;;		On exit  : 0/0
 26983 ;;		Unchanged: 0/0
 26984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26987 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26988 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26989 ;;Total ram usage:       18 bytes
 26990 ;; Hardware stack levels used:    1
 26991 ;; Hardware stack levels required when called:    6
 26992 ;; This function calls:
 26993 ;;		_Timer0_ISR
 26994 ;; This function is called by:
 26995 ;;		Interrupt level 2
 26996 ;; This function uses a non-reentrant model
 26997 ;;
 26998                           
 26999                           	psect	intcode
 27000  001408                     __pintcode:
 27001                           	opt stack 0
 27002  001408                     _ISR_Function:
 27003                           	opt stack 14
 27004                           
 27005                           ; BSR set to: 0
 27006                           ;incstack = 0
 27007  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27008  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 27009  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 27010  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 27011  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 27012  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 27013  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 27014  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 27015  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 27016  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 27017  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 27018  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 27019  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 27020  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 27021  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 27022  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 27023  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 27024  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 27025  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 27026                           
 27027                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 27028  001452  92F2               	bcf	intcon,1,c	;volatile
 27029                           
 27030                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 27031  001454  B4F2               	btfsc	intcon,2,c	;volatile
 27032  001456  AAF2               	btfss	intcon,5,c	;volatile
 27033  001458  D002               	goto	i2l1590
 27034                           
 27035                           ;ISR.c: 68: Timer0_ISR();
 27036  00145A  ECFE  F0AB         	call	_Timer0_ISR	;wreg free
 27037  00145E                     i2l1590:
 27038  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 27039  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 27040  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 27041  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 27042  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 27043  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 27044  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 27045  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 27046  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 27047  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 27048  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 27049  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 27050  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 27051  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 27052  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 27053  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 27054  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 27055  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 27056  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27057  0014A8  0011               	retfie		f
 27058  0014AA                     __end_of_ISR_Function:
 27059                           	opt stack 0
 27060                           tosu	equ	0xFFF
 27061                           tosh	equ	0xFFE
 27062                           tosl	equ	0xFFD
 27063                           pclatu	equ	0xFFB
 27064                           pclath	equ	0xFFA
 27065                           tblptru	equ	0xFF8
 27066                           tblptrh	equ	0xFF7
 27067                           tblptrl	equ	0xFF6
 27068                           tablat	equ	0xFF5
 27069                           prodh	equ	0xFF4
 27070                           prodl	equ	0xFF3
 27071                           intcon	equ	0xFF2
 27072                           indf0	equ	0xFEF
 27073                           postinc0	equ	0xFEE
 27074                           fsr0h	equ	0xFEA
 27075                           fsr0l	equ	0xFE9
 27076                           wreg	equ	0xFE8
 27077                           indf1	equ	0xFE7
 27078                           postdec1	equ	0xFE5
 27079                           fsr1h	equ	0xFE2
 27080                           fsr1l	equ	0xFE1
 27081                           indf2	equ	0xFDF
 27082                           postinc2	equ	0xFDE
 27083                           postdec2	equ	0xFDD
 27084                           plusw2	equ	0xFDB
 27085                           fsr2h	equ	0xFDA
 27086                           fsr2l	equ	0xFD9
 27087                           status	equ	0xFD8
 27088                           
 27089 ;; *************** function _Timer0_ISR *****************
 27090 ;; Defined at:
 27091 ;;		line 94 in file "Library/Timer0.c"
 27092 ;; Parameters:    Size  Location     Type
 27093 ;;		None
 27094 ;; Auto vars:     Size  Location     Type
 27095 ;;		None
 27096 ;; Return value:  Size  Location     Type
 27097 ;;                  1    wreg      void 
 27098 ;; Registers used:
 27099 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27100 ;; Tracked objects:
 27101 ;;		On entry : 0/0
 27102 ;;		On exit  : 0/0
 27103 ;;		Unchanged: 0/0
 27104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27109 ;;Total ram usage:        0 bytes
 27110 ;; Hardware stack levels used:    1
 27111 ;; Hardware stack levels required when called:    5
 27112 ;; This function calls:
 27113 ;;		Absolute function
 27114 ;;		i2_Motor_Step
 27115 ;;		i2_Timer0_Stop
 27116 ;; This function is called by:
 27117 ;;		_ISR_Function
 27118 ;; This function uses a non-reentrant model
 27119 ;;
 27120                           
 27121                           	psect	text139
 27122  0157FC                     __ptext139:
 27123                           	opt stack 0
 27124  0157FC                     _Timer0_ISR:
 27125                           	opt stack 14
 27126                           
 27127                           ;Timer0.c: 96: Timer0_Stop();
 27128                           
 27129                           ;incstack = 0
 27130  0157FC  ECCE  F0AD         	call	i2_Timer0_Stop	;wreg free
 27131                           
 27132                           ;Timer0.c: 99: if (gISR != 0)
 27133  015800  0101               	movlb	1	; () banked
 27134  015802  5108               	movf	_gISR& (0+255),w,b
 27135  015804  1109               	iorwf	(_gISR+1)& (0+255),w,b
 27136  015806  110A               	iorwf	(_gISR+2)& (0+255),w,b
 27137  015808  B4D8               	btfsc	status,2,c
 27138  01580A  0012               	return	
 27139                           
 27140                           ; BSR set to: 1
 27141                           ;Timer0.c: 100: gISR();
 27142  01580C  D801               	call	i2u1486_48
 27143  01580E  0012               	return	
 27144  015810                     i2u1486_48:
 27145  015810  0005               	push	
 27146  015812  6EFA               	movwf	pclath,c
 27147  015814  5108               	movf	_gISR& (0+255),w,b
 27148  015816  6EFD               	movwf	tosl,c
 27149  015818  5109               	movf	(_gISR+1)& (0+255),w,b
 27150  01581A  6EFE               	movwf	tosh,c
 27151  01581C  510A               	movf	(_gISR+2)& (0+255),w,b
 27152  01581E  6EFF               	movwf	tosu,c
 27153  015820  50FA               	movf	pclath,w,c
 27154  015822  0012               	return		;indir
 27155  015824                     __end_of_Timer0_ISR:
 27156                           	opt stack 0
 27157                           tosu	equ	0xFFF
 27158                           tosh	equ	0xFFE
 27159                           tosl	equ	0xFFD
 27160                           pclatu	equ	0xFFB
 27161                           pclath	equ	0xFFA
 27162                           tblptru	equ	0xFF8
 27163                           tblptrh	equ	0xFF7
 27164                           tblptrl	equ	0xFF6
 27165                           tablat	equ	0xFF5
 27166                           prodh	equ	0xFF4
 27167                           prodl	equ	0xFF3
 27168                           intcon	equ	0xFF2
 27169                           indf0	equ	0xFEF
 27170                           postinc0	equ	0xFEE
 27171                           fsr0h	equ	0xFEA
 27172                           fsr0l	equ	0xFE9
 27173                           wreg	equ	0xFE8
 27174                           indf1	equ	0xFE7
 27175                           postdec1	equ	0xFE5
 27176                           fsr1h	equ	0xFE2
 27177                           fsr1l	equ	0xFE1
 27178                           indf2	equ	0xFDF
 27179                           postinc2	equ	0xFDE
 27180                           postdec2	equ	0xFDD
 27181                           plusw2	equ	0xFDB
 27182                           fsr2h	equ	0xFDA
 27183                           fsr2l	equ	0xFD9
 27184                           status	equ	0xFD8
 27185                           
 27186 ;; *************** function i2_Motor_Step *****************
 27187 ;; Defined at:
 27188 ;;		line 75 in file "Library/Motor.c"
 27189 ;; Parameters:    Size  Location     Type
 27190 ;;		None
 27191 ;; Auto vars:     Size  Location     Type
 27192 ;;		None
 27193 ;; Return value:  Size  Location     Type
 27194 ;;                  1    wreg      void 
 27195 ;; Registers used:
 27196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27197 ;; Tracked objects:
 27198 ;;		On entry : 0/0
 27199 ;;		On exit  : 0/0
 27200 ;;		Unchanged: 0/0
 27201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27204 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27205 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27206 ;;Total ram usage:        2 bytes
 27207 ;; Hardware stack levels used:    1
 27208 ;; Hardware stack levels required when called:    4
 27209 ;; This function calls:
 27210 ;;		i2_MXK_Queue
 27211 ;;		i2_MXK_Release
 27212 ;;		i2_MXK_SwitchTo
 27213 ;;		i2_Port_SetPin
 27214 ;;		i2_Timer0_Restart
 27215 ;;		i2_Timer0_Stop
 27216 ;; This function is called by:
 27217 ;; This function uses a non-reentrant model
 27218 ;;
 27219                           
 27220                           	psect	text140
 27221  01393A                     __ptext140:
 27222                           	opt stack 0
 27223  01393A                     i2_Motor_Step:
 27224                           	opt stack 14
 27225                           
 27226                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 27227                           
 27228                           ;incstack = 0
 27229  01393A  0100               	movlb	0	; () banked
 27230  01393C  EE20 F004          	lfsr	2,4
 27231  013940  51FD               	movf	_lMotor& (0+255),w,b
 27232  013942  26D9               	addwf	fsr2l,f,c
 27233  013944  51FE               	movf	(_lMotor+1)& (0+255),w,b
 27234  013946  22DA               	addwfc	fsr2h,f,c
 27235  013948  50DF               	movf	indf2,w,c
 27236  01394A  ECE3  F0AA         	call	i2_MXK_SwitchTo
 27237  01394E  0900               	iorlw	0
 27238  013950  B4D8               	btfsc	status,2,c
 27239  013952  D06A               	goto	i2l1627
 27240                           
 27241                           ;Motor.c: 78: {
 27242                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 27243  013954  C0FD  FFD9         	movff	_lMotor,fsr2l
 27244  013958  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27245  01395C  50DE               	movf	postinc2,w,c
 27246  01395E  10DE               	iorwf	postinc2,w,c
 27247  013960  B4D8               	btfsc	status,2,c
 27248  013962  D05D               	goto	i2l1628
 27249                           
 27250                           ;Motor.c: 80: {
 27251                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 27252  013964  C0FD  FFD9         	movff	_lMotor,fsr2l
 27253  013968  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27254  01396C  0E01               	movlw	1
 27255  01396E  BEDB               	btfsc	plusw2,7,c
 27256  013970  D022               	goto	i2l1629
 27257  013972  0E01               	movlw	1
 27258  013974  50DB               	movf	plusw2,w,c
 27259  013976  E103               	bnz	i2u821_40
 27260  013978  04DE               	decf	postinc2,w,c
 27261  01397A  A0D8               	btfss	status,0,c
 27262  01397C  D01C               	goto	i2l1629
 27263  01397E                     i2u821_40:
 27264                           
 27265                           ;Motor.c: 83: {
 27266                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 27267  01397E  C0FD  FFD9         	movff	_lMotor,fsr2l
 27268  013982  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27269  013986  28DE               	incf	postinc2,w,c
 27270  013988  E104               	bnz	i2u822_40
 27271  01398A  0E7F               	movlw	127
 27272  01398C  18DE               	xorwf	postinc2,w,c
 27273  01398E  B4D8               	btfsc	status,2,c
 27274  013990  D007               	goto	i2l1630
 27275  013992                     i2u822_40:
 27276                           
 27277                           ;Motor.c: 85: lMotor->mDelta --;
 27278  013992  C0FD  FFD9         	movff	_lMotor,fsr2l
 27279  013996  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27280  01399A  06DE               	decf	postinc2,f,c
 27281  01399C  0E00               	movlw	0
 27282  01399E  5ADD               	subwfb	postdec2,f,c
 27283  0139A0                     i2l1630:
 27284                           
 27285                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 27286  0139A0  0E81               	movlw	low _PortE
 27287  0139A2  6E10               	movwf	i2Port_SetPin@pInput,c
 27288  0139A4  0E01               	movlw	high _PortE
 27289  0139A6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27290  0139A8  0E00               	movlw	0
 27291  0139AA  6E12               	movwf	i2Port_SetPin@pPin,c
 27292  0139AC  0E01               	movlw	1
 27293  0139AE  6E13               	movwf	i2Port_SetPin@pValue,c
 27294  0139B0  EC0F  F09F         	call	i2_Port_SetPin	;wreg free
 27295                           
 27296                           ;Motor.c: 88: }
 27297  0139B4  D01B               	goto	i2l1631
 27298  0139B6                     i2l1629:
 27299                           
 27300                           ;Motor.c: 89: else
 27301                           ;Motor.c: 90: {
 27302                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 27303  0139B6  C0FD  FFD9         	movff	_lMotor,fsr2l
 27304  0139BA  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27305  0139BE  04DE               	decf	postinc2,w,c
 27306  0139C0  E104               	bnz	i2u823_40
 27307  0139C2  0E80               	movlw	128
 27308  0139C4  18DE               	xorwf	postinc2,w,c
 27309  0139C6  B4D8               	btfsc	status,2,c
 27310  0139C8  D007               	goto	i2l1632
 27311  0139CA                     i2u823_40:
 27312                           
 27313                           ;Motor.c: 92: lMotor->mDelta ++;
 27314  0139CA  C0FD  FFD9         	movff	_lMotor,fsr2l
 27315  0139CE  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27316  0139D2  2ADE               	incf	postinc2,f,c
 27317  0139D4  0E00               	movlw	0
 27318  0139D6  22DD               	addwfc	postdec2,f,c
 27319  0139D8                     i2l1632:
 27320                           
 27321                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 27322  0139D8  0E81               	movlw	low _PortE
 27323  0139DA  6E10               	movwf	i2Port_SetPin@pInput,c
 27324  0139DC  0E01               	movlw	high _PortE
 27325  0139DE  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27326  0139E0  0E00               	movlw	0
 27327  0139E2  6E12               	movwf	i2Port_SetPin@pPin,c
 27328  0139E4  0E00               	movlw	0
 27329  0139E6  6E13               	movwf	i2Port_SetPin@pValue,c
 27330  0139E8  EC0F  F09F         	call	i2_Port_SetPin	;wreg free
 27331  0139EC                     i2l1631:
 27332                           
 27333                           ;Motor.c: 95: }
 27334                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 27335  0139EC  0E81               	movlw	low _PortE
 27336  0139EE  6E10               	movwf	i2Port_SetPin@pInput,c
 27337  0139F0  0E01               	movlw	high _PortE
 27338  0139F2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27339  0139F4  0E01               	movlw	1
 27340  0139F6  6E12               	movwf	i2Port_SetPin@pPin,c
 27341  0139F8  0E01               	movlw	1
 27342  0139FA  6E13               	movwf	i2Port_SetPin@pValue,c
 27343  0139FC  EC0F  F09F         	call	i2_Port_SetPin	;wreg free
 27344                           
 27345                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 27346  013A00  0E81               	movlw	low _PortE
 27347  013A02  6E10               	movwf	i2Port_SetPin@pInput,c
 27348  013A04  0E01               	movlw	high _PortE
 27349  013A06  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27350  013A08  0E01               	movlw	1
 27351  013A0A  6E12               	movwf	i2Port_SetPin@pPin,c
 27352  013A0C  0E00               	movlw	0
 27353  013A0E  6E13               	movwf	i2Port_SetPin@pValue,c
 27354  013A10  EC0F  F09F         	call	i2_Port_SetPin	;wreg free
 27355                           
 27356                           ;Motor.c: 101: MXK_Release();
 27357  013A14  ECD1  F0AD         	call	i2_MXK_Release	;wreg free
 27358                           
 27359                           ;Motor.c: 102: Timer0_Restart();
 27360  013A18  ECA8  F0AD         	call	i2_Timer0_Restart	;wreg free
 27361                           
 27362                           ;Motor.c: 103: return;
 27363  013A1C  0012               	return	
 27364  013A1E                     i2l1628:
 27365                           
 27366                           ;Motor.c: 104: }
 27367                           ;Motor.c: 105: MXK_Release();
 27368  013A1E  ECD1  F0AD         	call	i2_MXK_Release	;wreg free
 27369                           
 27370                           ;Motor.c: 106: Timer0_Stop();
 27371  013A22  ECCE  F0AD         	call	i2_Timer0_Stop	;wreg free
 27372                           
 27373                           ;Motor.c: 107: return;
 27374  013A26  0012               	return	
 27375  013A28                     i2l1627:
 27376                           
 27377                           ;Motor.c: 108: }
 27378                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 27379  013A28  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 27380  013A2C  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 27381  013A30  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 27382  013A34  EC9B  F0AD         	call	i2_MXK_Queue	;wreg free
 27383  013A38  0012               	return		;funcret
 27384  013A3A                     __end_ofi2_Motor_Step:
 27385                           	opt stack 0
 27386                           tosu	equ	0xFFF
 27387                           tosh	equ	0xFFE
 27388                           tosl	equ	0xFFD
 27389                           pclatu	equ	0xFFB
 27390                           pclath	equ	0xFFA
 27391                           tblptru	equ	0xFF8
 27392                           tblptrh	equ	0xFF7
 27393                           tblptrl	equ	0xFF6
 27394                           tablat	equ	0xFF5
 27395                           prodh	equ	0xFF4
 27396                           prodl	equ	0xFF3
 27397                           intcon	equ	0xFF2
 27398                           indf0	equ	0xFEF
 27399                           postinc0	equ	0xFEE
 27400                           fsr0h	equ	0xFEA
 27401                           fsr0l	equ	0xFE9
 27402                           wreg	equ	0xFE8
 27403                           indf1	equ	0xFE7
 27404                           postdec1	equ	0xFE5
 27405                           fsr1h	equ	0xFE2
 27406                           fsr1l	equ	0xFE1
 27407                           indf2	equ	0xFDF
 27408                           postinc2	equ	0xFDE
 27409                           postdec2	equ	0xFDD
 27410                           plusw2	equ	0xFDB
 27411                           fsr2h	equ	0xFDA
 27412                           fsr2l	equ	0xFD9
 27413                           status	equ	0xFD8
 27414                           
 27415 ;; *************** function i2_Timer0_Stop *****************
 27416 ;; Defined at:
 27417 ;;		line 89 in file "Library/Timer0.c"
 27418 ;; Parameters:    Size  Location     Type
 27419 ;;		None
 27420 ;; Auto vars:     Size  Location     Type
 27421 ;;		None
 27422 ;; Return value:  Size  Location     Type
 27423 ;;                  1    wreg      void 
 27424 ;; Registers used:
 27425 ;;		None
 27426 ;; Tracked objects:
 27427 ;;		On entry : 0/0
 27428 ;;		On exit  : 0/0
 27429 ;;		Unchanged: 0/0
 27430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27435 ;;Total ram usage:        0 bytes
 27436 ;; Hardware stack levels used:    1
 27437 ;; This function calls:
 27438 ;;		Nothing
 27439 ;; This function is called by:
 27440 ;;		_Timer0_ISR
 27441 ;;		i2_Motor_Step
 27442 ;; This function uses a non-reentrant model
 27443 ;;
 27444                           
 27445                           	psect	text141
 27446  015B9C                     __ptext141:
 27447                           	opt stack 0
 27448  015B9C                     i2_Timer0_Stop:
 27449                           	opt stack 18
 27450                           
 27451                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 27452                           
 27453                           ;incstack = 0
 27454  015B9C  9AF2               	bcf	intcon,5,c	;volatile
 27455                           
 27456                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 27457  015B9E  94F2               	bcf	intcon,2,c	;volatile
 27458  015BA0  0012               	return		;funcret
 27459  015BA2                     __end_ofi2_Timer0_Stop:
 27460                           	opt stack 0
 27461                           tosu	equ	0xFFF
 27462                           tosh	equ	0xFFE
 27463                           tosl	equ	0xFFD
 27464                           pclatu	equ	0xFFB
 27465                           pclath	equ	0xFFA
 27466                           tblptru	equ	0xFF8
 27467                           tblptrh	equ	0xFF7
 27468                           tblptrl	equ	0xFF6
 27469                           tablat	equ	0xFF5
 27470                           prodh	equ	0xFF4
 27471                           prodl	equ	0xFF3
 27472                           intcon	equ	0xFF2
 27473                           indf0	equ	0xFEF
 27474                           postinc0	equ	0xFEE
 27475                           fsr0h	equ	0xFEA
 27476                           fsr0l	equ	0xFE9
 27477                           wreg	equ	0xFE8
 27478                           indf1	equ	0xFE7
 27479                           postdec1	equ	0xFE5
 27480                           fsr1h	equ	0xFE2
 27481                           fsr1l	equ	0xFE1
 27482                           indf2	equ	0xFDF
 27483                           postinc2	equ	0xFDE
 27484                           postdec2	equ	0xFDD
 27485                           plusw2	equ	0xFDB
 27486                           fsr2h	equ	0xFDA
 27487                           fsr2l	equ	0xFD9
 27488                           status	equ	0xFD8
 27489                           
 27490 ;; *************** function i2_Timer0_Restart *****************
 27491 ;; Defined at:
 27492 ;;		line 83 in file "Library/Timer0.c"
 27493 ;; Parameters:    Size  Location     Type
 27494 ;;		None
 27495 ;; Auto vars:     Size  Location     Type
 27496 ;;		None
 27497 ;; Return value:  Size  Location     Type
 27498 ;;                  1    wreg      void 
 27499 ;; Registers used:
 27500 ;;		None
 27501 ;; Tracked objects:
 27502 ;;		On entry : 0/0
 27503 ;;		On exit  : 0/0
 27504 ;;		Unchanged: 0/0
 27505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27510 ;;Total ram usage:        0 bytes
 27511 ;; Hardware stack levels used:    1
 27512 ;; This function calls:
 27513 ;;		Nothing
 27514 ;; This function is called by:
 27515 ;;		i2_Motor_Step
 27516 ;; This function uses a non-reentrant model
 27517 ;;
 27518                           
 27519                           	psect	text142
 27520  015B50                     __ptext142:
 27521                           	opt stack 0
 27522  015B50                     i2_Timer0_Restart:
 27523                           	opt stack 17
 27524                           
 27525                           ;Timer0.c: 85: TMR0 = COUNTER;
 27526                           
 27527                           ;incstack = 0
 27528  015B50  C038  FFD6         	movff	_COUNTER,4054	;volatile
 27529  015B54  C039  FFD7         	movff	_COUNTER+1,4055	;volatile
 27530                           
 27531                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 27532  015B58  8AF2               	bsf	intcon,5,c	;volatile
 27533  015B5A  0012               	return		;funcret
 27534  015B5C                     __end_ofi2_Timer0_Restart:
 27535                           	opt stack 0
 27536                           tosu	equ	0xFFF
 27537                           tosh	equ	0xFFE
 27538                           tosl	equ	0xFFD
 27539                           pclatu	equ	0xFFB
 27540                           pclath	equ	0xFFA
 27541                           tblptru	equ	0xFF8
 27542                           tblptrh	equ	0xFF7
 27543                           tblptrl	equ	0xFF6
 27544                           tablat	equ	0xFF5
 27545                           prodh	equ	0xFF4
 27546                           prodl	equ	0xFF3
 27547                           intcon	equ	0xFF2
 27548                           indf0	equ	0xFEF
 27549                           postinc0	equ	0xFEE
 27550                           fsr0h	equ	0xFEA
 27551                           fsr0l	equ	0xFE9
 27552                           wreg	equ	0xFE8
 27553                           indf1	equ	0xFE7
 27554                           postdec1	equ	0xFE5
 27555                           fsr1h	equ	0xFE2
 27556                           fsr1l	equ	0xFE1
 27557                           indf2	equ	0xFDF
 27558                           postinc2	equ	0xFDE
 27559                           postdec2	equ	0xFDD
 27560                           plusw2	equ	0xFDB
 27561                           fsr2h	equ	0xFDA
 27562                           fsr2l	equ	0xFD9
 27563                           status	equ	0xFD8
 27564                           
 27565 ;; *************** function i2_Port_SetPin *****************
 27566 ;; Defined at:
 27567 ;;		line 247 in file "Library/Port.c"
 27568 ;; Parameters:    Size  Location     Type
 27569 ;;  pInput          2   15[COMRAM] const PTR struct Port
 27570 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 27571 ;;  pPin            1   17[COMRAM] enum E6750
 27572 ;;  pValue          1   18[COMRAM] unsigned char 
 27573 ;; Auto vars:     Size  Location     Type
 27574 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 27575 ;; Return value:  Size  Location     Type
 27576 ;;                  1    wreg      void 
 27577 ;; Registers used:
 27578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27579 ;; Tracked objects:
 27580 ;;		On entry : 0/0
 27581 ;;		On exit  : 0/0
 27582 ;;		Unchanged: 0/0
 27583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27584 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27585 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27587 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27588 ;;Total ram usage:        5 bytes
 27589 ;; Hardware stack levels used:    1
 27590 ;; Hardware stack levels required when called:    3
 27591 ;; This function calls:
 27592 ;;		i2_Byte_SetBit
 27593 ;;		i2_Word_GetPair
 27594 ;; This function is called by:
 27595 ;;		i2_Motor_Step
 27596 ;; This function uses a non-reentrant model
 27597 ;;
 27598                           
 27599                           	psect	text143
 27600  013E1E                     __ptext143:
 27601                           	opt stack 0
 27602  013E1E                     i2_Port_SetPin:
 27603                           	opt stack 14
 27604                           
 27605                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 27606                           
 27607                           ;incstack = 0
 27608  013E1E  0E08               	movlw	8
 27609  013E20  2410               	addwf	i2Port_SetPin@pInput,w,c
 27610  013E22  6E0D               	movwf	i2Word_GetPair@pInput,c
 27611  013E24  0E00               	movlw	0
 27612  013E26  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 27613  013E28  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 27614  013E2A  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 27615  013E2E  EC91  F0AB         	call	i2_Word_GetPair	;wreg free
 27616  013E32  6E14               	movwf	i2Port_SetPin@Type,c
 27617                           
 27618                           ;Port.c: 250: switch (Type)
 27619  013E34  D03B               	goto	i2l427
 27620  013E36                     
 27621                           ;Port.c: 256: pValue &= 1;
 27622  013E36  0E01               	movlw	1
 27623  013E38  1613               	andwf	i2Port_SetPin@pValue,f,c
 27624                           
 27625                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 27626  013E3A  EE20 F002          	lfsr	2,2
 27627  013E3E  5010               	movf	i2Port_SetPin@pInput,w,c
 27628  013E40  26D9               	addwf	fsr2l,f,c
 27629  013E42  5011               	movf	i2Port_SetPin@pInput+1,w,c
 27630  013E44  22DA               	addwfc	fsr2h,f,c
 27631  013E46  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 27632  013E4A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 27633  013E4E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 27634  013E52  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 27635  013E56  ECBC  F0A8         	call	i2_Byte_SetBit	;wreg free
 27636                           
 27637                           ;Port.c: 258: break;
 27638  013E5A  0012               	return	
 27639  013E5C                     
 27640                           ;Port.c: 261: pValue &= 1;
 27641  013E5C  0E01               	movlw	1
 27642  013E5E  1613               	andwf	i2Port_SetPin@pValue,f,c
 27643                           
 27644                           ;Port.c: 262: pValue ^= 1;
 27645  013E60  0E01               	movlw	1
 27646  013E62  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 27647                           
 27648                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 27649  013E64  EE20 F002          	lfsr	2,2
 27650  013E68  5010               	movf	i2Port_SetPin@pInput,w,c
 27651  013E6A  26D9               	addwf	fsr2l,f,c
 27652  013E6C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 27653  013E6E  22DA               	addwfc	fsr2h,f,c
 27654  013E70  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 27655  013E74  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 27656  013E78  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 27657  013E7C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 27658  013E80  ECBC  F0A8         	call	i2_Byte_SetBit	;wreg free
 27659                           
 27660                           ;Port.c: 264: break;
 27661  013E84  0012               	return	
 27662  013E86                     
 27663                           ;Port.c: 266: pValue &= 1;
 27664  013E86  0E01               	movlw	1
 27665  013E88  1613               	andwf	i2Port_SetPin@pValue,f,c
 27666                           
 27667                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 27668  013E8A  EE20 F004          	lfsr	2,4
 27669  013E8E  5010               	movf	i2Port_SetPin@pInput,w,c
 27670  013E90  26D9               	addwf	fsr2l,f,c
 27671  013E92  5011               	movf	i2Port_SetPin@pInput+1,w,c
 27672  013E94  22DA               	addwfc	fsr2h,f,c
 27673  013E96  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 27674  013E9A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 27675  013E9E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 27676  013EA2  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 27677  013EA6  ECBC  F0A8         	call	i2_Byte_SetBit	;wreg free
 27678                           
 27679                           ;Port.c: 269: }
 27680                           
 27681                           ;Port.c: 268: break;
 27682  013EAA  0012               	return	
 27683  013EAC                     i2l427:
 27684  013EAC  5014               	movf	i2Port_SetPin@Type,w,c
 27685                           
 27686                           ; Switch size 1, requested type "space"
 27687                           ; Number of cases is 4, Range of values is 0 to 3
 27688                           ; switch strategies available:
 27689                           ; Name         Instructions Cycles
 27690                           ; simple_byte           13     7 (average)
 27691                           ;	Chosen strategy is simple_byte
 27692  013EAE  0A00               	xorlw	0	; case 0
 27693  013EB0  B4D8               	btfsc	status,2,c
 27694  013EB2  0012               	return	
 27695  013EB4  0A01               	xorlw	1	; case 1
 27696  013EB6  B4D8               	btfsc	status,2,c
 27697  013EB8  D7BE               	goto	i2l430
 27698  013EBA  0A03               	xorlw	3	; case 2
 27699  013EBC  B4D8               	btfsc	status,2,c
 27700  013EBE  D7CE               	goto	i2l432
 27701  013EC0  0A01               	xorlw	1	; case 3
 27702  013EC2  A4D8               	btfss	status,2,c
 27703  013EC4  0012               	return	
 27704  013EC6  D7DF               	goto	i2l433
 27705  013EC8                     __end_ofi2_Port_SetPin:
 27706                           	opt stack 0
 27707                           tosu	equ	0xFFF
 27708                           tosh	equ	0xFFE
 27709                           tosl	equ	0xFFD
 27710                           pclatu	equ	0xFFB
 27711                           pclath	equ	0xFFA
 27712                           tblptru	equ	0xFF8
 27713                           tblptrh	equ	0xFF7
 27714                           tblptrl	equ	0xFF6
 27715                           tablat	equ	0xFF5
 27716                           prodh	equ	0xFF4
 27717                           prodl	equ	0xFF3
 27718                           intcon	equ	0xFF2
 27719                           indf0	equ	0xFEF
 27720                           postinc0	equ	0xFEE
 27721                           fsr0h	equ	0xFEA
 27722                           fsr0l	equ	0xFE9
 27723                           wreg	equ	0xFE8
 27724                           indf1	equ	0xFE7
 27725                           postdec1	equ	0xFE5
 27726                           fsr1h	equ	0xFE2
 27727                           fsr1l	equ	0xFE1
 27728                           indf2	equ	0xFDF
 27729                           postinc2	equ	0xFDE
 27730                           postdec2	equ	0xFDD
 27731                           plusw2	equ	0xFDB
 27732                           fsr2h	equ	0xFDA
 27733                           fsr2l	equ	0xFD9
 27734                           status	equ	0xFD8
 27735                           
 27736 ;; *************** function i2_Word_GetPair *****************
 27737 ;; Defined at:
 27738 ;;		line 156 in file "Library/Types.c"
 27739 ;; Parameters:    Size  Location     Type
 27740 ;;  pInput          2   12[COMRAM] PTR struct Word
 27741 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 27742 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 27743 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 27744 ;;		 -> PortC(10), PortF(10), NULL(0), 
 27745 ;;  pPair           1   14[COMRAM] unsigned char 
 27746 ;; Auto vars:     Size  Location     Type
 27747 ;;		None
 27748 ;; Return value:  Size  Location     Type
 27749 ;;                  1    wreg      unsigned char 
 27750 ;; Registers used:
 27751 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27752 ;; Tracked objects:
 27753 ;;		On entry : 0/0
 27754 ;;		On exit  : 0/0
 27755 ;;		Unchanged: 0/0
 27756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27757 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27760 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27761 ;;Total ram usage:        3 bytes
 27762 ;; Hardware stack levels used:    1
 27763 ;; Hardware stack levels required when called:    2
 27764 ;; This function calls:
 27765 ;;		i2_Byte_GetPair
 27766 ;; This function is called by:
 27767 ;;		i2_Port_SetPin
 27768 ;; This function uses a non-reentrant model
 27769 ;;
 27770                           
 27771                           	psect	text144
 27772  015722                     __ptext144:
 27773                           	opt stack 0
 27774  015722                     i2_Word_GetPair:
 27775                           	opt stack 14
 27776                           
 27777                           ;Types.c: 158: if (pPair >= 4)
 27778                           
 27779                           ;incstack = 0
 27780  015722  0E03               	movlw	3
 27781  015724  640F               	cpfsgt	i2Word_GetPair@pPair,c
 27782  015726  D00C               	goto	i2l781
 27783                           
 27784                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 27785  015728  0E01               	movlw	1
 27786  01572A  240D               	addwf	i2Word_GetPair@pInput,w,c
 27787  01572C  6E0A               	movwf	i2Byte_GetPair@pInput,c
 27788  01572E  0E00               	movlw	0
 27789  015730  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 27790  015732  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 27791  015734  500F               	movf	i2Word_GetPair@pPair,w,c
 27792  015736  0FFC               	addlw	252
 27793  015738  6E0C               	movwf	i2Byte_GetPair@pPair,c
 27794  01573A  ECD1  F0AC         	call	i2_Byte_GetPair	;wreg free
 27795  01573E  0012               	return	
 27796  015740                     i2l781:
 27797                           
 27798                           ;Types.c: 160: else
 27799                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 27800  015740  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 27801  015744  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 27802  015748  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 27803  01574C  ECD1  F0AC         	call	i2_Byte_GetPair	;wreg free
 27804  015750  0012               	return	
 27805  015752                     __end_ofi2_Word_GetPair:
 27806                           	opt stack 0
 27807                           tosu	equ	0xFFF
 27808                           tosh	equ	0xFFE
 27809                           tosl	equ	0xFFD
 27810                           pclatu	equ	0xFFB
 27811                           pclath	equ	0xFFA
 27812                           tblptru	equ	0xFF8
 27813                           tblptrh	equ	0xFF7
 27814                           tblptrl	equ	0xFF6
 27815                           tablat	equ	0xFF5
 27816                           prodh	equ	0xFF4
 27817                           prodl	equ	0xFF3
 27818                           intcon	equ	0xFF2
 27819                           indf0	equ	0xFEF
 27820                           postinc0	equ	0xFEE
 27821                           fsr0h	equ	0xFEA
 27822                           fsr0l	equ	0xFE9
 27823                           wreg	equ	0xFE8
 27824                           indf1	equ	0xFE7
 27825                           postdec1	equ	0xFE5
 27826                           fsr1h	equ	0xFE2
 27827                           fsr1l	equ	0xFE1
 27828                           indf2	equ	0xFDF
 27829                           postinc2	equ	0xFDE
 27830                           postdec2	equ	0xFDD
 27831                           plusw2	equ	0xFDB
 27832                           fsr2h	equ	0xFDA
 27833                           fsr2l	equ	0xFD9
 27834                           status	equ	0xFD8
 27835                           
 27836 ;; *************** function i2_Byte_GetPair *****************
 27837 ;; Defined at:
 27838 ;;		line 87 in file "Library/Types.c"
 27839 ;; Parameters:    Size  Location     Type
 27840 ;;  pInput          2    9[COMRAM] PTR struct Byte
 27841 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 27842 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 27843 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 27844 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 27845 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 27846 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 27847 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 27848 ;;		 -> NULL(0), 
 27849 ;;  pPair           1   11[COMRAM] unsigned char 
 27850 ;; Auto vars:     Size  Location     Type
 27851 ;;		None
 27852 ;; Return value:  Size  Location     Type
 27853 ;;                  1    wreg      unsigned char 
 27854 ;; Registers used:
 27855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27856 ;; Tracked objects:
 27857 ;;		On entry : 0/0
 27858 ;;		On exit  : 0/0
 27859 ;;		Unchanged: 0/0
 27860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27861 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27864 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27865 ;;Total ram usage:        3 bytes
 27866 ;; Hardware stack levels used:    1
 27867 ;; Hardware stack levels required when called:    1
 27868 ;; This function calls:
 27869 ;;		i2_Byte_GetZone
 27870 ;; This function is called by:
 27871 ;;		i2_Word_GetPair
 27872 ;; This function uses a non-reentrant model
 27873 ;;
 27874                           
 27875                           	psect	text145
 27876  0159A2                     __ptext145:
 27877                           	opt stack 0
 27878  0159A2                     i2_Byte_GetPair:
 27879                           	opt stack 14
 27880                           
 27881                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 27882                           
 27883                           ;incstack = 0
 27884  0159A2  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 27885  0159A6  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 27886  0159AA  0E04               	movlw	4
 27887  0159AC  6E03               	movwf	i2Byte_GetZone@pMax,c
 27888  0159AE  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 27889  0159B2  0E02               	movlw	2
 27890  0159B4  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 27891  0159B6  EC84  F0A4         	call	i2_Byte_GetZone	;wreg free
 27892  0159BA  0012               	return	
 27893  0159BC                     __end_ofi2_Byte_GetPair:
 27894                           	opt stack 0
 27895                           tosu	equ	0xFFF
 27896                           tosh	equ	0xFFE
 27897                           tosl	equ	0xFFD
 27898                           pclatu	equ	0xFFB
 27899                           pclath	equ	0xFFA
 27900                           tblptru	equ	0xFF8
 27901                           tblptrh	equ	0xFF7
 27902                           tblptrl	equ	0xFF6
 27903                           tablat	equ	0xFF5
 27904                           prodh	equ	0xFF4
 27905                           prodl	equ	0xFF3
 27906                           intcon	equ	0xFF2
 27907                           indf0	equ	0xFEF
 27908                           postinc0	equ	0xFEE
 27909                           fsr0h	equ	0xFEA
 27910                           fsr0l	equ	0xFE9
 27911                           wreg	equ	0xFE8
 27912                           indf1	equ	0xFE7
 27913                           postdec1	equ	0xFE5
 27914                           fsr1h	equ	0xFE2
 27915                           fsr1l	equ	0xFE1
 27916                           indf2	equ	0xFDF
 27917                           postinc2	equ	0xFDE
 27918                           postdec2	equ	0xFDD
 27919                           plusw2	equ	0xFDB
 27920                           fsr2h	equ	0xFDA
 27921                           fsr2l	equ	0xFD9
 27922                           status	equ	0xFD8
 27923                           
 27924 ;; *************** function i2_Byte_GetZone *****************
 27925 ;; Defined at:
 27926 ;;		line 64 in file "Library/Types.c"
 27927 ;; Parameters:    Size  Location     Type
 27928 ;;  pInput          2    0[COMRAM] PTR struct Byte
 27929 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 27930 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 27931 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 27932 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 27933 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 27934 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 27935 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 27936 ;;		 -> NULL(0), 
 27937 ;;  pMax            1    2[COMRAM] unsigned char 
 27938 ;;  pChunk          1    3[COMRAM] unsigned char 
 27939 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 27940 ;; Auto vars:     Size  Location     Type
 27941 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 27942 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 27943 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 27944 ;; Return value:  Size  Location     Type
 27945 ;;                  1    wreg      unsigned char 
 27946 ;; Registers used:
 27947 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 27948 ;; Tracked objects:
 27949 ;;		On entry : 0/0
 27950 ;;		On exit  : 0/0
 27951 ;;		Unchanged: 0/0
 27952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27953 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27954 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27956 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27957 ;;Total ram usage:        9 bytes
 27958 ;; Hardware stack levels used:    1
 27959 ;; This function calls:
 27960 ;;		Nothing
 27961 ;; This function is called by:
 27962 ;;		i2_Byte_GetPair
 27963 ;; This function uses a non-reentrant model
 27964 ;;
 27965                           
 27966                           	psect	text146
 27967  014908                     __ptext146:
 27968                           	opt stack 0
 27969  014908                     i2_Byte_GetZone:
 27970                           	opt stack 14
 27971                           
 27972                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 27973                           
 27974                           ;incstack = 0
 27975  014908  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 27976  01490C  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 27977  014910  0E00               	movlw	low (__mediumconst shr (0+16))
 27978  014912  6EF8               	movwf	tblptru,c
 27979  014914  0E0F               	movlw	(high __ramtop+-1)
 27980  014916  64F7               	cpfsgt	tblptrh,c
 27981  014918  D003               	bra	i2u631_47
 27982  01491A  0008               	tblrd		*
 27983  01491C  50F5               	movf	tablat,w,c
 27984  01491E  D005               	bra	i2u631_40
 27985  014920                     i2u631_47:
 27986  014920  CFF6 FFE9          	movff	tblptrl,fsr0l
 27987  014924  CFF7 FFEA          	movff	tblptrh,fsr0h
 27988  014928  50EF               	movf	indf0,w,c
 27989  01492A                     i2u631_40:
 27990  01492A  6E09               	movwf	i2Byte_GetZone@Output,c
 27991                           
 27992                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 27993  01492C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 27994  01492E  0D01               	mullw	1
 27995  014930  0EF5               	movlw	low _MASKS
 27996  014932  24F3               	addwf	prodl,w,c
 27997  014934  6EF6               	movwf	tblptrl,c
 27998  014936  0EFB               	movlw	high _MASKS
 27999  014938  20F4               	addwfc	prodh,w,c
 28000  01493A  6EF7               	movwf	tblptrh,c
 28001  01493C                     	if	1	;There are 3 active tblptr bytes
 28002  01493C  6AF8               	clrf	tblptru,c
 28003  01493E  0E00               	movlw	low (__mediumconst shr (0+16))
 28004  014940  22F8               	addwfc	tblptru,f,c
 28005  014942                     	endif
 28006  014942  0008               	tblrd		*
 28007  014944  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 28008                           
 28009                           ;Types.c: 68: UINT8 Offset = 0;
 28010  014948  0E00               	movlw	0
 28011  01494A  6E08               	movwf	i2Byte_GetZone@Offset,c
 28012                           
 28013                           ;Types.c: 70: while (pChunk >= pMax)
 28014  01494C  D003               	goto	i2l732
 28015  01494E                     
 28016                           ;Types.c: 71: {
 28017                           ;Types.c: 72: pChunk -= pMax;
 28018  01494E  5003               	movf	i2Byte_GetZone@pMax,w,c
 28019  014950  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 28020                           
 28021                           ;Types.c: 73: Offset += 1;
 28022  014952  2A08               	incf	i2Byte_GetZone@Offset,f,c
 28023  014954                     i2l732:
 28024  014954  5003               	movf	i2Byte_GetZone@pMax,w,c
 28025  014956  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 28026  014958  B0D8               	btfsc	status,0,c
 28027  01495A  D7F9               	goto	i2l733
 28028                           
 28029                           ;Types.c: 74: }
 28030                           ;Types.c: 75: pChunk *= pChunkSize;
 28031  01495C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 28032  01495E  0204               	mulwf	i2Byte_GetZone@pChunk,c
 28033  014960  50F3               	movf	prodl,w,c
 28034  014962  6E04               	movwf	i2Byte_GetZone@pChunk,c
 28035                           
 28036                           ;Types.c: 76: pChunk += Offset;
 28037  014964  5008               	movf	i2Byte_GetZone@Offset,w,c
 28038  014966  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 28039                           
 28040                           ;Types.c: 78: Output >>= pChunk;
 28041  014968  2804               	incf	i2Byte_GetZone@pChunk,w,c
 28042  01496A  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 28043  01496C  D002               	goto	i2u633_40
 28044  01496E                     i2u633_45:
 28045  01496E  90D8               	bcf	status,0,c
 28046  014970  3209               	rrcf	i2Byte_GetZone@Output,f,c
 28047  014972                     i2u633_40:
 28048  014972  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 28049  014974  D7FC               	goto	i2u633_45
 28050                           
 28051                           ;Types.c: 79: Output &= MASK;
 28052  014976  5007               	movf	i2Byte_GetZone@MASK,w,c
 28053  014978  1609               	andwf	i2Byte_GetZone@Output,f,c
 28054                           
 28055                           ;Types.c: 80: return Output;
 28056  01497A  5009               	movf	i2Byte_GetZone@Output,w,c
 28057  01497C  0012               	return	
 28058  01497E                     __end_ofi2_Byte_GetZone:
 28059                           	opt stack 0
 28060                           tosu	equ	0xFFF
 28061                           tosh	equ	0xFFE
 28062                           tosl	equ	0xFFD
 28063                           pclatu	equ	0xFFB
 28064                           pclath	equ	0xFFA
 28065                           tblptru	equ	0xFF8
 28066                           tblptrh	equ	0xFF7
 28067                           tblptrl	equ	0xFF6
 28068                           tablat	equ	0xFF5
 28069                           prodh	equ	0xFF4
 28070                           prodl	equ	0xFF3
 28071                           intcon	equ	0xFF2
 28072                           indf0	equ	0xFEF
 28073                           postinc0	equ	0xFEE
 28074                           fsr0h	equ	0xFEA
 28075                           fsr0l	equ	0xFE9
 28076                           wreg	equ	0xFE8
 28077                           indf1	equ	0xFE7
 28078                           postdec1	equ	0xFE5
 28079                           fsr1h	equ	0xFE2
 28080                           fsr1l	equ	0xFE1
 28081                           indf2	equ	0xFDF
 28082                           postinc2	equ	0xFDE
 28083                           postdec2	equ	0xFDD
 28084                           plusw2	equ	0xFDB
 28085                           fsr2h	equ	0xFDA
 28086                           fsr2l	equ	0xFD9
 28087                           status	equ	0xFD8
 28088                           
 28089 ;; *************** function i2_Byte_SetBit *****************
 28090 ;; Defined at:
 28091 ;;		line 32 in file "Library/Types.c"
 28092 ;; Parameters:    Size  Location     Type
 28093 ;;  pInput          2    0[COMRAM] PTR struct Byte
 28094 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28095 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28096 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28097 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28098 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28099 ;;		 -> NULL(0), 
 28100 ;;  pBit            1    2[COMRAM] unsigned char 
 28101 ;;  pValue          1    3[COMRAM] unsigned char 
 28102 ;; Auto vars:     Size  Location     Type
 28103 ;;		None
 28104 ;; Return value:  Size  Location     Type
 28105 ;;                  1    wreg      void 
 28106 ;; Registers used:
 28107 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28108 ;; Tracked objects:
 28109 ;;		On entry : 0/0
 28110 ;;		On exit  : 0/0
 28111 ;;		Unchanged: 0/0
 28112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28113 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28115 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28116 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28117 ;;Total ram usage:        7 bytes
 28118 ;; Hardware stack levels used:    1
 28119 ;; This function calls:
 28120 ;;		Nothing
 28121 ;; This function is called by:
 28122 ;;		i2_Port_SetPin
 28123 ;; This function uses a non-reentrant model
 28124 ;;
 28125                           
 28126                           	psect	text147
 28127  015178                     __ptext147:
 28128                           	opt stack 0
 28129  015178                     i2_Byte_SetBit:
 28130                           	opt stack 16
 28131                           
 28132                           ;Types.c: 34: pValue &= 1;
 28133                           
 28134                           ;incstack = 0
 28135  015178  0E01               	movlw	1
 28136  01517A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 28137                           
 28138                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 28139  01517C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 28140  015180  0E01               	movlw	1
 28141  015182  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 28142  015184  2A05               	incf	??i2_Byte_SetBit,f,c
 28143  015186  D002               	goto	i2u721_44
 28144  015188                     i2u721_45:
 28145  015188  90D8               	bcf	status,0,c
 28146  01518A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 28147  01518C                     i2u721_44:
 28148  01518C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 28149  01518E  D7FC               	goto	i2u721_45
 28150  015190  5006               	movf	??i2_Byte_SetBit+1,w,c
 28151  015192  0AFF               	xorlw	255
 28152  015194  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 28153  015196  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 28154  01519A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 28155  01519E  5007               	movf	??i2_Byte_SetBit+2,w,c
 28156  0151A0  16DF               	andwf	indf2,f,c
 28157                           
 28158                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 28159  0151A2  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 28160  0151A6  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 28161  0151AA  2A05               	incf	??i2_Byte_SetBit,f,c
 28162  0151AC  D002               	goto	i2u722_44
 28163  0151AE                     i2u722_45:
 28164  0151AE  90D8               	bcf	status,0,c
 28165  0151B0  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 28166  0151B2                     i2u722_44:
 28167  0151B2  2E05               	decfsz	??i2_Byte_SetBit,f,c
 28168  0151B4  D7FC               	goto	i2u722_45
 28169  0151B6  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 28170  0151BA  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 28171  0151BE  5006               	movf	??i2_Byte_SetBit+1,w,c
 28172  0151C0  12DF               	iorwf	indf2,f,c
 28173  0151C2  0012               	return		;funcret
 28174  0151C4                     __end_ofi2_Byte_SetBit:
 28175                           	opt stack 0
 28176                           tosu	equ	0xFFF
 28177                           tosh	equ	0xFFE
 28178                           tosl	equ	0xFFD
 28179                           pclatu	equ	0xFFB
 28180                           pclath	equ	0xFFA
 28181                           tblptru	equ	0xFF8
 28182                           tblptrh	equ	0xFF7
 28183                           tblptrl	equ	0xFF6
 28184                           tablat	equ	0xFF5
 28185                           prodh	equ	0xFF4
 28186                           prodl	equ	0xFF3
 28187                           intcon	equ	0xFF2
 28188                           indf0	equ	0xFEF
 28189                           postinc0	equ	0xFEE
 28190                           fsr0h	equ	0xFEA
 28191                           fsr0l	equ	0xFE9
 28192                           wreg	equ	0xFE8
 28193                           indf1	equ	0xFE7
 28194                           postdec1	equ	0xFE5
 28195                           fsr1h	equ	0xFE2
 28196                           fsr1l	equ	0xFE1
 28197                           indf2	equ	0xFDF
 28198                           postinc2	equ	0xFDE
 28199                           postdec2	equ	0xFDD
 28200                           plusw2	equ	0xFDB
 28201                           fsr2h	equ	0xFDA
 28202                           fsr2l	equ	0xFD9
 28203                           status	equ	0xFD8
 28204                           
 28205 ;; *************** function i2_MXK_SwitchTo *****************
 28206 ;; Defined at:
 28207 ;;		line 105 in file "Library/MXK.c"
 28208 ;; Parameters:    Size  Location     Type
 28209 ;;  pModule         1    wreg     enum E6927
 28210 ;; Auto vars:     Size  Location     Type
 28211 ;;  pModule         1    7[COMRAM] enum E6927
 28212 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 28213 ;; Return value:  Size  Location     Type
 28214 ;;                  1    wreg      unsigned char 
 28215 ;; Registers used:
 28216 ;;		wreg, status,2, status,0, cstack
 28217 ;; Tracked objects:
 28218 ;;		On entry : 0/0
 28219 ;;		On exit  : 0/0
 28220 ;;		Unchanged: 0/0
 28221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28223 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28225 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28226 ;;Total ram usage:        2 bytes
 28227 ;; Hardware stack levels used:    1
 28228 ;; Hardware stack levels required when called:    1
 28229 ;; This function calls:
 28230 ;;		i2_delay_us
 28231 ;; This function is called by:
 28232 ;;		i2_Motor_Step
 28233 ;; This function uses a non-reentrant model
 28234 ;;
 28235                           
 28236                           	psect	text148
 28237  0155C6                     __ptext148:
 28238                           	opt stack 0
 28239  0155C6                     i2_MXK_SwitchTo:
 28240                           	opt stack 16
 28241                           
 28242                           ;incstack = 0
 28243                           ;i2MXK_SwitchTo@pModule stored from wreg
 28244  0155C6  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 28245                           
 28246                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 28247  0155C8  5086               	movf	3974,w,c	;volatile
 28248  0155CA  0B0F               	andlw	15
 28249  0155CC  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 28250                           
 28251                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 28252  0155CE  504D               	movf	_Bus_State,w,c
 28253  0155D0  A4D8               	btfss	status,2,c
 28254  0155D2  D002               	goto	i2l1730
 28255                           
 28256                           ;MXK.c: 110: return 0;
 28257  0155D4  0E00               	movlw	0
 28258  0155D6  0012               	return	
 28259  0155D8                     i2l1730:
 28260                           
 28261                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 28262  0155D8  0E00               	movlw	0
 28263  0155DA  6E4D               	movwf	_Bus_State,c
 28264                           
 28265                           ;MXK.c: 114: if (CUR != pModule)
 28266  0155DC  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 28267  0155DE  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 28268  0155E0  B4D8               	btfsc	status,2,c
 28269  0155E2  D00A               	goto	i2l1732
 28270                           
 28271                           ;MXK.c: 115: {
 28272                           ;MXK.c: 116: PORTG &= ~(0xF);
 28273  0155E4  0EF0               	movlw	240
 28274  0155E6  1686               	andwf	3974,f,c	;volatile
 28275                           
 28276                           ;MXK.c: 117: PORTG |= pModule;
 28277  0155E8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 28278  0155EA  1286               	iorwf	3974,f,c	;volatile
 28279                           
 28280                           ;MXK.c: 120: delay_us(10);
 28281  0155EC  0E00               	movlw	0
 28282  0155EE  6E02               	movwf	i2delay_us@us+1,c
 28283  0155F0  0E0A               	movlw	10
 28284  0155F2  6E01               	movwf	i2delay_us@us,c
 28285  0155F4  ECF8  F0A9         	call	i2_delay_us	;wreg free
 28286  0155F8                     i2l1732:
 28287                           
 28288                           ;MXK.c: 121: }
 28289                           ;MXK.c: 122: return 1;
 28290  0155F8  0E01               	movlw	1
 28291  0155FA  0012               	return	
 28292  0155FC                     __end_ofi2_MXK_SwitchTo:
 28293                           	opt stack 0
 28294                           tosu	equ	0xFFF
 28295                           tosh	equ	0xFFE
 28296                           tosl	equ	0xFFD
 28297                           pclatu	equ	0xFFB
 28298                           pclath	equ	0xFFA
 28299                           tblptru	equ	0xFF8
 28300                           tblptrh	equ	0xFF7
 28301                           tblptrl	equ	0xFF6
 28302                           tablat	equ	0xFF5
 28303                           prodh	equ	0xFF4
 28304                           prodl	equ	0xFF3
 28305                           intcon	equ	0xFF2
 28306                           indf0	equ	0xFEF
 28307                           postinc0	equ	0xFEE
 28308                           fsr0h	equ	0xFEA
 28309                           fsr0l	equ	0xFE9
 28310                           wreg	equ	0xFE8
 28311                           indf1	equ	0xFE7
 28312                           postdec1	equ	0xFE5
 28313                           fsr1h	equ	0xFE2
 28314                           fsr1l	equ	0xFE1
 28315                           indf2	equ	0xFDF
 28316                           postinc2	equ	0xFDE
 28317                           postdec2	equ	0xFDD
 28318                           plusw2	equ	0xFDB
 28319                           fsr2h	equ	0xFDA
 28320                           fsr2l	equ	0xFD9
 28321                           status	equ	0xFD8
 28322                           
 28323 ;; *************** function i2_delay_us *****************
 28324 ;; Defined at:
 28325 ;;		line 255 in file "Library/Types.c"
 28326 ;; Parameters:    Size  Location     Type
 28327 ;;  us              2    0[COMRAM] unsigned short 
 28328 ;; Auto vars:     Size  Location     Type
 28329 ;;  delay_us        4    2[COMRAM] unsigned long 
 28330 ;; Return value:  Size  Location     Type
 28331 ;;                  1    wreg      void 
 28332 ;; Registers used:
 28333 ;;		wreg, status,2, status,0
 28334 ;; Tracked objects:
 28335 ;;		On entry : 0/0
 28336 ;;		On exit  : 0/0
 28337 ;;		Unchanged: 0/0
 28338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28339 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28340 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28342 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28343 ;;Total ram usage:        6 bytes
 28344 ;; Hardware stack levels used:    1
 28345 ;; This function calls:
 28346 ;;		Nothing
 28347 ;; This function is called by:
 28348 ;;		i2_MXK_SwitchTo
 28349 ;; This function uses a non-reentrant model
 28350 ;;
 28351                           
 28352                           	psect	text149
 28353  0153F0                     __ptext149:
 28354                           	opt stack 0
 28355  0153F0                     i2_delay_us:
 28356                           	opt stack 16
 28357                           
 28358                           ;Types.c: 256: unsigned long u;
 28359                           ;Types.c: 257: while (us--) {
 28360                           
 28361                           ;incstack = 0
 28362  0153F0  D016               	goto	i2u725_40
 28363  0153F2                     i2l9973:
 28364                           
 28365                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 28366  0153F2  0E00               	movlw	0
 28367  0153F4  6E03               	movwf	i2delay_us@u,c
 28368  0153F6  0E00               	movlw	0
 28369  0153F8  6E04               	movwf	i2delay_us@u+1,c
 28370  0153FA  0E00               	movlw	0
 28371  0153FC  6E05               	movwf	i2delay_us@u+2,c
 28372  0153FE  0E00               	movlw	0
 28373  015400  6E06               	movwf	i2delay_us@u+3,c
 28374  015402                     i2l9975:
 28375  015402  5003               	movf	i2delay_us@u,w,c
 28376  015404  1004               	iorwf	i2delay_us@u+1,w,c
 28377  015406  1005               	iorwf	i2delay_us@u+2,w,c
 28378  015408  1006               	iorwf	i2delay_us@u+3,w,c
 28379  01540A  A4D8               	btfss	status,2,c
 28380  01540C  D008               	goto	i2u725_40
 28381  01540E  F000               	nop		; ;# 
 28382  015410  0E01               	movlw	1
 28383  015412  2603               	addwf	i2delay_us@u,f,c
 28384  015414  0E00               	movlw	0
 28385  015416  2204               	addwfc	i2delay_us@u+1,f,c
 28386  015418  2205               	addwfc	i2delay_us@u+2,f,c
 28387  01541A  2206               	addwfc	i2delay_us@u+3,f,c
 28388  01541C  D7F2               	goto	i2l9975
 28389  01541E                     i2u725_40:
 28390  01541E  0601               	decf	i2delay_us@us,f,c
 28391  015420  A0D8               	btfss	status,0,c
 28392  015422  0602               	decf	i2delay_us@us+1,f,c
 28393  015424  2801               	incf	i2delay_us@us,w,c
 28394  015426  E1E5               	bnz	i2l9973
 28395  015428  2802               	incf	i2delay_us@us+1,w,c
 28396  01542A  B4D8               	btfsc	status,2,c
 28397  01542C  0012               	return	
 28398  01542E  D7E1               	goto	i2l832
 28399  015430                     __end_ofi2_delay_us:
 28400                           	opt stack 0
 28401                           tosu	equ	0xFFF
 28402                           tosh	equ	0xFFE
 28403                           tosl	equ	0xFFD
 28404                           pclatu	equ	0xFFB
 28405                           pclath	equ	0xFFA
 28406                           tblptru	equ	0xFF8
 28407                           tblptrh	equ	0xFF7
 28408                           tblptrl	equ	0xFF6
 28409                           tablat	equ	0xFF5
 28410                           prodh	equ	0xFF4
 28411                           prodl	equ	0xFF3
 28412                           intcon	equ	0xFF2
 28413                           indf0	equ	0xFEF
 28414                           postinc0	equ	0xFEE
 28415                           fsr0h	equ	0xFEA
 28416                           fsr0l	equ	0xFE9
 28417                           wreg	equ	0xFE8
 28418                           indf1	equ	0xFE7
 28419                           postdec1	equ	0xFE5
 28420                           fsr1h	equ	0xFE2
 28421                           fsr1l	equ	0xFE1
 28422                           indf2	equ	0xFDF
 28423                           postinc2	equ	0xFDE
 28424                           postdec2	equ	0xFDD
 28425                           plusw2	equ	0xFDB
 28426                           fsr2h	equ	0xFDA
 28427                           fsr2l	equ	0xFD9
 28428                           status	equ	0xFD8
 28429                           
 28430 ;; *************** function i2_MXK_Release *****************
 28431 ;; Defined at:
 28432 ;;		line 130 in file "Library/MXK.c"
 28433 ;; Parameters:    Size  Location     Type
 28434 ;;		None
 28435 ;; Auto vars:     Size  Location     Type
 28436 ;;		None
 28437 ;; Return value:  Size  Location     Type
 28438 ;;                  1    wreg      unsigned char 
 28439 ;; Registers used:
 28440 ;;		wreg, status,2, status,0
 28441 ;; Tracked objects:
 28442 ;;		On entry : 0/0
 28443 ;;		On exit  : 0/0
 28444 ;;		Unchanged: 0/0
 28445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28450 ;;Total ram usage:        0 bytes
 28451 ;; Hardware stack levels used:    1
 28452 ;; This function calls:
 28453 ;;		Nothing
 28454 ;; This function is called by:
 28455 ;;		i2_Motor_Step
 28456 ;; This function uses a non-reentrant model
 28457 ;;
 28458                           
 28459                           	psect	text150
 28460  015BA2                     __ptext150:
 28461                           	opt stack 0
 28462  015BA2                     i2_MXK_Release:
 28463                           	opt stack 17
 28464                           
 28465                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 28466                           
 28467                           ;incstack = 0
 28468  015BA2  0E01               	movlw	1
 28469  015BA4  6E4D               	movwf	_Bus_State,c
 28470                           
 28471                           ;MXK.c: 135: return 1;
 28472                           ;	Return value of i2_MXK_Release is never used
 28473  015BA6  0012               	return	
 28474  015BA8                     __end_ofi2_MXK_Release:
 28475                           	opt stack 0
 28476                           tosu	equ	0xFFF
 28477                           tosh	equ	0xFFE
 28478                           tosl	equ	0xFFD
 28479                           pclatu	equ	0xFFB
 28480                           pclath	equ	0xFFA
 28481                           tblptru	equ	0xFF8
 28482                           tblptrh	equ	0xFF7
 28483                           tblptrl	equ	0xFF6
 28484                           tablat	equ	0xFF5
 28485                           prodh	equ	0xFF4
 28486                           prodl	equ	0xFF3
 28487                           intcon	equ	0xFF2
 28488                           indf0	equ	0xFEF
 28489                           postinc0	equ	0xFEE
 28490                           fsr0h	equ	0xFEA
 28491                           fsr0l	equ	0xFE9
 28492                           wreg	equ	0xFE8
 28493                           indf1	equ	0xFE7
 28494                           postdec1	equ	0xFE5
 28495                           fsr1h	equ	0xFE2
 28496                           fsr1l	equ	0xFE1
 28497                           indf2	equ	0xFDF
 28498                           postinc2	equ	0xFDE
 28499                           postdec2	equ	0xFDD
 28500                           plusw2	equ	0xFDB
 28501                           fsr2h	equ	0xFDA
 28502                           fsr2l	equ	0xFD9
 28503                           status	equ	0xFD8
 28504                           
 28505 ;; *************** function i2_MXK_Queue *****************
 28506 ;; Defined at:
 28507 ;;		line 144 in file "Library/MXK.c"
 28508 ;; Parameters:    Size  Location     Type
 28509 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 28510 ;;		 -> Absolute function(1), Motor_Step(1), 
 28511 ;; Auto vars:     Size  Location     Type
 28512 ;;		None
 28513 ;; Return value:  Size  Location     Type
 28514 ;;                  1    wreg      void 
 28515 ;; Registers used:
 28516 ;;		wreg, status,2, status,0
 28517 ;; Tracked objects:
 28518 ;;		On entry : 0/0
 28519 ;;		On exit  : 0/0
 28520 ;;		Unchanged: 0/0
 28521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28522 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28525 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28526 ;;Total ram usage:        3 bytes
 28527 ;; Hardware stack levels used:    1
 28528 ;; This function calls:
 28529 ;;		Nothing
 28530 ;; This function is called by:
 28531 ;;		i2_Motor_Step
 28532 ;; This function uses a non-reentrant model
 28533 ;;
 28534                           
 28535                           	psect	text151
 28536  015B36                     __ptext151:
 28537                           	opt stack 0
 28538  015B36                     i2_MXK_Queue:
 28539                           	opt stack 17
 28540                           
 28541                           ;MXK.c: 146: lQueue = pCallback;
 28542                           
 28543                           ;incstack = 0
 28544  015B36  C001  F029         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 28545  015B3A  C002  F02A         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 28546  015B3E  C003  F02B         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 28547  015B42  0012               	return		;funcret
 28548  015B44                     __end_ofi2_MXK_Queue:
 28549                           	opt stack 0
 28550                           tosu	equ	0xFFF
 28551                           tosh	equ	0xFFE
 28552                           tosl	equ	0xFFD
 28553                           pclatu	equ	0xFFB
 28554                           pclath	equ	0xFFA
 28555                           tblptru	equ	0xFF8
 28556                           tblptrh	equ	0xFF7
 28557                           tblptrl	equ	0xFF6
 28558                           tablat	equ	0xFF5
 28559                           prodh	equ	0xFF4
 28560                           prodl	equ	0xFF3
 28561                           intcon	equ	0xFF2
 28562                           indf0	equ	0xFEF
 28563                           postinc0	equ	0xFEE
 28564                           fsr0h	equ	0xFEA
 28565                           fsr0l	equ	0xFE9
 28566                           wreg	equ	0xFE8
 28567                           indf1	equ	0xFE7
 28568                           postdec1	equ	0xFE5
 28569                           fsr1h	equ	0xFE2
 28570                           fsr1l	equ	0xFE1
 28571                           indf2	equ	0xFDF
 28572                           postinc2	equ	0xFDE
 28573                           postdec2	equ	0xFDD
 28574                           plusw2	equ	0xFDB
 28575                           fsr2h	equ	0xFDA
 28576                           fsr2l	equ	0xFD9
 28577                           status	equ	0xFD8
 28578                           tosu	equ	0xFFF
 28579                           tosh	equ	0xFFE
 28580                           tosl	equ	0xFFD
 28581                           pclatu	equ	0xFFB
 28582                           pclath	equ	0xFFA
 28583                           tblptru	equ	0xFF8
 28584                           tblptrh	equ	0xFF7
 28585                           tblptrl	equ	0xFF6
 28586                           tablat	equ	0xFF5
 28587                           prodh	equ	0xFF4
 28588                           prodl	equ	0xFF3
 28589                           intcon	equ	0xFF2
 28590                           indf0	equ	0xFEF
 28591                           postinc0	equ	0xFEE
 28592                           fsr0h	equ	0xFEA
 28593                           fsr0l	equ	0xFE9
 28594                           wreg	equ	0xFE8
 28595                           indf1	equ	0xFE7
 28596                           postdec1	equ	0xFE5
 28597                           fsr1h	equ	0xFE2
 28598                           fsr1l	equ	0xFE1
 28599                           indf2	equ	0xFDF
 28600                           postinc2	equ	0xFDE
 28601                           postdec2	equ	0xFDD
 28602                           plusw2	equ	0xFDB
 28603                           fsr2h	equ	0xFDA
 28604                           fsr2l	equ	0xFD9
 28605                           status	equ	0xFD8
 28606                           
 28607                           	psect	text152
 28608  000000                     __ptext152:
 28609                           	opt stack 0
 28610                           tosu	equ	0xFFF
 28611                           tosh	equ	0xFFE
 28612                           tosl	equ	0xFFD
 28613                           pclatu	equ	0xFFB
 28614                           pclath	equ	0xFFA
 28615                           tblptru	equ	0xFF8
 28616                           tblptrh	equ	0xFF7
 28617                           tblptrl	equ	0xFF6
 28618                           tablat	equ	0xFF5
 28619                           prodh	equ	0xFF4
 28620                           prodl	equ	0xFF3
 28621                           intcon	equ	0xFF2
 28622                           indf0	equ	0xFEF
 28623                           postinc0	equ	0xFEE
 28624                           fsr0h	equ	0xFEA
 28625                           fsr0l	equ	0xFE9
 28626                           wreg	equ	0xFE8
 28627                           indf1	equ	0xFE7
 28628                           postdec1	equ	0xFE5
 28629                           fsr1h	equ	0xFE2
 28630                           fsr1l	equ	0xFE1
 28631                           indf2	equ	0xFDF
 28632                           postinc2	equ	0xFDE
 28633                           postdec2	equ	0xFDD
 28634                           plusw2	equ	0xFDB
 28635                           fsr2h	equ	0xFDA
 28636                           fsr2l	equ	0xFD9
 28637                           status	equ	0xFD8
 28638                           
 28639                           	psect	rparam
 28640  0000                     tosu	equ	0xFFF
 28641                           tosh	equ	0xFFE
 28642                           tosl	equ	0xFFD
 28643                           pclatu	equ	0xFFB
 28644                           pclath	equ	0xFFA
 28645                           tblptru	equ	0xFF8
 28646                           tblptrh	equ	0xFF7
 28647                           tblptrl	equ	0xFF6
 28648                           tablat	equ	0xFF5
 28649                           prodh	equ	0xFF4
 28650                           prodl	equ	0xFF3
 28651                           intcon	equ	0xFF2
 28652                           indf0	equ	0xFEF
 28653                           postinc0	equ	0xFEE
 28654                           fsr0h	equ	0xFEA
 28655                           fsr0l	equ	0xFE9
 28656                           wreg	equ	0xFE8
 28657                           indf1	equ	0xFE7
 28658                           postdec1	equ	0xFE5
 28659                           fsr1h	equ	0xFE2
 28660                           fsr1l	equ	0xFE1
 28661                           indf2	equ	0xFDF
 28662                           postinc2	equ	0xFDE
 28663                           postdec2	equ	0xFDD
 28664                           plusw2	equ	0xFDB
 28665                           fsr2h	equ	0xFDA
 28666                           fsr2l	equ	0xFD9
 28667                           status	equ	0xFD8
 28668                           
 28669                           	psect	temp
 28670  000051                     btemp:
 28671                           	opt stack 0
 28672  000051                     	ds	1
 28673  0000                     int$flags	set	btemp
 28674  0000                     wtemp6	set	btemp+1
 28675                           tosu	equ	0xFFF
 28676                           tosh	equ	0xFFE
 28677                           tosl	equ	0xFFD
 28678                           pclatu	equ	0xFFB
 28679                           pclath	equ	0xFFA
 28680                           tblptru	equ	0xFF8
 28681                           tblptrh	equ	0xFF7
 28682                           tblptrl	equ	0xFF6
 28683                           tablat	equ	0xFF5
 28684                           prodh	equ	0xFF4
 28685                           prodl	equ	0xFF3
 28686                           intcon	equ	0xFF2
 28687                           indf0	equ	0xFEF
 28688                           postinc0	equ	0xFEE
 28689                           fsr0h	equ	0xFEA
 28690                           fsr0l	equ	0xFE9
 28691                           wreg	equ	0xFE8
 28692                           indf1	equ	0xFE7
 28693                           postdec1	equ	0xFE5
 28694                           fsr1h	equ	0xFE2
 28695                           fsr1l	equ	0xFE1
 28696                           indf2	equ	0xFDF
 28697                           postinc2	equ	0xFDE
 28698                           postdec2	equ	0xFDD
 28699                           plusw2	equ	0xFDB
 28700                           fsr2h	equ	0xFDA
 28701                           fsr2l	equ	0xFD9
 28702                           status	equ	0xFD8


Data Sizes:
    Strings     448
    Constant    806
    Data        39
    BSS         842
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    157     160
    BANK1           256      6     256
    BANK2           256     14     232
    BANK3           256      0      70
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK1[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_48(CODE[9]), STR_47(CODE[10]), STR_46(CODE[3]), STR_45(CODE[24]), 
		 -> STR_44(CODE[3]), STR_43(CODE[12]), STR_42(CODE[12]), STR_41(CODE[12]), 
		 -> STR_40(CODE[12]), STR_39(CODE[16]), STR_38(CODE[3]), STR_37(CODE[12]), 
		 -> STR_36(CODE[11]), STR_35(CODE[11]), STR_34(CODE[13]), STR_33(CODE[8]), 
		 -> STR_32(CODE[9]), STR_31(CODE[9]), STR_30(CODE[5]), STR_29(CODE[3]), 
		 -> STR_28(CODE[8]), STR_27(CODE[3]), STR_26(CODE[12]), STR_25(CODE[3]), 
		 -> STR_24(CODE[20]), STR_23(CODE[19]), STR_22(CODE[3]), STR_21(CODE[20]), 
		 -> STR_20(CODE[19]), STR_19(CODE[3]), STR_18(CODE[2]), STR_17(CODE[4]), 
		 -> STR_16(CODE[3]), STR_15(CODE[39]), STR_14(CODE[42]), STR_13(CODE[16]), 
		 -> STR_12(CODE[3]), STR_11(CODE[21]), STR_10(CODE[3]), STR_9(CODE[19]), 
		 -> STR_8(CODE[28]), STR_7(CODE[20]), STR_6(CODE[3]), STR_5(CODE[17]), 
		 -> STR_4(CODE[12]), STR_3(CODE[3]), STR_2(CODE[19]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK2[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK2[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_Travel
    _Travel->_ADCAverage
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _Turn->_eusartSend
    _Get_VirtualWall_State->_eusartSend
    _Drive->_eusartSend
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Robot_Init->_UpdateDistance
    _UpdateDistance->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Travel

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 1530969
                                              0 BANK1      6     6      0
                         _ADCAverage
                       _Console_Init
                     _Console_Render
                    _FunctInitButton
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                           _LED_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                         _Robot_Init
                             _Travel
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Travel                                              26    18      8  170822
                                            145 BANK0     12     4      8
                                              0 BANK2     14    14      0
                         _ADCAverage
                     _Console_Render
                              _Drive
              _Get_VirtualWall_State
                         _Robot_Stop
                               _Turn
                     _UpdateDistance
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    17      6   11892
                                             21 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Turn                                                10     4      6     778
                                              1 BANK0     10     4      6
                         _Robot_Stop
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Get_VirtualWall_State                                5     3      2      65
                                              1 BANK0      5     3      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Drive                                                4     0      4    1873
                                              1 BANK0      4     0      4
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   37151
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   18344
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2360
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADCAverage                                          26    26      0  111951
                                            119 BANK0     26    26      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   88412
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   28640
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   47182
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   12119
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4    1996
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4    1249
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   13173
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    6065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    6575
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    5942
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _UpdateDistance                                       6     4      2      31
                                              1 BANK0      6     4      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  363376
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  292948
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  262877
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   95501
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    2382
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84709
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84709
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37341
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (3) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (4) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (5) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
   _Travel *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Drive
       _eusartSend
     _Get_VirtualWall_State
       _eusartRec
       _eusartSend
     _Robot_Stop
       _eusartSend
     _Turn
       _Robot_Stop
         _eusartSend
       _eusartRec
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     ___wmul
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      46      11       27.3%
BITBANK2           100      0       0       8        0.0%
BANK2              100      E      E8       9       90.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      6     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9D      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     31E      12        0.0%
DATA                 0      0     44A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri May 18 17:40:55 2018

                          i2_Timer0_Stop 5B9C                         SPI_Init@pChannel 0091  
             __size_of_MXK_BlockSwitchTo 0038                             i2_Motor_Step 393A  
                                      _A 01F7                                        l8 3DA6  
                           ___fldiv@aexp 0078                             ___fldiv@bexp 0077  
                                      _a 01F8                                        _i 015F  
                                      _j 015E                                        _k 013A  
                                      _l 004F                                        _u 015D  
                                      _w 0050                                        _x 013C  
                           ___fldiv@sign 006C                                       l11 3438  
                                     l12 3426                                       l90 30FC  
                                     l87 3076                                       l89 30D6  
                    __size_of_ADCAverage 02F0                         ??_UpdateDistance 0063  
                           ___awdiv@sign 0065                      ___wmul@multiplicand 0062  
                          Travel@Req_Dir 02E4                            _HMI_DIPSwitch 5A74  
                     LCD_DrawField@pSize 0078                       LCD_DrawField@count 007E  
                      ?_Event_TestButton 0001                         i2_Timer0_Restart 5B50  
                                    l120 429E                                      l121 42B4  
                                    l122 42CA                                      l220 4F24  
                                    l117 42E0                                      l221 4EF4  
                                    l118 428A                                      l230 5274  
                                    l222 4F34                                      l223 4F0C  
                            ?_LED_Toggle 0001                                      l234 53DE  
                                    l235 53B6                                      l227 528C  
                                    l403 2BA8                                      l412 2754  
                                    l228 525C                                      l340 4426  
                                    l404 2B48                                      l421 26F0  
                                    l413 2606                                      l237 53CA  
                                    l341 4430                                      l405 2BD8  
                          ??_Console_Tab 0068                                      l414 2770  
                                    l430 3CD6                                      l350 44F4  
                                    l342 443A                                      l510 2270  
                                    l406 2B60                                      l415 2628  
                                    l351 44A2                                      l343 4444  
                                    l511 2366                                      l407 2B78  
                                    l183 4698                                      l600 052A  
                                    l432 3CFC                                      l344 444E  
                                    l512 2290                                      l408 2B90  
                                    l184 4678                                      l417 268C  
                                    l601 067C                                      l433 3D28  
                                    l353 44AE                                      l337 446C  
                                    l345 4458                                      l610 06F4  
                                    l602 0556                                      l354 44B8  
                                    l346 4462                                      l338 441A  
                                    l370 43C6                                      l611 073A  
                                    l603 068C                                      l427 3D50  
                                    l355 44C2                                      l363 43E4  
                                    l371 43D0                                      l531 1740  
                            ?_HMI_GetBar 0001                                      l612 0780  
                                    l604 05E6                                      l356 44CC  
                                    l372 43DA                                      l364 4392  
                                    l532 1762                                      l516 22D0  
                                    l357 44D6                                      l509 234C  
                                    l614 0852                                      l358 44E0  
                                    l366 439E                                      l526 1782  
                                    l615 084A                                      l607 07C6  
                                    l359 44EA                                      l367 43A8  
                                    l519 2310                                      l616 0864  
                                    l608 06AE                                      l368 43B2  
                                    l528 17A0                                      l393 5128  
                                    l617 084E                                      l609 07E4  
                                    l369 43BC                                      l529 1722  
                                    l483 1D4A                                      l732 47F0  
                                    l476 1E12                                      l900 185C  
                                    l733 47EA                                      l389 4D88  
                                    l477 1CA2                                      l901 1860  
                                    l397 53AC                                      l726 4328  
                                    l478 1E2E                                      l486 1DAE  
                                    l654 57DE                                      l910 1884  
                                    l902 1864                                      l727 4322  
                                    l479 1CE6                                      l655 57D6  
                                    l911 1888                                      l903 1868  
                                    l912 188C                                      l904 186C  
                                    l824 4DEC                                      l832 52E8  
                                    l673 5714                                      l657 57DA  
                                    l913 1890                                      l905 1870  
                                    l921 4F82                                      l681 4A6A  
                                    l914 1894                                      l906 1874  
                                    l922 4F52                                      l930 3C34  
                                    l819 4C62                                      l915 1898  
                                    l907 1878                                      l916 189C  
                                    l908 187C                                      l860 17BC  
                                    l684 4A80                                      l781 5650  
                                    l597 0534                                      l853 18A4  
                                    l917 18A0                                      l909 1880  
                                    l861 17C0                                      l598 0520  
                                    l870 17E4                                      l862 17C4  
                                    l854 17A8                                      l678 4AA6  
                                    l686 4A90                                      l599 0544  
                                    l871 17E8                                      l863 17C8  
                                    l679 4A5A                                      l776 5542  
                                    l880 180C                                      l872 17EC  
                                    l864 17CC                                      l856 17AC  
                                    l928 3CA6                                      l881 1810  
                                    l873 17F0                                      l865 17D0  
                                    l857 17B0                                      l929 3C7E  
                                    l890 1834                                      l882 1814  
                                    l874 17F4                                      l866 17D4  
                                    l858 17B4                                      l891 1838  
                                    l883 1818                                      l875 17F8  
                                    l867 17D8                                      l859 17B8  
                                    l892 183C                                      l884 181C  
                                    l876 17FC                                      l868 17DC  
                                    l893 1840                                      l885 1820  
                                    l877 1800                                      l869 17E0  
                                    l894 1844                                      l886 1824  
                                    l878 1804                                      l990 4A02  
                                    l895 1848                                      l887 1828  
                                    l879 1808                                      l983 4708  
                                    l976 4ADA                                      l896 184C  
                                    l888 182C                                      l992 4A0E  
                                    l984 46AE                                      l897 1850  
                                    l889 1830                                      l985 4706  
                                    l978 4AE6                                      l898 1854  
                                    l899 1858                                      l997 504E  
                                    l999 506E                                      _RA2 007C02  
                                    _RA3 007C03                                      _RD5 007C1D  
                                    _RD7 007C1F                                      _PR2 000FCB  
                                    _Spd 01EF                                      _exp 1A26  
                                    _log 2908                                      _mod 012E  
                                    _val 0150                                      _pow 2092  
                                    _top 004B                              ?_HMI_SetBar 0001  
                     ??_Event_TestButton 0079                             _Word_GetPair 5630  
                                    prod 000FF3                              ?_HMI_Render 0001  
                    MXK_SwitchTo@pModule 0067                                      tosl 000FFD  
                                    wreg 000FE8                       Console_MakeField@x 0070  
                     Console_MakeField@y 0071                               _TXSTA1bits 000FAD  
                           Console_Tab@c 006F                             Console_Tab@i 006E  
                    LCD_DrawField@pField 0072                             Console_Tab@t 006D  
                           ___flmul@aexp 007B                             ___flmul@bexp 0080  
                             i2_delay_us 53F0                     Port_Set@TypeRequired 0082  
                           ___flmul@sign 007A                             ___flmul@temp 0085  
                           ___flmul@prod 0081                        Console_FormFeed@x 0062  
                      Console_FormFeed@y 0063                      LCD_DrawField@pPoint 0074  
                         ?_LCD_DrawField 0072                    Port_SetPinType@Output 008A  
                        Port_SetPin@Type 0073                          Port_SetPin@pPin 0071  
                          ?_Byte_GetPair 0069                          __end_of_LED_Set 529E  
                __size_ofi2_Word_GetPair 0030                            i2_Port_SetPin 3E1E  
                           ___fltol@exp1 00A8                             _Word_SetPair 551E  
                                   l1000 5086                                     l1010 421A  
                                   l1004 4E70                            ?_Byte_GetZone 0060  
                                   l1005 4E96                                     l1200 4018  
                                   l1040 2EB8                                     l1201 4060  
                                   l1009 4226                                     l1041 2EBE  
                                   l1202 4074                                     l1042 2EC4  
                                   l1043 2ECA                                     l1204 4098  
                                   l1036 2FC6                                     l1044 2ED0  
                                   l1205 4084                                     l1045 2ED6  
                                   l1037 2EB2                                     l1062 2588  
                                   l1207 40A6                                     l1063 25B6  
                                   l1047 2F54                                     l1056 245C  
                                   l1153 2906                                     l1057 25D6  
                                   l1146 499A                                     l3010 12B0  
                                   l1082 3F22                                     l1058 2464  
                                   l1059 2488                                     l2211 2000  
                                   l3012 12FA                                     l3100 1A8E  
                                   l1084 3F2A                                     l2212 207E  
                                   l2204 1EF2                                     l3005 1274  
                                   l3101 1AD6                                     l1077 3EF6  
                                   l2213 2024                                     l1158 55C4  
                                   l3022 1404                                     l3014 1322  
                                   l3006 1270                                     l3110 3650  
                                   l3102 1B0C                                     l2214 203E  
                                   l2206 1F98                                     l3031 1480  
                                   l3023 13E6                                     l3015 13D0  
                                   l3103 1C88                                     l1079 3F02  
                                   l2207 1FA6                                     l3032 14A4  
                                   l3016 1380                                     l3040 08F0  
                                   l3112 3680                                     l3104 1C52  
                                   l2208 1FB4                                     l2321 515C  
                                   l3033 14CE                                     l3017 13A8  
                                   l3009 12B4                                     l3041 0904  
                                   l3113 371A                                     l2209 1FC2  
                                   l2322 513C                                     l2330 549A  
                                   l3034 14DA                                     l3050 0B22  
                                   l3122 3A5A                                     l3035 14DC  
                                   l3019 13CE                                     l3051 0B04  
                                   l3043 0934                                     l3060 0BBC  
                                   l3044 0930                                     l3124 3AA8  
                                   l3140 292C                                     l2500 2D2E  
                                   l2420 0206                                     l2412 0050  
                                   l3029 143C                                     l3045 0944  
                                   l3109 3662                                     l2501 2CDA  
                                   l2421 021E                                     l2413 0176  
                                   l1630 3798                                     l3062 0BE0  
                                   l3046 0962                                     l3118 3F9E  
                                   l3126 3AE2                                     l3142 2956  
                                   l2334 100C                                     l2430 02DE  
                                   l2422 0284                                     l2414 00EC  
                                   l1631 37E8                                     l2327 548A  
                                   l3063 0BFE                                     l3039 08F4  
                                   l3071 2DDA                                     l3127 3AD2  
                                   l2431 04C0                                     l1632 37D2  
                                   l3072 2DCE                                     l2408 4836  
                                   l2432 0494                                     l3057 0B5A  
                                   l2441 0508                                     l2433 0444  
                                   l2425 02C2                                     l2417 0150  
                                   l1730 54C0                                     l3082 2E68  
                                   l3074 2E18                                     l2426 0316  
                                   l1627 3828                                     l3059 0B9E  
                                   l3083 2E9A                                     l3075 2E00  
                                   l3067 2D9A                                     l2443 0518  
                                   l2419 01A8                                     l1724 5564  
                                   l1732 54E0                                     l1628 381E  
                                   l3148 391E                                     l3068 2DAA  
                                   l1629 37B0                                     l3149 3886  
                                   l3077 2E4A                                     l3069 2DC8  
                                   l2437 04EA                                     l1726 558C  
                                   l3078 2E3E                                     l1735 5A5C  
                                   l2711 56B0                                     l2439 04F8  
                                   l2704 352A                                     l2705 355E  
                                   l2385 51D6                                     l2706 359C  
                                   l3098 1A46                                     l2386 51E6  
                                   l1827 31A8                                     l2707 35DA  
                                   l1828 31C4                                     l2492 2C62  
                                   l2493 2C14                                     l2485 2BFC  
                                   l2742 3BCE                                     l2734 3B3E  
                                   l2494 2C28                                     l2486 2C0C  
                                   l2743 3BC2                                     l2495 2C8C  
                                   l2487 2C30                                     l2912 4FD6  
                                   l2680 4592                                     l2672 453A  
                                   l2736 3BAA                                     l2913 4FE0  
                                   l1873 5628                                     l2681 45A0  
                                   l2673 454A                                     l2745 3BEA  
                                   l2737 3B9A                                     l2922 535C  
                                   l2923 5366                                     l2675 4568  
                                   l2499 2CD4                                     l2860 461C  
                                   l2908 4FB6                                     l2676 4560  
                                   l2909 4FAE                                     l2941 210A  
                                   l2918 5344                                     l2942 21AC  
                                   l2855 45DA                                     l2919 533C  
                                   l2679 4588                                     l2943 2182  
                                   l2856 45CE                                     l2960 0D66  
                                   l2944 2256                                     l2961 0D44  
                                   l2953 0C8E                                     l2970 0DAE  
                                   l2962 0D52                                     l2954 0C8A  
                                   l2938 20EC                                     l2859 460E  
                                   l2971 0DB2                                     l2963 0D56  
                                   l2939 20D8                                     l2956 0CEA  
                                   l2948 0C46                                     l2981 0E96  
                                   l2957 0CAE                                     l2949 0C42  
                                   l2974 0E4C                                     l2966 0DC4  
                                   l2991 0F06                                     l2983 0EA0  
                                   l2967 0D8A                                     l2976 0E5C  
                                   l2995 0F2C                                     l2979 0E80  
                                   l2996 0F34                                     l2988 0EC0  
                                   ?_exp 00B7                                     l2997 0F36  
                                   ?_log 00AF                           ??_Console_Init 0060  
                                   _ADON 007E10                    Port_SetPinType@pInput 0086  
                                   ?_pow 00C2                           Travel@Test_ADC 00F5  
                                   STR_1 FFFC                                     STR_2 FF14  
                                   STR_4 FF9C                                     STR_5 FF3A  
                                   STR_7 FEED                                     STR_8 FE90  
                                   STR_9 FF27                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   _LATF 000F8E              __size_of_MXK_InitTestButton 0018  
                                   _LATG 000F8F                      __end_of_GetPortPORT 4524  
                                   _PIR1 000F9E                                     _PIR2 000FA1  
                                   _PIR3 000FA4                      __end_of_GetPortTRIS 4414  
                                   _SPI1 0161                                     _SPI2 016C  
                                   _TMR0 000FD6                                     _gISR 0108  
                     Event_DIPSwitch@Bar 007A                            ??_Byte_GetBit 0063  
                                   _Turn 481C                       SPI_MaxSpeed@pInput 006F  
                                   _flag 0136                            ?_Byte_SetByte 0060  
                          ?_Byte_SetPair 006B                          __end_of_SPI_DCS 5722  
                                   _main 1EAC                                     _mode 0148  
                        ??i2_Byte_SetBit 0005                            ?_Byte_SetQuad 006B  
                                   _itos 3BFC                                     _test 011C  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   indf0 000FEF                                     fsr2h 000FDA  
                                   fsr0l 000FE9                                     indf1 000FE7  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                            ?_Byte_SetZone 0060  
                                   btemp 0051                                     _zero 01F9  
                                   exp@x 00B7                                     log@x 00AF  
                          ??_Byte_SetBit 0064                                     pow@x 00C2  
                                   pow@y 00C6                       __size_of_LCD_Reset 0050  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 14AA                       __size_of_LCD_Write 0020  
                          __CFG_IESO$OFF 000000                          ___fldiv@new_exp 0071  
                        ?_SPI_DisableISR 0060                      HMI_SetButton@pValue 0066  
                             _Cliff_Left 0158                            Console_Init@x 0062  
                          Console_Init@y 0063                           ?i2_Timer0_Stop 0001  
                      i2Byte_SetBit@pBit 0003                             ___param_bank 000000  
                        __end_of_Font5x7 FDE5                          __end_of_InitADC 5178  
                   Set_Rotation@rotation 0066                            ??_Init_Timer0 0060  
                 __size_of_HMI_SetButton 007A                   __size_of_HMI_SetNumber 0026  
                            ?_ISR_Enable 0001                                    ??_exp 00BB  
                                  ??_log 00B3                                    ??_pow 00CA  
           __size_of_Console_ClearCursor 0030                         __end_of_LCD_Fill 52E6  
                       __end_of_LCD_Init 3144                           ?_HMI_DIPSwitch 0001  
                          __CFG_PLLDIV$3 000000                         __end_of_LED_Init 4F42  
                           _BAUDCON1bits 000F7E                            ??_Button_Init 00A8  
                GetPortProperties@pInput 0062                            ??_Button_Poll 007E  
                       __end_of_HMI_Init 2908                                    l14037 4098  
                                  l15013 559A                                    l14161 14CE  
                                  l14325 4DEC                                    l14333 4E22  
                                  ?_Turn 0061                                    l14327 4DFE  
                                  l14417 31A8                                    l16033 0284  
                                  l16051 0316                                    l15261 52CA  
                                  l15341 2480                                    l14465 52E8  
                                  l14529 4992                                    l14467 52FA  
                                  l14565 5B10                                    l12877 3612  
                                  l15453 2C90                         __end_of_HMI_Poll 4D2C  
                                  l14639 1C52                                    l12991 4A06  
                                  l14737 4ED2                                    l12985 49FA  
                                  l15299 2B40                                    l15743 4AD2  
                                  l13975 3C92                                    l15771 28E4  
                                  l15587 3076                                    l15749 4ADE  
                                  l15597 3108                                    l14965 3EFA  
                                  l14959 3EEE                                    _I2C1T 01BA  
                                  l15979 0050                                    _I2C2T 01B3  
                          ___fltol@sign1 00A7                          __end_of___fladd 0F52  
                                  ?_main 0001                          __end_of___fldiv 14F8  
                        __end_of___awdiv 45AA                          __end_of___flneg 56C2  
                                  _ADRES 000FC3                                    ?_itos 006C  
                                  STR_11 FEC4                                    STR_12 FFFC  
                                  STR_20 FF01                                    STR_13 FF5B  
                                  STR_21 FED9                                    STR_30 FFF3  
                                  STR_14 FE3F                                    STR_31 FFC8  
                                  STR_15 FE69                                    STR_32 FFD1  
                                  STR_40 FF90                                    STR_17 FFF8  
                                  STR_33 FFE3                                    STR_26 FF84  
                                  STR_34 FF6B                                    STR_27 FF99  
                                  STR_35 FFA8                                    STR_28 FFEB  
                                  STR_36 FFB3                                    STR_29 FFFC  
                                  STR_37 FF78                                    STR_45 FEAC  
                                  STR_38 FFFC                                    STR_47 FFBE  
                                  STR_39 FF4B                                    STR_48 FFDA  
                        __end_of___flmul 0C14                          __end_of___flsub 5256  
                        __end_of___fltol 3BFC                          _Event_DIPSwitch 5824  
                        __end_of___lldiv 462E                                    u11000 456C  
                                  u10130 47C4                                    u10204 5000  
                                  u10300 4A42                                    u10205 4FFC  
                                  u10150 480E                                    u10214 5028  
                                  u10215 5024                                    u10137 47BA  
                                  u10234 4350                                    u10170 4C10  
                                  u11130 3BD4                                    u10235 434C  
                                  u10155 480A                                    u10315 5AFA  
                                  u10244 4378                                    u10316 5AFC  
                                  u10500 0D2C                                    u10245 4374  
                                  u10350 5510                                    u11160 4FBA  
                                  u11320 3FC6                                    u10530 0D6E  
                                  u11090 3B5C                                    u10290 4A3E  
                                  u10370 4E6C                                    u10355 550C  
                __size_of_HMI_LeftSwitch 0014                                    u12220 4EEA  
                                  u10380 4E8E                          ___awdiv@divisor 0062  
                                  u11190 5348                                    u12070 49D8  
                                  u11270 2E54                                    u12150 1ADE  
                                  u11095 3B52                                    u13040 3108  
                                  u10480 0D1A                                    u11328 3FCA  
                                  u12160 1AE0                                    u12400 3F5C  
                                  u12305 153E                                    u12065 49A8  
                                  u11370 3C92                                    u10490 0D2A  
                                  u12410 3F64                                    u12315 1556  
                                  u11700 45DE                                    u12084 477A  
                                  u11620 1438                                    u10740 0F12  
                                  u10660 0EA4                                    u12085 4776  
                                  u12325 1650                                    u10910 0B56  
                                  u12335 16A4                                    u12345 16D2  
                                  u11650 148E                                    u10690 0EBC  
                                  u10850 0950                                    u12355 1700  
                                  u13260 4B2A                                    u11660 14B2  
                                  u10940 0BAC                                    u10860 0AC6  
                                  u11740 366E                                    u12540 2164  
                                  u13420 00C0                                    u12285 151A  
                                  u12710 52E2                                    u10950 0BCA  
                                  u13430 0124                                    u12295 152C  
                                  u11920 5460                                    u12480 5480  
                                  u12800 25C4                                    u13440 01FE  
                                  u10865 0ABC                                    u15050 203E  
                                  u12628 3E0A                                    u11860 4E22  
                                  u12740 2BDE                                    u11780 3A7A  
                                  u13460 0242                                    u11925 545C  
                                  u11950 320A                                    u12638 33D8  
                                  u13470 0270                                    u11935 3164  
                                  u12639 33EC                                    u12920 2CC2  
                                  u12850 3776                                    u11970 579E  
                                  u13490 02D2                                    u12860 378A  
                                  u11788 3A7E                                    u12940 2D38  
                                  u11990 5318                                    u12870 37C4  
                                  u11975 579A                                    u12688 34DE  
                                  u14938 1F12                                    _INDEX 0040  
                                  u14939 1F26                                    u14948 1F32  
                                  u14949 1F46                                    u14958 1F52  
                                  u14959 1F66                                    u14888 56D0  
                                  u14968 1F72                                    u14889 56E4  
                                  u14969 1F86                          __end_of___lwdiv 4FEA  
                                  _MASKS FBF5                          __end_of___lwmod 5370  
                                  i2l430 3E36                                    i2l432 3E5C  
                                  i2l433 3E86                                    i2l427 3EAC  
                                  i2l732 4954                                    i2l733 494E  
                                  i2l832 53F2                                    i2l781 5740  
                        ___awdiv@counter 0064                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _PORTD 000F83                                    _PORTE 000F84  
                                  _PORTF 000F85                                    _PORTG 000F86  
                __size_of_HMI_DownSwitch 0014                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _TRISF 000F97                                    _TRISG 000F98  
                                  _T_VAR 0132                         ??i2_Byte_GetPair 000D  
                                  _Drive 51C4                            ?_FunctReadADC 0060  
                       ??i2_Byte_GetZone 0006                       Port_TogglePin@pPin 0076  
                                  _X_Pos 0030                                    _Y_Pos 002E  
                         __CFG_FCMEN$OFF 000000                                    _PortA 02D0  
                                  _PortB 0195                                    _PortC 019F  
                                  _PortD 018B                                    _PortE 0181  
                                  _PortF 01A9                                    _PortG 0177  
                __end_of_Port_SetPinType 278C                                    _Steps 0144  
                        _ADC_Initialised 0160                           ??_Byte_GetPair 006C  
                         ?i2_Port_SetPin 0010                              LED_Set@pLED 0075  
                         Travel@rev_Dist 02E0                          __end_of_dpowers FBF5  
                         ??_Byte_GetZone 0065                                    _count 0126  
                                  _floor 3616                                    _ldexp 3A3A  
                         Button_Poll@Pin 0083                                    _frexp 3F6E  
                                  _errno 011A                 __size_of_Set_Addr_Window 009A  
                    __end_of_Console_Tab 426C                         __end_of_MXK_Init 33C6  
                                  _stack 0228                     i2Byte_GetPair@pInput 000A  
                                  _putch 5AFE                                    _total 0140  
                                  main@r 01FE                         __end_of_SPI_Init 08C2  
                       __end_of_SPI_Send 4AC4                               _BumpSensor 015C  
                  __end_ofi2_MXK_Release 5BA8                                    pclath 000FFA  
                                  tablat 000FF5                          __end_of_reverse 4F96  
                     __size_of_MXK_Queue 000E                           ??_Byte_SetByte 0063  
                         ??_Byte_SetPair 006F                                    pow@yi 00D3  
                         ??_Byte_SetQuad 006F                                    plusw2 000FDB  
                         ??_Byte_SetZone 0066                                    status 000FD8  
                                  wtemp6 0052                          _Configure_GPIOs 4D8C  
                   i2MXK_Queue@pCallback 0001                              i2delay_us@u 0003  
                         _LCD_Word_Write 5988                              _Cliff_FLeft 015A  
                    __size_of_LED_Toggle 0040                      __size_of_HMI_GetBar 0006  
                          ?_HMI_UpSwitch 0001                              exp@exponent 00BF  
                             _Event_NULL 1404              __size_of_Port_CheckPairType 0060  
                            ldexp@newexp 00B3                              _Cliff_Right 0159  
                    __size_of_HMI_SetBar 000A                          __initialization 4142  
                    __size_of_HMI_Render 0036                               _Found_Flag 0034  
                            log@exponent 00B3                      __end_of_Byte_GetBit 57AC  
                          _Current_Dist1 014C                            _Current_Dist2 014A  
                           __end_of_Turn 4892                             __end_of_main 2092  
                           __end_of_itos 3CBA                     HMI_SetButton@reindex 0062  
                           SPI_Send9@dat 0156                      __end_of_Byte_SetBit 503C  
                   Travel@Dist_Travelled 02E2                         __end_of_InitList FBCB  
            __size_of_Port_CheckQuadType 0050                         __end_of_Mode_Set 5AFE  
            __size_of_Port_CheckPortType 0040                                   ??_Turn 0067  
                            HMI_Render@a 0068                                   ??_main 00FD  
                                 ??_itos 0070                      __end_of_Init_Timer0 5A04  
               __size_of_FunctInitButton 0076                  _Console_MakeField$10974 006E  
                          __activetblptr 000003                        Port_SetPin@pInput 006F  
                      __end_of_LCD_Reset 50DC                        Port_SetPin@pValue 0072  
                              ??_LED_Set 0075                        _MXK_InitDIPSwitch 5A04  
                         ??_FunctReadADC 0062                        GetPortPORT@pInput 0062  
                 Port_CheckPairType@Pin1 008A                   Port_CheckPairType@Pin2 008B  
                      __end_of_LCD_Write 58D4                              _GetPortPORT 449C  
                           ?i2_MXK_Queue 0001                              _GetPortTRIS 438C  
                        ??_LCD_DrawField 007C                                   ?_Drive 0061  
             __end_of_PortProperty_Valid 4C66                         __end_of_Port_Set 17A2  
                            ?i2_delay_us 0001         __size_of_Console_IncrementCursor 0054  
                        Travel@direction 00F1                      __end_of_Button_Init 3E1E  
                    __end_of_Button_Poll 34F4                        Word_GetPair@pPair 006E  
                LCD_FillRectangle@pPoint 006B                       ?_MXK_InitDIPSwitch 0001  
                          _HMI_SetButton 4728                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                             ??_ADCAverage 00D7  
                              ??_SPI_DCS 0062                                   ?_floor 00A9  
                                 ?_ldexp 00AF                                   ?_frexp 0060  
                             _Low_Sensor 01ED                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                            _HMI_SetNumber 584A  
                 Port_SetQuadType@Output 009A                                   _ANCON0 000FC1  
                       ___awdiv@dividend 0060                                   ?_putch 0001  
                       ??_Console_Render 0083                            ToSegment@pCHR 0060  
                                 _GODONE 007E11                         _Console_FormFeed 49EC  
                 Port_SetQuadType@pInput 0096                                   i2l1630 39A0  
                                 i2l1631 39EC                                   i2l1632 39D8  
                                 i2l1730 55D8                                   i2l1627 3A28  
                                 i2l1732 55F8                                   i2l1628 3A1E  
                                 i2l1629 39B6                                   i2l1590 145E  
                         __CFG_WDTEN$OFF 000000                      __size_of_ISR_Enable 000A  
                                 i2l9973 53F2                                   i2l9975 5402  
                                 _RCREG1 000FAF                                   _RCSTA1 000FAC  
                 __end_of_LCD_Word_Write 59A2                           _Timer0_Restart 5B44  
                                 _SPBRG1 000FB0                      ??_MXK_InitDIPSwitch 009B  
                      _Current_Direction 01F3                                   _TRISA2 007C92  
                                 _TRISA3 007C93                                   _TRISD5 007CAD  
                                 _TRISD7 007CAF                                   _TXREG1 000FAE  
                       __end_of___xxtofl 2EAC                                ??_InitADC 0060  
                         i2_MXK_SwitchTo 55C6                                   _TXSTA1 000FAD  
                        Byte_GetBit@pBit 0062                               _Reset_High 59D4  
                     Console_Render@temp 0085                           ??_HMI_UpSwitch 0066  
                         OutSeg@pSegment 0063                          ??i2_Timer0_Stop 0001  
                    Port_TogglePin@Value 0077                         __end_of_delay_ms 4E46  
                           LED_Init@pLED 008D                         __end_of_delay_us 532C  
                          ??_Timer2_Init 0071                            ??_Timer0_Stop 0060  
                             _Timer0_ISR 57FC                 __size_of_Console_NewLine 007C  
                      Timer2_Init@DIVIDE 007A                           __CFG_XINST$OFF 000000  
                                 _OutSeg 497E                 __size_of_HMI_InitButtons 0006  
                                 _Travel 0000                                   ___flge 34F4  
                             _Motor_Step 372C                  __end_of_Event_DIPSwitch 584A  
                              ??___fladd 0093                                   ___wmul 57AC  
                        ??_HMI_DIPSwitch 0066                                ??___fldiv 0068  
                              ??___awdiv 0064                                ??___flneg 008B  
                         __CFG_STVREN$ON 000000                               _Robot_Init 5A34  
                                 _change 004E                                ??___flmul 0076  
                                 _lMotor 00FD                                ??___flsub 00A7  
                              ??___fltol 00A3                                ??___lldiv 0068  
                                 _lQueue 0029                               _TestButton 02C6  
                             _Robot_Stop 5894                                ??___lwdiv 0064  
                     __size_of_ToSegment 0284                                ??___lwmod 006B  
               __end_of_Port_SetQuadType 1EAC                 i2Byte_GetZone@pChunkSize 0005  
                           HMI_GRender@a 0152                     __end_of_Console_Init 4B2E  
                      GetPortTRIS@pInput 0062                       __size_of_Reset_Low 0018  
                                 clear_0 418A                                   clear_1 419C  
                                 clear_2 41A8                                   clear_3 41B4  
                                 clear_4 41C8                       __end_of_ADCAverage 1242  
                       ___awdiv@quotient 0066                               Port_Init@i 00A5  
                      __end_of_MXK_Queue 5B36               __end_ofHMI_SetButton@F7213 FC02  
                                 _printf 2BF0                __end_of_MXK_InitDIPSwitch 5A1C  
                                 main@up 01FC                           HMI_SetButton@v 0067  
                                 floor@i 00AD                                   floor@x 00A9  
                 HMI_SetSegments@pString 0061                              _Console_Tab 41D8  
                    LCD_Word_Write@value 0065                             __pdataCOMRAM 0047  
                     __size_of_Port_Init 0174                            ??_Port_GetPin 0063  
               Port_CheckPortType@Output 0099                          ??i2_Port_SetPin 0014  
                           __mediumconst FB18              __end_ofTimer2_Init@PRESCALE FC05  
               Port_CheckPortType@pDrive 0098                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                           ?_MXK_Dequeue 0001                           ?_HMI_SetButton 0001  
               Port_CheckPortType@pInput 0096                            ??_Port_SetPin 0073  
                              ??_reverse 0064                    Console_MakeField@Fill 0300  
                       ?_Port_SetPinType 0086                                   putch@c 0074  
                         ?_HMI_SetNumber 0076                           i2_Word_GetPair 5722  
                __end_of_Configure_GPIOs 4DEA                         ??_MXK_TestButton 0066  
                 __end_of_Timer0_Restart 5B50                            Set_Rotation@m 0065  
                           ?_MXK_Release 0001                               ___flge@ff1 0060  
                             ___flge@ff2 0064                          __CFG_FOSC$HSPLL 000000  
                 __end_ofi2_MXK_SwitchTo 55FC                             ___xxtofl@arg 006A  
                       __end_ofexp@coeff FE0D                             i2delay_us@us 0001  
                           ___xxtofl@exp 0069                             ___xxtofl@val 0060  
                       __end_oflog@coeff FE31                          ?_LCD_Word_Write 0065  
                             __accesstop 0060                  __end_of__initialization 41CE  
                             Travel@Dist 00F3                                ?_LCD_Fill 0069  
                              ?_LCD_Init 0001                             _Cliff_FRight 015B  
                          SPI_Init@pMode 0092                               ___flneg@f1 0087  
                            _Byte_GetBit 5780                                ?_LED_Init 0001  
               __end_ofi2_Timer0_Restart 5B5C                               Travel@spd1 02DC  
                             Travel@spd2 02DE                                ?_HMI_Init 0001  
                      ??_Set_Addr_Window 0068                                ?_HMI_Poll 0001  
                           eval_poly@res 00AB                            ___rparam_used 000001  
                             ___fltol@f1 009F                              _Byte_SetBit 4FEA  
                          __end_of_MASKS FBFE                           _PortA_Property FE3D  
                            ?_Event_NULL 0001                                LCD_Fill@i 006B  
                              LCD_Fill@j 006C                                LCD_Init@i 0097  
                          __end_of_Drive 520E                    _Get_VirtualWall_State 5870  
                         __pcstackCOMRAM 0001                           _PortB_Property FE3B  
                    __size_ofi2_delay_us 0040                             __pidataBANK1 5932  
                            _Init_Timer0 59EC                      i2Byte_SetBit@pInput 0001  
                   __end_of_Byte_GetPair 5988                          Console_Render@x 008A  
                        Console_Render@y 008B                      i2Byte_SetBit@pValue 0004  
                          ?_Set_Rotation 0001                      Timer0_Init@PRESCALE FBCB  
                   __end_of_Byte_GetZone 481C                            __end_of_floor 372C  
                          __end_of_ldexp 3B1E                            __end_of_frexp 400C  
                    FunctReadADC@channel 0060                           _PortC_Property FE39  
                          __end_of_putch 5B0C                                ?_MXK_Init 0001  
                    __end_of_Timer2_Init 328A                      __end_of_Timer0_Stop 5B90  
                              ?_SPI_Init 008D                                ?_SPI_Send 0060  
                            _Button_Init 3D6E                        Port_SetType@pType 009C  
                            _Button_Poll 33C6                     __end_of_Byte_SetByte 5B28  
                   __end_of_Byte_SetPair 58F4                           _HMI_LeftSwitch 5AC4  
                         _PortD_Property FE37                     __end_of_Byte_SetQuad 5914  
                           ??_LED_Toggle 0078                             ??_HMI_GetBar 0060  
                   __end_of_Byte_SetZone 438C                           _HMI_DownSwitch 5A88  
                          SPI_Send@pData 0062                    __end_of_MXK_DIPSwitch 5A74  
                           ??_HMI_SetBar 0060                             ??_HMI_Render 0068  
                         _PortE_Property FE35                 __size_of_HMI_SetSegments 009C  
                 __end_ofi2_Word_GetPair 5752                                  ??_Drive 0065  
                         _PortF_Property FE33                  Port_CheckQuadType@Pair1 0093  
                Port_CheckQuadType@Pair2 0094                 MXK_BlockSwitchTo@pModule 0067  
                                ??_floor 00AD                                  ??_ldexp 00B5  
                                ??_frexp 0066                        ??_FunctInitButton 00A8  
                      _Console_Backspace 503C                          ?_Timer0_Restart 0001  
                                ??_putch 0074                 __size_of_HMI_RightSwitch 0014  
                    _Console_ClearCursor 5662                        __end_of_ToSegment 1A26  
                         _PortG_Property FE31                               __pbssBANK0 00FD  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                      __end_of_Port_GetPin 551E  
                Port_CheckQuadType@pQuad 0091                          reverse@iterator 0065  
                     __size_of_eval_poly 0100                         ??_SPI_DisableISR 0062  
                        ?i2_MXK_SwitchTo 0001                       ?_Console_Backspace 0001  
                      __end_of_Reset_Low 59D4                __size_of_Event_TestButton 0034  
                __size_of_Port_TogglePin 002E                               ??_LCD_Fill 006B  
                             ??_LCD_Init 0095                      __end_of_Port_SetPin 3D6E  
                 __end_of_PortA_Property FE3F                                ?_Mode_Set 0001  
                     Byte_SetByte@pInput 0060                               ??_LED_Init 008D  
                     Byte_SetByte@pValue 0062                            ?_ISR_Function 0001  
                            ?_Reset_High 0001                               ??_HMI_Init 00A8  
                             ??_HMI_Poll 0084                            ?_Timer2_Clear 0001  
                Port_CheckPairType@Props 008D                   __end_of_PortB_Property FE3D  
                     __size_of_eusartRec 0008                        __end_of_Port_Init 2BF0  
                            ?_Timer0_ISR 0001                  Port_CheckPairType@pPair 0088  
                     __end_of_LED_Toggle 53F0                       __end_of_HMI_GetBar 5B96  
               LCD_FillRectangle@pColour 0069                     __end_of_FunctReadADC 54AA  
                    ??_Console_Backspace 0062                        Set_Addr_Window@xe 0066  
                      Set_Addr_Window@ye 0067                        Set_Addr_Window@xs 0068  
                      Set_Addr_Window@ys 0065                                  ?_OutSeg 0063  
                     Byte_SetPair@pInput 006B                                  ?_Travel 00F1  
                            ?_Motor_Step 0001                       Byte_SetPair@pValue 006E  
                                ?___flge 0060                       __end_of_HMI_SetBar 5B7A  
                 __end_of_PortC_Property FE3B                       Word_GetPair@pInput 006C  
                     __end_of_HMI_Render 55C6                           ??_Set_Rotation 0065  
                              ?_Port_Set 006F                                  ?___wmul 0060  
                            ?_Robot_Init 0001                         ?_Event_DIPSwitch 0001  
                      Port_GetPin@Output 0065                             ??_ISR_Enable 0060  
                            ?_Robot_Stop 0001             __size_of_Console_ResetCursor 001C  
                   ?_Console_ClearCursor 0001                   __end_of_HMI_LeftSwitch 5AD8  
                 __end_of_PortD_Property FE39                                  _ADC_AN0 01D0  
                                _ADC_AN1 01CB                                  _ADC_AN2 01C6  
                                _ADC_AN3 01C1                               ??_MXK_Init 00A6  
                      Port_GetPin@pInput 0060                        _Console_MakeField 3EC8  
                      ??_Console_NewLine 0060                   __end_of_HMI_DownSwitch 5A9C  
                             ??_SPI_Init 0093                   Event_TestButton@pState 0079  
                             ??_SPI_Send 0063                                  ?_printf 0075  
                      ??_HMI_InitButtons 0060               __size_of_MXK_InitDIPSwitch 0018  
                 __end_of_PortE_Property FE37                      Console_Render@F6956 01DD  
                     ?_Console_MakeField 0065                                  _COUNTER 0038  
                        ??_HMI_SetButton 0060                     __end_of_HMI_UpSwitch 5AB0  
                                _LED_Set 5256                  _Console_IncrementCursor 4E46  
                              ?___xxtofl 0060                   __end_of_PortF_Property FE35  
                            _gBackcolour 0154                          ??_HMI_SetNumber 0078  
                              _I2C1_Done 0117                          ?i2_Word_GetPair 000D  
                              _I2C2_Done 0114                                _I2C1_More 0111  
                              _I2C2_More 010E                                ?_delay_ms 0060  
              __end_of_Console_Backspace 508C                                ?_delay_us 0060  
                    __size_of_Event_NULL 0002               __end_of_MXK_InitTestButton 5A34  
                                _SSP1ADD 000FC8                                  _SSP1BUF 000FC9  
                                _SSP2BUF 000F6F                   __end_of_PortG_Property FE33  
                    ??_Console_MakeField 0067                                  _SPI_DCS 56F2  
                   __size_ofi2_MXK_Queue 000E                         ?_Configure_GPIOs 0001  
               ?_InitSerialCommunication 0001                       eusartSend@sendChar 0060  
                   i2Byte_GetZone@Offset 0008                       __end_of_ISR_Enable 5B70  
                         ??_ISR_Function 0017                     i2Byte_GetZone@Output 0009  
                      Event_TestButton@j 003C                               ??_Mode_Set 0060  
                         ??_Timer2_Clear 0060                                  _Font5x7 FC05  
                   i2Byte_GetZone@pChunk 0004                                  _InitADC 512C  
                   i2Byte_GetZone@pInput 0001                     SPI_DisableISR@pInput 0060  
                          ?_Port_GetQuad 0060                          Byte_SetBit@pBit 0062  
                   Port_TogglePin@pInput 0074                    __end_ofi2_Byte_SetBit 51C4  
                 ?_Get_VirtualWall_State 0061                                  __Hparam 0000  
                      Port_GetQuad@pQuad 0062                              _Timer2_Init 3144  
                                __Lparam 0000                              _Timer0_Stop 5B8A  
                  __size_of_Console_Init 006A                                  OutSeg@a 0042  
        __end_ofPortProperty_Valid@F6830 FBEB                            LCD_Write@mode 0063  
                        __size_of_OutSeg 006E                              _Motor_Count 0146  
                             ??_Port_Set 0072                          __size_of_Travel 051E  
                        __size_of___flge 0122                __end_of_Console_MakeField 3F6E  
                      _Console_PrintChar 2EAC                                  ___fladd 0C14  
                          ?_Port_SetType 009A                                  _gCursor 0047  
                                ___fldiv 1242                                  ___awdiv 4524  
                                ___flneg 5692                    ??_Console_ClearCursor 0060  
                                ___flmul 08C2                                  ___flsub 520E  
                                ___fltol 3B1E                                  _lBuffer 0346  
                                ___lldiv 45AA                          __size_of___wmul 0028  
                                ___lwdiv 4F96                                  ___lwmod 532C  
                                Turn@Dir 0065                                  Turn@Rad 0069  
                        ?_HMI_LeftSwitch 0001                 __end_of_Console_FormFeed 4A58  
                     ?_Console_PrintChar 0001                                  __pcinit 4142  
                      __end_of_eval_poly 393A                          ?_HMI_DownSwitch 0001  
                                __ramtop 1000                                _CCW_Count 0124  
                                __ptext0 1EAC                                  __ptext1 0000  
                                __ptext2 2BF0                                  __ptext3 5AFE  
                                __ptext4 2EAC                                  __ptext5 41D8  
                                __ptext6 4E46                                  __ptext7 46AC  
                                __ptext8 49EC                                  __ptext9 5950  
                             _eusartSend 5B0C                          __size_of_printf 0168  
                                _average 013E                                _T0CONbits 000FD5  
                      i2MXK_SwitchTo@CUR 0007                                  _countOn 01EB  
                                _dpowers FBEB                                _T2CONbits 000FCA  
                          LED_Set@pValue 0074                             __size_of_exp 0274  
                           __size_of_log 0174                      __size_of_Reset_High 0018  
                  Event_DIPSwitch@pState 0079                             __size_of_pow 01D6  
                             ??___xxtofl 0064                             ?_GetPortPORT 0060  
                           ?_GetPortTRIS 0060                      ??_Console_PrintChar 0070  
                      __end_of_eusartRec 5B82                              _Port_GetPin 54E4  
                      __CFG_MSSPMSK$MSK5 000000                      LCD_DrawRectangle@p2 01D9  
                    LCD_DrawRectangle@p4 01D5                             ??i2_delay_us 0003  
                             ??_delay_ms 0062                               ??_delay_us 0062  
                                _reverse 4F42                                _DIPSwitch 02BC  
                    __size_of_Timer0_ISR 0028                              _Port_SetPin 3CBA  
                __size_of_UpdateDistance 0066                           LCD_DrawField@i 0082  
                              _LCD_Reset 508C                      __size_of_Motor_Step 010E  
                            _VictimCount 0134                                _LCD_Write 58B4  
                   __size_of_MXK_Dequeue 0030                               delay_ms@ms 0060  
                   end_of_initialization 41CE                      __size_of_Robot_Init 0016  
                                exp@sign 00C1                               delay_us@us 0060  
                    __size_of_Robot_Stop 0020                        ??_HMI_SetSegments 0063  
                Console_PrintChar@pInput 0073                             _Console_Init 4AC4  
                   __size_of_MXK_Release 0016               __end_of_Port_CheckPairType 4D8C  
                                itos@Out 0074                           ??_Port_GetQuad 0063  
                     _PortProperty_Valid 4BFE                       Byte_SetQuad@pInput 006B  
                     SPI_MinSpeed@pInput 006F                       Byte_SetQuad@pValue 006E  
                  __size_of_Byte_GetPair 001C                                i2u1486_48 5810  
                        ___lldiv@divisor 0064                    __size_of_Byte_GetZone 007A  
                      ??_HMI_RightSwitch 0066                                  pow@sign 00D2  
                        ___lldiv@counter 006C                __end_of_Console_PrintChar 2FFC  
                         ??_Port_SetType 009D               __end_of_Port_CheckQuadType 512C  
                                printf@c 0082                                  printf@f 0075  
                         Port_Init@pPort 00A2                                  postdec1 000FE5  
                                postdec2 000FDD                    __size_of_Byte_SetByte 000E  
                  __size_of_Byte_SetPair 0020                   Console_MakeField@Index 0069  
                       _ADCAverage$15832 00D9                         _ADCAverage$15833 00DD  
                       _ADCAverage$15834 00E1                         _ADCAverage$15835 00E5  
                       _ADCAverage$15836 00E9                         _ADCAverage$15837 00ED  
                                postinc0 000FEE                                  postinc2 000FDE  
                    ?_PortProperty_Valid 006F                    __size_of_Byte_SetQuad 0020  
             __end_of_Port_CheckPortType 53B0                    __size_of_Byte_SetZone 008E  
                     __end_ofi2_delay_us 5430                       Button_Init@pInitIO 009F  
                      ?_Port_SetQuadType 0096                              _gForecolour 01F5  
              ??_Console_IncrementCursor 0064                   __size_ofi2_MXK_Release 0006  
                              _PORTFbits 000F85                               _timercount 011E  
                     ??_Port_SetQuadType 009A                             ?_Console_Tab 0001  
                       Byte_GetZone@MASK 0066                              ___fladd@grs 009E  
                  Console_Render@lCursor 0086          __end_of_InitSerialCommunication 5932  
                              _MXK_Queue 5B28                         __CFG_CPUDIV$OSC1 000000  
                          ___xxtofl@sign 0068                         Byte_GetZone@pMax 0062  
             __size_of_Console_Backspace 0050                                _TRISCbits 000F94  
                            _Square_Dist 0130                          _Set_Addr_Window 40A8  
                         SPI_Init@pClock 008D                         ??_LCD_Word_Write 0067  
                            ___fldiv@grs 0073                              ___fldiv@rem 006D  
                  __end_of_LCD_DrawField 46AC                           Port_Set@pInput 006F  
                         SPI_Init@pInput 0093                     ??_PortProperty_Valid 0073  
                         Port_Set@pValue 0071                               ?_LCD_Reset 0001  
                   __end_of_Set_Rotation 42FE                               ?_LCD_Write 0063  
                           _Byte_GetPair 596C                       HMI_SetButton@F7213 FBFE  
                           _Byte_GetZone 47A2                            ?_MXK_SwitchTo 0001  
                      LCD_DrawField@xmax 0080                        LCD_DrawField@ymax 0081  
                            Travel@error 02E6  Get_VirtualWall_State@Vitual_Wall_Sensor 0064  
                         _Port_TogglePin 5752                         _Event_TestButton 55FC  
                            ___flmul@grs 007C                    __size_of_FunctReadADC 003C  
                   Port_SetPinType@Props 008B                             ?_Byte_GetBit 0060  
                __size_ofi2_Byte_GetPair 001A                             _Byte_SetByte 5B1A  
                           _Byte_SetPair 58D4                             _Byte_SetQuad 58F4  
                         _Previous_Angle 0138                  __size_ofi2_Byte_GetZone 0076  
                           _Byte_SetZone 42FE                     Port_SetPinType@pType 0089  
                      ?i2_Timer0_Restart 0001                             ?_Byte_SetBit 0060  
                          ?_SPI_MaxSpeed 006F                        __size_of_LCD_Fill 0048  
                           ??_Event_NULL 0060                        __size_of_LCD_Init 0148  
                      __size_of_LED_Init 0054                            ?_SPI_MinSpeed 006F  
                  __end_ofi2_Timer0_Stop 5BA2                       ??i2_Timer0_Restart 0001  
                      __size_of_HMI_Init 017C                        __size_of_HMI_Poll 0060  
                          ?i2_Motor_Step 0001                             ?_Init_Timer0 0001  
             __size_of_Console_MakeField 00A6                           __end_of_OutSeg 49EC  
                         __end_of_Travel 051E                           __end_of___flge 3616  
                  __size_of_HMI_UpSwitch 0014                                _Close_Pos 0128  
                         __end_of___wmul 57D4                    __end_of_HMI_DIPSwitch 5A88  
                          __pidataCOMRAM 5B5C                             ?_Button_Init 009B  
                        _FunctInitButton 4892                             ?_Button_Poll 007B  
                            ?_eusartSend 0001                                _Bus_State 004D  
                    i2Byte_GetPair@pPair 000C                     __end_of_ISR_Function 14AA  
                      __size_of_MXK_Init 013C                                _BumpState 012C  
                            Turn@C_Angle 0067                               floor@expon 00B1  
                   __end_of_Timer2_Clear 5B8A                           __end_of_printf 2D58  
                      __size_of_SPI_Init 03A4                        __size_of_SPI_Send 006C  
                          ?_Word_GetPair 006C                         ??_Timer0_Restart 0060  
                     Port_SetType@Output 009F                      start_initialization 4142  
                             ?_MXK_Queue 0060                               eval_poly@d 00A3  
                             eval_poly@n 00A5                               eval_poly@x 009F  
                             ldexp@value 00AF                             _FunctReadADC 546E  
               PortProperty_Valid@Errors 0075                         ??i2_MXK_SwitchTo 0007  
                      _LCD_FillRectangle 4E9A                       Port_SetType@pInput 009A  
                           _Current_Dist 014E                              __end_of_exp 1C9A  
                            __end_of_log 2A7C                              _ADC_Reading 012A  
                            __end_of_pow 2268                               HMI_Init@in 00A8  
                    HMI_SetNumber@pInput 0076                    __end_ofi2_Port_SetPin 3EC8  
                     __end_of_Event_NULL 1406                   __end_of_Port_TogglePin 5780  
                          ?_Word_SetPair 006F                        Byte_SetBit@pInput 0060  
                         ??_MXK_SwitchTo 0066                        Byte_SetBit@pValue 0063  
                     ?_LCD_FillRectangle 0069                      _Console_ResetCursor 5950  
            PortProperty_Valid@pPinDrive 0071                     MXK_BlockSwitchTo@CUR 0066  
               PortProperty_Valid@pInput 006F                            i2_MXK_Release 5BA2  
                             frexp@value 0060                   LCD_FillRectangle@pSize 006F  
                         SPI_Send@pInput 0060                             ??_Reset_High 0074  
               __size_of_Port_SetPinType 019E                           ??_SPI_MaxSpeed 0071  
                  Port_SetQuadType@pQuad 0098                                _ToSegment 17A2  
                    ??_LCD_FillRectangle 0073                    Port_SetQuadType@pType 0099  
                        _Console_NewLine 46AC                           ??_SPI_MinSpeed 0071  
                           _HMI_UpSwitch 5A9C                                _Reset_Low 59BC  
                           ??_Timer0_ISR 0017                          _HMI_InitButtons 5B96  
                      __size_of_Mode_Set 0012               __size_of_Console_PrintChar 0150  
                              _gCharSize 01E5                         Timer2_Init@INDEX 003E  
                              OutSeg@cur 0044                           ??i2_Motor_Step 0015  
                               ??_OutSeg 0064                                OutSeg@out 0067  
                __size_of_Console_Render 01B8                             ??_Motor_Step 0074  
                               ??_Travel 00F9                                 ??___flge 0068  
                     Byte_SetZone@Offset 0069                             ??_Robot_Init 0067  
                               ??___wmul 0064                             ??_Robot_Stop 0061  
                   ?_Console_ResetCursor 0001                                _Port_Init 2A7C  
                            __pdataBANK1 01DD                        __size_of_Port_Set 02AA  
                     Byte_SetZone@pChunk 0063                         ??i2_Word_GetPair 0010  
                     Byte_SetZone@pInput 0060                       Byte_SetZone@pValue 0065  
                          Mode_Set@pMode 0060                                 ??_printf 007B  
                __end_of_Set_Addr_Window 4142                 Port_CheckQuadType@Output 0095  
                              _gLineSize 01E1                 Port_CheckQuadType@pDrive 0092  
                              ___fladd@a 008F                                ___fladd@b 008B  
                         ??_Word_GetPair 006F                 Port_CheckQuadType@pInput 008F  
                          _Desired_Level 002C                                Travel@Dir 02DA  
                   __end_of_Port_GetQuad 546E                                ___fldiv@a 0064  
                              ___fldiv@b 0060                __end_of_LCD_FillRectangle 4EEE  
                            __pbssBIGRAM 0346                                Travel@Spd 00F7  
                               ?_LED_Set 0074                                ___flmul@a 0072  
                              ___flmul@b 006E                              __pbssCOMRAM 0029  
                              ___flsub@a 00A3                                ___flsub@b 009F  
                     __end_of_Reset_High 59EC                            __pcstackBANK0 0060  
                          __pcstackBANK1 01FA                            __pcstackBANK2 02DA  
                         _UpdateDistance 4C66                               itos@Length 0072  
                         ??_Word_SetPair 0073                        __size_of___xxtofl 0154  
                     __end_of_Timer0_ISR 5824                     __size_of_GetPortPORT 0088  
                            ??_LCD_Reset 0079                     __size_of_GetPortTRIS 0088  
                   __end_of_Port_SetType 2436                                 ?_SPI_DCS 0060  
                        ?_Port_TogglePin 0074                              ??_LCD_Write 0064  
                      __size_of_delay_ms 005C                        __size_of_delay_us 0046  
                              Turn@Angle 0061                      __CFG_CCP2MX$DEFAULT 000000  
                     __end_of_Motor_Step 383A                    Timer2_Init@pFrequency 006D  
                         ?i2_MXK_Release 0001                                Turn@Speed 0063  
                     __end_of_Robot_Init 5A4A                       __end_of_Robot_Stop 58B4  
                              _exp$15840 00BB                  ??_Get_VirtualWall_State 0063  
                    Init_Pos_Array@F7095 0200                                 ?_InitADC 0001  
               Port_CheckPairType@Output 008C                      __size_of_eusartSend 000E  
                             ?_ToSegment 0001                 Port_CheckPairType@pDrive 0089  
               Port_CheckPairType@pInput 0086                           reverse@tempVar 0064  
                     _MXK_InitTestButton 5A1C                               ?_Reset_Low 0001  
                 __size_of_MXK_DIPSwitch 0014                             ?_Timer2_Init 006D  
                       ??_HMI_LeftSwitch 0066                             ?_Timer0_Stop 0001  
                       ___lwdiv@dividend 0060                            _lStepFunction 010B  
                __size_of_MXK_TestButton 0014                        Byte_SetPair@pPair 006D  
                __end_of_FunctInitButton 4908                         ??_HMI_DownSwitch 0066  
       __size_of_InitSerialCommunication 001E                                __pintcode 1408  
                          __pmediumconst FB18                    ??_Console_ResetCursor 0060  
                               ?___fladd 008B                                 ?___fldiv 0060  
                               ?___awdiv 0060                                __ptext100 532C  
                              __ptext101 4F96                                __ptext110 5B90  
                              __ptext102 400C                                 ?___flneg 0087  
                              __ptext111 278C                                __ptext103 17A2  
                              __ptext120 3D6E                                __ptext112 4B96  
                              __ptext104 4728                                __ptext121 5A04  
                              __ptext113 051E                                __ptext105 53B0  
                              __ptext130 4D2C                                __ptext122 5B96  
                              __ptext114 3144                                __ptext106 5752  
                              __ptext131 4BFE                                __ptext123 5A1C  
                              __ptext115 45AA                                __ptext107 3CBA  
                              __ptext140 393A                                __ptext132 5630  
                              __ptext124 25EE                                __ptext116 5B82  
                              __ptext108 54E4                                __ptext141 5B9C  
                              __ptext133 596C                                __ptext125 4FEA  
                              __ptext117 57D4                                __ptext109 5B70  
                              __ptext150 5BA2                                __ptext142 5B50  
                              __ptext134 47A2                                __ptext126 1C9A  
                              __ptext118 56F2                                __ptext151 5B36  
                              __ptext143 3E1E                                __ptext135 58F4  
                              __ptext127 551E                                __ptext119 4892  
                              __ptext152 0000                                __ptext144 5722  
                              __ptext136 42FE                                __ptext128 58D4  
                              __ptext145 59A2                                __ptext137 4AC4  
                              __ptext129 50DC                                __ptext146 4908  
                              __ptext147 5178                                __ptext139 57FC  
                              __ptext148 55C6                                __ptext149 53F0  
                              _pShiftVal 0036                                 ?___flmul 006E  
                               ?___flsub 009F                                 ?___fltol 009F  
                               ?___lldiv 0060                               ?_Port_Init 00A0  
                               ?___lwdiv 0060                                 ?___lwmod 0067  
                    ?_MXK_InitTestButton 0001                        ?_Console_FormFeed 0001  
                      _GetPortProperties 4414                                _pow$15838 00CA  
                              _pow$15839 00CE              __end_ofTimer0_Init@PRESCALE FBDB  
                     ??_Console_FormFeed 0060                          _HMI_SetSegments 400C  
                     ?_GetPortProperties 0060                         Event_NULL@pState 0001  
                 __end_of_UpdateDistance 4CCC                 __size_of_Event_DIPSwitch 0026  
                  __size_of_Set_Rotation 0092                            ??i2_MXK_Queue 0004  
                              _eval_poly 383A                              ??_MXK_Queue 0063  
                           ?_Port_GetPin 0060                           __size_of_Drive 004A  
                  __end_of_HMI_SetButton 47A2                     __size_of_Console_Tab 0094  
                               ?_reverse 0060                             ?_Port_SetPin 006F  
                              _readIndex 0032                    __end_of_HMI_SetNumber 5870  
                       ___lwdiv@quotient 0065                          _HMI_RightSwitch 5AB0  
                         __size_of_floor 0116                           __size_of_ldexp 00E4  
                         __size_of_frexp 009E                      ??_GetPortProperties 0062  
                __end_of_Console_NewLine 4728                                _eusartRec 5B7A  
                   ??_MXK_InitTestButton 008D                       Byte_GetPair@pInput 0069  
                         __size_of_putch 000E                  __end_of_HMI_InitButtons 5B9C  
                      i2Port_SetPin@Type 0014                        i2Port_SetPin@pPin 0012  
                         i2_Byte_GetPair 59A2                                 _LCD_Fill 529E  
                               _LCD_Init 2FFC                           ___wmul@product 0064  
                               _HMIBoard 0282                           i2_Byte_GetZone 4908  
                               _LED_Init 4EEE                                delay_ms@u 0062  
                     Button_Poll@pButton 007B                                delay_us@u 0062  
                               _HMI_Init 278C                                 _HMI_Poll 4CCC  
                     MXK_Queue@pCallback 0060                                 _IPR1bits 000F9F  
                               _IPR3bits 000FA5                                 _PIE1bits 000F9D  
                               _PIE3bits 000FA3              __end_of_Console_ClearCursor 5692  
               __size_of_Configure_GPIOs 005E                     __size_of_Byte_GetBit 002C  
                      Byte_SetQuad@pQuad 006D                                 _PIR1bits 000F9E  
                               _PIR3bits 000FA4                                 i2u631_40 492A  
                               i2u631_47 4920                                 i2u633_40 4972  
                               i2u721_44 518C                                 i2u721_45 5188  
                               i2u633_45 496E                                 i2u722_44 51B2  
                               i2u722_45 51AE                                 _CW_Count 0122  
                               i2u725_40 541E                                 i2u821_40 397E  
                               i2u822_40 3992                                 i2u823_40 39CA  
                   __size_of_Byte_SetBit 0052                                 _RCONbits 000FD0  
                   i2Word_GetPair@pInput 000D                       _Sensor_Observe_Fin 0120  
                       __CFG_WDTPS$32768 000000                         HMI_SetBar@pValue 0060  
                      Button_Init@pInput 009B                  __size_of_SPI_DisableISR 0028  
                               _SSP1CON1 000FC6                        ??_Port_SetPinType 008A  
                               _SSP1CON2 000FC5                                 _SSP2CON1 000F6C  
                               _SSP2CON2 000F6B                    __size_of_ISR_Function 00A2  
                               _SSP1STAT 000FC7                __end_of_GetPortProperties 449C  
                               _SSP2STAT 000F6D                             _Set_Rotation 426C  
                  __size_of_Timer2_Clear 0008                     __end_of_MXK_SwitchTo 54E4  
                     _Port_CheckPairType 4D2C                                 _MXK_Init 328A  
                   __size_of_Init_Timer0 0018                          MXK_SwitchTo@CUR 0066  
                               _SPI_Init 051E                 __end_of_Event_TestButton 5630  
                               _SPI_Send 4A58                               _ADCON0bits 000FC2  
                             _ADCON1bits 000FC1                         ?_Set_Addr_Window 0065  
                      ___wmul@multiplier 0060                        Byte_GetBit@Output 0064  
                             printf@flag 007C                     Timer2_Init@pCPUClock 0076  
             __size_of_LCD_FillRectangle 0054                     __size_of_Button_Init 00B0  
                        ?_UpdateDistance 0061                     __end_of_SPI_MaxSpeed 4B96  
                             printf@prec 007D                        Byte_GetBit@pInput 0060  
                    Port_SetPinType@pPin 0088                     __size_of_Button_Poll 012E  
                             ?_eval_poly 009F                       _Port_CheckQuadType 50DC  
                          _MXK_DIPSwitch 5A60                      ?_Port_CheckPairType 0086  
                              main@right 01FB                     __end_of_SPI_MinSpeed 4BFE  
                          ??_MXK_Dequeue 0076                         __size_of_LED_Set 0048  
                 __size_ofi2_Byte_SetBit 004C                       _Port_CheckPortType 5370  
                  Button_Poll@pIncrement 007D                  PortProperty_Valid@F6830 FBDB  
                   __end_ofi2_Motor_Step 3A3A                          ??i2_MXK_Release 0001  
                             _ADCAverage 0F52                                copy_data0 4156  
                              copy_data1 4176                            ??_MXK_Release 0060  
                             ?_eusartRec 0001                   __end_ofi2_Byte_GetPair 59BC  
              __size_of_Port_SetQuadType 0212                         __size_of_SPI_DCS 0030  
                    ?_Port_CheckQuadType 008F                   __end_ofi2_Byte_GetZone 497E  
                    __end_ofi2_MXK_Queue 5B44                      ?_Port_CheckPortType 0096  
                        itos@destination 006E                                 _InitList FB19  
                   _Motor_Step$intlevel0 3732                                 _Mode_Set 5AEC  
                     Port_GetQuad@Output 0065                              ??_ToSegment 0060  
                           _ISR_Function 1408                                frexp@eptr 0064  
                     Port_GetQuad@pInput 0060                             _Timer2_Clear 5B82  
                       __size_of_InitADC 004C                     __end_of_Word_GetPair 5662  
                               _lCBuffer 0250                     ??_Port_CheckPairType 008A  
                            ??_Reset_Low 0074                                 __Hrparam 0000  
                           OutSeg@pInput 0066                           _Console_Render 2436  
                               __Lrparam 0000                          Timer2_Init@RDIV 0072  
                       ?_FunctInitButton 0001                           LCD_Write@value 0064  
                               _Port_Set 14F8                             OutSeg@segset 0043  
                              rand@screw 0041                     __end_of_Word_SetPair 5558  
                            ??_Port_Init 00A3                  __end_of_HMI_SetSegments 40A8  
                   ??_Port_CheckQuadType 0093                         __size_of___fladd 033E  
                       __size_of___fldiv 02B6                    __size_of_Port_GetQuad 003E  
                       __size_of___awdiv 0086                         __size_of___flneg 0030  
                       __size_of___flmul 0352                         __size_of___flsub 0048  
                       __size_of___fltol 00DE                         __size_of___lldiv 0084  
                      _MXK_BlockSwitchTo 5558                         __size_of___lwdiv 0054  
                   ??_Port_CheckPortType 0099                         __size_of___lwmod 0044  
                               _lBufferX 0045                                 _lBufferY 00FF  
                    Timer2_Init@PRESCALE FC02                             ??_eusartSend 0060  
                        LCD_Fill@pColour 0069                       ?_MXK_BlockSwitchTo 0001  
              __size_ofi2_Timer0_Restart 000C                                 _lCurrent 003A  
                __end_of_HMI_RightSwitch 5AC4                   Byte_GetZone@pChunkSize 0064  
                         ?_MXK_DIPSwitch 0001                   Byte_SetZone@pChunkSize 0064  
                  __size_of_Port_SetType 01CE                            reverse@length 0062  
                              itos@input 006C                    i2MXK_SwitchTo@pModule 0008  
                               ___xxtofl 2D58                                 _delay_ms 4DEA  
                               _delay_us 52E6                                 _clearall 0046  
                        ___lwdiv@divisor 0062                          ___lwdiv@counter 0064  
                        Port_GetPin@pPin 0062                                 __ptext10 503C  
                               __ptext11 5662                                 __ptext20 5780  
                               __ptext12 481C                                 __ptext21 0F52  
                               __ptext13 5870                                 __ptext30 34F4  
                               __ptext22 2092                                 __ptext14 51C4  
                               __ptext31 383A                                 __ptext23 2908  
                               __ptext15 2436                                 __ptext40 546E  
                               __ptext32 08C2                                 __ptext24 1A26  
                               __ptext16 4E9A                                 __ptext41 5A34  
                               __ptext33 520E                                 __ptext25 3A3A  
                               __ptext17 462E                                 __ptext50 14F8  
                               __ptext42 4C66                                 __ptext34 0C14  
                               __ptext26 3616                                 __ptext18 57AC  
                               __ptext51 5B1A                                 __ptext43 5B7A  
                               __ptext35 5692                                 __ptext27 3F6E  
                               __ptext19 3EC8                                 __ptext60 5B44  
                               __ptext52 438C                                 __ptext44 5894  
                               __ptext36 1242                                 __ptext28 2D58  
                               __ptext61 54AA                                 __ptext53 4414  
                               __ptext45 5B0C                                 __ptext37 4524  
                               __ptext29 3B1E                                 __ptext70 5988  
                               __ptext62 5A4A                                 __ptext54 449C  
                               __ptext46 328A                                 __ptext38 5590  
                               __ptext71 58B4                                 __ptext63 5B28  
                               __ptext55 4EEE                                 __ptext47 2A7C  
                               __ptext39 497E                      ??_MXK_BlockSwitchTo 0066  
                               __ptext80 59EC                                 __ptext72 4A58  
                               __ptext64 5558                                 __ptext56 5256  
                               __ptext48 2268                                 __ptext81 5914  
                               __ptext73 5AEC                                 __ptext65 52E6  
                               __ptext57 56C2                                 __ptext49 5370  
                               __ptext90 5AB0                                 __ptext82 512C  
                               __ptext74 4D8C                                 __ptext66 2FFC  
                               __ptext58 372C                                 __ptext91 5AC4  
                               __ptext83 5B66                                 __ptext75 4B2E  
                               __ptext67 426C                                 __ptext59 5B8A  
                               __ptext92 5AD8                                 __ptext84 4CCC  
                               __ptext76 508C                                 __ptext68 529E  
                               __ptext93 5430                                 __ptext85 33C6  
                               __ptext77 4DEA                                 __ptext69 40A8  
                               __ptext94 5824                                 __ptext86 5A60  
                               __ptext78 59BC                                 __ptext95 1404  
                               __ptext87 5A74                                 __ptext79 59D4  
                               __ptext96 55FC                                 __ptext88 5A88  
                               __ptext97 584A                                 __ptext89 5A9C  
                               __ptext98 3BFC                                 __ptext99 4F42  
                           _SSP1CON1bits 000FC6                         __size_of_reverse 0054  
                           _SSP1CON2bits 000FC5              __size_of_PortProperty_Valid 0068  
                     i2Byte_GetZone@MASK 0007                             _SSP2CON1bits 000F6C  
                           _SSP2CON2bits 000F6B                          ?i2_Byte_GetPair 000A  
                       ?_Console_NewLine 0001                        ??_Event_DIPSwitch 0079  
                        ?i2_Byte_GetZone 0001                                 _countOff 01E9  
                     i2Byte_GetZone@pMax 0003                         ?_HMI_InitButtons 0001  
                    __end_of_MXK_Dequeue 56F2                        HMI_SetSegments@in 0064  
                  Button_Init@pThreshold 009D                            __size_of_Turn 0076  
                          __size_of_main 01E6                            __size_of_itos 00BE  
                      Byte_GetPair@pPair 006B                                 _readings 026E  
                 __end_of_Console_Render 25EE                      i2Port_SetPin@pInput 0010  
                    i2Port_SetPin@pValue 0013                       __end_of_eusartSend 5B1A  
                           _Port_GetQuad 5430                      __end_of_MXK_Release 5A60  
                         _MXK_TestButton 5AD8                  _InitSerialCommunication 5914  
                          i2_Byte_SetBit 5178                      i2Word_GetPair@pPair 000F  
              __end_of_MXK_BlockSwitchTo 5590                 ?_Console_IncrementCursor 0001  
                   __size_of_Timer2_Init 0146                                 int$flags 0051  
                   __size_of_Timer0_Stop 0006                             _Port_SetType 2268  
                           Port_Set@Type 0086               __size_of_GetPortProperties 0088  
                 __size_of_LCD_DrawField 007E                        ??_Configure_GPIOs 0095  
                              printf@val 0080                             _SSP1STATbits 000FC7  
                               main@left 01FD                                 main@down 01FA  
                         Timer0_Init@DIV 0104                           Timer0_Init@PRE 003F  
                           _SSP2STATbits 000F6D                                 exp@coeff FDE5  
                             _LED_Toggle 53B0                                 log@coeff FE0D  
                             _HMI_GetBar 5B90                     Button_Init@pGetState 00A2  
                 PortProperty_Valid@Pair 0085                         ??_Port_TogglePin 0077  
                            _OSCTUNEbits 000F9B                               _INTCONbits 000FF2  
                 PortProperty_Valid@pPin 0072                              ??_eval_poly 00A7  
                             _HMI_SetBar 5B70                               _HMI_Render 5590  
                       Byte_SetZone@MASK 006A                              i2_MXK_Queue 5B36  
                         Timer2_Init@DIV 0100                           Timer2_Init@PRE 003D  
                       Byte_SetZone@pMax 0062                   __size_ofi2_Timer0_Stop 0006  
                   __size_of_Port_GetPin 003A                              ?_ADCAverage 0001  
                   Button_Init@pFunction 00A5                                 itos@Data 0070  
                            ??_eusartRec 0060                       LCD_FillRectangle@i 0075  
                     LCD_FillRectangle@j 0076                     __size_of_Port_SetPin 00B4  
                               intlevel2 0000                             reverse@input 0060  
                            _numReadings 01F1                   __size_of_HMI_DIPSwitch 0014  
                       ___lwmod@dividend 0067                         ___lldiv@dividend 0060  
                 __end_of_MXK_TestButton 5AEC           __size_of_Get_VirtualWall_State 0024  
                        ?_Console_Render 0001            __end_of_Get_VirtualWall_State 5894  
                __size_of_LCD_Word_Write 001A                           ?i2_Byte_SetBit 0001  
                  __size_of_MXK_SwitchTo 003A                           _SPI_DisableISR 57D4  
                        Port_Init@pInput 00A0                                 printf@ap 007E  
                            _thisReading 0142                   __size_ofi2_Port_SetPin 00AA  
                             _ISR_Enable 5B66                         ?_HMI_SetSegments 0061  
                Console_MakeField@Column 006C                    __size_of_SPI_MaxSpeed 0068  
                          SPI_DCS@pInput 0060                    __size_of_SPI_MinSpeed 0068  
                        ??_MXK_DIPSwitch 0066                    __size_ofi2_Motor_Step 0100  
                Console_MakeField@pInput 006B                         ?_HMI_RightSwitch 0001  
                       ___lldiv@quotient 0068                            ??_GetPortPORT 0062  
                        ___lwmod@divisor 0069                            ??_GetPortTRIS 0062  
                     Word_SetPair@pInput 006F                          ___lwmod@counter 006B  
                     Word_SetPair@pValue 0072                              _MXK_Dequeue 56C2  
                         LED_Toggle@pLED 0078                            ___fladd@signs 009B  
                          _LCD_DrawField 462E                         _Port_SetQuadType 1C9A  
                            _MXK_Release 5A4A                __size_of_Console_FormFeed 006C  
                           _MXK_SwitchTo 54AA                    __size_of_Word_GetPair 0032  
                     Byte_GetZone@Offset 0067                            ?_Console_Init 0001  
                      Word_SetPair@pPair 0071                          _Port_SetPinType 25EE  
                           ___fladd@aexp 009C                             ___fladd@bexp 009D  
                __size_of_Timer0_Restart 000C                       Byte_GetZone@Output 0068  
              ??_InitSerialCommunication 0060                       Byte_GetZone@pChunk 0063  
                        ?_MXK_TestButton 0001              __end_of_Console_ResetCursor 596C  
                     Byte_GetZone@pInput 0060                  __size_ofi2_MXK_SwitchTo 0036  
        __end_of_Console_IncrementCursor 4E9A                    __size_of_Word_SetPair 003A  
                 __end_of_SPI_DisableISR 57FC                             _SPI_MaxSpeed 4B2E  
                           _SPI_MinSpeed 4B96                       Port_Set@TypeActual 0084  
                            Drive@SpeedL 0061                              Drive@SpeedR 0063  
