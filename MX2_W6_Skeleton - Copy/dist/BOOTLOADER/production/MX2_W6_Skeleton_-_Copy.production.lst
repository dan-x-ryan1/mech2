

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu May 10 11:00:07 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,inline
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1,inline
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1,group=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text124,global,reloc=2,class=CODE,delta=1,group=1
   144                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=1
   145                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=1
   146                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   148                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   149                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   150                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   151                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text134,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text137,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text138,global,reloc=2,class=CODE,delta=1
   158                           	psect	text139,global,reloc=2,class=CODE,delta=1
   159                           	psect	text140,global,reloc=2,class=CODE,delta=1
   160                           	psect	text141,global,reloc=2,class=CODE,delta=1,group=1
   161                           	psect	text142,global,reloc=2,class=CODE,delta=1,group=1
   162                           	psect	text143,global,reloc=2,class=CODE,delta=1
   163                           	psect	text144,global,reloc=2,class=CODE,delta=1
   164                           	psect	text145,global,reloc=2,class=CODE,delta=1
   165                           	psect	text146,global,reloc=2,class=CODE,delta=1
   166                           	psect	text147,global,reloc=2,class=CODE,delta=1
   167                           	psect	text148,global,reloc=2,class=CODE,delta=1
   168                           	psect	text149,global,reloc=2,class=CODE,delta=1
   169                           	psect	text150,global,reloc=2,class=CODE,delta=1
   170                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   171                           	psect	text152,global,reloc=2,class=CODE,delta=1
   172                           	psect	text153,global,reloc=2,class=CODE,delta=1
   173                           	psect	text154,global,reloc=2,class=CODE,delta=1
   174                           	psect	text155,global,reloc=2,class=CODE,delta=1
   175                           	psect	text156,global,reloc=2,class=CODE,delta=1
   176                           	psect	text157,global,reloc=2,class=CODE,delta=1
   177                           	psect	text158,global,reloc=2,class=CODE,delta=1
   178                           	psect	text159,global,reloc=2,class=CODE,delta=1,inline
   179                           	psect	text160,global,reloc=2,class=CODE,delta=1
   180                           	psect	text161,global,reloc=2,class=CODE,delta=1
   181                           	psect	text162,global,reloc=2,class=CODE,delta=1
   182                           	psect	text163,global,reloc=2,class=CODE,delta=1
   183                           	psect	text164,global,reloc=2,class=CODE,delta=1
   184                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   185                           	psect	text165,global,reloc=2,class=CODE,delta=1
   186                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   187                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   188  0000                     
   189                           ; Version 1.44
   190                           ; Generated 14/09/2017 GMT
   191                           ; 
   192                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   193                           ; All rights reserved.
   194                           ; 
   195                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   196                           ; 
   197                           ; Redistribution and use in source and binary forms, with or without modification, are
   198                           ; permitted provided that the following conditions are met:
   199                           ; 
   200                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   201                           ;        conditions and the following disclaimer.
   202                           ; 
   203                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   204                           ;        of conditions and the following disclaimer in the documentation and/or other
   205                           ;        materials provided with the distribution.
   206                           ; 
   207                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   208                           ;        software without specific prior written permission.
   209                           ; 
   210                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   211                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   212                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   213                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   214                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   215                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   216                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   217                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   218                           ; 
   219                           ; 
   220                           ; Code-generator required, PIC18F67J50 Definitions
   221                           ; 
   222                           ; SFR Addresses
   223  0000                     
   224                           	psect	idataCOMRAM
   225  016104                     __pidataCOMRAM:
   226                           	opt stack 0
   227                           
   228                           ;initializer for _gCursor
   229  016104  0006               	dw	6
   230  016106  0006               	dw	6
   231                           
   232                           ;initializer for _numReadings
   233  016108  0032               	dw	50
   234                           
   235                           ;initializer for _Low_Sensor
   236  01610A  2710               	dw	10000
   237                           
   238                           ;initializer for _Bus_State
   239  01610C  01                 	db	1
   240                           
   241                           ;initializer for _change
   242  01610D  01                 	db	1
   243                           
   244                           ;initializer for _l
   245  01610E  80                 	db	128
   246                           
   247                           ;initializer for _w
   248  01610F  80                 	db	128
   249                           
   250                           	psect	idataBANK1
   251  015FA8                     __pidataBANK1:
   252                           	opt stack 0
   253                           
   254                           ;initializer for Console_Render@F6956
   255  015FA8  0006               	dw	6
   256  015FAA  0006               	dw	6
   257                           
   258                           ;initializer for _gLineSize
   259  015FAC  0080               	dw	128
   260  015FAE  0007               	dw	7
   261                           
   262                           ;initializer for _gCharSize
   263  015FB0  0005               	dw	5
   264  015FB2  0007               	dw	7
   265                           
   266                           ;initializer for _countOff
   267  015FB4  00F8               	dw	248
   268                           
   269                           ;initializer for _countOn
   270  015FB6  007C               	dw	124
   271                           
   272                           ;initializer for _gForecolour
   273  015FB8  FFFF               	dw	65535
   274                           
   275                           ;initializer for _A
   276  015FBA  41                 	db	65
   277                           
   278                           ;initializer for _a
   279  015FBB  61                 	db	97
   280                           
   281                           ;initializer for _zero
   282  015FBC  30                 	db	48
   283                           
   284                           	psect	mediumconst
   285  00FB78                     __pmediumconst:
   286                           	opt stack 0
   287  00FB78  00                 	db	0
   288  00FB79                     _InitList:
   289                           	opt stack 0
   290  00FB79  1100               	dw	4352
   291  00FB7B  0080               	dw	128
   292  00FB7D  012C               	dw	300
   293  00FB7F  B100               	dw	45312
   294  00FB81  0002               	dw	2
   295  00FB83  0035               	dw	53
   296  00FB85  0036               	dw	54
   297  00FB87  B200               	dw	45568
   298  00FB89  0002               	dw	2
   299  00FB8B  0035               	dw	53
   300  00FB8D  0036               	dw	54
   301  00FB8F  B300               	dw	45824
   302  00FB91  0002               	dw	2
   303  00FB93  0035               	dw	53
   304  00FB95  0036               	dw	54
   305  00FB97  0002               	dw	2
   306  00FB99  0035               	dw	53
   307  00FB9B  0036               	dw	54
   308  00FB9D  B400               	dw	46080
   309  00FB9F  0000               	dw	0
   310  00FBA1  C000               	dw	49152
   311  00FBA3  00A2               	dw	162
   312  00FBA5  0002               	dw	2
   313  00FBA7  0084               	dw	132
   314  00FBA9  C100               	dw	49408
   315  00FBAB  00C5               	dw	197
   316  00FBAD  C200               	dw	49664
   317  00FBAF  000D               	dw	13
   318  00FBB1  0000               	dw	0
   319  00FBB3  C300               	dw	49920
   320  00FBB5  008D               	dw	141
   321  00FBB7  002A               	dw	42
   322  00FBB9  C400               	dw	50176
   323  00FBBB  008D               	dw	141
   324  00FBBD  00EE               	dw	238
   325  00FBBF  C500               	dw	50432
   326  00FBC1  000A               	dw	10
   327  00FBC3  3600               	dw	13824
   328  00FBC5  00C8               	dw	200
   329  00FBC7  E000               	dw	57344
   330  00FBC9  0012               	dw	18
   331  00FBCB  001C               	dw	28
   332  00FBCD  0010               	dw	16
   333  00FBCF  0018               	dw	24
   334  00FBD1  0033               	dw	51
   335  00FBD3  002C               	dw	44
   336  00FBD5  0025               	dw	37
   337  00FBD7  0028               	dw	40
   338  00FBD9  0028               	dw	40
   339  00FBDB  0027               	dw	39
   340  00FBDD  002F               	dw	47
   341  00FBDF  003C               	dw	60
   342  00FBE1  0000               	dw	0
   343  00FBE3  0003               	dw	3
   344  00FBE5  0003               	dw	3
   345  00FBE7  0010               	dw	16
   346  00FBE9  0080               	dw	128
   347  00FBEB  0078               	dw	120
   348  00FBED  E100               	dw	57600
   349  00FBEF  0012               	dw	18
   350  00FBF1  001C               	dw	28
   351  00FBF3  0010               	dw	16
   352  00FBF5  0018               	dw	24
   353  00FBF7  002D               	dw	45
   354  00FBF9  0028               	dw	40
   355  00FBFB  0023               	dw	35
   356  00FBFD  0028               	dw	40
   357  00FBFF  0028               	dw	40
   358  00FC01  0026               	dw	38
   359  00FC03  002F               	dw	47
   360  00FC05  003B               	dw	59
   361  00FC07  0000               	dw	0
   362  00FC09  0003               	dw	3
   363  00FC0B  0003               	dw	3
   364  00FC0D  0010               	dw	16
   365  00FC0F  3A00               	dw	14848
   366  00FC11  0005               	dw	5
   367  00FC13  2A00               	dw	10752
   368  00FC15  0000               	dw	0
   369  00FC17  0002               	dw	2
   370  00FC19  0000               	dw	0
   371  00FC1B  0081               	dw	129
   372  00FC1D  2B00               	dw	11008
   373  00FC1F  0000               	dw	0
   374  00FC21  0003               	dw	3
   375  00FC23  0000               	dw	0
   376  00FC25  00A2               	dw	162
   377  00FC27  2900               	dw	10496
   378  00FC29  2C00               	dw	11264
   379  00FC2B                     __end_of_InitList:
   380                           	opt stack 0
   381  00FC2B                     Timer0_Init@PRESCALE:
   382                           	opt stack 0
   383  00FC2B  0002               	dw	2
   384  00FC2D  0004               	dw	4
   385  00FC2F  0008               	dw	8
   386  00FC31  0010               	dw	16
   387  00FC33  0020               	dw	32
   388  00FC35  0040               	dw	64
   389  00FC37  0080               	dw	128
   390  00FC39  0100               	dw	256
   391  00FC3B                     __end_ofTimer0_Init@PRESCALE:
   392                           	opt stack 0
   393  00FC3B                     PortProperty_Valid@F6830:
   394                           	opt stack 0
   395  00FC3B  00                 	db	0
   396  00FC3C  01                 	db	1
   397  00FC3D  02                 	db	2
   398  00FC3E  00                 	db	0
   399  00FC3F  01                 	db	1
   400  00FC40  00                 	db	0
   401  00FC41  01                 	db	1
   402  00FC42  00                 	db	0
   403  00FC43  02                 	db	2
   404  00FC44  02                 	db	2
   405  00FC45  00                 	db	0
   406  00FC46  00                 	db	0
   407  00FC47  03                 	db	3
   408  00FC48  03                 	db	3
   409  00FC49  03                 	db	3
   410  00FC4A  00                 	db	0
   411  00FC4B                     __end_ofPortProperty_Valid@F6830:
   412                           	opt stack 0
   413  00FC4B                     _dpowers:
   414                           	opt stack 0
   415  00FC4B  0001               	dw	1
   416  00FC4D  000A               	dw	10
   417  00FC4F  0064               	dw	100
   418  00FC51  03E8               	dw	1000
   419  00FC53  2710               	dw	10000
   420  00FC55                     __end_of_dpowers:
   421                           	opt stack 0
   422  00FC55                     _MASKS:
   423                           	opt stack 0
   424  00FC55  00                 	db	0
   425  00FC56  01                 	db	1
   426  00FC57  03                 	db	3
   427  00FC58  07                 	db	7
   428  00FC59  0F                 	db	15
   429  00FC5A  1F                 	db	31
   430  00FC5B  3F                 	db	63
   431  00FC5C  7F                 	db	127
   432  00FC5D  FF                 	db	255
   433  00FC5E                     __end_of_MASKS:
   434                           	opt stack 0
   435  00FC5E                     HMI_SetButton@F7213:
   436                           	opt stack 0
   437  00FC5E  00                 	db	0
   438  00FC5F  02                 	db	2
   439  00FC60  01                 	db	1
   440  00FC61  03                 	db	3
   441  00FC62                     __end_ofHMI_SetButton@F7213:
   442                           	opt stack 0
   443  00FC62                     Timer2_Init@PRESCALE:
   444                           	opt stack 0
   445  00FC62  01                 	db	1
   446  00FC63  04                 	db	4
   447  00FC64  10                 	db	16
   448  00FC65                     __end_ofTimer2_Init@PRESCALE:
   449                           	opt stack 0
   450  00FC65                     _Font5x7:
   451                           	opt stack 0
   452  00FC65  00                 	db	0
   453  00FC66  00                 	db	0
   454  00FC67  00                 	db	0
   455  00FC68  00                 	db	0
   456  00FC69  00                 	db	0
   457  00FC6A  00                 	db	0
   458  00FC6B  00                 	db	0
   459  00FC6C  5F                 	db	95
   460  00FC6D  00                 	db	0
   461  00FC6E  00                 	db	0
   462  00FC6F  00                 	db	0
   463  00FC70  07                 	db	7
   464  00FC71  00                 	db	0
   465  00FC72  07                 	db	7
   466  00FC73  00                 	db	0
   467  00FC74  14                 	db	20
   468  00FC75  7F                 	db	127
   469  00FC76  14                 	db	20
   470  00FC77  7F                 	db	127
   471  00FC78  14                 	db	20
   472  00FC79  24                 	db	36
   473  00FC7A  2A                 	db	42
   474  00FC7B  7F                 	db	127
   475  00FC7C  2A                 	db	42
   476  00FC7D  12                 	db	18
   477  00FC7E  23                 	db	35
   478  00FC7F  13                 	db	19
   479  00FC80  08                 	db	8
   480  00FC81  64                 	db	100
   481  00FC82  62                 	db	98
   482  00FC83  36                 	db	54
   483  00FC84  49                 	db	73
   484  00FC85  55                 	db	85
   485  00FC86  22                 	db	34
   486  00FC87  50                 	db	80
   487  00FC88  00                 	db	0
   488  00FC89  05                 	db	5
   489  00FC8A  03                 	db	3
   490  00FC8B  00                 	db	0
   491  00FC8C  00                 	db	0
   492  00FC8D  00                 	db	0
   493  00FC8E  1C                 	db	28
   494  00FC8F  22                 	db	34
   495  00FC90  41                 	db	65
   496  00FC91  00                 	db	0
   497  00FC92  00                 	db	0
   498  00FC93  41                 	db	65
   499  00FC94  22                 	db	34
   500  00FC95  1C                 	db	28
   501  00FC96  00                 	db	0
   502  00FC97  08                 	db	8
   503  00FC98  2A                 	db	42
   504  00FC99  1C                 	db	28
   505  00FC9A  2A                 	db	42
   506  00FC9B  08                 	db	8
   507  00FC9C  08                 	db	8
   508  00FC9D  08                 	db	8
   509  00FC9E  3E                 	db	62
   510  00FC9F  08                 	db	8
   511  00FCA0  08                 	db	8
   512  00FCA1  00                 	db	0
   513  00FCA2  50                 	db	80
   514  00FCA3  30                 	db	48
   515  00FCA4  00                 	db	0
   516  00FCA5  00                 	db	0
   517  00FCA6  08                 	db	8
   518  00FCA7  08                 	db	8
   519  00FCA8  08                 	db	8
   520  00FCA9  08                 	db	8
   521  00FCAA  08                 	db	8
   522  00FCAB  00                 	db	0
   523  00FCAC  60                 	db	96
   524  00FCAD  60                 	db	96
   525  00FCAE  00                 	db	0
   526  00FCAF  00                 	db	0
   527  00FCB0  20                 	db	32
   528  00FCB1  10                 	db	16
   529  00FCB2  08                 	db	8
   530  00FCB3  04                 	db	4
   531  00FCB4  02                 	db	2
   532  00FCB5  3E                 	db	62
   533  00FCB6  51                 	db	81
   534  00FCB7  49                 	db	73
   535  00FCB8  45                 	db	69
   536  00FCB9  3E                 	db	62
   537  00FCBA  00                 	db	0
   538  00FCBB  42                 	db	66
   539  00FCBC  7F                 	db	127
   540  00FCBD  40                 	db	64
   541  00FCBE  00                 	db	0
   542  00FCBF  42                 	db	66
   543  00FCC0  61                 	db	97
   544  00FCC1  51                 	db	81
   545  00FCC2  49                 	db	73
   546  00FCC3  46                 	db	70
   547  00FCC4  21                 	db	33
   548  00FCC5  41                 	db	65
   549  00FCC6  45                 	db	69
   550  00FCC7  4B                 	db	75
   551  00FCC8  31                 	db	49
   552  00FCC9  18                 	db	24
   553  00FCCA  14                 	db	20
   554  00FCCB  12                 	db	18
   555  00FCCC  7F                 	db	127
   556  00FCCD  10                 	db	16
   557  00FCCE  27                 	db	39
   558  00FCCF  45                 	db	69
   559  00FCD0  45                 	db	69
   560  00FCD1  45                 	db	69
   561  00FCD2  39                 	db	57
   562  00FCD3  3C                 	db	60
   563  00FCD4  4A                 	db	74
   564  00FCD5  49                 	db	73
   565  00FCD6  49                 	db	73
   566  00FCD7  30                 	db	48
   567  00FCD8  01                 	db	1
   568  00FCD9  71                 	db	113
   569  00FCDA  09                 	db	9
   570  00FCDB  05                 	db	5
   571  00FCDC  03                 	db	3
   572  00FCDD  36                 	db	54
   573  00FCDE  49                 	db	73
   574  00FCDF  49                 	db	73
   575  00FCE0  49                 	db	73
   576  00FCE1  36                 	db	54
   577  00FCE2  06                 	db	6
   578  00FCE3  49                 	db	73
   579  00FCE4  49                 	db	73
   580  00FCE5  29                 	db	41
   581  00FCE6  1E                 	db	30
   582  00FCE7  00                 	db	0
   583  00FCE8  36                 	db	54
   584  00FCE9  36                 	db	54
   585  00FCEA  00                 	db	0
   586  00FCEB  00                 	db	0
   587  00FCEC  00                 	db	0
   588  00FCED  56                 	db	86
   589  00FCEE  36                 	db	54
   590  00FCEF  00                 	db	0
   591  00FCF0  00                 	db	0
   592  00FCF1  00                 	db	0
   593  00FCF2  08                 	db	8
   594  00FCF3  14                 	db	20
   595  00FCF4  22                 	db	34
   596  00FCF5  41                 	db	65
   597  00FCF6  14                 	db	20
   598  00FCF7  14                 	db	20
   599  00FCF8  14                 	db	20
   600  00FCF9  14                 	db	20
   601  00FCFA  14                 	db	20
   602  00FCFB  41                 	db	65
   603  00FCFC  22                 	db	34
   604  00FCFD  14                 	db	20
   605  00FCFE  08                 	db	8
   606  00FCFF  00                 	db	0
   607  00FD00  02                 	db	2
   608  00FD01  01                 	db	1
   609  00FD02  51                 	db	81
   610  00FD03  09                 	db	9
   611  00FD04  06                 	db	6
   612  00FD05  32                 	db	50
   613  00FD06  49                 	db	73
   614  00FD07  79                 	db	121
   615  00FD08  41                 	db	65
   616  00FD09  3E                 	db	62
   617  00FD0A  7E                 	db	126
   618  00FD0B  11                 	db	17
   619  00FD0C  11                 	db	17
   620  00FD0D  11                 	db	17
   621  00FD0E  7E                 	db	126
   622  00FD0F  7F                 	db	127
   623  00FD10  49                 	db	73
   624  00FD11  49                 	db	73
   625  00FD12  49                 	db	73
   626  00FD13  36                 	db	54
   627  00FD14  3E                 	db	62
   628  00FD15  41                 	db	65
   629  00FD16  41                 	db	65
   630  00FD17  41                 	db	65
   631  00FD18  22                 	db	34
   632  00FD19  7F                 	db	127
   633  00FD1A  41                 	db	65
   634  00FD1B  41                 	db	65
   635  00FD1C  22                 	db	34
   636  00FD1D  1C                 	db	28
   637  00FD1E  7F                 	db	127
   638  00FD1F  49                 	db	73
   639  00FD20  49                 	db	73
   640  00FD21  49                 	db	73
   641  00FD22  41                 	db	65
   642  00FD23  7F                 	db	127
   643  00FD24  09                 	db	9
   644  00FD25  09                 	db	9
   645  00FD26  01                 	db	1
   646  00FD27  01                 	db	1
   647  00FD28  3E                 	db	62
   648  00FD29  41                 	db	65
   649  00FD2A  41                 	db	65
   650  00FD2B  51                 	db	81
   651  00FD2C  32                 	db	50
   652  00FD2D  7F                 	db	127
   653  00FD2E  08                 	db	8
   654  00FD2F  08                 	db	8
   655  00FD30  08                 	db	8
   656  00FD31  7F                 	db	127
   657  00FD32  00                 	db	0
   658  00FD33  41                 	db	65
   659  00FD34  7F                 	db	127
   660  00FD35  41                 	db	65
   661  00FD36  00                 	db	0
   662  00FD37  20                 	db	32
   663  00FD38  40                 	db	64
   664  00FD39  41                 	db	65
   665  00FD3A  3F                 	db	63
   666  00FD3B  01                 	db	1
   667  00FD3C  7F                 	db	127
   668  00FD3D  08                 	db	8
   669  00FD3E  14                 	db	20
   670  00FD3F  22                 	db	34
   671  00FD40  41                 	db	65
   672  00FD41  7F                 	db	127
   673  00FD42  40                 	db	64
   674  00FD43  40                 	db	64
   675  00FD44  40                 	db	64
   676  00FD45  40                 	db	64
   677  00FD46  7F                 	db	127
   678  00FD47  02                 	db	2
   679  00FD48  04                 	db	4
   680  00FD49  02                 	db	2
   681  00FD4A  7F                 	db	127
   682  00FD4B  7F                 	db	127
   683  00FD4C  04                 	db	4
   684  00FD4D  08                 	db	8
   685  00FD4E  10                 	db	16
   686  00FD4F  7F                 	db	127
   687  00FD50  3E                 	db	62
   688  00FD51  41                 	db	65
   689  00FD52  41                 	db	65
   690  00FD53  41                 	db	65
   691  00FD54  3E                 	db	62
   692  00FD55  7F                 	db	127
   693  00FD56  09                 	db	9
   694  00FD57  09                 	db	9
   695  00FD58  09                 	db	9
   696  00FD59  06                 	db	6
   697  00FD5A  3E                 	db	62
   698  00FD5B  41                 	db	65
   699  00FD5C  51                 	db	81
   700  00FD5D  21                 	db	33
   701  00FD5E  5E                 	db	94
   702  00FD5F  7F                 	db	127
   703  00FD60  09                 	db	9
   704  00FD61  19                 	db	25
   705  00FD62  29                 	db	41
   706  00FD63  46                 	db	70
   707  00FD64  46                 	db	70
   708  00FD65  49                 	db	73
   709  00FD66  49                 	db	73
   710  00FD67  49                 	db	73
   711  00FD68  31                 	db	49
   712  00FD69  01                 	db	1
   713  00FD6A  01                 	db	1
   714  00FD6B  7F                 	db	127
   715  00FD6C  01                 	db	1
   716  00FD6D  01                 	db	1
   717  00FD6E  3F                 	db	63
   718  00FD6F  40                 	db	64
   719  00FD70  40                 	db	64
   720  00FD71  40                 	db	64
   721  00FD72  3F                 	db	63
   722  00FD73  1F                 	db	31
   723  00FD74  20                 	db	32
   724  00FD75  40                 	db	64
   725  00FD76  20                 	db	32
   726  00FD77  1F                 	db	31
   727  00FD78  7F                 	db	127
   728  00FD79  20                 	db	32
   729  00FD7A  18                 	db	24
   730  00FD7B  20                 	db	32
   731  00FD7C  7F                 	db	127
   732  00FD7D  63                 	db	99
   733  00FD7E  14                 	db	20
   734  00FD7F  08                 	db	8
   735  00FD80  14                 	db	20
   736  00FD81  63                 	db	99
   737  00FD82  03                 	db	3
   738  00FD83  04                 	db	4
   739  00FD84  78                 	db	120
   740  00FD85  04                 	db	4
   741  00FD86  03                 	db	3
   742  00FD87  61                 	db	97
   743  00FD88  51                 	db	81
   744  00FD89  49                 	db	73
   745  00FD8A  45                 	db	69
   746  00FD8B  43                 	db	67
   747  00FD8C  00                 	db	0
   748  00FD8D  00                 	db	0
   749  00FD8E  7F                 	db	127
   750  00FD8F  41                 	db	65
   751  00FD90  41                 	db	65
   752  00FD91  02                 	db	2
   753  00FD92  04                 	db	4
   754  00FD93  08                 	db	8
   755  00FD94  10                 	db	16
   756  00FD95  20                 	db	32
   757  00FD96  41                 	db	65
   758  00FD97  41                 	db	65
   759  00FD98  7F                 	db	127
   760  00FD99  00                 	db	0
   761  00FD9A  00                 	db	0
   762  00FD9B  04                 	db	4
   763  00FD9C  02                 	db	2
   764  00FD9D  01                 	db	1
   765  00FD9E  02                 	db	2
   766  00FD9F  04                 	db	4
   767  00FDA0  40                 	db	64
   768  00FDA1  40                 	db	64
   769  00FDA2  40                 	db	64
   770  00FDA3  40                 	db	64
   771  00FDA4  40                 	db	64
   772  00FDA5  00                 	db	0
   773  00FDA6  01                 	db	1
   774  00FDA7  02                 	db	2
   775  00FDA8  04                 	db	4
   776  00FDA9  00                 	db	0
   777  00FDAA  20                 	db	32
   778  00FDAB  54                 	db	84
   779  00FDAC  54                 	db	84
   780  00FDAD  54                 	db	84
   781  00FDAE  78                 	db	120
   782  00FDAF  7F                 	db	127
   783  00FDB0  48                 	db	72
   784  00FDB1  44                 	db	68
   785  00FDB2  44                 	db	68
   786  00FDB3  38                 	db	56
   787  00FDB4  38                 	db	56
   788  00FDB5  44                 	db	68
   789  00FDB6  44                 	db	68
   790  00FDB7  44                 	db	68
   791  00FDB8  20                 	db	32
   792  00FDB9  38                 	db	56
   793  00FDBA  44                 	db	68
   794  00FDBB  44                 	db	68
   795  00FDBC  48                 	db	72
   796  00FDBD  7F                 	db	127
   797  00FDBE  38                 	db	56
   798  00FDBF  54                 	db	84
   799  00FDC0  54                 	db	84
   800  00FDC1  54                 	db	84
   801  00FDC2  18                 	db	24
   802  00FDC3  08                 	db	8
   803  00FDC4  7E                 	db	126
   804  00FDC5  09                 	db	9
   805  00FDC6  01                 	db	1
   806  00FDC7  02                 	db	2
   807  00FDC8  08                 	db	8
   808  00FDC9  14                 	db	20
   809  00FDCA  54                 	db	84
   810  00FDCB  54                 	db	84
   811  00FDCC  3C                 	db	60
   812  00FDCD  7F                 	db	127
   813  00FDCE  08                 	db	8
   814  00FDCF  04                 	db	4
   815  00FDD0  04                 	db	4
   816  00FDD1  78                 	db	120
   817  00FDD2  00                 	db	0
   818  00FDD3  44                 	db	68
   819  00FDD4  7D                 	db	125
   820  00FDD5  40                 	db	64
   821  00FDD6  00                 	db	0
   822  00FDD7  20                 	db	32
   823  00FDD8  40                 	db	64
   824  00FDD9  44                 	db	68
   825  00FDDA  3D                 	db	61
   826  00FDDB  00                 	db	0
   827  00FDDC  00                 	db	0
   828  00FDDD  7F                 	db	127
   829  00FDDE  10                 	db	16
   830  00FDDF  28                 	db	40
   831  00FDE0  44                 	db	68
   832  00FDE1  00                 	db	0
   833  00FDE2  41                 	db	65
   834  00FDE3  7F                 	db	127
   835  00FDE4  40                 	db	64
   836  00FDE5  00                 	db	0
   837  00FDE6  7C                 	db	124
   838  00FDE7  04                 	db	4
   839  00FDE8  18                 	db	24
   840  00FDE9  04                 	db	4
   841  00FDEA  78                 	db	120
   842  00FDEB  7C                 	db	124
   843  00FDEC  08                 	db	8
   844  00FDED  04                 	db	4
   845  00FDEE  04                 	db	4
   846  00FDEF  78                 	db	120
   847  00FDF0  38                 	db	56
   848  00FDF1  44                 	db	68
   849  00FDF2  44                 	db	68
   850  00FDF3  44                 	db	68
   851  00FDF4  38                 	db	56
   852  00FDF5  7C                 	db	124
   853  00FDF6  14                 	db	20
   854  00FDF7  14                 	db	20
   855  00FDF8  14                 	db	20
   856  00FDF9  08                 	db	8
   857  00FDFA  08                 	db	8
   858  00FDFB  14                 	db	20
   859  00FDFC  14                 	db	20
   860  00FDFD  18                 	db	24
   861  00FDFE  7C                 	db	124
   862  00FDFF  7C                 	db	124
   863  00FE00  08                 	db	8
   864  00FE01  04                 	db	4
   865  00FE02  04                 	db	4
   866  00FE03  08                 	db	8
   867  00FE04  48                 	db	72
   868  00FE05  54                 	db	84
   869  00FE06  54                 	db	84
   870  00FE07  54                 	db	84
   871  00FE08  20                 	db	32
   872  00FE09  04                 	db	4
   873  00FE0A  3F                 	db	63
   874  00FE0B  44                 	db	68
   875  00FE0C  40                 	db	64
   876  00FE0D  20                 	db	32
   877  00FE0E  3C                 	db	60
   878  00FE0F  40                 	db	64
   879  00FE10  40                 	db	64
   880  00FE11  20                 	db	32
   881  00FE12  7C                 	db	124
   882  00FE13  1C                 	db	28
   883  00FE14  20                 	db	32
   884  00FE15  40                 	db	64
   885  00FE16  20                 	db	32
   886  00FE17  1C                 	db	28
   887  00FE18  3C                 	db	60
   888  00FE19  40                 	db	64
   889  00FE1A  30                 	db	48
   890  00FE1B  40                 	db	64
   891  00FE1C  3C                 	db	60
   892  00FE1D  44                 	db	68
   893  00FE1E  28                 	db	40
   894  00FE1F  10                 	db	16
   895  00FE20  28                 	db	40
   896  00FE21  44                 	db	68
   897  00FE22  0C                 	db	12
   898  00FE23  50                 	db	80
   899  00FE24  50                 	db	80
   900  00FE25  50                 	db	80
   901  00FE26  3C                 	db	60
   902  00FE27  44                 	db	68
   903  00FE28  64                 	db	100
   904  00FE29  54                 	db	84
   905  00FE2A  4C                 	db	76
   906  00FE2B  44                 	db	68
   907  00FE2C  00                 	db	0
   908  00FE2D  08                 	db	8
   909  00FE2E  36                 	db	54
   910  00FE2F  41                 	db	65
   911  00FE30  00                 	db	0
   912  00FE31  00                 	db	0
   913  00FE32  00                 	db	0
   914  00FE33  7F                 	db	127
   915  00FE34  00                 	db	0
   916  00FE35  00                 	db	0
   917  00FE36  00                 	db	0
   918  00FE37  41                 	db	65
   919  00FE38  36                 	db	54
   920  00FE39  08                 	db	8
   921  00FE3A  00                 	db	0
   922  00FE3B  08                 	db	8
   923  00FE3C  08                 	db	8
   924  00FE3D  2A                 	db	42
   925  00FE3E  1C                 	db	28
   926  00FE3F  08                 	db	8
   927  00FE40  08                 	db	8
   928  00FE41  1C                 	db	28
   929  00FE42  2A                 	db	42
   930  00FE43  08                 	db	8
   931  00FE44  08                 	db	8
   932  00FE45                     __end_of_Font5x7:
   933                           	opt stack 0
   934  00FE45                     exp@coeff:
   935                           	opt stack 0
   936  00FE45  0000               	dw	0
   937  00FE47  3F80               	dw	16256
   938  00FE49  7218               	dw	29208
   939  00FE4B  3F31               	dw	16177
   940  00FE4D  FDF0               	dw	65008
   941  00FE4F  3E75               	dw	15989
   942  00FE51  5847               	dw	22599
   943  00FE53  3D63               	dw	15715
   944  00FE55  9558               	dw	38232
   945  00FE57  3C1D               	dw	15389
   946  00FE59  C482               	dw	50306
   947  00FE5B  3AAE               	dw	15022
   948  00FE5D  78A8               	dw	30888
   949  00FE5F  3921               	dw	14625
   950  00FE61  93EF               	dw	37871
   951  00FE63  3780               	dw	14208
   952  00FE65  92A0               	dw	37536
   953  00FE67  35A7               	dw	13735
   954  00FE69  5646               	dw	22086
   955  00FE6B  3415               	dw	13333
   956  00FE6D                     __end_ofexp@coeff:
   957                           	opt stack 0
   958  00FE6D                     log@coeff:
   959                           	opt stack 0
   960  00FE6D  0000               	dw	0
   961  00FE6F  0000               	dw	0
   962  00FE71  FFC4               	dw	65476
   963  00FE73  3F7F               	dw	16255
   964  00FE75  EF80               	dw	61312
   965  00FE77  BEFF               	dw	48895
   966  00FE79  E190               	dw	57744
   967  00FE7B  3EA9               	dw	16041
   968  00FE7D  82EC               	dw	33516
   969  00FE7F  BE76               	dw	48758
   970  00FE81  AD82               	dw	44418
   971  00FE83  3E2B               	dw	15915
   972  00FE85  3C0E               	dw	15374
   973  00FE87  BDC3               	dw	48579
   974  00FE89  D187               	dw	53639
   975  00FE8B  3D13               	dw	15635
   976  00FE8D  7841               	dw	30785
   977  00FE8F  BBD3               	dw	48083
   978  00FE91                     __end_oflog@coeff:
   979                           	opt stack 0
   980  00FE91                     _PortG_Property:
   981                           	opt stack 0
   982  00FE91  FC00               	dw	64512
   983  00FE93                     __end_of_PortG_Property:
   984                           	opt stack 0
   985  00FE93                     _PortF_Property:
   986                           	opt stack 0
   987  00FE93  0FFF               	dw	4095
   988  00FE95                     __end_of_PortF_Property:
   989                           	opt stack 0
   990  00FE95                     _PortE_Property:
   991                           	opt stack 0
   992  00FE95  0000               	dw	0
   993  00FE97                     __end_of_PortE_Property:
   994                           	opt stack 0
   995  00FE97                     _PortD_Property:
   996                           	opt stack 0
   997  00FE97  FFFF               	dw	65535
   998  00FE99                     __end_of_PortD_Property:
   999                           	opt stack 0
  1000  00FE99                     _PortC_Property:
  1001                           	opt stack 0
  1002  00FE99  FFF0               	dw	65520
  1003  00FE9B                     __end_of_PortC_Property:
  1004                           	opt stack 0
  1005  00FE9B                     _PortB_Property:
  1006                           	opt stack 0
  1007  00FE9B  FF00               	dw	65280
  1008  00FE9D                     __end_of_PortB_Property:
  1009                           	opt stack 0
  1010  00FE9D                     _PortA_Property:
  1011                           	opt stack 0
  1012  00FE9D  00FF               	dw	255
  1013  00FE9F                     __end_of_PortA_Property:
  1014                           	opt stack 0
  1015  0000                     _ADRES	set	4035
  1016  0000                     _TMR0	set	4054
  1017  0000                     _RCREG1	set	4015
  1018  0000                     _TXREG1	set	4014
  1019  0000                     _SPBRG1	set	4016
  1020  0000                     _TXSTA1bits	set	4013
  1021  0000                     _BAUDCON1bits	set	3966
  1022  0000                     _RCSTA1	set	4012
  1023  0000                     _TXSTA1	set	4013
  1024  0000                     _TRISCbits	set	3988
  1025  0000                     _ADCON0	set	4034
  1026  0000                     _ADCON1	set	4033
  1027  0000                     _PR2	set	4043
  1028  0000                     _T2CONbits	set	4042
  1029  0000                     _T0CONbits	set	4053
  1030  0000                     _RCONbits	set	4048
  1031  0000                     _OSCTUNEbits	set	3995
  1032  0000                     _PIR3	set	4004
  1033  0000                     _PIR2	set	4001
  1034  0000                     _PIR1	set	3998
  1035  0000                     _INTCONbits	set	4082
  1036  0000                     _SSP2CON2bits	set	3947
  1037  0000                     _SSP1CON2bits	set	4037
  1038  0000                     _SSP1ADD	set	4040
  1039  0000                     _ANCON0	set	4033
  1040  0000                     _ADRESL	set	4035
  1041  0000                     _ADRESH	set	4036
  1042  0000                     _ADCON1bits	set	4033
  1043  0000                     _ADCON0bits	set	4034
  1044  0000                     _SSP2CON1bits	set	3948
  1045  0000                     _SSP1CON1bits	set	4038
  1046  0000                     _SSP2STATbits	set	3949
  1047  0000                     _SSP1STATbits	set	4039
  1048  0000                     _PIE3bits	set	4003
  1049  0000                     _PIE1bits	set	3997
  1050  0000                     _PIR3bits	set	4004
  1051  0000                     _PIR1bits	set	3998
  1052  0000                     _IPR3bits	set	4005
  1053  0000                     _IPR1bits	set	3999
  1054  0000                     _PORTFbits	set	3973
  1055  0000                     _SSP2CON2	set	3947
  1056  0000                     _SSP1CON2	set	4037
  1057  0000                     _SSP2BUF	set	3951
  1058  0000                     _SSP2CON1	set	3948
  1059  0000                     _SSP2STAT	set	3949
  1060  0000                     _SSP1BUF	set	4041
  1061  0000                     _SSP1CON1	set	4038
  1062  0000                     _SSP1STAT	set	4039
  1063  0000                     _LATG	set	3983
  1064  0000                     _LATF	set	3982
  1065  0000                     _LATE	set	3981
  1066  0000                     _LATD	set	3980
  1067  0000                     _LATC	set	3979
  1068  0000                     _LATB	set	3978
  1069  0000                     _LATA	set	3977
  1070  0000                     _TRISG	set	3992
  1071  0000                     _TRISF	set	3991
  1072  0000                     _TRISE	set	3990
  1073  0000                     _TRISD	set	3989
  1074  0000                     _TRISC	set	3988
  1075  0000                     _TRISB	set	3987
  1076  0000                     _TRISA	set	3986
  1077  0000                     _PORTG	set	3974
  1078  0000                     _PORTF	set	3973
  1079  0000                     _PORTE	set	3972
  1080  0000                     _PORTD	set	3971
  1081  0000                     _PORTC	set	3970
  1082  0000                     _PORTB	set	3969
  1083  0000                     _PORTA	set	3968
  1084  0000                     _RA3	set	31747
  1085  0000                     _RA2	set	31746
  1086  0000                     _RD7	set	31775
  1087  0000                     _RD5	set	31773
  1088  0000                     _TRISD7	set	31919
  1089  0000                     _TRISD5	set	31917
  1090  0000                     _TRISA3	set	31891
  1091  0000                     _TRISA2	set	31890
  1092  0000                     _GODONE	set	32273
  1093  0000                     _ADON	set	32272
  1094  00FE9F                     STR_34:
  1095  00FE9F  50                 	db	80	;'P'
  1096  00FEA0  72                 	db	114	;'r'
  1097  00FEA1  65                 	db	101	;'e'
  1098  00FEA2  73                 	db	115	;'s'
  1099  00FEA3  73                 	db	115	;'s'
  1100  00FEA4  20                 	db	32
  1101  00FEA5  75                 	db	117	;'u'
  1102  00FEA6  70                 	db	112	;'p'
  1103  00FEA7  20                 	db	32
  1104  00FEA8  66                 	db	102	;'f'
  1105  00FEA9  6F                 	db	111	;'o'
  1106  00FEAA  72                 	db	114	;'r'
  1107  00FEAB  20                 	db	32
  1108  00FEAC  49                 	db	73	;'I'
  1109  00FEAD  52                 	db	82	;'R'
  1110  00FEAE  20                 	db	32
  1111  00FEAF  73                 	db	115	;'s'
  1112  00FEB0  63                 	db	99	;'c'
  1113  00FEB1  61                 	db	97	;'a'
  1114  00FEB2  6E                 	db	110	;'n'
  1115  00FEB3  20                 	db	32
  1116  00FEB4  6D                 	db	109	;'m'
  1117  00FEB5  6F                 	db	111	;'o'
  1118  00FEB6  64                 	db	100	;'d'
  1119  00FEB7  65                 	db	101	;'e'
  1120  00FEB8  2C                 	db	44
  1121  00FEB9  0A                 	db	10
  1122  00FEBA  00                 	db	0
  1123  00FEBB                     STR_32:
  1124  00FEBB  50                 	db	80	;'P'
  1125  00FEBC  72                 	db	114	;'r'
  1126  00FEBD  65                 	db	101	;'e'
  1127  00FEBE  73                 	db	115	;'s'
  1128  00FEBF  73                 	db	115	;'s'
  1129  00FEC0  20                 	db	32
  1130  00FEC1  72                 	db	114	;'r'
  1131  00FEC2  69                 	db	105	;'i'
  1132  00FEC3  67                 	db	103	;'g'
  1133  00FEC4  68                 	db	104	;'h'
  1134  00FEC5  74                 	db	116	;'t'
  1135  00FEC6  20                 	db	32
  1136  00FEC7  66                 	db	102	;'f'
  1137  00FEC8  6F                 	db	111	;'o'
  1138  00FEC9  72                 	db	114	;'r'
  1139  00FECA  20                 	db	32
  1140  00FECB  35                 	db	53	;'5'
  1141  00FECC  6D                 	db	109	;'m'
  1142  00FECD  0A                 	db	10
  1143  00FECE  20                 	db	32
  1144  00FECF  64                 	db	100	;'d'
  1145  00FED0  72                 	db	114	;'r'
  1146  00FED1  69                 	db	105	;'i'
  1147  00FED2  76                 	db	118	;'v'
  1148  00FED3  65                 	db	101	;'e'
  1149  00FED4  2C                 	db	44
  1150  00FED5  0A                 	db	10
  1151  00FED6  00                 	db	0
  1152  00FED7                     STR_62:
  1153  00FED7  54                 	db	84	;'T'
  1154  00FED8  68                 	db	104	;'h'
  1155  00FED9  65                 	db	101	;'e'
  1156  00FEDA  20                 	db	32
  1157  00FEDB  74                 	db	116	;'t'
  1158  00FEDC  61                 	db	97	;'a'
  1159  00FEDD  72                 	db	114	;'r'
  1160  00FEDE  67                 	db	103	;'g'
  1161  00FEDF  65                 	db	101	;'e'
  1162  00FEE0  74                 	db	116	;'t'
  1163  00FEE1  20                 	db	32
  1164  00FEE2  64                 	db	100	;'d'
  1165  00FEE3  69                 	db	105	;'i'
  1166  00FEE4  73                 	db	115	;'s'
  1167  00FEE5  74                 	db	116	;'t'
  1168  00FEE6  61                 	db	97	;'a'
  1169  00FEE7  6E                 	db	110	;'n'
  1170  00FEE8  63                 	db	99	;'c'
  1171  00FEE9  65                 	db	101	;'e'
  1172  00FEEA  20                 	db	32
  1173  00FEEB  69                 	db	105	;'i'
  1174  00FEEC  73                 	db	115	;'s'
  1175  00FEED  3A                 	db	58	;':'
  1176  00FEEE  20                 	db	32
  1177  00FEEF  25                 	db	37
  1178  00FEF0  64                 	db	100	;'d'
  1179  00FEF1  0A                 	db	10
  1180  00FEF2  00                 	db	0
  1181  00FEF3                     STR_35:
  1182  00FEF3  50                 	db	80	;'P'
  1183  00FEF4  72                 	db	114	;'r'
  1184  00FEF5  65                 	db	101	;'e'
  1185  00FEF6  73                 	db	115	;'s'
  1186  00FEF7  73                 	db	115	;'s'
  1187  00FEF8  20                 	db	32
  1188  00FEF9  6C                 	db	108	;'l'
  1189  00FEFA  65                 	db	101	;'e'
  1190  00FEFB  66                 	db	102	;'f'
  1191  00FEFC  74                 	db	116	;'t'
  1192  00FEFD  20                 	db	32
  1193  00FEFE  66                 	db	102	;'f'
  1194  00FEFF  6F                 	db	111	;'o'
  1195  00FF00  72                 	db	114	;'r'
  1196  00FF01  20                 	db	32
  1197  00FF02  77                 	db	119	;'w'
  1198  00FF03  61                 	db	97	;'a'
  1199  00FF04  6C                 	db	108	;'l'
  1200  00FF05  6C                 	db	108	;'l'
  1201  00FF06  20                 	db	32
  1202  00FF07  66                 	db	102	;'f'
  1203  00FF08  6F                 	db	111	;'o'
  1204  00FF09  6C                 	db	108	;'l'
  1205  00FF0A  6C                 	db	108	;'l'
  1206  00FF0B  6F                 	db	111	;'o'
  1207  00FF0C  77                 	db	119	;'w'
  1208  00FF0D  0A                 	db	10
  1209  00FF0E  00                 	db	0
  1210  00FF0F                     STR_13:
  1211  00FF0F  0A                 	db	10
  1212  00FF10  54                 	db	84	;'T'
  1213  00FF11  68                 	db	104	;'h'
  1214  00FF12  65                 	db	101	;'e'
  1215  00FF13  20                 	db	32
  1216  00FF14  43                 	db	67	;'C'
  1217  00FF15  6C                 	db	108	;'l'
  1218  00FF16  6F                 	db	111	;'o'
  1219  00FF17  73                 	db	115	;'s'
  1220  00FF18  65                 	db	101	;'e'
  1221  00FF19  73                 	db	115	;'s'
  1222  00FF1A  20                 	db	32
  1223  00FF1B  6F                 	db	111	;'o'
  1224  00FF1C  62                 	db	98	;'b'
  1225  00FF1D  6A                 	db	106	;'j'
  1226  00FF1E  65                 	db	101	;'e'
  1227  00FF1F  63                 	db	99	;'c'
  1228  00FF20  74                 	db	116	;'t'
  1229  00FF21  20                 	db	32
  1230  00FF22  28                 	db	40
  1231  00FF23  6D                 	db	109	;'m'
  1232  00FF24  6D                 	db	109	;'m'
  1233  00FF25  29                 	db	41
  1234  00FF26  3A                 	db	58	;':'
  1235  00FF27  20                 	db	32
  1236  00FF28  25                 	db	37
  1237  00FF29  64                 	db	100	;'d'
  1238  00FF2A  00                 	db	0
  1239  00FF2B                     STR_33:
  1240  00FF2B  50                 	db	80	;'P'
  1241  00FF2C  72                 	db	114	;'r'
  1242  00FF2D  65                 	db	101	;'e'
  1243  00FF2E  73                 	db	115	;'s'
  1244  00FF2F  73                 	db	115	;'s'
  1245  00FF30  20                 	db	32
  1246  00FF31  64                 	db	100	;'d'
  1247  00FF32  6F                 	db	111	;'o'
  1248  00FF33  77                 	db	119	;'w'
  1249  00FF34  6E                 	db	110	;'n'
  1250  00FF35  20                 	db	32
  1251  00FF36  66                 	db	102	;'f'
  1252  00FF37  6F                 	db	111	;'o'
  1253  00FF38  72                 	db	114	;'r'
  1254  00FF39  0A                 	db	10
  1255  00FF3A  73                 	db	115	;'s'
  1256  00FF3B  71                 	db	113	;'q'
  1257  00FF3C  72                 	db	114	;'r'
  1258  00FF3D  20                 	db	32
  1259  00FF3E  64                 	db	100	;'d'
  1260  00FF3F  72                 	db	114	;'r'
  1261  00FF40  69                 	db	105	;'i'
  1262  00FF41  76                 	db	118	;'v'
  1263  00FF42  65                 	db	101	;'e'
  1264  00FF43  2C                 	db	44
  1265  00FF44  0A                 	db	10
  1266  00FF45  00                 	db	0
  1267  00FF46                     STR_51:
  1268  00FF46  53                 	db	83	;'S'
  1269  00FF47  51                 	db	81	;'Q'
  1270  00FF48  55                 	db	85	;'U'
  1271  00FF49  41                 	db	65	;'A'
  1272  00FF4A  52                 	db	82	;'R'
  1273  00FF4B  45                 	db	69	;'E'
  1274  00FF4C  20                 	db	32
  1275  00FF4D  44                 	db	68	;'D'
  1276  00FF4E  52                 	db	82	;'R'
  1277  00FF4F  49                 	db	73	;'I'
  1278  00FF50  56                 	db	86	;'V'
  1279  00FF51  45                 	db	69	;'E'
  1280  00FF52  20                 	db	32
  1281  00FF53  4D                 	db	77	;'M'
  1282  00FF54  4F                 	db	79	;'O'
  1283  00FF55  44                 	db	68	;'D'
  1284  00FF56  45                 	db	69	;'E'
  1285  00FF57  20                 	db	32
  1286  00FF58  33                 	db	51	;'3'
  1287  00FF59  21                 	db	33
  1288  00FF5A  20                 	db	32
  1289  00FF5B  0A                 	db	10
  1290  00FF5C  00                 	db	0
  1291  00FF5D                     STR_41:
  1292  00FF5D  54                 	db	84	;'T'
  1293  00FF5E  72                 	db	114	;'r'
  1294  00FF5F  61                 	db	97	;'a'
  1295  00FF60  76                 	db	118	;'v'
  1296  00FF61  65                 	db	101	;'e'
  1297  00FF62  6C                 	db	108	;'l'
  1298  00FF63  65                 	db	101	;'e'
  1299  00FF64  64                 	db	100	;'d'
  1300  00FF65  20                 	db	32
  1301  00FF66  44                 	db	68	;'D'
  1302  00FF67  69                 	db	105	;'i'
  1303  00FF68  73                 	db	115	;'s'
  1304  00FF69  74                 	db	116	;'t'
  1305  00FF6A  61                 	db	97	;'a'
  1306  00FF6B  6E                 	db	110	;'n'
  1307  00FF6C  63                 	db	99	;'c'
  1308  00FF6D  65                 	db	101	;'e'
  1309  00FF6E  3A                 	db	58	;':'
  1310  00FF6F  0A                 	db	10
  1311  00FF70  25                 	db	37
  1312  00FF71  64                 	db	100	;'d'
  1313  00FF72  00                 	db	0
  1314  00FF73                     STR_29:
  1315  00FF73  0A                 	db	10
  1316  00FF74  53                 	db	83	;'S'
  1317  00FF75  74                 	db	116	;'t'
  1318  00FF76  65                 	db	101	;'e'
  1319  00FF77  70                 	db	112	;'p'
  1320  00FF78  73                 	db	115	;'s'
  1321  00FF79  20                 	db	32
  1322  00FF7A  54                 	db	84	;'T'
  1323  00FF7B  72                 	db	114	;'r'
  1324  00FF7C  61                 	db	97	;'a'
  1325  00FF7D  76                 	db	118	;'v'
  1326  00FF7E  65                 	db	101	;'e'
  1327  00FF7F  6C                 	db	108	;'l'
  1328  00FF80  6C                 	db	108	;'l'
  1329  00FF81  65                 	db	101	;'e'
  1330  00FF82  64                 	db	100	;'d'
  1331  00FF83  3A                 	db	58	;':'
  1332  00FF84  20                 	db	32
  1333  00FF85  25                 	db	37
  1334  00FF86  64                 	db	100	;'d'
  1335  00FF87  00                 	db	0
  1336  00FF88                     STR_12:
  1337  00FF88  53                 	db	83	;'S'
  1338  00FF89  74                 	db	116	;'t'
  1339  00FF8A  65                 	db	101	;'e'
  1340  00FF8B  70                 	db	112	;'p'
  1341  00FF8C  70                 	db	112	;'p'
  1342  00FF8D  65                 	db	101	;'e'
  1343  00FF8E  64                 	db	100	;'d'
  1344  00FF8F  20                 	db	32
  1345  00FF90  33                 	db	51	;'3'
  1346  00FF91  36                 	db	54	;'6'
  1347  00FF92  30                 	db	48	;'0'
  1348  00FF93  20                 	db	32
  1349  00FF94  64                 	db	100	;'d'
  1350  00FF95  65                 	db	101	;'e'
  1351  00FF96  67                 	db	103	;'g'
  1352  00FF97  72                 	db	114	;'r'
  1353  00FF98  65                 	db	101	;'e'
  1354  00FF99  65                 	db	101	;'e'
  1355  00FF9A  73                 	db	115	;'s'
  1356  00FF9B  00                 	db	0
  1357  00FF9C                     STR_2:
  1358  00FF9C  20                 	db	32
  1359  00FF9D  20                 	db	32
  1360  00FF9E  20                 	db	32
  1361  00FF9F  20                 	db	32
  1362  00FFA0  20                 	db	32
  1363  00FFA1  20                 	db	32
  1364  00FFA2  20                 	db	32
  1365  00FFA3  20                 	db	32
  1366  00FFA4  20                 	db	32
  1367  00FFA5  20                 	db	32
  1368  00FFA6  20                 	db	32
  1369  00FFA7  20                 	db	32
  1370  00FFA8  20                 	db	32
  1371  00FFA9  20                 	db	32
  1372  00FFAA  20                 	db	32
  1373  00FFAB  20                 	db	32
  1374  00FFAC  20                 	db	32
  1375  00FFAD  0A                 	db	10
  1376  00FFAE  00                 	db	0
  1377  00FFAF                     STR_14:
  1378  00FFAF  0A                 	db	10
  1379  00FFB0  47                 	db	71	;'G'
  1380  00FFB1  6F                 	db	111	;'o'
  1381  00FFB2  69                 	db	105	;'i'
  1382  00FFB3  6E                 	db	110	;'n'
  1383  00FFB4  67                 	db	103	;'g'
  1384  00FFB5  20                 	db	32
  1385  00FFB6  62                 	db	98	;'b'
  1386  00FFB7  61                 	db	97	;'a'
  1387  00FFB8  63                 	db	99	;'c'
  1388  00FFB9  6B                 	db	107	;'k'
  1389  00FFBA  20                 	db	32
  1390  00FFBB  74                 	db	116	;'t'
  1391  00FFBC  6F                 	db	111	;'o'
  1392  00FFBD  3A                 	db	58	;':'
  1393  00FFBE  20                 	db	32
  1394  00FFBF  25                 	db	37
  1395  00FFC0  64                 	db	100	;'d'
  1396  00FFC1  00                 	db	0
  1397  00FFC2                     STR_3:
  1398  00FFC2  53                 	db	83	;'S'
  1399  00FFC3  65                 	db	101	;'e'
  1400  00FFC4  6E                 	db	110	;'n'
  1401  00FFC5  73                 	db	115	;'s'
  1402  00FFC6  6F                 	db	111	;'o'
  1403  00FFC7  72                 	db	114	;'r'
  1404  00FFC8  20                 	db	32
  1405  00FFC9  4D                 	db	77	;'M'
  1406  00FFCA  6F                 	db	111	;'o'
  1407  00FFCB  76                 	db	118	;'v'
  1408  00FFCC  69                 	db	105	;'i'
  1409  00FFCD  6E                 	db	110	;'n'
  1410  00FFCE  67                 	db	103	;'g'
  1411  00FFCF  21                 	db	33
  1412  00FFD0  0A                 	db	10
  1413  00FFD1  00                 	db	0
  1414  00FFD2                     STR_63:
  1415  00FFD2  41                 	db	65	;'A'
  1416  00FFD3  44                 	db	68	;'D'
  1417  00FFD4  43                 	db	67	;'C'
  1418  00FFD5  20                 	db	32
  1419  00FFD6  41                 	db	65	;'A'
  1420  00FFD7  56                 	db	86	;'V'
  1421  00FFD8  45                 	db	69	;'E'
  1422  00FFD9  52                 	db	82	;'R'
  1423  00FFDA  41                 	db	65	;'A'
  1424  00FFDB  47                 	db	71	;'G'
  1425  00FFDC  45                 	db	69	;'E'
  1426  00FFDD  20                 	db	32
  1427  00FFDE  25                 	db	37
  1428  00FFDF  64                 	db	100	;'d'
  1429  00FFE0  0A                 	db	10
  1430  00FFE1  00                 	db	0
  1431  00FFE2                     STR_31:
  1432  00FFE2  52                 	db	82	;'R'
  1433  00FFE3  6F                 	db	111	;'o'
  1434  00FFE4  62                 	db	98	;'b'
  1435  00FFE5  6F                 	db	111	;'o'
  1436  00FFE6  74                 	db	116	;'t'
  1437  00FFE7  20                 	db	32
  1438  00FFE8  52                 	db	82	;'R'
  1439  00FFE9  65                 	db	101	;'e'
  1440  00FFEA  61                 	db	97	;'a'
  1441  00FFEB  64                 	db	100	;'d'
  1442  00FFEC  79                 	db	121	;'y'
  1443  00FFED  21                 	db	33
  1444  00FFEE  20                 	db	32
  1445  00FFEF  0A                 	db	10
  1446  00FFF0  00                 	db	0
  1447  00FFF1                     STR_52:
  1448  00FFF1  54                 	db	84	;'T'
  1449  00FFF2  6F                 	db	111	;'o'
  1450  00FFF3  74                 	db	116	;'t'
  1451  00FFF4  61                 	db	97	;'a'
  1452  00FFF5  6C                 	db	108	;'l'
  1453  00FFF6  3A                 	db	58	;':'
  1454  00FFF7  20                 	db	32
  1455  00FFF8  25                 	db	37
  1456  00FFF9  64                 	db	100	;'d'
  1457  00FFFA  0A                 	db	10
  1458  00FFFB  00                 	db	0
  1459  00FFFC                     STR_1:
  1460  00FFFC  25                 	db	37
  1461  00FFFD  63                 	db	99	;'c'
  1462  00FFFE  00                 	db	0
  1463  0000                     
  1464                           ; #config settings
  1465  00FFFF  00                 	db	0	; dummy byte at the end
  1466  0000                     
  1467                           	psect	cinit
  1468  0145C6                     __pcinit:
  1469                           	opt stack 0
  1470  0145C6                     start_initialization:
  1471                           	opt stack 0
  1472  0145C6                     __initialization:
  1473                           	opt stack 0
  1474                           
  1475                           ; Initialize objects allocated to BANK1 (21 bytes)
  1476                           ; load TBLPTR registers with __pidataBANK1
  1477  0145C6  0EA8               	movlw	low __pidataBANK1
  1478  0145C8  6EF6               	movwf	tblptrl,c
  1479  0145CA  0E5F               	movlw	high __pidataBANK1
  1480  0145CC  6EF7               	movwf	tblptrh,c
  1481  0145CE  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1482  0145D0  6EF8               	movwf	tblptru,c
  1483  0145D2  EE01  F0E5         	lfsr	0,__pdataBANK1
  1484  0145D6  EE10 F015          	lfsr	1,21
  1485  0145DA                     copy_data0:
  1486  0145DA  0009               	tblrd		*+
  1487  0145DC  CFF5 FFEE          	movff	tablat,postinc0
  1488  0145E0  50E5               	movf	postdec1,w,c
  1489  0145E2  50E1               	movf	fsr1l,w,c
  1490  0145E4  E1FA               	bnz	copy_data0
  1491                           
  1492                           ; Initialize objects allocated to COMRAM (12 bytes)
  1493                           ; load TBLPTR registers with __pidataCOMRAM
  1494  0145E6  0E04               	movlw	low __pidataCOMRAM
  1495  0145E8  6EF6               	movwf	tblptrl,c
  1496  0145EA  0E61               	movlw	high __pidataCOMRAM
  1497  0145EC  6EF7               	movwf	tblptrh,c
  1498  0145EE  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1499  0145F0  6EF8               	movwf	tblptru,c
  1500  0145F2  EE00  F045         	lfsr	0,__pdataCOMRAM
  1501  0145F6  EE10 F00C          	lfsr	1,12
  1502  0145FA                     copy_data1:
  1503  0145FA  0009               	tblrd		*+
  1504  0145FC  CFF5 FFEE          	movff	tablat,postinc0
  1505  014600  50E5               	movf	postdec1,w,c
  1506  014602  50E1               	movf	fsr1l,w,c
  1507  014604  E1FA               	bnz	copy_data1
  1508                           
  1509                           ; Clear objects allocated to BIGRAM (300 bytes)
  1510  014606  EE03  F018         	lfsr	0,__pbssBIGRAM
  1511  01460A  EE11 F02C          	lfsr	1,300
  1512  01460E                     clear_0:
  1513  01460E  6AEE               	clrf	postinc0,c
  1514  014610  50E5               	movf	postdec1,w,c
  1515  014612  50E1               	movf	fsr1l,w,c
  1516  014614  E1FC               	bnz	clear_0
  1517  014616  50E2               	movf	fsr1h,w,c
  1518  014618  E1FA               	bnz	clear_0
  1519                           
  1520                           ; Clear objects allocated to BANK2 (251 bytes)
  1521  01461A  EE02  F000         	lfsr	0,__pbssBANK2
  1522  01461E  0EFB               	movlw	251
  1523  014620                     clear_1:
  1524  014620  6AEE               	clrf	postinc0,c
  1525  014622  06E8               	decf	wreg,f,c
  1526  014624  E1FD               	bnz	clear_1
  1527                           
  1528                           ; Clear objects allocated to BANK1 (229 bytes)
  1529  014626  EE01  F000         	lfsr	0,__pbssBANK1
  1530  01462A  0EE5               	movlw	229
  1531  01462C                     clear_2:
  1532  01462C  6AEE               	clrf	postinc0,c
  1533  01462E  06E8               	decf	wreg,f,c
  1534  014630  E1FD               	bnz	clear_2
  1535                           
  1536                           ; Clear objects allocated to BANK0 (16 bytes)
  1537  014632  EE00  F0E6         	lfsr	0,__pbssBANK0
  1538  014636  0E10               	movlw	16
  1539  014638                     clear_3:
  1540  014638  6AEE               	clrf	postinc0,c
  1541  01463A  06E8               	decf	wreg,f,c
  1542  01463C  E1FD               	bnz	clear_3
  1543                           
  1544                           ; Clear objects allocated to COMRAM (28 bytes)
  1545  01463E  EE00  F029         	lfsr	0,__pbssCOMRAM
  1546  014642  0E1C               	movlw	28
  1547  014644                     clear_4:
  1548  014644  6AEE               	clrf	postinc0,c
  1549  014646  06E8               	decf	wreg,f,c
  1550  014648  E1FD               	bnz	clear_4
  1551  01464A                     end_of_initialization:
  1552                           	opt stack 0
  1553  01464A                     __end_of__initialization:
  1554                           	opt stack 0
  1555  01464A  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1556  01464C  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1557  01464E  0100               	movlb	0
  1558  014650  EF00  F080         	goto	_main	;jump to C main() function
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           postinc0	equ	0xFEE
  1564                           wreg	equ	0xFE8
  1565                           postdec1	equ	0xFE5
  1566                           fsr1h	equ	0xFE2
  1567                           fsr1l	equ	0xFE1
  1568                           
  1569                           	psect	bssCOMRAM
  1570  000029                     __pbssCOMRAM:
  1571                           	opt stack 0
  1572  000029                     _readIndex:
  1573                           	opt stack 0
  1574  000029                     	ds	2
  1575  00002B                     _Close_Pos:
  1576                           	opt stack 0
  1577  00002B                     	ds	2
  1578  00002D                     _Motor_Count:
  1579                           	opt stack 0
  1580  00002D                     	ds	2
  1581  00002F                     _T_VAR:
  1582                           	opt stack 0
  1583  00002F                     	ds	2
  1584  000031                     _Current_Dist:
  1585                           	opt stack 0
  1586  000031                     	ds	2
  1587  000033                     _val:
  1588                           	opt stack 0
  1589  000033                     	ds	2
  1590  000035                     _COUNTER:
  1591                           	opt stack 0
  1592  000035                     	ds	2
  1593  000037                     HMI_GRender@a:
  1594                           	opt stack 0
  1595  000037                     	ds	2
  1596  000039                     _gBackcolour:
  1597                           	opt stack 0
  1598  000039                     	ds	2
  1599  00003B                     _BumpSensor:
  1600                           	opt stack 0
  1601  00003B                     	ds	1
  1602  00003C                     Event_TestButton@j:
  1603                           	opt stack 0
  1604  00003C                     	ds	1
  1605  00003D                     Timer2_Init@PRE:
  1606                           	opt stack 0
  1607  00003D                     	ds	1
  1608  00003E                     Timer0_Init@PRE:
  1609                           	opt stack 0
  1610  00003E                     	ds	1
  1611  00003F                     _INDEX:
  1612                           	opt stack 0
  1613  00003F                     	ds	1
  1614  000040                     rand@screw:
  1615                           	opt stack 0
  1616  000040                     	ds	1
  1617  000041                     OutSeg@a:
  1618                           	opt stack 0
  1619  000041                     	ds	1
  1620  000042                     OutSeg@segset:
  1621                           	opt stack 0
  1622  000042                     	ds	1
  1623  000043                     OutSeg@cur:
  1624                           	opt stack 0
  1625  000043                     	ds	1
  1626  000044                     _clearall:
  1627                           	opt stack 0
  1628  000044                     	ds	1
  1629                           tblptru	equ	0xFF8
  1630                           tblptrh	equ	0xFF7
  1631                           tblptrl	equ	0xFF6
  1632                           tablat	equ	0xFF5
  1633                           postinc0	equ	0xFEE
  1634                           wreg	equ	0xFE8
  1635                           postdec1	equ	0xFE5
  1636                           fsr1h	equ	0xFE2
  1637                           fsr1l	equ	0xFE1
  1638                           
  1639                           	psect	dataCOMRAM
  1640  000045                     __pdataCOMRAM:
  1641                           	opt stack 0
  1642  000045                     _gCursor:
  1643                           	opt stack 0
  1644  000045                     	ds	4
  1645  000049                     _numReadings:
  1646                           	opt stack 0
  1647  000049                     	ds	2
  1648  00004B                     _Low_Sensor:
  1649                           	opt stack 0
  1650  00004B                     	ds	2
  1651  00004D                     _Bus_State:
  1652                           	opt stack 0
  1653  00004D                     	ds	1
  1654  00004E                     _change:
  1655                           	opt stack 0
  1656  00004E                     	ds	1
  1657  00004F                     _l:
  1658                           	opt stack 0
  1659  00004F                     	ds	1
  1660  000050                     _w:
  1661                           	opt stack 0
  1662  000050                     	ds	1
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           postdec1	equ	0xFE5
  1670                           fsr1h	equ	0xFE2
  1671                           fsr1l	equ	0xFE1
  1672                           
  1673                           	psect	bssBANK0
  1674  0000E6                     __pbssBANK0:
  1675                           	opt stack 0
  1676  0000E6                     _lQueue:
  1677                           	opt stack 0
  1678  0000E6                     	ds	3
  1679  0000E9                     _average:
  1680                           	opt stack 0
  1681  0000E9                     	ds	2
  1682  0000EB                     _mode:
  1683                           	opt stack 0
  1684  0000EB                     	ds	2
  1685  0000ED                     _pShiftVal:
  1686                           	opt stack 0
  1687  0000ED                     	ds	2
  1688  0000EF                     _lMotor:
  1689                           	opt stack 0
  1690  0000EF                     	ds	2
  1691  0000F1                     _lCurrent:
  1692                           	opt stack 0
  1693  0000F1                     	ds	2
  1694  0000F3                     Timer2_Init@INDEX:
  1695                           	opt stack 0
  1696  0000F3                     	ds	1
  1697  0000F4                     _lBufferY:
  1698                           	opt stack 0
  1699  0000F4                     	ds	1
  1700  0000F5                     _lBufferX:
  1701                           	opt stack 0
  1702  0000F5                     	ds	1
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           fsr1h	equ	0xFE2
  1711                           fsr1l	equ	0xFE1
  1712                           
  1713                           	psect	bssBANK1
  1714  000100                     __pbssBANK1:
  1715                           	opt stack 0
  1716  000100                     Timer2_Init@DIV:
  1717                           	opt stack 0
  1718  000100                     	ds	4
  1719  000104                     Timer0_Init@DIV:
  1720                           	opt stack 0
  1721  000104                     	ds	4
  1722  000108                     _gISR:
  1723                           	opt stack 0
  1724  000108                     	ds	3
  1725  00010B                     _lStepFunction:
  1726                           	opt stack 0
  1727  00010B                     	ds	3
  1728  00010E                     _I2C2_More:
  1729                           	opt stack 0
  1730  00010E                     	ds	3
  1731  000111                     _I2C1_More:
  1732                           	opt stack 0
  1733  000111                     	ds	3
  1734  000114                     _I2C2_Done:
  1735                           	opt stack 0
  1736  000114                     	ds	3
  1737  000117                     _I2C1_Done:
  1738                           	opt stack 0
  1739  000117                     	ds	3
  1740  00011A                     _errno:
  1741                           	opt stack 0
  1742  00011A                     	ds	2
  1743  00011C                     _test:
  1744                           	opt stack 0
  1745  00011C                     	ds	2
  1746  00011E                     _timercount:
  1747                           	opt stack 0
  1748  00011E                     	ds	2
  1749  000120                     _x:
  1750                           	opt stack 0
  1751  000120                     	ds	2
  1752  000122                     _total:
  1753                           	opt stack 0
  1754  000122                     	ds	2
  1755  000124                     _thisReading:
  1756                           	opt stack 0
  1757  000124                     	ds	2
  1758  000126                     _Sensor_Observe_Fin:
  1759                           	opt stack 0
  1760  000126                     	ds	2
  1761  000128                     _CW_Count:
  1762                           	opt stack 0
  1763  000128                     	ds	2
  1764  00012A                     _CCW_Count:
  1765                           	opt stack 0
  1766  00012A                     	ds	2
  1767  00012C                     _count:
  1768                           	opt stack 0
  1769  00012C                     	ds	2
  1770  00012E                     _ADC_Reading:
  1771                           	opt stack 0
  1772  00012E                     	ds	2
  1773  000130                     _BumpState:
  1774                           	opt stack 0
  1775  000130                     	ds	2
  1776  000132                     _mod:
  1777                           	opt stack 0
  1778  000132                     	ds	2
  1779  000134                     _Square_Dist:
  1780                           	opt stack 0
  1781  000134                     	ds	2
  1782  000136                     _Current_Dist2:
  1783                           	opt stack 0
  1784  000136                     	ds	2
  1785  000138                     _Current_Dist1:
  1786                           	opt stack 0
  1787  000138                     	ds	2
  1788  00013A                     SPI_Send9@dat:
  1789                           	opt stack 0
  1790  00013A                     	ds	2
  1791  00013C                     _Cliff_Left:
  1792                           	opt stack 0
  1793  00013C                     	ds	1
  1794  00013D                     _Cliff_Right:
  1795                           	opt stack 0
  1796  00013D                     	ds	1
  1797  00013E                     _Cliff_FLeft:
  1798                           	opt stack 0
  1799  00013E                     	ds	1
  1800  00013F                     _Cliff_FRight:
  1801                           	opt stack 0
  1802  00013F                     	ds	1
  1803  000140                     _u:
  1804                           	opt stack 0
  1805  000140                     	ds	1
  1806  000141                     _j:
  1807                           	opt stack 0
  1808  000141                     	ds	1
  1809  000142                     _i:
  1810                           	opt stack 0
  1811  000142                     	ds	1
  1812  000143                     _ADC_Initialised:
  1813                           	opt stack 0
  1814  000143                     	ds	1
  1815  000144                     _HMIBoard:
  1816                           	opt stack 0
  1817  000144                     	ds	58
  1818  00017E                     _SPI2:
  1819                           	opt stack 0
  1820  00017E                     	ds	11
  1821  000189                     _PortE:
  1822                           	opt stack 0
  1823  000189                     	ds	10
  1824  000193                     _PortD:
  1825                           	opt stack 0
  1826  000193                     	ds	10
  1827  00019D                     _PortB:
  1828                           	opt stack 0
  1829  00019D                     	ds	10
  1830  0001A7                     _PortC:
  1831                           	opt stack 0
  1832  0001A7                     	ds	10
  1833  0001B1                     _PortF:
  1834                           	opt stack 0
  1835  0001B1                     	ds	10
  1836  0001BB                     _I2C2T:
  1837                           	opt stack 0
  1838  0001BB                     	ds	7
  1839  0001C2                     _I2C1T:
  1840                           	opt stack 0
  1841  0001C2                     	ds	7
  1842  0001C9                     _ADC_AN3:
  1843                           	opt stack 0
  1844  0001C9                     	ds	5
  1845  0001CE                     _ADC_AN2:
  1846                           	opt stack 0
  1847  0001CE                     	ds	5
  1848  0001D3                     _ADC_AN1:
  1849                           	opt stack 0
  1850  0001D3                     	ds	5
  1851  0001D8                     _ADC_AN0:
  1852                           	opt stack 0
  1853  0001D8                     	ds	5
  1854  0001DD                     LCD_DrawRectangle@p4:
  1855                           	opt stack 0
  1856  0001DD                     	ds	4
  1857  0001E1                     LCD_DrawRectangle@p2:
  1858                           	opt stack 0
  1859  0001E1                     	ds	4
  1860                           tblptru	equ	0xFF8
  1861                           tblptrh	equ	0xFF7
  1862                           tblptrl	equ	0xFF6
  1863                           tablat	equ	0xFF5
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           postdec1	equ	0xFE5
  1867                           fsr1h	equ	0xFE2
  1868                           fsr1l	equ	0xFE1
  1869                           
  1870                           	psect	dataBANK1
  1871  0001E5                     __pdataBANK1:
  1872                           	opt stack 0
  1873  0001E5                     Console_Render@F6956:
  1874                           	opt stack 0
  1875  0001E5                     	ds	4
  1876  0001E9                     _gLineSize:
  1877                           	opt stack 0
  1878  0001E9                     	ds	4
  1879  0001ED                     _gCharSize:
  1880                           	opt stack 0
  1881  0001ED                     	ds	4
  1882  0001F1                     _countOff:
  1883                           	opt stack 0
  1884  0001F1                     	ds	2
  1885  0001F3                     _countOn:
  1886                           	opt stack 0
  1887  0001F3                     	ds	2
  1888  0001F5                     _gForecolour:
  1889                           	opt stack 0
  1890  0001F5                     	ds	2
  1891  0001F7                     	ds	1
  1892  0001F8                     	ds	1
  1893  0001F9                     	ds	1
  1894                           tblptru	equ	0xFF8
  1895                           tblptrh	equ	0xFF7
  1896                           tblptrl	equ	0xFF6
  1897                           tablat	equ	0xFF5
  1898                           postinc0	equ	0xFEE
  1899                           wreg	equ	0xFE8
  1900                           postdec1	equ	0xFE5
  1901                           fsr1h	equ	0xFE2
  1902                           fsr1l	equ	0xFE1
  1903                           
  1904                           	psect	bssBANK2
  1905  000200                     __pbssBANK2:
  1906                           	opt stack 0
  1907  000200                     _readings:
  1908                           	opt stack 0
  1909  000200                     	ds	100
  1910  000264                     _lCBuffer:
  1911                           	opt stack 0
  1912  000264                     	ds	30
  1913  000282                     Console_MakeField@Fill:
  1914                           	opt stack 0
  1915  000282                     	ds	70
  1916  0002C8                     _SPI1:
  1917                           	opt stack 0
  1918  0002C8                     	ds	11
  1919  0002D3                     _DIPSwitch:
  1920                           	opt stack 0
  1921  0002D3                     	ds	10
  1922  0002DD                     _TestButton:
  1923                           	opt stack 0
  1924  0002DD                     	ds	10
  1925  0002E7                     _PortG:
  1926                           	opt stack 0
  1927  0002E7                     	ds	10
  1928  0002F1                     _PortA:
  1929                           	opt stack 0
  1930  0002F1                     	ds	10
  1931                           tblptru	equ	0xFF8
  1932                           tblptrh	equ	0xFF7
  1933                           tblptrl	equ	0xFF6
  1934                           tablat	equ	0xFF5
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           postdec1	equ	0xFE5
  1938                           fsr1h	equ	0xFE2
  1939                           fsr1l	equ	0xFE1
  1940                           
  1941                           	psect	bssBIGRAM
  1942  000318                     __pbssBIGRAM:
  1943                           	opt stack 0
  1944  000318                     _lBuffer:
  1945                           	opt stack 0
  1946  000318                     	ds	300
  1947                           tblptru	equ	0xFF8
  1948                           tblptrh	equ	0xFF7
  1949                           tblptrl	equ	0xFF6
  1950                           tablat	equ	0xFF5
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           postdec1	equ	0xFE5
  1954                           fsr1h	equ	0xFE2
  1955                           fsr1l	equ	0xFE1
  1956                           
  1957                           	psect	cstackBANK3
  1958  000300                     __pcstackBANK3:
  1959                           	opt stack 0
  1960  000300                     _ADCAverage$15653:
  1961                           	opt stack 0
  1962                           
  1963                           ; 4 bytes @ 0x0
  1964  000300                     	ds	4
  1965  000304                     _ADCAverage$15654:
  1966                           	opt stack 0
  1967                           
  1968                           ; 4 bytes @ 0x4
  1969  000304                     	ds	4
  1970  000308                     _ADCAverage$15655:
  1971                           	opt stack 0
  1972                           
  1973                           ; 4 bytes @ 0x8
  1974  000308                     	ds	4
  1975  00030C                     _ADCAverage$15656:
  1976                           	opt stack 0
  1977                           
  1978                           ; 4 bytes @ 0xC
  1979  00030C                     	ds	4
  1980  000310                     _ADCAverage$15657:
  1981                           	opt stack 0
  1982                           
  1983                           ; 4 bytes @ 0x10
  1984  000310                     	ds	4
  1985  000314                     _ADCAverage$15658:
  1986                           	opt stack 0
  1987                           
  1988                           ; 4 bytes @ 0x14
  1989  000314                     	ds	4
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           postdec1	equ	0xFE5
  1997                           fsr1h	equ	0xFE2
  1998                           fsr1l	equ	0xFE1
  1999                           
  2000                           	psect	cstackBANK0
  2001  000060                     __pcstackBANK0:
  2002                           	opt stack 0
  2003  000060                     ??_Console_ClearCursor:
  2004  000060                     ??_Console_Init:
  2005  000060                     ??_Console_NewLine:
  2006  000060                     ??_Console_FormFeed:
  2007  000060                     ??_HMI_SetButton:
  2008  000060                     ??_InitADC:
  2009  000060                     ?_GetPortProperties:
  2010                           	opt stack 0
  2011  000060                     ?_GetPortPORT:
  2012                           	opt stack 0
  2013  000060                     ?_GetPortTRIS:
  2014                           	opt stack 0
  2015  000060                     ?_FunctReadADC:
  2016                           	opt stack 0
  2017  000060                     ?___wmul:
  2018                           	opt stack 0
  2019  000060                     ?___awdiv:
  2020                           	opt stack 0
  2021  000060                     ?___lwdiv:
  2022                           	opt stack 0
  2023  000060                     ?___fldiv:
  2024                           	opt stack 0
  2025  000060                     ?_frexp:
  2026                           	opt stack 0
  2027  000060                     ?___lldiv:
  2028                           	opt stack 0
  2029  000060                     ?___xxtofl:
  2030                           	opt stack 0
  2031  000060                     Mode_Set@pMode:
  2032                           	opt stack 0
  2033  000060                     ToSegment@pCHR:
  2034                           	opt stack 0
  2035  000060                     HMI_SetBar@pValue:
  2036                           	opt stack 0
  2037  000060                     eusartSend@sendChar:
  2038                           	opt stack 0
  2039  000060                     Port_GetPin@pInput:
  2040                           	opt stack 0
  2041  000060                     Port_GetQuad@pInput:
  2042                           	opt stack 0
  2043  000060                     SPI_DisableISR@pInput:
  2044                           	opt stack 0
  2045  000060                     SPI_DCS@pInput:
  2046                           	opt stack 0
  2047  000060                     SPI_Send@pInput:
  2048                           	opt stack 0
  2049  000060                     Byte_SetBit@pInput:
  2050                           	opt stack 0
  2051  000060                     Byte_GetBit@pInput:
  2052                           	opt stack 0
  2053  000060                     Byte_SetZone@pInput:
  2054                           	opt stack 0
  2055  000060                     Byte_GetZone@pInput:
  2056                           	opt stack 0
  2057  000060                     Byte_SetByte@pInput:
  2058                           	opt stack 0
  2059  000060                     delay_ms@ms:
  2060                           	opt stack 0
  2061  000060                     delay_us@us:
  2062                           	opt stack 0
  2063  000060                     reverse@input:
  2064                           	opt stack 0
  2065  000060                     FunctReadADC@channel:
  2066                           	opt stack 0
  2067  000060                     ___wmul@multiplier:
  2068                           	opt stack 0
  2069  000060                     ___awdiv@dividend:
  2070                           	opt stack 0
  2071  000060                     ___lwdiv@dividend:
  2072                           	opt stack 0
  2073  000060                     MXK_Queue@pCallback:
  2074                           	opt stack 0
  2075  000060                     ___flge@ff1:
  2076                           	opt stack 0
  2077  000060                     ___lldiv@dividend:
  2078                           	opt stack 0
  2079  000060                     ___fldiv@b:
  2080                           	opt stack 0
  2081  000060                     ___xxtofl@val:
  2082                           	opt stack 0
  2083  000060                     frexp@value:
  2084                           	opt stack 0
  2085                           
  2086                           ; 4 bytes @ 0x0
  2087  000060                     	ds	1
  2088  000061                     HMI_SetSegments@pString:
  2089                           	opt stack 0
  2090  000061                     Drive@Speed:
  2091                           	opt stack 0
  2092  000061                     BangBang@RSpeedH:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0x1
  2096  000061                     	ds	1
  2097  000062                     GetPortProperties@pInput:
  2098                           	opt stack 0
  2099  000062                     GetPortPORT@pInput:
  2100                           	opt stack 0
  2101  000062                     GetPortTRIS@pInput:
  2102                           	opt stack 0
  2103  000062                     Port_GetPin@pPin:
  2104                           	opt stack 0
  2105  000062                     Port_GetQuad@pQuad:
  2106                           	opt stack 0
  2107  000062                     SPI_Send@pData:
  2108                           	opt stack 0
  2109  000062                     Byte_SetBit@pBit:
  2110                           	opt stack 0
  2111  000062                     Byte_GetBit@pBit:
  2112                           	opt stack 0
  2113  000062                     Byte_SetZone@pMax:
  2114                           	opt stack 0
  2115  000062                     Byte_GetZone@pMax:
  2116                           	opt stack 0
  2117  000062                     Byte_SetByte@pValue:
  2118                           	opt stack 0
  2119  000062                     Console_Init@x:
  2120                           	opt stack 0
  2121  000062                     Console_FormFeed@x:
  2122                           	opt stack 0
  2123  000062                     reverse@length:
  2124                           	opt stack 0
  2125  000062                     ___wmul@multiplicand:
  2126                           	opt stack 0
  2127  000062                     ___awdiv@divisor:
  2128                           	opt stack 0
  2129  000062                     ___lwdiv@divisor:
  2130                           	opt stack 0
  2131  000062                     delay_ms@u:
  2132                           	opt stack 0
  2133  000062                     delay_us@u:
  2134                           	opt stack 0
  2135  000062                     HMI_SetButton@reindex:
  2136                           	opt stack 0
  2137                           
  2138                           ; 4 bytes @ 0x2
  2139  000062                     	ds	1
  2140  000063                     ??_Port_GetPin:
  2141  000063                     ??_Port_GetQuad:
  2142  000063                     ??_Byte_GetBit:
  2143  000063                     LCD_Write@mode:
  2144                           	opt stack 0
  2145  000063                     Byte_SetBit@pValue:
  2146                           	opt stack 0
  2147  000063                     Byte_SetZone@pChunk:
  2148                           	opt stack 0
  2149  000063                     Byte_GetZone@pChunk:
  2150                           	opt stack 0
  2151  000063                     Console_Init@y:
  2152                           	opt stack 0
  2153  000063                     Console_FormFeed@y:
  2154                           	opt stack 0
  2155  000063                     OutSeg@pSegment:
  2156                           	opt stack 0
  2157  000063                     Drive@Rad:
  2158                           	opt stack 0
  2159  000063                     BangBang@RSpeedL:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x3
  2163  000063                     	ds	1
  2164  000064                     ??_Byte_SetBit:
  2165  000064                     ??_Console_IncrementCursor:
  2166  000064                     ??_OutSeg:
  2167  000064                     ??___xxtofl:
  2168  000064                     LCD_Write@value:
  2169                           	opt stack 0
  2170  000064                     Byte_GetBit@Output:
  2171                           	opt stack 0
  2172  000064                     Byte_SetZone@pChunkSize:
  2173                           	opt stack 0
  2174  000064                     Byte_GetZone@pChunkSize:
  2175                           	opt stack 0
  2176  000064                     reverse@tempVar:
  2177                           	opt stack 0
  2178  000064                     ___awdiv@counter:
  2179                           	opt stack 0
  2180  000064                     ___lwdiv@counter:
  2181                           	opt stack 0
  2182  000064                     HMI_SetSegments@in:
  2183                           	opt stack 0
  2184  000064                     ___wmul@product:
  2185                           	opt stack 0
  2186  000064                     frexp@eptr:
  2187                           	opt stack 0
  2188  000064                     ___flge@ff2:
  2189                           	opt stack 0
  2190  000064                     ___lldiv@divisor:
  2191                           	opt stack 0
  2192  000064                     ___fldiv@a:
  2193                           	opt stack 0
  2194                           
  2195                           ; 4 bytes @ 0x4
  2196  000064                     	ds	1
  2197  000065                     ??_Byte_GetZone:
  2198  000065                     ?_Console_MakeField:
  2199                           	opt stack 0
  2200  000065                     Set_Addr_Window@ys:
  2201                           	opt stack 0
  2202  000065                     Set_Rotation@m:
  2203                           	opt stack 0
  2204  000065                     Port_GetPin@Output:
  2205                           	opt stack 0
  2206  000065                     Port_GetQuad@Output:
  2207                           	opt stack 0
  2208  000065                     Byte_SetZone@pValue:
  2209                           	opt stack 0
  2210  000065                     ___awdiv@sign:
  2211                           	opt stack 0
  2212  000065                     LCD_Word_Write@value:
  2213                           	opt stack 0
  2214  000065                     reverse@iterator:
  2215                           	opt stack 0
  2216  000065                     BangBang@LSpeedH:
  2217                           	opt stack 0
  2218  000065                     ___lwdiv@quotient:
  2219                           	opt stack 0
  2220                           
  2221                           ; 2 bytes @ 0x5
  2222  000065                     	ds	1
  2223  000066                     ??_frexp:
  2224  000066                     ??_Byte_SetZone:
  2225  000066                     ?_UpdateDistance:
  2226                           	opt stack 0
  2227  000066                     Set_Addr_Window@xe:
  2228                           	opt stack 0
  2229  000066                     Set_Rotation@rotation:
  2230                           	opt stack 0
  2231  000066                     Byte_GetZone@MASK:
  2232                           	opt stack 0
  2233  000066                     OutSeg@pInput:
  2234                           	opt stack 0
  2235  000066                     HMI_SetButton@pValue:
  2236                           	opt stack 0
  2237  000066                     MXK_BlockSwitchTo@CUR:
  2238                           	opt stack 0
  2239  000066                     MXK_SwitchTo@CUR:
  2240                           	opt stack 0
  2241  000066                     Turn@Angle:
  2242                           	opt stack 0
  2243  000066                     ___awdiv@quotient:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x6
  2247  000066                     	ds	1
  2248  000067                     ??_Console_MakeField:
  2249  000067                     ?___lwmod:
  2250                           	opt stack 0
  2251  000067                     Set_Addr_Window@ye:
  2252                           	opt stack 0
  2253  000067                     Byte_GetZone@Offset:
  2254                           	opt stack 0
  2255  000067                     OutSeg@out:
  2256                           	opt stack 0
  2257  000067                     HMI_SetButton@v:
  2258                           	opt stack 0
  2259  000067                     MXK_BlockSwitchTo@pModule:
  2260                           	opt stack 0
  2261  000067                     MXK_SwitchTo@pModule:
  2262                           	opt stack 0
  2263  000067                     BangBang@LSpeedL:
  2264                           	opt stack 0
  2265  000067                     ___lwmod@dividend:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x7
  2269  000067                     	ds	1
  2270  000068                     ??___fldiv:
  2271  000068                     ??_Console_Tab:
  2272  000068                     ??_UpdateDistance:
  2273  000068                     ??___flge:
  2274  000068                     Set_Addr_Window@xs:
  2275                           	opt stack 0
  2276  000068                     Byte_GetZone@Output:
  2277                           	opt stack 0
  2278  000068                     ___xxtofl@sign:
  2279                           	opt stack 0
  2280  000068                     HMI_Render@a:
  2281                           	opt stack 0
  2282  000068                     Turn@C_Angle:
  2283                           	opt stack 0
  2284  000068                     ___lldiv@quotient:
  2285                           	opt stack 0
  2286                           
  2287                           ; 4 bytes @ 0x8
  2288  000068                     	ds	1
  2289  000069                     Byte_SetZone@Offset:
  2290                           	opt stack 0
  2291  000069                     ___xxtofl@exp:
  2292                           	opt stack 0
  2293  000069                     LCD_Fill@pColour:
  2294                           	opt stack 0
  2295  000069                     LCD_FillRectangle@pColour:
  2296                           	opt stack 0
  2297  000069                     Byte_GetPair@pInput:
  2298                           	opt stack 0
  2299  000069                     Console_MakeField@Index:
  2300                           	opt stack 0
  2301  000069                     ___lwmod@divisor:
  2302                           	opt stack 0
  2303                           
  2304                           ; 2 bytes @ 0x9
  2305  000069                     	ds	1
  2306  00006A                     Byte_SetZone@MASK:
  2307                           	opt stack 0
  2308  00006A                     Turn@Speed:
  2309                           	opt stack 0
  2310  00006A                     ___xxtofl@arg:
  2311                           	opt stack 0
  2312                           
  2313                           ; 4 bytes @ 0xA
  2314  00006A                     	ds	1
  2315  00006B                     LCD_Fill@i:
  2316                           	opt stack 0
  2317  00006B                     Byte_GetPair@pPair:
  2318                           	opt stack 0
  2319  00006B                     Console_MakeField@pInput:
  2320                           	opt stack 0
  2321  00006B                     ___lwmod@counter:
  2322                           	opt stack 0
  2323  00006B                     Byte_SetPair@pInput:
  2324                           	opt stack 0
  2325  00006B                     Byte_SetQuad@pInput:
  2326                           	opt stack 0
  2327  00006B                     LCD_FillRectangle@pPoint:
  2328                           	opt stack 0
  2329                           
  2330                           ; 4 bytes @ 0xB
  2331  00006B                     	ds	1
  2332  00006C                     LCD_Fill@j:
  2333                           	opt stack 0
  2334  00006C                     ___lldiv@counter:
  2335                           	opt stack 0
  2336  00006C                     ___fldiv@sign:
  2337                           	opt stack 0
  2338  00006C                     Word_GetPair@pInput:
  2339                           	opt stack 0
  2340  00006C                     itos@input:
  2341                           	opt stack 0
  2342  00006C                     Console_MakeField@Column:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0xC
  2346  00006C                     	ds	1
  2347  00006D                     Byte_SetPair@pPair:
  2348                           	opt stack 0
  2349  00006D                     Byte_SetQuad@pQuad:
  2350                           	opt stack 0
  2351  00006D                     Console_Tab@t:
  2352                           	opt stack 0
  2353  00006D                     Timer2_Init@pFrequency:
  2354                           	opt stack 0
  2355  00006D                     ___fldiv@rem:
  2356                           	opt stack 0
  2357                           
  2358                           ; 4 bytes @ 0xD
  2359  00006D                     	ds	1
  2360  00006E                     ?___flmul:
  2361                           	opt stack 0
  2362  00006E                     Byte_SetPair@pValue:
  2363                           	opt stack 0
  2364  00006E                     Byte_SetQuad@pValue:
  2365                           	opt stack 0
  2366  00006E                     Word_GetPair@pPair:
  2367                           	opt stack 0
  2368  00006E                     Console_Tab@i:
  2369                           	opt stack 0
  2370  00006E                     itos@destination:
  2371                           	opt stack 0
  2372  00006E                     _Console_MakeField$10974:
  2373                           	opt stack 0
  2374  00006E                     ___flmul@b:
  2375                           	opt stack 0
  2376                           
  2377                           ; 4 bytes @ 0xE
  2378  00006E                     	ds	1
  2379  00006F                     Console_Tab@c:
  2380                           	opt stack 0
  2381  00006F                     Port_SetPin@pInput:
  2382                           	opt stack 0
  2383  00006F                     Port_Set@pInput:
  2384                           	opt stack 0
  2385  00006F                     SPI_MinSpeed@pInput:
  2386                           	opt stack 0
  2387  00006F                     SPI_MaxSpeed@pInput:
  2388                           	opt stack 0
  2389  00006F                     Word_SetPair@pInput:
  2390                           	opt stack 0
  2391  00006F                     PortProperty_Valid@pInput:
  2392                           	opt stack 0
  2393  00006F                     LCD_FillRectangle@pSize:
  2394                           	opt stack 0
  2395                           
  2396                           ; 4 bytes @ 0xF
  2397  00006F                     	ds	1
  2398  000070                     ??_Console_PrintChar:
  2399  000070                     Console_MakeField@x:
  2400                           	opt stack 0
  2401  000070                     itos@Data:
  2402                           	opt stack 0
  2403                           
  2404                           ; 2 bytes @ 0x10
  2405  000070                     	ds	1
  2406  000071                     ??_Timer2_Init:
  2407  000071                     Port_SetPin@pPin:
  2408                           	opt stack 0
  2409  000071                     Port_Set@pValue:
  2410                           	opt stack 0
  2411  000071                     Word_SetPair@pPair:
  2412                           	opt stack 0
  2413  000071                     PortProperty_Valid@pPinDrive:
  2414                           	opt stack 0
  2415  000071                     Console_MakeField@y:
  2416                           	opt stack 0
  2417  000071                     ___fldiv@new_exp:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x11
  2421  000071                     	ds	1
  2422  000072                     ??_Port_Set:
  2423  000072                     Port_SetPin@pValue:
  2424                           	opt stack 0
  2425  000072                     Word_SetPair@pValue:
  2426                           	opt stack 0
  2427  000072                     PortProperty_Valid@pPin:
  2428                           	opt stack 0
  2429  000072                     LCD_DrawField@pField:
  2430                           	opt stack 0
  2431  000072                     itos@Length:
  2432                           	opt stack 0
  2433  000072                     Timer2_Init@RDIV:
  2434                           	opt stack 0
  2435  000072                     ___flmul@a:
  2436                           	opt stack 0
  2437                           
  2438                           ; 4 bytes @ 0x12
  2439  000072                     	ds	1
  2440  000073                     ??_PortProperty_Valid:
  2441  000073                     ??_LCD_FillRectangle:
  2442  000073                     Port_SetPin@Type:
  2443                           	opt stack 0
  2444  000073                     Console_PrintChar@pInput:
  2445                           	opt stack 0
  2446  000073                     ___fldiv@grs:
  2447                           	opt stack 0
  2448                           
  2449                           ; 4 bytes @ 0x13
  2450  000073                     	ds	1
  2451  000074                     LED_Set@pValue:
  2452                           	opt stack 0
  2453  000074                     putch@c:
  2454                           	opt stack 0
  2455  000074                     Port_TogglePin@pInput:
  2456                           	opt stack 0
  2457  000074                     itos@Out:
  2458                           	opt stack 0
  2459  000074                     LCD_DrawField@pPoint:
  2460                           	opt stack 0
  2461                           
  2462                           ; 4 bytes @ 0x14
  2463  000074                     	ds	1
  2464  000075                     ?_printf:
  2465                           	opt stack 0
  2466  000075                     LCD_FillRectangle@i:
  2467                           	opt stack 0
  2468  000075                     LED_Set@pLED:
  2469                           	opt stack 0
  2470  000075                     printf@f:
  2471                           	opt stack 0
  2472  000075                     PortProperty_Valid@Errors:
  2473                           	opt stack 0
  2474                           
  2475                           ; 16 bytes @ 0x15
  2476  000075                     	ds	1
  2477  000076                     ??___flmul:
  2478  000076                     LCD_FillRectangle@j:
  2479                           	opt stack 0
  2480  000076                     Port_TogglePin@pPin:
  2481                           	opt stack 0
  2482  000076                     HMI_SetNumber@pInput:
  2483                           	opt stack 0
  2484  000076                     Timer2_Init@pCPUClock:
  2485                           	opt stack 0
  2486                           
  2487                           ; 4 bytes @ 0x16
  2488  000076                     	ds	1
  2489  000077                     Port_TogglePin@Value:
  2490                           	opt stack 0
  2491  000077                     ___fldiv@bexp:
  2492                           	opt stack 0
  2493                           
  2494                           ; 1 bytes @ 0x17
  2495  000077                     	ds	1
  2496  000078                     LED_Toggle@pLED:
  2497                           	opt stack 0
  2498  000078                     ___fldiv@aexp:
  2499                           	opt stack 0
  2500  000078                     LCD_DrawField@pSize:
  2501                           	opt stack 0
  2502                           
  2503                           ; 4 bytes @ 0x18
  2504  000078                     	ds	1
  2505  000079                     ??_printf:
  2506  000079                     Event_DIPSwitch@pState:
  2507                           	opt stack 0
  2508  000079                     Event_TestButton@pState:
  2509                           	opt stack 0
  2510                           
  2511                           ; 1 bytes @ 0x19
  2512  000079                     	ds	1
  2513  00007A                     Event_DIPSwitch@Bar:
  2514                           	opt stack 0
  2515  00007A                     printf@flag:
  2516                           	opt stack 0
  2517  00007A                     ___flmul@sign:
  2518                           	opt stack 0
  2519  00007A                     Timer2_Init@DIVIDE:
  2520                           	opt stack 0
  2521                           
  2522                           ; 4 bytes @ 0x1A
  2523  00007A                     	ds	1
  2524  00007B                     printf@prec:
  2525                           	opt stack 0
  2526  00007B                     ___flmul@aexp:
  2527                           	opt stack 0
  2528  00007B                     Button_Poll@pButton:
  2529                           	opt stack 0
  2530                           
  2531                           ; 2 bytes @ 0x1B
  2532  00007B                     	ds	1
  2533  00007C                     ??_LCD_DrawField:
  2534  00007C                     printf@ap:
  2535                           	opt stack 0
  2536  00007C                     ___flmul@grs:
  2537                           	opt stack 0
  2538                           
  2539                           ; 4 bytes @ 0x1C
  2540  00007C                     	ds	1
  2541  00007D                     Button_Poll@pIncrement:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x1D
  2545  00007D                     	ds	1
  2546  00007E                     ??_Button_Poll:
  2547  00007E                     LCD_DrawField@count:
  2548                           	opt stack 0
  2549  00007E                     printf@val:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0x1E
  2553  00007E                     	ds	2
  2554  000080                     LCD_DrawField@xmax:
  2555                           	opt stack 0
  2556  000080                     printf@c:
  2557                           	opt stack 0
  2558  000080                     ___flmul@bexp:
  2559                           	opt stack 0
  2560                           
  2561                           ; 1 bytes @ 0x20
  2562  000080                     	ds	1
  2563  000081                     LCD_DrawField@ymax:
  2564                           	opt stack 0
  2565  000081                     ___flmul@prod:
  2566                           	opt stack 0
  2567                           
  2568                           ; 4 bytes @ 0x21
  2569  000081                     	ds	1
  2570  000082                     LCD_DrawField@i:
  2571                           	opt stack 0
  2572  000082                     Port_Set@TypeRequired:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x22
  2576  000082                     	ds	1
  2577  000083                     ??_Console_Render:
  2578  000083                     Button_Poll@Pin:
  2579                           	opt stack 0
  2580                           
  2581                           ; 1 bytes @ 0x23
  2582  000083                     	ds	1
  2583  000084                     Port_Set@TypeActual:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x24
  2587  000084                     	ds	1
  2588  000085                     PortProperty_Valid@Pair:
  2589                           	opt stack 0
  2590  000085                     Console_Render@temp:
  2591                           	opt stack 0
  2592  000085                     ___flmul@temp:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x25
  2596  000085                     	ds	1
  2597  000086                     Port_Set@Type:
  2598                           	opt stack 0
  2599  000086                     Port_CheckPairType@pInput:
  2600                           	opt stack 0
  2601  000086                     Port_SetPinType@pInput:
  2602                           	opt stack 0
  2603  000086                     Console_Render@lCursor:
  2604                           	opt stack 0
  2605                           
  2606                           ; 4 bytes @ 0x26
  2607  000086                     	ds	1
  2608  000087                     ?___flneg:
  2609                           	opt stack 0
  2610  000087                     ___flneg@f1:
  2611                           	opt stack 0
  2612                           
  2613                           ; 4 bytes @ 0x27
  2614  000087                     	ds	1
  2615  000088                     Port_CheckPairType@pPair:
  2616                           	opt stack 0
  2617  000088                     Port_SetPinType@pPin:
  2618                           	opt stack 0
  2619                           
  2620                           ; 1 bytes @ 0x28
  2621  000088                     	ds	1
  2622  000089                     Port_CheckPairType@pDrive:
  2623                           	opt stack 0
  2624  000089                     Port_SetPinType@pType:
  2625                           	opt stack 0
  2626                           
  2627                           ; 1 bytes @ 0x29
  2628  000089                     	ds	1
  2629  00008A                     Port_CheckPairType@Pin1:
  2630                           	opt stack 0
  2631  00008A                     Port_SetPinType@Output:
  2632                           	opt stack 0
  2633  00008A                     Console_Render@x:
  2634                           	opt stack 0
  2635                           
  2636                           ; 1 bytes @ 0x2A
  2637  00008A                     	ds	1
  2638  00008B                     ?___fladd:
  2639                           	opt stack 0
  2640  00008B                     Port_CheckPairType@Pin2:
  2641                           	opt stack 0
  2642  00008B                     Console_Render@y:
  2643                           	opt stack 0
  2644  00008B                     Port_SetPinType@Props:
  2645                           	opt stack 0
  2646  00008B                     ___fladd@b:
  2647                           	opt stack 0
  2648                           
  2649                           ; 4 bytes @ 0x2B
  2650  00008B                     	ds	1
  2651  00008C                     Port_CheckPairType@Output:
  2652                           	opt stack 0
  2653                           
  2654                           ; 1 bytes @ 0x2C
  2655  00008C                     	ds	1
  2656  00008D                     LED_Init@pLED:
  2657                           	opt stack 0
  2658  00008D                     Port_CheckPairType@Props:
  2659                           	opt stack 0
  2660  00008D                     SPI_Init@pClock:
  2661                           	opt stack 0
  2662                           
  2663                           ; 4 bytes @ 0x2D
  2664  00008D                     	ds	2
  2665  00008F                     Port_CheckQuadType@pInput:
  2666                           	opt stack 0
  2667  00008F                     ___fladd@a:
  2668                           	opt stack 0
  2669                           
  2670                           ; 4 bytes @ 0x2F
  2671  00008F                     	ds	2
  2672  000091                     Port_CheckQuadType@pQuad:
  2673                           	opt stack 0
  2674  000091                     SPI_Init@pChannel:
  2675                           	opt stack 0
  2676                           
  2677                           ; 1 bytes @ 0x31
  2678  000091                     	ds	1
  2679  000092                     Port_CheckQuadType@pDrive:
  2680                           	opt stack 0
  2681  000092                     SPI_Init@pMode:
  2682                           	opt stack 0
  2683                           
  2684                           ; 1 bytes @ 0x32
  2685  000092                     	ds	1
  2686  000093                     ??___fladd:
  2687  000093                     Port_CheckQuadType@Pair1:
  2688                           	opt stack 0
  2689  000093                     SPI_Init@pInput:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x33
  2693  000093                     	ds	1
  2694  000094                     Port_CheckQuadType@Pair2:
  2695                           	opt stack 0
  2696                           
  2697                           ; 1 bytes @ 0x34
  2698  000094                     	ds	1
  2699  000095                     ??_LCD_Init:
  2700  000095                     Port_CheckQuadType@Output:
  2701                           	opt stack 0
  2702                           
  2703                           ; 1 bytes @ 0x35
  2704  000095                     	ds	1
  2705  000096                     Port_CheckPortType@pInput:
  2706                           	opt stack 0
  2707  000096                     Port_SetQuadType@pInput:
  2708                           	opt stack 0
  2709                           
  2710                           ; 2 bytes @ 0x36
  2711  000096                     	ds	1
  2712  000097                     LCD_Init@i:
  2713                           	opt stack 0
  2714                           
  2715                           ; 2 bytes @ 0x37
  2716  000097                     	ds	1
  2717  000098                     Port_CheckPortType@pDrive:
  2718                           	opt stack 0
  2719  000098                     Port_SetQuadType@pQuad:
  2720                           	opt stack 0
  2721                           
  2722                           ; 1 bytes @ 0x38
  2723  000098                     	ds	1
  2724  000099                     Port_CheckPortType@Output:
  2725                           	opt stack 0
  2726  000099                     Port_SetQuadType@pType:
  2727                           	opt stack 0
  2728                           
  2729                           ; 1 bytes @ 0x39
  2730  000099                     	ds	1
  2731  00009A                     Port_SetQuadType@Output:
  2732                           	opt stack 0
  2733  00009A                     Port_SetType@pInput:
  2734                           	opt stack 0
  2735                           
  2736                           ; 2 bytes @ 0x3A
  2737  00009A                     	ds	1
  2738  00009B                     ___fladd@signs:
  2739                           	opt stack 0
  2740  00009B                     Button_Init@pInput:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0x3B
  2744  00009B                     	ds	1
  2745  00009C                     Port_SetType@pType:
  2746                           	opt stack 0
  2747  00009C                     ___fladd@aexp:
  2748                           	opt stack 0
  2749                           
  2750                           ; 1 bytes @ 0x3C
  2751  00009C                     	ds	1
  2752  00009D                     ??_Port_SetType:
  2753  00009D                     ___fladd@bexp:
  2754                           	opt stack 0
  2755  00009D                     Button_Init@pThreshold:
  2756                           	opt stack 0
  2757                           
  2758                           ; 2 bytes @ 0x3D
  2759  00009D                     	ds	1
  2760  00009E                     ___fladd@grs:
  2761                           	opt stack 0
  2762                           
  2763                           ; 1 bytes @ 0x3E
  2764  00009E                     	ds	1
  2765  00009F                     ?___flsub:
  2766                           	opt stack 0
  2767  00009F                     ?_eval_poly:
  2768                           	opt stack 0
  2769  00009F                     ?___fltol:
  2770                           	opt stack 0
  2771  00009F                     Port_SetType@Output:
  2772                           	opt stack 0
  2773  00009F                     Button_Init@pInitIO:
  2774                           	opt stack 0
  2775  00009F                     ___fltol@f1:
  2776                           	opt stack 0
  2777  00009F                     ___flsub@b:
  2778                           	opt stack 0
  2779  00009F                     eval_poly@x:
  2780                           	opt stack 0
  2781                           
  2782                           ; 4 bytes @ 0x3F
  2783  00009F                     	ds	1
  2784  0000A0                     Port_Init@pInput:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0x40
  2788  0000A0                     	ds	2
  2789  0000A2                     Port_Init@pPort:
  2790                           	opt stack 0
  2791  0000A2                     Button_Init@pGetState:
  2792                           	opt stack 0
  2793                           
  2794                           ; 3 bytes @ 0x42
  2795  0000A2                     	ds	1
  2796  0000A3                     ??_Port_Init:
  2797  0000A3                     ??___fltol:
  2798  0000A3                     eval_poly@d:
  2799                           	opt stack 0
  2800  0000A3                     ___flsub@a:
  2801                           	opt stack 0
  2802                           
  2803                           ; 4 bytes @ 0x43
  2804  0000A3                     	ds	2
  2805  0000A5                     Port_Init@i:
  2806                           	opt stack 0
  2807  0000A5                     eval_poly@n:
  2808                           	opt stack 0
  2809  0000A5                     Button_Init@pFunction:
  2810                           	opt stack 0
  2811                           
  2812                           ; 3 bytes @ 0x45
  2813  0000A5                     	ds	1
  2814  0000A6                     
  2815                           ; 1 bytes @ 0x46
  2816  0000A6                     	ds	1
  2817  0000A7                     ??_eval_poly:
  2818  0000A7                     ___fltol@sign1:
  2819                           	opt stack 0
  2820                           
  2821                           ; 1 bytes @ 0x47
  2822  0000A7                     	ds	1
  2823  0000A8                     ___fltol@exp1:
  2824                           	opt stack 0
  2825  0000A8                     HMI_Init@in:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x48
  2829  0000A8                     	ds	1
  2830  0000A9                     ?_floor:
  2831                           	opt stack 0
  2832  0000A9                     floor@x:
  2833                           	opt stack 0
  2834                           
  2835                           ; 4 bytes @ 0x49
  2836  0000A9                     	ds	2
  2837  0000AB                     eval_poly@res:
  2838                           	opt stack 0
  2839                           
  2840                           ; 4 bytes @ 0x4B
  2841  0000AB                     	ds	2
  2842  0000AD                     floor@i:
  2843                           	opt stack 0
  2844                           
  2845                           ; 4 bytes @ 0x4D
  2846  0000AD                     	ds	2
  2847  0000AF                     ?_log:
  2848                           	opt stack 0
  2849  0000AF                     ?_ldexp:
  2850                           	opt stack 0
  2851  0000AF                     ldexp@value:
  2852                           	opt stack 0
  2853  0000AF                     log@x:
  2854                           	opt stack 0
  2855                           
  2856                           ; 4 bytes @ 0x4F
  2857  0000AF                     	ds	2
  2858  0000B1                     floor@expon:
  2859                           	opt stack 0
  2860                           
  2861                           ; 2 bytes @ 0x51
  2862  0000B1                     	ds	2
  2863  0000B3                     ldexp@newexp:
  2864                           	opt stack 0
  2865  0000B3                     log@exponent:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x53
  2869  0000B3                     	ds	2
  2870  0000B5                     ??_ldexp:
  2871                           
  2872                           ; 1 bytes @ 0x55
  2873  0000B5                     	ds	2
  2874  0000B7                     ?_exp:
  2875                           	opt stack 0
  2876  0000B7                     exp@x:
  2877                           	opt stack 0
  2878                           
  2879                           ; 4 bytes @ 0x57
  2880  0000B7                     	ds	4
  2881  0000BB                     _exp$15661:
  2882                           	opt stack 0
  2883                           
  2884                           ; 4 bytes @ 0x5B
  2885  0000BB                     	ds	4
  2886  0000BF                     exp@exponent:
  2887                           	opt stack 0
  2888                           
  2889                           ; 2 bytes @ 0x5F
  2890  0000BF                     	ds	2
  2891  0000C1                     exp@sign:
  2892                           	opt stack 0
  2893                           
  2894                           ; 1 bytes @ 0x61
  2895  0000C1                     	ds	1
  2896  0000C2                     ?_pow:
  2897                           	opt stack 0
  2898  0000C2                     pow@x:
  2899                           	opt stack 0
  2900                           
  2901                           ; 4 bytes @ 0x62
  2902  0000C2                     	ds	4
  2903  0000C6                     pow@y:
  2904                           	opt stack 0
  2905                           
  2906                           ; 4 bytes @ 0x66
  2907  0000C6                     	ds	4
  2908  0000CA                     _pow$15659:
  2909                           	opt stack 0
  2910                           
  2911                           ; 4 bytes @ 0x6A
  2912  0000CA                     	ds	4
  2913  0000CE                     _pow$15660:
  2914                           	opt stack 0
  2915                           
  2916                           ; 4 bytes @ 0x6E
  2917  0000CE                     	ds	4
  2918  0000D2                     pow@sign:
  2919                           	opt stack 0
  2920                           
  2921                           ; 1 bytes @ 0x72
  2922  0000D2                     	ds	1
  2923  0000D3                     pow@yi:
  2924                           	opt stack 0
  2925                           
  2926                           ; 4 bytes @ 0x73
  2927  0000D3                     	ds	4
  2928  0000D7                     ??_ADCAverage:
  2929                           
  2930                           ; 1 bytes @ 0x77
  2931  0000D7                     	ds	2
  2932  0000D9                     ??_Sensor_Observe2:
  2933  0000D9                     ??_Sensor_Observe:
  2934  0000D9                     
  2935                           ; 1 bytes @ 0x79
  2936  0000D9                     	ds	2
  2937  0000DB                     ??_main:
  2938                           
  2939                           ; 1 bytes @ 0x7B
  2940  0000DB                     	ds	5
  2941  0000E0                     main@down:
  2942                           	opt stack 0
  2943                           
  2944                           ; 1 bytes @ 0x80
  2945  0000E0                     	ds	1
  2946  0000E1                     main@right:
  2947                           	opt stack 0
  2948                           
  2949                           ; 1 bytes @ 0x81
  2950  0000E1                     	ds	1
  2951  0000E2                     main@left:
  2952                           	opt stack 0
  2953                           
  2954                           ; 1 bytes @ 0x82
  2955  0000E2                     	ds	1
  2956  0000E3                     main@up:
  2957                           	opt stack 0
  2958                           
  2959                           ; 1 bytes @ 0x83
  2960  0000E3                     	ds	1
  2961  0000E4                     main@Target_Distance:
  2962                           	opt stack 0
  2963                           
  2964                           ; 2 bytes @ 0x84
  2965  0000E4                     	ds	2
  2966                           tblptru	equ	0xFF8
  2967                           tblptrh	equ	0xFF7
  2968                           tblptrl	equ	0xFF6
  2969                           tablat	equ	0xFF5
  2970                           postinc0	equ	0xFEE
  2971                           wreg	equ	0xFE8
  2972                           postdec1	equ	0xFE5
  2973                           fsr1h	equ	0xFE2
  2974                           fsr1l	equ	0xFE1
  2975                           
  2976                           	psect	cstackCOMRAM
  2977  000001                     __pcstackCOMRAM:
  2978                           	opt stack 0
  2979  000001                     i2Byte_SetBit@pInput:
  2980                           	opt stack 0
  2981  000001                     i2Byte_GetZone@pInput:
  2982                           	opt stack 0
  2983  000001                     i2delay_us@us:
  2984                           	opt stack 0
  2985  000001                     i2MXK_Queue@pCallback:
  2986                           	opt stack 0
  2987                           
  2988                           ; 3 bytes @ 0x0
  2989  000001                     	ds	2
  2990  000003                     i2Byte_SetBit@pBit:
  2991                           	opt stack 0
  2992  000003                     i2Byte_GetZone@pMax:
  2993                           	opt stack 0
  2994  000003                     i2delay_us@u:
  2995                           	opt stack 0
  2996                           
  2997                           ; 4 bytes @ 0x2
  2998  000003                     	ds	1
  2999  000004                     i2Byte_SetBit@pValue:
  3000                           	opt stack 0
  3001  000004                     i2Byte_GetZone@pChunk:
  3002                           	opt stack 0
  3003                           
  3004                           ; 1 bytes @ 0x3
  3005  000004                     	ds	1
  3006  000005                     ??i2_Byte_SetBit:
  3007  000005                     i2Byte_GetZone@pChunkSize:
  3008                           	opt stack 0
  3009                           
  3010                           ; 1 bytes @ 0x4
  3011  000005                     	ds	1
  3012  000006                     ??i2_Byte_GetZone:
  3013                           
  3014                           ; 1 bytes @ 0x5
  3015  000006                     	ds	1
  3016  000007                     i2Byte_GetZone@MASK:
  3017                           	opt stack 0
  3018  000007                     i2MXK_SwitchTo@CUR:
  3019                           	opt stack 0
  3020                           
  3021                           ; 1 bytes @ 0x6
  3022  000007                     	ds	1
  3023  000008                     i2Byte_GetZone@Offset:
  3024                           	opt stack 0
  3025  000008                     i2MXK_SwitchTo@pModule:
  3026                           	opt stack 0
  3027                           
  3028                           ; 1 bytes @ 0x7
  3029  000008                     	ds	1
  3030  000009                     i2Byte_GetZone@Output:
  3031                           	opt stack 0
  3032                           
  3033                           ; 1 bytes @ 0x8
  3034  000009                     	ds	1
  3035  00000A                     i2Byte_GetPair@pInput:
  3036                           	opt stack 0
  3037                           
  3038                           ; 2 bytes @ 0x9
  3039  00000A                     	ds	2
  3040  00000C                     i2Byte_GetPair@pPair:
  3041                           	opt stack 0
  3042                           
  3043                           ; 1 bytes @ 0xB
  3044  00000C                     	ds	1
  3045  00000D                     i2Word_GetPair@pInput:
  3046                           	opt stack 0
  3047                           
  3048                           ; 2 bytes @ 0xC
  3049  00000D                     	ds	2
  3050  00000F                     i2Word_GetPair@pPair:
  3051                           	opt stack 0
  3052                           
  3053                           ; 1 bytes @ 0xE
  3054  00000F                     	ds	1
  3055  000010                     i2Port_SetPin@pInput:
  3056                           	opt stack 0
  3057                           
  3058                           ; 2 bytes @ 0xF
  3059  000010                     	ds	2
  3060  000012                     i2Port_SetPin@pPin:
  3061                           	opt stack 0
  3062                           
  3063                           ; 1 bytes @ 0x11
  3064  000012                     	ds	1
  3065  000013                     i2Port_SetPin@pValue:
  3066                           	opt stack 0
  3067                           
  3068                           ; 1 bytes @ 0x12
  3069  000013                     	ds	1
  3070  000014                     i2Port_SetPin@Type:
  3071                           	opt stack 0
  3072                           
  3073                           ; 1 bytes @ 0x13
  3074  000014                     	ds	1
  3075  000015                     
  3076                           ; 1 bytes @ 0x14
  3077  000015                     	ds	2
  3078  000017                     ??_ISR_Function:
  3079                           
  3080                           ; 1 bytes @ 0x16
  3081  000017                     	ds	18
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           postinc0	equ	0xFEE
  3087                           wreg	equ	0xFE8
  3088                           postdec1	equ	0xFE5
  3089                           fsr1h	equ	0xFE2
  3090                           fsr1l	equ	0xFE1
  3091                           
  3092 ;;
  3093 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  3094 ;;
  3095 ;; *************** function _main *****************
  3096 ;; Defined at:
  3097 ;;		line 518 in file "main.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;		None
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  Target_Dista    2  132[BANK0 ] int 
  3102 ;;  up              1  131[BANK0 ] unsigned char 
  3103 ;;  left            1  130[BANK0 ] unsigned char 
  3104 ;;  right           1  129[BANK0 ] unsigned char 
  3105 ;;  down            1  128[BANK0 ] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;Total ram usage:       11 bytes
  3120 ;; Hardware stack levels required when called:   17
  3121 ;; This function calls:
  3122 ;;		_ADCAverage
  3123 ;;		_BangBang
  3124 ;;		_Closest_Object
  3125 ;;		_Closest_Object2
  3126 ;;		_Console_Init
  3127 ;;		_Console_Render
  3128 ;;		_Drive
  3129 ;;		_FunctInitButton
  3130 ;;		_Get_Sensor_State
  3131 ;;		_HMI_DIPSwitch
  3132 ;;		_HMI_DownSwitch
  3133 ;;		_HMI_Init
  3134 ;;		_HMI_LeftSwitch
  3135 ;;		_HMI_Poll
  3136 ;;		_HMI_Render
  3137 ;;		_HMI_RightSwitch
  3138 ;;		_HMI_SetNumber
  3139 ;;		_HMI_UpSwitch
  3140 ;;		_ISR_Enable
  3141 ;;		_InitADC
  3142 ;;		_InitSerialCommunication
  3143 ;;		_Init_Timer0
  3144 ;;		_LCD_Init
  3145 ;;		_LEDToggle
  3146 ;;		_LED_Init
  3147 ;;		_LED_Set
  3148 ;;		_MXK_BlockSwitchTo
  3149 ;;		_MXK_DIPSwitch
  3150 ;;		_MXK_Dequeue
  3151 ;;		_MXK_Init
  3152 ;;		_MXK_Release
  3153 ;;		_MXK_TestButton
  3154 ;;		_Reset_variables
  3155 ;;		_Robot_Init
  3156 ;;		_Robot_Stop
  3157 ;;		_Sensor_Observe
  3158 ;;		_Sensor_Observe2
  3159 ;;		_Turn
  3160 ;;		_UpdateDistance
  3161 ;;		_delay_ms
  3162 ;;		_printf
  3163 ;; This function is called by:
  3164 ;;		Startup code after reset
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text0
  3169  010000                     __ptext0:
  3170                           	opt stack 0
  3171  010000                     _main:
  3172                           	opt stack 14
  3173                           
  3174                           ;main.c: 520: MXK_Init();
  3175                           
  3176                           ;incstack = 0
  3177  010000  EC90  F099         	call	_MXK_Init	;wreg free
  3178                           
  3179                           ;main.c: 521: Init_Timer0();
  3180  010004  ECB0  F0AF         	call	_Init_Timer0	;wreg free
  3181                           
  3182                           ;main.c: 522: InitSerialCommunication();
  3183  010008  EC2D  F0AF         	call	_InitSerialCommunication	;wreg free
  3184                           
  3185                           ;main.c: 523: Robot_Init();
  3186  01000C  EC4D  F0B0         	call	_Robot_Init	;wreg free
  3187                           
  3188                           ;main.c: 524: ISR_Enable();
  3189  010010  EC94  F0B0         	call	_ISR_Enable	;wreg free
  3190                           
  3191                           ;main.c: 525: FunctInitButton();
  3192  010014  EC33  F0A6         	call	_FunctInitButton	;wreg free
  3193                           
  3194                           ;main.c: 526: InitADC();
  3195  010018  EC93  F0AB         	call	_InitADC	;wreg free
  3196                           
  3197                           ;main.c: 527: LED_Init(eLED2);
  3198  01001C  0E01               	movlw	1
  3199  01001E  EC42  F0A9         	call	_LED_Init
  3200                           
  3201                           ;main.c: 531: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3202  010022  0E01               	movlw	1
  3203  010024  EC33  F0AD         	call	_MXK_BlockSwitchTo
  3204  010028  0900               	iorlw	0
  3205  01002A  B4D8               	btfsc	status,2,c
  3206  01002C  D00C               	goto	l2256
  3207                           
  3208                           ;main.c: 532: HMI_Init();
  3209  01002E  EC11  F094         	call	_HMI_Init	;wreg free
  3210                           
  3211                           ;main.c: 533: LCD_Init();
  3212  010032  EC49  F098         	call	_LCD_Init	;wreg free
  3213                           
  3214                           ;main.c: 534: Console_Init();
  3215  010036  EC81  F0A7         	call	_Console_Init	;wreg free
  3216                           
  3217                           ;main.c: 535: if (MXK_Release())
  3218  01003A  EC8C  F0AF         	call	_MXK_Release	;wreg free
  3219  01003E  0900               	iorlw	0
  3220  010040  A4D8               	btfss	status,2,c
  3221                           
  3222                           ;main.c: 536: MXK_Dequeue();
  3223  010042  EC85  F0AD         	call	_MXK_Dequeue	;wreg free
  3224  010046                     l2256:
  3225                           
  3226                           ;main.c: 542: LEDToggle();
  3227                           
  3228                           ;main.c: 537: }
  3229                           ;main.c: 540: for(;;){
  3230  010046  EC80  F0AC         	call	_LEDToggle	;wreg free
  3231                           
  3232                           ;main.c: 544: ADCAverage();
  3233  01004A  ECE9  F088         	call	_ADCAverage	;wreg free
  3234                           
  3235                           ;main.c: 546: HMI_SetNumber(average);
  3236  01004E  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
  3237  010052  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3238  010056  ECDA  F0AE         	call	_HMI_SetNumber	;wreg free
  3239                           
  3240                           ;main.c: 548: HMI_Render();
  3241  01005A  EC4F  F0AD         	call	_HMI_Render	;wreg free
  3242                           
  3243                           ;main.c: 550: HMI_Poll();
  3244  01005E  EC85  F0A8         	call	_HMI_Poll	;wreg free
  3245                           
  3246                           ;main.c: 554: bool down = HMIBoard.mDown.mGetState();
  3247  010062  EE21  F071         	lfsr	2,_HMIBoard+45
  3248  010066  D801               	call	u14438
  3249  010068  D00A               	goto	u14439
  3250  01006A                     u14438:
  3251  01006A  0005               	push	
  3252  01006C  6EFA               	movwf	pclath,c
  3253  01006E  50DE               	movf	postinc2,w,c
  3254  010070  6EFD               	movwf	tosl,c
  3255  010072  50DE               	movf	postinc2,w,c
  3256  010074  6EFE               	movwf	tosh,c
  3257  010076  50DE               	movf	postinc2,w,c
  3258  010078  6EFF               	movwf	tosu,c
  3259  01007A  50FA               	movf	pclath,w,c
  3260  01007C  0012               	return		;indir
  3261  01007E                     u14439:
  3262  01007E  0100               	movlb	0	; () banked
  3263  010080  6FE0               	movwf	main@down& (0+255),b
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;main.c: 555: bool right = HMIBoard.mRight.mGetState();
  3267  010082  EE21  F053         	lfsr	2,_HMIBoard+15
  3268  010086  D801               	call	u14448
  3269  010088  D00A               	goto	u14449
  3270  01008A                     u14448:
  3271  01008A  0005               	push	
  3272  01008C  6EFA               	movwf	pclath,c
  3273  01008E  50DE               	movf	postinc2,w,c
  3274  010090  6EFD               	movwf	tosl,c
  3275  010092  50DE               	movf	postinc2,w,c
  3276  010094  6EFE               	movwf	tosh,c
  3277  010096  50DE               	movf	postinc2,w,c
  3278  010098  6EFF               	movwf	tosu,c
  3279  01009A  50FA               	movf	pclath,w,c
  3280  01009C  0012               	return		;indir
  3281  01009E                     u14449:
  3282  01009E  0100               	movlb	0	; () banked
  3283  0100A0  6FE1               	movwf	main@right& (0+255),b
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;main.c: 556: bool up = HMIBoard.mUp.mGetState();
  3287  0100A2  EE21  F067         	lfsr	2,_HMIBoard+35
  3288  0100A6  D801               	call	u14458
  3289  0100A8  D00A               	goto	u14459
  3290  0100AA                     u14458:
  3291  0100AA  0005               	push	
  3292  0100AC  6EFA               	movwf	pclath,c
  3293  0100AE  50DE               	movf	postinc2,w,c
  3294  0100B0  6EFD               	movwf	tosl,c
  3295  0100B2  50DE               	movf	postinc2,w,c
  3296  0100B4  6EFE               	movwf	tosh,c
  3297  0100B6  50DE               	movf	postinc2,w,c
  3298  0100B8  6EFF               	movwf	tosu,c
  3299  0100BA  50FA               	movf	pclath,w,c
  3300  0100BC  0012               	return		;indir
  3301  0100BE                     u14459:
  3302  0100BE  0100               	movlb	0	; () banked
  3303  0100C0  6FE3               	movwf	main@up& (0+255),b
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;main.c: 557: bool left = HMIBoard.mLeft.mGetState();
  3307  0100C2  EE21  F05D         	lfsr	2,_HMIBoard+25
  3308  0100C6  D801               	call	u14468
  3309  0100C8  D00A               	goto	u14469
  3310  0100CA                     u14468:
  3311  0100CA  0005               	push	
  3312  0100CC  6EFA               	movwf	pclath,c
  3313  0100CE  50DE               	movf	postinc2,w,c
  3314  0100D0  6EFD               	movwf	tosl,c
  3315  0100D2  50DE               	movf	postinc2,w,c
  3316  0100D4  6EFE               	movwf	tosh,c
  3317  0100D6  50DE               	movf	postinc2,w,c
  3318  0100D8  6EFF               	movwf	tosu,c
  3319  0100DA  50FA               	movf	pclath,w,c
  3320  0100DC  0012               	return		;indir
  3321  0100DE                     u14469:
  3322  0100DE  0100               	movlb	0	; () banked
  3323  0100E0  6FE2               	movwf	main@left& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;main.c: 558: if (down) {mode=3;}
  3327  0100E2  51E0               	movf	main@down& (0+255),w,b
  3328  0100E4  B4D8               	btfsc	status,2,c
  3329  0100E6  D004               	goto	l2258
  3330                           
  3331                           ; BSR set to: 0
  3332  0100E8  0E00               	movlw	0
  3333  0100EA  6FEC               	movwf	(_mode+1)& (0+255),b
  3334  0100EC  0E03               	movlw	3
  3335  0100EE  6FEB               	movwf	_mode& (0+255),b
  3336  0100F0                     l2258:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 559: if (right) {mode =1;}
  3340  0100F0  51E1               	movf	main@right& (0+255),w,b
  3341  0100F2  B4D8               	btfsc	status,2,c
  3342  0100F4  D004               	goto	l2259
  3343                           
  3344                           ; BSR set to: 0
  3345  0100F6  0E00               	movlw	0
  3346  0100F8  6FEC               	movwf	(_mode+1)& (0+255),b
  3347  0100FA  0E01               	movlw	1
  3348  0100FC  6FEB               	movwf	_mode& (0+255),b
  3349  0100FE                     l2259:
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;main.c: 560: if (up) {mode=2;}
  3353  0100FE  51E3               	movf	main@up& (0+255),w,b
  3354  010100  B4D8               	btfsc	status,2,c
  3355  010102  D004               	goto	l2260
  3356                           
  3357                           ; BSR set to: 0
  3358  010104  0E00               	movlw	0
  3359  010106  6FEC               	movwf	(_mode+1)& (0+255),b
  3360  010108  0E02               	movlw	2
  3361  01010A  6FEB               	movwf	_mode& (0+255),b
  3362  01010C                     l2260:
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;main.c: 561: if (left) {mode=4;}
  3366  01010C  51E2               	movf	main@left& (0+255),w,b
  3367  01010E  B4D8               	btfsc	status,2,c
  3368  010110  D004               	goto	l2261
  3369                           
  3370                           ; BSR set to: 0
  3371  010112  0E00               	movlw	0
  3372  010114  6FEC               	movwf	(_mode+1)& (0+255),b
  3373  010116  0E04               	movlw	4
  3374  010118  6FEB               	movwf	_mode& (0+255),b
  3375  01011A                     l2261:
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;main.c: 566: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3379                           
  3380                           ; BSR set to: 0
  3381  01011A  0E01               	movlw	1
  3382  01011C  EC33  F0AD         	call	_MXK_BlockSwitchTo
  3383  010120  0900               	iorlw	0
  3384  010122  B4D8               	btfsc	status,2,c
  3385  010124  D790               	goto	l2256
  3386                           
  3387                           ;main.c: 568: if (mode==0){
  3388  010126  0100               	movlb	0	; () banked
  3389  010128  51EB               	movf	_mode& (0+255),w,b
  3390  01012A  11EC               	iorwf	(_mode+1)& (0+255),w,b
  3391  01012C  A4D8               	btfss	status,2,c
  3392  01012E  D056               	goto	l2263
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;main.c: 569: LED_Set(eLED2, 0);
  3396  010130  0E00               	movlw	0
  3397  010132  6F74               	movwf	LED_Set@pValue& (0+255),b
  3398  010134  0E01               	movlw	1
  3399  010136  EC4B  F0AB         	call	_LED_Set
  3400                           
  3401                           ;main.c: 570: Robot_Stop();
  3402  01013A  ECED  F0AE         	call	_Robot_Stop	;wreg free
  3403                           
  3404                           ;main.c: 571: Reset_variables();
  3405  01013E  ECB5  F0AA         	call	_Reset_variables	;wreg free
  3406                           
  3407                           ;main.c: 573: printf("%c", (char)35);
  3408  010142  0EFC               	movlw	low STR_1
  3409  010144  0100               	movlb	0	; () banked
  3410  010146  6F75               	movwf	printf@f& (0+255),b
  3411  010148  0EFF               	movlw	high STR_1
  3412  01014A  6F76               	movwf	(printf@f+1)& (0+255),b
  3413  01014C  0E00               	movlw	0
  3414  01014E  6F78               	movwf	(?_printf+3)& (0+255),b
  3415  010150  0E23               	movlw	35
  3416  010152  6F77               	movwf	(?_printf+2)& (0+255),b
  3417  010154  EC43  F096         	call	_printf	;wreg free
  3418                           
  3419                           ;main.c: 574: printf("Robot Ready! \n");
  3420  010158  0EE2               	movlw	low STR_31
  3421  01015A  0100               	movlb	0	; () banked
  3422  01015C  6F75               	movwf	printf@f& (0+255),b
  3423  01015E  0EFF               	movlw	high STR_31
  3424  010160  6F76               	movwf	(printf@f+1)& (0+255),b
  3425  010162  EC43  F096         	call	_printf	;wreg free
  3426                           
  3427                           ;main.c: 575: printf("Press right for 5m\n drive,\n");
  3428  010166  0EBB               	movlw	low STR_32
  3429  010168  0100               	movlb	0	; () banked
  3430  01016A  6F75               	movwf	printf@f& (0+255),b
  3431  01016C  0EFE               	movlw	high STR_32
  3432  01016E  6F76               	movwf	(printf@f+1)& (0+255),b
  3433  010170  EC43  F096         	call	_printf	;wreg free
  3434                           
  3435                           ;main.c: 576: printf("Press down for\nsqr drive,\n");
  3436  010174  0E2B               	movlw	low STR_33
  3437  010176  0100               	movlb	0	; () banked
  3438  010178  6F75               	movwf	printf@f& (0+255),b
  3439  01017A  0EFF               	movlw	high STR_33
  3440  01017C  6F76               	movwf	(printf@f+1)& (0+255),b
  3441  01017E  EC43  F096         	call	_printf	;wreg free
  3442                           
  3443                           ;main.c: 577: printf("Press up for IR scan mode,\n");
  3444  010182  0E9F               	movlw	low STR_34
  3445  010184  0100               	movlb	0	; () banked
  3446  010186  6F75               	movwf	printf@f& (0+255),b
  3447  010188  0EFE               	movlw	high STR_34
  3448  01018A  6F76               	movwf	(printf@f+1)& (0+255),b
  3449  01018C  EC43  F096         	call	_printf	;wreg free
  3450                           
  3451                           ;main.c: 578: printf("Press left for wall follow\n");
  3452  010190  0EF3               	movlw	low STR_35
  3453  010192  0100               	movlb	0	; () banked
  3454  010194  6F75               	movwf	printf@f& (0+255),b
  3455  010196  0EFE               	movlw	high STR_35
  3456  010198  6F76               	movwf	(printf@f+1)& (0+255),b
  3457  01019A  EC43  F096         	call	_printf	;wreg free
  3458                           
  3459                           ;main.c: 580: printf("                 \n");
  3460  01019E  0E9C               	movlw	low STR_2
  3461  0101A0  0100               	movlb	0	; () banked
  3462  0101A2  6F75               	movwf	printf@f& (0+255),b
  3463  0101A4  0EFF               	movlw	high STR_2
  3464  0101A6  6F76               	movwf	(printf@f+1)& (0+255),b
  3465  0101A8  EC43  F096         	call	_printf	;wreg free
  3466                           
  3467                           ;main.c: 581: printf("                 \n");
  3468  0101AC  0E9C               	movlw	low STR_2
  3469  0101AE  0100               	movlb	0	; () banked
  3470  0101B0  6F75               	movwf	printf@f& (0+255),b
  3471  0101B2  0EFF               	movlw	high STR_2
  3472  0101B4  6F76               	movwf	(printf@f+1)& (0+255),b
  3473  0101B6  EC43  F096         	call	_printf	;wreg free
  3474                           
  3475                           ;main.c: 582: printf("                 \n");
  3476  0101BA  0E9C               	movlw	low STR_2
  3477  0101BC  0100               	movlb	0	; () banked
  3478  0101BE  6F75               	movwf	printf@f& (0+255),b
  3479  0101C0  0EFF               	movlw	high STR_2
  3480  0101C2  6F76               	movwf	(printf@f+1)& (0+255),b
  3481  0101C4  EC43  F096         	call	_printf	;wreg free
  3482                           
  3483                           ;main.c: 583: printf("                 \n");
  3484  0101C8  0E9C               	movlw	low STR_2
  3485  0101CA  0100               	movlb	0	; () banked
  3486  0101CC  6F75               	movwf	printf@f& (0+255),b
  3487  0101CE  0EFF               	movlw	high STR_2
  3488  0101D0  6F76               	movwf	(printf@f+1)& (0+255),b
  3489  0101D2  EC43  F096         	call	_printf	;wreg free
  3490                           
  3491                           ;main.c: 584: Console_Render();
  3492  0101D6  EC66  F092         	call	_Console_Render	;wreg free
  3493                           
  3494                           ;main.c: 585: }
  3495  0101DA  D2D7               	goto	l2274
  3496  0101DC                     l2263:
  3497                           
  3498                           ;main.c: 587: else if(mode == 1){
  3499  0101DC  0100               	movlb	0	; () banked
  3500  0101DE  05EB               	decf	_mode& (0+255),w,b
  3501  0101E0  11EC               	iorwf	(_mode+1)& (0+255),w,b
  3502  0101E2  A4D8               	btfss	status,2,c
  3503  0101E4  D06D               	goto	l2265
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;main.c: 588: LED_Set(eLED2, 1);
  3507  0101E6  0E01               	movlw	1
  3508  0101E8  6F74               	movwf	LED_Set@pValue& (0+255),b
  3509  0101EA  0E01               	movlw	1
  3510  0101EC  EC4B  F0AB         	call	_LED_Set
  3511                           
  3512                           ;main.c: 589: Drive(300);
  3513  0101F0  0E01               	movlw	1
  3514  0101F2  0100               	movlb	0	; () banked
  3515  0101F4  6F62               	movwf	(Drive@Speed+1)& (0+255),b
  3516  0101F6  0E2C               	movlw	44
  3517  0101F8  6F61               	movwf	Drive@Speed& (0+255),b
  3518  0101FA  ECD1  F0AD         	call	_Drive	;wreg free
  3519                           
  3520                           ;main.c: 590: T_VAR += UpdateDistance();
  3521  0101FE  EC4C  F0A7         	call	_UpdateDistance	;wreg free
  3522  010202  0100               	movlb	0	; () banked
  3523  010204  5166               	movf	?_UpdateDistance& (0+255),w,b
  3524  010206  262F               	addwf	_T_VAR,f,c
  3525  010208  5167               	movf	(?_UpdateDistance+1)& (0+255),w,b
  3526  01020A  2230               	addwfc	_T_VAR+1,f,c
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;main.c: 591: printf("%c", (char)35);
  3530  01020C  0EFC               	movlw	low STR_1
  3531  01020E  6F75               	movwf	printf@f& (0+255),b
  3532  010210  0EFF               	movlw	high STR_1
  3533  010212  6F76               	movwf	(printf@f+1)& (0+255),b
  3534  010214  0E00               	movlw	0
  3535  010216  6F78               	movwf	(?_printf+3)& (0+255),b
  3536  010218  0E23               	movlw	35
  3537  01021A  6F77               	movwf	(?_printf+2)& (0+255),b
  3538  01021C  EC43  F096         	call	_printf	;wreg free
  3539                           
  3540                           ;main.c: 592: printf("Traveled Distance:\n%d", T_VAR);
  3541  010220  0E5D               	movlw	low STR_41
  3542  010222  0100               	movlb	0	; () banked
  3543  010224  6F75               	movwf	printf@f& (0+255),b
  3544  010226  0EFF               	movlw	high STR_41
  3545  010228  6F76               	movwf	(printf@f+1)& (0+255),b
  3546  01022A  C02F  F077         	movff	_T_VAR,?_printf+2
  3547  01022E  C030  F078         	movff	_T_VAR+1,?_printf+3
  3548  010232  EC43  F096         	call	_printf	;wreg free
  3549                           
  3550                           ;main.c: 593: printf("                 \n");
  3551  010236  0E9C               	movlw	low STR_2
  3552  010238  0100               	movlb	0	; () banked
  3553  01023A  6F75               	movwf	printf@f& (0+255),b
  3554  01023C  0EFF               	movlw	high STR_2
  3555  01023E  6F76               	movwf	(printf@f+1)& (0+255),b
  3556  010240  EC43  F096         	call	_printf	;wreg free
  3557                           
  3558                           ;main.c: 594: printf("                 \n");
  3559  010244  0E9C               	movlw	low STR_2
  3560  010246  0100               	movlb	0	; () banked
  3561  010248  6F75               	movwf	printf@f& (0+255),b
  3562  01024A  0EFF               	movlw	high STR_2
  3563  01024C  6F76               	movwf	(printf@f+1)& (0+255),b
  3564  01024E  EC43  F096         	call	_printf	;wreg free
  3565                           
  3566                           ;main.c: 595: printf("                 \n");
  3567  010252  0E9C               	movlw	low STR_2
  3568  010254  0100               	movlb	0	; () banked
  3569  010256  6F75               	movwf	printf@f& (0+255),b
  3570  010258  0EFF               	movlw	high STR_2
  3571  01025A  6F76               	movwf	(printf@f+1)& (0+255),b
  3572  01025C  EC43  F096         	call	_printf	;wreg free
  3573                           
  3574                           ;main.c: 596: printf("                 \n");
  3575  010260  0E9C               	movlw	low STR_2
  3576  010262  0100               	movlb	0	; () banked
  3577  010264  6F75               	movwf	printf@f& (0+255),b
  3578  010266  0EFF               	movlw	high STR_2
  3579  010268  6F76               	movwf	(printf@f+1)& (0+255),b
  3580  01026A  EC43  F096         	call	_printf	;wreg free
  3581                           
  3582                           ;main.c: 597: printf("                 \n");
  3583  01026E  0E9C               	movlw	low STR_2
  3584  010270  0100               	movlb	0	; () banked
  3585  010272  6F75               	movwf	printf@f& (0+255),b
  3586  010274  0EFF               	movlw	high STR_2
  3587  010276  6F76               	movwf	(printf@f+1)& (0+255),b
  3588  010278  EC43  F096         	call	_printf	;wreg free
  3589                           
  3590                           ;main.c: 598: printf("                 \n");
  3591  01027C  0E9C               	movlw	low STR_2
  3592  01027E  0100               	movlb	0	; () banked
  3593  010280  6F75               	movwf	printf@f& (0+255),b
  3594  010282  0EFF               	movlw	high STR_2
  3595  010284  6F76               	movwf	(printf@f+1)& (0+255),b
  3596  010286  EC43  F096         	call	_printf	;wreg free
  3597                           
  3598                           ;main.c: 599: printf("                 \n");
  3599  01028A  0E9C               	movlw	low STR_2
  3600  01028C  0100               	movlb	0	; () banked
  3601  01028E  6F75               	movwf	printf@f& (0+255),b
  3602  010290  0EFF               	movlw	high STR_2
  3603  010292  6F76               	movwf	(printf@f+1)& (0+255),b
  3604  010294  EC43  F096         	call	_printf	;wreg free
  3605                           
  3606                           ;main.c: 600: printf("                 \n");
  3607  010298  0E9C               	movlw	low STR_2
  3608  01029A  0100               	movlb	0	; () banked
  3609  01029C  6F75               	movwf	printf@f& (0+255),b
  3610  01029E  0EFF               	movlw	high STR_2
  3611  0102A0  6F76               	movwf	(printf@f+1)& (0+255),b
  3612  0102A2  EC43  F096         	call	_printf	;wreg free
  3613                           
  3614                           ;main.c: 601: Console_Render();
  3615  0102A6  EC66  F092         	call	_Console_Render	;wreg free
  3616                           
  3617                           ;main.c: 602: if (T_VAR >= 5000){
  3618  0102AA  BE30               	btfsc	_T_VAR+1,7,c
  3619  0102AC  D26E               	goto	l2274
  3620  0102AE  0E88               	movlw	136
  3621  0102B0  5C2F               	subwf	_T_VAR,w,c
  3622  0102B2  0E13               	movlw	19
  3623  0102B4  5830               	subwfb	_T_VAR+1,w,c
  3624  0102B6  A0D8               	btfss	status,0,c
  3625  0102B8  D268               	goto	l2274
  3626                           
  3627                           ;main.c: 603: Robot_Stop();
  3628  0102BA  ECED  F0AE         	call	_Robot_Stop	;wreg free
  3629  0102BE  D260               	goto	u14720
  3630  0102C0                     l2265:
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;main.c: 608: else if (mode == 2){
  3634                           
  3635                           ; BSR set to: 0
  3636  0102C0  0E02               	movlw	2
  3637  0102C2  19EB               	xorwf	_mode& (0+255),w,b
  3638  0102C4  11EC               	iorwf	(_mode+1)& (0+255),w,b
  3639  0102C6  A4D8               	btfss	status,2,c
  3640  0102C8  D011               	goto	l2268
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;main.c: 609: LED_Set(eLED2, 1);
  3644  0102CA  0E01               	movlw	1
  3645  0102CC  6F74               	movwf	LED_Set@pValue& (0+255),b
  3646  0102CE  0E01               	movlw	1
  3647  0102D0  EC4B  F0AB         	call	_LED_Set
  3648                           
  3649                           ;main.c: 610: Sensor_Observe();
  3650  0102D4  ECF3  F09C         	call	_Sensor_Observe	;wreg free
  3651                           
  3652                           ;main.c: 612: Closest_Object();
  3653  0102D8  EC69  F0A0         	call	_Closest_Object	;wreg free
  3654                           
  3655                           ;main.c: 613: delay_ms(2000);
  3656  0102DC  0E07               	movlw	7
  3657  0102DE  0100               	movlb	0	; () banked
  3658  0102E0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3659  0102E2  0ED0               	movlw	208
  3660  0102E4  6F60               	movwf	delay_ms@ms& (0+255),b
  3661  0102E6  EC14  F0A9         	call	_delay_ms	;wreg free
  3662  0102EA  D24A               	goto	u14720
  3663  0102EC                     l2268:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;main.c: 617: else if(mode == 3){
  3667                           
  3668                           ; BSR set to: 0
  3669  0102EC  0E03               	movlw	3
  3670  0102EE  19EB               	xorwf	_mode& (0+255),w,b
  3671  0102F0  11EC               	iorwf	(_mode+1)& (0+255),w,b
  3672  0102F2  A4D8               	btfss	status,2,c
  3673  0102F4  D09C               	goto	l2270
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;main.c: 618: Drive(250);
  3677  0102F6  0E00               	movlw	0
  3678  0102F8  6F62               	movwf	(Drive@Speed+1)& (0+255),b
  3679  0102FA  0EFA               	movlw	250
  3680  0102FC  6F61               	movwf	Drive@Speed& (0+255),b
  3681  0102FE  ECD1  F0AD         	call	_Drive	;wreg free
  3682                           
  3683                           ;main.c: 619: LED_Set(eLED2, 1);
  3684  010302  0E01               	movlw	1
  3685  010304  0100               	movlb	0	; () banked
  3686  010306  6F74               	movwf	LED_Set@pValue& (0+255),b
  3687  010308  0E01               	movlw	1
  3688  01030A  EC4B  F0AB         	call	_LED_Set
  3689                           
  3690                           ;main.c: 620: T_VAR += UpdateDistance();
  3691  01030E  EC4C  F0A7         	call	_UpdateDistance	;wreg free
  3692  010312  0100               	movlb	0	; () banked
  3693  010314  5166               	movf	?_UpdateDistance& (0+255),w,b
  3694  010316  262F               	addwf	_T_VAR,f,c
  3695  010318  5167               	movf	(?_UpdateDistance+1)& (0+255),w,b
  3696  01031A  2230               	addwfc	_T_VAR+1,f,c
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;main.c: 622: Square_Dist = T_VAR + mod;
  3700  01031C  0101               	movlb	1	; () banked
  3701  01031E  5132               	movf	_mod& (0+255),w,b
  3702  010320  242F               	addwf	_T_VAR,w,c
  3703  010322  6F34               	movwf	_Square_Dist& (0+255),b
  3704  010324  5133               	movf	(_mod+1)& (0+255),w,b
  3705  010326  2030               	addwfc	_T_VAR+1,w,c
  3706  010328  6F35               	movwf	(_Square_Dist+1)& (0+255),b
  3707                           
  3708                           ; BSR set to: 1
  3709                           ;main.c: 623: printf("%c", (char)35);
  3710  01032A  0EFC               	movlw	low STR_1
  3711  01032C  0100               	movlb	0	; () banked
  3712  01032E  6F75               	movwf	printf@f& (0+255),b
  3713  010330  0EFF               	movlw	high STR_1
  3714  010332  6F76               	movwf	(printf@f+1)& (0+255),b
  3715  010334  0E00               	movlw	0
  3716  010336  6F78               	movwf	(?_printf+3)& (0+255),b
  3717  010338  0E23               	movlw	35
  3718  01033A  6F77               	movwf	(?_printf+2)& (0+255),b
  3719  01033C  EC43  F096         	call	_printf	;wreg free
  3720                           
  3721                           ;main.c: 624: printf("SQUARE DRIVE MODE 3! \n");
  3722  010340  0E46               	movlw	low STR_51
  3723  010342  0100               	movlb	0	; () banked
  3724  010344  6F75               	movwf	printf@f& (0+255),b
  3725  010346  0EFF               	movlw	high STR_51
  3726  010348  6F76               	movwf	(printf@f+1)& (0+255),b
  3727  01034A  EC43  F096         	call	_printf	;wreg free
  3728                           
  3729                           ;main.c: 625: printf("Total: %d\n", Square_Dist);
  3730  01034E  0EF1               	movlw	low STR_52
  3731  010350  0100               	movlb	0	; () banked
  3732  010352  6F75               	movwf	printf@f& (0+255),b
  3733  010354  0EFF               	movlw	high STR_52
  3734  010356  6F76               	movwf	(printf@f+1)& (0+255),b
  3735  010358  C134  F077         	movff	_Square_Dist,?_printf+2
  3736  01035C  C135  F078         	movff	_Square_Dist+1,?_printf+3
  3737  010360  EC43  F096         	call	_printf	;wreg free
  3738                           
  3739                           ;main.c: 626: printf("                 \n");
  3740  010364  0E9C               	movlw	low STR_2
  3741  010366  0100               	movlb	0	; () banked
  3742  010368  6F75               	movwf	printf@f& (0+255),b
  3743  01036A  0EFF               	movlw	high STR_2
  3744  01036C  6F76               	movwf	(printf@f+1)& (0+255),b
  3745  01036E  EC43  F096         	call	_printf	;wreg free
  3746                           
  3747                           ;main.c: 627: printf("                 \n");
  3748  010372  0E9C               	movlw	low STR_2
  3749  010374  0100               	movlb	0	; () banked
  3750  010376  6F75               	movwf	printf@f& (0+255),b
  3751  010378  0EFF               	movlw	high STR_2
  3752  01037A  6F76               	movwf	(printf@f+1)& (0+255),b
  3753  01037C  EC43  F096         	call	_printf	;wreg free
  3754                           
  3755                           ;main.c: 628: printf("                 \n");
  3756  010380  0E9C               	movlw	low STR_2
  3757  010382  0100               	movlb	0	; () banked
  3758  010384  6F75               	movwf	printf@f& (0+255),b
  3759  010386  0EFF               	movlw	high STR_2
  3760  010388  6F76               	movwf	(printf@f+1)& (0+255),b
  3761  01038A  EC43  F096         	call	_printf	;wreg free
  3762                           
  3763                           ;main.c: 629: printf("                 \n");
  3764  01038E  0E9C               	movlw	low STR_2
  3765  010390  0100               	movlb	0	; () banked
  3766  010392  6F75               	movwf	printf@f& (0+255),b
  3767  010394  0EFF               	movlw	high STR_2
  3768  010396  6F76               	movwf	(printf@f+1)& (0+255),b
  3769  010398  EC43  F096         	call	_printf	;wreg free
  3770                           
  3771                           ;main.c: 630: printf("                 \n");
  3772  01039C  0E9C               	movlw	low STR_2
  3773  01039E  0100               	movlb	0	; () banked
  3774  0103A0  6F75               	movwf	printf@f& (0+255),b
  3775  0103A2  0EFF               	movlw	high STR_2
  3776  0103A4  6F76               	movwf	(printf@f+1)& (0+255),b
  3777  0103A6  EC43  F096         	call	_printf	;wreg free
  3778                           
  3779                           ;main.c: 631: printf("                 \n");
  3780  0103AA  0E9C               	movlw	low STR_2
  3781  0103AC  0100               	movlb	0	; () banked
  3782  0103AE  6F75               	movwf	printf@f& (0+255),b
  3783  0103B0  0EFF               	movlw	high STR_2
  3784  0103B2  6F76               	movwf	(printf@f+1)& (0+255),b
  3785  0103B4  EC43  F096         	call	_printf	;wreg free
  3786                           
  3787                           ;main.c: 632: printf("                 \n");
  3788  0103B8  0E9C               	movlw	low STR_2
  3789  0103BA  0100               	movlb	0	; () banked
  3790  0103BC  6F75               	movwf	printf@f& (0+255),b
  3791  0103BE  0EFF               	movlw	high STR_2
  3792  0103C0  6F76               	movwf	(printf@f+1)& (0+255),b
  3793  0103C2  EC43  F096         	call	_printf	;wreg free
  3794                           
  3795                           ;main.c: 633: printf("                 \n");
  3796  0103C6  0E9C               	movlw	low STR_2
  3797  0103C8  0100               	movlb	0	; () banked
  3798  0103CA  6F75               	movwf	printf@f& (0+255),b
  3799  0103CC  0EFF               	movlw	high STR_2
  3800  0103CE  6F76               	movwf	(printf@f+1)& (0+255),b
  3801  0103D0  EC43  F096         	call	_printf	;wreg free
  3802                           
  3803                           ;main.c: 634: Console_Render();
  3804  0103D4  EC66  F092         	call	_Console_Render	;wreg free
  3805                           
  3806                           ;main.c: 636: if (T_VAR >= 1000){
  3807  0103D8  BE30               	btfsc	_T_VAR+1,7,c
  3808  0103DA  D016               	goto	l2271
  3809  0103DC  0EE8               	movlw	232
  3810  0103DE  5C2F               	subwf	_T_VAR,w,c
  3811  0103E0  0E03               	movlw	3
  3812  0103E2  5830               	subwfb	_T_VAR+1,w,c
  3813  0103E4  A0D8               	btfss	status,0,c
  3814  0103E6  D010               	goto	l2271
  3815                           
  3816                           ;main.c: 637: Turn(82);
  3817  0103E8  0E00               	movlw	0
  3818  0103EA  0100               	movlb	0	; () banked
  3819  0103EC  6F67               	movwf	(Turn@Angle+1)& (0+255),b
  3820  0103EE  0E52               	movlw	82
  3821  0103F0  6F66               	movwf	Turn@Angle& (0+255),b
  3822  0103F2  EC3F  F0A5         	call	_Turn	;wreg free
  3823                           
  3824                           ;main.c: 638: T_VAR = 0;
  3825  0103F6  0E00               	movlw	0
  3826  0103F8  6E30               	movwf	_T_VAR+1,c
  3827  0103FA  0E00               	movlw	0
  3828  0103FC  6E2F               	movwf	_T_VAR,c
  3829                           
  3830                           ;main.c: 639: mod += 1000;
  3831  0103FE  0101               	movlb	1	; () banked
  3832  010400  0EE8               	movlw	232
  3833  010402  2732               	addwf	_mod& (0+255),f,b
  3834  010404  0E03               	movlw	3
  3835  010406  2333               	addwfc	(_mod+1)& (0+255),f,b
  3836  010408                     l2271:
  3837                           
  3838                           ;main.c: 640: }
  3839                           ;main.c: 642: if (Square_Dist >= 4000){
  3840                           
  3841                           ; BSR set to: 1
  3842  010408  0101               	movlb	1	; () banked
  3843  01040A  BF35               	btfsc	(_Square_Dist+1)& (0+255),7,b
  3844  01040C  D1BE               	goto	l2274
  3845  01040E  0EA0               	movlw	160
  3846  010410  5D34               	subwf	_Square_Dist& (0+255),w,b
  3847  010412  0E0F               	movlw	15
  3848  010414  5935               	subwfb	(_Square_Dist+1)& (0+255),w,b
  3849  010416  A0D8               	btfss	status,0,c
  3850  010418  D1B8               	goto	l2274
  3851                           
  3852                           ; BSR set to: 1
  3853                           ;main.c: 644: Robot_Stop();
  3854  01041A  ECED  F0AE         	call	_Robot_Stop	;wreg free
  3855                           
  3856                           ;main.c: 646: delay_ms(500);
  3857  01041E  0E01               	movlw	1
  3858  010420  0100               	movlb	0	; () banked
  3859  010422  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3860  010424  0EF4               	movlw	244
  3861  010426  6F60               	movwf	delay_ms@ms& (0+255),b
  3862  010428  EC14  F0A9         	call	_delay_ms	;wreg free
  3863  01042C  D1A9               	goto	u14720
  3864  01042E                     l2270:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;main.c: 652: else if (mode == 4){
  3868                           
  3869                           ; BSR set to: 0
  3870  01042E  0E04               	movlw	4
  3871  010430  19EB               	xorwf	_mode& (0+255),w,b
  3872  010432  11EC               	iorwf	(_mode+1)& (0+255),w,b
  3873  010434  A4D8               	btfss	status,2,c
  3874  010436  D1A9               	goto	l2274
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;main.c: 654: Sensor_Observe2();
  3878  010438  EC56  F09B         	call	_Sensor_Observe2	;wreg free
  3879                           
  3880                           ;main.c: 656: Closest_Object2();
  3881  01043C  ECF6  F0A5         	call	_Closest_Object2	;wreg free
  3882                           
  3883                           ;main.c: 658: int Target_Distance = Low_Sensor;
  3884  010440  C04B  F0E4         	movff	_Low_Sensor,main@Target_Distance
  3885  010444  C04C  F0E5         	movff	_Low_Sensor+1,main@Target_Distance+1
  3886                           
  3887                           ;main.c: 659: LED_Set(eLED2, 1);
  3888  010448  0E01               	movlw	1
  3889  01044A  0100               	movlb	0	; () banked
  3890  01044C  6F74               	movwf	LED_Set@pValue& (0+255),b
  3891  01044E  0E01               	movlw	1
  3892  010450  EC4B  F0AB         	call	_LED_Set
  3893                           
  3894                           ;main.c: 660: Get_Sensor_State();
  3895  010454  EC52  F0A8         	call	_Get_Sensor_State	;wreg free
  3896                           
  3897                           ;main.c: 661: test = (BumpSensor & 0b00000011);
  3898  010458  C03B  F0DB         	movff	_BumpSensor,??_main
  3899  01045C  0E03               	movlw	3
  3900  01045E  0100               	movlb	0	; () banked
  3901  010460  17DB               	andwf	??_main& (0+255),f,b
  3902  010462  51DB               	movf	??_main& (0+255),w,b
  3903  010464  0101               	movlb	1	; () banked
  3904  010466  6F1C               	movwf	_test& (0+255),b
  3905  010468  6B1D               	clrf	(_test+1)& (0+255),b
  3906                           
  3907                           ; BSR set to: 1
  3908                           ;main.c: 662: if (test>0){
  3909  01046A  BF1D               	btfsc	(_test+1)& (0+255),7,b
  3910  01046C  D184               	goto	l2287
  3911  01046E  511D               	movf	(_test+1)& (0+255),w,b
  3912  010470  E103               	bnz	u14600
  3913  010472  051C               	decf	_test& (0+255),w,b
  3914  010474  A0D8               	btfss	status,0,c
  3915  010476  D17F               	goto	l2287
  3916  010478                     u14600:
  3917                           
  3918                           ; BSR set to: 1
  3919                           ;main.c: 663: mode=0;
  3920  010478  0E00               	movlw	0
  3921  01047A  0100               	movlb	0	; () banked
  3922  01047C  6FEC               	movwf	(_mode+1)& (0+255),b
  3923  01047E  0E00               	movlw	0
  3924  010480  6FEB               	movwf	_mode& (0+255),b
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;main.c: 664: }
  3928                           ;main.c: 666: while (test == 0){
  3929  010482  D179               	goto	l2287
  3930  010484                     
  3931                           ;main.c: 668: ADCAverage();
  3932                           
  3933                           ; BSR set to: 0
  3934  010484  ECE9  F088         	call	_ADCAverage	;wreg free
  3935                           
  3936                           ;main.c: 669: printf("%c", (char)35);
  3937  010488  0EFC               	movlw	low STR_1
  3938  01048A  0100               	movlb	0	; () banked
  3939  01048C  6F75               	movwf	printf@f& (0+255),b
  3940  01048E  0EFF               	movlw	high STR_1
  3941  010490  6F76               	movwf	(printf@f+1)& (0+255),b
  3942  010492  0E00               	movlw	0
  3943  010494  6F78               	movwf	(?_printf+3)& (0+255),b
  3944  010496  0E23               	movlw	35
  3945  010498  6F77               	movwf	(?_printf+2)& (0+255),b
  3946  01049A  EC43  F096         	call	_printf	;wreg free
  3947                           
  3948                           ;main.c: 670: printf("The target distance is: %d\n", Target_Distance);
  3949  01049E  0ED7               	movlw	low STR_62
  3950  0104A0  0100               	movlb	0	; () banked
  3951  0104A2  6F75               	movwf	printf@f& (0+255),b
  3952  0104A4  0EFE               	movlw	high STR_62
  3953  0104A6  6F76               	movwf	(printf@f+1)& (0+255),b
  3954  0104A8  C0E4  F077         	movff	main@Target_Distance,?_printf+2
  3955  0104AC  C0E5  F078         	movff	main@Target_Distance+1,?_printf+3
  3956  0104B0  EC43  F096         	call	_printf	;wreg free
  3957                           
  3958                           ;main.c: 671: printf("ADC AVERAGE %d\n", average);
  3959  0104B4  0ED2               	movlw	low STR_63
  3960  0104B6  0100               	movlb	0	; () banked
  3961  0104B8  6F75               	movwf	printf@f& (0+255),b
  3962  0104BA  0EFF               	movlw	high STR_63
  3963  0104BC  6F76               	movwf	(printf@f+1)& (0+255),b
  3964  0104BE  C0E9  F077         	movff	_average,?_printf+2
  3965  0104C2  C0EA  F078         	movff	_average+1,?_printf+3
  3966  0104C6  EC43  F096         	call	_printf	;wreg free
  3967                           
  3968                           ;main.c: 672: printf("                 \n");
  3969  0104CA  0E9C               	movlw	low STR_2
  3970  0104CC  0100               	movlb	0	; () banked
  3971  0104CE  6F75               	movwf	printf@f& (0+255),b
  3972  0104D0  0EFF               	movlw	high STR_2
  3973  0104D2  6F76               	movwf	(printf@f+1)& (0+255),b
  3974  0104D4  EC43  F096         	call	_printf	;wreg free
  3975                           
  3976                           ;main.c: 673: printf("                 \n");
  3977  0104D8  0E9C               	movlw	low STR_2
  3978  0104DA  0100               	movlb	0	; () banked
  3979  0104DC  6F75               	movwf	printf@f& (0+255),b
  3980  0104DE  0EFF               	movlw	high STR_2
  3981  0104E0  6F76               	movwf	(printf@f+1)& (0+255),b
  3982  0104E2  EC43  F096         	call	_printf	;wreg free
  3983                           
  3984                           ;main.c: 674: printf("                 \n");
  3985  0104E6  0E9C               	movlw	low STR_2
  3986  0104E8  0100               	movlb	0	; () banked
  3987  0104EA  6F75               	movwf	printf@f& (0+255),b
  3988  0104EC  0EFF               	movlw	high STR_2
  3989  0104EE  6F76               	movwf	(printf@f+1)& (0+255),b
  3990  0104F0  EC43  F096         	call	_printf	;wreg free
  3991                           
  3992                           ;main.c: 675: printf("                 \n");
  3993  0104F4  0E9C               	movlw	low STR_2
  3994  0104F6  0100               	movlb	0	; () banked
  3995  0104F8  6F75               	movwf	printf@f& (0+255),b
  3996  0104FA  0EFF               	movlw	high STR_2
  3997  0104FC  6F76               	movwf	(printf@f+1)& (0+255),b
  3998  0104FE  EC43  F096         	call	_printf	;wreg free
  3999                           
  4000                           ;main.c: 676: printf("                 \n");
  4001  010502  0E9C               	movlw	low STR_2
  4002  010504  0100               	movlb	0	; () banked
  4003  010506  6F75               	movwf	printf@f& (0+255),b
  4004  010508  0EFF               	movlw	high STR_2
  4005  01050A  6F76               	movwf	(printf@f+1)& (0+255),b
  4006  01050C  EC43  F096         	call	_printf	;wreg free
  4007                           
  4008                           ;main.c: 677: printf("                 \n");
  4009  010510  0E9C               	movlw	low STR_2
  4010  010512  0100               	movlb	0	; () banked
  4011  010514  6F75               	movwf	printf@f& (0+255),b
  4012  010516  0EFF               	movlw	high STR_2
  4013  010518  6F76               	movwf	(printf@f+1)& (0+255),b
  4014  01051A  EC43  F096         	call	_printf	;wreg free
  4015                           
  4016                           ;main.c: 678: printf("                 \n");
  4017  01051E  0E9C               	movlw	low STR_2
  4018  010520  0100               	movlb	0	; () banked
  4019  010522  6F75               	movwf	printf@f& (0+255),b
  4020  010524  0EFF               	movlw	high STR_2
  4021  010526  6F76               	movwf	(printf@f+1)& (0+255),b
  4022  010528  EC43  F096         	call	_printf	;wreg free
  4023                           
  4024                           ;main.c: 679: printf("                 \n");
  4025  01052C  0E9C               	movlw	low STR_2
  4026  01052E  0100               	movlb	0	; () banked
  4027  010530  6F75               	movwf	printf@f& (0+255),b
  4028  010532  0EFF               	movlw	high STR_2
  4029  010534  6F76               	movwf	(printf@f+1)& (0+255),b
  4030  010536  EC43  F096         	call	_printf	;wreg free
  4031                           
  4032                           ;main.c: 680: Console_Render();
  4033  01053A  EC66  F092         	call	_Console_Render	;wreg free
  4034                           
  4035                           ;main.c: 681: HMI_SetNumber(average);
  4036  01053E  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
  4037  010542  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  4038  010546  ECDA  F0AE         	call	_HMI_SetNumber	;wreg free
  4039                           
  4040                           ;main.c: 683: HMI_Render();
  4041  01054A  EC4F  F0AD         	call	_HMI_Render	;wreg free
  4042                           
  4043                           ;main.c: 685: HMI_Poll();
  4044  01054E  EC85  F0A8         	call	_HMI_Poll	;wreg free
  4045                           
  4046                           ;main.c: 686: if (Target_Distance <= average+2 || Target_Distance >= average-2){
  4047  010552  0E02               	movlw	2
  4048  010554  0100               	movlb	0	; () banked
  4049  010556  25E9               	addwf	_average& (0+255),w,b
  4050  010558  6FDB               	movwf	??_main& (0+255),b
  4051  01055A  0E00               	movlw	0
  4052  01055C  21EA               	addwfc	(_average+1)& (0+255),w,b
  4053  01055E  6FDC               	movwf	(??_main+1)& (0+255),b
  4054  010560  51E4               	movf	main@Target_Distance& (0+255),w,b
  4055  010562  5DDB               	subwf	??_main& (0+255),w,b
  4056  010564  51DC               	movf	(??_main+1)& (0+255),w,b
  4057  010566  0A80               	xorlw	128
  4058  010568  6FDD               	movwf	(??_main+2)& (0+255),b
  4059  01056A  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4060  01056C  0A80               	xorlw	128
  4061  01056E  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4062  010570  B0D8               	btfsc	status,0,c
  4063  010572  D016               	goto	u14620
  4064                           
  4065                           ; BSR set to: 0
  4066  010574  0EFE               	movlw	254
  4067  010576  6FDB               	movwf	??_main& (0+255),b
  4068  010578  0EFF               	movlw	255
  4069  01057A  6FDC               	movwf	(??_main+1)& (0+255),b
  4070  01057C  C0E9  F0DD         	movff	_average,??_main+2
  4071  010580  C0EA  F0DE         	movff	_average+1,??_main+3
  4072  010584  51DB               	movf	??_main& (0+255),w,b
  4073  010586  27DD               	addwf	(??_main+2)& (0+255),f,b
  4074  010588  51DC               	movf	(??_main+1)& (0+255),w,b
  4075  01058A  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4076  01058C  51DD               	movf	(??_main+2)& (0+255),w,b
  4077  01058E  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4078  010590  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4079  010592  0A80               	xorlw	128
  4080  010594  6FDF               	movwf	(??_main+4)& (0+255),b
  4081  010596  51DE               	movf	(??_main+3)& (0+255),w,b
  4082  010598  0A80               	xorlw	128
  4083  01059A  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4084  01059C  A0D8               	btfss	status,0,c
  4085  01059E  D012               	goto	l2278
  4086  0105A0                     u14620:
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;main.c: 687: BangBang(50,50,50,50);
  4090                           
  4091                           ; BSR set to: 0
  4092  0105A0  0E00               	movlw	0
  4093  0105A2  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4094  0105A4  0E32               	movlw	50
  4095  0105A6  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4096  0105A8  0E00               	movlw	0
  4097  0105AA  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4098  0105AC  0E32               	movlw	50
  4099  0105AE  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4100  0105B0  0E00               	movlw	0
  4101  0105B2  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4102  0105B4  0E32               	movlw	50
  4103  0105B6  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4104  0105B8  0E00               	movlw	0
  4105  0105BA  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4106  0105BC  0E32               	movlw	50
  4107  0105BE  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4108  0105C0  EC9F  F0AE         	call	_BangBang	;wreg free
  4109  0105C4                     l2278:
  4110                           
  4111                           ;main.c: 688: }
  4112                           ;main.c: 689: if (Target_Distance > average + 2){
  4113  0105C4  0E02               	movlw	2
  4114  0105C6  0100               	movlb	0	; () banked
  4115  0105C8  25E9               	addwf	_average& (0+255),w,b
  4116  0105CA  6FDB               	movwf	??_main& (0+255),b
  4117  0105CC  0E00               	movlw	0
  4118  0105CE  21EA               	addwfc	(_average+1)& (0+255),w,b
  4119  0105D0  6FDC               	movwf	(??_main+1)& (0+255),b
  4120  0105D2  51E4               	movf	main@Target_Distance& (0+255),w,b
  4121  0105D4  5DDB               	subwf	??_main& (0+255),w,b
  4122  0105D6  51DC               	movf	(??_main+1)& (0+255),w,b
  4123  0105D8  0A80               	xorlw	128
  4124  0105DA  6FDD               	movwf	(??_main+2)& (0+255),b
  4125  0105DC  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4126  0105DE  0A80               	xorlw	128
  4127  0105E0  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4128  0105E2  B0D8               	btfsc	status,0,c
  4129  0105E4  D012               	goto	l2281
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;main.c: 691: BangBang(50,50,40,40);
  4133  0105E6  0E00               	movlw	0
  4134  0105E8  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4135  0105EA  0E32               	movlw	50
  4136  0105EC  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4137  0105EE  0E00               	movlw	0
  4138  0105F0  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4139  0105F2  0E32               	movlw	50
  4140  0105F4  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4141  0105F6  0E00               	movlw	0
  4142  0105F8  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4143  0105FA  0E28               	movlw	40
  4144  0105FC  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4145  0105FE  0E00               	movlw	0
  4146  010600  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4147  010602  0E28               	movlw	40
  4148  010604  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4149  010606  EC9F  F0AE         	call	_BangBang	;wreg free
  4150  01060A                     l2281:
  4151                           
  4152                           ;main.c: 692: }
  4153                           ;main.c: 693: if (Target_Distance < average - 2){
  4154  01060A  0EFE               	movlw	254
  4155  01060C  0100               	movlb	0	; () banked
  4156  01060E  6FDB               	movwf	??_main& (0+255),b
  4157  010610  0EFF               	movlw	255
  4158  010612  6FDC               	movwf	(??_main+1)& (0+255),b
  4159  010614  C0E9  F0DD         	movff	_average,??_main+2
  4160  010618  C0EA  F0DE         	movff	_average+1,??_main+3
  4161  01061C  51DB               	movf	??_main& (0+255),w,b
  4162  01061E  27DD               	addwf	(??_main+2)& (0+255),f,b
  4163  010620  51DC               	movf	(??_main+1)& (0+255),w,b
  4164  010622  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4165  010624  51DD               	movf	(??_main+2)& (0+255),w,b
  4166  010626  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4167  010628  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4168  01062A  0A80               	xorlw	128
  4169  01062C  6FDF               	movwf	(??_main+4)& (0+255),b
  4170  01062E  51DE               	movf	(??_main+3)& (0+255),w,b
  4171  010630  0A80               	xorlw	128
  4172  010632  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4173  010634  B0D8               	btfsc	status,0,c
  4174  010636  D012               	goto	l2282
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;main.c: 694: BangBang(40,40,50,50);
  4178  010638  0E00               	movlw	0
  4179  01063A  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4180  01063C  0E28               	movlw	40
  4181  01063E  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4182  010640  0E00               	movlw	0
  4183  010642  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4184  010644  0E28               	movlw	40
  4185  010646  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4186  010648  0E00               	movlw	0
  4187  01064A  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4188  01064C  0E32               	movlw	50
  4189  01064E  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4190  010650  0E00               	movlw	0
  4191  010652  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4192  010654  0E32               	movlw	50
  4193  010656  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4194  010658  EC9F  F0AE         	call	_BangBang	;wreg free
  4195  01065C                     l2282:
  4196                           
  4197                           ;main.c: 695: }
  4198                           ;main.c: 697: if (Target_Distance > average + 5){
  4199  01065C  0E05               	movlw	5
  4200  01065E  0100               	movlb	0	; () banked
  4201  010660  25E9               	addwf	_average& (0+255),w,b
  4202  010662  6FDB               	movwf	??_main& (0+255),b
  4203  010664  0E00               	movlw	0
  4204  010666  21EA               	addwfc	(_average+1)& (0+255),w,b
  4205  010668  6FDC               	movwf	(??_main+1)& (0+255),b
  4206  01066A  51E4               	movf	main@Target_Distance& (0+255),w,b
  4207  01066C  5DDB               	subwf	??_main& (0+255),w,b
  4208  01066E  51DC               	movf	(??_main+1)& (0+255),w,b
  4209  010670  0A80               	xorlw	128
  4210  010672  6FDD               	movwf	(??_main+2)& (0+255),b
  4211  010674  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4212  010676  0A80               	xorlw	128
  4213  010678  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4214  01067A  B0D8               	btfsc	status,0,c
  4215  01067C  D012               	goto	l2283
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;main.c: 699: BangBang(50,50,30,30);
  4219  01067E  0E00               	movlw	0
  4220  010680  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4221  010682  0E32               	movlw	50
  4222  010684  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4223  010686  0E00               	movlw	0
  4224  010688  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4225  01068A  0E32               	movlw	50
  4226  01068C  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4227  01068E  0E00               	movlw	0
  4228  010690  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4229  010692  0E1E               	movlw	30
  4230  010694  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4231  010696  0E00               	movlw	0
  4232  010698  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4233  01069A  0E1E               	movlw	30
  4234  01069C  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4235  01069E  EC9F  F0AE         	call	_BangBang	;wreg free
  4236  0106A2                     l2283:
  4237                           
  4238                           ;main.c: 700: }
  4239                           ;main.c: 701: if (Target_Distance < average - 5){
  4240  0106A2  0EFB               	movlw	251
  4241  0106A4  0100               	movlb	0	; () banked
  4242  0106A6  6FDB               	movwf	??_main& (0+255),b
  4243  0106A8  0EFF               	movlw	255
  4244  0106AA  6FDC               	movwf	(??_main+1)& (0+255),b
  4245  0106AC  C0E9  F0DD         	movff	_average,??_main+2
  4246  0106B0  C0EA  F0DE         	movff	_average+1,??_main+3
  4247  0106B4  51DB               	movf	??_main& (0+255),w,b
  4248  0106B6  27DD               	addwf	(??_main+2)& (0+255),f,b
  4249  0106B8  51DC               	movf	(??_main+1)& (0+255),w,b
  4250  0106BA  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4251  0106BC  51DD               	movf	(??_main+2)& (0+255),w,b
  4252  0106BE  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4253  0106C0  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4254  0106C2  0A80               	xorlw	128
  4255  0106C4  6FDF               	movwf	(??_main+4)& (0+255),b
  4256  0106C6  51DE               	movf	(??_main+3)& (0+255),w,b
  4257  0106C8  0A80               	xorlw	128
  4258  0106CA  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4259  0106CC  B0D8               	btfsc	status,0,c
  4260  0106CE  D012               	goto	l2284
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;main.c: 702: BangBang(30,30,50,50);
  4264  0106D0  0E00               	movlw	0
  4265  0106D2  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4266  0106D4  0E1E               	movlw	30
  4267  0106D6  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4268  0106D8  0E00               	movlw	0
  4269  0106DA  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4270  0106DC  0E1E               	movlw	30
  4271  0106DE  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4272  0106E0  0E00               	movlw	0
  4273  0106E2  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4274  0106E4  0E32               	movlw	50
  4275  0106E6  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4276  0106E8  0E00               	movlw	0
  4277  0106EA  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4278  0106EC  0E32               	movlw	50
  4279  0106EE  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4280  0106F0  EC9F  F0AE         	call	_BangBang	;wreg free
  4281  0106F4                     l2284:
  4282                           
  4283                           ;main.c: 703: }
  4284                           ;main.c: 704: Get_Sensor_State();
  4285  0106F4  EC52  F0A8         	call	_Get_Sensor_State	;wreg free
  4286                           
  4287                           ;main.c: 705: test = (BumpSensor & 0b00000011);
  4288  0106F8  C03B  F0DB         	movff	_BumpSensor,??_main
  4289  0106FC  0E03               	movlw	3
  4290  0106FE  0100               	movlb	0	; () banked
  4291  010700  17DB               	andwf	??_main& (0+255),f,b
  4292  010702  51DB               	movf	??_main& (0+255),w,b
  4293  010704  0101               	movlb	1	; () banked
  4294  010706  6F1C               	movwf	_test& (0+255),b
  4295  010708  6B1D               	clrf	(_test+1)& (0+255),b
  4296                           
  4297                           ; BSR set to: 1
  4298                           ;main.c: 706: if (test > 0){
  4299  01070A  BF1D               	btfsc	(_test+1)& (0+255),7,b
  4300  01070C  D00B               	goto	l2285
  4301  01070E  511D               	movf	(_test+1)& (0+255),w,b
  4302  010710  E103               	bnz	u14670
  4303  010712  051C               	decf	_test& (0+255),w,b
  4304  010714  A0D8               	btfss	status,0,c
  4305  010716  D006               	goto	l2285
  4306  010718                     u14670:
  4307                           
  4308                           ; BSR set to: 1
  4309                           ;main.c: 707: Target_Distance=0;
  4310  010718  0E00               	movlw	0
  4311  01071A  0100               	movlb	0	; () banked
  4312  01071C  6FE5               	movwf	(main@Target_Distance+1)& (0+255),b
  4313  01071E  0E00               	movlw	0
  4314  010720  6FE4               	movwf	main@Target_Distance& (0+255),b
  4315                           
  4316                           ;main.c: 708: break;
  4317  010722  D02E               	goto	u14720
  4318  010724                     l2285:
  4319                           
  4320                           ;main.c: 709: }
  4321                           ;main.c: 713: if(HMIBoard.mUp.mGetState()==1){
  4322                           
  4323                           ; BSR set to: 0
  4324  010724  EE21  F067         	lfsr	2,_HMIBoard+35
  4325  010728  D801               	call	u14688
  4326  01072A  D00A               	goto	u14689
  4327  01072C                     u14688:
  4328  01072C  0005               	push	
  4329  01072E  6EFA               	movwf	pclath,c
  4330  010730  50DE               	movf	postinc2,w,c
  4331  010732  6EFD               	movwf	tosl,c
  4332  010734  50DE               	movf	postinc2,w,c
  4333  010736  6EFE               	movwf	tosh,c
  4334  010738  50DE               	movf	postinc2,w,c
  4335  01073A  6EFF               	movwf	tosu,c
  4336  01073C  50FA               	movf	pclath,w,c
  4337  01073E  0012               	return		;indir
  4338  010740                     u14689:
  4339  010740  06E8               	decf	wreg,f,c
  4340  010742  A4D8               	btfss	status,2,c
  4341  010744  D018               	goto	l2287
  4342                           
  4343                           ;main.c: 714: up = HMIBoard.mUp.mGetState();
  4344  010746  EE21  F067         	lfsr	2,_HMIBoard+35
  4345  01074A  D801               	call	u14708
  4346  01074C  D00A               	goto	u14709
  4347  01074E                     u14708:
  4348  01074E  0005               	push	
  4349  010750  6EFA               	movwf	pclath,c
  4350  010752  50DE               	movf	postinc2,w,c
  4351  010754  6EFD               	movwf	tosl,c
  4352  010756  50DE               	movf	postinc2,w,c
  4353  010758  6EFE               	movwf	tosh,c
  4354  01075A  50DE               	movf	postinc2,w,c
  4355  01075C  6EFF               	movwf	tosu,c
  4356  01075E  50FA               	movf	pclath,w,c
  4357  010760  0012               	return		;indir
  4358  010762                     u14709:
  4359  010762  0100               	movlb	0	; () banked
  4360  010764  6FE3               	movwf	main@up& (0+255),b
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;main.c: 715: if (up){
  4364  010766  51E3               	movf	main@up& (0+255),w,b
  4365  010768  B4D8               	btfsc	status,2,c
  4366  01076A  D00A               	goto	u14720
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;main.c: 716: mode = 0;
  4370  01076C  0E00               	movlw	0
  4371  01076E  6FEC               	movwf	(_mode+1)& (0+255),b
  4372  010770  0E00               	movlw	0
  4373  010772  6FEB               	movwf	_mode& (0+255),b
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;main.c: 717: }
  4377                           ;main.c: 718: break;
  4378  010774  D005               	goto	u14720
  4379  010776                     l2287:
  4380                           
  4381                           ; BSR set to: 0
  4382                           
  4383                           ; BSR set to: 0
  4384  010776  0101               	movlb	1	; () banked
  4385  010778  511C               	movf	_test& (0+255),w,b
  4386  01077A  111D               	iorwf	(_test+1)& (0+255),w,b
  4387  01077C  B4D8               	btfsc	status,2,c
  4388  01077E  D682               	goto	l2277
  4389  010780                     u14720:
  4390                           
  4391                           ;main.c: 719: }
  4392                           ;main.c: 721: }
  4393                           ;main.c: 722: mode=0;
  4394                           
  4395                           ; BSR set to: 1
  4396  010780  0E00               	movlw	0
  4397  010782  0100               	movlb	0	; () banked
  4398  010784  6FEC               	movwf	(_mode+1)& (0+255),b
  4399  010786  0E00               	movlw	0
  4400  010788  6FEB               	movwf	_mode& (0+255),b
  4401  01078A                     l2274:
  4402                           
  4403                           ;main.c: 728: }
  4404                           ;main.c: 730: Console_Render();
  4405                           
  4406                           ; BSR set to: 0
  4407                           
  4408                           ; BSR set to: 0
  4409                           
  4410                           ; BSR set to: 0
  4411                           
  4412                           ; BSR set to: 0
  4413                           
  4414                           ; BSR set to: 0
  4415  01078A  EC66  F092         	call	_Console_Render	;wreg free
  4416                           
  4417                           ;main.c: 731: if (MXK_Release())
  4418  01078E  EC8C  F0AF         	call	_MXK_Release	;wreg free
  4419  010792  0900               	iorlw	0
  4420  010794  B4D8               	btfsc	status,2,c
  4421  010796  D457               	goto	l2256
  4422                           
  4423                           ;main.c: 732: MXK_Dequeue();
  4424  010798  EC85  F0AD         	call	_MXK_Dequeue	;wreg free
  4425                           
  4426                           ;main.c: 733: }
  4427                           ;main.c: 734: }
  4428  01079C  D454               	goto	l2256
  4429  01079E                     __end_of_main:
  4430                           	opt stack 0
  4431                           tosu	equ	0xFFF
  4432                           tosh	equ	0xFFE
  4433                           tosl	equ	0xFFD
  4434                           pclath	equ	0xFFA
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           postinc0	equ	0xFEE
  4440                           wreg	equ	0xFE8
  4441                           postdec1	equ	0xFE5
  4442                           fsr1h	equ	0xFE2
  4443                           fsr1l	equ	0xFE1
  4444                           postinc2	equ	0xFDE
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _UpdateDistance *****************
  4448 ;; Defined at:
  4449 ;;		line 196 in file "main.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  2    6[BANK0 ] int 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4463 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;Total ram usage:        4 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    8
  4470 ;; This function calls:
  4471 ;;		_delay_ms
  4472 ;;		_eusartSend
  4473 ;; This function is called by:
  4474 ;;		_main
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text1
  4479  014E98                     __ptext1:
  4480                           	opt stack 0
  4481  014E98                     _UpdateDistance:
  4482                           	opt stack 22
  4483                           
  4484                           ;main.c: 197: eusartSend(149);
  4485                           
  4486                           ;incstack = 0
  4487  014E98  0E95               	movlw	149
  4488  014E9A  EC74  F0B0         	call	_eusartSend
  4489                           
  4490                           ;main.c: 198: eusartSend(1);
  4491  014E9E  0E01               	movlw	1
  4492  014EA0  EC74  F0B0         	call	_eusartSend
  4493                           
  4494                           ;main.c: 199: eusartSend(19);
  4495  014EA4  0E13               	movlw	19
  4496  014EA6  EC74  F0B0         	call	_eusartSend
  4497                           
  4498                           ;main.c: 201: delay_ms(10);
  4499  014EAA  0E00               	movlw	0
  4500  014EAC  0100               	movlb	0	; () banked
  4501  014EAE  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  4502  014EB0  0E0A               	movlw	10
  4503  014EB2  6F60               	movwf	delay_ms@ms& (0+255),b
  4504  014EB4  EC14  F0A9         	call	_delay_ms	;wreg free
  4505  014EB8  AA9E               	btfss	3998,5,c	;volatile
  4506  014EBA  D7FE               	goto	l2167
  4507                           
  4508                           ;main.c: 204: Current_Dist1 = RCREG1;
  4509  014EBC  CFAF F138          	movff	4015,_Current_Dist1	;volatile
  4510  014EC0  0101               	movlb	1	; () banked
  4511  014EC2  6B39               	clrf	(_Current_Dist1+1)& (0+255),b
  4512  014EC4                     
  4513                           ; BSR set to: 1
  4514  014EC4  AA9E               	btfss	3998,5,c	;volatile
  4515  014EC6  D7FE               	goto	l2170
  4516                           
  4517                           ;main.c: 207: Current_Dist2 = RCREG1;
  4518  014EC8  CFAF F136          	movff	4015,_Current_Dist2	;volatile
  4519  014ECC  0101               	movlb	1	; () banked
  4520  014ECE  6B37               	clrf	(_Current_Dist2+1)& (0+255),b
  4521                           
  4522                           ;main.c: 209: Current_Dist = Current_Dist2;
  4523  014ED0  C136  F031         	movff	_Current_Dist2,_Current_Dist
  4524  014ED4  C137  F032         	movff	_Current_Dist2+1,_Current_Dist+1
  4525                           
  4526                           ; BSR set to: 1
  4527                           ;main.c: 212: return ((Current_Dist<0)?-Current_Dist:Current_Dist);
  4528  014ED8  BE32               	btfsc	_Current_Dist+1,7,c
  4529  014EDA  D005               	goto	l2173
  4530                           
  4531                           ; BSR set to: 1
  4532  014EDC  C031  F066         	movff	_Current_Dist,?_UpdateDistance
  4533  014EE0  C032  F067         	movff	_Current_Dist+1,?_UpdateDistance+1
  4534  014EE4  0012               	return	
  4535  014EE6                     l2173:
  4536                           
  4537                           ; BSR set to: 1
  4538  014EE6  C031  F068         	movff	_Current_Dist,??_UpdateDistance
  4539  014EEA  C032  F069         	movff	_Current_Dist+1,??_UpdateDistance+1
  4540  014EEE  0100               	movlb	0	; () banked
  4541  014EF0  1F68               	comf	??_UpdateDistance& (0+255),f,b
  4542  014EF2  1F69               	comf	(??_UpdateDistance+1)& (0+255),f,b
  4543  014EF4  4B68               	infsnz	??_UpdateDistance& (0+255),f,b
  4544  014EF6  2B69               	incf	(??_UpdateDistance+1)& (0+255),f,b
  4545  014EF8  C068  F066         	movff	??_UpdateDistance,?_UpdateDistance
  4546  014EFC  C069  F067         	movff	??_UpdateDistance+1,?_UpdateDistance+1
  4547  014F00  0012               	return	
  4548  014F02                     __end_of_UpdateDistance:
  4549                           	opt stack 0
  4550                           tosu	equ	0xFFF
  4551                           tosh	equ	0xFFE
  4552                           tosl	equ	0xFFD
  4553                           pclath	equ	0xFFA
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           postinc0	equ	0xFEE
  4559                           wreg	equ	0xFE8
  4560                           postdec1	equ	0xFE5
  4561                           fsr1h	equ	0xFE2
  4562                           fsr1l	equ	0xFE1
  4563                           postinc2	equ	0xFDE
  4564                           status	equ	0xFD8
  4565                           
  4566 ;; *************** function _Turn *****************
  4567 ;; Defined at:
  4568 ;;		line 454 in file "main.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  Angle           2    6[BANK0 ] int 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  Speed           2   10[BANK0 ] int 
  4573 ;;  C_Angle         2    8[BANK0 ] int 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  2    6[BANK0 ] int 
  4576 ;; Registers used:
  4577 ;;		wreg, status,2, status,0, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4583 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;Total ram usage:        6 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    8
  4590 ;; This function calls:
  4591 ;;		_delay_ms
  4592 ;;		_eusartSend
  4593 ;; This function is called by:
  4594 ;;		_main
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text2
  4599  014A7E                     __ptext2:
  4600                           	opt stack 0
  4601  014A7E                     _Turn:
  4602                           	opt stack 22
  4603                           
  4604                           ;main.c: 457: int Speed = 100;
  4605                           
  4606                           ;incstack = 0
  4607  014A7E  0E00               	movlw	0
  4608  014A80  0100               	movlb	0	; () banked
  4609  014A82  6F6B               	movwf	(Turn@Speed+1)& (0+255),b
  4610  014A84  0E64               	movlw	100
  4611  014A86  6F6A               	movwf	Turn@Speed& (0+255),b
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;main.c: 458: eusartSend(137);
  4615  014A88  0E89               	movlw	137
  4616  014A8A  EC74  F0B0         	call	_eusartSend
  4617                           
  4618                           ;main.c: 459: eusartSend((((Speed)>>8) & 255));
  4619  014A8E  0100               	movlb	0	; () banked
  4620  014A90  516B               	movf	(Turn@Speed+1)& (0+255),w,b
  4621  014A92  EC74  F0B0         	call	_eusartSend
  4622                           
  4623                           ;main.c: 460: eusartSend(((Speed) & 255));
  4624  014A96  0100               	movlb	0	; () banked
  4625  014A98  516A               	movf	Turn@Speed& (0+255),w,b
  4626  014A9A  EC74  F0B0         	call	_eusartSend
  4627                           
  4628                           ;main.c: 461: eusartSend((((0)>>8) & 255));
  4629  014A9E  0E00               	movlw	0
  4630  014AA0  EC74  F0B0         	call	_eusartSend
  4631                           
  4632                           ;main.c: 462: eusartSend(((1) & 255));
  4633  014AA4  0E01               	movlw	1
  4634  014AA6  EC74  F0B0         	call	_eusartSend
  4635                           
  4636                           ;main.c: 463: int C_Angle = 0;
  4637  014AAA  0E00               	movlw	0
  4638  014AAC  0100               	movlb	0	; () banked
  4639  014AAE  6F69               	movwf	(Turn@C_Angle+1)& (0+255),b
  4640  014AB0  0E00               	movlw	0
  4641  014AB2  6F68               	movwf	Turn@C_Angle& (0+255),b
  4642                           
  4643                           ;main.c: 465: eusartSend(157);
  4644  014AB4  0E9D               	movlw	157
  4645  014AB6  EC74  F0B0         	call	_eusartSend
  4646                           
  4647                           ;main.c: 467: eusartSend((((Angle)>>8) & 255));
  4648  014ABA  0100               	movlb	0	; () banked
  4649  014ABC  5167               	movf	(Turn@Angle+1)& (0+255),w,b
  4650  014ABE  EC74  F0B0         	call	_eusartSend
  4651                           
  4652                           ;main.c: 468: eusartSend(((Angle) & 255));
  4653  014AC2  0100               	movlb	0	; () banked
  4654  014AC4  5166               	movf	Turn@Angle& (0+255),w,b
  4655  014AC6  EC74  F0B0         	call	_eusartSend
  4656                           
  4657                           ;main.c: 470: eusartSend(137);
  4658  014ACA  0E89               	movlw	137
  4659  014ACC  EC74  F0B0         	call	_eusartSend
  4660                           
  4661                           ;main.c: 471: eusartSend((((0)>>8) & 255));
  4662  014AD0  0E00               	movlw	0
  4663  014AD2  EC74  F0B0         	call	_eusartSend
  4664                           
  4665                           ;main.c: 472: eusartSend(((0) & 255));
  4666  014AD6  0E00               	movlw	0
  4667  014AD8  EC74  F0B0         	call	_eusartSend
  4668                           
  4669                           ;main.c: 473: eusartSend((((0)>>8) & 255));
  4670  014ADC  0E00               	movlw	0
  4671  014ADE  EC74  F0B0         	call	_eusartSend
  4672                           
  4673                           ;main.c: 474: eusartSend(((0) & 255));
  4674  014AE2  0E00               	movlw	0
  4675  014AE4  EC74  F0B0         	call	_eusartSend
  4676                           
  4677                           ;main.c: 475: delay_ms(1000);
  4678  014AE8  0E03               	movlw	3
  4679  014AEA  0100               	movlb	0	; () banked
  4680  014AEC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  4681  014AEE  0EE8               	movlw	232
  4682  014AF0  6F60               	movwf	delay_ms@ms& (0+255),b
  4683  014AF2  EC14  F0A9         	call	_delay_ms	;wreg free
  4684  014AF6  0012               	return		;funcret
  4685  014AF8                     __end_of_Turn:
  4686                           	opt stack 0
  4687                           tosu	equ	0xFFF
  4688                           tosh	equ	0xFFE
  4689                           tosl	equ	0xFFD
  4690                           pclath	equ	0xFFA
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           postdec1	equ	0xFE5
  4698                           fsr1h	equ	0xFE2
  4699                           fsr1l	equ	0xFE1
  4700                           postinc2	equ	0xFDE
  4701                           status	equ	0xFD8
  4702                           
  4703 ;; *************** function _Sensor_Observe2 *****************
  4704 ;; Defined at:
  4705 ;;		line 349 in file "main.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;		None
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;		None
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1    wreg      void 
  4712 ;; Registers used:
  4713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;Total ram usage:        2 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:   13
  4726 ;; This function calls:
  4727 ;;		_ADCAverage
  4728 ;;		_Console_Render
  4729 ;;		_SteppingCCW
  4730 ;;		_printf
  4731 ;; This function is called by:
  4732 ;;		_main
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text3
  4737  0136AC                     __ptext3:
  4738                           	opt stack 0
  4739  0136AC                     _Sensor_Observe2:
  4740                           	opt stack 17
  4741                           
  4742                           ;main.c: 350: printf("%c", (char)35);
  4743                           
  4744                           ;incstack = 0
  4745  0136AC  0EFC               	movlw	low STR_1
  4746  0136AE  0100               	movlb	0	; () banked
  4747  0136B0  6F75               	movwf	printf@f& (0+255),b
  4748  0136B2  0EFF               	movlw	high STR_1
  4749  0136B4  6F76               	movwf	(printf@f+1)& (0+255),b
  4750  0136B6  0E00               	movlw	0
  4751  0136B8  6F78               	movwf	(?_printf+3)& (0+255),b
  4752  0136BA  0E23               	movlw	35
  4753  0136BC  6F77               	movwf	(?_printf+2)& (0+255),b
  4754  0136BE  EC43  F096         	call	_printf	;wreg free
  4755                           
  4756                           ;main.c: 351: printf("                 \n");
  4757  0136C2  0E9C               	movlw	low STR_2
  4758  0136C4  0100               	movlb	0	; () banked
  4759  0136C6  6F75               	movwf	printf@f& (0+255),b
  4760  0136C8  0EFF               	movlw	high STR_2
  4761  0136CA  6F76               	movwf	(printf@f+1)& (0+255),b
  4762  0136CC  EC43  F096         	call	_printf	;wreg free
  4763                           
  4764                           ;main.c: 352: printf("Sensor Moving!\n");
  4765  0136D0  0EC2               	movlw	low STR_3
  4766  0136D2  0100               	movlb	0	; () banked
  4767  0136D4  6F75               	movwf	printf@f& (0+255),b
  4768  0136D6  0EFF               	movlw	high STR_3
  4769  0136D8  6F76               	movwf	(printf@f+1)& (0+255),b
  4770  0136DA  EC43  F096         	call	_printf	;wreg free
  4771                           
  4772                           ;main.c: 353: printf("                 \n");
  4773  0136DE  0E9C               	movlw	low STR_2
  4774  0136E0  0100               	movlb	0	; () banked
  4775  0136E2  6F75               	movwf	printf@f& (0+255),b
  4776  0136E4  0EFF               	movlw	high STR_2
  4777  0136E6  6F76               	movwf	(printf@f+1)& (0+255),b
  4778  0136E8  EC43  F096         	call	_printf	;wreg free
  4779                           
  4780                           ;main.c: 354: printf("                 \n");
  4781  0136EC  0E9C               	movlw	low STR_2
  4782  0136EE  0100               	movlb	0	; () banked
  4783  0136F0  6F75               	movwf	printf@f& (0+255),b
  4784  0136F2  0EFF               	movlw	high STR_2
  4785  0136F4  6F76               	movwf	(printf@f+1)& (0+255),b
  4786  0136F6  EC43  F096         	call	_printf	;wreg free
  4787                           
  4788                           ;main.c: 355: printf("                 \n");
  4789  0136FA  0E9C               	movlw	low STR_2
  4790  0136FC  0100               	movlb	0	; () banked
  4791  0136FE  6F75               	movwf	printf@f& (0+255),b
  4792  013700  0EFF               	movlw	high STR_2
  4793  013702  6F76               	movwf	(printf@f+1)& (0+255),b
  4794  013704  EC43  F096         	call	_printf	;wreg free
  4795                           
  4796                           ;main.c: 356: printf("                 \n");
  4797  013708  0E9C               	movlw	low STR_2
  4798  01370A  0100               	movlb	0	; () banked
  4799  01370C  6F75               	movwf	printf@f& (0+255),b
  4800  01370E  0EFF               	movlw	high STR_2
  4801  013710  6F76               	movwf	(printf@f+1)& (0+255),b
  4802  013712  EC43  F096         	call	_printf	;wreg free
  4803                           
  4804                           ;main.c: 357: printf("                 \n");
  4805  013716  0E9C               	movlw	low STR_2
  4806  013718  0100               	movlb	0	; () banked
  4807  01371A  6F75               	movwf	printf@f& (0+255),b
  4808  01371C  0EFF               	movlw	high STR_2
  4809  01371E  6F76               	movwf	(printf@f+1)& (0+255),b
  4810  013720  EC43  F096         	call	_printf	;wreg free
  4811                           
  4812                           ;main.c: 358: printf("                 \n");
  4813  013724  0E9C               	movlw	low STR_2
  4814  013726  0100               	movlb	0	; () banked
  4815  013728  6F75               	movwf	printf@f& (0+255),b
  4816  01372A  0EFF               	movlw	high STR_2
  4817  01372C  6F76               	movwf	(printf@f+1)& (0+255),b
  4818  01372E  EC43  F096         	call	_printf	;wreg free
  4819                           
  4820                           ;main.c: 359: printf("                 \n");
  4821  013732  0E9C               	movlw	low STR_2
  4822  013734  0100               	movlb	0	; () banked
  4823  013736  6F75               	movwf	printf@f& (0+255),b
  4824  013738  0EFF               	movlw	high STR_2
  4825  01373A  6F76               	movwf	(printf@f+1)& (0+255),b
  4826  01373C  EC43  F096         	call	_printf	;wreg free
  4827                           
  4828                           ;main.c: 360: Console_Render();
  4829  013740  EC66  F092         	call	_Console_Render	;wreg free
  4830                           
  4831                           ;main.c: 361: while(Motor_Count<=512){
  4832  013744  D019               	goto	l2221
  4833  013746                     
  4834                           ;main.c: 363: Motor_Count++;
  4835  013746  4A2D               	infsnz	_Motor_Count,f,c
  4836  013748  2A2E               	incf	_Motor_Count+1,f,c
  4837                           
  4838                           ;main.c: 364: ADCAverage ();
  4839  01374A  ECE9  F088         	call	_ADCAverage	;wreg free
  4840                           
  4841                           ;main.c: 365: if (Low_Sensor>average){
  4842  01374E  504B               	movf	_Low_Sensor,w,c
  4843  013750  0100               	movlb	0	; () banked
  4844  013752  5DE9               	subwf	_average& (0+255),w,b
  4845  013754  51EA               	movf	(_average+1)& (0+255),w,b
  4846  013756  0A80               	xorlw	128
  4847  013758  6FD9               	movwf	??_Sensor_Observe2& (0+255),b
  4848  01375A  504C               	movf	_Low_Sensor+1,w,c
  4849  01375C  0A80               	xorlw	128
  4850  01375E  59D9               	subwfb	??_Sensor_Observe2& (0+255),w,b
  4851  013760  B0D8               	btfsc	status,0,c
  4852  013762  D008               	goto	l2223
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;main.c: 366: Low_Sensor=average;
  4856  013764  C0E9  F04B         	movff	_average,_Low_Sensor
  4857  013768  C0EA  F04C         	movff	_average+1,_Low_Sensor+1
  4858                           
  4859                           ;main.c: 367: Close_Pos = Motor_Count;
  4860  01376C  C02D  F02B         	movff	_Motor_Count,_Close_Pos
  4861  013770  C02E  F02C         	movff	_Motor_Count+1,_Close_Pos+1
  4862  013774                     l2223:
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;main.c: 368: }
  4866                           ;main.c: 369: SteppingCCW();
  4867                           
  4868                           ; BSR set to: 0
  4869  013774  EC26  F0AB         	call	_SteppingCCW	;wreg free
  4870  013778                     l2221:
  4871  013778  BE2E               	btfsc	_Motor_Count+1,7,c
  4872  01377A  D7E5               	goto	l2222
  4873  01377C  042D               	decf	_Motor_Count,w,c
  4874  01377E  0E02               	movlw	2
  4875  013780  582E               	subwfb	_Motor_Count+1,w,c
  4876  013782  A0D8               	btfss	status,0,c
  4877  013784  D7E0               	goto	l2222
  4878                           
  4879                           ;main.c: 370: }
  4880                           ;main.c: 372: Console_Render();
  4881  013786  EC66  F092         	call	_Console_Render	;wreg free
  4882                           
  4883                           ;main.c: 373: RD5=0;
  4884  01378A  9A83               	bcf	3971,5,c	;volatile
  4885                           
  4886                           ;main.c: 374: RD7=0;
  4887  01378C  9E83               	bcf	3971,7,c	;volatile
  4888                           
  4889                           ;main.c: 375: RA2=0;
  4890  01378E  9480               	bcf	3968,2,c	;volatile
  4891                           
  4892                           ;main.c: 376: RA3=0;
  4893  013790  9680               	bcf	3968,3,c	;volatile
  4894                           
  4895                           ;main.c: 377: Sensor_Observe_Fin=1;
  4896  013792  0E00               	movlw	0
  4897  013794  0101               	movlb	1	; () banked
  4898  013796  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  4899  013798  0E01               	movlw	1
  4900  01379A  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  4901                           
  4902                           ; BSR set to: 1
  4903                           ;main.c: 379: CW_Count = 512 - Close_Pos;
  4904  01379C  C02B  F0D9         	movff	_Close_Pos,??_Sensor_Observe2
  4905  0137A0  C02C  F0DA         	movff	_Close_Pos+1,??_Sensor_Observe2+1
  4906  0137A4  0100               	movlb	0	; () banked
  4907  0137A6  1FD9               	comf	??_Sensor_Observe2& (0+255),f,b
  4908  0137A8  1FDA               	comf	(??_Sensor_Observe2+1)& (0+255),f,b
  4909  0137AA  4BD9               	infsnz	??_Sensor_Observe2& (0+255),f,b
  4910  0137AC  2BDA               	incf	(??_Sensor_Observe2+1)& (0+255),f,b
  4911  0137AE  0E00               	movlw	0
  4912  0137B0  25D9               	addwf	??_Sensor_Observe2& (0+255),w,b
  4913  0137B2  0101               	movlb	1	; () banked
  4914  0137B4  6F28               	movwf	_CW_Count& (0+255),b
  4915  0137B6  0E02               	movlw	2
  4916  0137B8  0100               	movlb	0	; () banked
  4917  0137BA  21DA               	addwfc	(??_Sensor_Observe2+1)& (0+255),w,b
  4918  0137BC  0101               	movlb	1	; () banked
  4919  0137BE  6F29               	movwf	(_CW_Count+1)& (0+255),b
  4920  0137C0  0012               	return	
  4921  0137C2                     __end_of_Sensor_Observe2:
  4922                           	opt stack 0
  4923                           tosu	equ	0xFFF
  4924                           tosh	equ	0xFFE
  4925                           tosl	equ	0xFFD
  4926                           pclath	equ	0xFFA
  4927                           tblptru	equ	0xFF8
  4928                           tblptrh	equ	0xFF7
  4929                           tblptrl	equ	0xFF6
  4930                           tablat	equ	0xFF5
  4931                           postinc0	equ	0xFEE
  4932                           wreg	equ	0xFE8
  4933                           postdec1	equ	0xFE5
  4934                           fsr1h	equ	0xFE2
  4935                           fsr1l	equ	0xFE1
  4936                           postinc2	equ	0xFDE
  4937                           status	equ	0xFD8
  4938                           
  4939 ;; *************** function _Sensor_Observe *****************
  4940 ;; Defined at:
  4941 ;;		line 401 in file "main.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;		None
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;		None
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      void 
  4948 ;; Registers used:
  4949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;Total ram usage:        2 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:   13
  4962 ;; This function calls:
  4963 ;;		_ADCAverage
  4964 ;;		_Console_Render
  4965 ;;		_SteppingCW
  4966 ;;		_printf
  4967 ;; This function is called by:
  4968 ;;		_main
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972                           	psect	text4
  4973  0139E6                     __ptext4:
  4974                           	opt stack 0
  4975  0139E6                     _Sensor_Observe:
  4976                           	opt stack 17
  4977                           
  4978                           ;main.c: 402: printf("%c", (char)35);
  4979                           
  4980                           ; BSR set to: 1
  4981                           ;incstack = 0
  4982  0139E6  0EFC               	movlw	low STR_1
  4983  0139E8  0100               	movlb	0	; () banked
  4984  0139EA  6F75               	movwf	printf@f& (0+255),b
  4985  0139EC  0EFF               	movlw	high STR_1
  4986  0139EE  6F76               	movwf	(printf@f+1)& (0+255),b
  4987  0139F0  0E00               	movlw	0
  4988  0139F2  6F78               	movwf	(?_printf+3)& (0+255),b
  4989  0139F4  0E23               	movlw	35
  4990  0139F6  6F77               	movwf	(?_printf+2)& (0+255),b
  4991  0139F8  EC43  F096         	call	_printf	;wreg free
  4992                           
  4993                           ;main.c: 403: printf("                 \n");
  4994  0139FC  0E9C               	movlw	low STR_2
  4995  0139FE  0100               	movlb	0	; () banked
  4996  013A00  6F75               	movwf	printf@f& (0+255),b
  4997  013A02  0EFF               	movlw	high STR_2
  4998  013A04  6F76               	movwf	(printf@f+1)& (0+255),b
  4999  013A06  EC43  F096         	call	_printf	;wreg free
  5000                           
  5001                           ;main.c: 404: printf("Sensor Moving!\n");
  5002  013A0A  0EC2               	movlw	low STR_3
  5003  013A0C  0100               	movlb	0	; () banked
  5004  013A0E  6F75               	movwf	printf@f& (0+255),b
  5005  013A10  0EFF               	movlw	high STR_3
  5006  013A12  6F76               	movwf	(printf@f+1)& (0+255),b
  5007  013A14  EC43  F096         	call	_printf	;wreg free
  5008                           
  5009                           ;main.c: 405: printf("                 \n");
  5010  013A18  0E9C               	movlw	low STR_2
  5011  013A1A  0100               	movlb	0	; () banked
  5012  013A1C  6F75               	movwf	printf@f& (0+255),b
  5013  013A1E  0EFF               	movlw	high STR_2
  5014  013A20  6F76               	movwf	(printf@f+1)& (0+255),b
  5015  013A22  EC43  F096         	call	_printf	;wreg free
  5016                           
  5017                           ;main.c: 406: printf("                 \n");
  5018  013A26  0E9C               	movlw	low STR_2
  5019  013A28  0100               	movlb	0	; () banked
  5020  013A2A  6F75               	movwf	printf@f& (0+255),b
  5021  013A2C  0EFF               	movlw	high STR_2
  5022  013A2E  6F76               	movwf	(printf@f+1)& (0+255),b
  5023  013A30  EC43  F096         	call	_printf	;wreg free
  5024                           
  5025                           ;main.c: 407: printf("                 \n");
  5026  013A34  0E9C               	movlw	low STR_2
  5027  013A36  0100               	movlb	0	; () banked
  5028  013A38  6F75               	movwf	printf@f& (0+255),b
  5029  013A3A  0EFF               	movlw	high STR_2
  5030  013A3C  6F76               	movwf	(printf@f+1)& (0+255),b
  5031  013A3E  EC43  F096         	call	_printf	;wreg free
  5032                           
  5033                           ;main.c: 408: printf("                 \n");
  5034  013A42  0E9C               	movlw	low STR_2
  5035  013A44  0100               	movlb	0	; () banked
  5036  013A46  6F75               	movwf	printf@f& (0+255),b
  5037  013A48  0EFF               	movlw	high STR_2
  5038  013A4A  6F76               	movwf	(printf@f+1)& (0+255),b
  5039  013A4C  EC43  F096         	call	_printf	;wreg free
  5040                           
  5041                           ;main.c: 409: printf("                 \n");
  5042  013A50  0E9C               	movlw	low STR_2
  5043  013A52  0100               	movlb	0	; () banked
  5044  013A54  6F75               	movwf	printf@f& (0+255),b
  5045  013A56  0EFF               	movlw	high STR_2
  5046  013A58  6F76               	movwf	(printf@f+1)& (0+255),b
  5047  013A5A  EC43  F096         	call	_printf	;wreg free
  5048                           
  5049                           ;main.c: 410: printf("                 \n");
  5050  013A5E  0E9C               	movlw	low STR_2
  5051  013A60  0100               	movlb	0	; () banked
  5052  013A62  6F75               	movwf	printf@f& (0+255),b
  5053  013A64  0EFF               	movlw	high STR_2
  5054  013A66  6F76               	movwf	(printf@f+1)& (0+255),b
  5055  013A68  EC43  F096         	call	_printf	;wreg free
  5056                           
  5057                           ;main.c: 411: Console_Render();
  5058  013A6C  EC66  F092         	call	_Console_Render	;wreg free
  5059                           
  5060                           ;main.c: 412: while(Motor_Count<=512){
  5061  013A70  D019               	goto	l2234
  5062  013A72                     
  5063                           ;main.c: 413: Motor_Count++;
  5064  013A72  4A2D               	infsnz	_Motor_Count,f,c
  5065  013A74  2A2E               	incf	_Motor_Count+1,f,c
  5066                           
  5067                           ;main.c: 414: ADCAverage ();
  5068  013A76  ECE9  F088         	call	_ADCAverage	;wreg free
  5069                           
  5070                           ;main.c: 415: if (Low_Sensor>average){
  5071  013A7A  504B               	movf	_Low_Sensor,w,c
  5072  013A7C  0100               	movlb	0	; () banked
  5073  013A7E  5DE9               	subwf	_average& (0+255),w,b
  5074  013A80  51EA               	movf	(_average+1)& (0+255),w,b
  5075  013A82  0A80               	xorlw	128
  5076  013A84  6FD9               	movwf	??_Sensor_Observe& (0+255),b
  5077  013A86  504C               	movf	_Low_Sensor+1,w,c
  5078  013A88  0A80               	xorlw	128
  5079  013A8A  59D9               	subwfb	??_Sensor_Observe& (0+255),w,b
  5080  013A8C  B0D8               	btfsc	status,0,c
  5081  013A8E  D008               	goto	l2236
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;main.c: 416: Low_Sensor=average;
  5085  013A90  C0E9  F04B         	movff	_average,_Low_Sensor
  5086  013A94  C0EA  F04C         	movff	_average+1,_Low_Sensor+1
  5087                           
  5088                           ;main.c: 417: Close_Pos = Motor_Count;
  5089  013A98  C02D  F02B         	movff	_Motor_Count,_Close_Pos
  5090  013A9C  C02E  F02C         	movff	_Motor_Count+1,_Close_Pos+1
  5091  013AA0                     l2236:
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;main.c: 418: }
  5095                           ;main.c: 419: SteppingCW();
  5096                           
  5097                           ; BSR set to: 0
  5098  013AA0  EC01  F0AB         	call	_SteppingCW	;wreg free
  5099  013AA4                     l2234:
  5100  013AA4  BE2E               	btfsc	_Motor_Count+1,7,c
  5101  013AA6  D7E5               	goto	l2235
  5102  013AA8  042D               	decf	_Motor_Count,w,c
  5103  013AAA  0E02               	movlw	2
  5104  013AAC  582E               	subwfb	_Motor_Count+1,w,c
  5105  013AAE  A0D8               	btfss	status,0,c
  5106  013AB0  D7E0               	goto	l2235
  5107                           
  5108                           ;main.c: 420: }
  5109                           ;main.c: 422: Console_Render();
  5110  013AB2  EC66  F092         	call	_Console_Render	;wreg free
  5111                           
  5112                           ;main.c: 423: RD5=0;
  5113  013AB6  9A83               	bcf	3971,5,c	;volatile
  5114                           
  5115                           ;main.c: 424: RD7=0;
  5116  013AB8  9E83               	bcf	3971,7,c	;volatile
  5117                           
  5118                           ;main.c: 425: RA2=0;
  5119  013ABA  9480               	bcf	3968,2,c	;volatile
  5120                           
  5121                           ;main.c: 426: RA3=0;
  5122  013ABC  9680               	bcf	3968,3,c	;volatile
  5123                           
  5124                           ;main.c: 427: Sensor_Observe_Fin=1;
  5125  013ABE  0E00               	movlw	0
  5126  013AC0  0101               	movlb	1	; () banked
  5127  013AC2  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  5128  013AC4  0E01               	movlw	1
  5129  013AC6  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  5130                           
  5131                           ; BSR set to: 1
  5132                           ;main.c: 429: CCW_Count = 512 - Close_Pos;
  5133  013AC8  C02B  F0D9         	movff	_Close_Pos,??_Sensor_Observe
  5134  013ACC  C02C  F0DA         	movff	_Close_Pos+1,??_Sensor_Observe+1
  5135  013AD0  0100               	movlb	0	; () banked
  5136  013AD2  1FD9               	comf	??_Sensor_Observe& (0+255),f,b
  5137  013AD4  1FDA               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  5138  013AD6  4BD9               	infsnz	??_Sensor_Observe& (0+255),f,b
  5139  013AD8  2BDA               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  5140  013ADA  0E00               	movlw	0
  5141  013ADC  25D9               	addwf	??_Sensor_Observe& (0+255),w,b
  5142  013ADE  0101               	movlb	1	; () banked
  5143  013AE0  6F2A               	movwf	_CCW_Count& (0+255),b
  5144  013AE2  0E02               	movlw	2
  5145  013AE4  0100               	movlb	0	; () banked
  5146  013AE6  21DA               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  5147  013AE8  0101               	movlb	1	; () banked
  5148  013AEA  6F2B               	movwf	(_CCW_Count+1)& (0+255),b
  5149  013AEC  0012               	return	
  5150  013AEE                     __end_of_Sensor_Observe:
  5151                           	opt stack 0
  5152                           tosu	equ	0xFFF
  5153                           tosh	equ	0xFFE
  5154                           tosl	equ	0xFFD
  5155                           pclath	equ	0xFFA
  5156                           tblptru	equ	0xFF8
  5157                           tblptrh	equ	0xFF7
  5158                           tblptrl	equ	0xFF6
  5159                           tablat	equ	0xFF5
  5160                           postinc0	equ	0xFEE
  5161                           wreg	equ	0xFE8
  5162                           postdec1	equ	0xFE5
  5163                           fsr1h	equ	0xFE2
  5164                           fsr1l	equ	0xFE1
  5165                           postinc2	equ	0xFDE
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function _Robot_Init *****************
  5169 ;; Defined at:
  5170 ;;		line 240 in file "main.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;		None
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  1    wreg      void 
  5177 ;; Registers used:
  5178 ;;		wreg, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    9
  5191 ;; This function calls:
  5192 ;;		_Robot_Stop
  5193 ;;		_eusartSend
  5194 ;; This function is called by:
  5195 ;;		_main
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text5
  5200  01609A                     __ptext5:
  5201                           	opt stack 0
  5202  01609A                     _Robot_Init:
  5203                           	opt stack 21
  5204                           
  5205                           ;main.c: 241: eusartSend(128);
  5206                           
  5207                           ; BSR set to: 1
  5208                           ;incstack = 0
  5209  01609A  0E80               	movlw	128
  5210  01609C  EC74  F0B0         	call	_eusartSend
  5211                           
  5212                           ;main.c: 242: eusartSend(132);
  5213  0160A0  0E84               	movlw	132
  5214  0160A2  EC74  F0B0         	call	_eusartSend
  5215                           
  5216                           ;main.c: 243: Robot_Stop();
  5217  0160A6  ECED  F0AE         	call	_Robot_Stop	;wreg free
  5218  0160AA  0012               	return		;funcret
  5219  0160AC                     __end_of_Robot_Init:
  5220                           	opt stack 0
  5221                           tosu	equ	0xFFF
  5222                           tosh	equ	0xFFE
  5223                           tosl	equ	0xFFD
  5224                           pclath	equ	0xFFA
  5225                           tblptru	equ	0xFF8
  5226                           tblptrh	equ	0xFF7
  5227                           tblptrl	equ	0xFF6
  5228                           tablat	equ	0xFF5
  5229                           postinc0	equ	0xFEE
  5230                           wreg	equ	0xFE8
  5231                           postdec1	equ	0xFE5
  5232                           fsr1h	equ	0xFE2
  5233                           fsr1l	equ	0xFE1
  5234                           postinc2	equ	0xFDE
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function _Robot_Stop *****************
  5238 ;; Defined at:
  5239 ;;		line 233 in file "main.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;		None
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;		None
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  1    wreg      void 
  5246 ;; Registers used:
  5247 ;;		wreg, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;Total ram usage:        0 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    8
  5260 ;; This function calls:
  5261 ;;		_eusartSend
  5262 ;; This function is called by:
  5263 ;;		_Robot_Init
  5264 ;;		_main
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           	psect	text6
  5269  015DDA                     __ptext6:
  5270                           	opt stack 0
  5271  015DDA                     _Robot_Stop:
  5272                           	opt stack 22
  5273                           
  5274                           ;main.c: 234: eusartSend(137);
  5275                           
  5276                           ;incstack = 0
  5277  015DDA  0E89               	movlw	137
  5278  015DDC  EC74  F0B0         	call	_eusartSend
  5279                           
  5280                           ;main.c: 235: eusartSend(0);
  5281  015DE0  0E00               	movlw	0
  5282  015DE2  EC74  F0B0         	call	_eusartSend
  5283                           
  5284                           ;main.c: 236: eusartSend(0);
  5285  015DE6  0E00               	movlw	0
  5286  015DE8  EC74  F0B0         	call	_eusartSend
  5287                           
  5288                           ;main.c: 237: eusartSend(0);
  5289  015DEC  0E00               	movlw	0
  5290  015DEE  EC74  F0B0         	call	_eusartSend
  5291                           
  5292                           ;main.c: 238: eusartSend(0);
  5293  015DF2  0E00               	movlw	0
  5294  015DF4  EC74  F0B0         	call	_eusartSend
  5295  015DF8  0012               	return		;funcret
  5296  015DFA                     __end_of_Robot_Stop:
  5297                           	opt stack 0
  5298                           tosu	equ	0xFFF
  5299                           tosh	equ	0xFFE
  5300                           tosl	equ	0xFFD
  5301                           pclath	equ	0xFFA
  5302                           tblptru	equ	0xFF8
  5303                           tblptrh	equ	0xFF7
  5304                           tblptrl	equ	0xFF6
  5305                           tablat	equ	0xFF5
  5306                           postinc0	equ	0xFEE
  5307                           wreg	equ	0xFE8
  5308                           postdec1	equ	0xFE5
  5309                           fsr1h	equ	0xFE2
  5310                           fsr1l	equ	0xFE1
  5311                           postinc2	equ	0xFDE
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function _Reset_variables *****************
  5315 ;; Defined at:
  5316 ;;		line 495 in file "main.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;		None
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;		None
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  1    wreg      void 
  5323 ;; Registers used:
  5324 ;;		wreg, status,2
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;Total ram usage:        0 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    7
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_main
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text7
  5345  01556A                     __ptext7:
  5346                           	opt stack 0
  5347  01556A                     _Reset_variables:
  5348                           	opt stack 23
  5349                           
  5350                           ;main.c: 497: Square_Dist=0;
  5351                           
  5352                           ;incstack = 0
  5353  01556A  0E00               	movlw	0
  5354  01556C  0101               	movlb	1	; () banked
  5355  01556E  6F35               	movwf	(_Square_Dist+1)& (0+255),b
  5356  015570  0E00               	movlw	0
  5357  015572  6F34               	movwf	_Square_Dist& (0+255),b
  5358                           
  5359                           ;main.c: 498: Sensor_Observe_Fin=0;
  5360  015574  0E00               	movlw	0
  5361  015576  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  5362  015578  0E00               	movlw	0
  5363  01557A  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  5364                           
  5365                           ;main.c: 499: Motor_Count = 0;
  5366  01557C  0E00               	movlw	0
  5367  01557E  6E2E               	movwf	_Motor_Count+1,c
  5368  015580  0E00               	movlw	0
  5369  015582  6E2D               	movwf	_Motor_Count,c
  5370                           
  5371                           ;main.c: 500: Low_Sensor=10000;
  5372  015584  0E27               	movlw	39
  5373  015586  6E4C               	movwf	_Low_Sensor+1,c
  5374  015588  0E10               	movlw	16
  5375  01558A  6E4B               	movwf	_Low_Sensor,c
  5376                           
  5377                           ;main.c: 501: ADC_Reading=0;
  5378  01558C  0E00               	movlw	0
  5379  01558E  6F2F               	movwf	(_ADC_Reading+1)& (0+255),b
  5380  015590  0E00               	movlw	0
  5381  015592  6F2E               	movwf	_ADC_Reading& (0+255),b
  5382                           
  5383                           ;main.c: 502: Close_Pos = 0;
  5384  015594  0E00               	movlw	0
  5385  015596  6E2C               	movwf	_Close_Pos+1,c
  5386  015598  0E00               	movlw	0
  5387  01559A  6E2B               	movwf	_Close_Pos,c
  5388                           
  5389                           ;main.c: 503: count=0;
  5390  01559C  0E00               	movlw	0
  5391  01559E  6F2D               	movwf	(_count+1)& (0+255),b
  5392  0155A0  0E00               	movlw	0
  5393  0155A2  6F2C               	movwf	_count& (0+255),b
  5394                           
  5395                           ;main.c: 504: T_VAR = 0;
  5396  0155A4  0E00               	movlw	0
  5397  0155A6  6E30               	movwf	_T_VAR+1,c
  5398  0155A8  0E00               	movlw	0
  5399  0155AA  6E2F               	movwf	_T_VAR,c
  5400                           
  5401                           ;main.c: 506: mod = 0;
  5402  0155AC  0E00               	movlw	0
  5403  0155AE  6F33               	movwf	(_mod+1)& (0+255),b
  5404  0155B0  0E00               	movlw	0
  5405  0155B2  6F32               	movwf	_mod& (0+255),b
  5406  0155B4  0012               	return	
  5407  0155B6                     __end_of_Reset_variables:
  5408                           	opt stack 0
  5409                           tosu	equ	0xFFF
  5410                           tosh	equ	0xFFE
  5411                           tosl	equ	0xFFD
  5412                           pclath	equ	0xFFA
  5413                           tblptru	equ	0xFF8
  5414                           tblptrh	equ	0xFF7
  5415                           tblptrl	equ	0xFF6
  5416                           tablat	equ	0xFF5
  5417                           postinc0	equ	0xFEE
  5418                           wreg	equ	0xFE8
  5419                           postdec1	equ	0xFE5
  5420                           fsr1h	equ	0xFE2
  5421                           fsr1l	equ	0xFE1
  5422                           postinc2	equ	0xFDE
  5423                           status	equ	0xFD8
  5424                           
  5425 ;; *************** function _MXK_Init *****************
  5426 ;; Defined at:
  5427 ;;		line 33 in file "Library/MXK.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;		None
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;		None
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  1    wreg      void 
  5434 ;; Registers used:
  5435 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5445 ;;Total ram usage:        0 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:   16
  5448 ;; This function calls:
  5449 ;;		_LED_Init
  5450 ;;		_Port_Init
  5451 ;;		_Port_SetPin
  5452 ;;		_Port_SetPinType
  5453 ;;		_Port_SetQuadType
  5454 ;;		_Port_SetType
  5455 ;;		_delay_ms
  5456 ;; This function is called by:
  5457 ;;		_main
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           	psect	text8
  5462  013320                     __ptext8:
  5463                           	opt stack 0
  5464  013320                     _MXK_Init:
  5465                           	opt stack 14
  5466                           
  5467                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5468                           
  5469                           ; BSR set to: 1
  5470                           ;incstack = 0
  5471  013320  0E01               	movlw	1
  5472  013322  6E4D               	movwf	_Bus_State,c
  5473                           
  5474                           ;MXK.c: 36: lQueue = (Function)0;
  5475  013324  0E00               	movlw	0
  5476  013326  0100               	movlb	0	; () banked
  5477  013328  6FE6               	movwf	_lQueue& (0+255),b	;volatile
  5478  01332A  0E00               	movlw	0
  5479  01332C  6FE7               	movwf	(_lQueue+1)& (0+255),b	;volatile
  5480  01332E  0E00               	movlw	0
  5481  013330  6FE8               	movwf	(_lQueue+2)& (0+255),b	;volatile
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5485  013332  0EF1               	movlw	low _PortA
  5486  013334  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5487  013336  0E02               	movlw	high _PortA
  5488  013338  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5489  01333A  0E00               	movlw	0
  5490  01333C  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5491  01333E  ECCF  F094         	call	_Port_Init	;wreg free
  5492                           
  5493                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5494  013342  0E9D               	movlw	low _PortB
  5495  013344  0100               	movlb	0	; () banked
  5496  013346  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5497  013348  0E01               	movlw	high _PortB
  5498  01334A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5499  01334C  0E01               	movlw	1
  5500  01334E  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5501  013350  ECCF  F094         	call	_Port_Init	;wreg free
  5502                           
  5503                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5504  013354  0EA7               	movlw	low _PortC
  5505  013356  0100               	movlb	0	; () banked
  5506  013358  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5507  01335A  0E01               	movlw	high _PortC
  5508  01335C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5509  01335E  0E02               	movlw	2
  5510  013360  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5511  013362  ECCF  F094         	call	_Port_Init	;wreg free
  5512                           
  5513                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5514  013366  0E93               	movlw	low _PortD
  5515  013368  0100               	movlb	0	; () banked
  5516  01336A  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5517  01336C  0E01               	movlw	high _PortD
  5518  01336E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5519  013370  0E03               	movlw	3
  5520  013372  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5521  013374  ECCF  F094         	call	_Port_Init	;wreg free
  5522                           
  5523                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5524  013378  0E89               	movlw	low _PortE
  5525  01337A  0100               	movlb	0	; () banked
  5526  01337C  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5527  01337E  0E01               	movlw	high _PortE
  5528  013380  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5529  013382  0E04               	movlw	4
  5530  013384  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5531  013386  ECCF  F094         	call	_Port_Init	;wreg free
  5532                           
  5533                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5534  01338A  0EB1               	movlw	low _PortF
  5535  01338C  0100               	movlb	0	; () banked
  5536  01338E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5537  013390  0E01               	movlw	high _PortF
  5538  013392  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5539  013394  0E05               	movlw	5
  5540  013396  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5541  013398  ECCF  F094         	call	_Port_Init	;wreg free
  5542                           
  5543                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5544  01339C  0EE7               	movlw	low _PortG
  5545  01339E  0100               	movlb	0	; () banked
  5546  0133A0  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5547  0133A2  0E02               	movlw	high _PortG
  5548  0133A4  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5549  0133A6  0E06               	movlw	6
  5550  0133A8  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5551  0133AA  ECCF  F094         	call	_Port_Init	;wreg free
  5552                           
  5553                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5554  0133AE  0EB1               	movlw	low _PortF
  5555  0133B0  0100               	movlb	0	; () banked
  5556  0133B2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5557  0133B4  0E01               	movlw	high _PortF
  5558  0133B6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5559  0133B8  0E05               	movlw	5
  5560  0133BA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5561  0133BC  0E00               	movlw	0
  5562  0133BE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5563  0133C0  EC42  F093         	call	_Port_SetPinType	;wreg free
  5564                           
  5565                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5566  0133C4  0E9D               	movlw	low _PortB
  5567  0133C6  0100               	movlb	0	; () banked
  5568  0133C8  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  5569  0133CA  0E01               	movlw	high _PortB
  5570  0133CC  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5571  0133CE  0E00               	movlw	0
  5572  0133D0  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5573  0133D2  0E00               	movlw	0
  5574  0133D4  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  5575  0133D6  EC8B  F08F         	call	_Port_SetQuadType	;wreg free
  5576                           
  5577                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5578  0133DA  0EB1               	movlw	low _PortF
  5579  0133DC  0100               	movlb	0	; () banked
  5580  0133DE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5581  0133E0  0E01               	movlw	high _PortF
  5582  0133E2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5583  0133E4  0E06               	movlw	6
  5584  0133E6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5585  0133E8  0E03               	movlw	3
  5586  0133EA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5587  0133EC  EC42  F093         	call	_Port_SetPinType	;wreg free
  5588                           
  5589                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5590  0133F0  0EE7               	movlw	low _PortG
  5591  0133F2  0100               	movlb	0	; () banked
  5592  0133F4  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  5593  0133F6  0E02               	movlw	high _PortG
  5594  0133F8  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5595  0133FA  0E03               	movlw	3
  5596  0133FC  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5597  0133FE  EC7F  F091         	call	_Port_SetType	;wreg free
  5598                           
  5599                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5600  013402  0EE7               	movlw	low _PortG
  5601  013404  0100               	movlb	0	; () banked
  5602  013406  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5603  013408  0E02               	movlw	high _PortG
  5604  01340A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5605  01340C  0E04               	movlw	4
  5606  01340E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5607  013410  0E00               	movlw	0
  5608  013412  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5609  013414  ECB7  F09F         	call	_Port_SetPin	;wreg free
  5610                           
  5611                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5612  013418  0EB1               	movlw	low _PortF
  5613  01341A  0100               	movlb	0	; () banked
  5614  01341C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5615  01341E  0E01               	movlw	high _PortF
  5616  013420  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5617  013422  0E06               	movlw	6
  5618  013424  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5619  013426  0E01               	movlw	1
  5620  013428  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5621  01342A  ECB7  F09F         	call	_Port_SetPin	;wreg free
  5622                           
  5623                           ;MXK.c: 55: LED_Init(eLED1);
  5624  01342E  0E00               	movlw	0
  5625  013430  EC42  F0A9         	call	_LED_Init
  5626                           
  5627                           ;MXK.c: 56: LED_Init(eLED2);
  5628  013434  0E01               	movlw	1
  5629  013436  EC42  F0A9         	call	_LED_Init
  5630                           
  5631                           ;MXK.c: 58: PIR1 = 0;
  5632  01343A  0E00               	movlw	0
  5633  01343C  6E9E               	movwf	3998,c	;volatile
  5634                           
  5635                           ;MXK.c: 59: PIR2 = 0;
  5636  01343E  0E00               	movlw	0
  5637  013440  6EA1               	movwf	4001,c	;volatile
  5638                           
  5639                           ;MXK.c: 60: PIR3 = 0;
  5640  013442  0E00               	movlw	0
  5641  013444  6EA4               	movwf	4004,c	;volatile
  5642                           
  5643                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5644  013446  8E9B               	bsf	3995,7,c	;volatile
  5645                           
  5646                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5647  013448  8C9B               	bsf	3995,6,c	;volatile
  5648                           
  5649                           ;MXK.c: 66: delay_ms(100);
  5650  01344A  0E00               	movlw	0
  5651  01344C  0100               	movlb	0	; () banked
  5652  01344E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  5653  013450  0E64               	movlw	100
  5654  013452  6F60               	movwf	delay_ms@ms& (0+255),b
  5655  013454  EC14  F0A9         	call	_delay_ms	;wreg free
  5656                           
  5657                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5658  013458  8ED0               	bsf	4048,7,c	;volatile
  5659  01345A  0012               	return		;funcret
  5660  01345C                     __end_of_MXK_Init:
  5661                           	opt stack 0
  5662                           tosu	equ	0xFFF
  5663                           tosh	equ	0xFFE
  5664                           tosl	equ	0xFFD
  5665                           pclath	equ	0xFFA
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           postinc0	equ	0xFEE
  5671                           wreg	equ	0xFE8
  5672                           postdec1	equ	0xFE5
  5673                           fsr1h	equ	0xFE2
  5674                           fsr1l	equ	0xFE1
  5675                           postinc2	equ	0xFDE
  5676                           status	equ	0xFD8
  5677                           
  5678 ;; *************** function _Port_Init *****************
  5679 ;; Defined at:
  5680 ;;		line 150 in file "Library/Port.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  5683 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5684 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5685 ;;  pPort           1   66[BANK0 ] enum E6786
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  i               1   69[BANK0 ] unsigned char 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  1    wreg      void 
  5690 ;; Registers used:
  5691 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5697 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;Total ram usage:        6 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:   15
  5704 ;; This function calls:
  5705 ;;		_GetPortPORT
  5706 ;;		_GetPortProperties
  5707 ;;		_GetPortTRIS
  5708 ;;		_Port_Set
  5709 ;;		_Port_SetPinType
  5710 ;;		_Port_SetType
  5711 ;;		_Word_GetPair
  5712 ;; This function is called by:
  5713 ;;		_MXK_Init
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           	psect	text9
  5718  01299E                     __ptext9:
  5719                           	opt stack 0
  5720  01299E                     _Port_Init:
  5721                           	opt stack 14
  5722                           
  5723                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5724                           
  5725                           ;incstack = 0
  5726  01299E  0100               	movlb	0	; () banked
  5727  0129A0  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5728  0129A2  ECB5  F0A3         	call	_GetPortProperties
  5729  0129A6  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5730  0129AA  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5731  0129AE  0100               	movlb	0	; () banked
  5732  0129B0  C060  FFDE         	movff	?_GetPortProperties,postinc2
  5733  0129B4  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  5734                           
  5735                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5736  0129B8  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5737  0129BA  ECF9  F0A3         	call	_GetPortPORT
  5738  0129BE  0100               	movlb	0	; () banked
  5739  0129C0  EE20 F006          	lfsr	2,6
  5740  0129C4  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5741  0129C6  26D9               	addwf	fsr2l,f,c
  5742  0129C8  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5743  0129CA  22DA               	addwfc	fsr2h,f,c
  5744  0129CC  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5745  0129D0  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5746                           
  5747                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5748  0129D4  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5749  0129D6  ECF9  F0A3         	call	_GetPortPORT
  5750  0129DA  0100               	movlb	0	; () banked
  5751  0129DC  EE20 F004          	lfsr	2,4
  5752  0129E0  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5753  0129E2  26D9               	addwf	fsr2l,f,c
  5754  0129E4  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5755  0129E6  22DA               	addwfc	fsr2h,f,c
  5756  0129E8  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5757  0129EC  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5758                           
  5759                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  5760  0129F0  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5761  0129F2  EC71  F0A3         	call	_GetPortTRIS
  5762  0129F6  0100               	movlb	0	; () banked
  5763  0129F8  EE20 F002          	lfsr	2,2
  5764  0129FC  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5765  0129FE  26D9               	addwf	fsr2l,f,c
  5766  012A00  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5767  012A02  22DA               	addwfc	fsr2h,f,c
  5768  012A04  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  5769  012A08  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  5773  012A0C  EE20 F004          	lfsr	2,4
  5774  012A10  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5775  012A12  26D9               	addwf	fsr2l,f,c
  5776  012A14  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5777  012A16  22DA               	addwfc	fsr2h,f,c
  5778  012A18  CFDE F0A3          	movff	postinc2,??_Port_Init
  5779  012A1C  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5780  012A20  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5781  012A24  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5782  012A28  0E00               	movlw	0
  5783  012A2A  6EDF               	movwf	indf2,c
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  5787  012A2C  EE20 F002          	lfsr	2,2
  5788  012A30  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5789  012A32  26D9               	addwf	fsr2l,f,c
  5790  012A34  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5791  012A36  22DA               	addwfc	fsr2h,f,c
  5792  012A38  CFDE F0A3          	movff	postinc2,??_Port_Init
  5793  012A3C  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5794  012A40  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5795  012A44  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5796  012A48  0EFF               	movlw	255
  5797  012A4A  6EDF               	movwf	indf2,c
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  5801  012A4C  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  5802  012A50  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  5803  012A54  0E00               	movlw	0
  5804  012A56  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5805  012A58  EC7F  F091         	call	_Port_SetType	;wreg free
  5806                           
  5807                           ;Port.c: 166: UINT8 i;
  5808                           ;Port.c: 167: for (i=0; i<8; i++)
  5809  012A5C  0E00               	movlw	0
  5810  012A5E  0100               	movlb	0	; () banked
  5811  012A60  6FA5               	movwf	Port_Init@i& (0+255),b
  5812  012A62                     l14783:
  5813                           
  5814                           ; BSR set to: 0
  5815  012A62  0E07               	movlw	7
  5816  012A64  65A5               	cpfsgt	Port_Init@i& (0+255),b
  5817  012A66  D031               	goto	l403
  5818  012A68  D04B               	goto	u12160
  5819  012A6A                     
  5820                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  5821                           
  5822                           ; BSR set to: 0
  5823  012A6A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5824  012A6E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5825  012A72  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5826  012A76  0E03               	movlw	3
  5827  012A78  0100               	movlb	0	; () banked
  5828  012A7A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5829  012A7C  EC42  F093         	call	_Port_SetPinType	;wreg free
  5830                           
  5831                           ;Port.c: 173: break;
  5832  012A80  D03C               	goto	l405
  5833  012A82                     
  5834                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  5835  012A82  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5836  012A86  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5837  012A8A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5838  012A8E  0E02               	movlw	2
  5839  012A90  0100               	movlb	0	; () banked
  5840  012A92  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5841  012A94  EC42  F093         	call	_Port_SetPinType	;wreg free
  5842                           
  5843                           ;Port.c: 176: break;
  5844  012A98  D030               	goto	l405
  5845  012A9A                     
  5846                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  5847  012A9A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5848  012A9E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5849  012AA2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5850  012AA6  0E01               	movlw	1
  5851  012AA8  0100               	movlb	0	; () banked
  5852  012AAA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5853  012AAC  EC42  F093         	call	_Port_SetPinType	;wreg free
  5854                           
  5855                           ;Port.c: 179: break;
  5856  012AB0  D024               	goto	l405
  5857  012AB2                     
  5858                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  5859  012AB2  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5860  012AB6  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5861  012ABA  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5862  012ABE  0E00               	movlw	0
  5863  012AC0  0100               	movlb	0	; () banked
  5864  012AC2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5865  012AC4  EC42  F093         	call	_Port_SetPinType	;wreg free
  5866                           
  5867                           ;Port.c: 183: }
  5868                           
  5869                           ;Port.c: 182: break;
  5870  012AC8  D018               	goto	l405
  5871  012ACA                     l403:
  5872  012ACA  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5873  012ACE  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5874  012AD2  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  5875  012AD6  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  5876  012ADA  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  5877  012ADE  ECB8  F0AD         	call	_Word_GetPair	;wreg free
  5878                           
  5879                           ; Switch size 1, requested type "space"
  5880                           ; Number of cases is 4, Range of values is 0 to 3
  5881                           ; switch strategies available:
  5882                           ; Name         Instructions Cycles
  5883                           ; simple_byte           13     7 (average)
  5884                           ;	Chosen strategy is simple_byte
  5885  012AE2  0A00               	xorlw	0	; case 0
  5886  012AE4  B4D8               	btfsc	status,2,c
  5887  012AE6  D7C1               	goto	l404
  5888  012AE8  0A01               	xorlw	1	; case 1
  5889  012AEA  B4D8               	btfsc	status,2,c
  5890  012AEC  D7D6               	goto	l407
  5891  012AEE  0A03               	xorlw	3	; case 2
  5892  012AF0  B4D8               	btfsc	status,2,c
  5893  012AF2  D7C7               	goto	l406
  5894  012AF4  0A01               	xorlw	1	; case 3
  5895  012AF6  B4D8               	btfsc	status,2,c
  5896  012AF8  D7DC               	goto	l408
  5897  012AFA                     l405:
  5898  012AFA  0100               	movlb	0	; () banked
  5899  012AFC  2BA5               	incf	Port_Init@i& (0+255),f,b
  5900  012AFE  D7B1               	goto	l14783
  5901  012B00                     u12160:
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;Port.c: 184: }
  5905                           ;Port.c: 185: Port_Set(pInput, 0x00);
  5906                           
  5907                           ; BSR set to: 0
  5908  012B00  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  5909  012B04  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  5910  012B08  0E00               	movlw	0
  5911  012B0A  6F71               	movwf	Port_Set@pValue& (0+255),b
  5912  012B0C  ECBA  F08B         	call	_Port_Set	;wreg free
  5913  012B10  0012               	return		;funcret
  5914  012B12                     __end_of_Port_Init:
  5915                           	opt stack 0
  5916                           tosu	equ	0xFFF
  5917                           tosh	equ	0xFFE
  5918                           tosl	equ	0xFFD
  5919                           pclath	equ	0xFFA
  5920                           tblptru	equ	0xFF8
  5921                           tblptrh	equ	0xFF7
  5922                           tblptrl	equ	0xFF6
  5923                           tablat	equ	0xFF5
  5924                           postinc0	equ	0xFEE
  5925                           wreg	equ	0xFE8
  5926                           postdec1	equ	0xFE5
  5927                           fsr1h	equ	0xFE2
  5928                           fsr1l	equ	0xFE1
  5929                           indf2	equ	0xFDF
  5930                           postinc2	equ	0xFDE
  5931                           postdec2	equ	0xFDD
  5932                           fsr2h	equ	0xFDA
  5933                           fsr2l	equ	0xFD9
  5934                           status	equ	0xFD8
  5935                           
  5936 ;; *************** function _Port_SetType *****************
  5937 ;; Defined at:
  5938 ;;		line 513 in file "Library/Port.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  5941 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5942 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5943 ;;  pType           1   60[BANK0 ] enum E6795
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  Output          1   63[BANK0 ] enum E6475
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  1    wreg      enum E6475
  5948 ;; Registers used:
  5949 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5955 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;Total ram usage:        6 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:   14
  5962 ;; This function calls:
  5963 ;;		_Port_CheckPortType
  5964 ;;		_Word_SetPair
  5965 ;; This function is called by:
  5966 ;;		_Port_Init
  5967 ;;		_MXK_Init
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           	psect	text10
  5972  0122FE                     __ptext10:
  5973                           	opt stack 0
  5974  0122FE                     _Port_SetType:
  5975                           	opt stack 15
  5976                           
  5977                           ;Port.c: 515: ePinError Output = ePinErrorState;
  5978                           
  5979                           ;incstack = 0
  5980  0122FE  0E05               	movlw	5
  5981  012300  0100               	movlb	0	; () banked
  5982  012302  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5983                           
  5984                           ;Port.c: 517: switch (pType)
  5985  012304  D06E               	goto	l509
  5986  012306                     
  5987                           ; BSR set to: 0
  5988                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  5989                           
  5990                           ; BSR set to: 0
  5991  012306  EE20 F002          	lfsr	2,2
  5992  01230A  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5993  01230C  26D9               	addwf	fsr2l,f,c
  5994  01230E  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5995  012310  22DA               	addwfc	fsr2h,f,c
  5996  012312  CFDE F09D          	movff	postinc2,??_Port_SetType
  5997  012316  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5998  01231A  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5999  01231E  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6000  012322  0EFF               	movlw	255
  6001  012324  D05C               	goto	L3
  6002  012326                     
  6003                           ; BSR set to: 0
  6004                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  6005                           
  6006                           ; BSR set to: 0
  6007  012326  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6008  01232A  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6009  01232E  0E01               	movlw	1
  6010  012330  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6011  012332  EC20  F0AC         	call	_Port_CheckPortType	;wreg free
  6012  012336  0100               	movlb	0	; () banked
  6013  012338  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6014  01233A  519F               	movf	Port_SetType@Output& (0+255),w,b
  6015  01233C  A4D8               	btfss	status,2,c
  6016  01233E  0012               	return	
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;Port.c: 527: {
  6020                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  6021  012340  EE20 F002          	lfsr	2,2
  6022  012344  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6023  012346  26D9               	addwf	fsr2l,f,c
  6024  012348  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6025  01234A  22DA               	addwfc	fsr2h,f,c
  6026  01234C  CFDE F09D          	movff	postinc2,??_Port_SetType
  6027  012350  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6028  012354  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6029  012358  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6030  01235C  0E00               	movlw	0
  6031  01235E  6EDF               	movwf	indf2,c
  6032                           
  6033                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  6034  012360  EE20 F004          	lfsr	2,4
  6035  012364  D02F               	goto	L17
  6036  012366                     
  6037                           ; BSR set to: 0
  6038                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  6039                           
  6040                           ; BSR set to: 0
  6041  012366  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6042  01236A  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6043  01236E  0E02               	movlw	2
  6044  012370  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6045  012372  EC20  F0AC         	call	_Port_CheckPortType	;wreg free
  6046  012376  0100               	movlb	0	; () banked
  6047  012378  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6048  01237A  519F               	movf	Port_SetType@Output& (0+255),w,b
  6049  01237C  A4D8               	btfss	status,2,c
  6050  01237E  0012               	return	
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;Port.c: 538: {
  6054                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  6055  012380  EE20 F002          	lfsr	2,2
  6056  012384  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6057  012386  26D9               	addwf	fsr2l,f,c
  6058  012388  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6059  01238A  22DA               	addwfc	fsr2h,f,c
  6060  01238C  CFDE F09D          	movff	postinc2,??_Port_SetType
  6061  012390  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6062  012394  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6063  012398  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6064  01239C  0EFF               	movlw	255
  6065  01239E  6EDF               	movwf	indf2,c
  6066                           
  6067                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  6068  0123A0  EE20 F004          	lfsr	2,4
  6069  0123A4  D7B2               	goto	L4
  6070  0123A6                     
  6071                           ; BSR set to: 0
  6072                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  6073                           
  6074                           ; BSR set to: 0
  6075  0123A6  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6076  0123AA  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6077  0123AE  0E00               	movlw	0
  6078  0123B0  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6079  0123B2  EC20  F0AC         	call	_Port_CheckPortType	;wreg free
  6080  0123B6  0100               	movlb	0	; () banked
  6081  0123B8  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6082  0123BA  519F               	movf	Port_SetType@Output& (0+255),w,b
  6083  0123BC  A4D8               	btfss	status,2,c
  6084  0123BE  0012               	return	
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;Port.c: 549: {
  6088                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  6089  0123C0  EE20 F002          	lfsr	2,2
  6090  0123C4                     L17:
  6091  0123C4  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6092  0123C6  26D9               	addwf	fsr2l,f,c
  6093  0123C8  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6094  0123CA  22DA               	addwfc	fsr2h,f,c
  6095  0123CC  CFDE F09D          	movff	postinc2,??_Port_SetType
  6096  0123D0  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6097  0123D4  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6098  0123D8  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6099  0123DC  0E00               	movlw	0
  6100  0123DE                     L3:
  6101  0123DE  6EDF               	movwf	indf2,c
  6102                           
  6103                           ;Port.c: 552: }
  6104  0123E0  D00D               	goto	l511
  6105  0123E2                     l509:
  6106                           
  6107                           ; BSR set to: 0
  6108                           
  6109                           ; BSR set to: 0
  6110  0123E2  519C               	movf	Port_SetType@pType& (0+255),w,b
  6111                           
  6112                           ; Switch size 1, requested type "space"
  6113                           ; Number of cases is 4, Range of values is 0 to 3
  6114                           ; switch strategies available:
  6115                           ; Name         Instructions Cycles
  6116                           ; simple_byte           13     7 (average)
  6117                           ;	Chosen strategy is simple_byte
  6118  0123E4  0A00               	xorlw	0	; case 0
  6119  0123E6  B4D8               	btfsc	status,2,c
  6120  0123E8  D78E               	goto	l510
  6121  0123EA  0A01               	xorlw	1	; case 1
  6122  0123EC  B4D8               	btfsc	status,2,c
  6123  0123EE  D79B               	goto	l512
  6124  0123F0  0A03               	xorlw	3	; case 2
  6125  0123F2  B4D8               	btfsc	status,2,c
  6126  0123F4  D7B8               	goto	l516
  6127  0123F6  0A01               	xorlw	1	; case 3
  6128  0123F8  B4D8               	btfsc	status,2,c
  6129  0123FA  D7D5               	goto	l519
  6130  0123FC                     l511:
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  6134                           
  6135                           ; BSR set to: 0
  6136  0123FC  0E08               	movlw	8
  6137  0123FE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6138  012400  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6139  012402  0E00               	movlw	0
  6140  012404  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6141  012406  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6142  012408  0E00               	movlw	0
  6143  01240A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6144  01240C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6145  012410  EC16  F0AD         	call	_Word_SetPair	;wreg free
  6146                           
  6147                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  6148  012414  0E08               	movlw	8
  6149  012416  0100               	movlb	0	; () banked
  6150  012418  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6151  01241A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6152  01241C  0E00               	movlw	0
  6153  01241E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6154  012420  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6155  012422  0E01               	movlw	1
  6156  012424  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6157  012426  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6158  01242A  EC16  F0AD         	call	_Word_SetPair	;wreg free
  6159                           
  6160                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  6161  01242E  0E08               	movlw	8
  6162  012430  0100               	movlb	0	; () banked
  6163  012432  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6164  012434  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6165  012436  0E00               	movlw	0
  6166  012438  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6167  01243A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6168  01243C  0E02               	movlw	2
  6169  01243E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6170  012440  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6171  012444  EC16  F0AD         	call	_Word_SetPair	;wreg free
  6172                           
  6173                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  6174  012448  0E08               	movlw	8
  6175  01244A  0100               	movlb	0	; () banked
  6176  01244C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6177  01244E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6178  012450  0E00               	movlw	0
  6179  012452  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6180  012454  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6181  012456  0E03               	movlw	3
  6182  012458  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6183  01245A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6184  01245E  EC16  F0AD         	call	_Word_SetPair	;wreg free
  6185                           
  6186                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  6187  012462  0E08               	movlw	8
  6188  012464  0100               	movlb	0	; () banked
  6189  012466  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6190  012468  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6191  01246A  0E00               	movlw	0
  6192  01246C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6193  01246E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6194  012470  0E04               	movlw	4
  6195  012472  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6196  012474  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6197  012478  EC16  F0AD         	call	_Word_SetPair	;wreg free
  6198                           
  6199                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  6200  01247C  0E08               	movlw	8
  6201  01247E  0100               	movlb	0	; () banked
  6202  012480  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6203  012482  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6204  012484  0E00               	movlw	0
  6205  012486  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6206  012488  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6207  01248A  0E05               	movlw	5
  6208  01248C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6209  01248E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6210  012492  EC16  F0AD         	call	_Word_SetPair	;wreg free
  6211                           
  6212                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  6213  012496  0E08               	movlw	8
  6214  012498  0100               	movlb	0	; () banked
  6215  01249A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6216  01249C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6217  01249E  0E00               	movlw	0
  6218  0124A0  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6219  0124A2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6220  0124A4  0E06               	movlw	6
  6221  0124A6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6222  0124A8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6223  0124AC  EC16  F0AD         	call	_Word_SetPair	;wreg free
  6224                           
  6225                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  6226  0124B0  0E08               	movlw	8
  6227  0124B2  0100               	movlb	0	; () banked
  6228  0124B4  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6229  0124B6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6230  0124B8  0E00               	movlw	0
  6231  0124BA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6232  0124BC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6233  0124BE  0E07               	movlw	7
  6234  0124C0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6235  0124C2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6236  0124C6  EC16  F0AD         	call	_Word_SetPair	;wreg free
  6237  0124CA  0012               	return	
  6238  0124CC                     __end_of_Port_SetType:
  6239                           	opt stack 0
  6240                           tosu	equ	0xFFF
  6241                           tosh	equ	0xFFE
  6242                           tosl	equ	0xFFD
  6243                           pclath	equ	0xFFA
  6244                           tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           postinc0	equ	0xFEE
  6249                           wreg	equ	0xFE8
  6250                           postdec1	equ	0xFE5
  6251                           fsr1h	equ	0xFE2
  6252                           fsr1l	equ	0xFE1
  6253                           indf2	equ	0xFDF
  6254                           postinc2	equ	0xFDE
  6255                           postdec2	equ	0xFDD
  6256                           fsr2h	equ	0xFDA
  6257                           fsr2l	equ	0xFD9
  6258                           status	equ	0xFD8
  6259                           
  6260 ;; *************** function _Port_CheckPortType *****************
  6261 ;; Defined at:
  6262 ;;		line 138 in file "Library/Port.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  6265 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6266 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6267 ;;  pDrive          1   56[BANK0 ] enum E6469
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  Output          1   57[BANK0 ] enum E6475
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  1    wreg      enum E6475
  6272 ;; Registers used:
  6273 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6279 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;Total ram usage:        4 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:   13
  6286 ;; This function calls:
  6287 ;;		_Port_CheckQuadType
  6288 ;; This function is called by:
  6289 ;;		_Port_SetType
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           	psect	text11
  6294  015840                     __ptext11:
  6295                           	opt stack 0
  6296  015840                     _Port_CheckPortType:
  6297                           	opt stack 15
  6298                           
  6299                           ;Port.c: 140: ePinError Output = ePinErrorState;
  6300                           
  6301                           ;incstack = 0
  6302  015840  0E05               	movlw	5
  6303  015842  0100               	movlb	0	; () banked
  6304  015844  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  6308  015846  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6309  01584A  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6310  01584E  0E00               	movlw	0
  6311  015850  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6312  015852  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6313  015856  EC65  F0AA         	call	_Port_CheckQuadType	;wreg free
  6314  01585A  0100               	movlb	0	; () banked
  6315  01585C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6316  01585E  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6317  015860  A4D8               	btfss	status,2,c
  6318  015862  D00C               	goto	l397
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6322  015864  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6323  015868  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6324  01586C  0E01               	movlw	1
  6325  01586E  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6326  015870  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6327  015874  EC65  F0AA         	call	_Port_CheckQuadType	;wreg free
  6328  015878  0100               	movlb	0	; () banked
  6329  01587A  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6330  01587C                     l397:
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;Port.c: 146: return Output;
  6334                           
  6335                           ; BSR set to: 0
  6336  01587C  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6337  01587E  0012               	return	
  6338  015880                     __end_of_Port_CheckPortType:
  6339                           	opt stack 0
  6340                           tosu	equ	0xFFF
  6341                           tosh	equ	0xFFE
  6342                           tosl	equ	0xFFD
  6343                           pclath	equ	0xFFA
  6344                           tblptru	equ	0xFF8
  6345                           tblptrh	equ	0xFF7
  6346                           tblptrl	equ	0xFF6
  6347                           tablat	equ	0xFF5
  6348                           postinc0	equ	0xFEE
  6349                           wreg	equ	0xFE8
  6350                           postdec1	equ	0xFE5
  6351                           fsr1h	equ	0xFE2
  6352                           fsr1l	equ	0xFE1
  6353                           indf2	equ	0xFDF
  6354                           postinc2	equ	0xFDE
  6355                           postdec2	equ	0xFDD
  6356                           fsr2h	equ	0xFDA
  6357                           fsr2l	equ	0xFD9
  6358                           status	equ	0xFD8
  6359                           
  6360 ;; *************** function _Port_Set *****************
  6361 ;; Defined at:
  6362 ;;		line 570 in file "Library/Port.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6365 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6366 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6367 ;;  pValue          1   17[BANK0 ] unsigned char 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6370 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6371 ;;  Type            1   38[BANK0 ] enum E6795
  6372 ;; Return value:  Size  Location     Type
  6373 ;;                  1    wreg      void 
  6374 ;; Registers used:
  6375 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6381 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6385 ;;Total ram usage:       24 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:   10
  6388 ;; This function calls:
  6389 ;;		_Byte_SetByte
  6390 ;;		_Word_GetPair
  6391 ;; This function is called by:
  6392 ;;		_Port_Init
  6393 ;;		_Port_Toggle
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           	psect	text12
  6398  011774                     __ptext12:
  6399                           	opt stack 0
  6400  011774                     _Port_Set:
  6401                           	opt stack 18
  6402                           
  6403                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;incstack = 0
  6407  011774  0E08               	movlw	8
  6408  011776  0100               	movlb	0	; () banked
  6409  011778  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6410  01177A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6411  01177C  0E00               	movlw	0
  6412  01177E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6413  011780  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6414  011782  0E00               	movlw	0
  6415  011784  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6416  011786  ECB8  F0AD         	call	_Word_GetPair	;wreg free
  6417  01178A  0100               	movlb	0	; () banked
  6418  01178C  6F86               	movwf	Port_Set@Type& (0+255),b
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6422  01178E  5186               	movf	Port_Set@Type& (0+255),w,b
  6423  011790  6F72               	movwf	??_Port_Set& (0+255),b
  6424  011792  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6425  011794  0E0E               	movlw	14
  6426  011796                     u11705:
  6427  011796  90D8               	bcf	status,0,c
  6428  011798  3772               	rlcf	??_Port_Set& (0+255),f,b
  6429  01179A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6430  01179C  2EE8               	decfsz	wreg,f,c
  6431  01179E  D7FB               	goto	u11705
  6432  0117A0  5186               	movf	Port_Set@Type& (0+255),w,b
  6433  0117A2  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6434  0117A4  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  6435  0117A6  0E0C               	movlw	12
  6436  0117A8                     u11715:
  6437  0117A8  90D8               	bcf	status,0,c
  6438  0117AA  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6439  0117AC  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6440  0117AE  2EE8               	decfsz	wreg,f,c
  6441  0117B0  D7FB               	goto	u11715
  6442  0117B2  5186               	movf	Port_Set@Type& (0+255),w,b
  6443  0117B4  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  6444  0117B6  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  6445  0117B8  0E0A               	movlw	10
  6446  0117BA                     u11725:
  6447  0117BA  90D8               	bcf	status,0,c
  6448  0117BC  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6449  0117BE  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6450  0117C0  2EE8               	decfsz	wreg,f,c
  6451  0117C2  D7FB               	goto	u11725
  6452  0117C4  5186               	movf	Port_Set@Type& (0+255),w,b
  6453  0117C6  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  6454  0117C8  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  6455  0117CA  5186               	movf	Port_Set@Type& (0+255),w,b
  6456  0117CC  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  6457  0117CE  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  6458  0117D0  0E06               	movlw	6
  6459  0117D2                     u11735:
  6460  0117D2  90D8               	bcf	status,0,c
  6461  0117D4  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6462  0117D6  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6463  0117D8  2EE8               	decfsz	wreg,f,c
  6464  0117DA  D7FB               	goto	u11735
  6465  0117DC  5186               	movf	Port_Set@Type& (0+255),w,b
  6466  0117DE  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  6467  0117E0  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  6468  0117E2  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  6469  0117E4  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  6470  0117E6  0EF0               	movlw	240
  6471  0117E8  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  6472  0117EA  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6473  0117EC  0B0F               	andlw	15
  6474  0117EE  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6475  0117F0  0EF0               	movlw	240
  6476  0117F2  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  6477  0117F4  5186               	movf	Port_Set@Type& (0+255),w,b
  6478  0117F6  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  6479  0117F8  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  6480  0117FA  90D8               	bcf	status,0,c
  6481  0117FC  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6482  0117FE  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6483  011800  90D8               	bcf	status,0,c
  6484  011802  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6485  011804  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6486  011806  5186               	movf	Port_Set@Type& (0+255),w,b
  6487  011808  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  6488  01180A  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  6489  01180C  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  6490  01180E  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6491  011810  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  6492  011812  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6493  011814  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6494  011816  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6495  011818  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  6496  01181A  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6497  01181C  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  6498  01181E  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6499  011820  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  6500  011822  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6501  011824  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  6502  011826  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6503  011828  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  6504  01182A  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6505  01182C  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  6506  01182E  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6507  011830  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  6508  011832  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6509  011834  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6510  011836  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6511  011838  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  6512  01183A  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6513  01183C  5172               	movf	??_Port_Set& (0+255),w,b
  6514  01183E  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6515  011840  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  6516  011842  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6517  011844  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6518  011846  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;Port.c: 574: UINT16 TypeActual = Type;
  6522  011848  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  6523  01184C  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6527  01184E  0E08               	movlw	8
  6528  011850  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6529  011852  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6530  011854  0E00               	movlw	0
  6531  011856  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6532  011858  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6533  01185A  0E01               	movlw	1
  6534  01185C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6535  01185E  ECB8  F0AD         	call	_Word_GetPair	;wreg free
  6536  011862  0100               	movlb	0	; () banked
  6537  011864  6F72               	movwf	??_Port_Set& (0+255),b
  6538  011866  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6539  011868  90D8               	bcf	status,0,c
  6540  01186A  3772               	rlcf	??_Port_Set& (0+255),f,b
  6541  01186C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6542  01186E  90D8               	bcf	status,0,c
  6543  011870  3772               	rlcf	??_Port_Set& (0+255),f,b
  6544  011872  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6545  011874  5172               	movf	??_Port_Set& (0+255),w,b
  6546  011876  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6547  011878  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6548  01187A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6552  01187C  0E08               	movlw	8
  6553  01187E  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6554  011880  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6555  011882  0E00               	movlw	0
  6556  011884  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6557  011886  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6558  011888  0E02               	movlw	2
  6559  01188A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6560  01188C  ECB8  F0AD         	call	_Word_GetPair	;wreg free
  6561  011890  0100               	movlb	0	; () banked
  6562  011892  6F72               	movwf	??_Port_Set& (0+255),b
  6563  011894  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6564  011896  3B72               	swapf	??_Port_Set& (0+255),f,b
  6565  011898  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  6566  01189A  0EF0               	movlw	240
  6567  01189C  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  6568  01189E  5172               	movf	??_Port_Set& (0+255),w,b
  6569  0118A0  0B0F               	andlw	15
  6570  0118A2  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6571  0118A4  0EF0               	movlw	240
  6572  0118A6  1772               	andwf	??_Port_Set& (0+255),f,b
  6573  0118A8  5172               	movf	??_Port_Set& (0+255),w,b
  6574  0118AA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6575  0118AC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6576  0118AE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6580  0118B0  0E08               	movlw	8
  6581  0118B2  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6582  0118B4  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6583  0118B6  0E00               	movlw	0
  6584  0118B8  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6585  0118BA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6586  0118BC  0E03               	movlw	3
  6587  0118BE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6588  0118C0  ECB8  F0AD         	call	_Word_GetPair	;wreg free
  6589  0118C4  0100               	movlb	0	; () banked
  6590  0118C6  6F72               	movwf	??_Port_Set& (0+255),b
  6591  0118C8  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6592  0118CA  0E06               	movlw	6
  6593  0118CC                     u11745:
  6594  0118CC  90D8               	bcf	status,0,c
  6595  0118CE  3772               	rlcf	??_Port_Set& (0+255),f,b
  6596  0118D0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6597  0118D2  2EE8               	decfsz	wreg,f,c
  6598  0118D4  D7FB               	goto	u11745
  6599  0118D6  5172               	movf	??_Port_Set& (0+255),w,b
  6600  0118D8  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6601  0118DA  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6602  0118DC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6606  0118DE  0E08               	movlw	8
  6607  0118E0  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6608  0118E2  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6609  0118E4  0E00               	movlw	0
  6610  0118E6  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6611  0118E8  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6612  0118EA  0E04               	movlw	4
  6613  0118EC  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6614  0118EE  ECB8  F0AD         	call	_Word_GetPair	;wreg free
  6615  0118F2  0100               	movlb	0	; () banked
  6616  0118F4  6F72               	movwf	??_Port_Set& (0+255),b
  6617  0118F6  5172               	movf	??_Port_Set& (0+255),w,b
  6618  0118F8  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6619  0118FA  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6620  0118FC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6621  0118FE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6622  011900  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6623  011902  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  6627  011904  0E08               	movlw	8
  6628  011906  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6629  011908  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6630  01190A  0E00               	movlw	0
  6631  01190C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6632  01190E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6633  011910  0E05               	movlw	5
  6634  011912  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6635  011914  ECB8  F0AD         	call	_Word_GetPair	;wreg free
  6636  011918  0100               	movlb	0	; () banked
  6637  01191A  6F72               	movwf	??_Port_Set& (0+255),b
  6638  01191C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6639  01191E  0E0A               	movlw	10
  6640  011920                     u11755:
  6641  011920  90D8               	bcf	status,0,c
  6642  011922  3772               	rlcf	??_Port_Set& (0+255),f,b
  6643  011924  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6644  011926  2EE8               	decfsz	wreg,f,c
  6645  011928  D7FB               	goto	u11755
  6646  01192A  5172               	movf	??_Port_Set& (0+255),w,b
  6647  01192C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6648  01192E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6649  011930  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  6653  011932  0E08               	movlw	8
  6654  011934  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6655  011936  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6656  011938  0E00               	movlw	0
  6657  01193A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6658  01193C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6659  01193E  0E06               	movlw	6
  6660  011940  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6661  011942  ECB8  F0AD         	call	_Word_GetPair	;wreg free
  6662  011946  0100               	movlb	0	; () banked
  6663  011948  6F72               	movwf	??_Port_Set& (0+255),b
  6664  01194A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6665  01194C  0E0C               	movlw	12
  6666  01194E                     u11765:
  6667  01194E  90D8               	bcf	status,0,c
  6668  011950  3772               	rlcf	??_Port_Set& (0+255),f,b
  6669  011952  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6670  011954  2EE8               	decfsz	wreg,f,c
  6671  011956  D7FB               	goto	u11765
  6672  011958  5172               	movf	??_Port_Set& (0+255),w,b
  6673  01195A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6674  01195C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6675  01195E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  6679  011960  0E08               	movlw	8
  6680  011962  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6681  011964  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6682  011966  0E00               	movlw	0
  6683  011968  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6684  01196A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6685  01196C  0E07               	movlw	7
  6686  01196E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6687  011970  ECB8  F0AD         	call	_Word_GetPair	;wreg free
  6688  011974  0100               	movlb	0	; () banked
  6689  011976  6F72               	movwf	??_Port_Set& (0+255),b
  6690  011978  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6691  01197A  0E0E               	movlw	14
  6692  01197C                     u11775:
  6693  01197C  90D8               	bcf	status,0,c
  6694  01197E  3772               	rlcf	??_Port_Set& (0+255),f,b
  6695  011980  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6696  011982  2EE8               	decfsz	wreg,f,c
  6697  011984  D7FB               	goto	u11775
  6698  011986  5172               	movf	??_Port_Set& (0+255),w,b
  6699  011988  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6700  01198A  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6701  01198C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6702                           
  6703                           ;Port.c: 584: if (TypeRequired == TypeActual)
  6704  01198E  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  6705  011990  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  6706  011992  E144               	bnz	l528
  6707  011994  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  6708  011996  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  6709  011998  A4D8               	btfss	status,2,c
  6710  01199A  0012               	return	
  6711  01199C  D030               	goto	l526
  6712  01199E                     
  6713                           ; BSR set to: 0
  6714                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  6715                           
  6716                           ; BSR set to: 0
  6717  01199E  EE20 F002          	lfsr	2,2
  6718  0119A2  516F               	movf	Port_Set@pInput& (0+255),w,b
  6719  0119A4  26D9               	addwf	fsr2l,f,c
  6720  0119A6  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6721  0119A8  22DA               	addwfc	fsr2h,f,c
  6722  0119AA  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6723  0119AE  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6724  0119B2  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6725  0119B6  EC5F  F0B0         	call	_Byte_SetByte	;wreg free
  6726                           
  6727                           ;Port.c: 594: break;
  6728  0119BA  0012               	return	
  6729  0119BC                     
  6730                           ;Port.c: 597: pValue = ~pValue;
  6731  0119BC  0100               	movlb	0	; () banked
  6732  0119BE  1F71               	comf	Port_Set@pValue& (0+255),f,b
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  6736  0119C0  EE20 F002          	lfsr	2,2
  6737  0119C4  516F               	movf	Port_Set@pInput& (0+255),w,b
  6738  0119C6  26D9               	addwf	fsr2l,f,c
  6739  0119C8  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6740  0119CA  22DA               	addwfc	fsr2h,f,c
  6741  0119CC  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6742  0119D0  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6743  0119D4  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6744  0119D8  EC5F  F0B0         	call	_Byte_SetByte	;wreg free
  6745                           
  6746                           ;Port.c: 599: break;
  6747  0119DC  0012               	return	
  6748  0119DE                     
  6749                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  6750  0119DE  0100               	movlb	0	; () banked
  6751  0119E0  EE20 F004          	lfsr	2,4
  6752  0119E4  516F               	movf	Port_Set@pInput& (0+255),w,b
  6753  0119E6  26D9               	addwf	fsr2l,f,c
  6754  0119E8  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6755  0119EA  22DA               	addwfc	fsr2h,f,c
  6756  0119EC  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6757  0119F0  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6758  0119F4  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6759  0119F8  EC5F  F0B0         	call	_Byte_SetByte	;wreg free
  6760                           
  6761                           ;Port.c: 606: }
  6762                           
  6763                           ;Port.c: 605: break;
  6764                           
  6765                           ;Port.c: 604: default:
  6766                           
  6767                           ;Port.c: 603: break;
  6768  0119FC  0012               	return	
  6769  0119FE                     l526:
  6770  0119FE  0100               	movlb	0	; () banked
  6771  011A00  5186               	movf	Port_Set@Type& (0+255),w,b
  6772                           
  6773                           ; Switch size 1, requested type "space"
  6774                           ; Number of cases is 4, Range of values is 0 to 3
  6775                           ; switch strategies available:
  6776                           ; Name         Instructions Cycles
  6777                           ; simple_byte           13     7 (average)
  6778                           ;	Chosen strategy is simple_byte
  6779  011A02  0A00               	xorlw	0	; case 0
  6780  011A04  B4D8               	btfsc	status,2,c
  6781  011A06  0012               	return	
  6782  011A08  0A01               	xorlw	1	; case 1
  6783  011A0A  B4D8               	btfsc	status,2,c
  6784  011A0C  D7C8               	goto	l529
  6785  011A0E  0A03               	xorlw	3	; case 2
  6786  011A10  B4D8               	btfsc	status,2,c
  6787  011A12  D7D4               	goto	l531
  6788  011A14  0A01               	xorlw	1	; case 3
  6789  011A16  A4D8               	btfss	status,2,c
  6790                           
  6791                           ; BSR set to: 0
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;Port.c: 607: }
  6795  011A18  0012               	return	
  6796  011A1A  D7E1               	goto	l532
  6797  011A1C                     l528:
  6798  011A1C  0012               	return		;funcret
  6799  011A1E                     __end_of_Port_Set:
  6800                           	opt stack 0
  6801                           tosu	equ	0xFFF
  6802                           tosh	equ	0xFFE
  6803                           tosl	equ	0xFFD
  6804                           pclath	equ	0xFFA
  6805                           tblptru	equ	0xFF8
  6806                           tblptrh	equ	0xFF7
  6807                           tblptrl	equ	0xFF6
  6808                           tablat	equ	0xFF5
  6809                           postinc0	equ	0xFEE
  6810                           wreg	equ	0xFE8
  6811                           postdec1	equ	0xFE5
  6812                           fsr1h	equ	0xFE2
  6813                           fsr1l	equ	0xFE1
  6814                           indf2	equ	0xFDF
  6815                           postinc2	equ	0xFDE
  6816                           postdec2	equ	0xFDD
  6817                           fsr2h	equ	0xFDA
  6818                           fsr2l	equ	0xFD9
  6819                           status	equ	0xFD8
  6820                           
  6821 ;; *************** function _Byte_SetByte *****************
  6822 ;; Defined at:
  6823 ;;		line 110 in file "Library/Types.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  6826 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  6827 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  6828 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  6829 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  6830 ;;		 -> NULL(0), 
  6831 ;;  pValue          1    2[BANK0 ] unsigned char 
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;		None
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      void 
  6836 ;; Registers used:
  6837 ;;		fsr2l, fsr2h
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6843 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;Total ram usage:        3 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    7
  6850 ;; This function calls:
  6851 ;;		Nothing
  6852 ;; This function is called by:
  6853 ;;		_Port_Set
  6854 ;;		_I2C_Init
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           	psect	text13
  6859  0160BE                     __ptext13:
  6860                           	opt stack 0
  6861  0160BE                     _Byte_SetByte:
  6862                           	opt stack 20
  6863                           
  6864                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  6865                           
  6866                           ;incstack = 0
  6867  0160BE  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  6868  0160C2  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  6869  0160C6  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  6870  0160CA  0012               	return		;funcret
  6871  0160CC                     __end_of_Byte_SetByte:
  6872                           	opt stack 0
  6873                           tosu	equ	0xFFF
  6874                           tosh	equ	0xFFE
  6875                           tosl	equ	0xFFD
  6876                           pclath	equ	0xFFA
  6877                           tblptru	equ	0xFF8
  6878                           tblptrh	equ	0xFF7
  6879                           tblptrl	equ	0xFF6
  6880                           tablat	equ	0xFF5
  6881                           postinc0	equ	0xFEE
  6882                           wreg	equ	0xFE8
  6883                           postdec1	equ	0xFE5
  6884                           fsr1h	equ	0xFE2
  6885                           fsr1l	equ	0xFE1
  6886                           indf2	equ	0xFDF
  6887                           postinc2	equ	0xFDE
  6888                           postdec2	equ	0xFDD
  6889                           fsr2h	equ	0xFDA
  6890                           fsr2l	equ	0xFD9
  6891                           status	equ	0xFD8
  6892                           
  6893 ;; *************** function _GetPortTRIS *****************
  6894 ;; Defined at:
  6895 ;;		line 67 in file "Library/Port.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;  pInput          1    wreg     enum E6786
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;  pInput          1    2[BANK0 ] enum E6786
  6900 ;; Return value:  Size  Location     Type
  6901 ;;                  2    0[BANK0 ] PTR struct Byte
  6902 ;; Registers used:
  6903 ;;		wreg, status,2, status,0
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6909 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;Total ram usage:        3 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:    7
  6916 ;; This function calls:
  6917 ;;		Nothing
  6918 ;; This function is called by:
  6919 ;;		_Port_Init
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           	psect	text14
  6924  0146E2                     __ptext14:
  6925                           	opt stack 0
  6926  0146E2                     _GetPortTRIS:
  6927                           	opt stack 21
  6928                           
  6929                           ;incstack = 0
  6930                           ;GetPortTRIS@pInput stored from wreg
  6931  0146E2  0100               	movlb	0	; () banked
  6932  0146E4  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  6933                           
  6934                           ;Port.c: 69: switch (pInput)
  6935  0146E6  D029               	goto	l363
  6936  0146E8                     
  6937                           ;Port.c: 72: return (BytePtr)&TRISA;
  6938  0146E8  0E92               	movlw	146
  6939  0146EA  0100               	movlb	0	; () banked
  6940  0146EC  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6941  0146EE  0E0F               	movlw	15
  6942  0146F0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6943                           
  6944                           ; BSR set to: 0
  6945  0146F2  0012               	return	
  6946  0146F4                     
  6947                           ; BSR set to: 0
  6948                           ;Port.c: 74: return (BytePtr)&TRISB;
  6949                           
  6950                           ; BSR set to: 0
  6951  0146F4  0E93               	movlw	147
  6952  0146F6  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6953  0146F8  0E0F               	movlw	15
  6954  0146FA  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6955                           
  6956                           ; BSR set to: 0
  6957  0146FC  0012               	return	
  6958  0146FE                     
  6959                           ; BSR set to: 0
  6960                           ;Port.c: 76: return (BytePtr)&TRISC;
  6961                           
  6962                           ; BSR set to: 0
  6963  0146FE  0E94               	movlw	148
  6964  014700  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6965  014702  0E0F               	movlw	15
  6966  014704  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6967                           
  6968                           ; BSR set to: 0
  6969  014706  0012               	return	
  6970  014708                     
  6971                           ; BSR set to: 0
  6972                           ;Port.c: 78: return (BytePtr)&TRISD;
  6973                           
  6974                           ; BSR set to: 0
  6975  014708  0E95               	movlw	149
  6976  01470A  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6977  01470C  0E0F               	movlw	15
  6978  01470E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6979                           
  6980                           ; BSR set to: 0
  6981  014710  0012               	return	
  6982  014712                     
  6983                           ; BSR set to: 0
  6984                           ;Port.c: 80: return (BytePtr)&TRISE;
  6985                           
  6986                           ; BSR set to: 0
  6987  014712  0E96               	movlw	150
  6988  014714  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6989  014716  0E0F               	movlw	15
  6990  014718  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6991                           
  6992                           ; BSR set to: 0
  6993  01471A  0012               	return	
  6994  01471C                     
  6995                           ; BSR set to: 0
  6996                           ;Port.c: 82: return (BytePtr)&TRISF;
  6997                           
  6998                           ; BSR set to: 0
  6999  01471C  0E97               	movlw	151
  7000  01471E  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7001  014720  0E0F               	movlw	15
  7002  014722  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7003                           
  7004                           ; BSR set to: 0
  7005  014724  0012               	return	
  7006  014726                     
  7007                           ; BSR set to: 0
  7008                           ;Port.c: 84: return (BytePtr)&TRISG;
  7009                           
  7010                           ; BSR set to: 0
  7011  014726  0E98               	movlw	152
  7012  014728  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7013  01472A  0E0F               	movlw	15
  7014  01472C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7015                           
  7016                           ; BSR set to: 0
  7017  01472E  0012               	return	
  7018  014730                     
  7019                           ; BSR set to: 0
  7020                           ;Port.c: 86: return (void*)0;
  7021                           
  7022                           ; BSR set to: 0
  7023  014730  0E00               	movlw	0
  7024  014732  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7025  014734  0E00               	movlw	0
  7026  014736  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;Port.c: 87: }
  7030                           
  7031                           ; BSR set to: 0
  7032  014738  0012               	return	
  7033  01473A                     l363:
  7034                           
  7035                           ; BSR set to: 0
  7036  01473A  0100               	movlb	0	; () banked
  7037  01473C  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  7038                           
  7039                           ; Switch size 1, requested type "space"
  7040                           ; Number of cases is 7, Range of values is 0 to 6
  7041                           ; switch strategies available:
  7042                           ; Name         Instructions Cycles
  7043                           ; simple_byte           22    12 (average)
  7044                           ;	Chosen strategy is simple_byte
  7045  01473E  0A00               	xorlw	0	; case 0
  7046  014740  B4D8               	btfsc	status,2,c
  7047  014742  D7D2               	goto	l364
  7048  014744  0A01               	xorlw	1	; case 1
  7049  014746  B4D8               	btfsc	status,2,c
  7050  014748  D7D5               	goto	l366
  7051  01474A  0A03               	xorlw	3	; case 2
  7052  01474C  B4D8               	btfsc	status,2,c
  7053  01474E  D7D7               	goto	l367
  7054  014750  0A01               	xorlw	1	; case 3
  7055  014752  B4D8               	btfsc	status,2,c
  7056  014754  D7D9               	goto	l368
  7057  014756  0A07               	xorlw	7	; case 4
  7058  014758  B4D8               	btfsc	status,2,c
  7059  01475A  D7DB               	goto	l369
  7060  01475C  0A01               	xorlw	1	; case 5
  7061  01475E  B4D8               	btfsc	status,2,c
  7062  014760  D7DD               	goto	l370
  7063  014762  0A03               	xorlw	3	; case 6
  7064  014764  B4D8               	btfsc	status,2,c
  7065  014766  D7DF               	goto	l371
  7066  014768  D7E3               	goto	l372
  7067  01476A                     __end_of_GetPortTRIS:
  7068                           	opt stack 0
  7069                           tosu	equ	0xFFF
  7070                           tosh	equ	0xFFE
  7071                           tosl	equ	0xFFD
  7072                           pclath	equ	0xFFA
  7073                           tblptru	equ	0xFF8
  7074                           tblptrh	equ	0xFF7
  7075                           tblptrl	equ	0xFF6
  7076                           tablat	equ	0xFF5
  7077                           postinc0	equ	0xFEE
  7078                           wreg	equ	0xFE8
  7079                           postdec1	equ	0xFE5
  7080                           fsr1h	equ	0xFE2
  7081                           fsr1l	equ	0xFE1
  7082                           indf2	equ	0xFDF
  7083                           postinc2	equ	0xFDE
  7084                           postdec2	equ	0xFDD
  7085                           fsr2h	equ	0xFDA
  7086                           fsr2l	equ	0xFD9
  7087                           status	equ	0xFD8
  7088                           
  7089 ;; *************** function _GetPortProperties *****************
  7090 ;; Defined at:
  7091 ;;		line 21 in file "Library/Port.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  pInput          1    wreg     enum E6786
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;  pInput          1    2[BANK0 ] enum E6786
  7096 ;; Return value:  Size  Location     Type
  7097 ;;                  2    0[BANK0 ] PTR struct PortProperty
  7098 ;; Registers used:
  7099 ;;		wreg, status,2, status,0
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7108 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7109 ;;Total ram usage:        3 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; Hardware stack levels required when called:    7
  7112 ;; This function calls:
  7113 ;;		Nothing
  7114 ;; This function is called by:
  7115 ;;		_Port_Init
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text15
  7120  01476A                     __ptext15:
  7121                           	opt stack 0
  7122  01476A                     _GetPortProperties:
  7123                           	opt stack 21
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;incstack = 0
  7127                           ;GetPortProperties@pInput stored from wreg
  7128  01476A  0100               	movlb	0	; () banked
  7129  01476C  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  7130                           
  7131                           ;Port.c: 23: switch (pInput)
  7132  01476E  D029               	goto	l337
  7133  014770                     
  7134                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  7135  014770  0E9D               	movlw	low _PortA_Property
  7136  014772  0100               	movlb	0	; () banked
  7137  014774  6F60               	movwf	?_GetPortProperties& (0+255),b
  7138  014776  0EFE               	movlw	high _PortA_Property
  7139  014778  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7140                           
  7141                           ; BSR set to: 0
  7142  01477A  0012               	return	
  7143  01477C                     
  7144                           ; BSR set to: 0
  7145                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  7146                           
  7147                           ; BSR set to: 0
  7148  01477C  0E9B               	movlw	low _PortB_Property
  7149  01477E  6F60               	movwf	?_GetPortProperties& (0+255),b
  7150  014780  0EFE               	movlw	high _PortB_Property
  7151  014782  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7152                           
  7153                           ; BSR set to: 0
  7154  014784  0012               	return	
  7155  014786                     
  7156                           ; BSR set to: 0
  7157                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  7158                           
  7159                           ; BSR set to: 0
  7160  014786  0E99               	movlw	low _PortC_Property
  7161  014788  6F60               	movwf	?_GetPortProperties& (0+255),b
  7162  01478A  0EFE               	movlw	high _PortC_Property
  7163  01478C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7164                           
  7165                           ; BSR set to: 0
  7166  01478E  0012               	return	
  7167  014790                     
  7168                           ; BSR set to: 0
  7169                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  7170                           
  7171                           ; BSR set to: 0
  7172  014790  0E97               	movlw	low _PortD_Property
  7173  014792  6F60               	movwf	?_GetPortProperties& (0+255),b
  7174  014794  0EFE               	movlw	high _PortD_Property
  7175  014796  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7176                           
  7177                           ; BSR set to: 0
  7178  014798  0012               	return	
  7179  01479A                     
  7180                           ; BSR set to: 0
  7181                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  7182                           
  7183                           ; BSR set to: 0
  7184  01479A  0E95               	movlw	low _PortE_Property
  7185  01479C  6F60               	movwf	?_GetPortProperties& (0+255),b
  7186  01479E  0EFE               	movlw	high _PortE_Property
  7187  0147A0  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7188                           
  7189                           ; BSR set to: 0
  7190  0147A2  0012               	return	
  7191  0147A4                     
  7192                           ; BSR set to: 0
  7193                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  7194                           
  7195                           ; BSR set to: 0
  7196  0147A4  0E93               	movlw	low _PortF_Property
  7197  0147A6  6F60               	movwf	?_GetPortProperties& (0+255),b
  7198  0147A8  0EFE               	movlw	high _PortF_Property
  7199  0147AA  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7200                           
  7201                           ; BSR set to: 0
  7202  0147AC  0012               	return	
  7203  0147AE                     
  7204                           ; BSR set to: 0
  7205                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  7206                           
  7207                           ; BSR set to: 0
  7208  0147AE  0E91               	movlw	low _PortG_Property
  7209  0147B0  6F60               	movwf	?_GetPortProperties& (0+255),b
  7210  0147B2  0EFE               	movlw	high _PortG_Property
  7211  0147B4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7212                           
  7213                           ; BSR set to: 0
  7214  0147B6  0012               	return	
  7215  0147B8                     
  7216                           ; BSR set to: 0
  7217                           ;Port.c: 40: return (void*)0;
  7218                           
  7219                           ; BSR set to: 0
  7220  0147B8  0E00               	movlw	0
  7221  0147BA  6F60               	movwf	?_GetPortProperties& (0+255),b
  7222  0147BC  0E00               	movlw	0
  7223  0147BE  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;Port.c: 41: }
  7227                           
  7228                           ; BSR set to: 0
  7229  0147C0  0012               	return	
  7230  0147C2                     l337:
  7231                           
  7232                           ; BSR set to: 0
  7233  0147C2  0100               	movlb	0	; () banked
  7234  0147C4  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  7235                           
  7236                           ; Switch size 1, requested type "space"
  7237                           ; Number of cases is 7, Range of values is 0 to 6
  7238                           ; switch strategies available:
  7239                           ; Name         Instructions Cycles
  7240                           ; simple_byte           22    12 (average)
  7241                           ;	Chosen strategy is simple_byte
  7242  0147C6  0A00               	xorlw	0	; case 0
  7243  0147C8  B4D8               	btfsc	status,2,c
  7244  0147CA  D7D2               	goto	l338
  7245  0147CC  0A01               	xorlw	1	; case 1
  7246  0147CE  B4D8               	btfsc	status,2,c
  7247  0147D0  D7D5               	goto	l340
  7248  0147D2  0A03               	xorlw	3	; case 2
  7249  0147D4  B4D8               	btfsc	status,2,c
  7250  0147D6  D7D7               	goto	l341
  7251  0147D8  0A01               	xorlw	1	; case 3
  7252  0147DA  B4D8               	btfsc	status,2,c
  7253  0147DC  D7D9               	goto	l342
  7254  0147DE  0A07               	xorlw	7	; case 4
  7255  0147E0  B4D8               	btfsc	status,2,c
  7256  0147E2  D7DB               	goto	l343
  7257  0147E4  0A01               	xorlw	1	; case 5
  7258  0147E6  B4D8               	btfsc	status,2,c
  7259  0147E8  D7DD               	goto	l344
  7260  0147EA  0A03               	xorlw	3	; case 6
  7261  0147EC  B4D8               	btfsc	status,2,c
  7262  0147EE  D7DF               	goto	l345
  7263  0147F0  D7E3               	goto	l346
  7264  0147F2                     __end_of_GetPortProperties:
  7265                           	opt stack 0
  7266                           tosu	equ	0xFFF
  7267                           tosh	equ	0xFFE
  7268                           tosl	equ	0xFFD
  7269                           pclath	equ	0xFFA
  7270                           tblptru	equ	0xFF8
  7271                           tblptrh	equ	0xFF7
  7272                           tblptrl	equ	0xFF6
  7273                           tablat	equ	0xFF5
  7274                           postinc0	equ	0xFEE
  7275                           wreg	equ	0xFE8
  7276                           postdec1	equ	0xFE5
  7277                           fsr1h	equ	0xFE2
  7278                           fsr1l	equ	0xFE1
  7279                           indf2	equ	0xFDF
  7280                           postinc2	equ	0xFDE
  7281                           postdec2	equ	0xFDD
  7282                           fsr2h	equ	0xFDA
  7283                           fsr2l	equ	0xFD9
  7284                           status	equ	0xFD8
  7285                           
  7286 ;; *************** function _GetPortPORT *****************
  7287 ;; Defined at:
  7288 ;;		line 44 in file "Library/Port.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;  pInput          1    wreg     enum E6786
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;  pInput          1    2[BANK0 ] enum E6786
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  2    0[BANK0 ] PTR struct Byte
  7295 ;; Registers used:
  7296 ;;		wreg, status,2, status,0
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7302 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7306 ;;Total ram usage:        3 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; Hardware stack levels required when called:    7
  7309 ;; This function calls:
  7310 ;;		Nothing
  7311 ;; This function is called by:
  7312 ;;		_Port_Init
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           	psect	text16
  7317  0147F2                     __ptext16:
  7318                           	opt stack 0
  7319  0147F2                     _GetPortPORT:
  7320                           	opt stack 21
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;incstack = 0
  7324                           ;GetPortPORT@pInput stored from wreg
  7325  0147F2  0100               	movlb	0	; () banked
  7326  0147F4  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  7327                           
  7328                           ;Port.c: 46: switch (pInput)
  7329  0147F6  D029               	goto	l350
  7330  0147F8                     
  7331                           ;Port.c: 49: return (BytePtr)&PORTA;
  7332  0147F8  0E80               	movlw	128
  7333  0147FA  0100               	movlb	0	; () banked
  7334  0147FC  6F60               	movwf	?_GetPortPORT& (0+255),b
  7335  0147FE  0E0F               	movlw	15
  7336  014800  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7337                           
  7338                           ; BSR set to: 0
  7339  014802  0012               	return	
  7340  014804                     
  7341                           ; BSR set to: 0
  7342                           ;Port.c: 51: return (BytePtr)&PORTB;
  7343                           
  7344                           ; BSR set to: 0
  7345  014804  0E81               	movlw	129
  7346  014806  6F60               	movwf	?_GetPortPORT& (0+255),b
  7347  014808  0E0F               	movlw	15
  7348  01480A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7349                           
  7350                           ; BSR set to: 0
  7351  01480C  0012               	return	
  7352  01480E                     
  7353                           ; BSR set to: 0
  7354                           ;Port.c: 53: return (BytePtr)&PORTC;
  7355                           
  7356                           ; BSR set to: 0
  7357  01480E  0E82               	movlw	130
  7358  014810  6F60               	movwf	?_GetPortPORT& (0+255),b
  7359  014812  0E0F               	movlw	15
  7360  014814  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7361                           
  7362                           ; BSR set to: 0
  7363  014816  0012               	return	
  7364  014818                     
  7365                           ; BSR set to: 0
  7366                           ;Port.c: 55: return (BytePtr)&PORTD;
  7367                           
  7368                           ; BSR set to: 0
  7369  014818  0E83               	movlw	131
  7370  01481A  6F60               	movwf	?_GetPortPORT& (0+255),b
  7371  01481C  0E0F               	movlw	15
  7372  01481E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7373                           
  7374                           ; BSR set to: 0
  7375  014820  0012               	return	
  7376  014822                     
  7377                           ; BSR set to: 0
  7378                           ;Port.c: 57: return (BytePtr)&PORTE;
  7379                           
  7380                           ; BSR set to: 0
  7381  014822  0E84               	movlw	132
  7382  014824  6F60               	movwf	?_GetPortPORT& (0+255),b
  7383  014826  0E0F               	movlw	15
  7384  014828  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7385                           
  7386                           ; BSR set to: 0
  7387  01482A  0012               	return	
  7388  01482C                     
  7389                           ; BSR set to: 0
  7390                           ;Port.c: 59: return (BytePtr)&PORTF;
  7391                           
  7392                           ; BSR set to: 0
  7393  01482C  0E85               	movlw	133
  7394  01482E  6F60               	movwf	?_GetPortPORT& (0+255),b
  7395  014830  0E0F               	movlw	15
  7396  014832  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7397                           
  7398                           ; BSR set to: 0
  7399  014834  0012               	return	
  7400  014836                     
  7401                           ; BSR set to: 0
  7402                           ;Port.c: 61: return (BytePtr)&PORTG;
  7403                           
  7404                           ; BSR set to: 0
  7405  014836  0E86               	movlw	134
  7406  014838  6F60               	movwf	?_GetPortPORT& (0+255),b
  7407  01483A  0E0F               	movlw	15
  7408  01483C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7409                           
  7410                           ; BSR set to: 0
  7411  01483E  0012               	return	
  7412  014840                     
  7413                           ; BSR set to: 0
  7414                           ;Port.c: 63: return (void*)0;
  7415                           
  7416                           ; BSR set to: 0
  7417  014840  0E00               	movlw	0
  7418  014842  6F60               	movwf	?_GetPortPORT& (0+255),b
  7419  014844  0E00               	movlw	0
  7420  014846  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;Port.c: 64: }
  7424                           
  7425                           ; BSR set to: 0
  7426  014848  0012               	return	
  7427  01484A                     l350:
  7428                           
  7429                           ; BSR set to: 0
  7430  01484A  0100               	movlb	0	; () banked
  7431  01484C  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  7432                           
  7433                           ; Switch size 1, requested type "space"
  7434                           ; Number of cases is 7, Range of values is 0 to 6
  7435                           ; switch strategies available:
  7436                           ; Name         Instructions Cycles
  7437                           ; simple_byte           22    12 (average)
  7438                           ;	Chosen strategy is simple_byte
  7439  01484E  0A00               	xorlw	0	; case 0
  7440  014850  B4D8               	btfsc	status,2,c
  7441  014852  D7D2               	goto	l351
  7442  014854  0A01               	xorlw	1	; case 1
  7443  014856  B4D8               	btfsc	status,2,c
  7444  014858  D7D5               	goto	l353
  7445  01485A  0A03               	xorlw	3	; case 2
  7446  01485C  B4D8               	btfsc	status,2,c
  7447  01485E  D7D7               	goto	l354
  7448  014860  0A01               	xorlw	1	; case 3
  7449  014862  B4D8               	btfsc	status,2,c
  7450  014864  D7D9               	goto	l355
  7451  014866  0A07               	xorlw	7	; case 4
  7452  014868  B4D8               	btfsc	status,2,c
  7453  01486A  D7DB               	goto	l356
  7454  01486C  0A01               	xorlw	1	; case 5
  7455  01486E  B4D8               	btfsc	status,2,c
  7456  014870  D7DD               	goto	l357
  7457  014872  0A03               	xorlw	3	; case 6
  7458  014874  B4D8               	btfsc	status,2,c
  7459  014876  D7DF               	goto	l358
  7460  014878  D7E3               	goto	l359
  7461  01487A                     __end_of_GetPortPORT:
  7462                           	opt stack 0
  7463                           tosu	equ	0xFFF
  7464                           tosh	equ	0xFFE
  7465                           tosl	equ	0xFFD
  7466                           pclath	equ	0xFFA
  7467                           tblptru	equ	0xFF8
  7468                           tblptrh	equ	0xFF7
  7469                           tblptrl	equ	0xFF6
  7470                           tablat	equ	0xFF5
  7471                           postinc0	equ	0xFEE
  7472                           wreg	equ	0xFE8
  7473                           postdec1	equ	0xFE5
  7474                           fsr1h	equ	0xFE2
  7475                           fsr1l	equ	0xFE1
  7476                           indf2	equ	0xFDF
  7477                           postinc2	equ	0xFDE
  7478                           postdec2	equ	0xFDD
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function _LED_Init *****************
  7484 ;; Defined at:
  7485 ;;		line 15 in file "Library/LED.c"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;  pLED            1    wreg     enum E6739
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;  pLED            1   45[BANK0 ] enum E6739
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  1    wreg      void 
  7492 ;; Registers used:
  7493 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;Total ram usage:        1 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:   12
  7506 ;; This function calls:
  7507 ;;		_LED_Set
  7508 ;;		_Port_SetPinType
  7509 ;; This function is called by:
  7510 ;;		_MXK_Init
  7511 ;;		_main
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           	psect	text17
  7516  015284                     __ptext17:
  7517                           	opt stack 0
  7518  015284                     _LED_Init:
  7519                           	opt stack 17
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;incstack = 0
  7523                           ;LED_Init@pLED stored from wreg
  7524  015284  0100               	movlb	0	; () banked
  7525  015286  6F8D               	movwf	LED_Init@pLED& (0+255),b
  7526                           
  7527                           ;LED.c: 17: switch (pLED)
  7528  015288  D018               	goto	l220
  7529  01528A                     
  7530                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  7531  01528A  0EA7               	movlw	low _PortC
  7532  01528C  0100               	movlb	0	; () banked
  7533  01528E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7534  015290  0E01               	movlw	high _PortC
  7535  015292  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7536  015294  0E00               	movlw	0
  7537  015296  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7538  015298  0E03               	movlw	3
  7539  01529A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7540  01529C  EC42  F093         	call	_Port_SetPinType	;wreg free
  7541                           
  7542                           ;LED.c: 21: break;
  7543  0152A0  D014               	goto	l222
  7544  0152A2                     
  7545                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  7546  0152A2  0EA7               	movlw	low _PortC
  7547  0152A4  0100               	movlb	0	; () banked
  7548  0152A6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7549  0152A8  0E01               	movlw	high _PortC
  7550  0152AA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7551  0152AC  0E01               	movlw	1
  7552  0152AE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7553  0152B0  0E03               	movlw	3
  7554  0152B2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7555  0152B4  EC42  F093         	call	_Port_SetPinType	;wreg free
  7556                           
  7557                           ;LED.c: 25: }
  7558                           
  7559                           ;LED.c: 24: break;
  7560  0152B8  D008               	goto	l222
  7561  0152BA                     l220:
  7562  0152BA  0100               	movlb	0	; () banked
  7563  0152BC  518D               	movf	LED_Init@pLED& (0+255),w,b
  7564                           
  7565                           ; Switch size 1, requested type "space"
  7566                           ; Number of cases is 2, Range of values is 0 to 1
  7567                           ; switch strategies available:
  7568                           ; Name         Instructions Cycles
  7569                           ; simple_byte            7     4 (average)
  7570                           ;	Chosen strategy is simple_byte
  7571  0152BE  0A00               	xorlw	0	; case 0
  7572  0152C0  B4D8               	btfsc	status,2,c
  7573  0152C2  D7E3               	goto	l221
  7574  0152C4  0A01               	xorlw	1	; case 1
  7575  0152C6  B4D8               	btfsc	status,2,c
  7576  0152C8  D7EC               	goto	l223
  7577  0152CA                     l222:
  7578                           
  7579                           ;LED.c: 26: LED_Set(pLED, 0);
  7580                           
  7581                           ; BSR set to: 0
  7582  0152CA  0E00               	movlw	0
  7583  0152CC  0100               	movlb	0	; () banked
  7584  0152CE  6F74               	movwf	LED_Set@pValue& (0+255),b
  7585  0152D0  518D               	movf	LED_Init@pLED& (0+255),w,b
  7586  0152D2  EC4B  F0AB         	call	_LED_Set
  7587  0152D6  0012               	return		;funcret
  7588  0152D8                     __end_of_LED_Init:
  7589                           	opt stack 0
  7590                           tosu	equ	0xFFF
  7591                           tosh	equ	0xFFE
  7592                           tosl	equ	0xFFD
  7593                           pclath	equ	0xFFA
  7594                           tblptru	equ	0xFF8
  7595                           tblptrh	equ	0xFF7
  7596                           tblptrl	equ	0xFF6
  7597                           tablat	equ	0xFF5
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           postdec1	equ	0xFE5
  7601                           fsr1h	equ	0xFE2
  7602                           fsr1l	equ	0xFE1
  7603                           indf2	equ	0xFDF
  7604                           postinc2	equ	0xFDE
  7605                           postdec2	equ	0xFDD
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610 ;; *************** function _LED_Set *****************
  7611 ;; Defined at:
  7612 ;;		line 33 in file "Library/LED.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  pLED            1    wreg     enum E6739
  7615 ;;  pValue          1   20[BANK0 ] unsigned char 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;  pLED            1   21[BANK0 ] enum E6739
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  1    wreg      void 
  7620 ;; Registers used:
  7621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7627 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;Total ram usage:        2 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:   11
  7634 ;; This function calls:
  7635 ;;		_Port_SetPin
  7636 ;; This function is called by:
  7637 ;;		_LED_Init
  7638 ;;		_main
  7639 ;;		_SYSTEM_Initialize
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           	psect	text18
  7644  015696                     __ptext18:
  7645                           	opt stack 0
  7646  015696                     _LED_Set:
  7647                           	opt stack 17
  7648                           
  7649                           ;incstack = 0
  7650                           ;LED_Set@pLED stored from wreg
  7651  015696  0100               	movlb	0	; () banked
  7652  015698  6F75               	movwf	LED_Set@pLED& (0+255),b
  7653                           
  7654                           ;LED.c: 35: switch (pLED)
  7655  01569A  D018               	goto	l227
  7656  01569C                     
  7657                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  7658  01569C  0EA7               	movlw	low _PortC
  7659  01569E  0100               	movlb	0	; () banked
  7660  0156A0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7661  0156A2  0E01               	movlw	high _PortC
  7662  0156A4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7663  0156A6  0E00               	movlw	0
  7664  0156A8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7665  0156AA  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7666  0156AE  ECB7  F09F         	call	_Port_SetPin	;wreg free
  7667                           
  7668                           ;LED.c: 39: break;
  7669  0156B2  0012               	return	
  7670  0156B4                     
  7671                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  7672  0156B4  0EA7               	movlw	low _PortC
  7673  0156B6  0100               	movlb	0	; () banked
  7674  0156B8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7675  0156BA  0E01               	movlw	high _PortC
  7676  0156BC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7677  0156BE  0E01               	movlw	1
  7678  0156C0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7679  0156C2  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7680  0156C6  ECB7  F09F         	call	_Port_SetPin	;wreg free
  7681                           
  7682                           ;LED.c: 43: }
  7683                           
  7684                           ;LED.c: 42: break;
  7685  0156CA  0012               	return	
  7686  0156CC                     l227:
  7687  0156CC  0100               	movlb	0	; () banked
  7688  0156CE  5175               	movf	LED_Set@pLED& (0+255),w,b
  7689                           
  7690                           ; Switch size 1, requested type "space"
  7691                           ; Number of cases is 2, Range of values is 0 to 1
  7692                           ; switch strategies available:
  7693                           ; Name         Instructions Cycles
  7694                           ; simple_byte            7     4 (average)
  7695                           ;	Chosen strategy is simple_byte
  7696  0156D0  0A00               	xorlw	0	; case 0
  7697  0156D2  B4D8               	btfsc	status,2,c
  7698  0156D4  D7E3               	goto	l228
  7699  0156D6  0A01               	xorlw	1	; case 1
  7700  0156D8  A4D8               	btfss	status,2,c
  7701  0156DA  0012               	return	
  7702  0156DC  D7EB               	goto	l230
  7703  0156DE                     __end_of_LED_Set:
  7704                           	opt stack 0
  7705                           tosu	equ	0xFFF
  7706                           tosh	equ	0xFFE
  7707                           tosl	equ	0xFFD
  7708                           pclath	equ	0xFFA
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           postinc0	equ	0xFEE
  7714                           wreg	equ	0xFE8
  7715                           postdec1	equ	0xFE5
  7716                           fsr1h	equ	0xFE2
  7717                           fsr1l	equ	0xFE1
  7718                           indf2	equ	0xFDF
  7719                           postinc2	equ	0xFDE
  7720                           postdec2	equ	0xFDD
  7721                           fsr2h	equ	0xFDA
  7722                           fsr2l	equ	0xFD9
  7723                           status	equ	0xFD8
  7724                           
  7725 ;; *************** function _MXK_Dequeue *****************
  7726 ;; Defined at:
  7727 ;;		line 153 in file "Library/MXK.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  1    wreg      void 
  7734 ;; Registers used:
  7735 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;Total ram usage:        0 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:   12
  7748 ;; This function calls:
  7749 ;;		Absolute function
  7750 ;;		_Motor_Step
  7751 ;; This function is called by:
  7752 ;;		_main
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           	psect	text19
  7757  015B0A                     __ptext19:
  7758                           	opt stack 0
  7759  015B0A                     _MXK_Dequeue:
  7760                           	opt stack 18
  7761                           
  7762                           ;MXK.c: 155: if (lQueue)
  7763                           
  7764                           ;incstack = 0
  7765  015B0A  0100               	movlb	0	; () banked
  7766  015B0C  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  7767  015B0E  11E7               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  7768  015B10  11E8               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  7769  015B12  B4D8               	btfsc	status,2,c
  7770  015B14  D00C               	goto	u14389
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;MXK.c: 156: lQueue();
  7774  015B16  D801               	call	u14388
  7775  015B18  D00A               	goto	u14389
  7776  015B1A                     u14388:
  7777  015B1A  0005               	push	
  7778  015B1C  6EFA               	movwf	pclath,c
  7779  015B1E  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  7780  015B20  6EFD               	movwf	tosl,c
  7781  015B22  51E7               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  7782  015B24  6EFE               	movwf	tosh,c
  7783  015B26  51E8               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  7784  015B28  6EFF               	movwf	tosu,c
  7785  015B2A  50FA               	movf	pclath,w,c
  7786  015B2C  0012               	return		;indir
  7787  015B2E                     u14389:
  7788                           
  7789                           ;MXK.c: 157: lQueue = 0;
  7790  015B2E  0E00               	movlw	0
  7791  015B30  0100               	movlb	0	; () banked
  7792  015B32  6FE6               	movwf	_lQueue& (0+255),b	;volatile
  7793  015B34  0E00               	movlw	0
  7794  015B36  6FE7               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7795  015B38  0E00               	movlw	0
  7796  015B3A  6FE8               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7797                           
  7798                           ; BSR set to: 0
  7799  015B3C  0012               	return		;funcret
  7800  015B3E                     __end_of_MXK_Dequeue:
  7801                           	opt stack 0
  7802                           tosu	equ	0xFFF
  7803                           tosh	equ	0xFFE
  7804                           tosl	equ	0xFFD
  7805                           pclath	equ	0xFFA
  7806                           tblptru	equ	0xFF8
  7807                           tblptrh	equ	0xFF7
  7808                           tblptrl	equ	0xFF6
  7809                           tablat	equ	0xFF5
  7810                           postinc0	equ	0xFEE
  7811                           wreg	equ	0xFE8
  7812                           postdec1	equ	0xFE5
  7813                           fsr1h	equ	0xFE2
  7814                           fsr1l	equ	0xFE1
  7815                           indf2	equ	0xFDF
  7816                           postinc2	equ	0xFDE
  7817                           postdec2	equ	0xFDD
  7818                           fsr2h	equ	0xFDA
  7819                           fsr2l	equ	0xFD9
  7820                           status	equ	0xFD8
  7821                           
  7822 ;; *************** function _Motor_Step *****************
  7823 ;; Defined at:
  7824 ;;		line 75 in file "Library/Motor.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;		None
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;		None
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  1    wreg      void 
  7831 ;; Registers used:
  7832 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7841 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;Total ram usage:        2 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:   11
  7845 ;; This function calls:
  7846 ;;		_MXK_Queue
  7847 ;;		_MXK_Release
  7848 ;;		_MXK_SwitchTo
  7849 ;;		_Port_SetPin
  7850 ;;		_Timer0_Restart
  7851 ;;		_Timer0_Stop
  7852 ;; This function is called by:
  7853 ;;		_Motor_Init
  7854 ;;		_Timer0_ISR
  7855 ;;		_MXK_Dequeue
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           	psect	text20
  7860  0138D8                     __ptext20:
  7861                           	opt stack 0
  7862  0138D8                     _Motor_Step:
  7863                           	opt stack 0
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;Skip over the trampoline to the duplicate function for level 2
  7867  0138D8  B251               	btfsc	btemp,1,c
  7868  0138DA  EFF7  F09D         	goto	i2_Motor_Step
  7869  0138DE                     _Motor_Step$intlevel0:
  7870                           	opt stack 18
  7871                           
  7872                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  7873                           
  7874                           ;incstack = 0
  7875  0138DE  0100               	movlb	0	; () banked
  7876  0138E0  EE20 F004          	lfsr	2,4
  7877  0138E4  51EF               	movf	_lMotor& (0+255),w,b
  7878  0138E6  26D9               	addwf	fsr2l,f,c
  7879  0138E8  51F0               	movf	(_lMotor+1)& (0+255),w,b
  7880  0138EA  22DA               	addwfc	fsr2h,f,c
  7881  0138EC  50DF               	movf	indf2,w,c
  7882  0138EE  ECDC  F0AC         	call	_MXK_SwitchTo
  7883  0138F2  0900               	iorlw	0
  7884  0138F4  B4D8               	btfsc	status,2,c
  7885  0138F6  D06E               	goto	l1627
  7886                           
  7887                           ;Motor.c: 78: {
  7888                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  7889  0138F8  C0EF  FFD9         	movff	_lMotor,fsr2l
  7890  0138FC  C0F0  FFDA         	movff	_lMotor+1,fsr2h
  7891  013900  50DE               	movf	postinc2,w,c
  7892  013902  10DE               	iorwf	postinc2,w,c
  7893  013904  B4D8               	btfsc	status,2,c
  7894  013906  D061               	goto	l1628
  7895                           
  7896                           ;Motor.c: 80: {
  7897                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  7898  013908  C0EF  FFD9         	movff	_lMotor,fsr2l
  7899  01390C  C0F0  FFDA         	movff	_lMotor+1,fsr2h
  7900  013910  0E01               	movlw	1
  7901  013912  BEDB               	btfsc	plusw2,7,c
  7902  013914  D023               	goto	l1629
  7903  013916  0E01               	movlw	1
  7904  013918  50DB               	movf	plusw2,w,c
  7905  01391A  E103               	bnz	u12270
  7906  01391C  04DE               	decf	postinc2,w,c
  7907  01391E  A0D8               	btfss	status,0,c
  7908  013920  D01D               	goto	l1629
  7909  013922                     u12270:
  7910                           
  7911                           ;Motor.c: 83: {
  7912                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  7913  013922  C0EF  FFD9         	movff	_lMotor,fsr2l
  7914  013926  C0F0  FFDA         	movff	_lMotor+1,fsr2h
  7915  01392A  28DE               	incf	postinc2,w,c
  7916  01392C  E104               	bnz	u12280
  7917  01392E  0E7F               	movlw	127
  7918  013930  18DE               	xorwf	postinc2,w,c
  7919  013932  B4D8               	btfsc	status,2,c
  7920  013934  D007               	goto	l1630
  7921  013936                     u12280:
  7922                           
  7923                           ;Motor.c: 85: lMotor->mDelta --;
  7924  013936  C0EF  FFD9         	movff	_lMotor,fsr2l
  7925  01393A  C0F0  FFDA         	movff	_lMotor+1,fsr2h
  7926  01393E  06DE               	decf	postinc2,f,c
  7927  013940  0E00               	movlw	0
  7928  013942  5ADD               	subwfb	postdec2,f,c
  7929  013944                     l1630:
  7930                           
  7931                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  7932  013944  0E89               	movlw	low _PortE
  7933  013946  0100               	movlb	0	; () banked
  7934  013948  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7935  01394A  0E01               	movlw	high _PortE
  7936  01394C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7937  01394E  0E00               	movlw	0
  7938  013950  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7939  013952  0E01               	movlw	1
  7940  013954  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7941  013956  ECB7  F09F         	call	_Port_SetPin	;wreg free
  7942                           
  7943                           ;Motor.c: 88: }
  7944  01395A  D01C               	goto	l1631
  7945  01395C                     l1629:
  7946                           
  7947                           ;Motor.c: 89: else
  7948                           ;Motor.c: 90: {
  7949                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  7950  01395C  C0EF  FFD9         	movff	_lMotor,fsr2l
  7951  013960  C0F0  FFDA         	movff	_lMotor+1,fsr2h
  7952  013964  04DE               	decf	postinc2,w,c
  7953  013966  E104               	bnz	u12290
  7954  013968  0E80               	movlw	128
  7955  01396A  18DE               	xorwf	postinc2,w,c
  7956  01396C  B4D8               	btfsc	status,2,c
  7957  01396E  D007               	goto	l1632
  7958  013970                     u12290:
  7959                           
  7960                           ;Motor.c: 92: lMotor->mDelta ++;
  7961  013970  C0EF  FFD9         	movff	_lMotor,fsr2l
  7962  013974  C0F0  FFDA         	movff	_lMotor+1,fsr2h
  7963  013978  2ADE               	incf	postinc2,f,c
  7964  01397A  0E00               	movlw	0
  7965  01397C  22DD               	addwfc	postdec2,f,c
  7966  01397E                     l1632:
  7967                           
  7968                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  7969  01397E  0E89               	movlw	low _PortE
  7970  013980  0100               	movlb	0	; () banked
  7971  013982  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7972  013984  0E01               	movlw	high _PortE
  7973  013986  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7974  013988  0E00               	movlw	0
  7975  01398A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7976  01398C  0E00               	movlw	0
  7977  01398E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7978  013990  ECB7  F09F         	call	_Port_SetPin	;wreg free
  7979  013994                     l1631:
  7980                           
  7981                           ;Motor.c: 95: }
  7982                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  7983  013994  0E89               	movlw	low _PortE
  7984  013996  0100               	movlb	0	; () banked
  7985  013998  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7986  01399A  0E01               	movlw	high _PortE
  7987  01399C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7988  01399E  0E01               	movlw	1
  7989  0139A0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7990  0139A2  0E01               	movlw	1
  7991  0139A4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7992  0139A6  ECB7  F09F         	call	_Port_SetPin	;wreg free
  7993                           
  7994                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  7995  0139AA  0E89               	movlw	low _PortE
  7996  0139AC  0100               	movlb	0	; () banked
  7997  0139AE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7998  0139B0  0E01               	movlw	high _PortE
  7999  0139B2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8000  0139B4  0E01               	movlw	1
  8001  0139B6  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  8002  0139B8  0E00               	movlw	0
  8003  0139BA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  8004  0139BC  ECB7  F09F         	call	_Port_SetPin	;wreg free
  8005                           
  8006                           ;Motor.c: 101: MXK_Release();
  8007  0139C0  EC8C  F0AF         	call	_MXK_Release	;wreg free
  8008                           
  8009                           ;Motor.c: 102: Timer0_Restart();
  8010  0139C4  EC88  F0B0         	call	_Timer0_Restart	;wreg free
  8011                           
  8012                           ;Motor.c: 103: return;
  8013  0139C8  0012               	return	
  8014  0139CA                     l1628:
  8015                           
  8016                           ;Motor.c: 104: }
  8017                           ;Motor.c: 105: MXK_Release();
  8018  0139CA  EC8C  F0AF         	call	_MXK_Release	;wreg free
  8019                           
  8020                           ;Motor.c: 106: Timer0_Stop();
  8021  0139CE  ECA2  F0B0         	call	_Timer0_Stop	;wreg free
  8022                           
  8023                           ;Motor.c: 107: return;
  8024  0139D2  0012               	return	
  8025  0139D4                     l1627:
  8026                           
  8027                           ;Motor.c: 108: }
  8028                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  8029  0139D4  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
  8030  0139D8  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  8031  0139DC  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  8032  0139E0  EC66  F0B0         	call	_MXK_Queue	;wreg free
  8033  0139E4  0012               	return		;funcret
  8034  0139E6                     __end_of_Motor_Step:
  8035                           	opt stack 0
  8036                           tosu	equ	0xFFF
  8037                           tosh	equ	0xFFE
  8038                           tosl	equ	0xFFD
  8039                           pclath	equ	0xFFA
  8040                           tblptru	equ	0xFF8
  8041                           tblptrh	equ	0xFF7
  8042                           tblptrl	equ	0xFF6
  8043                           tablat	equ	0xFF5
  8044                           postinc0	equ	0xFEE
  8045                           wreg	equ	0xFE8
  8046                           postdec1	equ	0xFE5
  8047                           fsr1h	equ	0xFE2
  8048                           fsr1l	equ	0xFE1
  8049                           indf2	equ	0xFDF
  8050                           postinc2	equ	0xFDE
  8051                           postdec2	equ	0xFDD
  8052                           plusw2	equ	0xFDB
  8053                           fsr2h	equ	0xFDA
  8054                           fsr2l	equ	0xFD9
  8055                           status	equ	0xFD8
  8056                           
  8057 ;; *************** function _Timer0_Stop *****************
  8058 ;; Defined at:
  8059 ;;		line 89 in file "Library/Timer0.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;		None
  8062 ;; Auto vars:     Size  Location     Type
  8063 ;;		None
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  1    wreg      void 
  8066 ;; Registers used:
  8067 ;;		None
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;Total ram usage:        0 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; Hardware stack levels required when called:    7
  8080 ;; This function calls:
  8081 ;;		Nothing
  8082 ;; This function is called by:
  8083 ;;		_Motor_Step
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text21
  8088  016144                     __ptext21:
  8089                           	opt stack 0
  8090  016144                     _Timer0_Stop:
  8091                           	opt stack 21
  8092                           
  8093                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  8094                           
  8095                           ;incstack = 0
  8096  016144  9AF2               	bcf	intcon,5,c	;volatile
  8097                           
  8098                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  8099  016146  94F2               	bcf	intcon,2,c	;volatile
  8100  016148  0012               	return		;funcret
  8101  01614A                     __end_of_Timer0_Stop:
  8102                           	opt stack 0
  8103                           tosu	equ	0xFFF
  8104                           tosh	equ	0xFFE
  8105                           tosl	equ	0xFFD
  8106                           pclath	equ	0xFFA
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           intcon	equ	0xFF2
  8112                           postinc0	equ	0xFEE
  8113                           wreg	equ	0xFE8
  8114                           postdec1	equ	0xFE5
  8115                           fsr1h	equ	0xFE2
  8116                           fsr1l	equ	0xFE1
  8117                           indf2	equ	0xFDF
  8118                           postinc2	equ	0xFDE
  8119                           postdec2	equ	0xFDD
  8120                           plusw2	equ	0xFDB
  8121                           fsr2h	equ	0xFDA
  8122                           fsr2l	equ	0xFD9
  8123                           status	equ	0xFD8
  8124                           
  8125 ;; *************** function _Timer0_Restart *****************
  8126 ;; Defined at:
  8127 ;;		line 83 in file "Library/Timer0.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;		None
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      void 
  8134 ;; Registers used:
  8135 ;;		None
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;Total ram usage:        0 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    7
  8148 ;; This function calls:
  8149 ;;		Nothing
  8150 ;; This function is called by:
  8151 ;;		_Motor_Step
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text22
  8156  016110                     __ptext22:
  8157                           	opt stack 0
  8158  016110                     _Timer0_Restart:
  8159                           	opt stack 21
  8160                           
  8161                           ;Timer0.c: 85: TMR0 = COUNTER;
  8162                           
  8163                           ;incstack = 0
  8164  016110  C035  FFD6         	movff	_COUNTER,4054	;volatile
  8165  016114  C036  FFD7         	movff	_COUNTER+1,4055	;volatile
  8166                           
  8167                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  8168  016118  8AF2               	bsf	intcon,5,c	;volatile
  8169  01611A  0012               	return		;funcret
  8170  01611C                     __end_of_Timer0_Restart:
  8171                           	opt stack 0
  8172                           tosu	equ	0xFFF
  8173                           tosh	equ	0xFFE
  8174                           tosl	equ	0xFFD
  8175                           pclath	equ	0xFFA
  8176                           tblptru	equ	0xFF8
  8177                           tblptrh	equ	0xFF7
  8178                           tblptrl	equ	0xFF6
  8179                           tablat	equ	0xFF5
  8180                           intcon	equ	0xFF2
  8181                           postinc0	equ	0xFEE
  8182                           wreg	equ	0xFE8
  8183                           postdec1	equ	0xFE5
  8184                           fsr1h	equ	0xFE2
  8185                           fsr1l	equ	0xFE1
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           plusw2	equ	0xFDB
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _MXK_SwitchTo *****************
  8195 ;; Defined at:
  8196 ;;		line 105 in file "Library/MXK.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;  pModule         1    wreg     enum E6927
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  pModule         1    7[BANK0 ] enum E6927
  8201 ;;  CUR             1    6[BANK0 ] unsigned char 
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  1    wreg      unsigned char 
  8204 ;; Registers used:
  8205 ;;		wreg, status,2, status,0, cstack
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8215 ;;Total ram usage:        2 bytes
  8216 ;; Hardware stack levels used:    1
  8217 ;; Hardware stack levels required when called:    8
  8218 ;; This function calls:
  8219 ;;		_delay_us
  8220 ;; This function is called by:
  8221 ;;		_Motor_Step
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           	psect	text23
  8226  0159B8                     __ptext23:
  8227                           	opt stack 0
  8228  0159B8                     _MXK_SwitchTo:
  8229                           	opt stack 20
  8230                           
  8231                           ;incstack = 0
  8232                           ;MXK_SwitchTo@pModule stored from wreg
  8233  0159B8  0100               	movlb	0	; () banked
  8234  0159BA  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
  8235                           
  8236                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  8237  0159BC  5086               	movf	3974,w,c	;volatile
  8238  0159BE  0B0F               	andlw	15
  8239  0159C0  0100               	movlb	0	; () banked
  8240  0159C2  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  8244  0159C4  504D               	movf	_Bus_State,w,c
  8245  0159C6  A4D8               	btfss	status,2,c
  8246  0159C8  D002               	goto	l1730
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;MXK.c: 110: return 0;
  8250  0159CA  0E00               	movlw	0
  8251                           
  8252                           ; BSR set to: 0
  8253  0159CC  0012               	return	
  8254  0159CE                     l1730:
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  8258                           
  8259                           ; BSR set to: 0
  8260  0159CE  0E00               	movlw	0
  8261  0159D0  6E4D               	movwf	_Bus_State,c
  8262                           
  8263                           ; BSR set to: 0
  8264                           ;MXK.c: 114: if (CUR != pModule)
  8265  0159D2  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8266  0159D4  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  8267  0159D6  B4D8               	btfsc	status,2,c
  8268  0159D8  D00A               	goto	l1732
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;MXK.c: 115: {
  8272                           ;MXK.c: 116: PORTG &= ~(0xF);
  8273  0159DA  0EF0               	movlw	240
  8274  0159DC  1686               	andwf	3974,f,c	;volatile
  8275                           
  8276                           ;MXK.c: 117: PORTG |= pModule;
  8277  0159DE  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8278  0159E0  1286               	iorwf	3974,f,c	;volatile
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;MXK.c: 120: delay_us(10);
  8282  0159E2  0E00               	movlw	0
  8283  0159E4  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8284  0159E6  0E0A               	movlw	10
  8285  0159E8  6F60               	movwf	delay_us@us& (0+255),b
  8286  0159EA  ECDB  F0AB         	call	_delay_us	;wreg free
  8287  0159EE                     l1732:
  8288                           
  8289                           ;MXK.c: 121: }
  8290                           ;MXK.c: 122: return 1;
  8291  0159EE  0E01               	movlw	1
  8292  0159F0  0012               	return	
  8293  0159F2                     __end_of_MXK_SwitchTo:
  8294                           	opt stack 0
  8295                           tosu	equ	0xFFF
  8296                           tosh	equ	0xFFE
  8297                           tosl	equ	0xFFD
  8298                           pclath	equ	0xFFA
  8299                           tblptru	equ	0xFF8
  8300                           tblptrh	equ	0xFF7
  8301                           tblptrl	equ	0xFF6
  8302                           tablat	equ	0xFF5
  8303                           intcon	equ	0xFF2
  8304                           postinc0	equ	0xFEE
  8305                           wreg	equ	0xFE8
  8306                           postdec1	equ	0xFE5
  8307                           fsr1h	equ	0xFE2
  8308                           fsr1l	equ	0xFE1
  8309                           indf2	equ	0xFDF
  8310                           postinc2	equ	0xFDE
  8311                           postdec2	equ	0xFDD
  8312                           plusw2	equ	0xFDB
  8313                           fsr2h	equ	0xFDA
  8314                           fsr2l	equ	0xFD9
  8315                           status	equ	0xFD8
  8316                           
  8317 ;; *************** function _MXK_Release *****************
  8318 ;; Defined at:
  8319 ;;		line 130 in file "Library/MXK.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;		None
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;		None
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      unsigned char 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8337 ;;Total ram usage:        0 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    7
  8340 ;; This function calls:
  8341 ;;		Nothing
  8342 ;; This function is called by:
  8343 ;;		_Motor_Step
  8344 ;;		_main
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           	psect	text24
  8349  015F18                     __ptext24:
  8350                           	opt stack 0
  8351  015F18                     _MXK_Release:
  8352                           	opt stack 23
  8353                           
  8354                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8355                           
  8356                           ;incstack = 0
  8357  015F18  0E01               	movlw	1
  8358  015F1A  6E4D               	movwf	_Bus_State,c
  8359                           
  8360                           ;MXK.c: 134: if (lQueue != 0)
  8361  015F1C  0100               	movlb	0	; () banked
  8362  015F1E  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  8363  015F20  11E7               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  8364  015F22  11E8               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  8365  015F24  B4D8               	btfsc	status,2,c
  8366  015F26  D002               	goto	l1735
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;MXK.c: 135: return 1;
  8370  015F28  0E01               	movlw	1
  8371                           
  8372                           ; BSR set to: 0
  8373  015F2A  0012               	return	
  8374  015F2C                     l1735:
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;MXK.c: 137: return 0;
  8378                           
  8379                           ; BSR set to: 0
  8380  015F2C  0E00               	movlw	0
  8381  015F2E  0012               	return	
  8382  015F30                     __end_of_MXK_Release:
  8383                           	opt stack 0
  8384                           tosu	equ	0xFFF
  8385                           tosh	equ	0xFFE
  8386                           tosl	equ	0xFFD
  8387                           pclath	equ	0xFFA
  8388                           tblptru	equ	0xFF8
  8389                           tblptrh	equ	0xFF7
  8390                           tblptrl	equ	0xFF6
  8391                           tablat	equ	0xFF5
  8392                           intcon	equ	0xFF2
  8393                           postinc0	equ	0xFEE
  8394                           wreg	equ	0xFE8
  8395                           postdec1	equ	0xFE5
  8396                           fsr1h	equ	0xFE2
  8397                           fsr1l	equ	0xFE1
  8398                           indf2	equ	0xFDF
  8399                           postinc2	equ	0xFDE
  8400                           postdec2	equ	0xFDD
  8401                           plusw2	equ	0xFDB
  8402                           fsr2h	equ	0xFDA
  8403                           fsr2l	equ	0xFD9
  8404                           status	equ	0xFD8
  8405                           
  8406 ;; *************** function _MXK_Queue *****************
  8407 ;; Defined at:
  8408 ;;		line 144 in file "Library/MXK.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8411 ;;		 -> Absolute function(1), Motor_Step(1), 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;		None
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      void 
  8416 ;; Registers used:
  8417 ;;		wreg, status,2, status,0
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8423 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;Total ram usage:        3 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    7
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_Motor_Step
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           	psect	text25
  8438  0160CC                     __ptext25:
  8439                           	opt stack 0
  8440  0160CC                     _MXK_Queue:
  8441                           	opt stack 21
  8442                           
  8443                           ;MXK.c: 146: lQueue = pCallback;
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;incstack = 0
  8447  0160CC  C060  F0E6         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8448  0160D0  C061  F0E7         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8449  0160D4  C062  F0E8         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8450  0160D8  0012               	return		;funcret
  8451  0160DA                     __end_of_MXK_Queue:
  8452                           	opt stack 0
  8453                           tosu	equ	0xFFF
  8454                           tosh	equ	0xFFE
  8455                           tosl	equ	0xFFD
  8456                           pclath	equ	0xFFA
  8457                           tblptru	equ	0xFF8
  8458                           tblptrh	equ	0xFF7
  8459                           tblptrl	equ	0xFF6
  8460                           tablat	equ	0xFF5
  8461                           intcon	equ	0xFF2
  8462                           postinc0	equ	0xFEE
  8463                           wreg	equ	0xFE8
  8464                           postdec1	equ	0xFE5
  8465                           fsr1h	equ	0xFE2
  8466                           fsr1l	equ	0xFE1
  8467                           indf2	equ	0xFDF
  8468                           postinc2	equ	0xFDE
  8469                           postdec2	equ	0xFDD
  8470                           plusw2	equ	0xFDB
  8471                           fsr2h	equ	0xFDA
  8472                           fsr2l	equ	0xFD9
  8473                           status	equ	0xFD8
  8474                           
  8475 ;; *************** function _MXK_BlockSwitchTo *****************
  8476 ;; Defined at:
  8477 ;;		line 82 in file "Library/MXK.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;  pModule         1    wreg     enum E6927
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  pModule         1    7[BANK0 ] enum E6927
  8482 ;;  CUR             1    6[BANK0 ] unsigned char 
  8483 ;; Return value:  Size  Location     Type
  8484 ;;                  1    wreg      unsigned char 
  8485 ;; Registers used:
  8486 ;;		wreg, status,2, status,0, cstack
  8487 ;; Tracked objects:
  8488 ;;		On entry : 0/0
  8489 ;;		On exit  : 0/0
  8490 ;;		Unchanged: 0/0
  8491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;Total ram usage:        2 bytes
  8497 ;; Hardware stack levels used:    1
  8498 ;; Hardware stack levels required when called:    8
  8499 ;; This function calls:
  8500 ;;		_delay_us
  8501 ;; This function is called by:
  8502 ;;		_main
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           	psect	text26
  8507  015A66                     __ptext26:
  8508                           	opt stack 0
  8509  015A66                     _MXK_BlockSwitchTo:
  8510                           	opt stack 22
  8511                           
  8512                           ;incstack = 0
  8513                           ;MXK_BlockSwitchTo@pModule stored from wreg
  8514  015A66  0100               	movlb	0	; () banked
  8515  015A68  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  8516                           
  8517                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  8518  015A6A  5086               	movf	3974,w,c	;volatile
  8519  015A6C  0B0F               	andlw	15
  8520  015A6E  0100               	movlb	0	; () banked
  8521  015A70  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  8522  015A72                     
  8523                           ; BSR set to: 0
  8524                           
  8525                           ; BSR set to: 0
  8526  015A72  504D               	movf	_Bus_State,w,c
  8527  015A74  B4D8               	btfsc	status,2,c
  8528  015A76  D7FD               	goto	l1724
  8529                           
  8530                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  8531  015A78  0E00               	movlw	0
  8532  015A7A  6E4D               	movwf	_Bus_State,c
  8533                           
  8534                           ;MXK.c: 90: if (CUR != pModule)
  8535  015A7C  0100               	movlb	0	; () banked
  8536  015A7E  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8537  015A80  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  8538  015A82  B4D8               	btfsc	status,2,c
  8539  015A84  D00A               	goto	l1726
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;MXK.c: 91: {
  8543                           ;MXK.c: 92: PORTG &= ~(0xF);
  8544  015A86  0EF0               	movlw	240
  8545  015A88  1686               	andwf	3974,f,c	;volatile
  8546                           
  8547                           ;MXK.c: 93: PORTG |= pModule;
  8548  015A8A  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8549  015A8C  1286               	iorwf	3974,f,c	;volatile
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;MXK.c: 96: delay_us(10);
  8553  015A8E  0E00               	movlw	0
  8554  015A90  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8555  015A92  0E0A               	movlw	10
  8556  015A94  6F60               	movwf	delay_us@us& (0+255),b
  8557  015A96  ECDB  F0AB         	call	_delay_us	;wreg free
  8558  015A9A                     l1726:
  8559                           
  8560                           ;MXK.c: 97: }
  8561                           ;MXK.c: 98: return 1;
  8562  015A9A  0E01               	movlw	1
  8563  015A9C  0012               	return	
  8564  015A9E                     __end_of_MXK_BlockSwitchTo:
  8565                           	opt stack 0
  8566                           tosu	equ	0xFFF
  8567                           tosh	equ	0xFFE
  8568                           tosl	equ	0xFFD
  8569                           pclath	equ	0xFFA
  8570                           tblptru	equ	0xFF8
  8571                           tblptrh	equ	0xFF7
  8572                           tblptrl	equ	0xFF6
  8573                           tablat	equ	0xFF5
  8574                           intcon	equ	0xFF2
  8575                           postinc0	equ	0xFEE
  8576                           wreg	equ	0xFE8
  8577                           postdec1	equ	0xFE5
  8578                           fsr1h	equ	0xFE2
  8579                           fsr1l	equ	0xFE1
  8580                           indf2	equ	0xFDF
  8581                           postinc2	equ	0xFDE
  8582                           postdec2	equ	0xFDD
  8583                           plusw2	equ	0xFDB
  8584                           fsr2h	equ	0xFDA
  8585                           fsr2l	equ	0xFD9
  8586                           status	equ	0xFD8
  8587                           
  8588 ;; *************** function _delay_us *****************
  8589 ;; Defined at:
  8590 ;;		line 255 in file "Library/Types.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;  us              2    0[BANK0 ] unsigned short 
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;  u               4    2[BANK0 ] unsigned long 
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  1    wreg      void 
  8597 ;; Registers used:
  8598 ;;		wreg, status,2, status,0
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8604 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8605 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;Total ram usage:        6 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    7
  8611 ;; This function calls:
  8612 ;;		Nothing
  8613 ;; This function is called by:
  8614 ;;		_MXK_BlockSwitchTo
  8615 ;;		_MXK_SwitchTo
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           	psect	text27
  8620  0157B6                     __ptext27:
  8621                           	opt stack 0
  8622  0157B6                     _delay_us:
  8623                           	opt stack 20
  8624                           
  8625                           ;Types.c: 256: unsigned long u;
  8626                           ;Types.c: 257: while (us--) {
  8627                           
  8628                           ;incstack = 0
  8629  0157B6  D018               	goto	u11420
  8630  0157B8                     l13949:
  8631                           
  8632                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  8633  0157B8  0E00               	movlw	0
  8634  0157BA  0100               	movlb	0	; () banked
  8635  0157BC  6F62               	movwf	delay_us@u& (0+255),b
  8636  0157BE  0E00               	movlw	0
  8637  0157C0  6F63               	movwf	(delay_us@u+1)& (0+255),b
  8638  0157C2  0E00               	movlw	0
  8639  0157C4  6F64               	movwf	(delay_us@u+2)& (0+255),b
  8640  0157C6  0E00               	movlw	0
  8641  0157C8  6F65               	movwf	(delay_us@u+3)& (0+255),b
  8642  0157CA                     l13951:
  8643                           
  8644                           ; BSR set to: 0
  8645  0157CA  5162               	movf	delay_us@u& (0+255),w,b
  8646  0157CC  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
  8647  0157CE  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
  8648  0157D0  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
  8649  0157D2  A4D8               	btfss	status,2,c
  8650  0157D4  D009               	goto	u11420
  8651                           
  8652                           ; BSR set to: 0
  8653                           
  8654                           ; BSR set to: 0
  8655  0157D6  F000               	nop		; ;# 
  8656  0157D8  0E01               	movlw	1
  8657  0157DA  0100               	movlb	0	; () banked
  8658  0157DC  2762               	addwf	delay_us@u& (0+255),f,b
  8659  0157DE  0E00               	movlw	0
  8660  0157E0  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
  8661  0157E2  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
  8662  0157E4  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
  8663  0157E6  D7F1               	goto	l13951
  8664  0157E8                     u11420:
  8665                           
  8666                           ; BSR set to: 0
  8667                           
  8668                           ; BSR set to: 0
  8669  0157E8  0100               	movlb	0	; () banked
  8670  0157EA  0760               	decf	delay_us@us& (0+255),f,b
  8671  0157EC  A0D8               	btfss	status,0,c
  8672  0157EE  0761               	decf	(delay_us@us+1)& (0+255),f,b
  8673  0157F0  2960               	incf	delay_us@us& (0+255),w,b
  8674  0157F2  E1E2               	bnz	l13949
  8675  0157F4  2961               	incf	(delay_us@us+1)& (0+255),w,b
  8676  0157F6  B4D8               	btfsc	status,2,c
  8677  0157F8  0012               	return	
  8678  0157FA  D7DE               	goto	l832
  8679  0157FC                     __end_of_delay_us:
  8680                           	opt stack 0
  8681                           tosu	equ	0xFFF
  8682                           tosh	equ	0xFFE
  8683                           tosl	equ	0xFFD
  8684                           pclath	equ	0xFFA
  8685                           tblptru	equ	0xFF8
  8686                           tblptrh	equ	0xFF7
  8687                           tblptrl	equ	0xFF6
  8688                           tablat	equ	0xFF5
  8689                           intcon	equ	0xFF2
  8690                           postinc0	equ	0xFEE
  8691                           wreg	equ	0xFE8
  8692                           postdec1	equ	0xFE5
  8693                           fsr1h	equ	0xFE2
  8694                           fsr1l	equ	0xFE1
  8695                           indf2	equ	0xFDF
  8696                           postinc2	equ	0xFDE
  8697                           postdec2	equ	0xFDD
  8698                           plusw2	equ	0xFDB
  8699                           fsr2h	equ	0xFDA
  8700                           fsr2l	equ	0xFD9
  8701                           status	equ	0xFD8
  8702                           
  8703 ;; *************** function _LEDToggle *****************
  8704 ;; Defined at:
  8705 ;;		line 261 in file "main.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;		None
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;		None
  8710 ;; Return value:  Size  Location     Type
  8711 ;;                  1    wreg      void 
  8712 ;; Registers used:
  8713 ;;		wreg, status,2, status,0, cstack
  8714 ;; Tracked objects:
  8715 ;;		On entry : 0/0
  8716 ;;		On exit  : 0/0
  8717 ;;		Unchanged: 0/0
  8718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8723 ;;Total ram usage:        0 bytes
  8724 ;; Hardware stack levels used:    1
  8725 ;; Hardware stack levels required when called:    9
  8726 ;; This function calls:
  8727 ;;		_LEDOff
  8728 ;;		_LEDOn
  8729 ;; This function is called by:
  8730 ;;		_main
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           	psect	text28
  8735  015900                     __ptext28:
  8736                           	opt stack 0
  8737  015900                     _LEDToggle:
  8738                           	opt stack 21
  8739                           
  8740                           ;main.c: 263: if (INTCONbits.TMR0IF == 1){
  8741                           
  8742                           ; BSR set to: 0
  8743                           ;incstack = 0
  8744  015900  A4F2               	btfss	intcon,2,c	;volatile
  8745  015902  0012               	return	
  8746                           
  8747                           ;main.c: 264: INTCONbits.TMR0IF=0;
  8748  015904  94F2               	bcf	intcon,2,c	;volatile
  8749                           
  8750                           ;main.c: 265: timercount++;
  8751  015906  0101               	movlb	1	; () banked
  8752  015908  4B1E               	infsnz	_timercount& (0+255),f,b
  8753  01590A  2B1F               	incf	(_timercount+1)& (0+255),f,b
  8754                           
  8755                           ; BSR set to: 1
  8756                           ;main.c: 266: if (timercount==countOn){
  8757  01590C  51F3               	movf	_countOn& (0+255),w,b
  8758  01590E  191E               	xorwf	_timercount& (0+255),w,b
  8759  015910  E105               	bnz	l15395
  8760  015912  51F4               	movf	(_countOn+1)& (0+255),w,b
  8761  015914  191F               	xorwf	(_timercount+1)& (0+255),w,b
  8762  015916  B4D8               	btfsc	status,2,c
  8763                           
  8764                           ; BSR set to: 1
  8765                           ;main.c: 267: LEDOn();
  8766  015918  EC58  F0AF         	call	_LEDOn	;wreg free
  8767  01591C                     l15395:
  8768                           
  8769                           ;main.c: 268: }
  8770                           ;main.c: 269: if(timercount==countOff){
  8771  01591C  0101               	movlb	1	; () banked
  8772  01591E  51F1               	movf	_countOff& (0+255),w,b
  8773  015920  191E               	xorwf	_timercount& (0+255),w,b
  8774  015922  E10C               	bnz	l2200
  8775  015924  51F2               	movf	(_countOff+1)& (0+255),w,b
  8776  015926  191F               	xorwf	(_timercount+1)& (0+255),w,b
  8777  015928  A4D8               	btfss	status,2,c
  8778  01592A  0012               	return	
  8779                           
  8780                           ; BSR set to: 1
  8781                           ;main.c: 270: LEDOff();
  8782  01592C  EC65  F0AF         	call	_LEDOff	;wreg free
  8783                           
  8784                           ;main.c: 271: timercount=0;
  8785  015930  0E00               	movlw	0
  8786  015932  0101               	movlb	1	; () banked
  8787  015934  6F1F               	movwf	(_timercount+1)& (0+255),b
  8788  015936  0E00               	movlw	0
  8789  015938  6F1E               	movwf	_timercount& (0+255),b
  8790                           
  8791                           ; BSR set to: 1
  8792  01593A  0012               	return	
  8793  01593C                     l2200:
  8794  01593C  0012               	return		;funcret
  8795  01593E                     __end_of_LEDToggle:
  8796                           	opt stack 0
  8797                           tosu	equ	0xFFF
  8798                           tosh	equ	0xFFE
  8799                           tosl	equ	0xFFD
  8800                           pclath	equ	0xFFA
  8801                           tblptru	equ	0xFF8
  8802                           tblptrh	equ	0xFF7
  8803                           tblptrl	equ	0xFF6
  8804                           tablat	equ	0xFF5
  8805                           intcon	equ	0xFF2
  8806                           postinc0	equ	0xFEE
  8807                           wreg	equ	0xFE8
  8808                           postdec1	equ	0xFE5
  8809                           fsr1h	equ	0xFE2
  8810                           fsr1l	equ	0xFE1
  8811                           indf2	equ	0xFDF
  8812                           postinc2	equ	0xFDE
  8813                           postdec2	equ	0xFDD
  8814                           plusw2	equ	0xFDB
  8815                           fsr2h	equ	0xFDA
  8816                           fsr2l	equ	0xFD9
  8817                           status	equ	0xFD8
  8818                           
  8819 ;; *************** function _LEDOn *****************
  8820 ;; Defined at:
  8821 ;;		line 247 in file "main.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;		None
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;		None
  8826 ;; Return value:  Size  Location     Type
  8827 ;;                  1    wreg      void 
  8828 ;; Registers used:
  8829 ;;		wreg, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8839 ;;Total ram usage:        0 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:    8
  8842 ;; This function calls:
  8843 ;;		_eusartSend
  8844 ;; This function is called by:
  8845 ;;		_LEDToggle
  8846 ;; This function uses a non-reentrant model
  8847 ;;
  8848                           
  8849                           	psect	text29
  8850  015EB0                     __ptext29:
  8851                           	opt stack 0
  8852  015EB0                     _LEDOn:
  8853                           	opt stack 21
  8854                           
  8855                           ;main.c: 248: eusartSend(139);
  8856                           
  8857                           ;incstack = 0
  8858  015EB0  0E8B               	movlw	139
  8859  015EB2  EC74  F0B0         	call	_eusartSend
  8860                           
  8861                           ;main.c: 249: eusartSend(10);
  8862  015EB6  0E0A               	movlw	10
  8863  015EB8  EC74  F0B0         	call	_eusartSend
  8864                           
  8865                           ;main.c: 250: eusartSend(255);
  8866  015EBC  0EFF               	movlw	255
  8867  015EBE  EC74  F0B0         	call	_eusartSend
  8868                           
  8869                           ;main.c: 251: eusartSend(255);
  8870  015EC2  0EFF               	movlw	255
  8871  015EC4  EC74  F0B0         	call	_eusartSend
  8872  015EC8  0012               	return		;funcret
  8873  015ECA                     __end_of_LEDOn:
  8874                           	opt stack 0
  8875                           tosu	equ	0xFFF
  8876                           tosh	equ	0xFFE
  8877                           tosl	equ	0xFFD
  8878                           pclath	equ	0xFFA
  8879                           tblptru	equ	0xFF8
  8880                           tblptrh	equ	0xFF7
  8881                           tblptrl	equ	0xFF6
  8882                           tablat	equ	0xFF5
  8883                           intcon	equ	0xFF2
  8884                           postinc0	equ	0xFEE
  8885                           wreg	equ	0xFE8
  8886                           postdec1	equ	0xFE5
  8887                           fsr1h	equ	0xFE2
  8888                           fsr1l	equ	0xFE1
  8889                           indf2	equ	0xFDF
  8890                           postinc2	equ	0xFDE
  8891                           postdec2	equ	0xFDD
  8892                           plusw2	equ	0xFDB
  8893                           fsr2h	equ	0xFDA
  8894                           fsr2l	equ	0xFD9
  8895                           status	equ	0xFD8
  8896                           
  8897 ;; *************** function _LEDOff *****************
  8898 ;; Defined at:
  8899 ;;		line 254 in file "main.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;		None
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;		None
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  1    wreg      void 
  8906 ;; Registers used:
  8907 ;;		wreg, cstack
  8908 ;; Tracked objects:
  8909 ;;		On entry : 0/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;Total ram usage:        0 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; Hardware stack levels required when called:    8
  8920 ;; This function calls:
  8921 ;;		_eusartSend
  8922 ;; This function is called by:
  8923 ;;		_LEDToggle
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           	psect	text30
  8928  015ECA                     __ptext30:
  8929                           	opt stack 0
  8930  015ECA                     _LEDOff:
  8931                           	opt stack 21
  8932                           
  8933                           ;main.c: 255: eusartSend(139);
  8934                           
  8935                           ;incstack = 0
  8936  015ECA  0E8B               	movlw	139
  8937  015ECC  EC74  F0B0         	call	_eusartSend
  8938                           
  8939                           ;main.c: 256: eusartSend(10);
  8940  015ED0  0E0A               	movlw	10
  8941  015ED2  EC74  F0B0         	call	_eusartSend
  8942                           
  8943                           ;main.c: 257: eusartSend(0);
  8944  015ED6  0E00               	movlw	0
  8945  015ED8  EC74  F0B0         	call	_eusartSend
  8946                           
  8947                           ;main.c: 258: eusartSend(0);
  8948  015EDC  0E00               	movlw	0
  8949  015EDE  EC74  F0B0         	call	_eusartSend
  8950  015EE2  0012               	return		;funcret
  8951  015EE4                     __end_of_LEDOff:
  8952                           	opt stack 0
  8953                           tosu	equ	0xFFF
  8954                           tosh	equ	0xFFE
  8955                           tosl	equ	0xFFD
  8956                           pclath	equ	0xFFA
  8957                           tblptru	equ	0xFF8
  8958                           tblptrh	equ	0xFF7
  8959                           tblptrl	equ	0xFF6
  8960                           tablat	equ	0xFF5
  8961                           intcon	equ	0xFF2
  8962                           postinc0	equ	0xFEE
  8963                           wreg	equ	0xFE8
  8964                           postdec1	equ	0xFE5
  8965                           fsr1h	equ	0xFE2
  8966                           fsr1l	equ	0xFE1
  8967                           indf2	equ	0xFDF
  8968                           postinc2	equ	0xFDE
  8969                           postdec2	equ	0xFDD
  8970                           plusw2	equ	0xFDB
  8971                           fsr2h	equ	0xFDA
  8972                           fsr2l	equ	0xFD9
  8973                           status	equ	0xFD8
  8974                           
  8975 ;; *************** function _LCD_Init *****************
  8976 ;; Defined at:
  8977 ;;		line 172 in file "Library/LCD.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;		None
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;  i               2   55[BANK0 ] unsigned short 
  8982 ;; Return value:  Size  Location     Type
  8983 ;;                  1    wreg      void 
  8984 ;; Registers used:
  8985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8986 ;; Tracked objects:
  8987 ;;		On entry : 0/0
  8988 ;;		On exit  : 0/0
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8992 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8994 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;Total ram usage:        4 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; Hardware stack levels required when called:   15
  8998 ;; This function calls:
  8999 ;;		_Configure_GPIOs
  9000 ;;		_LCD_Fill
  9001 ;;		_LCD_Write
  9002 ;;		_Set_Rotation
  9003 ;;		_delay_ms
  9004 ;; This function is called by:
  9005 ;;		_main
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           	psect	text31
  9010  013092                     __ptext31:
  9011                           	opt stack 0
  9012  013092                     _LCD_Init:
  9013                           	opt stack 15
  9014                           
  9015                           ;LCD.c: 174: UINT16 i;
  9016                           ;LCD.c: 175: Configure_GPIOs();
  9017                           
  9018                           ;incstack = 0
  9019  013092  ECE5  F0A8         	call	_Configure_GPIOs	;wreg free
  9020                           
  9021                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  9022  013096  0E00               	movlw	0
  9023  013098  0100               	movlb	0	; () banked
  9024  01309A  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
  9025  01309C  0E00               	movlw	0
  9026  01309E  6F97               	movwf	LCD_Init@i& (0+255),b
  9027                           
  9028                           ; BSR set to: 0
  9029  0130A0  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9030  0130A2  E17D               	bnz	u12430
  9031  0130A4  0E59               	movlw	89
  9032  0130A6  5D97               	subwf	LCD_Init@i& (0+255),w,b
  9033  0130A8  B0D8               	btfsc	status,0,c
  9034  0130AA  D079               	goto	u12430
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;LCD.c: 178: {
  9038                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  9039                           
  9040                           ; BSR set to: 0
  9041                           
  9042                           ; BSR set to: 0
  9043  0130AC  90D8               	bcf	status,0,c
  9044  0130AE  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9045  0130B0  6EF6               	movwf	tblptrl,c
  9046  0130B2  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9047  0130B4  6EF7               	movwf	tblptrh,c
  9048  0130B6  0E79               	movlw	low _InitList
  9049  0130B8  26F6               	addwf	tblptrl,f,c
  9050  0130BA  0EFB               	movlw	high _InitList
  9051  0130BC  22F7               	addwfc	tblptrh,f,c
  9052  0130BE                     	if	1	;There are 3 active tblptr bytes
  9053  0130BE  6AF8               	clrf	tblptru,c
  9054  0130C0  0E00               	movlw	low (__mediumconst shr (0+16))
  9055  0130C2  22F8               	addwfc	tblptru,f,c
  9056  0130C4                     	endif
  9057  0130C4  0009               	tblrd		*+
  9058  0130C6  0E80               	movlw	128
  9059  0130C8  18F5               	xorwf	tablat,w,c
  9060  0130CA  0009               	tblrd		*+
  9061  0130CC  10F5               	iorwf	tablat,w,c
  9062  0130CE  A4D8               	btfss	status,2,c
  9063  0130D0  D01D               	goto	l87
  9064                           
  9065                           ; BSR set to: 0
  9066  0130D2  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9067  0130D4  E11B               	bnz	l15029
  9068  0130D6  0E58               	movlw	88
  9069  0130D8  5D97               	subwf	LCD_Init@i& (0+255),w,b
  9070  0130DA  B0D8               	btfsc	status,0,c
  9071  0130DC  D017               	goto	l87
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;LCD.c: 180: delay_ms(InitList[++i]);
  9075  0130DE  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  9076  0130E0  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  9077  0130E2  90D8               	bcf	status,0,c
  9078  0130E4  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9079  0130E6  6EF6               	movwf	tblptrl,c
  9080  0130E8  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9081  0130EA  6EF7               	movwf	tblptrh,c
  9082  0130EC  0E79               	movlw	low _InitList
  9083  0130EE  26F6               	addwf	tblptrl,f,c
  9084  0130F0  0EFB               	movlw	high _InitList
  9085  0130F2  22F7               	addwfc	tblptrh,f,c
  9086  0130F4                     	if	1	;There are 3 active tblptr bytes
  9087  0130F4  6AF8               	clrf	tblptru,c
  9088  0130F6  0E00               	movlw	low (__mediumconst shr (0+16))
  9089  0130F8  22F8               	addwfc	tblptru,f,c
  9090  0130FA                     	endif
  9091  0130FA  0009               	tblrd		*+
  9092  0130FC  CFF5 F060          	movff	tablat,delay_ms@ms
  9093  013100  000A               	tblrd		*-
  9094  013102  CFF5 F061          	movff	tablat,delay_ms@ms+1
  9095  013106  EC14  F0A9         	call	_delay_ms	;wreg free
  9096  01310A  D043               	goto	l90
  9097  01310C                     l87:
  9098  01310C                     l15029:
  9099                           
  9100                           ;LCD.c: 181: else
  9101                           ;LCD.c: 182: {
  9102                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  9103  01310C  90D8               	bcf	status,0,c
  9104  01310E  0100               	movlb	0	; () banked
  9105  013110  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9106  013112  6EF6               	movwf	tblptrl,c
  9107  013114  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9108  013116  6EF7               	movwf	tblptrh,c
  9109  013118  0E79               	movlw	low _InitList
  9110  01311A  26F6               	addwf	tblptrl,f,c
  9111  01311C  0EFB               	movlw	high _InitList
  9112  01311E  22F7               	addwfc	tblptrh,f,c
  9113  013120                     	if	1	;There are 3 active tblptr bytes
  9114  013120  6AF8               	clrf	tblptru,c
  9115  013122  0E00               	movlw	low (__mediumconst shr (0+16))
  9116  013124  22F8               	addwfc	tblptru,f,c
  9117  013126                     	endif
  9118  013126  0009               	tblrd		*+
  9119  013128  0E00               	movlw	0
  9120  01312A  5EF5               	subwf	tablat,f,c
  9121  01312C  0009               	tblrd		*+
  9122  01312E  0E01               	movlw	1
  9123  013130  5AF5               	subwfb	tablat,f,c
  9124  013132  A0D8               	btfss	status,0,c
  9125  013134  D01B               	goto	l89
  9126                           
  9127                           ; BSR set to: 0
  9128  013136  0E00               	movlw	0
  9129  013138  6F63               	movwf	LCD_Write@mode& (0+255),b
  9130  01313A  90D8               	bcf	status,0,c
  9131  01313C  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9132  01313E  6EF6               	movwf	tblptrl,c
  9133  013140  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9134  013142  6EF7               	movwf	tblptrh,c
  9135  013144  0E79               	movlw	low _InitList
  9136  013146  26F6               	addwf	tblptrl,f,c
  9137  013148  0EFB               	movlw	high _InitList
  9138  01314A  22F7               	addwfc	tblptrh,f,c
  9139  01314C                     	if	1	;There are 3 active tblptr bytes
  9140  01314C  6AF8               	clrf	tblptru,c
  9141  01314E  0E00               	movlw	low (__mediumconst shr (0+16))
  9142  013150  22F8               	addwfc	tblptru,f,c
  9143  013152                     	endif
  9144  013152  0009               	tblrd		*+
  9145  013154  CFF5 F095          	movff	tablat,??_LCD_Init
  9146  013158  0009               	tblrd		*+
  9147  01315A  CFF5 F096          	movff	tablat,??_LCD_Init+1
  9148  01315E  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
  9149  013162  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
  9150  013164  5195               	movf	??_LCD_Init& (0+255),w,b
  9151  013166  EC1D  F0AF         	call	_LCD_Write
  9152  01316A  D013               	goto	l90
  9153  01316C                     l89:
  9154                           
  9155                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  9156  01316C  0E01               	movlw	1
  9157  01316E  0100               	movlb	0	; () banked
  9158  013170  6F63               	movwf	LCD_Write@mode& (0+255),b
  9159  013172  90D8               	bcf	status,0,c
  9160  013174  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9161  013176  6EF6               	movwf	tblptrl,c
  9162  013178  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9163  01317A  6EF7               	movwf	tblptrh,c
  9164  01317C  0E79               	movlw	low _InitList
  9165  01317E  26F6               	addwf	tblptrl,f,c
  9166  013180  0EFB               	movlw	high _InitList
  9167  013182  22F7               	addwfc	tblptrh,f,c
  9168  013184                     	if	1	;There are 3 active tblptr bytes
  9169  013184  6AF8               	clrf	tblptru,c
  9170  013186  0E00               	movlw	low (__mediumconst shr (0+16))
  9171  013188  22F8               	addwfc	tblptru,f,c
  9172  01318A                     	endif
  9173  01318A  0008               	tblrd		*
  9174  01318C  50F5               	movf	tablat,w,c
  9175  01318E  EC1D  F0AF         	call	_LCD_Write
  9176  013192                     l90:
  9177  013192  0100               	movlb	0	; () banked
  9178  013194  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  9179  013196  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  9180                           
  9181                           ; BSR set to: 0
  9182  013198  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9183  01319A  E101               	bnz	l15039
  9184  01319C  D783               	goto	L5
  9185  01319E                     u12430:
  9186  01319E                     l15039:
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;LCD.c: 185: }
  9190                           ;LCD.c: 186: }
  9191                           ;LCD.c: 187: delay_ms(100);
  9192  01319E  0E00               	movlw	0
  9193  0131A0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9194  0131A2  0E64               	movlw	100
  9195  0131A4  6F60               	movwf	delay_ms@ms& (0+255),b
  9196  0131A6  EC14  F0A9         	call	_delay_ms	;wreg free
  9197                           
  9198                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  9199  0131AA  0E00               	movlw	0
  9200  0131AC  0100               	movlb	0	; () banked
  9201  0131AE  6F63               	movwf	LCD_Write@mode& (0+255),b
  9202  0131B0  0E29               	movlw	41
  9203  0131B2  EC1D  F0AF         	call	_LCD_Write
  9204                           
  9205                           ;LCD.c: 189: Set_Rotation(1);
  9206  0131B6  0E01               	movlw	1
  9207  0131B8  EC9A  F0A2         	call	_Set_Rotation
  9208                           
  9209                           ;LCD.c: 191: delay_ms(100);
  9210  0131BC  0E00               	movlw	0
  9211  0131BE  0100               	movlb	0	; () banked
  9212  0131C0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9213  0131C2  0E64               	movlw	100
  9214  0131C4  6F60               	movwf	delay_ms@ms& (0+255),b
  9215  0131C6  EC14  F0A9         	call	_delay_ms	;wreg free
  9216                           
  9217                           ;LCD.c: 192: LCD_Fill(0x0000);
  9218  0131CA  0E00               	movlw	0
  9219  0131CC  0100               	movlb	0	; () banked
  9220  0131CE  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  9221  0131D0  0E00               	movlw	0
  9222  0131D2  6F69               	movwf	LCD_Fill@pColour& (0+255),b
  9223  0131D4  EC6F  F0AB         	call	_LCD_Fill	;wreg free
  9224  0131D8  0012               	return		;funcret
  9225  0131DA                     __end_of_LCD_Init:
  9226                           	opt stack 0
  9227                           tosu	equ	0xFFF
  9228                           tosh	equ	0xFFE
  9229                           tosl	equ	0xFFD
  9230                           pclath	equ	0xFFA
  9231                           tblptru	equ	0xFF8
  9232                           tblptrh	equ	0xFF7
  9233                           tblptrl	equ	0xFF6
  9234                           tablat	equ	0xFF5
  9235                           intcon	equ	0xFF2
  9236                           postinc0	equ	0xFEE
  9237                           wreg	equ	0xFE8
  9238                           postdec1	equ	0xFE5
  9239                           fsr1h	equ	0xFE2
  9240                           fsr1l	equ	0xFE1
  9241                           indf2	equ	0xFDF
  9242                           postinc2	equ	0xFDE
  9243                           postdec2	equ	0xFDD
  9244                           plusw2	equ	0xFDB
  9245                           fsr2h	equ	0xFDA
  9246                           fsr2l	equ	0xFD9
  9247                           status	equ	0xFD8
  9248                           
  9249 ;; *************** function _Set_Rotation *****************
  9250 ;; Defined at:
  9251 ;;		line 248 in file "Library/LCD.c"
  9252 ;; Parameters:    Size  Location     Type
  9253 ;;  m               1    wreg     unsigned char 
  9254 ;; Auto vars:     Size  Location     Type
  9255 ;;  m               1    5[BANK0 ] unsigned char 
  9256 ;;  rotation        1    6[BANK0 ] unsigned char 
  9257 ;; Return value:  Size  Location     Type
  9258 ;;                  1    wreg      void 
  9259 ;; Registers used:
  9260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;Total ram usage:        2 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; Hardware stack levels required when called:    9
  9273 ;; This function calls:
  9274 ;;		_LCD_Write
  9275 ;; This function is called by:
  9276 ;;		_LCD_Init
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           	psect	text32
  9281  014534                     __ptext32:
  9282                           	opt stack 0
  9283  014534                     _Set_Rotation:
  9284                           	opt stack 20
  9285                           
  9286                           ;incstack = 0
  9287                           ;Set_Rotation@m stored from wreg
  9288  014534  0100               	movlb	0	; () banked
  9289  014536  6F65               	movwf	Set_Rotation@m& (0+255),b
  9290                           
  9291                           ;LCD.c: 250: UINT8 rotation = 0x00;
  9292  014538  0E00               	movlw	0
  9293  01453A  0100               	movlb	0	; () banked
  9294  01453C  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  9298  01453E  0E00               	movlw	0
  9299  014540  6F63               	movwf	LCD_Write@mode& (0+255),b
  9300  014542  0E36               	movlw	54
  9301  014544  EC1D  F0AF         	call	_LCD_Write
  9302                           
  9303                           ;LCD.c: 253: rotation = (m % 4);
  9304  014548  0100               	movlb	0	; () banked
  9305  01454A  5165               	movf	Set_Rotation@m& (0+255),w,b
  9306  01454C  0B03               	andlw	3
  9307  01454E  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  9308                           
  9309                           ;LCD.c: 255: switch(rotation)
  9310  014550  D02B               	goto	l117
  9311  014552                     
  9312                           ; BSR set to: 0
  9313                           ;LCD.c: 258: {
  9314                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  9315                           
  9316                           ; BSR set to: 0
  9317  014552  0E01               	movlw	1
  9318  014554  6F63               	movwf	LCD_Write@mode& (0+255),b
  9319  014556  0EC8               	movlw	200
  9320  014558  EC1D  F0AF         	call	_LCD_Write
  9321                           
  9322                           ;LCD.c: 260: w = 128;
  9323  01455C  0E80               	movlw	128
  9324  01455E  6E50               	movwf	_w,c
  9325                           
  9326                           ;LCD.c: 261: l = 128;
  9327  014560  0E80               	movlw	128
  9328  014562  6E4F               	movwf	_l,c
  9329                           
  9330                           ;LCD.c: 262: break;
  9331  014564  0012               	return	
  9332  014566                     
  9333                           ;LCD.c: 265: {
  9334                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  9335  014566  0E01               	movlw	1
  9336  014568  0100               	movlb	0	; () banked
  9337  01456A  6F63               	movwf	LCD_Write@mode& (0+255),b
  9338  01456C  0EA8               	movlw	168
  9339  01456E  EC1D  F0AF         	call	_LCD_Write
  9340                           
  9341                           ;LCD.c: 267: w = 128;
  9342  014572  0E80               	movlw	128
  9343  014574  6E50               	movwf	_w,c
  9344                           
  9345                           ;LCD.c: 268: l = 128;
  9346  014576  0E80               	movlw	128
  9347  014578  6E4F               	movwf	_l,c
  9348                           
  9349                           ;LCD.c: 269: break;
  9350  01457A  0012               	return	
  9351  01457C                     
  9352                           ;LCD.c: 272: {
  9353                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  9354  01457C  0E01               	movlw	1
  9355  01457E  0100               	movlb	0	; () banked
  9356  014580  6F63               	movwf	LCD_Write@mode& (0+255),b
  9357  014582  0E08               	movlw	8
  9358  014584  EC1D  F0AF         	call	_LCD_Write
  9359                           
  9360                           ;LCD.c: 274: w = 128;
  9361  014588  0E80               	movlw	128
  9362  01458A  6E50               	movwf	_w,c
  9363                           
  9364                           ;LCD.c: 275: l = 128;
  9365  01458C  0E80               	movlw	128
  9366  01458E  6E4F               	movwf	_l,c
  9367                           
  9368                           ;LCD.c: 276: break;
  9369  014590  0012               	return	
  9370  014592                     
  9371                           ;LCD.c: 279: {
  9372                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  9373  014592  0E01               	movlw	1
  9374  014594  0100               	movlb	0	; () banked
  9375  014596  6F63               	movwf	LCD_Write@mode& (0+255),b
  9376  014598  0E68               	movlw	104
  9377  01459A  EC1D  F0AF         	call	_LCD_Write
  9378                           
  9379                           ;LCD.c: 281: w = 128;
  9380  01459E  0E80               	movlw	128
  9381  0145A0  6E50               	movwf	_w,c
  9382                           
  9383                           ;LCD.c: 282: l = 128;
  9384  0145A2  0E80               	movlw	128
  9385  0145A4  6E4F               	movwf	_l,c
  9386                           
  9387                           ;LCD.c: 284: }
  9388                           ;LCD.c: 285: }
  9389                           
  9390                           ;LCD.c: 283: break;
  9391  0145A6  0012               	return	
  9392  0145A8                     l117:
  9393  0145A8  0100               	movlb	0	; () banked
  9394  0145AA  5166               	movf	Set_Rotation@rotation& (0+255),w,b
  9395                           
  9396                           ; Switch size 1, requested type "space"
  9397                           ; Number of cases is 4, Range of values is 0 to 3
  9398                           ; switch strategies available:
  9399                           ; Name         Instructions Cycles
  9400                           ; simple_byte           13     7 (average)
  9401                           ;	Chosen strategy is simple_byte
  9402  0145AC  0A00               	xorlw	0	; case 0
  9403  0145AE  B4D8               	btfsc	status,2,c
  9404  0145B0  D7D0               	goto	l118
  9405  0145B2  0A01               	xorlw	1	; case 1
  9406  0145B4  B4D8               	btfsc	status,2,c
  9407  0145B6  D7D7               	goto	l120
  9408  0145B8  0A03               	xorlw	3	; case 2
  9409  0145BA  B4D8               	btfsc	status,2,c
  9410  0145BC  D7DF               	goto	l121
  9411  0145BE  0A01               	xorlw	1	; case 3
  9412  0145C0  A4D8               	btfss	status,2,c
  9413  0145C2  0012               	return	
  9414  0145C4  D7E6               	goto	l122
  9415  0145C6                     __end_of_Set_Rotation:
  9416                           	opt stack 0
  9417                           tosu	equ	0xFFF
  9418                           tosh	equ	0xFFE
  9419                           tosl	equ	0xFFD
  9420                           pclath	equ	0xFFA
  9421                           tblptru	equ	0xFF8
  9422                           tblptrh	equ	0xFF7
  9423                           tblptrl	equ	0xFF6
  9424                           tablat	equ	0xFF5
  9425                           intcon	equ	0xFF2
  9426                           postinc0	equ	0xFEE
  9427                           wreg	equ	0xFE8
  9428                           postdec1	equ	0xFE5
  9429                           fsr1h	equ	0xFE2
  9430                           fsr1l	equ	0xFE1
  9431                           indf2	equ	0xFDF
  9432                           postinc2	equ	0xFDE
  9433                           postdec2	equ	0xFDD
  9434                           plusw2	equ	0xFDB
  9435                           fsr2h	equ	0xFDA
  9436                           fsr2l	equ	0xFD9
  9437                           status	equ	0xFD8
  9438                           
  9439 ;; *************** function _LCD_Fill *****************
  9440 ;; Defined at:
  9441 ;;		line 287 in file "Library/LCD.c"
  9442 ;; Parameters:    Size  Location     Type
  9443 ;;  pColour         2    9[BANK0 ] unsigned short 
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;  j               1   12[BANK0 ] unsigned char 
  9446 ;;  i               1   11[BANK0 ] unsigned char 
  9447 ;; Return value:  Size  Location     Type
  9448 ;;                  1    wreg      void 
  9449 ;; Registers used:
  9450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9451 ;; Tracked objects:
  9452 ;;		On entry : 0/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9456 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9459 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;Total ram usage:        4 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; Hardware stack levels required when called:   10
  9463 ;; This function calls:
  9464 ;;		_LCD_Word_Write
  9465 ;;		_Set_Addr_Window
  9466 ;; This function is called by:
  9467 ;;		_LCD_Init
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           	psect	text33
  9472  0156DE                     __ptext33:
  9473                           	opt stack 0
  9474  0156DE                     _LCD_Fill:
  9475                           	opt stack 19
  9476                           
  9477                           ;LCD.c: 296: UINT8 i = 0x00;
  9478                           
  9479                           ;incstack = 0
  9480  0156DE  0E00               	movlw	0
  9481  0156E0  0100               	movlb	0	; () banked
  9482  0156E2  6F6B               	movwf	LCD_Fill@i& (0+255),b
  9483                           
  9484                           ;LCD.c: 297: UINT8 j = 0x00;
  9485  0156E4  0E00               	movlw	0
  9486  0156E6  6F6C               	movwf	LCD_Fill@j& (0+255),b
  9487                           
  9488                           ; BSR set to: 0
  9489                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  9490  0156E8  0E00               	movlw	0
  9491  0156EA  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
  9492  0156EC  0450               	decf	_w,w,c
  9493  0156EE  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9494  0156F0  044F               	decf	_l,w,c
  9495  0156F2  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9496  0156F4  0E00               	movlw	0
  9497  0156F6  EC03  F0A2         	call	_Set_Addr_Window
  9498                           
  9499                           ;LCD.c: 299: for (j = l; j > 0; j--)
  9500  0156FA  C04F  F06C         	movff	_l,LCD_Fill@j
  9501  0156FE  0100               	movlb	0	; () banked
  9502  015700  516C               	movf	LCD_Fill@j& (0+255),w,b
  9503  015702  B4D8               	btfsc	status,2,c
  9504  015704  0012               	return	
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;LCD.c: 300: for (i = w; i > 0; i--)
  9508                           
  9509                           ; BSR set to: 0
  9510  015706  C050  F06B         	movff	_w,LCD_Fill@i
  9511  01570A                     l14745:
  9512                           
  9513                           ; BSR set to: 0
  9514  01570A  516B               	movf	LCD_Fill@i& (0+255),w,b
  9515  01570C  B4D8               	btfsc	status,2,c
  9516  01570E  D009               	goto	u12130
  9517                           
  9518                           ; BSR set to: 0
  9519                           ;LCD.c: 301: LCD_Word_Write(pColour);
  9520                           
  9521                           ; BSR set to: 0
  9522                           
  9523                           ; BSR set to: 0
  9524  015710  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  9525  015714  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  9526  015718  EC72  F0AF         	call	_LCD_Word_Write	;wreg free
  9527  01571C  0100               	movlb	0	; () banked
  9528  01571E  076B               	decf	LCD_Fill@i& (0+255),f,b
  9529  015720  D7F4               	goto	l14745
  9530  015722                     u12130:
  9531                           
  9532                           ; BSR set to: 0
  9533                           
  9534                           ; BSR set to: 0
  9535  015722  076C               	decf	LCD_Fill@j& (0+255),f,b
  9536  015724  D7ED               	goto	L6
  9537  015726                     __end_of_LCD_Fill:
  9538                           	opt stack 0
  9539                           tosu	equ	0xFFF
  9540                           tosh	equ	0xFFE
  9541                           tosl	equ	0xFFD
  9542                           pclath	equ	0xFFA
  9543                           tblptru	equ	0xFF8
  9544                           tblptrh	equ	0xFF7
  9545                           tblptrl	equ	0xFF6
  9546                           tablat	equ	0xFF5
  9547                           intcon	equ	0xFF2
  9548                           postinc0	equ	0xFEE
  9549                           wreg	equ	0xFE8
  9550                           postdec1	equ	0xFE5
  9551                           fsr1h	equ	0xFE2
  9552                           fsr1l	equ	0xFE1
  9553                           indf2	equ	0xFDF
  9554                           postinc2	equ	0xFDE
  9555                           postdec2	equ	0xFDD
  9556                           plusw2	equ	0xFDB
  9557                           fsr2h	equ	0xFDA
  9558                           fsr2l	equ	0xFD9
  9559                           status	equ	0xFD8
  9560                           
  9561 ;; *************** function _Configure_GPIOs *****************
  9562 ;; Defined at:
  9563 ;;		line 46 in file "Library/LCD.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;		None
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;		None
  9568 ;; Return value:  Size  Location     Type
  9569 ;;                  1    wreg      void 
  9570 ;; Registers used:
  9571 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9572 ;; Tracked objects:
  9573 ;;		On entry : 0/0
  9574 ;;		On exit  : 0/0
  9575 ;;		Unchanged: 0/0
  9576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;Total ram usage:        0 bytes
  9582 ;; Hardware stack levels used:    1
  9583 ;; Hardware stack levels required when called:   14
  9584 ;; This function calls:
  9585 ;;		_LCD_Reset
  9586 ;;		_Port_SetPinType
  9587 ;;		_SPI_Init
  9588 ;;		_SPI_MaxSpeed
  9589 ;; This function is called by:
  9590 ;;		_LCD_Init
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           	psect	text34
  9595  0151CA                     __ptext34:
  9596                           	opt stack 0
  9597  0151CA                     _Configure_GPIOs:
  9598                           	opt stack 15
  9599                           
  9600                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;incstack = 0
  9604  0151CA  0EB1               	movlw	low _PortF
  9605  0151CC  0100               	movlb	0	; () banked
  9606  0151CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9607  0151D0  0E01               	movlw	high _PortF
  9608  0151D2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9609  0151D4  0E07               	movlw	7
  9610  0151D6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9611  0151D8  0E03               	movlw	3
  9612  0151DA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9613  0151DC  EC42  F093         	call	_Port_SetPinType	;wreg free
  9614                           
  9615                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9616  0151E0  0EB1               	movlw	low _PortF
  9617  0151E2  0100               	movlb	0	; () banked
  9618  0151E4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9619  0151E6  0E01               	movlw	high _PortF
  9620  0151E8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9621  0151EA  0E06               	movlw	6
  9622  0151EC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9623  0151EE  0E03               	movlw	3
  9624  0151F0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9625  0151F2  EC42  F093         	call	_Port_SetPinType	;wreg free
  9626                           
  9627                           ;LCD.c: 55: LCD_Reset();
  9628  0151F6  EC3D  F0AA         	call	_LCD_Reset	;wreg free
  9629                           
  9630                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9631  0151FA  0EC0               	movlw	192
  9632  0151FC  0100               	movlb	0	; () banked
  9633  0151FE  6F8D               	movwf	SPI_Init@pClock& (0+255),b
  9634  015200  0EC6               	movlw	198
  9635  015202  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9636  015204  0E2D               	movlw	45
  9637  015206  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9638  015208  0E00               	movlw	0
  9639  01520A  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9640  01520C  0E01               	movlw	1
  9641  01520E  6F91               	movwf	SPI_Init@pChannel& (0+255),b
  9642  015210  0E01               	movlw	1
  9643  015212  6F92               	movwf	SPI_Init@pMode& (0+255),b
  9644  015214  ECCF  F083         	call	_SPI_Init	;wreg free
  9645                           
  9646                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9647  015218  0E7E               	movlw	low _SPI2
  9648  01521A  0100               	movlb	0	; () banked
  9649  01521C  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9650  01521E  0E01               	movlw	high _SPI2
  9651  015220  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9652  015222  ECB6  F0A7         	call	_SPI_MaxSpeed	;wreg free
  9653  015226  0012               	return		;funcret
  9654  015228                     __end_of_Configure_GPIOs:
  9655                           	opt stack 0
  9656                           tosu	equ	0xFFF
  9657                           tosh	equ	0xFFE
  9658                           tosl	equ	0xFFD
  9659                           pclath	equ	0xFFA
  9660                           tblptru	equ	0xFF8
  9661                           tblptrh	equ	0xFF7
  9662                           tblptrl	equ	0xFF6
  9663                           tablat	equ	0xFF5
  9664                           intcon	equ	0xFF2
  9665                           postinc0	equ	0xFEE
  9666                           wreg	equ	0xFE8
  9667                           postdec1	equ	0xFE5
  9668                           fsr1h	equ	0xFE2
  9669                           fsr1l	equ	0xFE1
  9670                           indf2	equ	0xFDF
  9671                           postinc2	equ	0xFDE
  9672                           postdec2	equ	0xFDD
  9673                           plusw2	equ	0xFDB
  9674                           fsr2h	equ	0xFDA
  9675                           fsr2l	equ	0xFD9
  9676                           status	equ	0xFD8
  9677                           
  9678 ;; *************** function _SPI_MaxSpeed *****************
  9679 ;; Defined at:
  9680 ;;		line 201 in file "Library/SPI.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9683 ;;		 -> SPI2(11), 
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;		None
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      void 
  9688 ;; Registers used:
  9689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9695 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;Total ram usage:        2 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    9
  9702 ;; This function calls:
  9703 ;;		_Byte_SetBit
  9704 ;;		_Byte_SetQuad
  9705 ;; This function is called by:
  9706 ;;		_Configure_GPIOs
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           	psect	text35
  9711  014F6C                     __ptext35:
  9712                           	opt stack 0
  9713  014F6C                     _SPI_MaxSpeed:
  9714                           	opt stack 19
  9715                           
  9716                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9717                           
  9718                           ;incstack = 0
  9719  014F6C  0100               	movlb	0	; () banked
  9720  014F6E  EE20 F006          	lfsr	2,6
  9721  014F72  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9722  014F74  26D9               	addwf	fsr2l,f,c
  9723  014F76  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9724  014F78  22DA               	addwfc	fsr2h,f,c
  9725  014F7A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9726  014F7E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9727  014F82  0E05               	movlw	5
  9728  014F84  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9729  014F86  0E00               	movlw	0
  9730  014F88  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9731  014F8A  EC14  F0AA         	call	_Byte_SetBit	;wreg free
  9732                           
  9733                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  9734  014F8E  0100               	movlb	0	; () banked
  9735  014F90  EE20 F006          	lfsr	2,6
  9736  014F94  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9737  014F96  26D9               	addwf	fsr2l,f,c
  9738  014F98  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9739  014F9A  22DA               	addwfc	fsr2h,f,c
  9740  014F9C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
  9741  014FA0  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
  9742  014FA4  0E00               	movlw	0
  9743  014FA6  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9744  014FA8  0E00               	movlw	0
  9745  014FAA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
  9746  014FAC  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
  9747                           
  9748                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9749  014FB0  0100               	movlb	0	; () banked
  9750  014FB2  EE20 F006          	lfsr	2,6
  9751  014FB6  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9752  014FB8  26D9               	addwf	fsr2l,f,c
  9753  014FBA  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9754  014FBC  22DA               	addwfc	fsr2h,f,c
  9755  014FBE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9756  014FC2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9757  014FC6  0E05               	movlw	5
  9758  014FC8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9759  014FCA  0E01               	movlw	1
  9760  014FCC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9761  014FCE  EC14  F0AA         	call	_Byte_SetBit	;wreg free
  9762  014FD2  0012               	return		;funcret
  9763  014FD4                     __end_of_SPI_MaxSpeed:
  9764                           	opt stack 0
  9765                           tosu	equ	0xFFF
  9766                           tosh	equ	0xFFE
  9767                           tosl	equ	0xFFD
  9768                           pclath	equ	0xFFA
  9769                           tblptru	equ	0xFF8
  9770                           tblptrh	equ	0xFF7
  9771                           tblptrl	equ	0xFF6
  9772                           tablat	equ	0xFF5
  9773                           intcon	equ	0xFF2
  9774                           postinc0	equ	0xFEE
  9775                           wreg	equ	0xFE8
  9776                           postdec1	equ	0xFE5
  9777                           fsr1h	equ	0xFE2
  9778                           fsr1l	equ	0xFE1
  9779                           indf2	equ	0xFDF
  9780                           postinc2	equ	0xFDE
  9781                           postdec2	equ	0xFDD
  9782                           plusw2	equ	0xFDB
  9783                           fsr2h	equ	0xFDA
  9784                           fsr2l	equ	0xFD9
  9785                           status	equ	0xFD8
  9786                           
  9787 ;; *************** function _LCD_Reset *****************
  9788 ;; Defined at:
  9789 ;;		line 95 in file "Library/LCD.c"
  9790 ;; Parameters:    Size  Location     Type
  9791 ;;		None
  9792 ;; Auto vars:     Size  Location     Type
  9793 ;;		None
  9794 ;; Return value:  Size  Location     Type
  9795 ;;                  1    wreg      void 
  9796 ;; Registers used:
  9797 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9798 ;; Tracked objects:
  9799 ;;		On entry : 0/0
  9800 ;;		On exit  : 0/0
  9801 ;;		Unchanged: 0/0
  9802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9807 ;;Total ram usage:        0 bytes
  9808 ;; Hardware stack levels used:    1
  9809 ;; Hardware stack levels required when called:   13
  9810 ;; This function calls:
  9811 ;;		_LED_Toggle
  9812 ;;		_Reset_High
  9813 ;;		_Reset_Low
  9814 ;;		_delay_ms
  9815 ;; This function is called by:
  9816 ;;		_Configure_GPIOs
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           	psect	text36
  9821  01547A                     __ptext36:
  9822                           	opt stack 0
  9823  01547A                     _LCD_Reset:
  9824                           	opt stack 15
  9825                           
  9826                           ;LCD.c: 97: Reset_High();
  9827                           
  9828                           ;incstack = 0
  9829  01547A  ECA4  F0AF         	call	_Reset_High	;wreg free
  9830                           
  9831                           ;LCD.c: 98: LED_Toggle(eLED2);
  9832  01547E  0E01               	movlw	1
  9833  015480  EC40  F0AC         	call	_LED_Toggle
  9834                           
  9835                           ;LCD.c: 99: delay_ms(0x80);
  9836  015484  0E00               	movlw	0
  9837  015486  0100               	movlb	0	; () banked
  9838  015488  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9839  01548A  0E80               	movlw	128
  9840  01548C  6F60               	movwf	delay_ms@ms& (0+255),b
  9841  01548E  EC14  F0A9         	call	_delay_ms	;wreg free
  9842                           
  9843                           ;LCD.c: 100: LED_Toggle(eLED2);
  9844  015492  0E01               	movlw	1
  9845  015494  EC40  F0AC         	call	_LED_Toggle
  9846                           
  9847                           ;LCD.c: 101: Reset_Low();
  9848  015498  EC98  F0AF         	call	_Reset_Low	;wreg free
  9849                           
  9850                           ;LCD.c: 102: delay_ms(0x80);
  9851  01549C  0E00               	movlw	0
  9852  01549E  0100               	movlb	0	; () banked
  9853  0154A0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9854  0154A2  0E80               	movlw	128
  9855  0154A4  6F60               	movwf	delay_ms@ms& (0+255),b
  9856  0154A6  EC14  F0A9         	call	_delay_ms	;wreg free
  9857                           
  9858                           ;LCD.c: 103: LED_Toggle(eLED2);
  9859  0154AA  0E01               	movlw	1
  9860  0154AC  EC40  F0AC         	call	_LED_Toggle
  9861                           
  9862                           ;LCD.c: 104: Reset_High();
  9863  0154B0  ECA4  F0AF         	call	_Reset_High	;wreg free
  9864                           
  9865                           ;LCD.c: 105: delay_ms(0x80);
  9866  0154B4  0E00               	movlw	0
  9867  0154B6  0100               	movlb	0	; () banked
  9868  0154B8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9869  0154BA  0E80               	movlw	128
  9870  0154BC  6F60               	movwf	delay_ms@ms& (0+255),b
  9871  0154BE  EC14  F0A9         	call	_delay_ms	;wreg free
  9872                           
  9873                           ;LCD.c: 106: LED_Toggle(eLED2);
  9874  0154C2  0E01               	movlw	1
  9875  0154C4  EC40  F0AC         	call	_LED_Toggle
  9876  0154C8  0012               	return		;funcret
  9877  0154CA                     __end_of_LCD_Reset:
  9878                           	opt stack 0
  9879                           tosu	equ	0xFFF
  9880                           tosh	equ	0xFFE
  9881                           tosl	equ	0xFFD
  9882                           pclath	equ	0xFFA
  9883                           tblptru	equ	0xFF8
  9884                           tblptrh	equ	0xFF7
  9885                           tblptrl	equ	0xFF6
  9886                           tablat	equ	0xFF5
  9887                           intcon	equ	0xFF2
  9888                           postinc0	equ	0xFEE
  9889                           wreg	equ	0xFE8
  9890                           postdec1	equ	0xFE5
  9891                           fsr1h	equ	0xFE2
  9892                           fsr1l	equ	0xFE1
  9893                           indf2	equ	0xFDF
  9894                           postinc2	equ	0xFDE
  9895                           postdec2	equ	0xFDD
  9896                           plusw2	equ	0xFDB
  9897                           fsr2h	equ	0xFDA
  9898                           fsr2l	equ	0xFD9
  9899                           status	equ	0xFD8
  9900                           
  9901 ;; *************** function _Reset_Low *****************
  9902 ;; Defined at:
  9903 ;;		line 32 in file "Library/LCD.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;		None
  9906 ;; Auto vars:     Size  Location     Type
  9907 ;;		None
  9908 ;; Return value:  Size  Location     Type
  9909 ;;                  1    wreg      void 
  9910 ;; Registers used:
  9911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9912 ;; Tracked objects:
  9913 ;;		On entry : 0/0
  9914 ;;		On exit  : 0/0
  9915 ;;		Unchanged: 0/0
  9916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9921 ;;Total ram usage:        0 bytes
  9922 ;; Hardware stack levels used:    1
  9923 ;; Hardware stack levels required when called:   11
  9924 ;; This function calls:
  9925 ;;		_Port_SetPin
  9926 ;; This function is called by:
  9927 ;;		_LCD_Reset
  9928 ;; This function uses a non-reentrant model
  9929 ;;
  9930                           
  9931                           	psect	text37
  9932  015F30                     __ptext37:
  9933                           	opt stack 0
  9934  015F30                     _Reset_Low:
  9935                           	opt stack 16
  9936                           
  9937                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  9938                           
  9939                           ;incstack = 0
  9940  015F30  0EB1               	movlw	low _PortF
  9941  015F32  0100               	movlb	0	; () banked
  9942  015F34  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9943  015F36  0E01               	movlw	high _PortF
  9944  015F38  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9945  015F3A  0E06               	movlw	6
  9946  015F3C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9947  015F3E  0E01               	movlw	1
  9948  015F40  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9949  015F42  ECB7  F09F         	call	_Port_SetPin	;wreg free
  9950  015F46  0012               	return		;funcret
  9951  015F48                     __end_of_Reset_Low:
  9952                           	opt stack 0
  9953                           tosu	equ	0xFFF
  9954                           tosh	equ	0xFFE
  9955                           tosl	equ	0xFFD
  9956                           pclath	equ	0xFFA
  9957                           tblptru	equ	0xFF8
  9958                           tblptrh	equ	0xFF7
  9959                           tblptrl	equ	0xFF6
  9960                           tablat	equ	0xFF5
  9961                           intcon	equ	0xFF2
  9962                           postinc0	equ	0xFEE
  9963                           wreg	equ	0xFE8
  9964                           postdec1	equ	0xFE5
  9965                           fsr1h	equ	0xFE2
  9966                           fsr1l	equ	0xFE1
  9967                           indf2	equ	0xFDF
  9968                           postinc2	equ	0xFDE
  9969                           postdec2	equ	0xFDD
  9970                           plusw2	equ	0xFDB
  9971                           fsr2h	equ	0xFDA
  9972                           fsr2l	equ	0xFD9
  9973                           status	equ	0xFD8
  9974                           
  9975 ;; *************** function _Reset_High *****************
  9976 ;; Defined at:
  9977 ;;		line 36 in file "Library/LCD.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;		None
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;		None
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  1    wreg      void 
  9984 ;; Registers used:
  9985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9995 ;;Total ram usage:        0 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:   11
  9998 ;; This function calls:
  9999 ;;		_Port_SetPin
 10000 ;; This function is called by:
 10001 ;;		_LCD_Reset
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           	psect	text38
 10006  015F48                     __ptext38:
 10007                           	opt stack 0
 10008  015F48                     _Reset_High:
 10009                           	opt stack 16
 10010                           
 10011                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 10012                           
 10013                           ;incstack = 0
 10014  015F48  0EB1               	movlw	low _PortF
 10015  015F4A  0100               	movlb	0	; () banked
 10016  015F4C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10017  015F4E  0E01               	movlw	high _PortF
 10018  015F50  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10019  015F52  0E06               	movlw	6
 10020  015F54  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10021  015F56  0E00               	movlw	0
 10022  015F58  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10023  015F5A  ECB7  F09F         	call	_Port_SetPin	;wreg free
 10024  015F5E  0012               	return		;funcret
 10025  015F60                     __end_of_Reset_High:
 10026                           	opt stack 0
 10027                           tosu	equ	0xFFF
 10028                           tosh	equ	0xFFE
 10029                           tosl	equ	0xFFD
 10030                           pclath	equ	0xFFA
 10031                           tblptru	equ	0xFF8
 10032                           tblptrh	equ	0xFF7
 10033                           tblptrl	equ	0xFF6
 10034                           tablat	equ	0xFF5
 10035                           intcon	equ	0xFF2
 10036                           postinc0	equ	0xFEE
 10037                           wreg	equ	0xFE8
 10038                           postdec1	equ	0xFE5
 10039                           fsr1h	equ	0xFE2
 10040                           fsr1l	equ	0xFE1
 10041                           indf2	equ	0xFDF
 10042                           postinc2	equ	0xFDE
 10043                           postdec2	equ	0xFDD
 10044                           plusw2	equ	0xFDB
 10045                           fsr2h	equ	0xFDA
 10046                           fsr2l	equ	0xFD9
 10047                           status	equ	0xFD8
 10048                           
 10049 ;; *************** function _Init_Timer0 *****************
 10050 ;; Defined at:
 10051 ;;		line 74 in file "main.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;		None
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;		None
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  2  2112[None  ] int 
 10058 ;; Registers used:
 10059 ;;		None
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10069 ;;Total ram usage:        0 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    7
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_main
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           	psect	text39
 10080  015F60                     __ptext39:
 10081                           	opt stack 0
 10082  015F60                     _Init_Timer0:
 10083                           	opt stack 23
 10084                           
 10085                           ;main.c: 76: T0CONbits.TMR0ON = 1;
 10086                           
 10087                           ;incstack = 0
 10088  015F60  8ED5               	bsf	4053,7,c	;volatile
 10089                           
 10090                           ;main.c: 77: T0CONbits.T08BIT = 1;
 10091  015F62  8CD5               	bsf	4053,6,c	;volatile
 10092                           
 10093                           ;main.c: 78: T0CONbits.T0CS=0;
 10094  015F64  9AD5               	bcf	4053,5,c	;volatile
 10095                           
 10096                           ;main.c: 79: T0CONbits.T0SE=0;
 10097  015F66  98D5               	bcf	4053,4,c	;volatile
 10098                           
 10099                           ;main.c: 80: T0CONbits.PSA=0;
 10100  015F68  96D5               	bcf	4053,3,c	;volatile
 10101                           
 10102                           ;main.c: 81: T0CONbits.T0PS2=1;
 10103  015F6A  84D5               	bsf	4053,2,c	;volatile
 10104                           
 10105                           ;main.c: 82: T0CONbits.T0PS1=1;
 10106  015F6C  82D5               	bsf	4053,1,c	;volatile
 10107                           
 10108                           ;main.c: 83: T0CONbits.T0PS0=1;
 10109  015F6E  80D5               	bsf	4053,0,c	;volatile
 10110                           
 10111                           ;main.c: 85: INTCONbits.TMR0IE = 1;
 10112  015F70  8AF2               	bsf	intcon,5,c	;volatile
 10113                           
 10114                           ;main.c: 86: INTCONbits.PEIE = 1;
 10115  015F72  8CF2               	bsf	intcon,6,c	;volatile
 10116                           
 10117                           ;main.c: 87: INTCONbits.GIE = 1;
 10118  015F74  8EF2               	bsf	intcon,7,c	;volatile
 10119  015F76  0012               	return		;funcret
 10120  015F78                     __end_of_Init_Timer0:
 10121                           	opt stack 0
 10122                           tosu	equ	0xFFF
 10123                           tosh	equ	0xFFE
 10124                           tosl	equ	0xFFD
 10125                           pclath	equ	0xFFA
 10126                           tblptru	equ	0xFF8
 10127                           tblptrh	equ	0xFF7
 10128                           tblptrl	equ	0xFF6
 10129                           tablat	equ	0xFF5
 10130                           intcon	equ	0xFF2
 10131                           postinc0	equ	0xFEE
 10132                           wreg	equ	0xFE8
 10133                           postdec1	equ	0xFE5
 10134                           fsr1h	equ	0xFE2
 10135                           fsr1l	equ	0xFE1
 10136                           indf2	equ	0xFDF
 10137                           postinc2	equ	0xFDE
 10138                           postdec2	equ	0xFDD
 10139                           plusw2	equ	0xFDB
 10140                           fsr2h	equ	0xFDA
 10141                           fsr2l	equ	0xFD9
 10142                           status	equ	0xFD8
 10143                           
 10144 ;; *************** function _InitSerialCommunication *****************
 10145 ;; Defined at:
 10146 ;;		line 138 in file "main.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;		None
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;		None
 10151 ;; Return value:  Size  Location     Type
 10152 ;;                  1    wreg      void 
 10153 ;; Registers used:
 10154 ;;		wreg, status,2
 10155 ;; Tracked objects:
 10156 ;;		On entry : 0/0
 10157 ;;		On exit  : 0/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10164 ;;Total ram usage:        0 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; Hardware stack levels required when called:    7
 10167 ;; This function calls:
 10168 ;;		Nothing
 10169 ;; This function is called by:
 10170 ;;		_main
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           	psect	text40
 10175  015E5A                     __ptext40:
 10176                           	opt stack 0
 10177  015E5A                     _InitSerialCommunication:
 10178                           	opt stack 23
 10179                           
 10180                           ;main.c: 140: TRISCbits.TRISC6 = 0;
 10181                           
 10182                           ;incstack = 0
 10183  015E5A  9C94               	bcf	3988,6,c	;volatile
 10184                           
 10185                           ;main.c: 141: TRISCbits.TRISC7 = 1;
 10186  015E5C  8E94               	bsf	3988,7,c	;volatile
 10187                           
 10188                           ;main.c: 143: TXSTA1 = 0b00100100;
 10189  015E5E  0E24               	movlw	36
 10190  015E60  6EAD               	movwf	4013,c	;volatile
 10191                           
 10192                           ;main.c: 144: RCSTA1 = 0b10010000;
 10193  015E62  0E90               	movlw	144
 10194  015E64  6EAC               	movwf	4012,c	;volatile
 10195                           
 10196                           ;main.c: 146: BAUDCON1bits.DTRXP = 0;
 10197  015E66  9A7E               	bcf	3966,5,c	;volatile
 10198                           
 10199                           ;main.c: 147: BAUDCON1bits.SCKP = 0;
 10200  015E68  987E               	bcf	3966,4,c	;volatile
 10201                           
 10202                           ;main.c: 148: BAUDCON1bits.WUE = 0;
 10203  015E6A  927E               	bcf	3966,1,c	;volatile
 10204                           
 10205                           ;main.c: 149: BAUDCON1bits.ABDEN = 0;
 10206  015E6C  907E               	bcf	3966,0,c	;volatile
 10207                           
 10208                           ;main.c: 152: TXSTA1bits.BRGH = 1;
 10209  015E6E  84AD               	bsf	4013,2,c	;volatile
 10210                           
 10211                           ;main.c: 153: BAUDCON1bits.BRG16 = 0;
 10212  015E70  967E               	bcf	3966,3,c	;volatile
 10213                           
 10214                           ;main.c: 154: SPBRG1 = 51;
 10215  015E72  0E33               	movlw	51
 10216  015E74  6EB0               	movwf	4016,c	;volatile
 10217  015E76  0012               	return		;funcret
 10218  015E78                     __end_of_InitSerialCommunication:
 10219                           	opt stack 0
 10220                           tosu	equ	0xFFF
 10221                           tosh	equ	0xFFE
 10222                           tosl	equ	0xFFD
 10223                           pclath	equ	0xFFA
 10224                           tblptru	equ	0xFF8
 10225                           tblptrh	equ	0xFF7
 10226                           tblptrl	equ	0xFF6
 10227                           tablat	equ	0xFF5
 10228                           intcon	equ	0xFF2
 10229                           postinc0	equ	0xFEE
 10230                           wreg	equ	0xFE8
 10231                           postdec1	equ	0xFE5
 10232                           fsr1h	equ	0xFE2
 10233                           fsr1l	equ	0xFE1
 10234                           indf2	equ	0xFDF
 10235                           postinc2	equ	0xFDE
 10236                           postdec2	equ	0xFDD
 10237                           plusw2	equ	0xFDB
 10238                           fsr2h	equ	0xFDA
 10239                           fsr2l	equ	0xFD9
 10240                           status	equ	0xFD8
 10241                           
 10242 ;; *************** function _InitADC *****************
 10243 ;; Defined at:
 10244 ;;		line 92 in file "main.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;		None
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;		None
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      void 
 10251 ;; Registers used:
 10252 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;Total ram usage:        1 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; Hardware stack levels required when called:    7
 10265 ;; This function calls:
 10266 ;;		Nothing
 10267 ;; This function is called by:
 10268 ;;		_main
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           	psect	text41
 10273  015726                     __ptext41:
 10274                           	opt stack 0
 10275  015726                     _InitADC:
 10276                           	opt stack 23
 10277                           
 10278                           ;main.c: 94: ADCON1 = 0b10101101;
 10279                           
 10280                           ;incstack = 0
 10281  015726  0EAD               	movlw	173
 10282  015728  6EC1               	movwf	4033,c	;volatile
 10283                           
 10284                           ;main.c: 95: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 10285  01572A  0E00               	movlw	0
 10286  01572C  0101               	movlb	1	; () banked
 10287  01572E  6F25               	movwf	(_thisReading+1)& (0+255),b
 10288  015730  0E00               	movlw	0
 10289  015732  6F24               	movwf	_thisReading& (0+255),b
 10290  015734  D010               	goto	l2116
 10291  015736                     
 10292                           ;main.c: 96: readings[thisReading] = 0;
 10293                           
 10294                           ; BSR set to: 1
 10295  015736  90D8               	bcf	status,0,c
 10296  015738  0101               	movlb	1	; () banked
 10297  01573A  3524               	rlcf	_thisReading& (0+255),w,b
 10298  01573C  6ED9               	movwf	fsr2l,c
 10299  01573E  3525               	rlcf	(_thisReading+1)& (0+255),w,b
 10300  015740  6EDA               	movwf	fsr2h,c
 10301  015742  0E00               	movlw	low _readings
 10302  015744  26D9               	addwf	fsr2l,f,c
 10303  015746  0E02               	movlw	high _readings
 10304  015748  22DA               	addwfc	fsr2h,f,c
 10305  01574A  0E00               	movlw	0
 10306  01574C  6EDE               	movwf	postinc2,c
 10307  01574E  0E00               	movlw	0
 10308  015750  6EDD               	movwf	postdec2,c
 10309                           
 10310                           ; BSR set to: 1
 10311  015752  4B24               	infsnz	_thisReading& (0+255),f,b
 10312  015754  2B25               	incf	(_thisReading+1)& (0+255),f,b
 10313  015756                     l2116:
 10314                           
 10315                           ; BSR set to: 1
 10316                           
 10317                           ; BSR set to: 1
 10318  015756  5049               	movf	_numReadings,w,c
 10319  015758  5D24               	subwf	_thisReading& (0+255),w,b
 10320  01575A  5125               	movf	(_thisReading+1)& (0+255),w,b
 10321  01575C  0A80               	xorlw	128
 10322  01575E  0100               	movlb	0	; () banked
 10323  015760  6F60               	movwf	??_InitADC& (0+255),b
 10324  015762  504A               	movf	_numReadings+1,w,c
 10325  015764  0A80               	xorlw	128
 10326  015766  5960               	subwfb	??_InitADC& (0+255),w,b
 10327  015768  B0D8               	btfsc	status,0,c
 10328  01576A  0012               	return	
 10329  01576C  D7E4               	goto	l2117
 10330  01576E                     __end_of_InitADC:
 10331                           	opt stack 0
 10332                           tosu	equ	0xFFF
 10333                           tosh	equ	0xFFE
 10334                           tosl	equ	0xFFD
 10335                           pclath	equ	0xFFA
 10336                           tblptru	equ	0xFF8
 10337                           tblptrh	equ	0xFF7
 10338                           tblptrl	equ	0xFF6
 10339                           tablat	equ	0xFF5
 10340                           intcon	equ	0xFF2
 10341                           postinc0	equ	0xFEE
 10342                           wreg	equ	0xFE8
 10343                           postdec1	equ	0xFE5
 10344                           fsr1h	equ	0xFE2
 10345                           fsr1l	equ	0xFE1
 10346                           indf2	equ	0xFDF
 10347                           postinc2	equ	0xFDE
 10348                           postdec2	equ	0xFDD
 10349                           plusw2	equ	0xFDB
 10350                           fsr2h	equ	0xFDA
 10351                           fsr2l	equ	0xFD9
 10352                           status	equ	0xFD8
 10353                           
 10354 ;; *************** function _ISR_Enable *****************
 10355 ;; Defined at:
 10356 ;;		line 27 in file "Library/ISR.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;		None
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;		None
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  1    wreg      void 
 10363 ;; Registers used:
 10364 ;;		None
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10374 ;;Total ram usage:        0 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; Hardware stack levels required when called:    7
 10377 ;; This function calls:
 10378 ;;		Nothing
 10379 ;; This function is called by:
 10380 ;;		_main
 10381 ;; This function uses a non-reentrant model
 10382 ;;
 10383                           
 10384                           	psect	text42
 10385  016128                     __ptext42:
 10386                           	opt stack 0
 10387  016128                     _ISR_Enable:
 10388                           	opt stack 23
 10389                           
 10390                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 10391                           
 10392                           ; BSR set to: 0
 10393                           ;incstack = 0
 10394  016128  8CF2               	bsf	intcon,6,c	;volatile
 10395                           
 10396                           ;ISR.c: 30: INTCONbits.GIE = 1;
 10397  01612A  8EF2               	bsf	intcon,7,c	;volatile
 10398                           
 10399                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 10400  01612C  88F2               	bsf	intcon,4,c	;volatile
 10401                           
 10402                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 10403  01612E  92F2               	bcf	intcon,1,c	;volatile
 10404  016130  0012               	return		;funcret
 10405  016132                     __end_of_ISR_Enable:
 10406                           	opt stack 0
 10407                           tosu	equ	0xFFF
 10408                           tosh	equ	0xFFE
 10409                           tosl	equ	0xFFD
 10410                           pclath	equ	0xFFA
 10411                           tblptru	equ	0xFF8
 10412                           tblptrh	equ	0xFF7
 10413                           tblptrl	equ	0xFF6
 10414                           tablat	equ	0xFF5
 10415                           intcon	equ	0xFF2
 10416                           postinc0	equ	0xFEE
 10417                           wreg	equ	0xFE8
 10418                           postdec1	equ	0xFE5
 10419                           fsr1h	equ	0xFE2
 10420                           fsr1l	equ	0xFE1
 10421                           indf2	equ	0xFDF
 10422                           postinc2	equ	0xFDE
 10423                           postdec2	equ	0xFDD
 10424                           plusw2	equ	0xFDB
 10425                           fsr2h	equ	0xFDA
 10426                           fsr2l	equ	0xFD9
 10427                           status	equ	0xFD8
 10428                           
 10429 ;; *************** function _HMI_Poll *****************
 10430 ;; Defined at:
 10431 ;;		line 252 in file "HMI.c"
 10432 ;; Parameters:    Size  Location     Type
 10433 ;;		None
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;		None
 10436 ;; Return value:  Size  Location     Type
 10437 ;;                  1    wreg      void 
 10438 ;; Registers used:
 10439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10440 ;; Tracked objects:
 10441 ;;		On entry : 0/0
 10442 ;;		On exit  : 0/0
 10443 ;;		Unchanged: 0/0
 10444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;Total ram usage:        0 bytes
 10450 ;; Hardware stack levels used:    1
 10451 ;; Hardware stack levels required when called:   15
 10452 ;; This function calls:
 10453 ;;		_Button_Poll
 10454 ;; This function is called by:
 10455 ;;		_main
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459                           	psect	text43
 10460  01510A                     __ptext43:
 10461                           	opt stack 0
 10462  01510A                     _HMI_Poll:
 10463                           	opt stack 15
 10464                           
 10465                           ;HMI.c: 254: TRISE = 0xFC;
 10466                           
 10467                           ;incstack = 0
 10468  01510A  0EFC               	movlw	252
 10469  01510C  6E96               	movwf	3990,c	;volatile
 10470                           
 10471                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 10472  01510E  0E74               	movlw	low (_HMIBoard+48)
 10473  015110  0100               	movlb	0	; () banked
 10474  015112  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10475  015114  0E01               	movlw	high (_HMIBoard+48)
 10476  015116  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10477  015118  0E01               	movlw	1
 10478  01511A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10479  01511C  EC2E  F09A         	call	_Button_Poll	;wreg free
 10480                           
 10481                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 10482  015120  0E56               	movlw	low (_HMIBoard+18)
 10483  015122  0100               	movlb	0	; () banked
 10484  015124  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10485  015126  0E01               	movlw	high (_HMIBoard+18)
 10486  015128  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10487  01512A  0E01               	movlw	1
 10488  01512C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10489  01512E  EC2E  F09A         	call	_Button_Poll	;wreg free
 10490                           
 10491                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 10492  015132  0E4C               	movlw	low (_HMIBoard+8)
 10493  015134  0100               	movlb	0	; () banked
 10494  015136  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10495  015138  0E01               	movlw	high (_HMIBoard+8)
 10496  01513A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10497  01513C  0E01               	movlw	1
 10498  01513E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10499  015140  EC2E  F09A         	call	_Button_Poll	;wreg free
 10500                           
 10501                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 10502  015144  0E60               	movlw	low (_HMIBoard+28)
 10503  015146  0100               	movlb	0	; () banked
 10504  015148  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10505  01514A  0E01               	movlw	high (_HMIBoard+28)
 10506  01514C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10507  01514E  0E01               	movlw	1
 10508  015150  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10509  015152  EC2E  F09A         	call	_Button_Poll	;wreg free
 10510                           
 10511                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 10512  015156  0E6A               	movlw	low (_HMIBoard+38)
 10513  015158  0100               	movlb	0	; () banked
 10514  01515A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10515  01515C  0E01               	movlw	high (_HMIBoard+38)
 10516  01515E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10517  015160  0E01               	movlw	1
 10518  015162  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10519  015164  EC2E  F09A         	call	_Button_Poll	;wreg free
 10520  015168  0012               	return		;funcret
 10521  01516A                     __end_of_HMI_Poll:
 10522                           	opt stack 0
 10523                           tosu	equ	0xFFF
 10524                           tosh	equ	0xFFE
 10525                           tosl	equ	0xFFD
 10526                           pclath	equ	0xFFA
 10527                           tblptru	equ	0xFF8
 10528                           tblptrh	equ	0xFF7
 10529                           tblptrl	equ	0xFF6
 10530                           tablat	equ	0xFF5
 10531                           intcon	equ	0xFF2
 10532                           postinc0	equ	0xFEE
 10533                           wreg	equ	0xFE8
 10534                           postdec1	equ	0xFE5
 10535                           fsr1h	equ	0xFE2
 10536                           fsr1l	equ	0xFE1
 10537                           indf2	equ	0xFDF
 10538                           postinc2	equ	0xFDE
 10539                           postdec2	equ	0xFDD
 10540                           plusw2	equ	0xFDB
 10541                           fsr2h	equ	0xFDA
 10542                           fsr2l	equ	0xFD9
 10543                           status	equ	0xFD8
 10544                           
 10545 ;; *************** function _Button_Poll *****************
 10546 ;; Defined at:
 10547 ;;		line 57 in file "Library/Button.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 10550 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 10551 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 10552 ;; Auto vars:     Size  Location     Type
 10553 ;;  Pin             1   35[BANK0 ] unsigned char 
 10554 ;; Return value:  Size  Location     Type
 10555 ;;                  1    wreg      unsigned char 
 10556 ;; Registers used:
 10557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10563 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10565 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10566 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10567 ;;Total ram usage:        9 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:   14
 10570 ;; This function calls:
 10571 ;;		_Event_DIPSwitch
 10572 ;;		_Event_NULL
 10573 ;;		_Event_TestButton
 10574 ;;		_HMI_DIPSwitch
 10575 ;;		_HMI_DownSwitch
 10576 ;;		_HMI_LeftSwitch
 10577 ;;		_HMI_RightSwitch
 10578 ;;		_HMI_UpSwitch
 10579 ;;		_MXK_DIPSwitch
 10580 ;;		_MXK_TestButton
 10581 ;; This function is called by:
 10582 ;;		_HMI_Poll
 10583 ;;		_MXK_Poll
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587                           	psect	text44
 10588  01345C                     __ptext44:
 10589                           	opt stack 0
 10590  01345C                     _Button_Poll:
 10591                           	opt stack 15
 10592                           
 10593                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 10594                           
 10595                           ;incstack = 0
 10596  01345C  0100               	movlb	0	; () banked
 10597  01345E  EE20 F007          	lfsr	2,7
 10598  013462  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10599  013464  26D9               	addwf	fsr2l,f,c
 10600  013466  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10601  013468  22DA               	addwfc	fsr2h,f,c
 10602  01346A  D801               	call	u12058
 10603  01346C  D00A               	goto	u12059
 10604  01346E                     u12058:
 10605  01346E  0005               	push	
 10606  013470  6EFA               	movwf	pclath,c
 10607  013472  50DE               	movf	postinc2,w,c
 10608  013474  6EFD               	movwf	tosl,c
 10609  013476  50DE               	movf	postinc2,w,c
 10610  013478  6EFE               	movwf	tosh,c
 10611  01347A  50DE               	movf	postinc2,w,c
 10612  01347C  6EFF               	movwf	tosu,c
 10613  01347E  50FA               	movf	pclath,w,c
 10614  013480  0012               	return		;indir
 10615  013482                     u12059:
 10616  013482  0100               	movlb	0	; () banked
 10617  013484  6F83               	movwf	Button_Poll@Pin& (0+255),b
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;Button.c: 61: if (pButton->mState == Pin)
 10621  013486  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10622  01348A  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10623  01348E  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10624  013490  18DE               	xorwf	postinc2,w,c
 10625  013492  A4D8               	btfss	status,2,c
 10626  013494  D01C               	goto	l11
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;Button.c: 62: {
 10630                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10631  013496  EE20 F001          	lfsr	2,1
 10632  01349A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10633  01349C  26D9               	addwf	fsr2l,f,c
 10634  01349E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10635  0134A0  22DA               	addwfc	fsr2h,f,c
 10636  0134A2  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10637  0134A4  5CDE               	subwf	postinc2,w,c
 10638  0134A6  B0D8               	btfsc	status,0,c
 10639  0134A8  D009               	goto	l12
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;Button.c: 66: pButton->mCount = 0;
 10643  0134AA  EE20 F001          	lfsr	2,1
 10644  0134AE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10645  0134B0  26D9               	addwf	fsr2l,f,c
 10646  0134B2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10647  0134B4  22DA               	addwfc	fsr2h,f,c
 10648  0134B6  0E00               	movlw	0
 10649  0134B8  6EDF               	movwf	indf2,c
 10650  0134BA  0012               	return	
 10651  0134BC                     l12:
 10652                           
 10653                           ; BSR set to: 0
 10654                           ;Button.c: 67: else
 10655                           ;Button.c: 68: pButton->mCount -= pIncrement;
 10656                           
 10657                           ; BSR set to: 0
 10658  0134BC  EE20 F001          	lfsr	2,1
 10659  0134C0  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10660  0134C2  26D9               	addwf	fsr2l,f,c
 10661  0134C4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10662  0134C6  22DA               	addwfc	fsr2h,f,c
 10663  0134C8  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10664  0134CA  5EDF               	subwf	indf2,f,c
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;Button.c: 69: }
 10668  0134CC  0012               	return	
 10669  0134CE                     l11:
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 10673                           
 10674                           ; BSR set to: 0
 10675  0134CE  EE20 F001          	lfsr	2,1
 10676  0134D2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10677  0134D4  26D9               	addwf	fsr2l,f,c
 10678  0134D6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10679  0134D8  22DA               	addwfc	fsr2h,f,c
 10680  0134DA  50DF               	movf	indf2,w,c
 10681  0134DC  6F7E               	movwf	??_Button_Poll& (0+255),b
 10682  0134DE  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 10683  0134E0  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10684  0134E2  277E               	addwf	??_Button_Poll& (0+255),f,b
 10685  0134E4  0E00               	movlw	0
 10686  0134E6  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 10687  0134E8  EE20 F001          	lfsr	2,1
 10688  0134EC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10689  0134EE  26D9               	addwf	fsr2l,f,c
 10690  0134F0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10691  0134F2  22DA               	addwfc	fsr2h,f,c
 10692  0134F4  50DF               	movf	indf2,w,c
 10693  0134F6  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10694  0134F8  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10695  0134FA  517E               	movf	??_Button_Poll& (0+255),w,b
 10696  0134FC  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10697  0134FE  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 10698  013500  0A80               	xorlw	128
 10699  013502  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 10700  013504  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 10701  013506  0A80               	xorlw	128
 10702  013508  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 10703  01350A  B0D8               	btfsc	status,0,c
 10704  01350C  0012               	return	
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;Button.c: 73: {
 10708                           ;Button.c: 75: pButton->mCount += pIncrement;
 10709  01350E  EE20 F001          	lfsr	2,1
 10710  013512  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10711  013514  26D9               	addwf	fsr2l,f,c
 10712  013516  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10713  013518  22DA               	addwfc	fsr2h,f,c
 10714  01351A  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10715  01351C  26DF               	addwf	indf2,f,c
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 10719  01351E  EE20 F002          	lfsr	2,2
 10720  013522  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10721  013524  26D9               	addwf	fsr2l,f,c
 10722  013526  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10723  013528  22DA               	addwfc	fsr2h,f,c
 10724  01352A  EE10 F001          	lfsr	1,1
 10725  01352E  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10726  013530  26E1               	addwf	fsr1l,f,c
 10727  013532  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10728  013534  22E2               	addwfc	fsr1h,f,c
 10729  013536  50E7               	movf	indf1,w,c
 10730  013538  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10731  01353A  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10732  01353C  50DE               	movf	postinc2,w,c
 10733  01353E  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10734  013540  50DE               	movf	postinc2,w,c
 10735  013542  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 10736  013544  A0D8               	btfss	status,0,c
 10737  013546  0012               	return	
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;Button.c: 77: {
 10741                           ;Button.c: 79: pButton->mState = Pin;
 10742  013548  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10743  01354C  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10744  013550  C083  FFDF         	movff	Button_Poll@Pin,indf2
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;Button.c: 80: pButton->mCount = 0;
 10748  013554  EE20 F001          	lfsr	2,1
 10749  013558  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10750  01355A  26D9               	addwf	fsr2l,f,c
 10751  01355C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10752  01355E  22DA               	addwfc	fsr2h,f,c
 10753  013560  0E00               	movlw	0
 10754  013562  6EDF               	movwf	indf2,c
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;Button.c: 83: pButton->mFunction(Pin);
 10758  013564  EE20 F004          	lfsr	2,4
 10759  013568  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10760  01356A  26D9               	addwf	fsr2l,f,c
 10761  01356C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10762  01356E  22DA               	addwfc	fsr2h,f,c
 10763  013570  D801               	call	u12108
 10764  013572  0012               	return	
 10765  013574                     u12108:
 10766  013574  0005               	push	
 10767  013576  6EFA               	movwf	pclath,c
 10768  013578  50DE               	movf	postinc2,w,c
 10769  01357A  6EFD               	movwf	tosl,c
 10770  01357C  50DE               	movf	postinc2,w,c
 10771  01357E  6EFE               	movwf	tosh,c
 10772  013580  50DE               	movf	postinc2,w,c
 10773  013582  6EFF               	movwf	tosu,c
 10774  013584  50FA               	movf	pclath,w,c
 10775  013586  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10776  013588  0012               	return		;indir
 10777  01358A                     __end_of_Button_Poll:
 10778                           	opt stack 0
 10779                           tosu	equ	0xFFF
 10780                           tosh	equ	0xFFE
 10781                           tosl	equ	0xFFD
 10782                           pclath	equ	0xFFA
 10783                           tblptru	equ	0xFF8
 10784                           tblptrh	equ	0xFF7
 10785                           tblptrl	equ	0xFF6
 10786                           tablat	equ	0xFF5
 10787                           intcon	equ	0xFF2
 10788                           postinc0	equ	0xFEE
 10789                           wreg	equ	0xFE8
 10790                           indf1	equ	0xFE7
 10791                           postdec1	equ	0xFE5
 10792                           fsr1h	equ	0xFE2
 10793                           fsr1l	equ	0xFE1
 10794                           indf2	equ	0xFDF
 10795                           postinc2	equ	0xFDE
 10796                           postdec2	equ	0xFDD
 10797                           plusw2	equ	0xFDB
 10798                           fsr2h	equ	0xFDA
 10799                           fsr2l	equ	0xFD9
 10800                           status	equ	0xFD8
 10801                           
 10802 ;; *************** function _MXK_DIPSwitch *****************
 10803 ;; Defined at:
 10804 ;;		line 24 in file "Library/MXK.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;		None
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  1    wreg      unsigned char 
 10811 ;; Registers used:
 10812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;Total ram usage:        0 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; Hardware stack levels required when called:    8
 10825 ;; This function calls:
 10826 ;;		_Port_GetQuad
 10827 ;; This function is called by:
 10828 ;;		_FunctInitButton
 10829 ;;		_Button_Poll
 10830 ;;		_main
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           	psect	text45
 10835  015FBE                     __ptext45:
 10836                           	opt stack 0
 10837  015FBE                     _MXK_DIPSwitch:
 10838                           	opt stack 22
 10839                           
 10840                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 10841                           
 10842                           ;incstack = 0
 10843  015FBE  0E93               	movlw	low _PortD
 10844  015FC0  0100               	movlb	0	; () banked
 10845  015FC2  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10846  015FC4  0E01               	movlw	high _PortD
 10847  015FC6  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10848  015FC8  0E00               	movlw	0
 10849  015FCA  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10850  015FCC  EC9F  F0AC         	call	_Port_GetQuad
 10851  015FD0  0012               	return	
 10852  015FD2                     __end_of_MXK_DIPSwitch:
 10853                           	opt stack 0
 10854                           tosu	equ	0xFFF
 10855                           tosh	equ	0xFFE
 10856                           tosl	equ	0xFFD
 10857                           pclath	equ	0xFFA
 10858                           tblptru	equ	0xFF8
 10859                           tblptrh	equ	0xFF7
 10860                           tblptrl	equ	0xFF6
 10861                           tablat	equ	0xFF5
 10862                           intcon	equ	0xFF2
 10863                           postinc0	equ	0xFEE
 10864                           wreg	equ	0xFE8
 10865                           indf1	equ	0xFE7
 10866                           postdec1	equ	0xFE5
 10867                           fsr1h	equ	0xFE2
 10868                           fsr1l	equ	0xFE1
 10869                           indf2	equ	0xFDF
 10870                           postinc2	equ	0xFDE
 10871                           postdec2	equ	0xFDD
 10872                           plusw2	equ	0xFDB
 10873                           fsr2h	equ	0xFDA
 10874                           fsr2l	equ	0xFD9
 10875                           status	equ	0xFD8
 10876                           
 10877 ;; *************** function _HMI_DIPSwitch *****************
 10878 ;; Defined at:
 10879 ;;		line 47 in file "HMI.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;		None
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;		None
 10884 ;; Return value:  Size  Location     Type
 10885 ;;                  1    wreg      unsigned char 
 10886 ;; Registers used:
 10887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;Total ram usage:        0 bytes
 10898 ;; Hardware stack levels used:    1
 10899 ;; Hardware stack levels required when called:    8
 10900 ;; This function calls:
 10901 ;;		_Port_GetQuad
 10902 ;; This function is called by:
 10903 ;;		_HMI_Init
 10904 ;;		_Button_Poll
 10905 ;;		_main
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           	psect	text46
 10910  015FD2                     __ptext46:
 10911                           	opt stack 0
 10912  015FD2                     _HMI_DIPSwitch:
 10913                           	opt stack 20
 10914                           
 10915                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 10916                           
 10917                           ;incstack = 0
 10918  015FD2  0E89               	movlw	low _PortE
 10919  015FD4  0100               	movlb	0	; () banked
 10920  015FD6  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10921  015FD8  0E01               	movlw	high _PortE
 10922  015FDA  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10923  015FDC  0E00               	movlw	0
 10924  015FDE  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10925  015FE0  EC9F  F0AC         	call	_Port_GetQuad	;wreg free
 10926  015FE4  0012               	return	
 10927  015FE6                     __end_of_HMI_DIPSwitch:
 10928                           	opt stack 0
 10929                           tosu	equ	0xFFF
 10930                           tosh	equ	0xFFE
 10931                           tosl	equ	0xFFD
 10932                           pclath	equ	0xFFA
 10933                           tblptru	equ	0xFF8
 10934                           tblptrh	equ	0xFF7
 10935                           tblptrl	equ	0xFF6
 10936                           tablat	equ	0xFF5
 10937                           intcon	equ	0xFF2
 10938                           postinc0	equ	0xFEE
 10939                           wreg	equ	0xFE8
 10940                           indf1	equ	0xFE7
 10941                           postdec1	equ	0xFE5
 10942                           fsr1h	equ	0xFE2
 10943                           fsr1l	equ	0xFE1
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           plusw2	equ	0xFDB
 10948                           fsr2h	equ	0xFDA
 10949                           fsr2l	equ	0xFD9
 10950                           status	equ	0xFD8
 10951                           
 10952 ;; *************** function _HMI_DownSwitch *****************
 10953 ;; Defined at:
 10954 ;;		line 42 in file "HMI.c"
 10955 ;; Parameters:    Size  Location     Type
 10956 ;;		None
 10957 ;; Auto vars:     Size  Location     Type
 10958 ;;		None
 10959 ;; Return value:  Size  Location     Type
 10960 ;;                  1    wreg      unsigned char 
 10961 ;; Registers used:
 10962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10963 ;; Tracked objects:
 10964 ;;		On entry : 0/0
 10965 ;;		On exit  : 0/0
 10966 ;;		Unchanged: 0/0
 10967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10972 ;;Total ram usage:        0 bytes
 10973 ;; Hardware stack levels used:    1
 10974 ;; Hardware stack levels required when called:    8
 10975 ;; This function calls:
 10976 ;;		_Port_GetPin
 10977 ;; This function is called by:
 10978 ;;		_HMI_Init
 10979 ;;		_Button_Poll
 10980 ;;		_main
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           	psect	text47
 10985  015FE6                     __ptext47:
 10986                           	opt stack 0
 10987  015FE6                     _HMI_DownSwitch:
 10988                           	opt stack 20
 10989                           
 10990                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 10991                           
 10992                           ;incstack = 0
 10993  015FE6  0E89               	movlw	low _PortE
 10994  015FE8  0100               	movlb	0	; () banked
 10995  015FEA  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10996  015FEC  0E01               	movlw	high _PortE
 10997  015FEE  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10998  015FF0  0E06               	movlw	6
 10999  015FF2  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11000  015FF4  ECF9  F0AC         	call	_Port_GetPin	;wreg free
 11001  015FF8  0012               	return	
 11002  015FFA                     __end_of_HMI_DownSwitch:
 11003                           	opt stack 0
 11004                           tosu	equ	0xFFF
 11005                           tosh	equ	0xFFE
 11006                           tosl	equ	0xFFD
 11007                           pclath	equ	0xFFA
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           intcon	equ	0xFF2
 11013                           postinc0	equ	0xFEE
 11014                           wreg	equ	0xFE8
 11015                           indf1	equ	0xFE7
 11016                           postdec1	equ	0xFE5
 11017                           fsr1h	equ	0xFE2
 11018                           fsr1l	equ	0xFE1
 11019                           indf2	equ	0xFDF
 11020                           postinc2	equ	0xFDE
 11021                           postdec2	equ	0xFDD
 11022                           plusw2	equ	0xFDB
 11023                           fsr2h	equ	0xFDA
 11024                           fsr2l	equ	0xFD9
 11025                           status	equ	0xFD8
 11026                           
 11027 ;; *************** function _HMI_UpSwitch *****************
 11028 ;; Defined at:
 11029 ;;		line 37 in file "HMI.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;		None
 11032 ;; Auto vars:     Size  Location     Type
 11033 ;;		None
 11034 ;; Return value:  Size  Location     Type
 11035 ;;                  1    wreg      unsigned char 
 11036 ;; Registers used:
 11037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11038 ;; Tracked objects:
 11039 ;;		On entry : 0/0
 11040 ;;		On exit  : 0/0
 11041 ;;		Unchanged: 0/0
 11042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11047 ;;Total ram usage:        0 bytes
 11048 ;; Hardware stack levels used:    1
 11049 ;; Hardware stack levels required when called:    8
 11050 ;; This function calls:
 11051 ;;		_Port_GetPin
 11052 ;; This function is called by:
 11053 ;;		_HMI_Init
 11054 ;;		_Button_Poll
 11055 ;;		_main
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059                           	psect	text48
 11060  015FFA                     __ptext48:
 11061                           	opt stack 0
 11062  015FFA                     _HMI_UpSwitch:
 11063                           	opt stack 22
 11064                           
 11065                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 11066                           
 11067                           ;incstack = 0
 11068  015FFA  0E89               	movlw	low _PortE
 11069  015FFC  0100               	movlb	0	; () banked
 11070  015FFE  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11071  016000  0E01               	movlw	high _PortE
 11072  016002  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11073  016004  0E07               	movlw	7
 11074  016006  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11075  016008  ECF9  F0AC         	call	_Port_GetPin	;wreg free
 11076  01600C  0012               	return	
 11077  01600E                     __end_of_HMI_UpSwitch:
 11078                           	opt stack 0
 11079                           tosu	equ	0xFFF
 11080                           tosh	equ	0xFFE
 11081                           tosl	equ	0xFFD
 11082                           pclath	equ	0xFFA
 11083                           tblptru	equ	0xFF8
 11084                           tblptrh	equ	0xFF7
 11085                           tblptrl	equ	0xFF6
 11086                           tablat	equ	0xFF5
 11087                           intcon	equ	0xFF2
 11088                           postinc0	equ	0xFEE
 11089                           wreg	equ	0xFE8
 11090                           indf1	equ	0xFE7
 11091                           postdec1	equ	0xFE5
 11092                           fsr1h	equ	0xFE2
 11093                           fsr1l	equ	0xFE1
 11094                           indf2	equ	0xFDF
 11095                           postinc2	equ	0xFDE
 11096                           postdec2	equ	0xFDD
 11097                           plusw2	equ	0xFDB
 11098                           fsr2h	equ	0xFDA
 11099                           fsr2l	equ	0xFD9
 11100                           status	equ	0xFD8
 11101                           
 11102 ;; *************** function _HMI_RightSwitch *****************
 11103 ;; Defined at:
 11104 ;;		line 32 in file "HMI.c"
 11105 ;; Parameters:    Size  Location     Type
 11106 ;;		None
 11107 ;; Auto vars:     Size  Location     Type
 11108 ;;		None
 11109 ;; Return value:  Size  Location     Type
 11110 ;;                  1    wreg      unsigned char 
 11111 ;; Registers used:
 11112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11113 ;; Tracked objects:
 11114 ;;		On entry : 0/0
 11115 ;;		On exit  : 0/0
 11116 ;;		Unchanged: 0/0
 11117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;Total ram usage:        0 bytes
 11123 ;; Hardware stack levels used:    1
 11124 ;; Hardware stack levels required when called:    8
 11125 ;; This function calls:
 11126 ;;		_Port_GetPin
 11127 ;; This function is called by:
 11128 ;;		_HMI_Init
 11129 ;;		_Button_Poll
 11130 ;;		_main
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           	psect	text49
 11135  01600E                     __ptext49:
 11136                           	opt stack 0
 11137  01600E                     _HMI_RightSwitch:
 11138                           	opt stack 22
 11139                           
 11140                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 11141                           
 11142                           ;incstack = 0
 11143  01600E  0E89               	movlw	low _PortE
 11144  016010  0100               	movlb	0	; () banked
 11145  016012  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11146  016014  0E01               	movlw	high _PortE
 11147  016016  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11148  016018  0E04               	movlw	4
 11149  01601A  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11150  01601C  ECF9  F0AC         	call	_Port_GetPin	;wreg free
 11151  016020  0012               	return	
 11152  016022                     __end_of_HMI_RightSwitch:
 11153                           	opt stack 0
 11154                           tosu	equ	0xFFF
 11155                           tosh	equ	0xFFE
 11156                           tosl	equ	0xFFD
 11157                           pclath	equ	0xFFA
 11158                           tblptru	equ	0xFF8
 11159                           tblptrh	equ	0xFF7
 11160                           tblptrl	equ	0xFF6
 11161                           tablat	equ	0xFF5
 11162                           intcon	equ	0xFF2
 11163                           postinc0	equ	0xFEE
 11164                           wreg	equ	0xFE8
 11165                           indf1	equ	0xFE7
 11166                           postdec1	equ	0xFE5
 11167                           fsr1h	equ	0xFE2
 11168                           fsr1l	equ	0xFE1
 11169                           indf2	equ	0xFDF
 11170                           postinc2	equ	0xFDE
 11171                           postdec2	equ	0xFDD
 11172                           plusw2	equ	0xFDB
 11173                           fsr2h	equ	0xFDA
 11174                           fsr2l	equ	0xFD9
 11175                           status	equ	0xFD8
 11176                           
 11177 ;; *************** function _HMI_LeftSwitch *****************
 11178 ;; Defined at:
 11179 ;;		line 27 in file "HMI.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;		None
 11182 ;; Auto vars:     Size  Location     Type
 11183 ;;		None
 11184 ;; Return value:  Size  Location     Type
 11185 ;;                  1    wreg      unsigned char 
 11186 ;; Registers used:
 11187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11188 ;; Tracked objects:
 11189 ;;		On entry : 0/0
 11190 ;;		On exit  : 0/0
 11191 ;;		Unchanged: 0/0
 11192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;Total ram usage:        0 bytes
 11198 ;; Hardware stack levels used:    1
 11199 ;; Hardware stack levels required when called:    8
 11200 ;; This function calls:
 11201 ;;		_Port_GetPin
 11202 ;; This function is called by:
 11203 ;;		_HMI_Init
 11204 ;;		_Button_Poll
 11205 ;;		_main
 11206 ;; This function uses a non-reentrant model
 11207 ;;
 11208                           
 11209                           	psect	text50
 11210  016022                     __ptext50:
 11211                           	opt stack 0
 11212  016022                     _HMI_LeftSwitch:
 11213                           	opt stack 20
 11214                           
 11215                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 11216                           
 11217                           ;incstack = 0
 11218  016022  0E89               	movlw	low _PortE
 11219  016024  0100               	movlb	0	; () banked
 11220  016026  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11221  016028  0E01               	movlw	high _PortE
 11222  01602A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11223  01602C  0E05               	movlw	5
 11224  01602E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11225  016030  ECF9  F0AC         	call	_Port_GetPin	;wreg free
 11226  016034  0012               	return	
 11227  016036                     __end_of_HMI_LeftSwitch:
 11228                           	opt stack 0
 11229                           tosu	equ	0xFFF
 11230                           tosh	equ	0xFFE
 11231                           tosl	equ	0xFFD
 11232                           pclath	equ	0xFFA
 11233                           tblptru	equ	0xFF8
 11234                           tblptrh	equ	0xFF7
 11235                           tblptrl	equ	0xFF6
 11236                           tablat	equ	0xFF5
 11237                           intcon	equ	0xFF2
 11238                           postinc0	equ	0xFEE
 11239                           wreg	equ	0xFE8
 11240                           indf1	equ	0xFE7
 11241                           postdec1	equ	0xFE5
 11242                           fsr1h	equ	0xFE2
 11243                           fsr1l	equ	0xFE1
 11244                           indf2	equ	0xFDF
 11245                           postinc2	equ	0xFDE
 11246                           postdec2	equ	0xFDD
 11247                           plusw2	equ	0xFDB
 11248                           fsr2h	equ	0xFDA
 11249                           fsr2l	equ	0xFD9
 11250                           status	equ	0xFD8
 11251                           
 11252 ;; *************** function _MXK_TestButton *****************
 11253 ;; Defined at:
 11254 ;;		line 14 in file "Library/MXK.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;		None
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;		None
 11259 ;; Return value:  Size  Location     Type
 11260 ;;                  1    wreg      unsigned char 
 11261 ;; Registers used:
 11262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11263 ;; Tracked objects:
 11264 ;;		On entry : 0/0
 11265 ;;		On exit  : 0/0
 11266 ;;		Unchanged: 0/0
 11267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11272 ;;Total ram usage:        0 bytes
 11273 ;; Hardware stack levels used:    1
 11274 ;; Hardware stack levels required when called:    8
 11275 ;; This function calls:
 11276 ;;		_Port_GetPin
 11277 ;; This function is called by:
 11278 ;;		_FunctInitButton
 11279 ;;		_Button_Poll
 11280 ;;		_main
 11281 ;; This function uses a non-reentrant model
 11282 ;;
 11283                           
 11284                           	psect	text51
 11285  016036                     __ptext51:
 11286                           	opt stack 0
 11287  016036                     _MXK_TestButton:
 11288                           	opt stack 22
 11289                           
 11290                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 11291                           
 11292                           ;incstack = 0
 11293  016036  0E9D               	movlw	low _PortB
 11294  016038  0100               	movlb	0	; () banked
 11295  01603A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11296  01603C  0E01               	movlw	high _PortB
 11297  01603E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11298  016040  0E04               	movlw	4
 11299  016042  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11300  016044  ECF9  F0AC         	call	_Port_GetPin	;wreg free
 11301  016048  0012               	return	
 11302  01604A                     __end_of_MXK_TestButton:
 11303                           	opt stack 0
 11304                           tosu	equ	0xFFF
 11305                           tosh	equ	0xFFE
 11306                           tosl	equ	0xFFD
 11307                           pclath	equ	0xFFA
 11308                           tblptru	equ	0xFF8
 11309                           tblptrh	equ	0xFF7
 11310                           tblptrl	equ	0xFF6
 11311                           tablat	equ	0xFF5
 11312                           intcon	equ	0xFF2
 11313                           postinc0	equ	0xFEE
 11314                           wreg	equ	0xFE8
 11315                           indf1	equ	0xFE7
 11316                           postdec1	equ	0xFE5
 11317                           fsr1h	equ	0xFE2
 11318                           fsr1l	equ	0xFE1
 11319                           indf2	equ	0xFDF
 11320                           postinc2	equ	0xFDE
 11321                           postdec2	equ	0xFDD
 11322                           plusw2	equ	0xFDB
 11323                           fsr2h	equ	0xFDA
 11324                           fsr2l	equ	0xFD9
 11325                           status	equ	0xFD8
 11326                           
 11327 ;; *************** function _Port_GetQuad *****************
 11328 ;; Defined at:
 11329 ;;		line 498 in file "Library/Port.c"
 11330 ;; Parameters:    Size  Location     Type
 11331 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11332 ;;		 -> PortE(10), PortD(10), 
 11333 ;;  pQuad           1    2[BANK0 ] enum E6776
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;  Output          1    5[BANK0 ] unsigned char 
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  1    wreg      unsigned char 
 11338 ;; Registers used:
 11339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11345 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11347 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11348 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11349 ;;Total ram usage:        6 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; Hardware stack levels required when called:    7
 11352 ;; This function calls:
 11353 ;;		Nothing
 11354 ;; This function is called by:
 11355 ;;		_HMI_DIPSwitch
 11356 ;;		_MXK_DIPSwitch
 11357 ;;		_Port_ToggleQuad
 11358 ;; This function uses a non-reentrant model
 11359 ;;
 11360                           
 11361                           	psect	text52
 11362  01593E                     __ptext52:
 11363                           	opt stack 0
 11364  01593E                     _Port_GetQuad:
 11365                           	opt stack 22
 11366                           
 11367                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 11368                           
 11369                           ;incstack = 0
 11370  01593E  0100               	movlb	0	; () banked
 11371  015940  EE20 F006          	lfsr	2,6
 11372  015944  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 11373  015946  26D9               	addwf	fsr2l,f,c
 11374  015948  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 11375  01594A  22DA               	addwfc	fsr2h,f,c
 11376  01594C  CFDE F063          	movff	postinc2,??_Port_GetQuad
 11377  015950  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 11378  015954  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 11379  015958  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 11380  01595C  50DF               	movf	indf2,w,c
 11381  01595E  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 11385  015960  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 11386  015962  0D04               	mullw	4
 11387  015964  28F3               	incf	prodl,w,c
 11388  015966  6F63               	movwf	??_Port_GetQuad& (0+255),b
 11389  015968  D002               	goto	u11350
 11390  01596A                     u11355:
 11391  01596A  90D8               	bcf	status,0,c
 11392  01596C  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 11393  01596E                     u11350:
 11394  01596E  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 11395  015970  D7FC               	goto	u11355
 11396                           
 11397                           ;Port.c: 502: Output &= 0xF;
 11398  015972  0E0F               	movlw	15
 11399  015974  0100               	movlb	0	; () banked
 11400  015976  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 11401                           
 11402                           ; BSR set to: 0
 11403                           ;Port.c: 503: return Output;
 11404  015978  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 11405  01597A  0012               	return	
 11406  01597C                     __end_of_Port_GetQuad:
 11407                           	opt stack 0
 11408                           tosu	equ	0xFFF
 11409                           tosh	equ	0xFFE
 11410                           tosl	equ	0xFFD
 11411                           pclath	equ	0xFFA
 11412                           tblptru	equ	0xFF8
 11413                           tblptrh	equ	0xFF7
 11414                           tblptrl	equ	0xFF6
 11415                           tablat	equ	0xFF5
 11416                           prodl	equ	0xFF3
 11417                           intcon	equ	0xFF2
 11418                           postinc0	equ	0xFEE
 11419                           wreg	equ	0xFE8
 11420                           indf1	equ	0xFE7
 11421                           postdec1	equ	0xFE5
 11422                           fsr1h	equ	0xFE2
 11423                           fsr1l	equ	0xFE1
 11424                           indf2	equ	0xFDF
 11425                           postinc2	equ	0xFDE
 11426                           postdec2	equ	0xFDD
 11427                           plusw2	equ	0xFDB
 11428                           fsr2h	equ	0xFDA
 11429                           fsr2l	equ	0xFD9
 11430                           status	equ	0xFD8
 11431                           
 11432 ;; *************** function _Event_DIPSwitch *****************
 11433 ;; Defined at:
 11434 ;;		line 22 in file "Events.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;  pState          1    wreg     unsigned char 
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;  pState          1   25[BANK0 ] unsigned char 
 11439 ;;  Bar             1   26[BANK0 ] unsigned char 
 11440 ;; Return value:  Size  Location     Type
 11441 ;;                  1    wreg      void 
 11442 ;; Registers used:
 11443 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11450 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11452 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;Total ram usage:        2 bytes
 11454 ;; Hardware stack levels used:    1
 11455 ;; Hardware stack levels required when called:   13
 11456 ;; This function calls:
 11457 ;;		_HMI_GetBar
 11458 ;;		_HMI_SetBar
 11459 ;;		_LED_Toggle
 11460 ;; This function is called by:
 11461 ;;		_FunctInitButton
 11462 ;;		_Button_Poll
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           	psect	text53
 11467  015D8E                     __ptext53:
 11468                           	opt stack 0
 11469  015D8E                     _Event_DIPSwitch:
 11470                           	opt stack 15
 11471                           
 11472                           ; BSR set to: 0
 11473                           ;incstack = 0
 11474                           ;Event_DIPSwitch@pState stored from wreg
 11475  015D8E  0100               	movlb	0	; () banked
 11476  015D90  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 11477                           
 11478                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 11479  015D92  ECA5  F0B0         	call	_HMI_GetBar	;wreg free
 11480  015D96  0100               	movlb	0	; () banked
 11481  015D98  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 11482                           
 11483                           ; BSR set to: 0
 11484                           ;Events.c: 25: Bar &= 0x0F;
 11485  015D9A  0E0F               	movlw	15
 11486  015D9C  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 11487                           
 11488                           ; BSR set to: 0
 11489                           ;Events.c: 26: pState <<= 4;
 11490  015D9E  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 11491  015DA0  0EF0               	movlw	240
 11492  015DA2  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 11493                           
 11494                           ; BSR set to: 0
 11495                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 11496  015DA4  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 11497  015DA6  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 11498  015DA8  EC99  F0B0         	call	_HMI_SetBar
 11499                           
 11500                           ;Events.c: 32: LED_Toggle(eLED1);
 11501  015DAC  0E00               	movlw	0
 11502  015DAE  EC40  F0AC         	call	_LED_Toggle
 11503  015DB2  0012               	return		;funcret
 11504  015DB4                     __end_of_Event_DIPSwitch:
 11505                           	opt stack 0
 11506                           tosu	equ	0xFFF
 11507                           tosh	equ	0xFFE
 11508                           tosl	equ	0xFFD
 11509                           pclath	equ	0xFFA
 11510                           tblptru	equ	0xFF8
 11511                           tblptrh	equ	0xFF7
 11512                           tblptrl	equ	0xFF6
 11513                           tablat	equ	0xFF5
 11514                           prodl	equ	0xFF3
 11515                           intcon	equ	0xFF2
 11516                           postinc0	equ	0xFEE
 11517                           wreg	equ	0xFE8
 11518                           indf1	equ	0xFE7
 11519                           postdec1	equ	0xFE5
 11520                           fsr1h	equ	0xFE2
 11521                           fsr1l	equ	0xFE1
 11522                           indf2	equ	0xFDF
 11523                           postinc2	equ	0xFDE
 11524                           postdec2	equ	0xFDD
 11525                           plusw2	equ	0xFDB
 11526                           fsr2h	equ	0xFDA
 11527                           fsr2l	equ	0xFD9
 11528                           status	equ	0xFD8
 11529                           
 11530 ;; *************** function _Event_NULL *****************
 11531 ;; Defined at:
 11532 ;;		line 9 in file "Events.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;  pState          1    wreg     unsigned char 
 11535 ;; Auto vars:     Size  Location     Type
 11536 ;;  pState          1    0[COMRAM] unsigned char 
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  1    wreg      void 
 11539 ;; Registers used:
 11540 ;;		wreg
 11541 ;; Tracked objects:
 11542 ;;		On entry : 0/0
 11543 ;;		On exit  : 0/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11550 ;;Total ram usage:        0 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; Hardware stack levels required when called:    7
 11553 ;; This function calls:
 11554 ;;		Nothing
 11555 ;; This function is called by:
 11556 ;;		_HMI_Init
 11557 ;;		_Button_Poll
 11558 ;; This function uses a non-reentrant model
 11559 ;;
 11560                           
 11561                           	psect	text54
 11562  001404                     __ptext54:
 11563                           	opt stack 0
 11564  001404                     _Event_NULL:
 11565                           	opt stack 21
 11566                           
 11567                           ;incstack = 0
 11568  001404  0012               	return		;funcret
 11569  001406                     __end_of_Event_NULL:
 11570                           	opt stack 0
 11571                           tosu	equ	0xFFF
 11572                           tosh	equ	0xFFE
 11573                           tosl	equ	0xFFD
 11574                           pclath	equ	0xFFA
 11575                           tblptru	equ	0xFF8
 11576                           tblptrh	equ	0xFF7
 11577                           tblptrl	equ	0xFF6
 11578                           tablat	equ	0xFF5
 11579                           prodl	equ	0xFF3
 11580                           intcon	equ	0xFF2
 11581                           postinc0	equ	0xFEE
 11582                           wreg	equ	0xFE8
 11583                           indf1	equ	0xFE7
 11584                           postdec1	equ	0xFE5
 11585                           fsr1h	equ	0xFE2
 11586                           fsr1l	equ	0xFE1
 11587                           indf2	equ	0xFDF
 11588                           postinc2	equ	0xFDE
 11589                           postdec2	equ	0xFDD
 11590                           plusw2	equ	0xFDB
 11591                           fsr2h	equ	0xFDA
 11592                           fsr2l	equ	0xFD9
 11593                           status	equ	0xFD8
 11594                           
 11595 ;; *************** function _Event_TestButton *****************
 11596 ;; Defined at:
 11597 ;;		line 52 in file "Events.c"
 11598 ;; Parameters:    Size  Location     Type
 11599 ;;  pState          1    wreg     unsigned char 
 11600 ;; Auto vars:     Size  Location     Type
 11601 ;;  pState          1   25[BANK0 ] unsigned char 
 11602 ;; Return value:  Size  Location     Type
 11603 ;;                  1    wreg      void 
 11604 ;; Registers used:
 11605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11606 ;; Tracked objects:
 11607 ;;		On entry : 0/0
 11608 ;;		On exit  : 0/0
 11609 ;;		Unchanged: 0/0
 11610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11614 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;Total ram usage:        1 bytes
 11616 ;; Hardware stack levels used:    1
 11617 ;; Hardware stack levels required when called:   13
 11618 ;; This function calls:
 11619 ;;		_HMI_SetButton
 11620 ;;		_HMI_SetNumber
 11621 ;;		_LED_Toggle
 11622 ;; This function is called by:
 11623 ;;		_FunctInitButton
 11624 ;;		_Button_Poll
 11625 ;; This function uses a non-reentrant model
 11626 ;;
 11627                           
 11628                           	psect	text55
 11629  015B3E                     __ptext55:
 11630                           	opt stack 0
 11631  015B3E                     _Event_TestButton:
 11632                           	opt stack 15
 11633                           
 11634                           ;incstack = 0
 11635                           ;Event_TestButton@pState stored from wreg
 11636  015B3E  0100               	movlb	0	; () banked
 11637  015B40  6F79               	movwf	Event_TestButton@pState& (0+255),b
 11638                           
 11639                           ;Events.c: 56: static UINT8 j = 0;
 11640                           ;Events.c: 60: if (pState == 0)
 11641  015B42  0100               	movlb	0	; () banked
 11642  015B44  5179               	movf	Event_TestButton@pState& (0+255),w,b
 11643  015B46  A4D8               	btfss	status,2,c
 11644  015B48  D00F               	goto	l1873
 11645                           
 11646                           ; BSR set to: 0
 11647                           ;Events.c: 61: {
 11648                           ;Events.c: 62: j++;
 11649  015B4A  2A3C               	incf	Event_TestButton@j,f,c
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;Events.c: 63: val += j;
 11653  015B4C  503C               	movf	Event_TestButton@j,w,c
 11654  015B4E  2633               	addwf	_val,f,c
 11655  015B50  0E00               	movlw	0
 11656  015B52  2234               	addwfc	_val+1,f,c
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;Events.c: 64: HMI_SetNumber( val );
 11660  015B54  C033  F076         	movff	_val,HMI_SetNumber@pInput
 11661  015B58  C034  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 11662  015B5C  ECDA  F0AE         	call	_HMI_SetNumber	;wreg free
 11663                           
 11664                           ;Events.c: 67: HMI_SetButton( j & 3 );
 11665  015B60  503C               	movf	Event_TestButton@j,w,c
 11666  015B62  0B03               	andlw	3
 11667  015B64  EC7C  F0A5         	call	_HMI_SetButton
 11668  015B68                     l1873:
 11669                           
 11670                           ;Events.c: 68: }
 11671                           ;Events.c: 72: LED_Toggle(eLED1);
 11672  015B68  0E00               	movlw	0
 11673  015B6A  EC40  F0AC         	call	_LED_Toggle
 11674  015B6E  0012               	return		;funcret
 11675  015B70                     __end_of_Event_TestButton:
 11676                           	opt stack 0
 11677                           tosu	equ	0xFFF
 11678                           tosh	equ	0xFFE
 11679                           tosl	equ	0xFFD
 11680                           pclath	equ	0xFFA
 11681                           tblptru	equ	0xFF8
 11682                           tblptrh	equ	0xFF7
 11683                           tblptrl	equ	0xFF6
 11684                           tablat	equ	0xFF5
 11685                           prodl	equ	0xFF3
 11686                           intcon	equ	0xFF2
 11687                           postinc0	equ	0xFEE
 11688                           wreg	equ	0xFE8
 11689                           indf1	equ	0xFE7
 11690                           postdec1	equ	0xFE5
 11691                           fsr1h	equ	0xFE2
 11692                           fsr1l	equ	0xFE1
 11693                           indf2	equ	0xFDF
 11694                           postinc2	equ	0xFDE
 11695                           postdec2	equ	0xFDD
 11696                           plusw2	equ	0xFDB
 11697                           fsr2h	equ	0xFDA
 11698                           fsr2l	equ	0xFD9
 11699                           status	equ	0xFD8
 11700                           
 11701 ;; *************** function _HMI_SetButton *****************
 11702 ;; Defined at:
 11703 ;;		line 186 in file "HMI.c"
 11704 ;; Parameters:    Size  Location     Type
 11705 ;;  pValue          1    wreg     unsigned char 
 11706 ;; Auto vars:     Size  Location     Type
 11707 ;;  pValue          1    6[BANK0 ] unsigned char 
 11708 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 11709 ;;  v               1    7[BANK0 ] unsigned char 
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  1    wreg      void 
 11712 ;; Registers used:
 11713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11720 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11721 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11722 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11723 ;;Total ram usage:        8 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; Hardware stack levels required when called:    7
 11726 ;; This function calls:
 11727 ;;		Nothing
 11728 ;; This function is called by:
 11729 ;;		_Event_TestButton
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           	psect	text56
 11734  014AF8                     __ptext56:
 11735                           	opt stack 0
 11736  014AF8                     _HMI_SetButton:
 11737                           	opt stack 20
 11738                           
 11739                           ;incstack = 0
 11740                           ;HMI_SetButton@pValue stored from wreg
 11741  014AF8  0100               	movlb	0	; () banked
 11742  014AFA  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 11743                           
 11744                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 11745  014AFC  0E5E               	movlw	low HMI_SetButton@F7213
 11746  014AFE  6EF6               	movwf	tblptrl,c
 11747  014B00                     	if	1	;There is more than 1 active tblptr byte
 11748  014B00  0EFC               	movlw	high HMI_SetButton@F7213
 11749  014B02  6EF7               	movwf	tblptrh,c
 11750  014B04                     	endif
 11751  014B04                     	if	1	;There are 3 active tblptr bytes
 11752  014B04  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 11753  014B06  6EF8               	movwf	tblptru,c
 11754  014B08                     	endif
 11755  014B08  0009               	tblrd		*+
 11756  014B0A  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 11757  014B0E  0009               	tblrd		*+
 11758  014B10  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 11759  014B14  0009               	tblrd		*+
 11760  014B16  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 11761  014B1A  000A               	tblrd		*-
 11762  014B1C  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 11763                           
 11764                           ;HMI.c: 189: UINT8 v = 0b00010001;
 11765  014B20  0E11               	movlw	17
 11766  014B22  0100               	movlb	0	; () banked
 11767  014B24  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;HMI.c: 190: pValue &= 3;
 11771  014B26  0E03               	movlw	3
 11772  014B28  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 11773                           
 11774                           ; BSR set to: 0
 11775                           ;HMI.c: 191: v = v << reindex[pValue];
 11776  014B2A  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 11777  014B2C  0D01               	mullw	1
 11778  014B2E  0E62               	movlw	low HMI_SetButton@reindex
 11779  014B30  24F3               	addwf	prodl,w,c
 11780  014B32  6ED9               	movwf	fsr2l,c
 11781  014B34  0E00               	movlw	high HMI_SetButton@reindex
 11782  014B36  20F4               	addwfc	prodh,w,c
 11783  014B38  6EDA               	movwf	fsr2h,c
 11784  014B3A  50DF               	movf	indf2,w,c
 11785  014B3C  6F60               	movwf	??_HMI_SetButton& (0+255),b
 11786  014B3E  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 11787  014B42  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 11788  014B44  D002               	goto	u11514
 11789  014B46                     u11515:
 11790  014B46  90D8               	bcf	status,0,c
 11791  014B48  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 11792  014B4A                     u11514:
 11793  014B4A  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 11794  014B4C  D7FC               	goto	u11515
 11795  014B4E  0100               	movlb	0	; () banked
 11796  014B50  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 11797  014B52  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;HMI.c: 192: v = v >> 4;
 11801  014B54  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 11802  014B56  0B0F               	andlw	15
 11803  014B58  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11804                           
 11805                           ; BSR set to: 0
 11806                           ;HMI.c: 193: v = v & 0x0F;
 11807  014B5A  5167               	movf	HMI_SetButton@v& (0+255),w,b
 11808  014B5C  0B0F               	andlw	15
 11809  014B5E  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11810                           
 11811                           ; BSR set to: 0
 11812                           ;HMI.c: 194: HMIBoard.pButton = v;
 11813  014B60  0101               	movlb	1	; () banked
 11814  014B62  514A               	movf	(_HMIBoard+6)& (0+255),w,b
 11815  014B64  0100               	movlb	0	; () banked
 11816  014B66  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11817  014B68  0BF0               	andlw	-16
 11818  014B6A  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11819  014B6C  0101               	movlb	1	; () banked
 11820  014B6E  6F4A               	movwf	(_HMIBoard+6)& (0+255),b
 11821                           
 11822                           ; BSR set to: 1
 11823  014B70  0012               	return		;funcret
 11824  014B72                     __end_of_HMI_SetButton:
 11825                           	opt stack 0
 11826                           tosu	equ	0xFFF
 11827                           tosh	equ	0xFFE
 11828                           tosl	equ	0xFFD
 11829                           pclath	equ	0xFFA
 11830                           tblptru	equ	0xFF8
 11831                           tblptrh	equ	0xFF7
 11832                           tblptrl	equ	0xFF6
 11833                           tablat	equ	0xFF5
 11834                           prodh	equ	0xFF4
 11835                           prodl	equ	0xFF3
 11836                           intcon	equ	0xFF2
 11837                           postinc0	equ	0xFEE
 11838                           wreg	equ	0xFE8
 11839                           indf1	equ	0xFE7
 11840                           postdec1	equ	0xFE5
 11841                           fsr1h	equ	0xFE2
 11842                           fsr1l	equ	0xFE1
 11843                           indf2	equ	0xFDF
 11844                           postinc2	equ	0xFDE
 11845                           postdec2	equ	0xFDD
 11846                           plusw2	equ	0xFDB
 11847                           fsr2h	equ	0xFDA
 11848                           fsr2l	equ	0xFD9
 11849                           status	equ	0xFD8
 11850                           
 11851 ;; *************** function _LED_Toggle *****************
 11852 ;; Defined at:
 11853 ;;		line 50 in file "Library/LED.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;  pLED            1    wreg     enum E6739
 11856 ;; Auto vars:     Size  Location     Type
 11857 ;;  pLED            1   24[BANK0 ] enum E6739
 11858 ;; Return value:  Size  Location     Type
 11859 ;;                  1    wreg      void 
 11860 ;; Registers used:
 11861 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11862 ;; Tracked objects:
 11863 ;;		On entry : 0/0
 11864 ;;		On exit  : 0/0
 11865 ;;		Unchanged: 0/0
 11866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11870 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11871 ;;Total ram usage:        1 bytes
 11872 ;; Hardware stack levels used:    1
 11873 ;; Hardware stack levels required when called:   12
 11874 ;; This function calls:
 11875 ;;		_Port_TogglePin
 11876 ;; This function is called by:
 11877 ;;		_LCD_Reset
 11878 ;;		_Event_DIPSwitch
 11879 ;;		_Event_TestButton
 11880 ;;		_Event_ADCSequenceComplete
 11881 ;;		_Event_HMI_DIPSwitch
 11882 ;;		_Event_HMI_LeftButton
 11883 ;;		_Event_HMI_RightButton
 11884 ;;		_Event_HMI_UpButton
 11885 ;;		_Event_HMI_DownButton
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           	psect	text57
 11890  015880                     __ptext57:
 11891                           	opt stack 0
 11892  015880                     _LED_Toggle:
 11893                           	opt stack 15
 11894                           
 11895                           ; BSR set to: 1
 11896                           ;incstack = 0
 11897                           ;LED_Toggle@pLED stored from wreg
 11898  015880  0100               	movlb	0	; () banked
 11899  015882  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 11900                           
 11901                           ;LED.c: 52: switch (pLED)
 11902  015884  D014               	goto	l234
 11903  015886                     
 11904                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 11905  015886  0EA7               	movlw	low _PortC
 11906  015888  0100               	movlb	0	; () banked
 11907  01588A  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11908  01588C  0E01               	movlw	high _PortC
 11909  01588E  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11910  015890  0E00               	movlw	0
 11911  015892  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11912  015894  EC4A  F0AE         	call	_Port_TogglePin	;wreg free
 11913                           
 11914                           ;LED.c: 56: break;
 11915  015898  0012               	return	
 11916  01589A                     
 11917                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 11918  01589A  0EA7               	movlw	low _PortC
 11919  01589C  0100               	movlb	0	; () banked
 11920  01589E  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11921  0158A0  0E01               	movlw	high _PortC
 11922  0158A2  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11923  0158A4  0E01               	movlw	1
 11924  0158A6  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11925  0158A8  EC4A  F0AE         	call	_Port_TogglePin	;wreg free
 11926                           
 11927                           ;LED.c: 60: }
 11928                           
 11929                           ;LED.c: 59: break;
 11930  0158AC  0012               	return	
 11931  0158AE                     l234:
 11932  0158AE  0100               	movlb	0	; () banked
 11933  0158B0  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 11934                           
 11935                           ; Switch size 1, requested type "space"
 11936                           ; Number of cases is 2, Range of values is 0 to 1
 11937                           ; switch strategies available:
 11938                           ; Name         Instructions Cycles
 11939                           ; simple_byte            7     4 (average)
 11940                           ;	Chosen strategy is simple_byte
 11941  0158B2  0A00               	xorlw	0	; case 0
 11942  0158B4  B4D8               	btfsc	status,2,c
 11943  0158B6  D7E7               	goto	l235
 11944  0158B8  0A01               	xorlw	1	; case 1
 11945  0158BA  A4D8               	btfss	status,2,c
 11946  0158BC  0012               	return	
 11947  0158BE  D7ED               	goto	l237
 11948  0158C0                     __end_of_LED_Toggle:
 11949                           	opt stack 0
 11950                           tosu	equ	0xFFF
 11951                           tosh	equ	0xFFE
 11952                           tosl	equ	0xFFD
 11953                           pclath	equ	0xFFA
 11954                           tblptru	equ	0xFF8
 11955                           tblptrh	equ	0xFF7
 11956                           tblptrl	equ	0xFF6
 11957                           tablat	equ	0xFF5
 11958                           prodh	equ	0xFF4
 11959                           prodl	equ	0xFF3
 11960                           intcon	equ	0xFF2
 11961                           postinc0	equ	0xFEE
 11962                           wreg	equ	0xFE8
 11963                           indf1	equ	0xFE7
 11964                           postdec1	equ	0xFE5
 11965                           fsr1h	equ	0xFE2
 11966                           fsr1l	equ	0xFE1
 11967                           indf2	equ	0xFDF
 11968                           postinc2	equ	0xFDE
 11969                           postdec2	equ	0xFDD
 11970                           plusw2	equ	0xFDB
 11971                           fsr2h	equ	0xFDA
 11972                           fsr2l	equ	0xFD9
 11973                           status	equ	0xFD8
 11974                           
 11975 ;; *************** function _Port_TogglePin *****************
 11976 ;; Defined at:
 11977 ;;		line 278 in file "Library/Port.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 11980 ;;		 -> PortC(10), 
 11981 ;;  pPin            1   22[BANK0 ] enum E6750
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;  Value           1   23[BANK0 ] unsigned char 
 11984 ;; Return value:  Size  Location     Type
 11985 ;;                  1    wreg      void 
 11986 ;; Registers used:
 11987 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11988 ;; Tracked objects:
 11989 ;;		On entry : 0/0
 11990 ;;		On exit  : 0/0
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11993 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11996 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11997 ;;Total ram usage:        4 bytes
 11998 ;; Hardware stack levels used:    1
 11999 ;; Hardware stack levels required when called:   11
 12000 ;; This function calls:
 12001 ;;		_Port_GetPin
 12002 ;;		_Port_SetPin
 12003 ;; This function is called by:
 12004 ;;		_LED_Toggle
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           	psect	text58
 12009  015C94                     __ptext58:
 12010                           	opt stack 0
 12011  015C94                     _Port_TogglePin:
 12012                           	opt stack 15
 12013                           
 12014                           ;Port.c: 280: UINT8 Value;
 12015                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 12016                           
 12017                           ;incstack = 0
 12018  015C94  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 12019  015C98  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 12020  015C9C  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 12021  015CA0  ECF9  F0AC         	call	_Port_GetPin	;wreg free
 12022  015CA4  0100               	movlb	0	; () banked
 12023  015CA6  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;Port.c: 282: Value ^= 0x01;
 12027  015CA8  0E01               	movlw	1
 12028  015CAA  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 12032  015CAC  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 12033  015CB0  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 12034  015CB4  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 12035  015CB8  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 12036  015CBC  ECB7  F09F         	call	_Port_SetPin	;wreg free
 12037  015CC0  0012               	return		;funcret
 12038  015CC2                     __end_of_Port_TogglePin:
 12039                           	opt stack 0
 12040                           tosu	equ	0xFFF
 12041                           tosh	equ	0xFFE
 12042                           tosl	equ	0xFFD
 12043                           pclath	equ	0xFFA
 12044                           tblptru	equ	0xFF8
 12045                           tblptrh	equ	0xFF7
 12046                           tblptrl	equ	0xFF6
 12047                           tablat	equ	0xFF5
 12048                           prodh	equ	0xFF4
 12049                           prodl	equ	0xFF3
 12050                           intcon	equ	0xFF2
 12051                           postinc0	equ	0xFEE
 12052                           wreg	equ	0xFE8
 12053                           indf1	equ	0xFE7
 12054                           postdec1	equ	0xFE5
 12055                           fsr1h	equ	0xFE2
 12056                           fsr1l	equ	0xFE1
 12057                           indf2	equ	0xFDF
 12058                           postinc2	equ	0xFDE
 12059                           postdec2	equ	0xFDD
 12060                           plusw2	equ	0xFDB
 12061                           fsr2h	equ	0xFDA
 12062                           fsr2l	equ	0xFD9
 12063                           status	equ	0xFD8
 12064                           
 12065 ;; *************** function _Port_SetPin *****************
 12066 ;; Defined at:
 12067 ;;		line 247 in file "Library/Port.c"
 12068 ;; Parameters:    Size  Location     Type
 12069 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 12070 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 12071 ;;  pPin            1   17[BANK0 ] enum E6750
 12072 ;;  pValue          1   18[BANK0 ] unsigned char 
 12073 ;; Auto vars:     Size  Location     Type
 12074 ;;  Type            1   19[BANK0 ] enum E6795
 12075 ;; Return value:  Size  Location     Type
 12076 ;;                  1    wreg      void 
 12077 ;; Registers used:
 12078 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12079 ;; Tracked objects:
 12080 ;;		On entry : 0/0
 12081 ;;		On exit  : 0/0
 12082 ;;		Unchanged: 0/0
 12083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12084 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12087 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12088 ;;Total ram usage:        5 bytes
 12089 ;; Hardware stack levels used:    1
 12090 ;; Hardware stack levels required when called:   10
 12091 ;; This function calls:
 12092 ;;		_Byte_SetBit
 12093 ;;		_Word_GetPair
 12094 ;; This function is called by:
 12095 ;;		_Reset_Low
 12096 ;;		_Reset_High
 12097 ;;		_LED_Set
 12098 ;;		_Port_TogglePin
 12099 ;;		_Motor_Step
 12100 ;;		_MXK_Init
 12101 ;;		_Motor_Init
 12102 ;; This function uses a non-reentrant model
 12103 ;;
 12104                           
 12105                           	psect	text59
 12106  013F6E                     __ptext59:
 12107                           	opt stack 0
 12108  013F6E                     _Port_SetPin:
 12109                           	opt stack 19
 12110                           
 12111                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 12112                           
 12113                           ;incstack = 0
 12114  013F6E  0E08               	movlw	8
 12115  013F70  0100               	movlb	0	; () banked
 12116  013F72  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 12117  013F74  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12118  013F76  0E00               	movlw	0
 12119  013F78  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 12120  013F7A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12121  013F7C  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 12122  013F80  ECB8  F0AD         	call	_Word_GetPair	;wreg free
 12123  013F84  0100               	movlb	0	; () banked
 12124  013F86  6F73               	movwf	Port_SetPin@Type& (0+255),b
 12125                           
 12126                           ;Port.c: 250: switch (Type)
 12127  013F88  D03D               	goto	l427
 12128  013F8A                     
 12129                           ; BSR set to: 0
 12130                           ;Port.c: 256: pValue &= 1;
 12131                           
 12132                           ; BSR set to: 0
 12133  013F8A  0E01               	movlw	1
 12134  013F8C  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12138  013F8E  EE20 F002          	lfsr	2,2
 12139  013F92  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12140  013F94  26D9               	addwf	fsr2l,f,c
 12141  013F96  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12142  013F98  22DA               	addwfc	fsr2h,f,c
 12143  013F9A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12144  013F9E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12145  013FA2  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12146  013FA6  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12147  013FAA  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 12148                           
 12149                           ;Port.c: 258: break;
 12150  013FAE  0012               	return	
 12151  013FB0                     
 12152                           ;Port.c: 261: pValue &= 1;
 12153  013FB0  0E01               	movlw	1
 12154  013FB2  0100               	movlb	0	; () banked
 12155  013FB4  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12156                           
 12157                           ;Port.c: 262: pValue ^= 1;
 12158  013FB6  0E01               	movlw	1
 12159  013FB8  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12163  013FBA  EE20 F002          	lfsr	2,2
 12164  013FBE  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12165  013FC0  26D9               	addwf	fsr2l,f,c
 12166  013FC2  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12167  013FC4  22DA               	addwfc	fsr2h,f,c
 12168  013FC6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12169  013FCA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12170  013FCE  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12171  013FD2  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12172  013FD6  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 12173                           
 12174                           ;Port.c: 264: break;
 12175  013FDA  0012               	return	
 12176  013FDC                     
 12177                           ;Port.c: 266: pValue &= 1;
 12178  013FDC  0E01               	movlw	1
 12179  013FDE  0100               	movlb	0	; () banked
 12180  013FE0  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 12184  013FE2  EE20 F004          	lfsr	2,4
 12185  013FE6  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12186  013FE8  26D9               	addwf	fsr2l,f,c
 12187  013FEA  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12188  013FEC  22DA               	addwfc	fsr2h,f,c
 12189  013FEE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12190  013FF2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12191  013FF6  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12192  013FFA  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12193  013FFE  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 12194                           
 12195                           ;Port.c: 269: }
 12196                           
 12197                           ;Port.c: 268: break;
 12198  014002  0012               	return	
 12199  014004                     l427:
 12200  014004  0100               	movlb	0	; () banked
 12201  014006  5173               	movf	Port_SetPin@Type& (0+255),w,b
 12202                           
 12203                           ; Switch size 1, requested type "space"
 12204                           ; Number of cases is 4, Range of values is 0 to 3
 12205                           ; switch strategies available:
 12206                           ; Name         Instructions Cycles
 12207                           ; simple_byte           13     7 (average)
 12208                           ;	Chosen strategy is simple_byte
 12209  014008  0A00               	xorlw	0	; case 0
 12210  01400A  B4D8               	btfsc	status,2,c
 12211  01400C  0012               	return	
 12212  01400E  0A01               	xorlw	1	; case 1
 12213  014010  B4D8               	btfsc	status,2,c
 12214  014012  D7BB               	goto	l430
 12215  014014  0A03               	xorlw	3	; case 2
 12216  014016  B4D8               	btfsc	status,2,c
 12217  014018  D7CB               	goto	l432
 12218  01401A  0A01               	xorlw	1	; case 3
 12219  01401C  A4D8               	btfss	status,2,c
 12220  01401E  0012               	return	
 12221  014020  D7DD               	goto	l433
 12222  014022                     __end_of_Port_SetPin:
 12223                           	opt stack 0
 12224                           tosu	equ	0xFFF
 12225                           tosh	equ	0xFFE
 12226                           tosl	equ	0xFFD
 12227                           pclath	equ	0xFFA
 12228                           tblptru	equ	0xFF8
 12229                           tblptrh	equ	0xFF7
 12230                           tblptrl	equ	0xFF6
 12231                           tablat	equ	0xFF5
 12232                           prodh	equ	0xFF4
 12233                           prodl	equ	0xFF3
 12234                           intcon	equ	0xFF2
 12235                           postinc0	equ	0xFEE
 12236                           wreg	equ	0xFE8
 12237                           indf1	equ	0xFE7
 12238                           postdec1	equ	0xFE5
 12239                           fsr1h	equ	0xFE2
 12240                           fsr1l	equ	0xFE1
 12241                           indf2	equ	0xFDF
 12242                           postinc2	equ	0xFDE
 12243                           postdec2	equ	0xFDD
 12244                           plusw2	equ	0xFDB
 12245                           fsr2h	equ	0xFDA
 12246                           fsr2l	equ	0xFD9
 12247                           status	equ	0xFD8
 12248                           
 12249 ;; *************** function _Port_GetPin *****************
 12250 ;; Defined at:
 12251 ;;		line 271 in file "Library/Port.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 12254 ;;		 -> PortB(10), PortE(10), PortC(10), 
 12255 ;;  pPin            1    2[BANK0 ] enum E6750
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;  Output          1    5[BANK0 ] unsigned char 
 12258 ;; Return value:  Size  Location     Type
 12259 ;;                  1    wreg      unsigned char 
 12260 ;; Registers used:
 12261 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12267 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12270 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12271 ;;Total ram usage:        6 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    7
 12274 ;; This function calls:
 12275 ;;		Nothing
 12276 ;; This function is called by:
 12277 ;;		_Port_TogglePin
 12278 ;;		_HMI_LeftSwitch
 12279 ;;		_HMI_RightSwitch
 12280 ;;		_HMI_UpSwitch
 12281 ;;		_HMI_DownSwitch
 12282 ;;		_MXK_TestButton
 12283 ;; This function uses a non-reentrant model
 12284 ;;
 12285                           
 12286                           	psect	text60
 12287  0159F2                     __ptext60:
 12288                           	opt stack 0
 12289  0159F2                     _Port_GetPin:
 12290                           	opt stack 22
 12291                           
 12292                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 12293                           
 12294                           ;incstack = 0
 12295  0159F2  0100               	movlb	0	; () banked
 12296  0159F4  EE20 F006          	lfsr	2,6
 12297  0159F8  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 12298  0159FA  26D9               	addwf	fsr2l,f,c
 12299  0159FC  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 12300  0159FE  22DA               	addwfc	fsr2h,f,c
 12301  015A00  CFDE F063          	movff	postinc2,??_Port_GetPin
 12302  015A04  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 12303  015A08  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 12304  015A0C  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 12305  015A10  50DF               	movf	indf2,w,c
 12306  015A12  6F65               	movwf	Port_GetPin@Output& (0+255),b
 12307                           
 12308                           ; BSR set to: 0
 12309                           ;Port.c: 274: Output >>= (UINT8)pPin;
 12310  015A14  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 12311  015A16  6F63               	movwf	??_Port_GetPin& (0+255),b
 12312  015A18  D002               	goto	u9780
 12313  015A1A                     u9785:
 12314  015A1A  90D8               	bcf	status,0,c
 12315  015A1C  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 12316  015A1E                     u9780:
 12317  015A1E  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 12318  015A20  D7FC               	goto	u9785
 12319                           
 12320                           ;Port.c: 275: Output &= 1;
 12321  015A22  0E01               	movlw	1
 12322  015A24  0100               	movlb	0	; () banked
 12323  015A26  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 12324                           
 12325                           ; BSR set to: 0
 12326                           ;Port.c: 276: return Output;
 12327  015A28  5165               	movf	Port_GetPin@Output& (0+255),w,b
 12328  015A2A  0012               	return	
 12329  015A2C                     __end_of_Port_GetPin:
 12330                           	opt stack 0
 12331                           tosu	equ	0xFFF
 12332                           tosh	equ	0xFFE
 12333                           tosl	equ	0xFFD
 12334                           pclath	equ	0xFFA
 12335                           tblptru	equ	0xFF8
 12336                           tblptrh	equ	0xFF7
 12337                           tblptrl	equ	0xFF6
 12338                           tablat	equ	0xFF5
 12339                           prodh	equ	0xFF4
 12340                           prodl	equ	0xFF3
 12341                           intcon	equ	0xFF2
 12342                           postinc0	equ	0xFEE
 12343                           wreg	equ	0xFE8
 12344                           indf1	equ	0xFE7
 12345                           postdec1	equ	0xFE5
 12346                           fsr1h	equ	0xFE2
 12347                           fsr1l	equ	0xFE1
 12348                           indf2	equ	0xFDF
 12349                           postinc2	equ	0xFDE
 12350                           postdec2	equ	0xFDD
 12351                           plusw2	equ	0xFDB
 12352                           fsr2h	equ	0xFDA
 12353                           fsr2l	equ	0xFD9
 12354                           status	equ	0xFD8
 12355                           
 12356 ;; *************** function _HMI_SetBar *****************
 12357 ;; Defined at:
 12358 ;;		line 205 in file "HMI.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;  pValue          1    wreg     unsigned char 
 12361 ;; Auto vars:     Size  Location     Type
 12362 ;;  pValue          1    0[BANK0 ] unsigned char 
 12363 ;; Return value:  Size  Location     Type
 12364 ;;                  1    wreg      void 
 12365 ;; Registers used:
 12366 ;;		wreg
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12376 ;;Total ram usage:        1 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    7
 12379 ;; This function calls:
 12380 ;;		Nothing
 12381 ;; This function is called by:
 12382 ;;		_Event_DIPSwitch
 12383 ;;		_Event_HMI_DIPSwitch
 12384 ;;		_Event_HMI_LeftButton
 12385 ;;		_Event_HMI_RightButton
 12386 ;; This function uses a non-reentrant model
 12387 ;;
 12388                           
 12389                           	psect	text61
 12390  016132                     __ptext61:
 12391                           	opt stack 0
 12392  016132                     _HMI_SetBar:
 12393                           	opt stack 20
 12394                           
 12395                           ; BSR set to: 0
 12396                           ;incstack = 0
 12397                           ;HMI_SetBar@pValue stored from wreg
 12398  016132  0100               	movlb	0	; () banked
 12399  016134  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 12400                           
 12401                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 12402  016136  C060  F14B         	movff	HMI_SetBar@pValue,_HMIBoard+7
 12403  01613A  0012               	return		;funcret
 12404  01613C                     __end_of_HMI_SetBar:
 12405                           	opt stack 0
 12406                           tosu	equ	0xFFF
 12407                           tosh	equ	0xFFE
 12408                           tosl	equ	0xFFD
 12409                           pclath	equ	0xFFA
 12410                           tblptru	equ	0xFF8
 12411                           tblptrh	equ	0xFF7
 12412                           tblptrl	equ	0xFF6
 12413                           tablat	equ	0xFF5
 12414                           prodh	equ	0xFF4
 12415                           prodl	equ	0xFF3
 12416                           intcon	equ	0xFF2
 12417                           postinc0	equ	0xFEE
 12418                           wreg	equ	0xFE8
 12419                           indf1	equ	0xFE7
 12420                           postdec1	equ	0xFE5
 12421                           fsr1h	equ	0xFE2
 12422                           fsr1l	equ	0xFE1
 12423                           indf2	equ	0xFDF
 12424                           postinc2	equ	0xFDE
 12425                           postdec2	equ	0xFDD
 12426                           plusw2	equ	0xFDB
 12427                           fsr2h	equ	0xFDA
 12428                           fsr2l	equ	0xFD9
 12429                           status	equ	0xFD8
 12430                           
 12431 ;; *************** function _HMI_GetBar *****************
 12432 ;; Defined at:
 12433 ;;		line 209 in file "HMI.c"
 12434 ;; Parameters:    Size  Location     Type
 12435 ;;		None
 12436 ;; Auto vars:     Size  Location     Type
 12437 ;;		None
 12438 ;; Return value:  Size  Location     Type
 12439 ;;                  1    wreg      unsigned char 
 12440 ;; Registers used:
 12441 ;;		wreg, status,2
 12442 ;; Tracked objects:
 12443 ;;		On entry : 0/0
 12444 ;;		On exit  : 0/0
 12445 ;;		Unchanged: 0/0
 12446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12451 ;;Total ram usage:        0 bytes
 12452 ;; Hardware stack levels used:    1
 12453 ;; Hardware stack levels required when called:    7
 12454 ;; This function calls:
 12455 ;;		Nothing
 12456 ;; This function is called by:
 12457 ;;		_Event_DIPSwitch
 12458 ;;		_Event_HMI_DIPSwitch
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           	psect	text62
 12463  01614A                     __ptext62:
 12464                           	opt stack 0
 12465  01614A                     _HMI_GetBar:
 12466                           	opt stack 20
 12467                           
 12468                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 12469                           
 12470                           ;incstack = 0
 12471  01614A  0101               	movlb	1	; () banked
 12472  01614C  514B               	movf	(_HMIBoard+7)& (0+255),w,b
 12473  01614E  0012               	return	
 12474  016150                     __end_of_HMI_GetBar:
 12475                           	opt stack 0
 12476                           tosu	equ	0xFFF
 12477                           tosh	equ	0xFFE
 12478                           tosl	equ	0xFFD
 12479                           pclath	equ	0xFFA
 12480                           tblptru	equ	0xFF8
 12481                           tblptrh	equ	0xFF7
 12482                           tblptrl	equ	0xFF6
 12483                           tablat	equ	0xFF5
 12484                           prodh	equ	0xFF4
 12485                           prodl	equ	0xFF3
 12486                           intcon	equ	0xFF2
 12487                           postinc0	equ	0xFEE
 12488                           wreg	equ	0xFE8
 12489                           indf1	equ	0xFE7
 12490                           postdec1	equ	0xFE5
 12491                           fsr1h	equ	0xFE2
 12492                           fsr1l	equ	0xFE1
 12493                           indf2	equ	0xFDF
 12494                           postinc2	equ	0xFDE
 12495                           postdec2	equ	0xFDD
 12496                           plusw2	equ	0xFDB
 12497                           fsr2h	equ	0xFDA
 12498                           fsr2l	equ	0xFD9
 12499                           status	equ	0xFD8
 12500                           
 12501 ;; *************** function _HMI_Init *****************
 12502 ;; Defined at:
 12503 ;;		line 104 in file "HMI.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;		None
 12506 ;; Auto vars:     Size  Location     Type
 12507 ;;  in              2   72[BANK0 ] unsigned short 
 12508 ;; Return value:  Size  Location     Type
 12509 ;;                  1    wreg      void 
 12510 ;; Registers used:
 12511 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12512 ;; Tracked objects:
 12513 ;;		On entry : 0/0
 12514 ;;		On exit  : 0/0
 12515 ;;		Unchanged: 0/0
 12516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12518 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12520 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12521 ;;Total ram usage:        2 bytes
 12522 ;; Hardware stack levels used:    1
 12523 ;; Hardware stack levels required when called:   16
 12524 ;; This function calls:
 12525 ;;		_Button_Init
 12526 ;;		_SPI_Init
 12527 ;;		_SPI_MinSpeed
 12528 ;; This function is called by:
 12529 ;;		_main
 12530 ;; This function uses a non-reentrant model
 12531 ;;
 12532                           
 12533                           	psect	text63
 12534  012822                     __ptext63:
 12535                           	opt stack 0
 12536  012822                     _HMI_Init:
 12537                           	opt stack 14
 12538                           
 12539                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 12540                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 12541                           
 12542                           ; BSR set to: 1
 12543                           ;incstack = 0
 12544  012822  0E74               	movlw	low (_HMIBoard+48)
 12545  012824  0100               	movlb	0	; () banked
 12546  012826  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12547  012828  0E01               	movlw	high (_HMIBoard+48)
 12548  01282A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12549  01282C  0E00               	movlw	0
 12550  01282E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12551  012830  0E02               	movlw	2
 12552  012832  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12553  012834  0E50               	movlw	low _HMI_InitButtons
 12554  012836  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12555  012838  0E61               	movlw	high _HMI_InitButtons
 12556  01283A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12557  01283C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12558  01283E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12559  012840  0ED2               	movlw	low _HMI_DIPSwitch
 12560  012842  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12561  012844  0E5F               	movlw	high _HMI_DIPSwitch
 12562  012846  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12563  012848  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 12564  01284A  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12565  01284C  0E04               	movlw	low _Event_NULL
 12566  01284E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12567  012850  0E14               	movlw	high _Event_NULL
 12568  012852  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12569  012854  0E00               	movlw	low (_Event_NULL shr (0+16))
 12570  012856  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12571  012858  EC11  F0A0         	call	_Button_Init	;wreg free
 12572                           
 12573                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 12574                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 12575  01285C  0E56               	movlw	low (_HMIBoard+18)
 12576  01285E  0100               	movlb	0	; () banked
 12577  012860  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12578  012862  0E01               	movlw	high (_HMIBoard+18)
 12579  012864  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12580  012866  0E00               	movlw	0
 12581  012868  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12582  01286A  0E02               	movlw	2
 12583  01286C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12584  01286E  0E50               	movlw	low _HMI_InitButtons
 12585  012870  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12586  012872  0E61               	movlw	high _HMI_InitButtons
 12587  012874  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12588  012876  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12589  012878  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12590  01287A  0E22               	movlw	low _HMI_LeftSwitch
 12591  01287C  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12592  01287E  0E60               	movlw	high _HMI_LeftSwitch
 12593  012880  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12594  012882  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 12595  012884  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12596  012886  0E04               	movlw	low _Event_NULL
 12597  012888  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12598  01288A  0E14               	movlw	high _Event_NULL
 12599  01288C  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12600  01288E  0E00               	movlw	low (_Event_NULL shr (0+16))
 12601  012890  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12602  012892  EC11  F0A0         	call	_Button_Init	;wreg free
 12603                           
 12604                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 12605                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 12606  012896  0E4C               	movlw	low (_HMIBoard+8)
 12607  012898  0100               	movlb	0	; () banked
 12608  01289A  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12609  01289C  0E01               	movlw	high (_HMIBoard+8)
 12610  01289E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12611  0128A0  0E00               	movlw	0
 12612  0128A2  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12613  0128A4  0E02               	movlw	2
 12614  0128A6  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12615  0128A8  0E50               	movlw	low _HMI_InitButtons
 12616  0128AA  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12617  0128AC  0E61               	movlw	high _HMI_InitButtons
 12618  0128AE  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12619  0128B0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12620  0128B2  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12621  0128B4  0E0E               	movlw	low _HMI_RightSwitch
 12622  0128B6  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12623  0128B8  0E60               	movlw	high _HMI_RightSwitch
 12624  0128BA  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12625  0128BC  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 12626  0128BE  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12627  0128C0  0E04               	movlw	low _Event_NULL
 12628  0128C2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12629  0128C4  0E14               	movlw	high _Event_NULL
 12630  0128C6  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12631  0128C8  0E00               	movlw	low (_Event_NULL shr (0+16))
 12632  0128CA  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12633  0128CC  EC11  F0A0         	call	_Button_Init	;wreg free
 12634                           
 12635                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 12636                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 12637  0128D0  0E60               	movlw	low (_HMIBoard+28)
 12638  0128D2  0100               	movlb	0	; () banked
 12639  0128D4  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12640  0128D6  0E01               	movlw	high (_HMIBoard+28)
 12641  0128D8  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12642  0128DA  0E00               	movlw	0
 12643  0128DC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12644  0128DE  0E02               	movlw	2
 12645  0128E0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12646  0128E2  0E50               	movlw	low _HMI_InitButtons
 12647  0128E4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12648  0128E6  0E61               	movlw	high _HMI_InitButtons
 12649  0128E8  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12650  0128EA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12651  0128EC  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12652  0128EE  0EFA               	movlw	low _HMI_UpSwitch
 12653  0128F0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12654  0128F2  0E5F               	movlw	high _HMI_UpSwitch
 12655  0128F4  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12656  0128F6  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 12657  0128F8  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12658  0128FA  0E04               	movlw	low _Event_NULL
 12659  0128FC  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12660  0128FE  0E14               	movlw	high _Event_NULL
 12661  012900  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12662  012902  0E00               	movlw	low (_Event_NULL shr (0+16))
 12663  012904  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12664  012906  EC11  F0A0         	call	_Button_Init	;wreg free
 12665                           
 12666                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 12667                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 12668  01290A  0E6A               	movlw	low (_HMIBoard+38)
 12669  01290C  0100               	movlb	0	; () banked
 12670  01290E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12671  012910  0E01               	movlw	high (_HMIBoard+38)
 12672  012912  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12673  012914  0E00               	movlw	0
 12674  012916  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12675  012918  0E02               	movlw	2
 12676  01291A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12677  01291C  0E50               	movlw	low _HMI_InitButtons
 12678  01291E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12679  012920  0E61               	movlw	high _HMI_InitButtons
 12680  012922  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12681  012924  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12682  012926  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12683  012928  0EE6               	movlw	low _HMI_DownSwitch
 12684  01292A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12685  01292C  0E5F               	movlw	high _HMI_DownSwitch
 12686  01292E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12687  012930  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 12688  012932  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12689  012934  0E04               	movlw	low _Event_NULL
 12690  012936  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12691  012938  0E14               	movlw	high _Event_NULL
 12692  01293A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12693  01293C  0E00               	movlw	low (_Event_NULL shr (0+16))
 12694  01293E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12695  012940  EC11  F0A0         	call	_Button_Init	;wreg free
 12696                           
 12697                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 12698  012944  0EA0               	movlw	160
 12699  012946  0100               	movlb	0	; () banked
 12700  012948  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 12701  01294A  0E86               	movlw	134
 12702  01294C  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 12703  01294E  0E01               	movlw	1
 12704  012950  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 12705  012952  0E00               	movlw	0
 12706  012954  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 12707  012956  0E00               	movlw	0
 12708  012958  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 12709  01295A  0E02               	movlw	2
 12710  01295C  6F92               	movwf	SPI_Init@pMode& (0+255),b
 12711  01295E  ECCF  F083         	call	_SPI_Init	;wreg free
 12712                           
 12713                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 12714  012962  0EC8               	movlw	low _SPI1
 12715  012964  0100               	movlb	0	; () banked
 12716  012966  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 12717  012968  0E02               	movlw	high _SPI1
 12718  01296A  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 12719  01296C  ECEA  F0A7         	call	_SPI_MinSpeed	;wreg free
 12720                           
 12721                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 12722  012970  0E00               	movlw	0
 12723  012972  0100               	movlb	0	; () banked
 12724  012974  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 12725  012976  0E00               	movlw	0
 12726  012978  6FA8               	movwf	HMI_Init@in& (0+255),b
 12727  01297A                     l15213:
 12728                           
 12729                           ; BSR set to: 0
 12730  01297A  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 12731  01297C  E10F               	bnz	l1153
 12732  01297E  0E08               	movlw	8
 12733  012980  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 12734  012982  B0D8               	btfsc	status,0,c
 12735  012984  0012               	return	
 12736                           
 12737                           ; BSR set to: 0
 12738                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 12739                           
 12740                           ; BSR set to: 0
 12741                           
 12742                           ; BSR set to: 0
 12743  012986  0E44               	movlw	low _HMIBoard
 12744  012988  25A8               	addwf	HMI_Init@in& (0+255),w,b
 12745  01298A  6ED9               	movwf	fsr2l,c
 12746  01298C  0E01               	movlw	high _HMIBoard
 12747  01298E  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 12748  012990  6EDA               	movwf	fsr2h,c
 12749  012992  0E00               	movlw	0
 12750  012994  6EDF               	movwf	indf2,c
 12751                           
 12752                           ; BSR set to: 0
 12753  012996  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 12754  012998  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 12755  01299A  D7EF               	goto	l15213
 12756  01299C                     l1153:
 12757                           
 12758                           ; BSR set to: 0
 12759  01299C  0012               	return		;funcret
 12760  01299E                     __end_of_HMI_Init:
 12761                           	opt stack 0
 12762                           tosu	equ	0xFFF
 12763                           tosh	equ	0xFFE
 12764                           tosl	equ	0xFFD
 12765                           pclath	equ	0xFFA
 12766                           tblptru	equ	0xFF8
 12767                           tblptrh	equ	0xFF7
 12768                           tblptrl	equ	0xFF6
 12769                           tablat	equ	0xFF5
 12770                           prodh	equ	0xFF4
 12771                           prodl	equ	0xFF3
 12772                           intcon	equ	0xFF2
 12773                           postinc0	equ	0xFEE
 12774                           wreg	equ	0xFE8
 12775                           indf1	equ	0xFE7
 12776                           postdec1	equ	0xFE5
 12777                           fsr1h	equ	0xFE2
 12778                           fsr1l	equ	0xFE1
 12779                           indf2	equ	0xFDF
 12780                           postinc2	equ	0xFDE
 12781                           postdec2	equ	0xFDD
 12782                           plusw2	equ	0xFDB
 12783                           fsr2h	equ	0xFDA
 12784                           fsr2l	equ	0xFD9
 12785                           status	equ	0xFD8
 12786                           
 12787 ;; *************** function _SPI_MinSpeed *****************
 12788 ;; Defined at:
 12789 ;;		line 190 in file "Library/SPI.c"
 12790 ;; Parameters:    Size  Location     Type
 12791 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 12792 ;;		 -> SPI1(11), 
 12793 ;; Auto vars:     Size  Location     Type
 12794 ;;		None
 12795 ;; Return value:  Size  Location     Type
 12796 ;;                  1    wreg      void 
 12797 ;; Registers used:
 12798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12799 ;; Tracked objects:
 12800 ;;		On entry : 0/0
 12801 ;;		On exit  : 0/0
 12802 ;;		Unchanged: 0/0
 12803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12804 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12808 ;;Total ram usage:        2 bytes
 12809 ;; Hardware stack levels used:    1
 12810 ;; Hardware stack levels required when called:    9
 12811 ;; This function calls:
 12812 ;;		_Byte_SetBit
 12813 ;;		_Byte_SetQuad
 12814 ;; This function is called by:
 12815 ;;		_HMI_Init
 12816 ;; This function uses a non-reentrant model
 12817 ;;
 12818                           
 12819                           	psect	text64
 12820  014FD4                     __ptext64:
 12821                           	opt stack 0
 12822  014FD4                     _SPI_MinSpeed:
 12823                           	opt stack 20
 12824                           
 12825                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;incstack = 0
 12829  014FD4  0100               	movlb	0	; () banked
 12830  014FD6  EE20 F006          	lfsr	2,6
 12831  014FDA  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12832  014FDC  26D9               	addwf	fsr2l,f,c
 12833  014FDE  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12834  014FE0  22DA               	addwfc	fsr2h,f,c
 12835  014FE2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12836  014FE6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12837  014FEA  0E05               	movlw	5
 12838  014FEC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12839  014FEE  0E00               	movlw	0
 12840  014FF0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12841  014FF2  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 12842                           
 12843                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 12844  014FF6  0100               	movlb	0	; () banked
 12845  014FF8  EE20 F006          	lfsr	2,6
 12846  014FFC  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12847  014FFE  26D9               	addwf	fsr2l,f,c
 12848  015000  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12849  015002  22DA               	addwfc	fsr2h,f,c
 12850  015004  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 12851  015008  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 12852  01500C  0E00               	movlw	0
 12853  01500E  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12854  015010  0E02               	movlw	2
 12855  015012  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 12856  015014  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 12857                           
 12858                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12859  015018  0100               	movlb	0	; () banked
 12860  01501A  EE20 F006          	lfsr	2,6
 12861  01501E  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12862  015020  26D9               	addwf	fsr2l,f,c
 12863  015022  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12864  015024  22DA               	addwfc	fsr2h,f,c
 12865  015026  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12866  01502A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12867  01502E  0E05               	movlw	5
 12868  015030  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12869  015032  0E01               	movlw	1
 12870  015034  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12871  015036  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 12872  01503A  0012               	return		;funcret
 12873  01503C                     __end_of_SPI_MinSpeed:
 12874                           	opt stack 0
 12875                           tosu	equ	0xFFF
 12876                           tosh	equ	0xFFE
 12877                           tosl	equ	0xFFD
 12878                           pclath	equ	0xFFA
 12879                           tblptru	equ	0xFF8
 12880                           tblptrh	equ	0xFF7
 12881                           tblptrl	equ	0xFF6
 12882                           tablat	equ	0xFF5
 12883                           prodh	equ	0xFF4
 12884                           prodl	equ	0xFF3
 12885                           intcon	equ	0xFF2
 12886                           postinc0	equ	0xFEE
 12887                           wreg	equ	0xFE8
 12888                           indf1	equ	0xFE7
 12889                           postdec1	equ	0xFE5
 12890                           fsr1h	equ	0xFE2
 12891                           fsr1l	equ	0xFE1
 12892                           indf2	equ	0xFDF
 12893                           postinc2	equ	0xFDE
 12894                           postdec2	equ	0xFDD
 12895                           plusw2	equ	0xFDB
 12896                           fsr2h	equ	0xFDA
 12897                           fsr2l	equ	0xFD9
 12898                           status	equ	0xFD8
 12899                           
 12900 ;; *************** function _SPI_Init *****************
 12901 ;; Defined at:
 12902 ;;		line 12 in file "Library/SPI.c"
 12903 ;; Parameters:    Size  Location     Type
 12904 ;;  pClock          4   45[BANK0 ] unsigned long 
 12905 ;;  pChannel        1   49[BANK0 ] enum E6744
 12906 ;;  pMode           1   50[BANK0 ] enum E6748
 12907 ;; Auto vars:     Size  Location     Type
 12908 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 12909 ;;		 -> SPI1(11), SPI2(11), 
 12910 ;; Return value:  Size  Location     Type
 12911 ;;                  1    wreg      void 
 12912 ;; Registers used:
 12913 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12914 ;; Tracked objects:
 12915 ;;		On entry : 0/0
 12916 ;;		On exit  : 0/0
 12917 ;;		Unchanged: 0/0
 12918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12919 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12922 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12923 ;;Total ram usage:        8 bytes
 12924 ;; Hardware stack levels used:    1
 12925 ;; Hardware stack levels required when called:   12
 12926 ;; This function calls:
 12927 ;;		_Byte_SetBit
 12928 ;;		_Byte_SetQuad
 12929 ;;		_Port_SetPinType
 12930 ;;		_SPI_DCS
 12931 ;;		_SPI_DisableISR
 12932 ;;		_Timer2_Init
 12933 ;; This function is called by:
 12934 ;;		_Configure_GPIOs
 12935 ;;		_HMI_Init
 12936 ;; This function uses a non-reentrant model
 12937 ;;
 12938                           
 12939                           	psect	text65
 12940  01079E                     __ptext65:
 12941                           	opt stack 0
 12942  01079E                     _SPI_Init:
 12943                           	opt stack 16
 12944                           
 12945                           ;SPI.c: 14: SPIPtr pInput;
 12946                           ;SPI.c: 16: switch (pChannel)
 12947                           
 12948                           ;incstack = 0
 12949  01079E  D00A               	goto	l597
 12950  0107A0                     
 12951                           ;SPI.c: 19: pInput = &SPI1;
 12952  0107A0  0EC8               	movlw	low _SPI1
 12953  0107A2  0100               	movlb	0	; () banked
 12954  0107A4  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12955  0107A6  0E02               	movlw	high _SPI1
 12956  0107A8  D003               	goto	L7
 12957  0107AA                     
 12958                           ; BSR set to: 0
 12959                           ;SPI.c: 22: pInput = &SPI2;
 12960                           
 12961                           ; BSR set to: 0
 12962  0107AA  0E7E               	movlw	low _SPI2
 12963  0107AC  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12964  0107AE  0E01               	movlw	high _SPI2
 12965  0107B0                     L7:
 12966  0107B0  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 12967                           
 12968                           ; BSR set to: 0
 12969                           ;SPI.c: 24: };
 12970                           
 12971                           ;SPI.c: 23: break;
 12972  0107B2  D008               	goto	l599
 12973  0107B4                     l597:
 12974                           
 12975                           ; BSR set to: 0
 12976  0107B4  0100               	movlb	0	; () banked
 12977  0107B6  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 12978                           
 12979                           ; Switch size 1, requested type "space"
 12980                           ; Number of cases is 2, Range of values is 0 to 1
 12981                           ; switch strategies available:
 12982                           ; Name         Instructions Cycles
 12983                           ; simple_byte            7     4 (average)
 12984                           ;	Chosen strategy is simple_byte
 12985  0107B8  0A00               	xorlw	0	; case 0
 12986  0107BA  B4D8               	btfsc	status,2,c
 12987  0107BC  D7F1               	goto	l598
 12988  0107BE  0A01               	xorlw	1	; case 1
 12989  0107C0  B4D8               	btfsc	status,2,c
 12990  0107C2  D7F3               	goto	l600
 12991  0107C4                     l599:
 12992                           
 12993                           ; BSR set to: 0
 12994                           ;SPI.c: 26: pInput->mChannel = pChannel;
 12995                           
 12996                           ; BSR set to: 0
 12997  0107C4  EE20 F002          	lfsr	2,2
 12998  0107C8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12999  0107CA  26D9               	addwf	fsr2l,f,c
 13000  0107CC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13001  0107CE  22DA               	addwfc	fsr2h,f,c
 13002  0107D0  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 13003                           
 13004                           ;SPI.c: 35: switch (pChannel)
 13005  0107D4  D093               	goto	l601
 13006  0107D6                     
 13007                           ; BSR set to: 0
 13008                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 13009                           
 13010                           ; BSR set to: 0
 13011  0107D6  0EA7               	movlw	low _PortC
 13012  0107D8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13013  0107DA  0E01               	movlw	high _PortC
 13014  0107DC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13015  0107DE  0E02               	movlw	2
 13016  0107E0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13017  0107E2  0E03               	movlw	3
 13018  0107E4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13019  0107E6  EC42  F093         	call	_Port_SetPinType	;wreg free
 13020                           
 13021                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 13022  0107EA  0EA7               	movlw	low _PortC
 13023  0107EC  0100               	movlb	0	; () banked
 13024  0107EE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13025  0107F0  0E01               	movlw	high _PortC
 13026  0107F2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13027  0107F4  0E03               	movlw	3
 13028  0107F6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13029  0107F8  0E03               	movlw	3
 13030  0107FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13031  0107FC  EC42  F093         	call	_Port_SetPinType	;wreg free
 13032                           
 13033                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 13034  010800  0EA7               	movlw	low _PortC
 13035  010802  0100               	movlb	0	; () banked
 13036  010804  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13037  010806  0E01               	movlw	high _PortC
 13038  010808  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13039  01080A  0E05               	movlw	5
 13040  01080C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13041  01080E  0E03               	movlw	3
 13042  010810  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13043  010812  EC42  F093         	call	_Port_SetPinType	;wreg free
 13044                           
 13045                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 13046  010816  0EA7               	movlw	low _PortC
 13047  010818  0100               	movlb	0	; () banked
 13048  01081A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13049  01081C  0E01               	movlw	high _PortC
 13050  01081E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13051  010820  0E04               	movlw	4
 13052  010822  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13053  010824  0E00               	movlw	0
 13054  010826  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13055  010828  EC42  F093         	call	_Port_SetPinType	;wreg free
 13056                           
 13057                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 13058  01082C  0100               	movlb	0	; () banked
 13059  01082E  EE20 F003          	lfsr	2,3
 13060  010832  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13061  010834  26D9               	addwf	fsr2l,f,c
 13062  010836  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13063  010838  22DA               	addwfc	fsr2h,f,c
 13064  01083A  0EC7               	movlw	199
 13065  01083C  6EDE               	movwf	postinc2,c
 13066  01083E  0E0F               	movlw	15
 13067  010840  6EDD               	movwf	postdec2,c
 13068                           
 13069                           ; BSR set to: 0
 13070                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 13071  010842  EE20 F006          	lfsr	2,6
 13072  010846  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13073  010848  26D9               	addwf	fsr2l,f,c
 13074  01084A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13075  01084C  22DA               	addwfc	fsr2h,f,c
 13076  01084E  0EC6               	movlw	198
 13077  010850  6EDE               	movwf	postinc2,c
 13078  010852  0E0F               	movlw	15
 13079  010854  6EDD               	movwf	postdec2,c
 13080                           
 13081                           ; BSR set to: 0
 13082                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 13083  010856  EE20 F009          	lfsr	2,9
 13084  01085A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13085  01085C  26D9               	addwf	fsr2l,f,c
 13086  01085E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13087  010860  22DA               	addwfc	fsr2h,f,c
 13088  010862  0EC9               	movlw	201
 13089  010864  D047               	goto	L8
 13090  010866                     
 13091                           ; BSR set to: 0
 13092                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 13093                           
 13094                           ; BSR set to: 0
 13095  010866  0E93               	movlw	low _PortD
 13096  010868  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13097  01086A  0E01               	movlw	high _PortD
 13098  01086C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13099  01086E  0E07               	movlw	7
 13100  010870  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13101  010872  0E03               	movlw	3
 13102  010874  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13103  010876  EC42  F093         	call	_Port_SetPinType	;wreg free
 13104                           
 13105                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 13106  01087A  0E93               	movlw	low _PortD
 13107  01087C  0100               	movlb	0	; () banked
 13108  01087E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13109  010880  0E01               	movlw	high _PortD
 13110  010882  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13111  010884  0E06               	movlw	6
 13112  010886  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13113  010888  0E03               	movlw	3
 13114  01088A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13115  01088C  EC42  F093         	call	_Port_SetPinType	;wreg free
 13116                           
 13117                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 13118  010890  0E93               	movlw	low _PortD
 13119  010892  0100               	movlb	0	; () banked
 13120  010894  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13121  010896  0E01               	movlw	high _PortD
 13122  010898  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13123  01089A  0E04               	movlw	4
 13124  01089C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13125  01089E  0E03               	movlw	3
 13126  0108A0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13127  0108A2  EC42  F093         	call	_Port_SetPinType	;wreg free
 13128                           
 13129                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 13130  0108A6  0E93               	movlw	low _PortD
 13131  0108A8  0100               	movlb	0	; () banked
 13132  0108AA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13133  0108AC  0E01               	movlw	high _PortD
 13134  0108AE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13135  0108B0  0E05               	movlw	5
 13136  0108B2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13137  0108B4  0E00               	movlw	0
 13138  0108B6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13139  0108B8  EC42  F093         	call	_Port_SetPinType	;wreg free
 13140                           
 13141                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 13142  0108BC  0100               	movlb	0	; () banked
 13143  0108BE  EE20 F003          	lfsr	2,3
 13144  0108C2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13145  0108C4  26D9               	addwf	fsr2l,f,c
 13146  0108C6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13147  0108C8  22DA               	addwfc	fsr2h,f,c
 13148  0108CA  0E6D               	movlw	109
 13149  0108CC  6EDE               	movwf	postinc2,c
 13150  0108CE  0E0F               	movlw	15
 13151  0108D0  6EDD               	movwf	postdec2,c
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 13155  0108D2  EE20 F006          	lfsr	2,6
 13156  0108D6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13157  0108D8  26D9               	addwf	fsr2l,f,c
 13158  0108DA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13159  0108DC  22DA               	addwfc	fsr2h,f,c
 13160  0108DE  0E6C               	movlw	108
 13161  0108E0  6EDE               	movwf	postinc2,c
 13162  0108E2  0E0F               	movlw	15
 13163  0108E4  6EDD               	movwf	postdec2,c
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 13167  0108E6  EE20 F009          	lfsr	2,9
 13168  0108EA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13169  0108EC  26D9               	addwf	fsr2l,f,c
 13170  0108EE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13171  0108F0  22DA               	addwfc	fsr2h,f,c
 13172  0108F2  0E6F               	movlw	111
 13173  0108F4                     L8:
 13174  0108F4  6EDE               	movwf	postinc2,c
 13175  0108F6  0E0F               	movlw	15
 13176  0108F8  6EDD               	movwf	postdec2,c
 13177                           
 13178                           ;SPI.c: 68: break;
 13179  0108FA  D008               	goto	l603
 13180  0108FC                     l601:
 13181                           
 13182                           ; BSR set to: 0
 13183                           
 13184                           ; BSR set to: 0
 13185  0108FC  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13186                           
 13187                           ; Switch size 1, requested type "space"
 13188                           ; Number of cases is 2, Range of values is 0 to 1
 13189                           ; switch strategies available:
 13190                           ; Name         Instructions Cycles
 13191                           ; simple_byte            7     4 (average)
 13192                           ;	Chosen strategy is simple_byte
 13193  0108FE  0A00               	xorlw	0	; case 0
 13194  010900  B4D8               	btfsc	status,2,c
 13195  010902  D769               	goto	l602
 13196  010904  0A01               	xorlw	1	; case 1
 13197  010906  A4D8               	btfss	status,2,c
 13198  010908  0012               	return	
 13199  01090A  D7AD               	goto	l604
 13200  01090C                     l603:
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 13204                           
 13205                           ; BSR set to: 0
 13206  01090C  EE20 F006          	lfsr	2,6
 13207  010910  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13208  010912  26D9               	addwf	fsr2l,f,c
 13209  010914  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13210  010916  22DA               	addwfc	fsr2h,f,c
 13211  010918  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13212  01091C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13213  010920  0E05               	movlw	5
 13214  010922  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13215  010924  0E00               	movlw	0
 13216  010926  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13217  010928  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13218                           
 13219                           ;SPI.c: 77: switch(pMode)
 13220  01092C  D08C               	goto	l607
 13221  01092E                     
 13222                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13223  01092E  0100               	movlb	0	; () banked
 13224  010930  EE20 F006          	lfsr	2,6
 13225  010934  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13226  010936  26D9               	addwf	fsr2l,f,c
 13227  010938  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13228  01093A  22DA               	addwfc	fsr2h,f,c
 13229  01093C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13230  010940  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13231  010944  0E04               	movlw	4
 13232  010946  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13233  010948  0E00               	movlw	0
 13234  01094A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13235  01094C  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13236                           
 13237                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13238  010950  0100               	movlb	0	; () banked
 13239  010952  EE20 F003          	lfsr	2,3
 13240  010956  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13241  010958  26D9               	addwf	fsr2l,f,c
 13242  01095A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13243  01095C  22DA               	addwfc	fsr2h,f,c
 13244  01095E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13245  010962  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13246  010966  0E06               	movlw	6
 13247  010968  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13248  01096A  0E00               	movlw	0
 13249  01096C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13250  01096E  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13251                           
 13252                           ;SPI.c: 82: break;
 13253  010972  D078               	goto	l609
 13254  010974                     
 13255                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13256  010974  0100               	movlb	0	; () banked
 13257  010976  EE20 F006          	lfsr	2,6
 13258  01097A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13259  01097C  26D9               	addwf	fsr2l,f,c
 13260  01097E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13261  010980  22DA               	addwfc	fsr2h,f,c
 13262  010982  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13263  010986  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13264  01098A  0E04               	movlw	4
 13265  01098C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13266  01098E  0E00               	movlw	0
 13267  010990  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13268  010992  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13269                           
 13270                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13271  010996  0100               	movlb	0	; () banked
 13272  010998  EE20 F003          	lfsr	2,3
 13273  01099C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13274  01099E  26D9               	addwf	fsr2l,f,c
 13275  0109A0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13276  0109A2  22DA               	addwfc	fsr2h,f,c
 13277  0109A4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13278  0109A8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13279  0109AC  0E06               	movlw	6
 13280  0109AE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13281  0109B0  0E01               	movlw	1
 13282  0109B2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13283  0109B4  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13284                           
 13285                           ;SPI.c: 86: break;
 13286  0109B8  D055               	goto	l609
 13287  0109BA                     
 13288                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13289  0109BA  0100               	movlb	0	; () banked
 13290  0109BC  EE20 F006          	lfsr	2,6
 13291  0109C0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13292  0109C2  26D9               	addwf	fsr2l,f,c
 13293  0109C4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13294  0109C6  22DA               	addwfc	fsr2h,f,c
 13295  0109C8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13296  0109CC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13297  0109D0  0E04               	movlw	4
 13298  0109D2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13299  0109D4  0E01               	movlw	1
 13300  0109D6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13301  0109D8  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13302                           
 13303                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13304  0109DC  0100               	movlb	0	; () banked
 13305  0109DE  EE20 F003          	lfsr	2,3
 13306  0109E2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13307  0109E4  26D9               	addwf	fsr2l,f,c
 13308  0109E6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13309  0109E8  22DA               	addwfc	fsr2h,f,c
 13310  0109EA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13311  0109EE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13312  0109F2  0E06               	movlw	6
 13313  0109F4  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13314  0109F6  0E00               	movlw	0
 13315  0109F8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13316  0109FA  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13317                           
 13318                           ;SPI.c: 90: break;
 13319  0109FE  D032               	goto	l609
 13320  010A00                     
 13321                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13322  010A00  0100               	movlb	0	; () banked
 13323  010A02  EE20 F006          	lfsr	2,6
 13324  010A06  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13325  010A08  26D9               	addwf	fsr2l,f,c
 13326  010A0A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13327  010A0C  22DA               	addwfc	fsr2h,f,c
 13328  010A0E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13329  010A12  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13330  010A16  0E04               	movlw	4
 13331  010A18  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13332  010A1A  0E01               	movlw	1
 13333  010A1C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13334  010A1E  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13335                           
 13336                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13337  010A22  0100               	movlb	0	; () banked
 13338  010A24  EE20 F003          	lfsr	2,3
 13339  010A28  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13340  010A2A  26D9               	addwf	fsr2l,f,c
 13341  010A2C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13342  010A2E  22DA               	addwfc	fsr2h,f,c
 13343  010A30  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13344  010A34  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13345  010A38  0E06               	movlw	6
 13346  010A3A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13347  010A3C  0E01               	movlw	1
 13348  010A3E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13349  010A40  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13350                           
 13351                           ;SPI.c: 94: break;
 13352  010A44  D00F               	goto	l609
 13353  010A46                     l607:
 13354  010A46  0100               	movlb	0	; () banked
 13355  010A48  5192               	movf	SPI_Init@pMode& (0+255),w,b
 13356                           
 13357                           ; Switch size 1, requested type "space"
 13358                           ; Number of cases is 4, Range of values is 0 to 3
 13359                           ; switch strategies available:
 13360                           ; Name         Instructions Cycles
 13361                           ; simple_byte           13     7 (average)
 13362                           ;	Chosen strategy is simple_byte
 13363  010A4A  0A00               	xorlw	0	; case 0
 13364  010A4C  B4D8               	btfsc	status,2,c
 13365  010A4E  D76F               	goto	l608
 13366  010A50  0A01               	xorlw	1	; case 1
 13367  010A52  B4D8               	btfsc	status,2,c
 13368  010A54  D78F               	goto	l610
 13369  010A56  0A03               	xorlw	3	; case 2
 13370  010A58  B4D8               	btfsc	status,2,c
 13371  010A5A  D7AF               	goto	l611
 13372  010A5C  0A01               	xorlw	1	; case 3
 13373  010A5E  A4D8               	btfss	status,2,c
 13374  010A60  0012               	return	
 13375  010A62  D7CE               	goto	l612
 13376  010A64                     l609:
 13377                           
 13378                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 13379                           
 13380                           ; BSR set to: 0
 13381  010A64  0100               	movlb	0	; () banked
 13382  010A66  EE20 F006          	lfsr	2,6
 13383  010A6A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13384  010A6C  26D9               	addwf	fsr2l,f,c
 13385  010A6E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13386  010A70  22DA               	addwfc	fsr2h,f,c
 13387  010A72  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13388  010A76  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13389  010A7A  0E07               	movlw	7
 13390  010A7C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13391  010A7E  0E00               	movlw	0
 13392  010A80  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13393  010A82  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13394                           
 13395                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 13396  010A86  0100               	movlb	0	; () banked
 13397  010A88  EE20 F006          	lfsr	2,6
 13398  010A8C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13399  010A8E  26D9               	addwf	fsr2l,f,c
 13400  010A90  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13401  010A92  22DA               	addwfc	fsr2h,f,c
 13402  010A94  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13403  010A98  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13404  010A9C  0E06               	movlw	6
 13405  010A9E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13406  010AA0  0E00               	movlw	0
 13407  010AA2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13408  010AA4  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13409                           
 13410                           ;SPI.c: 106: Timer2_Init(pClock);
 13411  010AA8  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 13412  010AAC  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 13413  010AB0  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 13414  010AB4  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 13415  010AB8  ECED  F098         	call	_Timer2_Init	;wreg free
 13416                           
 13417                           ;SPI.c: 112: SPI_DisableISR(pInput);
 13418  010ABC  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 13419  010AC0  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 13420  010AC4  EC77  F0AE         	call	_SPI_DisableISR	;wreg free
 13421                           
 13422                           ;SPI.c: 116: switch (pChannel)
 13423  010AC8  D004               	goto	l614
 13424  010ACA                     l615:
 13425                           
 13426                           ; BSR set to: 0
 13427  010ACA  869F               	bsf	3999,3,c	;volatile
 13428  010ACC  D00B               	goto	l616
 13429  010ACE                     l617:
 13430                           
 13431                           ; BSR set to: 0
 13432  010ACE  8EA5               	bsf	4005,7,c	;volatile
 13433  010AD0  D009               	goto	l616
 13434  010AD2                     l614:
 13435                           
 13436                           ; BSR set to: 0
 13437  010AD2  0100               	movlb	0	; () banked
 13438  010AD4  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13439                           
 13440                           ; Switch size 1, requested type "space"
 13441                           ; Number of cases is 2, Range of values is 0 to 1
 13442                           ; switch strategies available:
 13443                           ; Name         Instructions Cycles
 13444                           ; simple_byte            7     4 (average)
 13445                           ;	Chosen strategy is simple_byte
 13446  010AD6  0A00               	xorlw	0	; case 0
 13447  010AD8  B4D8               	btfsc	status,2,c
 13448  010ADA  D7F7               	goto	l615
 13449  010ADC  0A01               	xorlw	1	; case 1
 13450  010ADE  A4D8               	btfss	status,2,c
 13451  010AE0  0012               	return	
 13452  010AE2  D7F5               	goto	l617
 13453  010AE4                     l616:
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;SPI.c: 124: SPI_DCS(pInput);
 13457                           
 13458                           ; BSR set to: 0
 13459  010AE4  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 13460  010AE8  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 13461  010AEC  ECEA  F0AD         	call	_SPI_DCS	;wreg free
 13462                           
 13463                           ;SPI.c: 126: pInput->mBusy = 0;
 13464  010AF0  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 13465  010AF4  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 13466  010AF8  0E00               	movlw	0
 13467  010AFA  6EDF               	movwf	indf2,c
 13468                           
 13469                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 13470  010AFC  0100               	movlb	0	; () banked
 13471  010AFE  EE20 F006          	lfsr	2,6
 13472  010B02  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13473  010B04  26D9               	addwf	fsr2l,f,c
 13474  010B06  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13475  010B08  22DA               	addwfc	fsr2h,f,c
 13476  010B0A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 13477  010B0E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 13478  010B12  0E00               	movlw	0
 13479  010B14  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 13480  010B16  0E03               	movlw	3
 13481  010B18  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 13482  010B1A  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 13483                           
 13484                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 13485  010B1E  0100               	movlb	0	; () banked
 13486  010B20  EE20 F006          	lfsr	2,6
 13487  010B24  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13488  010B26  26D9               	addwf	fsr2l,f,c
 13489  010B28  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13490  010B2A  22DA               	addwfc	fsr2h,f,c
 13491  010B2C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13492  010B30  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13493  010B34  0E05               	movlw	5
 13494  010B36  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13495  010B38  0E01               	movlw	1
 13496  010B3A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13497  010B3C  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 13498  010B40  0012               	return		;funcret
 13499  010B42                     __end_of_SPI_Init:
 13500                           	opt stack 0
 13501                           tosu	equ	0xFFF
 13502                           tosh	equ	0xFFE
 13503                           tosl	equ	0xFFD
 13504                           pclath	equ	0xFFA
 13505                           tblptru	equ	0xFF8
 13506                           tblptrh	equ	0xFF7
 13507                           tblptrl	equ	0xFF6
 13508                           tablat	equ	0xFF5
 13509                           prodh	equ	0xFF4
 13510                           prodl	equ	0xFF3
 13511                           intcon	equ	0xFF2
 13512                           postinc0	equ	0xFEE
 13513                           wreg	equ	0xFE8
 13514                           indf1	equ	0xFE7
 13515                           postdec1	equ	0xFE5
 13516                           fsr1h	equ	0xFE2
 13517                           fsr1l	equ	0xFE1
 13518                           indf2	equ	0xFDF
 13519                           postinc2	equ	0xFDE
 13520                           postdec2	equ	0xFDD
 13521                           plusw2	equ	0xFDB
 13522                           fsr2h	equ	0xFDA
 13523                           fsr2l	equ	0xFD9
 13524                           status	equ	0xFD8
 13525                           
 13526 ;; *************** function _Timer2_Init *****************
 13527 ;; Defined at:
 13528 ;;		line 10 in file "Library/Timer2.c"
 13529 ;; Parameters:    Size  Location     Type
 13530 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13531 ;; Auto vars:     Size  Location     Type
 13532 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 13533 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 13534 ;;  RDIV            4   18[BANK0 ] unsigned long 
 13535 ;; Return value:  Size  Location     Type
 13536 ;;                  1    wreg      void 
 13537 ;; Registers used:
 13538 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13539 ;; Tracked objects:
 13540 ;;		On entry : 0/0
 13541 ;;		On exit  : 0/0
 13542 ;;		Unchanged: 0/0
 13543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13544 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13547 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13548 ;;Total ram usage:       17 bytes
 13549 ;; Hardware stack levels used:    1
 13550 ;; Hardware stack levels required when called:    8
 13551 ;; This function calls:
 13552 ;;		_Timer2_Clear
 13553 ;;		___lldiv
 13554 ;; This function is called by:
 13555 ;;		_SPI_Init
 13556 ;; This function uses a non-reentrant model
 13557 ;;
 13558                           
 13559                           	psect	text66
 13560  0131DA                     __ptext66:
 13561                           	opt stack 0
 13562  0131DA                     _Timer2_Init:
 13563                           	opt stack 19
 13564                           
 13565                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 13566                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 13567                           ;Timer2.c: 14: static UINT8 PRE = 0;
 13568                           ;Timer2.c: 15: static UINT32 DIV = 0;
 13569                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 13570                           
 13571                           ;incstack = 0
 13572  0131DA  0E00               	movlw	0
 13573  0131DC  0100               	movlb	0	; () banked
 13574  0131DE  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 13575  0131E0  0E6C               	movlw	108
 13576  0131E2  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 13577  0131E4  0EDC               	movlw	220
 13578  0131E6  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 13579  0131E8  0E02               	movlw	2
 13580  0131EA  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 13584                           ;Timer2.c: 20: pFrequency *= 2;
 13585  0131EC  90D8               	bcf	status,0,c
 13586  0131EE  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 13587  0131F0  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 13588  0131F2  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 13589  0131F4  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 13590                           
 13591                           ; BSR set to: 0
 13592                           ;Timer2.c: 23: pCPUClock /= 4;
 13593  0131F6  0E02               	movlw	2
 13594  0131F8  6F71               	movwf	??_Timer2_Init& (0+255),b
 13595  0131FA                     u11365:
 13596  0131FA  90D8               	bcf	status,0,c
 13597  0131FC  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 13598  0131FE  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 13599  013200  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 13600  013202  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 13601  013204  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 13602  013206  D7F9               	goto	u11365
 13603                           
 13604                           ; BSR set to: 0
 13605                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 13606  013208  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 13607  01320C  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 13608  013210  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 13609  013214  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 13610  013218  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 13611  01321C  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 13612  013220  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 13613  013224  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 13614  013228  EC80  F0A4         	call	___lldiv	;wreg free
 13615  01322C  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 13616  013230  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 13617  013234  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 13618  013238  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 13619                           
 13620                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 13621  01323C  D00E               	goto	l1828
 13622  01323E                     l13901:
 13623                           
 13624                           ;Timer2.c: 28: {
 13625                           ;Timer2.c: 29: RDIV = 0;
 13626  01323E  0E00               	movlw	0
 13627  013240  0100               	movlb	0	; () banked
 13628  013242  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 13629  013244  0E00               	movlw	0
 13630  013246  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 13631  013248  0E00               	movlw	0
 13632  01324A  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 13633  01324C  0E00               	movlw	0
 13634  01324E  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 13635                           
 13636                           ; BSR set to: 0
 13637                           ;Timer2.c: 30: INDEX ++;
 13638  013250  2BF3               	incf	Timer2_Init@INDEX& (0+255),f,b
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;Timer2.c: 31: if (INDEX >= 3)
 13642  013252  0E02               	movlw	2
 13643  013254  65F3               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 13644  013256  D001               	goto	l1828
 13645  013258  D023               	goto	u11380
 13646  01325A                     l1828:
 13647                           
 13648                           ; BSR set to: 0
 13649                           
 13650                           ; BSR set to: 0
 13651  01325A  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 13652  01325E  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 13653  013262  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 13654  013266  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 13655  01326A  0100               	movlb	0	; () banked
 13656  01326C  51F3               	movf	Timer2_Init@INDEX& (0+255),w,b
 13657  01326E  0D01               	mullw	1
 13658  013270  0E62               	movlw	low Timer2_Init@PRESCALE
 13659  013272  24F3               	addwf	prodl,w,c
 13660  013274  6EF6               	movwf	tblptrl,c
 13661  013276  0EFC               	movlw	high Timer2_Init@PRESCALE
 13662  013278  20F4               	addwfc	prodh,w,c
 13663  01327A  6EF7               	movwf	tblptrh,c
 13664  01327C                     	if	1	;There are 3 active tblptr bytes
 13665  01327C  6AF8               	clrf	tblptru,c
 13666  01327E  0E00               	movlw	low (__mediumconst shr (0+16))
 13667  013280  22F8               	addwfc	tblptru,f,c
 13668  013282                     	endif
 13669  013282  0008               	tblrd		*
 13670  013284  50F5               	movf	tablat,w,c
 13671  013286  6F64               	movwf	___lldiv@divisor& (0+255),b
 13672  013288  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13673  01328A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13674  01328C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13675  01328E  EC80  F0A4         	call	___lldiv	;wreg free
 13676  013292  0100               	movlb	0	; () banked
 13677  013294  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13678  013296  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 13679  013298  E1D2               	bnz	l13901
 13680  01329A  0561               	decf	(?___lldiv+1)& (0+255),w,b
 13681  01329C  B0D8               	btfsc	status,0,c
 13682  01329E  D7CF               	goto	l1827
 13683  0132A0                     u11380:
 13684                           
 13685                           ; BSR set to: 0
 13686                           ;Timer2.c: 33: }
 13687                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 13688                           
 13689                           ; BSR set to: 0
 13690  0132A0  50CA               	movf	4042,w,c	;volatile
 13691  0132A2  19F3               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 13692  0132A4  0BFC               	andlw	-4
 13693  0132A6  19F3               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 13694  0132A8  6ECA               	movwf	4042,c	;volatile
 13695                           
 13696                           ; BSR set to: 0
 13697                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 13698  0132AA  84CA               	bsf	4042,2,c	;volatile
 13699                           
 13700                           ; BSR set to: 0
 13701                           ;Timer2.c: 44: Timer2_Clear();
 13702  0132AC  EC9E  F0B0         	call	_Timer2_Clear	;wreg free
 13703                           
 13704                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 13705  0132B0  0100               	movlb	0	; () banked
 13706  0132B2  51F3               	movf	Timer2_Init@INDEX& (0+255),w,b
 13707  0132B4  0D01               	mullw	1
 13708  0132B6  0E62               	movlw	low Timer2_Init@PRESCALE
 13709  0132B8  24F3               	addwf	prodl,w,c
 13710  0132BA  6EF6               	movwf	tblptrl,c
 13711  0132BC  0EFC               	movlw	high Timer2_Init@PRESCALE
 13712  0132BE  20F4               	addwfc	prodh,w,c
 13713  0132C0  6EF7               	movwf	tblptrh,c
 13714  0132C2                     	if	1	;There are 3 active tblptr bytes
 13715  0132C2  6AF8               	clrf	tblptru,c
 13716  0132C4  0E00               	movlw	low (__mediumconst shr (0+16))
 13717  0132C6  22F8               	addwfc	tblptru,f,c
 13718  0132C8                     	endif
 13719  0132C8  0008               	tblrd		*
 13720  0132CA  CFF5 F03D          	movff	tablat,Timer2_Init@PRE
 13721                           
 13722                           ; BSR set to: 0
 13723                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 13724  0132CE  0EFF               	movlw	255
 13725  0132D0  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 13726  0132D2  0101               	movlb	1	; () banked
 13727  0132D4  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 13728  0132D6  0EFF               	movlw	255
 13729  0132D8  0100               	movlb	0	; () banked
 13730  0132DA  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 13731  0132DC  0101               	movlb	1	; () banked
 13732  0132DE  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 13733  0132E0  0EFF               	movlw	255
 13734  0132E2  0100               	movlb	0	; () banked
 13735  0132E4  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 13736  0132E6  0101               	movlb	1	; () banked
 13737  0132E8  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 13738  0132EA  0EFF               	movlw	255
 13739  0132EC  0100               	movlb	0	; () banked
 13740  0132EE  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 13741  0132F0  0101               	movlb	1	; () banked
 13742  0132F2  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 13743                           
 13744                           ; BSR set to: 1
 13745                           ;Timer2.c: 48: INDEX = DIV/PRE;
 13746  0132F4  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 13747  0132F8  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 13748  0132FC  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 13749  013300  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 13750  013304  503D               	movf	Timer2_Init@PRE,w,c
 13751  013306  0100               	movlb	0	; () banked
 13752  013308  6F64               	movwf	___lldiv@divisor& (0+255),b
 13753  01330A  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13754  01330C  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13755  01330E  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13756  013310  EC80  F0A4         	call	___lldiv	;wreg free
 13757  013314  0100               	movlb	0	; () banked
 13758  013316  5160               	movf	?___lldiv& (0+255),w,b
 13759  013318  6FF3               	movwf	Timer2_Init@INDEX& (0+255),b
 13760                           
 13761                           ; BSR set to: 0
 13762                           ;Timer2.c: 49: PR2 = INDEX;
 13763  01331A  C0F3  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 13764                           
 13765                           ; BSR set to: 0
 13766  01331E  0012               	return		;funcret
 13767  013320                     __end_of_Timer2_Init:
 13768                           	opt stack 0
 13769                           tosu	equ	0xFFF
 13770                           tosh	equ	0xFFE
 13771                           tosl	equ	0xFFD
 13772                           pclath	equ	0xFFA
 13773                           tblptru	equ	0xFF8
 13774                           tblptrh	equ	0xFF7
 13775                           tblptrl	equ	0xFF6
 13776                           tablat	equ	0xFF5
 13777                           prodh	equ	0xFF4
 13778                           prodl	equ	0xFF3
 13779                           intcon	equ	0xFF2
 13780                           postinc0	equ	0xFEE
 13781                           wreg	equ	0xFE8
 13782                           indf1	equ	0xFE7
 13783                           postdec1	equ	0xFE5
 13784                           fsr1h	equ	0xFE2
 13785                           fsr1l	equ	0xFE1
 13786                           indf2	equ	0xFDF
 13787                           postinc2	equ	0xFDE
 13788                           postdec2	equ	0xFDD
 13789                           plusw2	equ	0xFDB
 13790                           fsr2h	equ	0xFDA
 13791                           fsr2l	equ	0xFD9
 13792                           status	equ	0xFD8
 13793                           
 13794 ;; *************** function ___lldiv *****************
 13795 ;; Defined at:
 13796 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 13797 ;; Parameters:    Size  Location     Type
 13798 ;;  dividend        4    0[BANK0 ] unsigned long 
 13799 ;;  divisor         4    4[BANK0 ] unsigned long 
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  quotient        4    8[BANK0 ] unsigned long 
 13802 ;;  counter         1   12[BANK0 ] unsigned char 
 13803 ;; Return value:  Size  Location     Type
 13804 ;;                  4    0[BANK0 ] unsigned long 
 13805 ;; Registers used:
 13806 ;;		wreg, status,2, status,0
 13807 ;; Tracked objects:
 13808 ;;		On entry : 0/0
 13809 ;;		On exit  : 0/0
 13810 ;;		Unchanged: 0/0
 13811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13812 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13815 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13816 ;;Total ram usage:       13 bytes
 13817 ;; Hardware stack levels used:    1
 13818 ;; Hardware stack levels required when called:    7
 13819 ;; This function calls:
 13820 ;;		Nothing
 13821 ;; This function is called by:
 13822 ;;		_Timer2_Init
 13823 ;;		_rand_between
 13824 ;;		_I2C_Init
 13825 ;;		_Timer0_Init
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           	psect	text67
 13830  014900                     __ptext67:
 13831                           	opt stack 0
 13832  014900                     ___lldiv:
 13833                           	opt stack 19
 13834                           
 13835                           ; BSR set to: 0
 13836                           ;incstack = 0
 13837  014900  0E00               	movlw	0
 13838  014902  0100               	movlb	0	; () banked
 13839  014904  6F68               	movwf	___lldiv@quotient& (0+255),b
 13840  014906  0E00               	movlw	0
 13841  014908  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 13842  01490A  0E00               	movlw	0
 13843  01490C  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 13844  01490E  0E00               	movlw	0
 13845  014910  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 13846                           
 13847                           ; BSR set to: 0
 13848  014912  5164               	movf	___lldiv@divisor& (0+255),w,b
 13849  014914  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 13850  014916  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 13851  014918  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 13852  01491A  B4D8               	btfsc	status,2,c
 13853  01491C  D02A               	goto	l2678
 13854                           
 13855                           ; BSR set to: 0
 13856  01491E  0E01               	movlw	1
 13857  014920  6F6C               	movwf	___lldiv@counter& (0+255),b
 13858  014922  D006               	goto	l2673
 13859  014924                     
 13860                           ; BSR set to: 0
 13861                           
 13862                           ; BSR set to: 0
 13863  014924  90D8               	bcf	status,0,c
 13864  014926  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 13865  014928  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 13866  01492A  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 13867  01492C  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 13868  01492E  2B6C               	incf	___lldiv@counter& (0+255),f,b
 13869  014930                     l2673:
 13870                           
 13871                           ; BSR set to: 0
 13872                           
 13873                           ; BSR set to: 0
 13874  014930  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 13875  014932  D7F8               	goto	l2674
 13876  014934                     u11130:
 13877                           
 13878                           ; BSR set to: 0
 13879                           
 13880                           ; BSR set to: 0
 13881                           
 13882                           ; BSR set to: 0
 13883  014934  90D8               	bcf	status,0,c
 13884  014936  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 13885  014938  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 13886  01493A  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 13887  01493C  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 13888                           
 13889                           ; BSR set to: 0
 13890  01493E  5164               	movf	___lldiv@divisor& (0+255),w,b
 13891  014940  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 13892  014942  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13893  014944  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 13894  014946  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13895  014948  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 13896  01494A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13897  01494C  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 13898  01494E  A0D8               	btfss	status,0,c
 13899  014950  D009               	goto	l2677
 13900                           
 13901                           ; BSR set to: 0
 13902  014952  5164               	movf	___lldiv@divisor& (0+255),w,b
 13903  014954  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 13904  014956  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13905  014958  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 13906  01495A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13907  01495C  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 13908  01495E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13909  014960  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 13910                           
 13911                           ; BSR set to: 0
 13912  014962  8168               	bsf	___lldiv@quotient& (0+255),0,b
 13913  014964                     l2677:
 13914                           
 13915                           ; BSR set to: 0
 13916                           
 13917                           ; BSR set to: 0
 13918  014964  90D8               	bcf	status,0,c
 13919  014966  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 13920  014968  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 13921  01496A  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 13922  01496C  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 13923                           
 13924                           ; BSR set to: 0
 13925  01496E  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 13926  014970  D7E1               	goto	u11130
 13927  014972                     l2678:
 13928                           
 13929                           ; BSR set to: 0
 13930                           
 13931                           ; BSR set to: 0
 13932  014972  C068  F060         	movff	___lldiv@quotient,?___lldiv
 13933  014976  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 13934  01497A  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 13935  01497E  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 13936                           
 13937                           ; BSR set to: 0
 13938  014982  0012               	return		;funcret
 13939  014984                     __end_of___lldiv:
 13940                           	opt stack 0
 13941                           tosu	equ	0xFFF
 13942                           tosh	equ	0xFFE
 13943                           tosl	equ	0xFFD
 13944                           pclath	equ	0xFFA
 13945                           tblptru	equ	0xFF8
 13946                           tblptrh	equ	0xFF7
 13947                           tblptrl	equ	0xFF6
 13948                           tablat	equ	0xFF5
 13949                           prodh	equ	0xFF4
 13950                           prodl	equ	0xFF3
 13951                           intcon	equ	0xFF2
 13952                           postinc0	equ	0xFEE
 13953                           wreg	equ	0xFE8
 13954                           indf1	equ	0xFE7
 13955                           postdec1	equ	0xFE5
 13956                           fsr1h	equ	0xFE2
 13957                           fsr1l	equ	0xFE1
 13958                           indf2	equ	0xFDF
 13959                           postinc2	equ	0xFDE
 13960                           postdec2	equ	0xFDD
 13961                           plusw2	equ	0xFDB
 13962                           fsr2h	equ	0xFDA
 13963                           fsr2l	equ	0xFD9
 13964                           status	equ	0xFD8
 13965                           
 13966 ;; *************** function _Timer2_Clear *****************
 13967 ;; Defined at:
 13968 ;;		line 3 in file "Library/Timer2.c"
 13969 ;; Parameters:    Size  Location     Type
 13970 ;;		None
 13971 ;; Auto vars:     Size  Location     Type
 13972 ;;		None
 13973 ;; Return value:  Size  Location     Type
 13974 ;;                  1    wreg      void 
 13975 ;; Registers used:
 13976 ;;		None
 13977 ;; Tracked objects:
 13978 ;;		On entry : 0/0
 13979 ;;		On exit  : 0/0
 13980 ;;		Unchanged: 0/0
 13981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13986 ;;Total ram usage:        0 bytes
 13987 ;; Hardware stack levels used:    1
 13988 ;; Hardware stack levels required when called:    7
 13989 ;; This function calls:
 13990 ;;		Nothing
 13991 ;; This function is called by:
 13992 ;;		_Timer2_Init
 13993 ;; This function uses a non-reentrant model
 13994 ;;
 13995                           
 13996                           	psect	text68
 13997  01613C                     __ptext68:
 13998                           	opt stack 0
 13999  01613C                     _Timer2_Clear:
 14000                           	opt stack 19
 14001                           
 14002                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 14003                           
 14004                           ; BSR set to: 0
 14005                           ;incstack = 0
 14006  01613C  929E               	bcf	3998,1,c	;volatile
 14007                           
 14008                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 14009  01613E  929D               	bcf	3997,1,c	;volatile
 14010                           
 14011                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 14012  016140  929F               	bcf	3999,1,c	;volatile
 14013  016142  0012               	return		;funcret
 14014  016144                     __end_of_Timer2_Clear:
 14015                           	opt stack 0
 14016                           tosu	equ	0xFFF
 14017                           tosh	equ	0xFFE
 14018                           tosl	equ	0xFFD
 14019                           pclath	equ	0xFFA
 14020                           tblptru	equ	0xFF8
 14021                           tblptrh	equ	0xFF7
 14022                           tblptrl	equ	0xFF6
 14023                           tablat	equ	0xFF5
 14024                           prodh	equ	0xFF4
 14025                           prodl	equ	0xFF3
 14026                           intcon	equ	0xFF2
 14027                           postinc0	equ	0xFEE
 14028                           wreg	equ	0xFE8
 14029                           indf1	equ	0xFE7
 14030                           postdec1	equ	0xFE5
 14031                           fsr1h	equ	0xFE2
 14032                           fsr1l	equ	0xFE1
 14033                           indf2	equ	0xFDF
 14034                           postinc2	equ	0xFDE
 14035                           postdec2	equ	0xFDD
 14036                           plusw2	equ	0xFDB
 14037                           fsr2h	equ	0xFDA
 14038                           fsr2l	equ	0xFD9
 14039                           status	equ	0xFD8
 14040                           
 14041 ;; *************** function _SPI_DisableISR *****************
 14042 ;; Defined at:
 14043 ;;		line 181 in file "Library/SPI.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14046 ;;		 -> SPI1(11), SPI2(11), 
 14047 ;; Auto vars:     Size  Location     Type
 14048 ;;		None
 14049 ;; Return value:  Size  Location     Type
 14050 ;;                  1    wreg      void 
 14051 ;; Registers used:
 14052 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14053 ;; Tracked objects:
 14054 ;;		On entry : 0/0
 14055 ;;		On exit  : 0/0
 14056 ;;		Unchanged: 0/0
 14057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14058 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14061 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14062 ;;Total ram usage:        2 bytes
 14063 ;; Hardware stack levels used:    1
 14064 ;; Hardware stack levels required when called:    7
 14065 ;; This function calls:
 14066 ;;		Nothing
 14067 ;; This function is called by:
 14068 ;;		_SPI_Init
 14069 ;; This function uses a non-reentrant model
 14070 ;;
 14071                           
 14072                           	psect	text69
 14073  015CEE                     __ptext69:
 14074                           	opt stack 0
 14075  015CEE                     _SPI_DisableISR:
 14076                           	opt stack 20
 14077                           
 14078                           ;SPI.c: 183: switch (pInput->mChannel)
 14079                           
 14080                           ;incstack = 0
 14081  015CEE  D004               	goto	l654
 14082  015CF0                     l655:
 14083                           
 14084                           ; BSR set to: 0
 14085  015CF0  969D               	bcf	3997,3,c	;volatile
 14086  015CF2  0012               	return	
 14087  015CF4                     l657:
 14088                           
 14089                           ; BSR set to: 0
 14090  015CF4  9EA3               	bcf	4003,7,c	;volatile
 14091                           
 14092                           ; BSR set to: 0
 14093                           ;SPI.c: 188: };
 14094                           
 14095                           ; BSR set to: 0
 14096                           
 14097                           ;SPI.c: 187: default: return;
 14098  015CF6  0012               	return	
 14099  015CF8                     l654:
 14100                           
 14101                           ; BSR set to: 0
 14102  015CF8  0100               	movlb	0	; () banked
 14103  015CFA  EE20 F002          	lfsr	2,2
 14104  015CFE  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 14105  015D00  26D9               	addwf	fsr2l,f,c
 14106  015D02  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 14107  015D04  22DA               	addwfc	fsr2h,f,c
 14108  015D06  50DF               	movf	indf2,w,c
 14109                           
 14110                           ; Switch size 1, requested type "space"
 14111                           ; Number of cases is 2, Range of values is 0 to 1
 14112                           ; switch strategies available:
 14113                           ; Name         Instructions Cycles
 14114                           ; simple_byte            7     4 (average)
 14115                           ;	Chosen strategy is simple_byte
 14116  015D08  0A00               	xorlw	0	; case 0
 14117  015D0A  B4D8               	btfsc	status,2,c
 14118  015D0C  D7F1               	goto	l655
 14119  015D0E  0A01               	xorlw	1	; case 1
 14120  015D10  A4D8               	btfss	status,2,c
 14121  015D12  0012               	return	
 14122  015D14  D7EF               	goto	l657
 14123  015D16                     __end_of_SPI_DisableISR:
 14124                           	opt stack 0
 14125                           tosu	equ	0xFFF
 14126                           tosh	equ	0xFFE
 14127                           tosl	equ	0xFFD
 14128                           pclath	equ	0xFFA
 14129                           tblptru	equ	0xFF8
 14130                           tblptrh	equ	0xFF7
 14131                           tblptrl	equ	0xFF6
 14132                           tablat	equ	0xFF5
 14133                           prodh	equ	0xFF4
 14134                           prodl	equ	0xFF3
 14135                           intcon	equ	0xFF2
 14136                           postinc0	equ	0xFEE
 14137                           wreg	equ	0xFE8
 14138                           indf1	equ	0xFE7
 14139                           postdec1	equ	0xFE5
 14140                           fsr1h	equ	0xFE2
 14141                           fsr1l	equ	0xFE1
 14142                           indf2	equ	0xFDF
 14143                           postinc2	equ	0xFDE
 14144                           postdec2	equ	0xFDD
 14145                           plusw2	equ	0xFDB
 14146                           fsr2h	equ	0xFDA
 14147                           fsr2l	equ	0xFD9
 14148                           status	equ	0xFD8
 14149                           
 14150 ;; *************** function _SPI_DCS *****************
 14151 ;; Defined at:
 14152 ;;		line 219 in file "Library/SPI.c"
 14153 ;; Parameters:    Size  Location     Type
 14154 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14155 ;;		 -> SPI1(11), SPI2(11), 
 14156 ;; Auto vars:     Size  Location     Type
 14157 ;;		None
 14158 ;; Return value:  Size  Location     Type
 14159 ;;                  1    wreg      void 
 14160 ;; Registers used:
 14161 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14162 ;; Tracked objects:
 14163 ;;		On entry : 0/0
 14164 ;;		On exit  : 0/0
 14165 ;;		Unchanged: 0/0
 14166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14167 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14170 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14171 ;;Total ram usage:        2 bytes
 14172 ;; Hardware stack levels used:    1
 14173 ;; Hardware stack levels required when called:    7
 14174 ;; This function calls:
 14175 ;;		Nothing
 14176 ;; This function is called by:
 14177 ;;		_SPI_Init
 14178 ;; This function uses a non-reentrant model
 14179 ;;
 14180                           
 14181                           	psect	text70
 14182  015BD4                     __ptext70:
 14183                           	opt stack 0
 14184  015BD4                     _SPI_DCS:
 14185                           	opt stack 20
 14186                           
 14187                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 14188                           
 14189                           ; BSR set to: 0
 14190                           ;incstack = 0
 14191  015BD4  0100               	movlb	0	; () banked
 14192  015BD6  EE20 F002          	lfsr	2,2
 14193  015BDA  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 14194  015BDC  26D9               	addwf	fsr2l,f,c
 14195  015BDE  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 14196  015BE0  22DA               	addwfc	fsr2h,f,c
 14197  015BE2  50DF               	movf	indf2,w,c
 14198  015BE4  A4D8               	btfss	status,2,c
 14199  015BE6  D007               	goto	l673
 14200                           
 14201                           ; BSR set to: 0
 14202                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 14203  015BE8  C1AB  FFD9         	movff	_PortC+4,fsr2l
 14204  015BEC  C1AC  FFDA         	movff	_PortC+5,fsr2h
 14205  015BF0  0101               	movlb	1	; () banked
 14206  015BF2  84DF               	bsf	indf2,2,c
 14207  015BF4  0012               	return	
 14208  015BF6                     l673:
 14209                           
 14210                           ;SPI.c: 223: else
 14211                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 14212                           
 14213                           ; BSR set to: 1
 14214  015BF6  C197  FFD9         	movff	_PortD+4,fsr2l
 14215  015BFA  C198  FFDA         	movff	_PortD+5,fsr2h
 14216  015BFE  0101               	movlb	1	; () banked
 14217  015C00  8EDF               	bsf	indf2,7,c
 14218  015C02  0012               	return	
 14219  015C04                     __end_of_SPI_DCS:
 14220                           	opt stack 0
 14221                           tosu	equ	0xFFF
 14222                           tosh	equ	0xFFE
 14223                           tosl	equ	0xFFD
 14224                           pclath	equ	0xFFA
 14225                           tblptru	equ	0xFF8
 14226                           tblptrh	equ	0xFF7
 14227                           tblptrl	equ	0xFF6
 14228                           tablat	equ	0xFF5
 14229                           prodh	equ	0xFF4
 14230                           prodl	equ	0xFF3
 14231                           intcon	equ	0xFF2
 14232                           postinc0	equ	0xFEE
 14233                           wreg	equ	0xFE8
 14234                           indf1	equ	0xFE7
 14235                           postdec1	equ	0xFE5
 14236                           fsr1h	equ	0xFE2
 14237                           fsr1l	equ	0xFE1
 14238                           indf2	equ	0xFDF
 14239                           postinc2	equ	0xFDE
 14240                           postdec2	equ	0xFDD
 14241                           plusw2	equ	0xFDB
 14242                           fsr2h	equ	0xFDA
 14243                           fsr2l	equ	0xFD9
 14244                           status	equ	0xFD8
 14245                           
 14246 ;; *************** function _Get_Sensor_State *****************
 14247 ;; Defined at:
 14248 ;;		line 166 in file "main.c"
 14249 ;; Parameters:    Size  Location     Type
 14250 ;;		None
 14251 ;; Auto vars:     Size  Location     Type
 14252 ;;		None
 14253 ;; Return value:  Size  Location     Type
 14254 ;;                  2  2147[None  ] int 
 14255 ;; Registers used:
 14256 ;;		wreg, cstack
 14257 ;; Tracked objects:
 14258 ;;		On entry : 0/0
 14259 ;;		On exit  : 0/0
 14260 ;;		Unchanged: 0/0
 14261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14266 ;;Total ram usage:        0 bytes
 14267 ;; Hardware stack levels used:    1
 14268 ;; Hardware stack levels required when called:    8
 14269 ;; This function calls:
 14270 ;;		_eusartSend
 14271 ;; This function is called by:
 14272 ;;		_main
 14273 ;; This function uses a non-reentrant model
 14274 ;;
 14275                           
 14276                           	psect	text71
 14277  0150A4                     __ptext71:
 14278                           	opt stack 0
 14279  0150A4                     _Get_Sensor_State:
 14280                           	opt stack 22
 14281                           
 14282                           ;main.c: 168: eusartSend(142);
 14283                           
 14284                           ; BSR set to: 1
 14285                           ;incstack = 0
 14286  0150A4  0E8E               	movlw	142
 14287  0150A6  EC74  F0B0         	call	_eusartSend
 14288                           
 14289                           ;main.c: 169: eusartSend(7);
 14290  0150AA  0E07               	movlw	7
 14291  0150AC  EC74  F0B0         	call	_eusartSend
 14292  0150B0  AA9E               	btfss	3998,5,c	;volatile
 14293  0150B2  D7FE               	goto	l2149
 14294                           
 14295                           ;main.c: 171: BumpSensor = RCREG1;
 14296  0150B4  CFAF F03B          	movff	4015,_BumpSensor	;volatile
 14297                           
 14298                           ;main.c: 173: eusartSend(142);
 14299  0150B8  0E8E               	movlw	142
 14300  0150BA  EC74  F0B0         	call	_eusartSend
 14301                           
 14302                           ;main.c: 174: eusartSend(9);
 14303  0150BE  0E09               	movlw	9
 14304  0150C0  EC74  F0B0         	call	_eusartSend
 14305  0150C4  AA9E               	btfss	3998,5,c	;volatile
 14306  0150C6  D7FE               	goto	l2152
 14307                           
 14308                           ;main.c: 176: Cliff_Left = RCREG1;
 14309  0150C8  CFAF F13C          	movff	4015,_Cliff_Left	;volatile
 14310                           
 14311                           ;main.c: 178: eusartSend(142);
 14312  0150CC  0E8E               	movlw	142
 14313  0150CE  EC74  F0B0         	call	_eusartSend
 14314                           
 14315                           ;main.c: 179: eusartSend(10);
 14316  0150D2  0E0A               	movlw	10
 14317  0150D4  EC74  F0B0         	call	_eusartSend
 14318  0150D8  AA9E               	btfss	3998,5,c	;volatile
 14319  0150DA  D7FE               	goto	l2155
 14320                           
 14321                           ;main.c: 181: Cliff_FLeft = RCREG1;
 14322  0150DC  CFAF F13E          	movff	4015,_Cliff_FLeft	;volatile
 14323                           
 14324                           ;main.c: 183: eusartSend(142);
 14325  0150E0  0E8E               	movlw	142
 14326  0150E2  EC74  F0B0         	call	_eusartSend
 14327                           
 14328                           ;main.c: 184: eusartSend(11);
 14329  0150E6  0E0B               	movlw	11
 14330  0150E8  EC74  F0B0         	call	_eusartSend
 14331  0150EC  AA9E               	btfss	3998,5,c	;volatile
 14332  0150EE  D7FE               	goto	l2158
 14333                           
 14334                           ;main.c: 186: Cliff_FRight = RCREG1;
 14335  0150F0  CFAF F13F          	movff	4015,_Cliff_FRight	;volatile
 14336                           
 14337                           ;main.c: 188: eusartSend(142);
 14338  0150F4  0E8E               	movlw	142
 14339  0150F6  EC74  F0B0         	call	_eusartSend
 14340                           
 14341                           ;main.c: 189: eusartSend(12);
 14342  0150FA  0E0C               	movlw	12
 14343  0150FC  EC74  F0B0         	call	_eusartSend
 14344  015100  AA9E               	btfss	3998,5,c	;volatile
 14345  015102  D7FE               	goto	l2161
 14346                           
 14347                           ;main.c: 191: Cliff_Right = RCREG1;
 14348  015104  CFAF F13D          	movff	4015,_Cliff_Right	;volatile
 14349                           
 14350                           ;main.c: 193: return 1;
 14351                           ;	Return value of _Get_Sensor_State is never used
 14352  015108  0012               	return		;funcret
 14353  01510A                     __end_of_Get_Sensor_State:
 14354                           	opt stack 0
 14355                           tosu	equ	0xFFF
 14356                           tosh	equ	0xFFE
 14357                           tosl	equ	0xFFD
 14358                           pclath	equ	0xFFA
 14359                           tblptru	equ	0xFF8
 14360                           tblptrh	equ	0xFF7
 14361                           tblptrl	equ	0xFF6
 14362                           tablat	equ	0xFF5
 14363                           prodh	equ	0xFF4
 14364                           prodl	equ	0xFF3
 14365                           intcon	equ	0xFF2
 14366                           postinc0	equ	0xFEE
 14367                           wreg	equ	0xFE8
 14368                           indf1	equ	0xFE7
 14369                           postdec1	equ	0xFE5
 14370                           fsr1h	equ	0xFE2
 14371                           fsr1l	equ	0xFE1
 14372                           indf2	equ	0xFDF
 14373                           postinc2	equ	0xFDE
 14374                           postdec2	equ	0xFDD
 14375                           plusw2	equ	0xFDB
 14376                           fsr2h	equ	0xFDA
 14377                           fsr2l	equ	0xFD9
 14378                           status	equ	0xFD8
 14379                           
 14380 ;; *************** function _FunctInitButton *****************
 14381 ;; Defined at:
 14382 ;;		line 16 in file "Functions.c"
 14383 ;; Parameters:    Size  Location     Type
 14384 ;;		None
 14385 ;; Auto vars:     Size  Location     Type
 14386 ;;		None
 14387 ;; Return value:  Size  Location     Type
 14388 ;;                  1    wreg      void 
 14389 ;; Registers used:
 14390 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14391 ;; Tracked objects:
 14392 ;;		On entry : 0/0
 14393 ;;		On exit  : 0/0
 14394 ;;		Unchanged: 0/0
 14395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14400 ;;Total ram usage:        0 bytes
 14401 ;; Hardware stack levels used:    1
 14402 ;; Hardware stack levels required when called:   16
 14403 ;; This function calls:
 14404 ;;		_Button_Init
 14405 ;; This function is called by:
 14406 ;;		_main
 14407 ;; This function uses a non-reentrant model
 14408 ;;
 14409                           
 14410                           	psect	text72
 14411  014C66                     __ptext72:
 14412                           	opt stack 0
 14413  014C66                     _FunctInitButton:
 14414                           	opt stack 14
 14415                           
 14416                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 14417                           
 14418                           ;incstack = 0
 14419  014C66  0EDD               	movlw	low _TestButton
 14420  014C68  0100               	movlb	0	; () banked
 14421  014C6A  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14422  014C6C  0E02               	movlw	high _TestButton
 14423  014C6E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14424  014C70  0E00               	movlw	0
 14425  014C72  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14426  014C74  0E02               	movlw	2
 14427  014C76  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14428  014C78  0E90               	movlw	low _MXK_InitTestButton
 14429  014C7A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14430  014C7C  0E5F               	movlw	high _MXK_InitTestButton
 14431  014C7E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14432  014C80  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 14433  014C82  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14434  014C84  0E36               	movlw	low _MXK_TestButton
 14435  014C86  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14436  014C88  0E60               	movlw	high _MXK_TestButton
 14437  014C8A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14438  014C8C  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 14439  014C8E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14440  014C90  0E3E               	movlw	low _Event_TestButton
 14441  014C92  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14442  014C94  0E5B               	movlw	high _Event_TestButton
 14443  014C96  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14444  014C98  0E01               	movlw	low (_Event_TestButton shr (0+16))
 14445  014C9A  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14446  014C9C  EC11  F0A0         	call	_Button_Init	;wreg free
 14447                           
 14448                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 14449  014CA0  0ED3               	movlw	low _DIPSwitch
 14450  014CA2  0100               	movlb	0	; () banked
 14451  014CA4  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14452  014CA6  0E02               	movlw	high _DIPSwitch
 14453  014CA8  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14454  014CAA  0E00               	movlw	0
 14455  014CAC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14456  014CAE  0E02               	movlw	2
 14457  014CB0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14458  014CB2  0E78               	movlw	low _MXK_InitDIPSwitch
 14459  014CB4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14460  014CB6  0E5F               	movlw	high _MXK_InitDIPSwitch
 14461  014CB8  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14462  014CBA  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 14463  014CBC  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14464  014CBE  0EBE               	movlw	low _MXK_DIPSwitch
 14465  014CC0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14466  014CC2  0E5F               	movlw	high _MXK_DIPSwitch
 14467  014CC4  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14468  014CC6  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 14469  014CC8  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14470  014CCA  0E8E               	movlw	low _Event_DIPSwitch
 14471  014CCC  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14472  014CCE  0E5D               	movlw	high _Event_DIPSwitch
 14473  014CD0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14474  014CD2  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 14475  014CD4  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14476  014CD6  EC11  F0A0         	call	_Button_Init	;wreg free
 14477  014CDA  0012               	return		;funcret
 14478  014CDC                     __end_of_FunctInitButton:
 14479                           	opt stack 0
 14480                           tosu	equ	0xFFF
 14481                           tosh	equ	0xFFE
 14482                           tosl	equ	0xFFD
 14483                           pclath	equ	0xFFA
 14484                           tblptru	equ	0xFF8
 14485                           tblptrh	equ	0xFF7
 14486                           tblptrl	equ	0xFF6
 14487                           tablat	equ	0xFF5
 14488                           prodh	equ	0xFF4
 14489                           prodl	equ	0xFF3
 14490                           intcon	equ	0xFF2
 14491                           postinc0	equ	0xFEE
 14492                           wreg	equ	0xFE8
 14493                           indf1	equ	0xFE7
 14494                           postdec1	equ	0xFE5
 14495                           fsr1h	equ	0xFE2
 14496                           fsr1l	equ	0xFE1
 14497                           indf2	equ	0xFDF
 14498                           postinc2	equ	0xFDE
 14499                           postdec2	equ	0xFDD
 14500                           plusw2	equ	0xFDB
 14501                           fsr2h	equ	0xFDA
 14502                           fsr2l	equ	0xFD9
 14503                           status	equ	0xFD8
 14504                           
 14505 ;; *************** function _Button_Init *****************
 14506 ;; Defined at:
 14507 ;;		line 18 in file "Library/Button.c"
 14508 ;; Parameters:    Size  Location     Type
 14509 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 14510 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 14511 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 14512 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 14513 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 14514 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 14515 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 14516 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 14517 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 14518 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 14519 ;; Auto vars:     Size  Location     Type
 14520 ;;		None
 14521 ;; Return value:  Size  Location     Type
 14522 ;;                  1    wreg      void 
 14523 ;; Registers used:
 14524 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14525 ;; Tracked objects:
 14526 ;;		On entry : 0/0
 14527 ;;		On exit  : 0/0
 14528 ;;		Unchanged: 0/0
 14529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14530 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14533 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14534 ;;Total ram usage:       13 bytes
 14535 ;; Hardware stack levels used:    1
 14536 ;; Hardware stack levels required when called:   15
 14537 ;; This function calls:
 14538 ;;		_HMI_InitButtons
 14539 ;;		_MXK_InitDIPSwitch
 14540 ;;		_MXK_InitTestButton
 14541 ;; This function is called by:
 14542 ;;		_HMI_Init
 14543 ;;		_FunctInitButton
 14544 ;; This function uses a non-reentrant model
 14545 ;;
 14546                           
 14547                           	psect	text73
 14548  014022                     __ptext73:
 14549                           	opt stack 0
 14550  014022                     _Button_Init:
 14551                           	opt stack 14
 14552                           
 14553                           ;Button.c: 21: if(pInput==(void*)0)
 14554                           
 14555                           ;incstack = 0
 14556  014022  0100               	movlb	0	; () banked
 14557  014024  519B               	movf	Button_Init@pInput& (0+255),w,b
 14558  014026  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 14559  014028  B4D8               	btfsc	status,2,c
 14560  01402A  0012               	return	
 14561                           
 14562                           ; BSR set to: 0
 14563                           ;Button.c: 23: if(pInitIO==(void*)0)
 14564                           
 14565                           ; BSR set to: 0
 14566                           
 14567                           ; BSR set to: 0
 14568                           ;Button.c: 22: return;
 14569  01402C  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 14570  01402E  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 14571  014030  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 14572  014032  B4D8               	btfsc	status,2,c
 14573  014034  0012               	return	
 14574                           
 14575                           ; BSR set to: 0
 14576                           ;Button.c: 25: if(pGetState==(void*)0)
 14577                           
 14578                           ; BSR set to: 0
 14579                           
 14580                           ; BSR set to: 0
 14581                           ;Button.c: 24: return;
 14582  014036  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 14583  014038  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 14584  01403A  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 14585  01403C  B4D8               	btfsc	status,2,c
 14586  01403E  0012               	return	
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;Button.c: 27: if(pFunction==(void*)0)
 14590                           
 14591                           ; BSR set to: 0
 14592                           
 14593                           ; BSR set to: 0
 14594                           ;Button.c: 26: return;
 14595  014040  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 14596  014042  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 14597  014044  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 14598  014046  B4D8               	btfsc	status,2,c
 14599  014048  0012               	return	
 14600                           
 14601                           ; BSR set to: 0
 14602                           ;Button.c: 30: if(pThreshold == 0)
 14603                           
 14604                           ; BSR set to: 0
 14605                           
 14606                           ; BSR set to: 0
 14607                           ;Button.c: 28: return;
 14608  01404A  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 14609  01404C  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 14610  01404E  A4D8               	btfss	status,2,c
 14611  014050  D004               	goto	l8
 14612                           
 14613                           ; BSR set to: 0
 14614                           ;Button.c: 31: pThreshold = 1;
 14615  014052  0E00               	movlw	0
 14616  014054  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14617  014056  0E01               	movlw	1
 14618  014058  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14619  01405A                     l8:
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;Button.c: 34: pInput->mState = 0;
 14623                           
 14624                           ; BSR set to: 0
 14625  01405A  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 14626  01405E  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 14627  014062  0E00               	movlw	0
 14628  014064  6EDF               	movwf	indf2,c
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;Button.c: 35: pInput->mCount = 0;
 14632  014066  EE20 F001          	lfsr	2,1
 14633  01406A  519B               	movf	Button_Init@pInput& (0+255),w,b
 14634  01406C  26D9               	addwf	fsr2l,f,c
 14635  01406E  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14636  014070  22DA               	addwfc	fsr2h,f,c
 14637  014072  0E00               	movlw	0
 14638  014074  6EDF               	movwf	indf2,c
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 14642  014076  EE20 F002          	lfsr	2,2
 14643  01407A  519B               	movf	Button_Init@pInput& (0+255),w,b
 14644  01407C  26D9               	addwf	fsr2l,f,c
 14645  01407E  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14646  014080  22DA               	addwfc	fsr2h,f,c
 14647  014082  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 14648  014086  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 14649                           
 14650                           ; BSR set to: 0
 14651                           ;Button.c: 37: pInput->mFunction = pFunction;
 14652  01408A  EE20 F004          	lfsr	2,4
 14653  01408E  519B               	movf	Button_Init@pInput& (0+255),w,b
 14654  014090  26D9               	addwf	fsr2l,f,c
 14655  014092  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14656  014094  22DA               	addwfc	fsr2h,f,c
 14657  014096  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 14658  01409A  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 14659  01409E  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 14660                           
 14661                           ; BSR set to: 0
 14662                           ;Button.c: 38: pInput->mGetState = pGetState;
 14663  0140A2  EE20 F007          	lfsr	2,7
 14664  0140A6  519B               	movf	Button_Init@pInput& (0+255),w,b
 14665  0140A8  26D9               	addwf	fsr2l,f,c
 14666  0140AA  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14667  0140AC  22DA               	addwfc	fsr2h,f,c
 14668  0140AE  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 14669  0140B2  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 14670  0140B6  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 14671                           
 14672                           ; BSR set to: 0
 14673                           ;Button.c: 41: pInitIO();
 14674  0140BA  D801               	call	u12048
 14675  0140BC  0012               	return	
 14676  0140BE                     u12048:
 14677  0140BE  0005               	push	
 14678  0140C0  6EFA               	movwf	pclath,c
 14679  0140C2  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 14680  0140C4  6EFD               	movwf	tosl,c
 14681  0140C6  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 14682  0140C8  6EFE               	movwf	tosh,c
 14683  0140CA  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 14684  0140CC  6EFF               	movwf	tosu,c
 14685  0140CE  50FA               	movf	pclath,w,c
 14686  0140D0  0012               	return		;indir
 14687  0140D2                     __end_of_Button_Init:
 14688                           	opt stack 0
 14689                           tosu	equ	0xFFF
 14690                           tosh	equ	0xFFE
 14691                           tosl	equ	0xFFD
 14692                           pclath	equ	0xFFA
 14693                           tblptru	equ	0xFF8
 14694                           tblptrh	equ	0xFF7
 14695                           tblptrl	equ	0xFF6
 14696                           tablat	equ	0xFF5
 14697                           prodh	equ	0xFF4
 14698                           prodl	equ	0xFF3
 14699                           intcon	equ	0xFF2
 14700                           postinc0	equ	0xFEE
 14701                           wreg	equ	0xFE8
 14702                           indf1	equ	0xFE7
 14703                           postdec1	equ	0xFE5
 14704                           fsr1h	equ	0xFE2
 14705                           fsr1l	equ	0xFE1
 14706                           indf2	equ	0xFDF
 14707                           postinc2	equ	0xFDE
 14708                           postdec2	equ	0xFDD
 14709                           plusw2	equ	0xFDB
 14710                           fsr2h	equ	0xFDA
 14711                           fsr2l	equ	0xFD9
 14712                           status	equ	0xFD8
 14713                           
 14714 ;; *************** function _MXK_InitDIPSwitch *****************
 14715 ;; Defined at:
 14716 ;;		line 20 in file "Library/MXK.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;		None
 14719 ;; Auto vars:     Size  Location     Type
 14720 ;;		None
 14721 ;; Return value:  Size  Location     Type
 14722 ;;                  1    wreg      void 
 14723 ;; Registers used:
 14724 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14725 ;; Tracked objects:
 14726 ;;		On entry : 0/0
 14727 ;;		On exit  : 0/0
 14728 ;;		Unchanged: 0/0
 14729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14734 ;;Total ram usage:        0 bytes
 14735 ;; Hardware stack levels used:    1
 14736 ;; Hardware stack levels required when called:   14
 14737 ;; This function calls:
 14738 ;;		_Port_SetQuadType
 14739 ;; This function is called by:
 14740 ;;		_FunctInitButton
 14741 ;;		_Button_Init
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           	psect	text74
 14746  015F78                     __ptext74:
 14747                           	opt stack 0
 14748  015F78                     _MXK_InitDIPSwitch:
 14749                           	opt stack 14
 14750                           
 14751                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 14752                           
 14753                           ;incstack = 0
 14754  015F78  0E93               	movlw	low _PortD
 14755  015F7A  0100               	movlb	0	; () banked
 14756  015F7C  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 14757  015F7E  0E01               	movlw	high _PortD
 14758  015F80  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14759  015F82  0E00               	movlw	0
 14760  015F84  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14761  015F86  0E00               	movlw	0
 14762  015F88  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 14763  015F8A  EC8B  F08F         	call	_Port_SetQuadType	;wreg free
 14764  015F8E  0012               	return		;funcret
 14765  015F90                     __end_of_MXK_InitDIPSwitch:
 14766                           	opt stack 0
 14767                           tosu	equ	0xFFF
 14768                           tosh	equ	0xFFE
 14769                           tosl	equ	0xFFD
 14770                           pclath	equ	0xFFA
 14771                           tblptru	equ	0xFF8
 14772                           tblptrh	equ	0xFF7
 14773                           tblptrl	equ	0xFF6
 14774                           tablat	equ	0xFF5
 14775                           prodh	equ	0xFF4
 14776                           prodl	equ	0xFF3
 14777                           intcon	equ	0xFF2
 14778                           postinc0	equ	0xFEE
 14779                           wreg	equ	0xFE8
 14780                           indf1	equ	0xFE7
 14781                           postdec1	equ	0xFE5
 14782                           fsr1h	equ	0xFE2
 14783                           fsr1l	equ	0xFE1
 14784                           indf2	equ	0xFDF
 14785                           postinc2	equ	0xFDE
 14786                           postdec2	equ	0xFDD
 14787                           plusw2	equ	0xFDB
 14788                           fsr2h	equ	0xFDA
 14789                           fsr2l	equ	0xFD9
 14790                           status	equ	0xFD8
 14791                           
 14792 ;; *************** function _HMI_InitButtons *****************
 14793 ;; Defined at:
 14794 ;;		line 21 in file "HMI.c"
 14795 ;; Parameters:    Size  Location     Type
 14796 ;;		None
 14797 ;; Auto vars:     Size  Location     Type
 14798 ;;		None
 14799 ;; Return value:  Size  Location     Type
 14800 ;;                  1    wreg      void 
 14801 ;; Registers used:
 14802 ;;		wreg, status,2
 14803 ;; Tracked objects:
 14804 ;;		On entry : 0/0
 14805 ;;		On exit  : 0/0
 14806 ;;		Unchanged: 0/0
 14807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14812 ;;Total ram usage:        0 bytes
 14813 ;; Hardware stack levels used:    1
 14814 ;; Hardware stack levels required when called:    7
 14815 ;; This function calls:
 14816 ;;		Nothing
 14817 ;; This function is called by:
 14818 ;;		_HMI_Init
 14819 ;;		_Button_Init
 14820 ;; This function uses a non-reentrant model
 14821 ;;
 14822                           
 14823                           	psect	text75
 14824  016150                     __ptext75:
 14825                           	opt stack 0
 14826  016150                     _HMI_InitButtons:
 14827                           	opt stack 21
 14828                           
 14829                           ;HMI.c: 23: TRISE = 0xFC;
 14830                           
 14831                           ;incstack = 0
 14832  016150  0EFC               	movlw	252
 14833  016152  6E96               	movwf	3990,c	;volatile
 14834  016154  0012               	return		;funcret
 14835  016156                     __end_of_HMI_InitButtons:
 14836                           	opt stack 0
 14837                           tosu	equ	0xFFF
 14838                           tosh	equ	0xFFE
 14839                           tosl	equ	0xFFD
 14840                           pclath	equ	0xFFA
 14841                           tblptru	equ	0xFF8
 14842                           tblptrh	equ	0xFF7
 14843                           tblptrl	equ	0xFF6
 14844                           tablat	equ	0xFF5
 14845                           prodh	equ	0xFF4
 14846                           prodl	equ	0xFF3
 14847                           intcon	equ	0xFF2
 14848                           postinc0	equ	0xFEE
 14849                           wreg	equ	0xFE8
 14850                           indf1	equ	0xFE7
 14851                           postdec1	equ	0xFE5
 14852                           fsr1h	equ	0xFE2
 14853                           fsr1l	equ	0xFE1
 14854                           indf2	equ	0xFDF
 14855                           postinc2	equ	0xFDE
 14856                           postdec2	equ	0xFDD
 14857                           plusw2	equ	0xFDB
 14858                           fsr2h	equ	0xFDA
 14859                           fsr2l	equ	0xFD9
 14860                           status	equ	0xFD8
 14861                           
 14862 ;; *************** function _MXK_InitTestButton *****************
 14863 ;; Defined at:
 14864 ;;		line 10 in file "Library/MXK.c"
 14865 ;; Parameters:    Size  Location     Type
 14866 ;;		None
 14867 ;; Auto vars:     Size  Location     Type
 14868 ;;		None
 14869 ;; Return value:  Size  Location     Type
 14870 ;;                  1    wreg      void 
 14871 ;; Registers used:
 14872 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14873 ;; Tracked objects:
 14874 ;;		On entry : 0/0
 14875 ;;		On exit  : 0/0
 14876 ;;		Unchanged: 0/0
 14877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14882 ;;Total ram usage:        0 bytes
 14883 ;; Hardware stack levels used:    1
 14884 ;; Hardware stack levels required when called:   12
 14885 ;; This function calls:
 14886 ;;		_Port_SetPinType
 14887 ;; This function is called by:
 14888 ;;		_FunctInitButton
 14889 ;;		_Button_Init
 14890 ;; This function uses a non-reentrant model
 14891 ;;
 14892                           
 14893                           	psect	text76
 14894  015F90                     __ptext76:
 14895                           	opt stack 0
 14896  015F90                     _MXK_InitTestButton:
 14897                           	opt stack 16
 14898                           
 14899                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 14900                           
 14901                           ;incstack = 0
 14902  015F90  0E9D               	movlw	low _PortB
 14903  015F92  0100               	movlb	0	; () banked
 14904  015F94  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14905  015F96  0E01               	movlw	high _PortB
 14906  015F98  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14907  015F9A  0E04               	movlw	4
 14908  015F9C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14909  015F9E  0E00               	movlw	0
 14910  015FA0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14911  015FA2  EC42  F093         	call	_Port_SetPinType	;wreg free
 14912  015FA6  0012               	return		;funcret
 14913  015FA8                     __end_of_MXK_InitTestButton:
 14914                           	opt stack 0
 14915                           tosu	equ	0xFFF
 14916                           tosh	equ	0xFFE
 14917                           tosl	equ	0xFFD
 14918                           pclath	equ	0xFFA
 14919                           tblptru	equ	0xFF8
 14920                           tblptrh	equ	0xFF7
 14921                           tblptrl	equ	0xFF6
 14922                           tablat	equ	0xFF5
 14923                           prodh	equ	0xFF4
 14924                           prodl	equ	0xFF3
 14925                           intcon	equ	0xFF2
 14926                           postinc0	equ	0xFEE
 14927                           wreg	equ	0xFE8
 14928                           indf1	equ	0xFE7
 14929                           postdec1	equ	0xFE5
 14930                           fsr1h	equ	0xFE2
 14931                           fsr1l	equ	0xFE1
 14932                           indf2	equ	0xFDF
 14933                           postinc2	equ	0xFDE
 14934                           postdec2	equ	0xFDD
 14935                           plusw2	equ	0xFDB
 14936                           fsr2h	equ	0xFDA
 14937                           fsr2l	equ	0xFD9
 14938                           status	equ	0xFD8
 14939                           
 14940 ;; *************** function _Port_SetPinType *****************
 14941 ;; Defined at:
 14942 ;;		line 189 in file "Library/Port.c"
 14943 ;; Parameters:    Size  Location     Type
 14944 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 14945 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14946 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14947 ;;  pPin            1   40[BANK0 ] enum E6750
 14948 ;;  pType           1   41[BANK0 ] enum E6795
 14949 ;; Auto vars:     Size  Location     Type
 14950 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 14951 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 14952 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 14953 ;;  Output          1   42[BANK0 ] enum E6475
 14954 ;; Return value:  Size  Location     Type
 14955 ;;                  1    wreg      enum E6475
 14956 ;; Registers used:
 14957 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14958 ;; Tracked objects:
 14959 ;;		On entry : 0/0
 14960 ;;		On exit  : 0/0
 14961 ;;		Unchanged: 0/0
 14962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14963 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14964 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14966 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14967 ;;Total ram usage:        7 bytes
 14968 ;; Hardware stack levels used:    1
 14969 ;; Hardware stack levels required when called:   11
 14970 ;; This function calls:
 14971 ;;		_Byte_SetBit
 14972 ;;		_PortProperty_Valid
 14973 ;;		_Word_SetPair
 14974 ;; This function is called by:
 14975 ;;		_Configure_GPIOs
 14976 ;;		_LED_Init
 14977 ;;		_Port_Init
 14978 ;;		_SPI_Init
 14979 ;;		_MXK_InitTestButton
 14980 ;;		_MXK_Init
 14981 ;;		_I2C_Init
 14982 ;;		_Motor_Init
 14983 ;; This function uses a non-reentrant model
 14984 ;;
 14985                           
 14986                           	psect	text77
 14987  012684                     __ptext77:
 14988                           	opt stack 0
 14989  012684                     _Port_SetPinType:
 14990                           	opt stack 18
 14991                           
 14992                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 14993                           
 14994                           ;incstack = 0
 14995  012684  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 14996  012688  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 14997  01268C  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 14998  012690  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 14999                           
 15000                           ;Port.c: 192: ePinError Output = ePinErrorState;
 15001  012694  0E05               	movlw	5
 15002  012696  0100               	movlb	0	; () banked
 15003  012698  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15004                           
 15005                           ;Port.c: 193: switch (pType)
 15006  01269A  D0A7               	goto	l412
 15007  01269C                     
 15008                           ; BSR set to: 0
 15009                           ;Port.c: 197: {
 15010                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15011                           
 15012                           ; BSR set to: 0
 15013  01269C  EE20 F002          	lfsr	2,2
 15014  0126A0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15015  0126A2  26D9               	addwf	fsr2l,f,c
 15016  0126A4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15017  0126A6  22DA               	addwfc	fsr2h,f,c
 15018  0126A8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15019  0126AC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15020  0126B0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15021  0126B4  0E01               	movlw	1
 15022  0126B6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15023  0126B8  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 15024                           
 15025                           ;Port.c: 203: break;
 15026  0126BC  D0A4               	goto	l414
 15027  0126BE                     
 15028                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 15029  0126BE  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15030  0126C2  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15031  0126C6  0E01               	movlw	1
 15032  0126C8  0100               	movlb	0	; () banked
 15033  0126CA  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15034  0126CC  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15035  0126D0  EC1E  F0A8         	call	_PortProperty_Valid	;wreg free
 15036  0126D4  0100               	movlb	0	; () banked
 15037  0126D6  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15038  0126D8  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15039  0126DA  A4D8               	btfss	status,2,c
 15040  0126DC  0012               	return	
 15041                           
 15042                           ; BSR set to: 0
 15043                           ;Port.c: 208: {
 15044                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15045  0126DE  EE20 F002          	lfsr	2,2
 15046  0126E2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15047  0126E4  26D9               	addwf	fsr2l,f,c
 15048  0126E6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15049  0126E8  22DA               	addwfc	fsr2h,f,c
 15050  0126EA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15051  0126EE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15052  0126F2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15053  0126F6  0E00               	movlw	0
 15054  0126F8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15055  0126FA  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 15056                           
 15057                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15058  0126FE  0100               	movlb	0	; () banked
 15059  012700  EE20 F004          	lfsr	2,4
 15060  012704  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15061  012706  26D9               	addwf	fsr2l,f,c
 15062  012708  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15063  01270A  22DA               	addwfc	fsr2h,f,c
 15064  01270C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15065  012710  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15066  012714  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15067  012718  0E00               	movlw	0
 15068  01271A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15069  01271C  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 15070                           
 15071                           ;Port.c: 214: break;
 15072  012720  D072               	goto	l414
 15073  012722                     
 15074                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 15075                           
 15076                           ;Port.c: 218: case eTypeOutputOpenSource:
 15077  012722  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15078  012726  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15079  01272A  0E02               	movlw	2
 15080  01272C  0100               	movlb	0	; () banked
 15081  01272E  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15082  012730  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15083  012734  EC1E  F0A8         	call	_PortProperty_Valid	;wreg free
 15084  012738  0100               	movlb	0	; () banked
 15085  01273A  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15086  01273C  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15087  01273E  A4D8               	btfss	status,2,c
 15088  012740  0012               	return	
 15089                           
 15090                           ; BSR set to: 0
 15091                           ;Port.c: 220: {
 15092                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15093  012742  EE20 F002          	lfsr	2,2
 15094  012746  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15095  012748  26D9               	addwf	fsr2l,f,c
 15096  01274A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15097  01274C  22DA               	addwfc	fsr2h,f,c
 15098  01274E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15099  012752  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15100  012756  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15101  01275A  0E01               	movlw	1
 15102  01275C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15103  01275E  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 15104                           
 15105                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 15106  012762  0100               	movlb	0	; () banked
 15107  012764  EE20 F004          	lfsr	2,4
 15108  012768  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15109  01276A  26D9               	addwf	fsr2l,f,c
 15110  01276C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15111  01276E  22DA               	addwfc	fsr2h,f,c
 15112  012770  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15113  012774  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15114  012778  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15115  01277C  0E01               	movlw	1
 15116  01277E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15117  012780  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 15118                           
 15119                           ;Port.c: 226: break;
 15120  012784  D040               	goto	l414
 15121  012786                     
 15122                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 15123                           
 15124                           ;Port.c: 230: case eTypeOutputPushPull:
 15125  012786  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15126  01278A  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15127  01278E  0E00               	movlw	0
 15128  012790  0100               	movlb	0	; () banked
 15129  012792  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15130  012794  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15131  012798  EC1E  F0A8         	call	_PortProperty_Valid	;wreg free
 15132  01279C  0100               	movlb	0	; () banked
 15133  01279E  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15134  0127A0  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15135  0127A2  A4D8               	btfss	status,2,c
 15136  0127A4  0012               	return	
 15137                           
 15138                           ; BSR set to: 0
 15139                           ;Port.c: 232: {
 15140                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15141  0127A6  EE20 F002          	lfsr	2,2
 15142  0127AA  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15143  0127AC  26D9               	addwf	fsr2l,f,c
 15144  0127AE  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15145  0127B0  22DA               	addwfc	fsr2h,f,c
 15146  0127B2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15147  0127B6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15148  0127BA  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15149  0127BE  0E00               	movlw	0
 15150  0127C0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15151  0127C2  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 15152                           
 15153                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15154  0127C6  0100               	movlb	0	; () banked
 15155  0127C8  EE20 F004          	lfsr	2,4
 15156  0127CC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15157  0127CE  26D9               	addwf	fsr2l,f,c
 15158  0127D0  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15159  0127D2  22DA               	addwfc	fsr2h,f,c
 15160  0127D4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15161  0127D8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15162  0127DC  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15163  0127E0  0E00               	movlw	0
 15164  0127E2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15165  0127E4  EC14  F0AA         	call	_Byte_SetBit	;wreg free
 15166                           
 15167                           ;Port.c: 239: }
 15168                           
 15169                           ;Port.c: 238: break;
 15170  0127E8  D00E               	goto	l414
 15171  0127EA                     l412:
 15172  0127EA  0100               	movlb	0	; () banked
 15173  0127EC  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 15174                           
 15175                           ; Switch size 1, requested type "space"
 15176                           ; Number of cases is 4, Range of values is 0 to 3
 15177                           ; switch strategies available:
 15178                           ; Name         Instructions Cycles
 15179                           ; simple_byte           13     7 (average)
 15180                           ;	Chosen strategy is simple_byte
 15181  0127EE  0A00               	xorlw	0	; case 0
 15182  0127F0  B4D8               	btfsc	status,2,c
 15183  0127F2  D754               	goto	l413
 15184  0127F4  0A01               	xorlw	1	; case 1
 15185  0127F6  B4D8               	btfsc	status,2,c
 15186  0127F8  D762               	goto	l415
 15187  0127FA  0A03               	xorlw	3	; case 2
 15188  0127FC  B4D8               	btfsc	status,2,c
 15189  0127FE  D791               	goto	l417
 15190  012800  0A01               	xorlw	1	; case 3
 15191  012802  B4D8               	btfsc	status,2,c
 15192  012804  D7C0               	goto	l421
 15193  012806                     l414:
 15194                           
 15195                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 15196                           
 15197                           ; BSR set to: 0
 15198  012806  0E08               	movlw	8
 15199  012808  0100               	movlb	0	; () banked
 15200  01280A  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 15201  01280C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15202  01280E  0E00               	movlw	0
 15203  012810  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 15204  012812  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15205  012814  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 15206  012818  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 15207  01281C  EC16  F0AD         	call	_Word_SetPair	;wreg free
 15208  012820  0012               	return	
 15209  012822                     __end_of_Port_SetPinType:
 15210                           	opt stack 0
 15211                           tosu	equ	0xFFF
 15212                           tosh	equ	0xFFE
 15213                           tosl	equ	0xFFD
 15214                           pclath	equ	0xFFA
 15215                           tblptru	equ	0xFF8
 15216                           tblptrh	equ	0xFF7
 15217                           tblptrl	equ	0xFF6
 15218                           tablat	equ	0xFF5
 15219                           prodh	equ	0xFF4
 15220                           prodl	equ	0xFF3
 15221                           intcon	equ	0xFF2
 15222                           postinc0	equ	0xFEE
 15223                           wreg	equ	0xFE8
 15224                           indf1	equ	0xFE7
 15225                           postdec1	equ	0xFE5
 15226                           fsr1h	equ	0xFE2
 15227                           fsr1l	equ	0xFE1
 15228                           indf2	equ	0xFDF
 15229                           postinc2	equ	0xFDE
 15230                           postdec2	equ	0xFDD
 15231                           plusw2	equ	0xFDB
 15232                           fsr2h	equ	0xFDA
 15233                           fsr2l	equ	0xFD9
 15234                           status	equ	0xFD8
 15235                           
 15236 ;; *************** function _Byte_SetBit *****************
 15237 ;; Defined at:
 15238 ;;		line 32 in file "Library/Types.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15241 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 15242 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 15243 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15244 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15245 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15246 ;;		 -> NULL(0), 
 15247 ;;  pBit            1    2[BANK0 ] unsigned char 
 15248 ;;  pValue          1    3[BANK0 ] unsigned char 
 15249 ;; Auto vars:     Size  Location     Type
 15250 ;;		None
 15251 ;; Return value:  Size  Location     Type
 15252 ;;                  1    wreg      void 
 15253 ;; Registers used:
 15254 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15255 ;; Tracked objects:
 15256 ;;		On entry : 0/0
 15257 ;;		On exit  : 0/0
 15258 ;;		Unchanged: 0/0
 15259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;Total ram usage:        7 bytes
 15265 ;; Hardware stack levels used:    1
 15266 ;; Hardware stack levels required when called:    7
 15267 ;; This function calls:
 15268 ;;		Nothing
 15269 ;; This function is called by:
 15270 ;;		_Port_SetPinType
 15271 ;;		_Port_SetPin
 15272 ;;		_SPI_Init
 15273 ;;		_SPI_MinSpeed
 15274 ;;		_SPI_MaxSpeed
 15275 ;;		_Word_SetBit
 15276 ;;		_I2C_Init
 15277 ;; This function uses a non-reentrant model
 15278 ;;
 15279                           
 15280                           	psect	text78
 15281  015428                     __ptext78:
 15282                           	opt stack 0
 15283  015428                     _Byte_SetBit:
 15284                           	opt stack 21
 15285                           
 15286                           ;Types.c: 34: pValue &= 1;
 15287                           
 15288                           ;incstack = 0
 15289  015428  0E01               	movlw	1
 15290  01542A  0100               	movlb	0	; () banked
 15291  01542C  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 15295  01542E  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15296  015432  0E01               	movlw	1
 15297  015434  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 15298  015436  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15299  015438  D002               	goto	u9634
 15300  01543A                     u9635:
 15301  01543A  90D8               	bcf	status,0,c
 15302  01543C  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15303  01543E                     u9634:
 15304  01543E  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15305  015440  D7FC               	goto	u9635
 15306  015442  0100               	movlb	0	; () banked
 15307  015444  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15308  015446  0AFF               	xorlw	255
 15309  015448  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 15310  01544A  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15311  01544E  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15312  015452  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 15313  015454  16DF               	andwf	indf2,f,c
 15314                           
 15315                           ; BSR set to: 0
 15316                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 15317  015456  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15318  01545A  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 15319  01545E  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15320  015460  D002               	goto	u9644
 15321  015462                     u9645:
 15322  015462  90D8               	bcf	status,0,c
 15323  015464  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15324  015466                     u9644:
 15325  015466  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15326  015468  D7FC               	goto	u9645
 15327  01546A  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15328  01546E  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15329  015472  0100               	movlb	0	; () banked
 15330  015474  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15331  015476  12DF               	iorwf	indf2,f,c
 15332                           
 15333                           ; BSR set to: 0
 15334  015478  0012               	return		;funcret
 15335  01547A                     __end_of_Byte_SetBit:
 15336                           	opt stack 0
 15337                           tosu	equ	0xFFF
 15338                           tosh	equ	0xFFE
 15339                           tosl	equ	0xFFD
 15340                           pclath	equ	0xFFA
 15341                           tblptru	equ	0xFF8
 15342                           tblptrh	equ	0xFF7
 15343                           tblptrl	equ	0xFF6
 15344                           tablat	equ	0xFF5
 15345                           prodh	equ	0xFF4
 15346                           prodl	equ	0xFF3
 15347                           intcon	equ	0xFF2
 15348                           postinc0	equ	0xFEE
 15349                           wreg	equ	0xFE8
 15350                           indf1	equ	0xFE7
 15351                           postdec1	equ	0xFE5
 15352                           fsr1h	equ	0xFE2
 15353                           fsr1l	equ	0xFE1
 15354                           indf2	equ	0xFDF
 15355                           postinc2	equ	0xFDE
 15356                           postdec2	equ	0xFDD
 15357                           plusw2	equ	0xFDB
 15358                           fsr2h	equ	0xFDA
 15359                           fsr2l	equ	0xFD9
 15360                           status	equ	0xFD8
 15361                           
 15362 ;; *************** function _Port_SetQuadType *****************
 15363 ;; Defined at:
 15364 ;;		line 399 in file "Library/Port.c"
 15365 ;; Parameters:    Size  Location     Type
 15366 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15367 ;;		 -> PortB(10), PortD(10), 
 15368 ;;  pQuad           1   56[BANK0 ] enum E6776
 15369 ;;  pType           1   57[BANK0 ] enum E6795
 15370 ;; Auto vars:     Size  Location     Type
 15371 ;;  Output          1   58[BANK0 ] enum E6475
 15372 ;; Return value:  Size  Location     Type
 15373 ;;                  1    wreg      enum E6475
 15374 ;; Registers used:
 15375 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15376 ;; Tracked objects:
 15377 ;;		On entry : 0/0
 15378 ;;		On exit  : 0/0
 15379 ;;		Unchanged: 0/0
 15380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15381 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15384 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15385 ;;Total ram usage:        5 bytes
 15386 ;; Hardware stack levels used:    1
 15387 ;; Hardware stack levels required when called:   13
 15388 ;; This function calls:
 15389 ;;		_Byte_SetQuad
 15390 ;;		_Port_CheckQuadType
 15391 ;;		_Word_SetPair
 15392 ;; This function is called by:
 15393 ;;		_MXK_InitDIPSwitch
 15394 ;;		_MXK_Init
 15395 ;; This function uses a non-reentrant model
 15396 ;;
 15397                           
 15398                           	psect	text79
 15399  011F16                     __ptext79:
 15400                           	opt stack 0
 15401  011F16                     _Port_SetQuadType:
 15402                           	opt stack 16
 15403                           
 15404                           ;Port.c: 401: ePinError Output = ePinErrorState;
 15405                           
 15406                           ; BSR set to: 0
 15407                           ;incstack = 0
 15408  011F16  0E05               	movlw	5
 15409  011F18  0100               	movlb	0	; () banked
 15410  011F1A  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15411                           
 15412                           ;Port.c: 403: switch (pType)
 15413  011F1C  D0B8               	goto	l476
 15414  011F1E                     
 15415                           ; BSR set to: 0
 15416                           ;Port.c: 407: {
 15417                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15418                           
 15419                           ; BSR set to: 0
 15420  011F1E  EE20 F002          	lfsr	2,2
 15421  011F22  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15422  011F24  26D9               	addwf	fsr2l,f,c
 15423  011F26  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15424  011F28  22DA               	addwfc	fsr2h,f,c
 15425  011F2A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15426  011F2E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15427  011F32  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15428  011F36  0E0F               	movlw	15
 15429  011F38  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15430  011F3A  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 15431                           
 15432                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15433  011F3E  0100               	movlb	0	; () banked
 15434  011F40  EE20 F004          	lfsr	2,4
 15435  011F44  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15436  011F46  26D9               	addwf	fsr2l,f,c
 15437  011F48  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15438  011F4A  22DA               	addwfc	fsr2h,f,c
 15439  011F4C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15440  011F50  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15441  011F54  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15442  011F58  0E00               	movlw	0
 15443  011F5A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15444  011F5C  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 15445                           
 15446                           ;Port.c: 413: }
 15447                           ;Port.c: 415: break;
 15448  011F60  D0A4               	goto	l478
 15449  011F62                     
 15450                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15451  011F62  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15452  011F66  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15453  011F6A  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15454  011F6E  0E03               	movlw	3
 15455  011F70  0100               	movlb	0	; () banked
 15456  011F72  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15457  011F74  EC65  F0AA         	call	_Port_CheckQuadType	;wreg free
 15458  011F78  0100               	movlb	0	; () banked
 15459  011F7A  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15460  011F7C  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15461  011F7E  A4D8               	btfss	status,2,c
 15462  011F80  0012               	return	
 15463                           
 15464                           ; BSR set to: 0
 15465                           ;Port.c: 418: {
 15466                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15467  011F82  EE20 F002          	lfsr	2,2
 15468  011F86  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15469  011F88  26D9               	addwf	fsr2l,f,c
 15470  011F8A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15471  011F8C  22DA               	addwfc	fsr2h,f,c
 15472  011F8E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15473  011F92  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15474  011F96  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15475  011F9A  0E00               	movlw	0
 15476  011F9C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15477  011F9E  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 15478                           
 15479                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15480  011FA2  0100               	movlb	0	; () banked
 15481  011FA4  EE20 F004          	lfsr	2,4
 15482  011FA8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15483  011FAA  26D9               	addwf	fsr2l,f,c
 15484  011FAC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15485  011FAE  22DA               	addwfc	fsr2h,f,c
 15486  011FB0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15487  011FB4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15488  011FB8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15489  011FBC  0E00               	movlw	0
 15490  011FBE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15491  011FC0  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 15492                           
 15493                           ;Port.c: 424: }
 15494  011FC4  D072               	goto	l478
 15495  011FC6                     
 15496                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15497  011FC6  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15498  011FCA  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15499  011FCE  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15500  011FD2  0E03               	movlw	3
 15501  011FD4  0100               	movlb	0	; () banked
 15502  011FD6  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15503  011FD8  EC65  F0AA         	call	_Port_CheckQuadType	;wreg free
 15504  011FDC  0100               	movlb	0	; () banked
 15505  011FDE  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15506  011FE0  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15507  011FE2  A4D8               	btfss	status,2,c
 15508  011FE4  0012               	return	
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;Port.c: 429: {
 15512                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15513  011FE6  EE20 F002          	lfsr	2,2
 15514  011FEA  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15515  011FEC  26D9               	addwf	fsr2l,f,c
 15516  011FEE  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15517  011FF0  22DA               	addwfc	fsr2h,f,c
 15518  011FF2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15519  011FF6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15520  011FFA  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15521  011FFE  0E0F               	movlw	15
 15522  012000  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15523  012002  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 15524                           
 15525                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 15526  012006  0100               	movlb	0	; () banked
 15527  012008  EE20 F004          	lfsr	2,4
 15528  01200C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15529  01200E  26D9               	addwf	fsr2l,f,c
 15530  012010  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15531  012012  22DA               	addwfc	fsr2h,f,c
 15532  012014  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15533  012018  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15534  01201C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15535  012020  0E0F               	movlw	15
 15536  012022  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15537  012024  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 15538                           
 15539                           ;Port.c: 435: }
 15540  012028  D040               	goto	l478
 15541  01202A                     
 15542                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15543  01202A  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15544  01202E  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15545  012032  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15546  012036  0E03               	movlw	3
 15547  012038  0100               	movlb	0	; () banked
 15548  01203A  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15549  01203C  EC65  F0AA         	call	_Port_CheckQuadType	;wreg free
 15550  012040  0100               	movlb	0	; () banked
 15551  012042  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15552  012044  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15553  012046  A4D8               	btfss	status,2,c
 15554  012048  0012               	return	
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;Port.c: 440: {
 15558                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15559  01204A  EE20 F002          	lfsr	2,2
 15560  01204E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15561  012050  26D9               	addwf	fsr2l,f,c
 15562  012052  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15563  012054  22DA               	addwfc	fsr2h,f,c
 15564  012056  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15565  01205A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15566  01205E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15567  012062  0E00               	movlw	0
 15568  012064  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15569  012066  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 15570                           
 15571                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15572  01206A  0100               	movlb	0	; () banked
 15573  01206C  EE20 F004          	lfsr	2,4
 15574  012070  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15575  012072  26D9               	addwf	fsr2l,f,c
 15576  012074  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15577  012076  22DA               	addwfc	fsr2h,f,c
 15578  012078  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15579  01207C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15580  012080  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15581  012084  0E00               	movlw	0
 15582  012086  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15583  012088  EC0D  F0AF         	call	_Byte_SetQuad	;wreg free
 15584                           
 15585                           ;Port.c: 446: }
 15586  01208C  D00E               	goto	l478
 15587  01208E                     l476:
 15588  01208E  0100               	movlb	0	; () banked
 15589  012090  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 15590                           
 15591                           ; Switch size 1, requested type "space"
 15592                           ; Number of cases is 4, Range of values is 0 to 3
 15593                           ; switch strategies available:
 15594                           ; Name         Instructions Cycles
 15595                           ; simple_byte           13     7 (average)
 15596                           ;	Chosen strategy is simple_byte
 15597  012092  0A00               	xorlw	0	; case 0
 15598  012094  B4D8               	btfsc	status,2,c
 15599  012096  D743               	goto	l477
 15600  012098  0A01               	xorlw	1	; case 1
 15601  01209A  B4D8               	btfsc	status,2,c
 15602  01209C  D762               	goto	l479
 15603  01209E  0A03               	xorlw	3	; case 2
 15604  0120A0  B4D8               	btfsc	status,2,c
 15605  0120A2  D791               	goto	l483
 15606  0120A4  0A01               	xorlw	1	; case 3
 15607  0120A6  B4D8               	btfsc	status,2,c
 15608  0120A8  D7C0               	goto	l486
 15609  0120AA                     l478:
 15610                           
 15611                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 15612                           
 15613                           ; BSR set to: 0
 15614  0120AA  0E08               	movlw	8
 15615  0120AC  0100               	movlb	0	; () banked
 15616  0120AE  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15617  0120B0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15618  0120B2  0E00               	movlw	0
 15619  0120B4  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15620  0120B6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15621  0120B8  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15622  0120BA  0D04               	mullw	4
 15623  0120BC  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 15624  0120C0  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15625  0120C4  EC16  F0AD         	call	_Word_SetPair	;wreg free
 15626                           
 15627                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 15628  0120C8  0E08               	movlw	8
 15629  0120CA  0100               	movlb	0	; () banked
 15630  0120CC  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15631  0120CE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15632  0120D0  0E00               	movlw	0
 15633  0120D2  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15634  0120D4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15635  0120D6  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15636  0120D8  0D04               	mullw	4
 15637  0120DA  28F3               	incf	prodl,w,c
 15638  0120DC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15639  0120DE  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15640  0120E2  EC16  F0AD         	call	_Word_SetPair	;wreg free
 15641                           
 15642                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 15643  0120E6  0E08               	movlw	8
 15644  0120E8  0100               	movlb	0	; () banked
 15645  0120EA  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15646  0120EC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15647  0120EE  0E00               	movlw	0
 15648  0120F0  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15649  0120F2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15650  0120F4  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15651  0120F6  0D04               	mullw	4
 15652  0120F8  50F3               	movf	prodl,w,c
 15653  0120FA  0F02               	addlw	2
 15654  0120FC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15655  0120FE  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15656  012102  EC16  F0AD         	call	_Word_SetPair	;wreg free
 15657                           
 15658                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 15659  012106  0E08               	movlw	8
 15660  012108  0100               	movlb	0	; () banked
 15661  01210A  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15662  01210C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15663  01210E  0E00               	movlw	0
 15664  012110  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15665  012112  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15666  012114  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15667  012116  0D04               	mullw	4
 15668  012118  50F3               	movf	prodl,w,c
 15669  01211A  0F03               	addlw	3
 15670  01211C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15671  01211E  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15672  012122  EC16  F0AD         	call	_Word_SetPair	;wreg free
 15673  012126  0012               	return	
 15674  012128                     __end_of_Port_SetQuadType:
 15675                           	opt stack 0
 15676                           tosu	equ	0xFFF
 15677                           tosh	equ	0xFFE
 15678                           tosl	equ	0xFFD
 15679                           pclath	equ	0xFFA
 15680                           tblptru	equ	0xFF8
 15681                           tblptrh	equ	0xFF7
 15682                           tblptrl	equ	0xFF6
 15683                           tablat	equ	0xFF5
 15684                           prodh	equ	0xFF4
 15685                           prodl	equ	0xFF3
 15686                           intcon	equ	0xFF2
 15687                           postinc0	equ	0xFEE
 15688                           wreg	equ	0xFE8
 15689                           indf1	equ	0xFE7
 15690                           postdec1	equ	0xFE5
 15691                           fsr1h	equ	0xFE2
 15692                           fsr1l	equ	0xFE1
 15693                           indf2	equ	0xFDF
 15694                           postinc2	equ	0xFDE
 15695                           postdec2	equ	0xFDD
 15696                           plusw2	equ	0xFDB
 15697                           fsr2h	equ	0xFDA
 15698                           fsr2l	equ	0xFD9
 15699                           status	equ	0xFD8
 15700                           
 15701 ;; *************** function _Word_SetPair *****************
 15702 ;; Defined at:
 15703 ;;		line 149 in file "Library/Types.c"
 15704 ;; Parameters:    Size  Location     Type
 15705 ;;  pInput          2   15[BANK0 ] PTR struct Word
 15706 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15707 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15708 ;;  pPair           1   17[BANK0 ] unsigned char 
 15709 ;;  pValue          1   18[BANK0 ] unsigned char 
 15710 ;; Auto vars:     Size  Location     Type
 15711 ;;		None
 15712 ;; Return value:  Size  Location     Type
 15713 ;;                  1    wreg      void 
 15714 ;; Registers used:
 15715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15716 ;; Tracked objects:
 15717 ;;		On entry : 0/0
 15718 ;;		On exit  : 0/0
 15719 ;;		Unchanged: 0/0
 15720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15721 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15724 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15725 ;;Total ram usage:        4 bytes
 15726 ;; Hardware stack levels used:    1
 15727 ;; Hardware stack levels required when called:    9
 15728 ;; This function calls:
 15729 ;;		_Byte_SetPair
 15730 ;; This function is called by:
 15731 ;;		_Port_SetPinType
 15732 ;;		_Port_SetQuadType
 15733 ;;		_Port_SetType
 15734 ;;		_Port_SetPairType
 15735 ;;		_PortProperty_Init
 15736 ;; This function uses a non-reentrant model
 15737 ;;
 15738                           
 15739                           	psect	text80
 15740  015A2C                     __ptext80:
 15741                           	opt stack 0
 15742  015A2C                     _Word_SetPair:
 15743                           	opt stack 19
 15744                           
 15745                           ;Types.c: 151: if (pPair >= 4)
 15746                           
 15747                           ;incstack = 0
 15748  015A2C  0E03               	movlw	3
 15749  015A2E  0100               	movlb	0	; () banked
 15750  015A30  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 15751  015A32  D00E               	goto	l776
 15752                           
 15753                           ; BSR set to: 0
 15754                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 15755  015A34  0E01               	movlw	1
 15756  015A36  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 15757  015A38  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 15758  015A3A  0E00               	movlw	0
 15759  015A3C  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 15760  015A3E  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 15761  015A40  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 15762  015A42  0FFC               	addlw	252
 15763  015A44  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 15764  015A46  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 15765  015A4A  ECFD  F0AE         	call	_Byte_SetPair	;wreg free
 15766  015A4E  0012               	return	
 15767  015A50                     l776:
 15768                           
 15769                           ;Types.c: 153: else
 15770                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 15771  015A50  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 15772  015A54  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 15773  015A58  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 15774  015A5C  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 15775  015A60  ECFD  F0AE         	call	_Byte_SetPair	;wreg free
 15776  015A64  0012               	return	
 15777  015A66                     __end_of_Word_SetPair:
 15778                           	opt stack 0
 15779                           tosu	equ	0xFFF
 15780                           tosh	equ	0xFFE
 15781                           tosl	equ	0xFFD
 15782                           pclath	equ	0xFFA
 15783                           tblptru	equ	0xFF8
 15784                           tblptrh	equ	0xFF7
 15785                           tblptrl	equ	0xFF6
 15786                           tablat	equ	0xFF5
 15787                           prodh	equ	0xFF4
 15788                           prodl	equ	0xFF3
 15789                           intcon	equ	0xFF2
 15790                           postinc0	equ	0xFEE
 15791                           wreg	equ	0xFE8
 15792                           indf1	equ	0xFE7
 15793                           postdec1	equ	0xFE5
 15794                           fsr1h	equ	0xFE2
 15795                           fsr1l	equ	0xFE1
 15796                           indf2	equ	0xFDF
 15797                           postinc2	equ	0xFDE
 15798                           postdec2	equ	0xFDD
 15799                           plusw2	equ	0xFDB
 15800                           fsr2h	equ	0xFDA
 15801                           fsr2l	equ	0xFD9
 15802                           status	equ	0xFD8
 15803                           
 15804 ;; *************** function _Byte_SetPair *****************
 15805 ;; Defined at:
 15806 ;;		line 83 in file "Library/Types.c"
 15807 ;; Parameters:    Size  Location     Type
 15808 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 15809 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 15810 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 15811 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 15812 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 15813 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 15814 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 15815 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 15816 ;;		 -> NULL(0), 
 15817 ;;  pPair           1   13[BANK0 ] unsigned char 
 15818 ;;  pValue          1   14[BANK0 ] unsigned char 
 15819 ;; Auto vars:     Size  Location     Type
 15820 ;;		None
 15821 ;; Return value:  Size  Location     Type
 15822 ;;                  1    wreg      void 
 15823 ;; Registers used:
 15824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15825 ;; Tracked objects:
 15826 ;;		On entry : 0/0
 15827 ;;		On exit  : 0/0
 15828 ;;		Unchanged: 0/0
 15829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15830 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15833 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15834 ;;Total ram usage:        4 bytes
 15835 ;; Hardware stack levels used:    1
 15836 ;; Hardware stack levels required when called:    8
 15837 ;; This function calls:
 15838 ;;		_Byte_SetZone
 15839 ;; This function is called by:
 15840 ;;		_Word_SetPair
 15841 ;;		_Port_SetPairType
 15842 ;;		_Port_SetPair
 15843 ;; This function uses a non-reentrant model
 15844 ;;
 15845                           
 15846                           	psect	text81
 15847  015DFA                     __ptext81:
 15848                           	opt stack 0
 15849  015DFA                     _Byte_SetPair:
 15850                           	opt stack 19
 15851                           
 15852                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 15853                           
 15854                           ;incstack = 0
 15855  015DFA  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 15856  015DFE  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 15857  015E02  0E04               	movlw	4
 15858  015E04  0100               	movlb	0	; () banked
 15859  015E06  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 15860  015E08  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 15861  015E0C  0E02               	movlw	2
 15862  015E0E  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 15863  015E10  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 15864  015E14  EC2A  F0A3         	call	_Byte_SetZone	;wreg free
 15865  015E18  0012               	return		;funcret
 15866  015E1A                     __end_of_Byte_SetPair:
 15867                           	opt stack 0
 15868                           tosu	equ	0xFFF
 15869                           tosh	equ	0xFFE
 15870                           tosl	equ	0xFFD
 15871                           pclath	equ	0xFFA
 15872                           tblptru	equ	0xFF8
 15873                           tblptrh	equ	0xFF7
 15874                           tblptrl	equ	0xFF6
 15875                           tablat	equ	0xFF5
 15876                           prodh	equ	0xFF4
 15877                           prodl	equ	0xFF3
 15878                           intcon	equ	0xFF2
 15879                           postinc0	equ	0xFEE
 15880                           wreg	equ	0xFE8
 15881                           indf1	equ	0xFE7
 15882                           postdec1	equ	0xFE5
 15883                           fsr1h	equ	0xFE2
 15884                           fsr1l	equ	0xFE1
 15885                           indf2	equ	0xFDF
 15886                           postinc2	equ	0xFDE
 15887                           postdec2	equ	0xFDD
 15888                           plusw2	equ	0xFDB
 15889                           fsr2h	equ	0xFDA
 15890                           fsr2l	equ	0xFD9
 15891                           status	equ	0xFD8
 15892                           
 15893 ;; *************** function _Port_CheckQuadType *****************
 15894 ;; Defined at:
 15895 ;;		line 126 in file "Library/Port.c"
 15896 ;; Parameters:    Size  Location     Type
 15897 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 15898 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15899 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15900 ;;  pQuad           1   49[BANK0 ] enum E6776
 15901 ;;  pDrive          1   50[BANK0 ] enum E6469
 15902 ;; Auto vars:     Size  Location     Type
 15903 ;;  Output          1   53[BANK0 ] enum E6475
 15904 ;;  Pair2           1   52[BANK0 ] enum E6760
 15905 ;;  Pair1           1   51[BANK0 ] enum E6760
 15906 ;; Return value:  Size  Location     Type
 15907 ;;                  1    wreg      enum E6475
 15908 ;; Registers used:
 15909 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15910 ;; Tracked objects:
 15911 ;;		On entry : 0/0
 15912 ;;		On exit  : 0/0
 15913 ;;		Unchanged: 0/0
 15914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15915 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15916 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15918 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15919 ;;Total ram usage:        7 bytes
 15920 ;; Hardware stack levels used:    1
 15921 ;; Hardware stack levels required when called:   12
 15922 ;; This function calls:
 15923 ;;		_Port_CheckPairType
 15924 ;; This function is called by:
 15925 ;;		_Port_CheckPortType
 15926 ;;		_Port_SetQuadType
 15927 ;; This function uses a non-reentrant model
 15928 ;;
 15929                           
 15930                           	psect	text82
 15931  0154CA                     __ptext82:
 15932                           	opt stack 0
 15933  0154CA                     _Port_CheckQuadType:
 15934                           	opt stack 15
 15935                           
 15936                           ;Port.c: 128: ePinError Output = ePinErrorState;
 15937                           
 15938                           ;incstack = 0
 15939  0154CA  0E05               	movlw	5
 15940  0154CC  0100               	movlb	0	; () banked
 15941  0154CE  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 15942                           
 15943                           ; BSR set to: 0
 15944                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 15945  0154D0  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 15946  0154D2  0D02               	mullw	2
 15947  0154D4  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 15948                           
 15949                           ; BSR set to: 0
 15950                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 15951  0154D8  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 15952  0154DA  0D02               	mullw	2
 15953  0154DC  28F3               	incf	prodl,w,c
 15954  0154DE  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 15955                           
 15956                           ; BSR set to: 0
 15957                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 15958  0154E0  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 15959  0154E4  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 15960  0154E8  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 15961  0154EC  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 15962  0154F0  ECB5  F0A8         	call	_Port_CheckPairType	;wreg free
 15963  0154F4  0100               	movlb	0	; () banked
 15964  0154F6  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 15965  0154F8  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 15966  0154FA  A4D8               	btfss	status,2,c
 15967  0154FC  D00C               	goto	l393
 15968                           
 15969                           ; BSR set to: 0
 15970                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 15971  0154FE  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 15972  015502  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 15973  015506  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 15974  01550A  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 15975  01550E  ECB5  F0A8         	call	_Port_CheckPairType	;wreg free
 15976  015512  0100               	movlb	0	; () banked
 15977  015514  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 15978  015516                     l393:
 15979                           
 15980                           ; BSR set to: 0
 15981                           ;Port.c: 136: return Output;
 15982                           
 15983                           ; BSR set to: 0
 15984  015516  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 15985  015518  0012               	return	
 15986  01551A                     __end_of_Port_CheckQuadType:
 15987                           	opt stack 0
 15988                           tosu	equ	0xFFF
 15989                           tosh	equ	0xFFE
 15990                           tosl	equ	0xFFD
 15991                           pclath	equ	0xFFA
 15992                           tblptru	equ	0xFF8
 15993                           tblptrh	equ	0xFF7
 15994                           tblptrl	equ	0xFF6
 15995                           tablat	equ	0xFF5
 15996                           prodh	equ	0xFF4
 15997                           prodl	equ	0xFF3
 15998                           intcon	equ	0xFF2
 15999                           postinc0	equ	0xFEE
 16000                           wreg	equ	0xFE8
 16001                           indf1	equ	0xFE7
 16002                           postdec1	equ	0xFE5
 16003                           fsr1h	equ	0xFE2
 16004                           fsr1l	equ	0xFE1
 16005                           indf2	equ	0xFDF
 16006                           postinc2	equ	0xFDE
 16007                           postdec2	equ	0xFDD
 16008                           plusw2	equ	0xFDB
 16009                           fsr2h	equ	0xFDA
 16010                           fsr2l	equ	0xFD9
 16011                           status	equ	0xFD8
 16012                           
 16013 ;; *************** function _Port_CheckPairType *****************
 16014 ;; Defined at:
 16015 ;;		line 112 in file "Library/Port.c"
 16016 ;; Parameters:    Size  Location     Type
 16017 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16018 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16019 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16020 ;;  pPair           1   40[BANK0 ] enum E6760
 16021 ;;  pDrive          1   41[BANK0 ] enum E6469
 16022 ;; Auto vars:     Size  Location     Type
 16023 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 16024 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16025 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16026 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16027 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16028 ;;  Output          1   44[BANK0 ] enum E6475
 16029 ;;  Pin2            1   43[BANK0 ] enum E6750
 16030 ;;  Pin1            1   42[BANK0 ] enum E6750
 16031 ;; Return value:  Size  Location     Type
 16032 ;;                  1    wreg      enum E6475
 16033 ;; Registers used:
 16034 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16035 ;; Tracked objects:
 16036 ;;		On entry : 0/0
 16037 ;;		On exit  : 0/0
 16038 ;;		Unchanged: 0/0
 16039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16040 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16041 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16043 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16044 ;;Total ram usage:        9 bytes
 16045 ;; Hardware stack levels used:    1
 16046 ;; Hardware stack levels required when called:   11
 16047 ;; This function calls:
 16048 ;;		_PortProperty_Valid
 16049 ;; This function is called by:
 16050 ;;		_Port_CheckQuadType
 16051 ;;		_Port_SetPairType
 16052 ;; This function uses a non-reentrant model
 16053 ;;
 16054                           
 16055                           	psect	text83
 16056  01516A                     __ptext83:
 16057                           	opt stack 0
 16058  01516A                     _Port_CheckPairType:
 16059                           	opt stack 15
 16060                           
 16061                           ;Port.c: 114: ePinError Output = ePinErrorState;
 16062                           
 16063                           ; BSR set to: 0
 16064                           ;incstack = 0
 16065  01516A  0E05               	movlw	5
 16066  01516C  0100               	movlb	0	; () banked
 16067  01516E  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16068                           
 16069                           ; BSR set to: 0
 16070                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 16071  015170  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 16072  015174  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 16073  015178  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 16074  01517C  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 16075                           
 16076                           ; BSR set to: 0
 16077                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 16078  015180  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16079  015182  0D02               	mullw	2
 16080  015184  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 16081                           
 16082                           ; BSR set to: 0
 16083                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 16084  015188  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16085  01518A  0D02               	mullw	2
 16086  01518C  28F3               	incf	prodl,w,c
 16087  01518E  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 16088                           
 16089                           ; BSR set to: 0
 16090                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 16091  015190  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16092  015194  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16093  015198  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16094  01519C  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 16095  0151A0  EC1E  F0A8         	call	_PortProperty_Valid	;wreg free
 16096  0151A4  0100               	movlb	0	; () banked
 16097  0151A6  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16098  0151A8  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16099  0151AA  A4D8               	btfss	status,2,c
 16100  0151AC  D00C               	goto	l389
 16101                           
 16102                           ; BSR set to: 0
 16103                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 16104  0151AE  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16105  0151B2  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16106  0151B6  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16107  0151BA  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 16108  0151BE  EC1E  F0A8         	call	_PortProperty_Valid	;wreg free
 16109  0151C2  0100               	movlb	0	; () banked
 16110  0151C4  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16111  0151C6                     l389:
 16112                           
 16113                           ; BSR set to: 0
 16114                           ;Port.c: 124: return Output;
 16115                           
 16116                           ; BSR set to: 0
 16117  0151C6  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16118  0151C8  0012               	return	
 16119  0151CA                     __end_of_Port_CheckPairType:
 16120                           	opt stack 0
 16121                           tosu	equ	0xFFF
 16122                           tosh	equ	0xFFE
 16123                           tosl	equ	0xFFD
 16124                           pclath	equ	0xFFA
 16125                           tblptru	equ	0xFF8
 16126                           tblptrh	equ	0xFF7
 16127                           tblptrl	equ	0xFF6
 16128                           tablat	equ	0xFF5
 16129                           prodh	equ	0xFF4
 16130                           prodl	equ	0xFF3
 16131                           intcon	equ	0xFF2
 16132                           postinc0	equ	0xFEE
 16133                           wreg	equ	0xFE8
 16134                           indf1	equ	0xFE7
 16135                           postdec1	equ	0xFE5
 16136                           fsr1h	equ	0xFE2
 16137                           fsr1l	equ	0xFE1
 16138                           indf2	equ	0xFDF
 16139                           postinc2	equ	0xFDE
 16140                           postdec2	equ	0xFDD
 16141                           plusw2	equ	0xFDB
 16142                           fsr2h	equ	0xFDA
 16143                           fsr2l	equ	0xFD9
 16144                           status	equ	0xFD8
 16145                           
 16146 ;; *************** function _PortProperty_Valid *****************
 16147 ;; Defined at:
 16148 ;;		line 220 in file "Library/Types.c"
 16149 ;; Parameters:    Size  Location     Type
 16150 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 16151 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16152 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16153 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16154 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16155 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 16156 ;;  pPin            1   18[BANK0 ] unsigned char 
 16157 ;; Auto vars:     Size  Location     Type
 16158 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 16159 ;;  Pair            1   37[BANK0 ] enum E6469
 16160 ;; Return value:  Size  Location     Type
 16161 ;;                  1    wreg      enum E6475
 16162 ;; Registers used:
 16163 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16164 ;; Tracked objects:
 16165 ;;		On entry : 0/0
 16166 ;;		On exit  : 0/0
 16167 ;;		Unchanged: 0/0
 16168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16169 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16170 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16172 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16173 ;;Total ram usage:       23 bytes
 16174 ;; Hardware stack levels used:    1
 16175 ;; Hardware stack levels required when called:   10
 16176 ;; This function calls:
 16177 ;;		_Word_GetPair
 16178 ;; This function is called by:
 16179 ;;		_Port_CheckPairType
 16180 ;;		_Port_SetPinType
 16181 ;; This function uses a non-reentrant model
 16182 ;;
 16183                           
 16184                           	psect	text84
 16185  01503C                     __ptext84:
 16186                           	opt stack 0
 16187  01503C                     _PortProperty_Valid:
 16188                           	opt stack 15
 16189                           
 16190                           ;Types.c: 222: ePinDrive Pair;
 16191                           ;Types.c: 223: const ePinError Errors[4][4] =
 16192                           ;Types.c: 224: {
 16193                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 16194                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 16195                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 16196                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 16197                           ;Types.c: 230: };
 16198                           
 16199                           ; BSR set to: 0
 16200                           ;incstack = 0
 16201  01503C  0E3B               	movlw	low PortProperty_Valid@F6830
 16202  01503E  6EF6               	movwf	tblptrl,c
 16203  015040                     	if	1	;There is more than 1 active tblptr byte
 16204  015040  0EFC               	movlw	high PortProperty_Valid@F6830
 16205  015042  6EF7               	movwf	tblptrh,c
 16206  015044                     	endif
 16207  015044                     	if	1	;There are 3 active tblptr bytes
 16208  015044  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 16209  015046  6EF8               	movwf	tblptru,c
 16210  015048                     	endif
 16211  015048  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 16212  01504C  0E0F               	movlw	15
 16213  01504E                     u9600:
 16214  01504E  0009               	tblrd		*+
 16215  015050  CFF5 FFDE          	movff	tablat,postinc2
 16216  015054  06E8               	decf	wreg,f,c
 16217  015056  E2FB               	bc	u9600
 16218                           
 16219                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 16220  015058  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 16221  01505C  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 16222  015060  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 16223  015064  ECB8  F0AD         	call	_Word_GetPair	;wreg free
 16224  015068  0100               	movlb	0	; () banked
 16225  01506A  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 16226                           
 16227                           ; BSR set to: 0
 16228                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 16229  01506C  0E04               	movlw	4
 16230  01506E  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 16231  015070  D017               	goto	l819
 16232                           
 16233                           ; BSR set to: 0
 16234  015072  0E04               	movlw	4
 16235  015074  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 16236  015076  D014               	goto	l819
 16237                           
 16238                           ; BSR set to: 0
 16239                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 16240  015078  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 16241  01507A  0D04               	mullw	4
 16242  01507C  0E75               	movlw	low PortProperty_Valid@Errors
 16243  01507E  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 16244  015080  0E00               	movlw	high PortProperty_Valid@Errors
 16245  015082  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 16246  015084  50F3               	movf	prodl,w,c
 16247  015086  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 16248  015088  50F4               	movf	prodh,w,c
 16249  01508A  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 16250  01508C  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 16251  01508E  0D01               	mullw	1
 16252  015090  50F3               	movf	prodl,w,c
 16253  015092  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 16254  015094  6ED9               	movwf	fsr2l,c
 16255  015096  50F4               	movf	prodh,w,c
 16256  015098  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 16257  01509A  6EDA               	movwf	fsr2h,c
 16258  01509C  50DF               	movf	indf2,w,c
 16259                           
 16260                           ; BSR set to: 0
 16261  01509E  0012               	return	
 16262  0150A0                     l819:
 16263                           
 16264                           ; BSR set to: 0
 16265                           ;Types.c: 237: return ePinErrorState;
 16266                           
 16267                           ; BSR set to: 0
 16268  0150A0  0E05               	movlw	5
 16269  0150A2  0012               	return	
 16270  0150A4                     __end_of_PortProperty_Valid:
 16271                           	opt stack 0
 16272                           tosu	equ	0xFFF
 16273                           tosh	equ	0xFFE
 16274                           tosl	equ	0xFFD
 16275                           pclath	equ	0xFFA
 16276                           tblptru	equ	0xFF8
 16277                           tblptrh	equ	0xFF7
 16278                           tblptrl	equ	0xFF6
 16279                           tablat	equ	0xFF5
 16280                           prodh	equ	0xFF4
 16281                           prodl	equ	0xFF3
 16282                           intcon	equ	0xFF2
 16283                           postinc0	equ	0xFEE
 16284                           wreg	equ	0xFE8
 16285                           indf1	equ	0xFE7
 16286                           postdec1	equ	0xFE5
 16287                           fsr1h	equ	0xFE2
 16288                           fsr1l	equ	0xFE1
 16289                           indf2	equ	0xFDF
 16290                           postinc2	equ	0xFDE
 16291                           postdec2	equ	0xFDD
 16292                           plusw2	equ	0xFDB
 16293                           fsr2h	equ	0xFDA
 16294                           fsr2l	equ	0xFD9
 16295                           status	equ	0xFD8
 16296                           
 16297 ;; *************** function _Word_GetPair *****************
 16298 ;; Defined at:
 16299 ;;		line 156 in file "Library/Types.c"
 16300 ;; Parameters:    Size  Location     Type
 16301 ;;  pInput          2   12[BANK0 ] PTR struct Word
 16302 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16303 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16304 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16305 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16306 ;;  pPair           1   14[BANK0 ] unsigned char 
 16307 ;; Auto vars:     Size  Location     Type
 16308 ;;		None
 16309 ;; Return value:  Size  Location     Type
 16310 ;;                  1    wreg      unsigned char 
 16311 ;; Registers used:
 16312 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16313 ;; Tracked objects:
 16314 ;;		On entry : 0/0
 16315 ;;		On exit  : 0/0
 16316 ;;		Unchanged: 0/0
 16317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16318 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16321 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16322 ;;Total ram usage:        3 bytes
 16323 ;; Hardware stack levels used:    1
 16324 ;; Hardware stack levels required when called:    9
 16325 ;; This function calls:
 16326 ;;		_Byte_GetPair
 16327 ;; This function is called by:
 16328 ;;		_Port_Init
 16329 ;;		_Port_SetPin
 16330 ;;		_Port_Set
 16331 ;;		_PortProperty_Valid
 16332 ;;		_Port_SetPair
 16333 ;;		_Port_SetQuad
 16334 ;; This function uses a non-reentrant model
 16335 ;;
 16336                           
 16337                           	psect	text85
 16338  015B70                     __ptext85:
 16339                           	opt stack 0
 16340  015B70                     _Word_GetPair:
 16341                           	opt stack 15
 16342                           
 16343                           ;Types.c: 158: if (pPair >= 4)
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;incstack = 0
 16347  015B70  0E03               	movlw	3
 16348  015B72  0100               	movlb	0	; () banked
 16349  015B74  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 16350  015B76  D00C               	goto	l781
 16351                           
 16352                           ; BSR set to: 0
 16353                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 16354  015B78  0E01               	movlw	1
 16355  015B7A  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 16356  015B7C  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 16357  015B7E  0E00               	movlw	0
 16358  015B80  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 16359  015B82  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 16360  015B84  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 16361  015B86  0FFC               	addlw	252
 16362  015B88  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 16363  015B8A  EC3C  F0AF         	call	_Byte_GetPair	;wreg free
 16364  015B8E  0012               	return	
 16365  015B90                     l781:
 16366                           
 16367                           ;Types.c: 160: else
 16368                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 16369  015B90  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 16370  015B94  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 16371  015B98  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 16372  015B9C  EC3C  F0AF         	call	_Byte_GetPair	;wreg free
 16373  015BA0  0012               	return	
 16374  015BA2                     __end_of_Word_GetPair:
 16375                           	opt stack 0
 16376                           tosu	equ	0xFFF
 16377                           tosh	equ	0xFFE
 16378                           tosl	equ	0xFFD
 16379                           pclath	equ	0xFFA
 16380                           tblptru	equ	0xFF8
 16381                           tblptrh	equ	0xFF7
 16382                           tblptrl	equ	0xFF6
 16383                           tablat	equ	0xFF5
 16384                           prodh	equ	0xFF4
 16385                           prodl	equ	0xFF3
 16386                           intcon	equ	0xFF2
 16387                           postinc0	equ	0xFEE
 16388                           wreg	equ	0xFE8
 16389                           indf1	equ	0xFE7
 16390                           postdec1	equ	0xFE5
 16391                           fsr1h	equ	0xFE2
 16392                           fsr1l	equ	0xFE1
 16393                           indf2	equ	0xFDF
 16394                           postinc2	equ	0xFDE
 16395                           postdec2	equ	0xFDD
 16396                           plusw2	equ	0xFDB
 16397                           fsr2h	equ	0xFDA
 16398                           fsr2l	equ	0xFD9
 16399                           status	equ	0xFD8
 16400                           
 16401 ;; *************** function _Byte_GetPair *****************
 16402 ;; Defined at:
 16403 ;;		line 87 in file "Library/Types.c"
 16404 ;; Parameters:    Size  Location     Type
 16405 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 16406 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16407 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16408 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16409 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16410 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16411 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16412 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16413 ;;		 -> NULL(0), 
 16414 ;;  pPair           1   11[BANK0 ] unsigned char 
 16415 ;; Auto vars:     Size  Location     Type
 16416 ;;		None
 16417 ;; Return value:  Size  Location     Type
 16418 ;;                  1    wreg      unsigned char 
 16419 ;; Registers used:
 16420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16421 ;; Tracked objects:
 16422 ;;		On entry : 0/0
 16423 ;;		On exit  : 0/0
 16424 ;;		Unchanged: 0/0
 16425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16426 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16429 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16430 ;;Total ram usage:        3 bytes
 16431 ;; Hardware stack levels used:    1
 16432 ;; Hardware stack levels required when called:    8
 16433 ;; This function calls:
 16434 ;;		_Byte_GetZone
 16435 ;; This function is called by:
 16436 ;;		_Word_GetPair
 16437 ;; This function uses a non-reentrant model
 16438 ;;
 16439                           
 16440                           	psect	text86
 16441  015E78                     __ptext86:
 16442                           	opt stack 0
 16443  015E78                     _Byte_GetPair:
 16444                           	opt stack 15
 16445                           
 16446                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 16447                           
 16448                           ;incstack = 0
 16449  015E78  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 16450  015E7C  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 16451  015E80  0E04               	movlw	4
 16452  015E82  0100               	movlb	0	; () banked
 16453  015E84  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 16454  015E86  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 16455  015E8A  0E02               	movlw	2
 16456  015E8C  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 16457  015E8E  ECB9  F0A5         	call	_Byte_GetZone	;wreg free
 16458  015E92  0012               	return	
 16459  015E94                     __end_of_Byte_GetPair:
 16460                           	opt stack 0
 16461                           tosu	equ	0xFFF
 16462                           tosh	equ	0xFFE
 16463                           tosl	equ	0xFFD
 16464                           pclath	equ	0xFFA
 16465                           tblptru	equ	0xFF8
 16466                           tblptrh	equ	0xFF7
 16467                           tblptrl	equ	0xFF6
 16468                           tablat	equ	0xFF5
 16469                           prodh	equ	0xFF4
 16470                           prodl	equ	0xFF3
 16471                           intcon	equ	0xFF2
 16472                           postinc0	equ	0xFEE
 16473                           wreg	equ	0xFE8
 16474                           indf1	equ	0xFE7
 16475                           postdec1	equ	0xFE5
 16476                           fsr1h	equ	0xFE2
 16477                           fsr1l	equ	0xFE1
 16478                           indf2	equ	0xFDF
 16479                           postinc2	equ	0xFDE
 16480                           postdec2	equ	0xFDD
 16481                           plusw2	equ	0xFDB
 16482                           fsr2h	equ	0xFDA
 16483                           fsr2l	equ	0xFD9
 16484                           status	equ	0xFD8
 16485                           
 16486 ;; *************** function _Byte_GetZone *****************
 16487 ;; Defined at:
 16488 ;;		line 64 in file "Library/Types.c"
 16489 ;; Parameters:    Size  Location     Type
 16490 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16491 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16492 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16493 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16494 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16495 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16496 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16497 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16498 ;;		 -> NULL(0), 
 16499 ;;  pMax            1    2[BANK0 ] unsigned char 
 16500 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16501 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16502 ;; Auto vars:     Size  Location     Type
 16503 ;;  Output          1    8[BANK0 ] unsigned char 
 16504 ;;  Offset          1    7[BANK0 ] unsigned char 
 16505 ;;  MASK            1    6[BANK0 ] unsigned char 
 16506 ;; Return value:  Size  Location     Type
 16507 ;;                  1    wreg      unsigned char 
 16508 ;; Registers used:
 16509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16510 ;; Tracked objects:
 16511 ;;		On entry : 0/0
 16512 ;;		On exit  : 0/0
 16513 ;;		Unchanged: 0/0
 16514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16515 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16516 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16517 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16518 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16519 ;;Total ram usage:        9 bytes
 16520 ;; Hardware stack levels used:    1
 16521 ;; Hardware stack levels required when called:    7
 16522 ;; This function calls:
 16523 ;;		Nothing
 16524 ;; This function is called by:
 16525 ;;		_Byte_GetPair
 16526 ;;		_Byte_GetTriple
 16527 ;;		_Byte_GetQuad
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530                           
 16531                           	psect	text87
 16532  014B72                     __ptext87:
 16533                           	opt stack 0
 16534  014B72                     _Byte_GetZone:
 16535                           	opt stack 15
 16536                           
 16537                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 16538                           
 16539                           ;incstack = 0
 16540  014B72  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 16541  014B76  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 16542  014B7A  0E00               	movlw	low (__mediumconst shr (0+16))
 16543  014B7C  6EF8               	movwf	tblptru,c
 16544  014B7E  0E0F               	movlw	(high __ramtop+-1)
 16545  014B80  64F7               	cpfsgt	tblptrh,c
 16546  014B82  D003               	bra	u9567
 16547  014B84  0008               	tblrd		*
 16548  014B86  50F5               	movf	tablat,w,c
 16549  014B88  D005               	bra	u9560
 16550  014B8A                     u9567:
 16551  014B8A  CFF6 FFE9          	movff	tblptrl,fsr0l
 16552  014B8E  CFF7 FFEA          	movff	tblptrh,fsr0h
 16553  014B92  50EF               	movf	indf0,w,c
 16554  014B94                     u9560:
 16555  014B94  0100               	movlb	0	; () banked
 16556  014B96  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 16557                           
 16558                           ; BSR set to: 0
 16559                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 16560  014B98  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16561  014B9A  0D01               	mullw	1
 16562  014B9C  0E55               	movlw	low _MASKS
 16563  014B9E  24F3               	addwf	prodl,w,c
 16564  014BA0  6EF6               	movwf	tblptrl,c
 16565  014BA2  0EFC               	movlw	high _MASKS
 16566  014BA4  20F4               	addwfc	prodh,w,c
 16567  014BA6  6EF7               	movwf	tblptrh,c
 16568  014BA8                     	if	1	;There are 3 active tblptr bytes
 16569  014BA8  6AF8               	clrf	tblptru,c
 16570  014BAA  0E00               	movlw	low (__mediumconst shr (0+16))
 16571  014BAC  22F8               	addwfc	tblptru,f,c
 16572  014BAE                     	endif
 16573  014BAE  0008               	tblrd		*
 16574  014BB0  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 16575                           
 16576                           ; BSR set to: 0
 16577                           ;Types.c: 68: UINT8 Offset = 0;
 16578  014BB4  0E00               	movlw	0
 16579  014BB6  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 16580                           
 16581                           ;Types.c: 70: while (pChunk >= pMax)
 16582  014BB8  D003               	goto	l732
 16583  014BBA                     
 16584                           ; BSR set to: 0
 16585                           ;Types.c: 71: {
 16586                           ;Types.c: 72: pChunk -= pMax;
 16587                           
 16588                           ; BSR set to: 0
 16589  014BBA  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 16590  014BBC  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 16591                           
 16592                           ; BSR set to: 0
 16593                           ;Types.c: 73: Offset += 1;
 16594  014BBE  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 16595  014BC0                     l732:
 16596                           
 16597                           ; BSR set to: 0
 16598                           
 16599                           ; BSR set to: 0
 16600  014BC0  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 16601  014BC2  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 16602  014BC4  B0D8               	btfsc	status,0,c
 16603  014BC6  D7F9               	goto	l733
 16604                           
 16605                           ; BSR set to: 0
 16606                           ;Types.c: 74: }
 16607                           ;Types.c: 75: pChunk *= pChunkSize;
 16608                           
 16609                           ; BSR set to: 0
 16610  014BC8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16611  014BCA  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 16612  014BCC  50F3               	movf	prodl,w,c
 16613  014BCE  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 16614                           
 16615                           ; BSR set to: 0
 16616                           ;Types.c: 76: pChunk += Offset;
 16617  014BD0  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 16618  014BD2  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 16619                           
 16620                           ; BSR set to: 0
 16621                           ;Types.c: 78: Output >>= pChunk;
 16622  014BD4  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 16623  014BD6  6F65               	movwf	??_Byte_GetZone& (0+255),b
 16624  014BD8  D002               	goto	u9580
 16625  014BDA                     u9585:
 16626  014BDA  90D8               	bcf	status,0,c
 16627  014BDC  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 16628  014BDE                     u9580:
 16629  014BDE  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 16630  014BE0  D7FC               	goto	u9585
 16631                           
 16632                           ;Types.c: 79: Output &= MASK;
 16633  014BE2  0100               	movlb	0	; () banked
 16634  014BE4  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 16635  014BE6  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 16636                           
 16637                           ; BSR set to: 0
 16638                           ;Types.c: 80: return Output;
 16639  014BE8  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 16640  014BEA  0012               	return	
 16641  014BEC                     __end_of_Byte_GetZone:
 16642                           	opt stack 0
 16643                           tosu	equ	0xFFF
 16644                           tosh	equ	0xFFE
 16645                           tosl	equ	0xFFD
 16646                           pclath	equ	0xFFA
 16647                           tblptru	equ	0xFF8
 16648                           tblptrh	equ	0xFF7
 16649                           tblptrl	equ	0xFF6
 16650                           tablat	equ	0xFF5
 16651                           prodh	equ	0xFF4
 16652                           prodl	equ	0xFF3
 16653                           intcon	equ	0xFF2
 16654                           indf0	equ	0xFEF
 16655                           postinc0	equ	0xFEE
 16656                           fsr0h	equ	0xFEA
 16657                           fsr0l	equ	0xFE9
 16658                           wreg	equ	0xFE8
 16659                           indf1	equ	0xFE7
 16660                           postdec1	equ	0xFE5
 16661                           fsr1h	equ	0xFE2
 16662                           fsr1l	equ	0xFE1
 16663                           indf2	equ	0xFDF
 16664                           postinc2	equ	0xFDE
 16665                           postdec2	equ	0xFDD
 16666                           plusw2	equ	0xFDB
 16667                           fsr2h	equ	0xFDA
 16668                           fsr2l	equ	0xFD9
 16669                           status	equ	0xFD8
 16670                           
 16671 ;; *************** function _Byte_SetQuad *****************
 16672 ;; Defined at:
 16673 ;;		line 101 in file "Library/Types.c"
 16674 ;; Parameters:    Size  Location     Type
 16675 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 16676 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 16677 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16678 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16679 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16680 ;;		 -> NULL(0), 
 16681 ;;  pQuad           1   13[BANK0 ] unsigned char 
 16682 ;;  pValue          1   14[BANK0 ] unsigned char 
 16683 ;; Auto vars:     Size  Location     Type
 16684 ;;		None
 16685 ;; Return value:  Size  Location     Type
 16686 ;;                  1    wreg      void 
 16687 ;; Registers used:
 16688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16689 ;; Tracked objects:
 16690 ;;		On entry : 0/0
 16691 ;;		On exit  : 0/0
 16692 ;;		Unchanged: 0/0
 16693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16694 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16697 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16698 ;;Total ram usage:        4 bytes
 16699 ;; Hardware stack levels used:    1
 16700 ;; Hardware stack levels required when called:    8
 16701 ;; This function calls:
 16702 ;;		_Byte_SetZone
 16703 ;; This function is called by:
 16704 ;;		_Port_SetQuadType
 16705 ;;		_SPI_Init
 16706 ;;		_SPI_MinSpeed
 16707 ;;		_SPI_MaxSpeed
 16708 ;;		_Port_SetQuad
 16709 ;;		_Word_SetQuad
 16710 ;;		_I2C_Init
 16711 ;; This function uses a non-reentrant model
 16712 ;;
 16713                           
 16714                           	psect	text88
 16715  015E1A                     __ptext88:
 16716                           	opt stack 0
 16717  015E1A                     _Byte_SetQuad:
 16718                           	opt stack 20
 16719                           
 16720                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 16721                           
 16722                           ; BSR set to: 0
 16723                           ;incstack = 0
 16724  015E1A  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 16725  015E1E  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 16726  015E22  0E02               	movlw	2
 16727  015E24  0100               	movlb	0	; () banked
 16728  015E26  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 16729  015E28  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 16730  015E2C  0E04               	movlw	4
 16731  015E2E  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 16732  015E30  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 16733  015E34  EC2A  F0A3         	call	_Byte_SetZone	;wreg free
 16734  015E38  0012               	return		;funcret
 16735  015E3A                     __end_of_Byte_SetQuad:
 16736                           	opt stack 0
 16737                           tosu	equ	0xFFF
 16738                           tosh	equ	0xFFE
 16739                           tosl	equ	0xFFD
 16740                           pclath	equ	0xFFA
 16741                           tblptru	equ	0xFF8
 16742                           tblptrh	equ	0xFF7
 16743                           tblptrl	equ	0xFF6
 16744                           tablat	equ	0xFF5
 16745                           prodh	equ	0xFF4
 16746                           prodl	equ	0xFF3
 16747                           intcon	equ	0xFF2
 16748                           indf0	equ	0xFEF
 16749                           postinc0	equ	0xFEE
 16750                           fsr0h	equ	0xFEA
 16751                           fsr0l	equ	0xFE9
 16752                           wreg	equ	0xFE8
 16753                           indf1	equ	0xFE7
 16754                           postdec1	equ	0xFE5
 16755                           fsr1h	equ	0xFE2
 16756                           fsr1l	equ	0xFE1
 16757                           indf2	equ	0xFDF
 16758                           postinc2	equ	0xFDE
 16759                           postdec2	equ	0xFDD
 16760                           plusw2	equ	0xFDB
 16761                           fsr2h	equ	0xFDA
 16762                           fsr2l	equ	0xFD9
 16763                           status	equ	0xFD8
 16764                           
 16765 ;; *************** function _Byte_SetZone *****************
 16766 ;; Defined at:
 16767 ;;		line 47 in file "Library/Types.c"
 16768 ;; Parameters:    Size  Location     Type
 16769 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16770 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 16771 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 16772 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 16773 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 16774 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16775 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16776 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16777 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16778 ;;  pMax            1    2[BANK0 ] unsigned char 
 16779 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16780 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16781 ;;  pValue          1    5[BANK0 ] unsigned char 
 16782 ;; Auto vars:     Size  Location     Type
 16783 ;;  MASK            1   10[BANK0 ] unsigned char 
 16784 ;;  Offset          1    9[BANK0 ] unsigned char 
 16785 ;; Return value:  Size  Location     Type
 16786 ;;                  1    wreg      void 
 16787 ;; Registers used:
 16788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16789 ;; Tracked objects:
 16790 ;;		On entry : 0/0
 16791 ;;		On exit  : 0/0
 16792 ;;		Unchanged: 0/0
 16793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16794 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16796 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16797 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16798 ;;Total ram usage:       11 bytes
 16799 ;; Hardware stack levels used:    1
 16800 ;; Hardware stack levels required when called:    7
 16801 ;; This function calls:
 16802 ;;		Nothing
 16803 ;; This function is called by:
 16804 ;;		_Byte_SetPair
 16805 ;;		_Byte_SetQuad
 16806 ;;		_Byte_SetTriple
 16807 ;; This function uses a non-reentrant model
 16808 ;;
 16809                           
 16810                           	psect	text89
 16811  014654                     __ptext89:
 16812                           	opt stack 0
 16813  014654                     _Byte_SetZone:
 16814                           	opt stack 19
 16815                           
 16816                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 16817                           
 16818                           ;incstack = 0
 16819  014654  0100               	movlb	0	; () banked
 16820  014656  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 16821  014658  0D01               	mullw	1
 16822  01465A  0E55               	movlw	low _MASKS
 16823  01465C  24F3               	addwf	prodl,w,c
 16824  01465E  6EF6               	movwf	tblptrl,c
 16825  014660  0EFC               	movlw	high _MASKS
 16826  014662  20F4               	addwfc	prodh,w,c
 16827  014664  6EF7               	movwf	tblptrh,c
 16828  014666                     	if	1	;There are 3 active tblptr bytes
 16829  014666  6AF8               	clrf	tblptru,c
 16830  014668  0E00               	movlw	low (__mediumconst shr (0+16))
 16831  01466A  22F8               	addwfc	tblptru,f,c
 16832  01466C                     	endif
 16833  01466C  0008               	tblrd		*
 16834  01466E  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;Types.c: 50: UINT8 Offset = 0;
 16838  014672  0E00               	movlw	0
 16839  014674  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 16840                           
 16841                           ;Types.c: 52: while (pChunk >= pMax)
 16842  014676  D003               	goto	l726
 16843  014678                     
 16844                           ; BSR set to: 0
 16845                           ;Types.c: 53: {
 16846                           ;Types.c: 54: pChunk -= pMax;
 16847                           
 16848                           ; BSR set to: 0
 16849  014678  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 16850  01467A  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 16851                           
 16852                           ; BSR set to: 0
 16853                           ;Types.c: 55: Offset += 1;
 16854  01467C  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 16855  01467E                     l726:
 16856                           
 16857                           ; BSR set to: 0
 16858                           
 16859                           ; BSR set to: 0
 16860  01467E  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 16861  014680  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 16862  014682  B0D8               	btfsc	status,0,c
 16863  014684  D7F9               	goto	l727
 16864                           
 16865                           ; BSR set to: 0
 16866                           ;Types.c: 56: }
 16867                           ;Types.c: 57: pChunk *= pChunkSize;
 16868                           
 16869                           ; BSR set to: 0
 16870  014686  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 16871  014688  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 16872  01468A  50F3               	movf	prodl,w,c
 16873  01468C  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 16874                           
 16875                           ; BSR set to: 0
 16876                           ;Types.c: 58: pChunk += Offset;
 16877  01468E  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 16878  014690  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 16879                           
 16880                           ; BSR set to: 0
 16881                           ;Types.c: 60: pValue &= MASK;
 16882  014692  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 16883  014694  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 16884                           
 16885                           ; BSR set to: 0
 16886                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 16887  014696  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 16888  01469A  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 16889  01469E  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 16890  0146A0  D002               	goto	u9664
 16891  0146A2                     u9665:
 16892  0146A2  90D8               	bcf	status,0,c
 16893  0146A4  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 16894  0146A6                     u9664:
 16895  0146A6  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 16896  0146A8  D7FC               	goto	u9665
 16897  0146AA  0100               	movlb	0	; () banked
 16898  0146AC  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 16899  0146AE  0AFF               	xorlw	255
 16900  0146B0  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 16901  0146B2  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 16902  0146B6  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 16903  0146BA  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 16904  0146BC  16DF               	andwf	indf2,f,c
 16905                           
 16906                           ; BSR set to: 0
 16907                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 16908  0146BE  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 16909  0146C2  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 16910  0146C6  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 16911  0146C8  D002               	goto	u9674
 16912  0146CA                     u9675:
 16913  0146CA  90D8               	bcf	status,0,c
 16914  0146CC  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 16915  0146CE                     u9674:
 16916  0146CE  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 16917  0146D0  D7FC               	goto	u9675
 16918  0146D2  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 16919  0146D6  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 16920  0146DA  0100               	movlb	0	; () banked
 16921  0146DC  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 16922  0146DE  12DF               	iorwf	indf2,f,c
 16923                           
 16924                           ; BSR set to: 0
 16925  0146E0  0012               	return		;funcret
 16926  0146E2                     __end_of_Byte_SetZone:
 16927                           	opt stack 0
 16928                           tosu	equ	0xFFF
 16929                           tosh	equ	0xFFE
 16930                           tosl	equ	0xFFD
 16931                           pclath	equ	0xFFA
 16932                           tblptru	equ	0xFF8
 16933                           tblptrh	equ	0xFF7
 16934                           tblptrl	equ	0xFF6
 16935                           tablat	equ	0xFF5
 16936                           prodh	equ	0xFF4
 16937                           prodl	equ	0xFF3
 16938                           intcon	equ	0xFF2
 16939                           indf0	equ	0xFEF
 16940                           postinc0	equ	0xFEE
 16941                           fsr0h	equ	0xFEA
 16942                           fsr0l	equ	0xFE9
 16943                           wreg	equ	0xFE8
 16944                           indf1	equ	0xFE7
 16945                           postdec1	equ	0xFE5
 16946                           fsr1h	equ	0xFE2
 16947                           fsr1l	equ	0xFE1
 16948                           indf2	equ	0xFDF
 16949                           postinc2	equ	0xFDE
 16950                           postdec2	equ	0xFDD
 16951                           plusw2	equ	0xFDB
 16952                           fsr2h	equ	0xFDA
 16953                           fsr2l	equ	0xFD9
 16954                           status	equ	0xFD8
 16955                           
 16956 ;; *************** function _Drive *****************
 16957 ;; Defined at:
 16958 ;;		line 216 in file "main.c"
 16959 ;; Parameters:    Size  Location     Type
 16960 ;;  Speed           2    1[BANK0 ] int 
 16961 ;; Auto vars:     Size  Location     Type
 16962 ;;  Rad             2    3[BANK0 ] int 
 16963 ;; Return value:  Size  Location     Type
 16964 ;;                  1    wreg      void 
 16965 ;; Registers used:
 16966 ;;		wreg, status,2, cstack
 16967 ;; Tracked objects:
 16968 ;;		On entry : 0/0
 16969 ;;		On exit  : 0/0
 16970 ;;		Unchanged: 0/0
 16971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16972 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16973 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16975 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16976 ;;Total ram usage:        4 bytes
 16977 ;; Hardware stack levels used:    1
 16978 ;; Hardware stack levels required when called:    8
 16979 ;; This function calls:
 16980 ;;		_eusartSend
 16981 ;; This function is called by:
 16982 ;;		_main
 16983 ;; This function uses a non-reentrant model
 16984 ;;
 16985                           
 16986                           	psect	text90
 16987  015BA2                     __ptext90:
 16988                           	opt stack 0
 16989  015BA2                     _Drive:
 16990                           	opt stack 22
 16991                           
 16992                           ;main.c: 217: int Rad = 32768;
 16993                           
 16994                           ; BSR set to: 0
 16995                           ;incstack = 0
 16996  015BA2  0E80               	movlw	128
 16997  015BA4  0100               	movlb	0	; () banked
 16998  015BA6  6F64               	movwf	(Drive@Rad+1)& (0+255),b
 16999  015BA8  0E00               	movlw	0
 17000  015BAA  6F63               	movwf	Drive@Rad& (0+255),b
 17001                           
 17002                           ; BSR set to: 0
 17003                           ;main.c: 218: eusartSend(137);
 17004  015BAC  0E89               	movlw	137
 17005  015BAE  EC74  F0B0         	call	_eusartSend
 17006                           
 17007                           ;main.c: 219: eusartSend((((Speed)>>8) & 255));
 17008  015BB2  0100               	movlb	0	; () banked
 17009  015BB4  5162               	movf	(Drive@Speed+1)& (0+255),w,b
 17010  015BB6  EC74  F0B0         	call	_eusartSend
 17011                           
 17012                           ;main.c: 220: eusartSend(((Speed) & 255));
 17013  015BBA  0100               	movlb	0	; () banked
 17014  015BBC  5161               	movf	Drive@Speed& (0+255),w,b
 17015  015BBE  EC74  F0B0         	call	_eusartSend
 17016                           
 17017                           ;main.c: 221: eusartSend((((Rad)>>8) & 255));
 17018  015BC2  0100               	movlb	0	; () banked
 17019  015BC4  5164               	movf	(Drive@Rad+1)& (0+255),w,b
 17020  015BC6  EC74  F0B0         	call	_eusartSend
 17021                           
 17022                           ;main.c: 222: eusartSend(((Rad) & 255));
 17023  015BCA  0100               	movlb	0	; () banked
 17024  015BCC  5163               	movf	Drive@Rad& (0+255),w,b
 17025  015BCE  EC74  F0B0         	call	_eusartSend
 17026  015BD2  0012               	return		;funcret
 17027  015BD4                     __end_of_Drive:
 17028                           	opt stack 0
 17029                           tosu	equ	0xFFF
 17030                           tosh	equ	0xFFE
 17031                           tosl	equ	0xFFD
 17032                           pclath	equ	0xFFA
 17033                           tblptru	equ	0xFF8
 17034                           tblptrh	equ	0xFF7
 17035                           tblptrl	equ	0xFF6
 17036                           tablat	equ	0xFF5
 17037                           prodh	equ	0xFF4
 17038                           prodl	equ	0xFF3
 17039                           intcon	equ	0xFF2
 17040                           indf0	equ	0xFEF
 17041                           postinc0	equ	0xFEE
 17042                           fsr0h	equ	0xFEA
 17043                           fsr0l	equ	0xFE9
 17044                           wreg	equ	0xFE8
 17045                           indf1	equ	0xFE7
 17046                           postdec1	equ	0xFE5
 17047                           fsr1h	equ	0xFE2
 17048                           fsr1l	equ	0xFE1
 17049                           indf2	equ	0xFDF
 17050                           postinc2	equ	0xFDE
 17051                           postdec2	equ	0xFDD
 17052                           plusw2	equ	0xFDB
 17053                           fsr2h	equ	0xFDA
 17054                           fsr2l	equ	0xFD9
 17055                           status	equ	0xFD8
 17056                           
 17057 ;; *************** function _Console_Init *****************
 17058 ;; Defined at:
 17059 ;;		line 157 in file "Library/Console.c"
 17060 ;; Parameters:    Size  Location     Type
 17061 ;;		None
 17062 ;; Auto vars:     Size  Location     Type
 17063 ;;  y               1    3[BANK0 ] unsigned char 
 17064 ;;  x               1    2[BANK0 ] unsigned char 
 17065 ;; Return value:  Size  Location     Type
 17066 ;;                  1    wreg      void 
 17067 ;; Registers used:
 17068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17069 ;; Tracked objects:
 17070 ;;		On entry : 0/0
 17071 ;;		On exit  : 0/0
 17072 ;;		Unchanged: 0/0
 17073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17075 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17076 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17077 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17078 ;;Total ram usage:        4 bytes
 17079 ;; Hardware stack levels used:    1
 17080 ;; Hardware stack levels required when called:    7
 17081 ;; This function calls:
 17082 ;;		Nothing
 17083 ;; This function is called by:
 17084 ;;		_main
 17085 ;; This function uses a non-reentrant model
 17086 ;;
 17087                           
 17088                           	psect	text91
 17089  014F02                     __ptext91:
 17090                           	opt stack 0
 17091  014F02                     _Console_Init:
 17092                           	opt stack 23
 17093                           
 17094                           ;Console.c: 160: lBufferX = 0;
 17095                           
 17096                           ;incstack = 0
 17097  014F02  0E00               	movlw	0
 17098  014F04  0100               	movlb	0	; () banked
 17099  014F06  6FF5               	movwf	_lBufferX& (0+255),b
 17100                           
 17101                           ;Console.c: 161: lBufferY = 0;
 17102  014F08  0E00               	movlw	0
 17103  014F0A  6FF4               	movwf	_lBufferY& (0+255),b
 17104                           
 17105                           ;Console.c: 163: UINT8 x, y;
 17106                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 17107  014F0C  0E00               	movlw	0
 17108  014F0E  6F62               	movwf	Console_Init@x& (0+255),b
 17109  014F10                     l15185:
 17110                           
 17111                           ; BSR set to: 0
 17112  014F10  0E13               	movlw	19
 17113  014F12  6562               	cpfsgt	Console_Init@x& (0+255),b
 17114  014F14  D001               	goto	l976
 17115  014F16  0012               	return	
 17116  014F18                     l976:
 17117                           
 17118                           ; BSR set to: 0
 17119                           ;Console.c: 165: {
 17120                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 17121                           
 17122                           ; BSR set to: 0
 17123  014F18  0E00               	movlw	0
 17124  014F1A  6F63               	movwf	Console_Init@y& (0+255),b
 17125  014F1C                     l15191:
 17126                           
 17127                           ; BSR set to: 0
 17128  014F1C  0E0E               	movlw	14
 17129  014F1E  6563               	cpfsgt	Console_Init@y& (0+255),b
 17130  014F20  D001               	goto	l978
 17131  014F22  D022               	goto	u12650
 17132  014F24                     l978:
 17133                           
 17134                           ; BSR set to: 0
 17135                           ;Console.c: 167: {
 17136                           ;Console.c: 168: lBuffer[y][x] = '\0';
 17137                           
 17138                           ; BSR set to: 0
 17139  014F24  5163               	movf	Console_Init@y& (0+255),w,b
 17140  014F26  0D14               	mullw	20
 17141  014F28  0E18               	movlw	low _lBuffer
 17142  014F2A  6F60               	movwf	??_Console_Init& (0+255),b
 17143  014F2C  0E03               	movlw	high _lBuffer
 17144  014F2E  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 17145  014F30  50F3               	movf	prodl,w,c
 17146  014F32  2760               	addwf	??_Console_Init& (0+255),f,b
 17147  014F34  50F4               	movf	prodh,w,c
 17148  014F36  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 17149  014F38  5162               	movf	Console_Init@x& (0+255),w,b
 17150  014F3A  0D01               	mullw	1
 17151  014F3C  50F3               	movf	prodl,w,c
 17152  014F3E  2560               	addwf	??_Console_Init& (0+255),w,b
 17153  014F40  6ED9               	movwf	fsr2l,c
 17154  014F42  50F4               	movf	prodh,w,c
 17155  014F44  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 17156  014F46  6EDA               	movwf	fsr2h,c
 17157  014F48  0E00               	movlw	0
 17158  014F4A  6EDF               	movwf	indf2,c
 17159                           
 17160                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 17161  014F4C  5163               	movf	Console_Init@y& (0+255),w,b
 17162  014F4E  0D02               	mullw	2
 17163  014F50  0E64               	movlw	low _lCBuffer
 17164  014F52  24F3               	addwf	prodl,w,c
 17165  014F54  6ED9               	movwf	fsr2l,c
 17166  014F56  0E02               	movlw	high _lCBuffer
 17167  014F58  20F4               	addwfc	prodh,w,c
 17168  014F5A  6EDA               	movwf	fsr2h,c
 17169  014F5C  0EFF               	movlw	255
 17170  014F5E  6EDE               	movwf	postinc2,c
 17171  014F60  0EFF               	movlw	255
 17172  014F62  6EDD               	movwf	postdec2,c
 17173                           
 17174                           ; BSR set to: 0
 17175  014F64  2B63               	incf	Console_Init@y& (0+255),f,b
 17176  014F66  D7DA               	goto	l15191
 17177  014F68                     u12650:
 17178                           
 17179                           ; BSR set to: 0
 17180                           
 17181                           ; BSR set to: 0
 17182  014F68  2B62               	incf	Console_Init@x& (0+255),f,b
 17183  014F6A  D7D2               	goto	l15185
 17184  014F6C                     __end_of_Console_Init:
 17185                           	opt stack 0
 17186                           tosu	equ	0xFFF
 17187                           tosh	equ	0xFFE
 17188                           tosl	equ	0xFFD
 17189                           pclath	equ	0xFFA
 17190                           tblptru	equ	0xFF8
 17191                           tblptrh	equ	0xFF7
 17192                           tblptrl	equ	0xFF6
 17193                           tablat	equ	0xFF5
 17194                           prodh	equ	0xFF4
 17195                           prodl	equ	0xFF3
 17196                           intcon	equ	0xFF2
 17197                           indf0	equ	0xFEF
 17198                           postinc0	equ	0xFEE
 17199                           fsr0h	equ	0xFEA
 17200                           fsr0l	equ	0xFE9
 17201                           wreg	equ	0xFE8
 17202                           indf1	equ	0xFE7
 17203                           postdec1	equ	0xFE5
 17204                           fsr1h	equ	0xFE2
 17205                           fsr1l	equ	0xFE1
 17206                           indf2	equ	0xFDF
 17207                           postinc2	equ	0xFDE
 17208                           postdec2	equ	0xFDD
 17209                           plusw2	equ	0xFDB
 17210                           fsr2h	equ	0xFDA
 17211                           fsr2l	equ	0xFD9
 17212                           status	equ	0xFD8
 17213                           
 17214 ;; *************** function _Closest_Object2 *****************
 17215 ;; Defined at:
 17216 ;;		line 383 in file "main.c"
 17217 ;; Parameters:    Size  Location     Type
 17218 ;;		None
 17219 ;; Auto vars:     Size  Location     Type
 17220 ;;		None
 17221 ;; Return value:  Size  Location     Type
 17222 ;;                  1    wreg      void 
 17223 ;; Registers used:
 17224 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17225 ;; Tracked objects:
 17226 ;;		On entry : 0/0
 17227 ;;		On exit  : 0/0
 17228 ;;		Unchanged: 0/0
 17229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17234 ;;Total ram usage:        0 bytes
 17235 ;; Hardware stack levels used:    1
 17236 ;; Hardware stack levels required when called:   13
 17237 ;; This function calls:
 17238 ;;		_ADCAverage
 17239 ;;		_Console_Render
 17240 ;;		_SteppingCW
 17241 ;;		_printf
 17242 ;; This function is called by:
 17243 ;;		_main
 17244 ;; This function uses a non-reentrant model
 17245 ;;
 17246                           
 17247                           	psect	text92
 17248  014BEC                     __ptext92:
 17249                           	opt stack 0
 17250  014BEC                     _Closest_Object2:
 17251                           	opt stack 17
 17252                           
 17253                           ;main.c: 384: while (!CW_Count<=0){
 17254                           
 17255                           ; BSR set to: 0
 17256                           ;incstack = 0
 17257  014BEC  D032               	goto	l2228
 17258  014BEE                     
 17259                           ;main.c: 385: CW_Count--;
 17260  014BEE  0101               	movlb	1	; () banked
 17261  014BF0  0728               	decf	_CW_Count& (0+255),f,b
 17262  014BF2  A0D8               	btfss	status,0,c
 17263  014BF4  0729               	decf	(_CW_Count+1)& (0+255),f,b
 17264                           
 17265                           ; BSR set to: 1
 17266                           ;main.c: 386: printf("%c", (char)35);
 17267  014BF6  0EFC               	movlw	low STR_1
 17268  014BF8  0100               	movlb	0	; () banked
 17269  014BFA  6F75               	movwf	printf@f& (0+255),b
 17270  014BFC  0EFF               	movlw	high STR_1
 17271  014BFE  6F76               	movwf	(printf@f+1)& (0+255),b
 17272  014C00  0E00               	movlw	0
 17273  014C02  6F78               	movwf	(?_printf+3)& (0+255),b
 17274  014C04  0E23               	movlw	35
 17275  014C06  6F77               	movwf	(?_printf+2)& (0+255),b
 17276  014C08  EC43  F096         	call	_printf	;wreg free
 17277                           
 17278                           ;main.c: 387: printf("Stepped 360 degrees");
 17279  014C0C  0E88               	movlw	low STR_12
 17280  014C0E  0100               	movlb	0	; () banked
 17281  014C10  6F75               	movwf	printf@f& (0+255),b
 17282  014C12  0EFF               	movlw	high STR_12
 17283  014C14  6F76               	movwf	(printf@f+1)& (0+255),b
 17284  014C16  EC43  F096         	call	_printf	;wreg free
 17285                           
 17286                           ;main.c: 388: printf("\nThe Closes object (mm): %d", Low_Sensor);
 17287  014C1A  0E0F               	movlw	low STR_13
 17288  014C1C  0100               	movlb	0	; () banked
 17289  014C1E  6F75               	movwf	printf@f& (0+255),b
 17290  014C20  0EFF               	movlw	high STR_13
 17291  014C22  6F76               	movwf	(printf@f+1)& (0+255),b
 17292  014C24  C04B  F077         	movff	_Low_Sensor,?_printf+2
 17293  014C28  C04C  F078         	movff	_Low_Sensor+1,?_printf+3
 17294  014C2C  EC43  F096         	call	_printf	;wreg free
 17295                           
 17296                           ;main.c: 389: printf("\nGoing back to: %d", Close_Pos);
 17297  014C30  0EAF               	movlw	low STR_14
 17298  014C32  0100               	movlb	0	; () banked
 17299  014C34  6F75               	movwf	printf@f& (0+255),b
 17300  014C36  0EFF               	movlw	high STR_14
 17301  014C38  6F76               	movwf	(printf@f+1)& (0+255),b
 17302  014C3A  C02B  F077         	movff	_Close_Pos,?_printf+2
 17303  014C3E  C02C  F078         	movff	_Close_Pos+1,?_printf+3
 17304  014C42  EC43  F096         	call	_printf	;wreg free
 17305                           
 17306                           ;main.c: 390: Console_Render();
 17307  014C46  EC66  F092         	call	_Console_Render	;wreg free
 17308                           
 17309                           ;main.c: 391: ADCAverage ();
 17310  014C4A  ECE9  F088         	call	_ADCAverage	;wreg free
 17311                           
 17312                           ;main.c: 392: SteppingCW();
 17313  014C4E  EC01  F0AB         	call	_SteppingCW	;wreg free
 17314  014C52                     l2228:
 17315  014C52  0101               	movlb	1	; () banked
 17316  014C54  5128               	movf	_CW_Count& (0+255),w,b
 17317  014C56  1129               	iorwf	(_CW_Count+1)& (0+255),w,b
 17318  014C58  A4D8               	btfss	status,2,c
 17319  014C5A  D7C9               	goto	l2229
 17320                           
 17321                           ; BSR set to: 1
 17322                           ;main.c: 393: }
 17323                           ;main.c: 394: RD5=0;
 17324  014C5C  9A83               	bcf	3971,5,c	;volatile
 17325                           
 17326                           ;main.c: 395: RD7=0;
 17327  014C5E  9E83               	bcf	3971,7,c	;volatile
 17328                           
 17329                           ;main.c: 396: RA2=0;
 17330  014C60  9480               	bcf	3968,2,c	;volatile
 17331                           
 17332                           ;main.c: 397: RA3=0;
 17333  014C62  9680               	bcf	3968,3,c	;volatile
 17334                           
 17335                           ; BSR set to: 1
 17336                           
 17337                           ;main.c: 398: return;
 17338  014C64  0012               	return		;funcret
 17339  014C66                     __end_of_Closest_Object2:
 17340                           	opt stack 0
 17341                           tosu	equ	0xFFF
 17342                           tosh	equ	0xFFE
 17343                           tosl	equ	0xFFD
 17344                           pclath	equ	0xFFA
 17345                           tblptru	equ	0xFF8
 17346                           tblptrh	equ	0xFF7
 17347                           tblptrl	equ	0xFF6
 17348                           tablat	equ	0xFF5
 17349                           prodh	equ	0xFF4
 17350                           prodl	equ	0xFF3
 17351                           intcon	equ	0xFF2
 17352                           indf0	equ	0xFEF
 17353                           postinc0	equ	0xFEE
 17354                           fsr0h	equ	0xFEA
 17355                           fsr0l	equ	0xFE9
 17356                           wreg	equ	0xFE8
 17357                           indf1	equ	0xFE7
 17358                           postdec1	equ	0xFE5
 17359                           fsr1h	equ	0xFE2
 17360                           fsr1l	equ	0xFE1
 17361                           indf2	equ	0xFDF
 17362                           postinc2	equ	0xFDE
 17363                           postdec2	equ	0xFDD
 17364                           plusw2	equ	0xFDB
 17365                           fsr2h	equ	0xFDA
 17366                           fsr2l	equ	0xFD9
 17367                           status	equ	0xFD8
 17368                           
 17369 ;; *************** function _SteppingCW *****************
 17370 ;; Defined at:
 17371 ;;		line 290 in file "main.c"
 17372 ;; Parameters:    Size  Location     Type
 17373 ;;		None
 17374 ;; Auto vars:     Size  Location     Type
 17375 ;;		None
 17376 ;; Return value:  Size  Location     Type
 17377 ;;                  2  2205[None  ] int 
 17378 ;; Registers used:
 17379 ;;		wreg, status,2, status,0, cstack
 17380 ;; Tracked objects:
 17381 ;;		On entry : 0/0
 17382 ;;		On exit  : 0/0
 17383 ;;		Unchanged: 0/0
 17384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17389 ;;Total ram usage:        0 bytes
 17390 ;; Hardware stack levels used:    1
 17391 ;; Hardware stack levels required when called:    8
 17392 ;; This function calls:
 17393 ;;		_STP1
 17394 ;;		_STP2
 17395 ;;		_STP3
 17396 ;;		_STP4
 17397 ;;		_delay_ms
 17398 ;; This function is called by:
 17399 ;;		_Closest_Object2
 17400 ;;		_Sensor_Observe
 17401 ;; This function uses a non-reentrant model
 17402 ;;
 17403                           
 17404                           	psect	text93
 17405  015602                     __ptext93:
 17406                           	opt stack 0
 17407  015602                     _SteppingCW:
 17408                           	opt stack 21
 17409                           
 17410                           ;main.c: 291: STP1();
 17411                           
 17412                           ; BSR set to: 1
 17413                           ;incstack = 0
 17414  015602  EC43  F0B0         	call	_STP1	;wreg free
 17415                           
 17416                           ;main.c: 292: delay_ms(2);
 17417  015606  0E00               	movlw	0
 17418  015608  0100               	movlb	0	; () banked
 17419  01560A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17420  01560C  0E02               	movlw	2
 17421  01560E  6F60               	movwf	delay_ms@ms& (0+255),b
 17422  015610  EC14  F0A9         	call	_delay_ms	;wreg free
 17423                           
 17424                           ;main.c: 293: STP2();
 17425  015614  EC39  F0B0         	call	_STP2	;wreg free
 17426                           
 17427                           ;main.c: 294: delay_ms(2);
 17428  015618  0E00               	movlw	0
 17429  01561A  0100               	movlb	0	; () banked
 17430  01561C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17431  01561E  0E02               	movlw	2
 17432  015620  6F60               	movwf	delay_ms@ms& (0+255),b
 17433  015622  EC14  F0A9         	call	_delay_ms	;wreg free
 17434                           
 17435                           ;main.c: 295: STP3();
 17436  015626  EC2F  F0B0         	call	_STP3	;wreg free
 17437                           
 17438                           ;main.c: 296: delay_ms(2);
 17439  01562A  0E00               	movlw	0
 17440  01562C  0100               	movlb	0	; () banked
 17441  01562E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17442  015630  0E02               	movlw	2
 17443  015632  6F60               	movwf	delay_ms@ms& (0+255),b
 17444  015634  EC14  F0A9         	call	_delay_ms	;wreg free
 17445                           
 17446                           ;main.c: 297: STP4();
 17447  015638  EC25  F0B0         	call	_STP4	;wreg free
 17448                           
 17449                           ;main.c: 298: delay_ms(2);
 17450  01563C  0E00               	movlw	0
 17451  01563E  0100               	movlb	0	; () banked
 17452  015640  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17453  015642  0E02               	movlw	2
 17454  015644  6F60               	movwf	delay_ms@ms& (0+255),b
 17455  015646  EC14  F0A9         	call	_delay_ms	;wreg free
 17456  01564A  0012               	return		;funcret
 17457  01564C                     __end_of_SteppingCW:
 17458                           	opt stack 0
 17459                           tosu	equ	0xFFF
 17460                           tosh	equ	0xFFE
 17461                           tosl	equ	0xFFD
 17462                           pclath	equ	0xFFA
 17463                           tblptru	equ	0xFF8
 17464                           tblptrh	equ	0xFF7
 17465                           tblptrl	equ	0xFF6
 17466                           tablat	equ	0xFF5
 17467                           prodh	equ	0xFF4
 17468                           prodl	equ	0xFF3
 17469                           intcon	equ	0xFF2
 17470                           indf0	equ	0xFEF
 17471                           postinc0	equ	0xFEE
 17472                           fsr0h	equ	0xFEA
 17473                           fsr0l	equ	0xFE9
 17474                           wreg	equ	0xFE8
 17475                           indf1	equ	0xFE7
 17476                           postdec1	equ	0xFE5
 17477                           fsr1h	equ	0xFE2
 17478                           fsr1l	equ	0xFE1
 17479                           indf2	equ	0xFDF
 17480                           postinc2	equ	0xFDE
 17481                           postdec2	equ	0xFDD
 17482                           plusw2	equ	0xFDB
 17483                           fsr2h	equ	0xFDA
 17484                           fsr2l	equ	0xFD9
 17485                           status	equ	0xFD8
 17486                           
 17487 ;; *************** function _Closest_Object *****************
 17488 ;; Defined at:
 17489 ;;		line 433 in file "main.c"
 17490 ;; Parameters:    Size  Location     Type
 17491 ;;		None
 17492 ;; Auto vars:     Size  Location     Type
 17493 ;;		None
 17494 ;; Return value:  Size  Location     Type
 17495 ;;                  1    wreg      void 
 17496 ;; Registers used:
 17497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17498 ;; Tracked objects:
 17499 ;;		On entry : 0/0
 17500 ;;		On exit  : 0/0
 17501 ;;		Unchanged: 0/0
 17502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17507 ;;Total ram usage:        0 bytes
 17508 ;; Hardware stack levels used:    1
 17509 ;; Hardware stack levels required when called:   13
 17510 ;; This function calls:
 17511 ;;		_ADCAverage
 17512 ;;		_Console_Render
 17513 ;;		_SteppingCCW
 17514 ;;		_printf
 17515 ;; This function is called by:
 17516 ;;		_main
 17517 ;; This function uses a non-reentrant model
 17518 ;;
 17519                           
 17520                           	psect	text94
 17521  0140D2                     __ptext94:
 17522                           	opt stack 0
 17523  0140D2                     _Closest_Object:
 17524                           	opt stack 17
 17525                           
 17526                           ;main.c: 434: printf("%c", (char)35);
 17527                           
 17528                           ;incstack = 0
 17529  0140D2  0EFC               	movlw	low STR_1
 17530  0140D4  0100               	movlb	0	; () banked
 17531  0140D6  6F75               	movwf	printf@f& (0+255),b
 17532  0140D8  0EFF               	movlw	high STR_1
 17533  0140DA  6F76               	movwf	(printf@f+1)& (0+255),b
 17534  0140DC  0E00               	movlw	0
 17535  0140DE  6F78               	movwf	(?_printf+3)& (0+255),b
 17536  0140E0  0E23               	movlw	35
 17537  0140E2  6F77               	movwf	(?_printf+2)& (0+255),b
 17538  0140E4  EC43  F096         	call	_printf	;wreg free
 17539                           
 17540                           ;main.c: 435: printf("Stepped 360 degrees");
 17541  0140E8  0E88               	movlw	low STR_12
 17542  0140EA  0100               	movlb	0	; () banked
 17543  0140EC  6F75               	movwf	printf@f& (0+255),b
 17544  0140EE  0EFF               	movlw	high STR_12
 17545  0140F0  6F76               	movwf	(printf@f+1)& (0+255),b
 17546  0140F2  EC43  F096         	call	_printf	;wreg free
 17547                           
 17548                           ;main.c: 436: printf("\nThe Closes object (mm): %d", Low_Sensor);
 17549  0140F6  0E0F               	movlw	low STR_13
 17550  0140F8  0100               	movlb	0	; () banked
 17551  0140FA  6F75               	movwf	printf@f& (0+255),b
 17552  0140FC  0EFF               	movlw	high STR_13
 17553  0140FE  6F76               	movwf	(printf@f+1)& (0+255),b
 17554  014100  C04B  F077         	movff	_Low_Sensor,?_printf+2
 17555  014104  C04C  F078         	movff	_Low_Sensor+1,?_printf+3
 17556  014108  EC43  F096         	call	_printf	;wreg free
 17557                           
 17558                           ;main.c: 437: printf("\nGoing back to: %d", Close_Pos);
 17559  01410C  0EAF               	movlw	low STR_14
 17560  01410E  0100               	movlb	0	; () banked
 17561  014110  6F75               	movwf	printf@f& (0+255),b
 17562  014112  0EFF               	movlw	high STR_14
 17563  014114  6F76               	movwf	(printf@f+1)& (0+255),b
 17564  014116  C02B  F077         	movff	_Close_Pos,?_printf+2
 17565  01411A  C02C  F078         	movff	_Close_Pos+1,?_printf+3
 17566  01411E  EC43  F096         	call	_printf	;wreg free
 17567                           
 17568                           ;main.c: 438: Console_Render();
 17569  014122  EC66  F092         	call	_Console_Render	;wreg free
 17570                           
 17571                           ;main.c: 439: while (!CCW_Count<=0){
 17572  014126  D020               	goto	l2241
 17573  014128                     
 17574                           ;main.c: 440: CCW_Count--;
 17575  014128  0101               	movlb	1	; () banked
 17576  01412A  072A               	decf	_CCW_Count& (0+255),f,b
 17577  01412C  A0D8               	btfss	status,0,c
 17578  01412E  072B               	decf	(_CCW_Count+1)& (0+255),f,b
 17579                           
 17580                           ; BSR set to: 1
 17581                           ;main.c: 441: printf("%c", (char)35);
 17582  014130  0EFC               	movlw	low STR_1
 17583  014132  0100               	movlb	0	; () banked
 17584  014134  6F75               	movwf	printf@f& (0+255),b
 17585  014136  0EFF               	movlw	high STR_1
 17586  014138  6F76               	movwf	(printf@f+1)& (0+255),b
 17587  01413A  0E00               	movlw	0
 17588  01413C  6F78               	movwf	(?_printf+3)& (0+255),b
 17589  01413E  0E23               	movlw	35
 17590  014140  6F77               	movwf	(?_printf+2)& (0+255),b
 17591  014142  EC43  F096         	call	_printf	;wreg free
 17592                           
 17593                           ;main.c: 442: printf("\nSteps Travelled: %d",CCW_Count);
 17594  014146  0E73               	movlw	low STR_29
 17595  014148  0100               	movlb	0	; () banked
 17596  01414A  6F75               	movwf	printf@f& (0+255),b
 17597  01414C  0EFF               	movlw	high STR_29
 17598  01414E  6F76               	movwf	(printf@f+1)& (0+255),b
 17599  014150  C12A  F077         	movff	_CCW_Count,?_printf+2
 17600  014154  C12B  F078         	movff	_CCW_Count+1,?_printf+3
 17601  014158  EC43  F096         	call	_printf	;wreg free
 17602                           
 17603                           ;main.c: 443: Console_Render();
 17604  01415C  EC66  F092         	call	_Console_Render	;wreg free
 17605                           
 17606                           ;main.c: 444: ADCAverage ();
 17607  014160  ECE9  F088         	call	_ADCAverage	;wreg free
 17608                           
 17609                           ;main.c: 445: SteppingCCW();
 17610  014164  EC26  F0AB         	call	_SteppingCCW	;wreg free
 17611  014168                     l2241:
 17612  014168  0101               	movlb	1	; () banked
 17613  01416A  512A               	movf	_CCW_Count& (0+255),w,b
 17614  01416C  112B               	iorwf	(_CCW_Count+1)& (0+255),w,b
 17615  01416E  A4D8               	btfss	status,2,c
 17616  014170  D7DB               	goto	l2242
 17617                           
 17618                           ; BSR set to: 1
 17619                           ;main.c: 446: }
 17620                           ;main.c: 447: RD5=0;
 17621  014172  9A83               	bcf	3971,5,c	;volatile
 17622                           
 17623                           ;main.c: 448: RD7=0;
 17624  014174  9E83               	bcf	3971,7,c	;volatile
 17625                           
 17626                           ;main.c: 449: RA2=0;
 17627  014176  9480               	bcf	3968,2,c	;volatile
 17628                           
 17629                           ;main.c: 450: RA3=0;
 17630  014178  9680               	bcf	3968,3,c	;volatile
 17631                           
 17632                           ; BSR set to: 1
 17633                           
 17634                           ;main.c: 451: return;
 17635  01417A  0012               	return		;funcret
 17636  01417C                     __end_of_Closest_Object:
 17637                           	opt stack 0
 17638                           tosu	equ	0xFFF
 17639                           tosh	equ	0xFFE
 17640                           tosl	equ	0xFFD
 17641                           pclath	equ	0xFFA
 17642                           tblptru	equ	0xFF8
 17643                           tblptrh	equ	0xFF7
 17644                           tblptrl	equ	0xFF6
 17645                           tablat	equ	0xFF5
 17646                           prodh	equ	0xFF4
 17647                           prodl	equ	0xFF3
 17648                           intcon	equ	0xFF2
 17649                           indf0	equ	0xFEF
 17650                           postinc0	equ	0xFEE
 17651                           fsr0h	equ	0xFEA
 17652                           fsr0l	equ	0xFE9
 17653                           wreg	equ	0xFE8
 17654                           indf1	equ	0xFE7
 17655                           postdec1	equ	0xFE5
 17656                           fsr1h	equ	0xFE2
 17657                           fsr1l	equ	0xFE1
 17658                           indf2	equ	0xFDF
 17659                           postinc2	equ	0xFDE
 17660                           postdec2	equ	0xFDD
 17661                           plusw2	equ	0xFDB
 17662                           fsr2h	equ	0xFDA
 17663                           fsr2l	equ	0xFD9
 17664                           status	equ	0xFD8
 17665                           
 17666 ;; *************** function _printf *****************
 17667 ;; Defined at:
 17668 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 17669 ;; Parameters:    Size  Location     Type
 17670 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 17671 ;;		 -> STR_71(19), STR_70(19), STR_69(19), STR_68(19), 
 17672 ;;		 -> STR_67(19), STR_66(19), STR_65(19), STR_64(19), 
 17673 ;;		 -> STR_63(16), STR_62(28), STR_61(3), STR_60(19), 
 17674 ;;		 -> STR_59(19), STR_58(19), STR_57(19), STR_56(19), 
 17675 ;;		 -> STR_55(19), STR_54(19), STR_53(19), STR_52(11), 
 17676 ;;		 -> STR_51(23), STR_50(3), STR_49(19), STR_48(19), 
 17677 ;;		 -> STR_47(19), STR_46(19), STR_45(19), STR_44(19), 
 17678 ;;		 -> STR_43(19), STR_42(19), STR_41(22), STR_40(3), 
 17679 ;;		 -> STR_39(19), STR_38(19), STR_37(19), STR_36(19), 
 17680 ;;		 -> STR_35(28), STR_34(28), STR_33(27), STR_32(28), 
 17681 ;;		 -> STR_31(15), STR_30(3), STR_29(21), STR_28(3), 
 17682 ;;		 -> STR_27(19), STR_26(28), STR_25(20), STR_24(3), 
 17683 ;;		 -> STR_23(19), STR_22(19), STR_21(19), STR_20(19), 
 17684 ;;		 -> STR_19(19), STR_18(19), STR_17(16), STR_16(19), 
 17685 ;;		 -> STR_15(3), STR_14(19), STR_13(28), STR_12(20), 
 17686 ;;		 -> STR_11(3), STR_10(19), STR_9(19), STR_8(19), 
 17687 ;;		 -> STR_7(19), STR_6(19), STR_5(19), STR_4(19), 
 17688 ;;		 -> STR_3(16), STR_2(19), STR_1(3), 
 17689 ;; Auto vars:     Size  Location     Type
 17690 ;;  tmpval          4    0        struct .
 17691 ;;  cp              3    0        PTR const unsigned char 
 17692 ;;  val             2   30[BANK0 ] unsigned int 
 17693 ;;  ap              2   28[BANK0 ] PTR void [1]
 17694 ;;		 -> ?_printf(2), 
 17695 ;;  len             2    0        unsigned int 
 17696 ;;  c               1   32[BANK0 ] char 
 17697 ;;  prec            1   27[BANK0 ] char 
 17698 ;;  flag            1   26[BANK0 ] unsigned char 
 17699 ;; Return value:  Size  Location     Type
 17700 ;;                  2   21[BANK0 ] int 
 17701 ;; Registers used:
 17702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17703 ;; Tracked objects:
 17704 ;;		On entry : 0/0
 17705 ;;		On exit  : 0/0
 17706 ;;		Unchanged: 0/0
 17707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17708 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17709 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17711 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;Total ram usage:       12 bytes
 17713 ;; Hardware stack levels used:    1
 17714 ;; Hardware stack levels required when called:   12
 17715 ;; This function calls:
 17716 ;;		___lwdiv
 17717 ;;		___lwmod
 17718 ;;		_putch
 17719 ;; This function is called by:
 17720 ;;		_Sensor_Observe2
 17721 ;;		_Closest_Object2
 17722 ;;		_Sensor_Observe
 17723 ;;		_Closest_Object
 17724 ;;		_main
 17725 ;; This function uses a non-reentrant model
 17726 ;;
 17727                           
 17728                           	psect	text95
 17729  012C86                     __ptext95:
 17730                           	opt stack 0
 17731  012C86                     _printf:
 17732                           	opt stack 18
 17733                           
 17734                           ;doprnt.c: 466: va_list ap;
 17735                           ;doprnt.c: 499: signed char c;
 17736                           ;doprnt.c: 506: signed char prec;
 17737                           ;doprnt.c: 508: unsigned char flag;
 17738                           ;doprnt.c: 523: union {
 17739                           ;doprnt.c: 524: unsigned long vd;
 17740                           ;doprnt.c: 525: double integ;
 17741                           ;doprnt.c: 526: } tmpval;
 17742                           ;doprnt.c: 528: unsigned int val;
 17743                           ;doprnt.c: 529: unsigned len;
 17744                           ;doprnt.c: 530: const char * cp;
 17745                           ;doprnt.c: 533: *ap = __va_start();
 17746                           
 17747                           ; BSR set to: 1
 17748                           ;incstack = 0
 17749  012C86  0E77               	movlw	low (?_printf+2)
 17750  012C88  0100               	movlb	0	; () banked
 17751  012C8A  6F7C               	movwf	printf@ap& (0+255),b
 17752  012C8C  0E00               	movlw	high (?_printf+2)
 17753  012C8E  6F7D               	movwf	(printf@ap+1)& (0+255),b
 17754                           
 17755                           ;doprnt.c: 536: while(c = *f++) {
 17756  012C90  D09E               	goto	u12370
 17757  012C92                     
 17758                           ; BSR set to: 0
 17759                           ;doprnt.c: 538: if(c != '%')
 17760                           
 17761                           ; BSR set to: 0
 17762  012C92  0E25               	movlw	37
 17763  012C94  1980               	xorwf	printf@c& (0+255),w,b
 17764  012C96  B4D8               	btfsc	status,2,c
 17765  012C98  D004               	goto	l2304
 17766                           
 17767                           ; BSR set to: 0
 17768                           ;doprnt.c: 540: {
 17769                           ;doprnt.c: 541: (putch(c) );
 17770  012C9A  5180               	movf	printf@c& (0+255),w,b
 17771  012C9C  EC6D  F0B0         	call	_putch
 17772                           
 17773                           ;doprnt.c: 542: continue;
 17774  012CA0  D096               	goto	u12370
 17775  012CA2                     l2304:
 17776                           
 17777                           ;doprnt.c: 543: }
 17778                           ;doprnt.c: 548: flag = 0;
 17779  012CA2  0E00               	movlw	0
 17780  012CA4  0100               	movlb	0	; () banked
 17781  012CA6  6F7A               	movwf	printf@flag& (0+255),b
 17782                           
 17783                           ;doprnt.c: 635: switch(c = *f++) {
 17784  012CA8  D00E               	goto	l2305
 17785  012CAA                     
 17786                           ; BSR set to: 0
 17787                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 17788                           
 17789                           ; BSR set to: 0
 17790  012CAA  C07C  FFD9         	movff	printf@ap,fsr2l
 17791  012CAE  C07D  FFDA         	movff	printf@ap+1,fsr2h
 17792  012CB2  50DF               	movf	indf2,w,c
 17793  012CB4  6F80               	movwf	printf@c& (0+255),b
 17794                           
 17795                           ; BSR set to: 0
 17796  012CB6  0E02               	movlw	2
 17797  012CB8  277C               	addwf	printf@ap& (0+255),f,b
 17798  012CBA  0E00               	movlw	0
 17799  012CBC  237D               	addwfc	(printf@ap+1)& (0+255),f,b
 17800  012CBE                     
 17801                           ; BSR set to: 0
 17802                           ;doprnt.c: 809: (putch(c) );
 17803                           
 17804                           ; BSR set to: 0
 17805  012CBE  5180               	movf	printf@c& (0+255),w,b
 17806  012CC0  EC6D  F0B0         	call	_putch
 17807                           
 17808                           ;doprnt.c: 810: continue;
 17809  012CC4  D084               	goto	u12370
 17810  012CC6                     l2305:
 17811  012CC6  C075  FFF6         	movff	printf@f,tblptrl
 17812  012CCA  C076  FFF7         	movff	printf@f+1,tblptrh
 17813  012CCE  0100               	movlb	0	; () banked
 17814  012CD0  4B75               	infsnz	printf@f& (0+255),f,b
 17815  012CD2  2B76               	incf	(printf@f+1)& (0+255),f,b
 17816  012CD4                     	if	0	;tblptru may be non-zero
 17817  012CD4                     	endif
 17818  012CD4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 17819  012CD4  0E00               	movlw	low (__mediumconst shr (0+16))
 17820  012CD6  6EF8               	movwf	tblptru,c
 17821  012CD8                     	endif
 17822  012CD8  0008               	tblrd		*
 17823  012CDA  CFF5 F080          	movff	tablat,printf@c
 17824  012CDE  5180               	movf	printf@c& (0+255),w,b
 17825                           
 17826                           ; Switch size 1, requested type "space"
 17827                           ; Number of cases is 4, Range of values is 0 to 105
 17828                           ; switch strategies available:
 17829                           ; Name         Instructions Cycles
 17830                           ; simple_byte           13     7 (average)
 17831                           ;	Chosen strategy is simple_byte
 17832  012CE0  0A00               	xorlw	0	; case 0
 17833  012CE2  B4D8               	btfsc	status,2,c
 17834  012CE4  0012               	return	
 17835  012CE6  0A63               	xorlw	99	; case 99
 17836  012CE8  B4D8               	btfsc	status,2,c
 17837  012CEA  D7DF               	goto	l2311
 17838  012CEC  0A07               	xorlw	7	; case 100
 17839  012CEE  B4D8               	btfsc	status,2,c
 17840  012CF0  D003               	goto	l2310
 17841  012CF2  0A0D               	xorlw	13	; case 105
 17842  012CF4  A4D8               	btfss	status,2,c
 17843  012CF6  D7E3               	goto	l2312
 17844  012CF8                     l2310:
 17845                           
 17846                           ;doprnt.c: 1253: {
 17847                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17848                           
 17849                           ; BSR set to: 0
 17850  012CF8  C07C  FFD9         	movff	printf@ap,fsr2l
 17851  012CFC  C07D  FFDA         	movff	printf@ap+1,fsr2h
 17852  012D00  CFDE F07E          	movff	postinc2,printf@val
 17853  012D04  CFDD F07F          	movff	postdec2,printf@val+1
 17854  012D08  0E02               	movlw	2
 17855  012D0A  0100               	movlb	0	; () banked
 17856  012D0C  277C               	addwf	printf@ap& (0+255),f,b
 17857  012D0E  0E00               	movlw	0
 17858  012D10  237D               	addwfc	(printf@ap+1)& (0+255),f,b
 17859                           
 17860                           ; BSR set to: 0
 17861                           ;doprnt.c: 1261: if((int)val < 0) {
 17862  012D12  AF7F               	btfss	(printf@val+1)& (0+255),7,b
 17863  012D14  D006               	goto	l2313
 17864                           
 17865                           ; BSR set to: 0
 17866                           ;doprnt.c: 1262: flag |= 0x03;
 17867  012D16  0E03               	movlw	3
 17868  012D18  137A               	iorwf	printf@flag& (0+255),f,b
 17869                           
 17870                           ; BSR set to: 0
 17871                           ;doprnt.c: 1263: val = -val;
 17872  012D1A  6D7E               	negf	printf@val& (0+255),b
 17873  012D1C  1F7F               	comf	(printf@val+1)& (0+255),f,b
 17874  012D1E  B0D8               	btfsc	status,0,c
 17875  012D20  2B7F               	incf	(printf@val+1)& (0+255),f,b
 17876  012D22                     l2313:
 17877                           
 17878                           ; BSR set to: 0
 17879                           ;doprnt.c: 1264: }
 17880                           ;doprnt.c: 1266: }
 17881                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17882                           
 17883                           ; BSR set to: 0
 17884  012D22  0E01               	movlw	1
 17885  012D24  6F80               	movwf	printf@c& (0+255),b
 17886  012D26                     l14989:
 17887                           
 17888                           ; BSR set to: 0
 17889  012D26  0E05               	movlw	5
 17890  012D28  1980               	xorwf	printf@c& (0+255),w,b
 17891  012D2A  B4D8               	btfsc	status,2,c
 17892  012D2C  D015               	goto	u12350
 17893                           
 17894                           ; BSR set to: 0
 17895                           ;doprnt.c: 1306: if(val < dpowers[c])
 17896                           
 17897                           ; BSR set to: 0
 17898                           
 17899                           ; BSR set to: 0
 17900  012D2E  5180               	movf	printf@c& (0+255),w,b
 17901  012D30  0D02               	mullw	2
 17902  012D32  0E4B               	movlw	low _dpowers
 17903  012D34  24F3               	addwf	prodl,w,c
 17904  012D36  6EF6               	movwf	tblptrl,c
 17905  012D38  0EFC               	movlw	high _dpowers
 17906  012D3A  20F4               	addwfc	prodh,w,c
 17907  012D3C  6EF7               	movwf	tblptrh,c
 17908  012D3E                     	if	1	;There are 3 active tblptr bytes
 17909  012D3E  6AF8               	clrf	tblptru,c
 17910  012D40  0E00               	movlw	low (__mediumconst shr (0+16))
 17911  012D42  22F8               	addwfc	tblptru,f,c
 17912  012D44                     	endif
 17913  012D44  0009               	tblrd		*+
 17914  012D46  50F5               	movf	tablat,w,c
 17915  012D48  5D7E               	subwf	printf@val& (0+255),w,b
 17916  012D4A  0009               	tblrd		*+
 17917  012D4C  50F5               	movf	tablat,w,c
 17918  012D4E  597F               	subwfb	(printf@val+1)& (0+255),w,b
 17919  012D50  A0D8               	btfss	status,0,c
 17920  012D52  D002               	goto	u12350
 17921                           
 17922                           ; BSR set to: 0
 17923                           
 17924                           ; BSR set to: 0
 17925                           
 17926                           ; BSR set to: 0
 17927                           ;doprnt.c: 1307: break;
 17928  012D54  2B80               	incf	printf@c& (0+255),f,b
 17929  012D56  D7E7               	goto	l14989
 17930  012D58                     u12350:
 17931                           
 17932                           ; BSR set to: 0
 17933                           ;doprnt.c: 1422: {
 17934                           ;doprnt.c: 1438: if(flag & 0x03)
 17935                           
 17936                           ; BSR set to: 0
 17937  012D58  C07A  F079         	movff	printf@flag,??_printf
 17938  012D5C  0E03               	movlw	3
 17939  012D5E  1779               	andwf	??_printf& (0+255),f,b
 17940  012D60  B4D8               	btfsc	status,2,c
 17941  012D62  D003               	goto	l2317
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;doprnt.c: 1439: (putch('-') );
 17945  012D64  0E2D               	movlw	45
 17946  012D66  EC6D  F0B0         	call	_putch
 17947  012D6A                     l2317:
 17948                           
 17949                           ;doprnt.c: 1469: }
 17950                           ;doprnt.c: 1472: prec = c;
 17951  012D6A  C080  F07B         	movff	printf@c,printf@prec
 17952                           
 17953                           ;doprnt.c: 1474: while(prec--) {
 17954  012D6E  D02A               	goto	l2318
 17955  012D70                     
 17956                           ;doprnt.c: 1478: {
 17957                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17958  012D70  0100               	movlb	0	; () banked
 17959  012D72  517B               	movf	printf@prec& (0+255),w,b
 17960  012D74  0D02               	mullw	2
 17961  012D76  0E4B               	movlw	low _dpowers
 17962  012D78  24F3               	addwf	prodl,w,c
 17963  012D7A  6EF6               	movwf	tblptrl,c
 17964  012D7C  0EFC               	movlw	high _dpowers
 17965  012D7E  20F4               	addwfc	prodh,w,c
 17966  012D80  6EF7               	movwf	tblptrh,c
 17967  012D82                     	if	1	;There are 3 active tblptr bytes
 17968  012D82  6AF8               	clrf	tblptru,c
 17969  012D84  0E00               	movlw	low (__mediumconst shr (0+16))
 17970  012D86  22F8               	addwfc	tblptru,f,c
 17971  012D88                     	endif
 17972  012D88  0009               	tblrd		*+
 17973  012D8A  CFF5 F062          	movff	tablat,___lwdiv@divisor
 17974  012D8E  000A               	tblrd		*-
 17975  012D90  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 17976  012D94  C07E  F060         	movff	printf@val,___lwdiv@dividend
 17977  012D98  C07F  F061         	movff	printf@val+1,___lwdiv@dividend+1
 17978  012D9C  ECEA  F0A9         	call	___lwdiv	;wreg free
 17979  012DA0  C060  F067         	movff	?___lwdiv,___lwmod@dividend
 17980  012DA4  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
 17981  012DA8  0E00               	movlw	0
 17982  012DAA  0100               	movlb	0	; () banked
 17983  012DAC  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 17984  012DAE  0E0A               	movlw	10
 17985  012DB0  6F69               	movwf	___lwmod@divisor& (0+255),b
 17986  012DB2  ECFE  F0AB         	call	___lwmod	;wreg free
 17987  012DB6  0100               	movlb	0	; () banked
 17988  012DB8  5167               	movf	?___lwmod& (0+255),w,b
 17989  012DBA  0F30               	addlw	48
 17990  012DBC  6F80               	movwf	printf@c& (0+255),b
 17991                           
 17992                           ; BSR set to: 0
 17993                           ;doprnt.c: 1523: }
 17994                           ;doprnt.c: 1524: (putch(c) );
 17995  012DBE  5180               	movf	printf@c& (0+255),w,b
 17996  012DC0  EC6D  F0B0         	call	_putch
 17997  012DC4                     l2318:
 17998  012DC4  0100               	movlb	0	; () banked
 17999  012DC6  077B               	decf	printf@prec& (0+255),f,b
 18000  012DC8  297B               	incf	printf@prec& (0+255),w,b
 18001  012DCA  A4D8               	btfss	status,2,c
 18002  012DCC  D7D1               	goto	l2319
 18003  012DCE                     u12370:
 18004                           
 18005                           ; BSR set to: 0
 18006                           
 18007                           ; BSR set to: 0
 18008  012DCE  C075  FFF6         	movff	printf@f,tblptrl
 18009  012DD2  C076  FFF7         	movff	printf@f+1,tblptrh
 18010  012DD6  0100               	movlb	0	; () banked
 18011  012DD8  4B75               	infsnz	printf@f& (0+255),f,b
 18012  012DDA  2B76               	incf	(printf@f+1)& (0+255),f,b
 18013  012DDC                     	if	0	;tblptru may be non-zero
 18014  012DDC                     	endif
 18015  012DDC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 18016  012DDC  0E00               	movlw	low (__mediumconst shr (0+16))
 18017  012DDE  6EF8               	movwf	tblptru,c
 18018  012DE0                     	endif
 18019  012DE0  0008               	tblrd		*
 18020  012DE2  CFF5 F080          	movff	tablat,printf@c
 18021  012DE6  5180               	movf	printf@c& (0+255),w,b
 18022  012DE8  B4D8               	btfsc	status,2,c
 18023  012DEA  0012               	return	
 18024  012DEC  D752               	goto	l2303
 18025  012DEE                     __end_of_printf:
 18026                           	opt stack 0
 18027                           tosu	equ	0xFFF
 18028                           tosh	equ	0xFFE
 18029                           tosl	equ	0xFFD
 18030                           pclath	equ	0xFFA
 18031                           tblptru	equ	0xFF8
 18032                           tblptrh	equ	0xFF7
 18033                           tblptrl	equ	0xFF6
 18034                           tablat	equ	0xFF5
 18035                           prodh	equ	0xFF4
 18036                           prodl	equ	0xFF3
 18037                           intcon	equ	0xFF2
 18038                           indf0	equ	0xFEF
 18039                           postinc0	equ	0xFEE
 18040                           fsr0h	equ	0xFEA
 18041                           fsr0l	equ	0xFE9
 18042                           wreg	equ	0xFE8
 18043                           indf1	equ	0xFE7
 18044                           postdec1	equ	0xFE5
 18045                           fsr1h	equ	0xFE2
 18046                           fsr1l	equ	0xFE1
 18047                           indf2	equ	0xFDF
 18048                           postinc2	equ	0xFDE
 18049                           postdec2	equ	0xFDD
 18050                           plusw2	equ	0xFDB
 18051                           fsr2h	equ	0xFDA
 18052                           fsr2l	equ	0xFD9
 18053                           status	equ	0xFD8
 18054                           
 18055 ;; *************** function _putch *****************
 18056 ;; Defined at:
 18057 ;;		line 454 in file "Library/Console.c"
 18058 ;; Parameters:    Size  Location     Type
 18059 ;;  c               1    wreg     unsigned char 
 18060 ;; Auto vars:     Size  Location     Type
 18061 ;;  c               1   20[BANK0 ] unsigned char 
 18062 ;; Return value:  Size  Location     Type
 18063 ;;                  1    wreg      void 
 18064 ;; Registers used:
 18065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18066 ;; Tracked objects:
 18067 ;;		On entry : 0/0
 18068 ;;		On exit  : 0/0
 18069 ;;		Unchanged: 0/0
 18070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18072 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18074 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18075 ;;Total ram usage:        1 bytes
 18076 ;; Hardware stack levels used:    1
 18077 ;; Hardware stack levels required when called:   11
 18078 ;; This function calls:
 18079 ;;		_Console_PrintChar
 18080 ;; This function is called by:
 18081 ;;		_printf
 18082 ;; This function uses a non-reentrant model
 18083 ;;
 18084                           
 18085                           	psect	text96
 18086  0160DA                     __ptext96:
 18087                           	opt stack 0
 18088  0160DA                     _putch:
 18089                           	opt stack 18
 18090                           
 18091                           ; BSR set to: 0
 18092                           ;incstack = 0
 18093                           ;putch@c stored from wreg
 18094  0160DA  0100               	movlb	0	; () banked
 18095  0160DC  6F74               	movwf	putch@c& (0+255),b
 18096                           
 18097                           ;Console.c: 456: Console_PrintChar(c);
 18098  0160DE  0100               	movlb	0	; () banked
 18099  0160E0  5174               	movf	putch@c& (0+255),w,b
 18100  0160E2  ECA1  F097         	call	_Console_PrintChar
 18101  0160E6  0012               	return		;funcret
 18102  0160E8                     __end_of_putch:
 18103                           	opt stack 0
 18104                           tosu	equ	0xFFF
 18105                           tosh	equ	0xFFE
 18106                           tosl	equ	0xFFD
 18107                           pclath	equ	0xFFA
 18108                           tblptru	equ	0xFF8
 18109                           tblptrh	equ	0xFF7
 18110                           tblptrl	equ	0xFF6
 18111                           tablat	equ	0xFF5
 18112                           prodh	equ	0xFF4
 18113                           prodl	equ	0xFF3
 18114                           intcon	equ	0xFF2
 18115                           indf0	equ	0xFEF
 18116                           postinc0	equ	0xFEE
 18117                           fsr0h	equ	0xFEA
 18118                           fsr0l	equ	0xFE9
 18119                           wreg	equ	0xFE8
 18120                           indf1	equ	0xFE7
 18121                           postdec1	equ	0xFE5
 18122                           fsr1h	equ	0xFE2
 18123                           fsr1l	equ	0xFE1
 18124                           indf2	equ	0xFDF
 18125                           postinc2	equ	0xFDE
 18126                           postdec2	equ	0xFDD
 18127                           plusw2	equ	0xFDB
 18128                           fsr2h	equ	0xFDA
 18129                           fsr2l	equ	0xFD9
 18130                           status	equ	0xFD8
 18131                           
 18132 ;; *************** function _Console_PrintChar *****************
 18133 ;; Defined at:
 18134 ;;		line 322 in file "Library/Console.c"
 18135 ;; Parameters:    Size  Location     Type
 18136 ;;  pInput          1    wreg     unsigned char 
 18137 ;; Auto vars:     Size  Location     Type
 18138 ;;  pInput          1   19[BANK0 ] unsigned char 
 18139 ;; Return value:  Size  Location     Type
 18140 ;;                  1    wreg      void 
 18141 ;; Registers used:
 18142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18143 ;; Tracked objects:
 18144 ;;		On entry : 0/0
 18145 ;;		On exit  : 0/0
 18146 ;;		Unchanged: 0/0
 18147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18150 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18151 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18152 ;;Total ram usage:        4 bytes
 18153 ;; Hardware stack levels used:    1
 18154 ;; Hardware stack levels required when called:   10
 18155 ;; This function calls:
 18156 ;;		_Console_Backspace
 18157 ;;		_Console_FormFeed
 18158 ;;		_Console_IncrementCursor
 18159 ;;		_Console_NewLine
 18160 ;;		_Console_ResetCursor
 18161 ;;		_Console_Tab
 18162 ;; This function is called by:
 18163 ;;		_putch
 18164 ;;		_Console_PrintString
 18165 ;; This function uses a non-reentrant model
 18166 ;;
 18167                           
 18168                           	psect	text97
 18169  012F42                     __ptext97:
 18170                           	opt stack 0
 18171  012F42                     _Console_PrintChar:
 18172                           	opt stack 18
 18173                           
 18174                           ;incstack = 0
 18175                           ;Console_PrintChar@pInput stored from wreg
 18176  012F42  0100               	movlb	0	; () banked
 18177  012F44  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
 18178                           
 18179                           ;Console.c: 324: switch(pInput)
 18180  012F46  D08A               	goto	l1036
 18181  012F48                     
 18182                           ;Console.c: 327: case '\n':
 18183                           ;Console.c: 328: Console_NewLine();
 18184  012F48  EC01  F0A5         	call	_Console_NewLine	;wreg free
 18185                           
 18186                           ;Console.c: 329: return;
 18187  012F4C  0012               	return	
 18188  012F4E                     
 18189                           ;Console.c: 331: Console_Backspace();
 18190  012F4E  EC8D  F0AA         	call	_Console_Backspace	;wreg free
 18191                           
 18192                           ;Console.c: 332: return;
 18193  012F52  0012               	return	
 18194  012F54                     
 18195                           ;Console.c: 334: Console_FormFeed();
 18196  012F54  ECE0  F0A6         	call	_Console_FormFeed	;wreg free
 18197                           
 18198                           ;Console.c: 335: return;
 18199  012F58  0012               	return	
 18200  012F5A                     
 18201                           ;Console.c: 337: Console_Tab();
 18202  012F5A  EC50  F0A2         	call	_Console_Tab	;wreg free
 18203                           
 18204                           ;Console.c: 338: return;
 18205  012F5E  0012               	return	
 18206  012F60                     
 18207                           ;Console.c: 340: Console_IncrementCursor();
 18208  012F60  EC6C  F0A9         	call	_Console_IncrementCursor	;wreg free
 18209                           
 18210                           ;Console.c: 341: return;
 18211  012F64  0012               	return	
 18212  012F66                     
 18213                           ;Console.c: 343: Console_ResetCursor();
 18214  012F66  EC4A  F0AF         	call	_Console_ResetCursor	;wreg free
 18215                           
 18216                           ;Console.c: 344: return;
 18217  012F6A  0012               	return	
 18218  012F6C                     
 18219                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 18220                           
 18221                           ;Console.c: 349: default:
 18222  012F6C  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 18223  012F70  0E7F               	movlw	127
 18224  012F72  0100               	movlb	0	; () banked
 18225  012F74  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 18226  012F76  51F4               	movf	_lBufferY& (0+255),w,b
 18227  012F78  0D14               	mullw	20
 18228  012F7A  0E18               	movlw	low _lBuffer
 18229  012F7C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18230  012F7E  0E03               	movlw	high _lBuffer
 18231  012F80  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 18232  012F82  50F3               	movf	prodl,w,c
 18233  012F84  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 18234  012F86  50F4               	movf	prodh,w,c
 18235  012F88  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 18236  012F8A  51F5               	movf	_lBufferX& (0+255),w,b
 18237  012F8C  0D01               	mullw	1
 18238  012F8E  50F3               	movf	prodl,w,c
 18239  012F90  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 18240  012F92  6ED9               	movwf	fsr2l,c
 18241  012F94  50F4               	movf	prodh,w,c
 18242  012F96  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 18243  012F98  6EDA               	movwf	fsr2h,c
 18244  012F9A  50DF               	movf	indf2,w,c
 18245  012F9C  0B7F               	andlw	127
 18246  012F9E  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 18247  012FA0  B4D8               	btfsc	status,2,c
 18248  012FA2  D023               	goto	l1047
 18249                           
 18250                           ; BSR set to: 0
 18251                           ;Console.c: 351: {
 18252                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 18253  012FA4  0E01               	movlw	1
 18254  012FA6  6E4E               	movwf	_change,c
 18255                           
 18256                           ; BSR set to: 0
 18257  012FA8  51F4               	movf	_lBufferY& (0+255),w,b
 18258  012FAA  0D14               	mullw	20
 18259  012FAC  0E18               	movlw	low _lBuffer
 18260  012FAE  6F70               	movwf	??_Console_PrintChar& (0+255),b
 18261  012FB0  0E03               	movlw	high _lBuffer
 18262  012FB2  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18263  012FB4  50F3               	movf	prodl,w,c
 18264  012FB6  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 18265  012FB8  50F4               	movf	prodh,w,c
 18266  012FBA  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 18267  012FBC  51F5               	movf	_lBufferX& (0+255),w,b
 18268  012FBE  0D01               	mullw	1
 18269  012FC0  50F3               	movf	prodl,w,c
 18270  012FC2  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 18271  012FC4  6ED9               	movwf	fsr2l,c
 18272  012FC6  50F4               	movf	prodh,w,c
 18273  012FC8  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 18274  012FCA  6EDA               	movwf	fsr2h,c
 18275  012FCC  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18276  012FCE  0980               	iorlw	128
 18277  012FD0  6EDF               	movwf	indf2,c
 18278                           
 18279                           ; BSR set to: 0
 18280                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 18281  012FD2  51F4               	movf	_lBufferY& (0+255),w,b
 18282  012FD4  0D02               	mullw	2
 18283  012FD6  0E64               	movlw	low _lCBuffer
 18284  012FD8  24F3               	addwf	prodl,w,c
 18285  012FDA  6ED9               	movwf	fsr2l,c
 18286  012FDC  0E02               	movlw	high _lCBuffer
 18287  012FDE  20F4               	addwfc	prodh,w,c
 18288  012FE0  6EDA               	movwf	fsr2h,c
 18289  012FE2  C1F5  FFDE         	movff	_gForecolour,postinc2
 18290  012FE6  C1F6  FFDD         	movff	_gForecolour+1,postdec2
 18291  012FEA                     l1047:
 18292                           
 18293                           ; BSR set to: 0
 18294                           ;Console.c: 354: }
 18295                           ;Console.c: 368: if(Console_IncrementCursor())
 18296                           
 18297                           ; BSR set to: 0
 18298  012FEA  EC6C  F0A9         	call	_Console_IncrementCursor	;wreg free
 18299  012FEE  0900               	iorlw	0
 18300  012FF0  B4D8               	btfsc	status,2,c
 18301  012FF2  0012               	return	
 18302                           
 18303                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 18304  012FF4  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 18305  012FF8  0E7F               	movlw	127
 18306  012FFA  0100               	movlb	0	; () banked
 18307  012FFC  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 18308  012FFE  51F4               	movf	_lBufferY& (0+255),w,b
 18309  013000  0D14               	mullw	20
 18310  013002  0E18               	movlw	low _lBuffer
 18311  013004  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18312  013006  0E03               	movlw	high _lBuffer
 18313  013008  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 18314  01300A  50F3               	movf	prodl,w,c
 18315  01300C  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 18316  01300E  50F4               	movf	prodh,w,c
 18317  013010  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 18318  013012  51F5               	movf	_lBufferX& (0+255),w,b
 18319  013014  0D01               	mullw	1
 18320  013016  50F3               	movf	prodl,w,c
 18321  013018  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 18322  01301A  6ED9               	movwf	fsr2l,c
 18323  01301C  50F4               	movf	prodh,w,c
 18324  01301E  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 18325  013020  6EDA               	movwf	fsr2h,c
 18326  013022  50DF               	movf	indf2,w,c
 18327  013024  0B7F               	andlw	127
 18328  013026  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 18329  013028  B4D8               	btfsc	status,2,c
 18330  01302A  0012               	return	
 18331                           
 18332                           ; BSR set to: 0
 18333                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 18334  01302C  0E01               	movlw	1
 18335  01302E  6E4E               	movwf	_change,c
 18336                           
 18337                           ; BSR set to: 0
 18338  013030  51F4               	movf	_lBufferY& (0+255),w,b
 18339  013032  0D14               	mullw	20
 18340  013034  0E18               	movlw	low _lBuffer
 18341  013036  6F70               	movwf	??_Console_PrintChar& (0+255),b
 18342  013038  0E03               	movlw	high _lBuffer
 18343  01303A  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18344  01303C  50F3               	movf	prodl,w,c
 18345  01303E  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 18346  013040  50F4               	movf	prodh,w,c
 18347  013042  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 18348  013044  51F5               	movf	_lBufferX& (0+255),w,b
 18349  013046  0D01               	mullw	1
 18350  013048  50F3               	movf	prodl,w,c
 18351  01304A  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 18352  01304C  6ED9               	movwf	fsr2l,c
 18353  01304E  50F4               	movf	prodh,w,c
 18354  013050  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 18355  013052  6EDA               	movwf	fsr2h,c
 18356  013054  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18357  013056  0980               	iorlw	128
 18358  013058  6EDF               	movwf	indf2,c
 18359                           
 18360                           ; BSR set to: 0
 18361                           ;Console.c: 372: };
 18362                           
 18363                           ; BSR set to: 0
 18364                           ;Console.c: 371: return;
 18365                           
 18366                           ; BSR set to: 0
 18367                           
 18368                           ; BSR set to: 0
 18369  01305A  0012               	return	
 18370  01305C                     l1036:
 18371                           
 18372                           ; BSR set to: 0
 18373  01305C  0100               	movlb	0	; () banked
 18374  01305E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18375                           
 18376                           ; Switch size 1, requested type "space"
 18377                           ; Number of cases is 8, Range of values is 7 to 35
 18378                           ; switch strategies available:
 18379                           ; Name         Instructions Cycles
 18380                           ; simple_byte           25    13 (average)
 18381                           ;	Chosen strategy is simple_byte
 18382  013060  0A07               	xorlw	7	; case 7
 18383  013062  B4D8               	btfsc	status,2,c
 18384  013064  D77D               	goto	l1043
 18385  013066  0A0F               	xorlw	15	; case 8
 18386  013068  B4D8               	btfsc	status,2,c
 18387  01306A  D771               	goto	l1040
 18388  01306C  0A01               	xorlw	1	; case 9
 18389  01306E  B4D8               	btfsc	status,2,c
 18390  013070  D774               	goto	l1042
 18391  013072  0A03               	xorlw	3	; case 10
 18392  013074  B4D8               	btfsc	status,2,c
 18393  013076  D768               	goto	l1037
 18394  013078  0A06               	xorlw	6	; case 12
 18395  01307A  B4D8               	btfsc	status,2,c
 18396  01307C  D76B               	goto	l1041
 18397  01307E  0A01               	xorlw	1	; case 13
 18398  013080  B4D8               	btfsc	status,2,c
 18399  013082  D762               	goto	l1037
 18400  013084  0A2D               	xorlw	45	; case 32
 18401  013086  B4D8               	btfsc	status,2,c
 18402  013088  D771               	goto	l1045
 18403  01308A  0A03               	xorlw	3	; case 35
 18404  01308C  B4D8               	btfsc	status,2,c
 18405  01308E  D76B               	goto	l1044
 18406  013090  D76D               	goto	l1045
 18407  013092                     __end_of_Console_PrintChar:
 18408                           	opt stack 0
 18409                           tosu	equ	0xFFF
 18410                           tosh	equ	0xFFE
 18411                           tosl	equ	0xFFD
 18412                           pclath	equ	0xFFA
 18413                           tblptru	equ	0xFF8
 18414                           tblptrh	equ	0xFF7
 18415                           tblptrl	equ	0xFF6
 18416                           tablat	equ	0xFF5
 18417                           prodh	equ	0xFF4
 18418                           prodl	equ	0xFF3
 18419                           intcon	equ	0xFF2
 18420                           indf0	equ	0xFEF
 18421                           postinc0	equ	0xFEE
 18422                           fsr0h	equ	0xFEA
 18423                           fsr0l	equ	0xFE9
 18424                           wreg	equ	0xFE8
 18425                           indf1	equ	0xFE7
 18426                           postdec1	equ	0xFE5
 18427                           fsr1h	equ	0xFE2
 18428                           fsr1l	equ	0xFE1
 18429                           indf2	equ	0xFDF
 18430                           postinc2	equ	0xFDE
 18431                           postdec2	equ	0xFDD
 18432                           plusw2	equ	0xFDB
 18433                           fsr2h	equ	0xFDA
 18434                           fsr2l	equ	0xFD9
 18435                           status	equ	0xFD8
 18436                           
 18437 ;; *************** function _Console_Tab *****************
 18438 ;; Defined at:
 18439 ;;		line 260 in file "Library/Console.c"
 18440 ;; Parameters:    Size  Location     Type
 18441 ;;		None
 18442 ;; Auto vars:     Size  Location     Type
 18443 ;;  c               1   15[BANK0 ] unsigned char 
 18444 ;;  i               1   14[BANK0 ] unsigned char 
 18445 ;;  t               1   13[BANK0 ] unsigned char 
 18446 ;; Return value:  Size  Location     Type
 18447 ;;                  1    wreg      void 
 18448 ;; Registers used:
 18449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18450 ;; Tracked objects:
 18451 ;;		On entry : 0/0
 18452 ;;		On exit  : 0/0
 18453 ;;		Unchanged: 0/0
 18454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18456 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18457 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18458 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18459 ;;Total ram usage:        8 bytes
 18460 ;; Hardware stack levels used:    1
 18461 ;; Hardware stack levels required when called:    9
 18462 ;; This function calls:
 18463 ;;		_Console_ClearCursor
 18464 ;;		_Console_IncrementCursor
 18465 ;;		___awdiv
 18466 ;; This function is called by:
 18467 ;;		_Console_PrintChar
 18468 ;; This function uses a non-reentrant model
 18469 ;;
 18470                           
 18471                           	psect	text98
 18472  0144A0                     __ptext98:
 18473                           	opt stack 0
 18474  0144A0                     _Console_Tab:
 18475                           	opt stack 18
 18476                           
 18477                           ;Console.c: 262: UINT8 i = 0;
 18478                           
 18479                           ;incstack = 0
 18480  0144A0  0E00               	movlw	0
 18481  0144A2  0100               	movlb	0	; () banked
 18482  0144A4  6F6E               	movwf	Console_Tab@i& (0+255),b
 18483                           
 18484                           ; BSR set to: 0
 18485                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 18486  0144A6  0EFA               	movlw	250
 18487  0144A8  2445               	addwf	_gCursor,w,c
 18488  0144AA  6F60               	movwf	___awdiv@dividend& (0+255),b
 18489  0144AC  0EFF               	movlw	255
 18490  0144AE  2046               	addwfc	_gCursor+1,w,c
 18491  0144B0  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
 18492  0144B2  0E00               	movlw	0
 18493  0144B4  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18494  0144B6  0E06               	movlw	6
 18495  0144B8  6F62               	movwf	___awdiv@divisor& (0+255),b
 18496  0144BA  EC3D  F0A4         	call	___awdiv	;wreg free
 18497  0144BE  0100               	movlb	0	; () banked
 18498  0144C0  5160               	movf	?___awdiv& (0+255),w,b
 18499  0144C2  6F6F               	movwf	Console_Tab@c& (0+255),b
 18500                           
 18501                           ; BSR set to: 0
 18502                           ;Console.c: 264: UINT8 t = c/4;
 18503  0144C4  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
 18504  0144C8  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
 18505  0144CA  0E00               	movlw	0
 18506  0144CC  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18507  0144CE  0E04               	movlw	4
 18508  0144D0  6F62               	movwf	___awdiv@divisor& (0+255),b
 18509  0144D2  EC3D  F0A4         	call	___awdiv	;wreg free
 18510  0144D6  0100               	movlb	0	; () banked
 18511  0144D8  5160               	movf	?___awdiv& (0+255),w,b
 18512  0144DA  6F6D               	movwf	Console_Tab@t& (0+255),b
 18513                           
 18514                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 18515  0144DC  0E00               	movlw	0
 18516  0144DE  6F6E               	movwf	Console_Tab@i& (0+255),b
 18517  0144E0  D006               	goto	l1009
 18518  0144E2                     
 18519                           ; BSR set to: 0
 18520                           ;Console.c: 266: {
 18521                           ;Console.c: 267: Console_ClearCursor();
 18522                           
 18523                           ; BSR set to: 0
 18524  0144E2  EC02  F0AE         	call	_Console_ClearCursor	;wreg free
 18525                           
 18526                           ;Console.c: 268: Console_IncrementCursor();
 18527  0144E6  EC6C  F0A9         	call	_Console_IncrementCursor	;wreg free
 18528  0144EA  0100               	movlb	0	; () banked
 18529  0144EC  2B6E               	incf	Console_Tab@i& (0+255),f,b
 18530  0144EE                     l1009:
 18531                           
 18532                           ; BSR set to: 0
 18533                           
 18534                           ; BSR set to: 0
 18535  0144EE  516D               	movf	Console_Tab@t& (0+255),w,b
 18536  0144F0  0D04               	mullw	4
 18537  0144F2  1EF3               	comf	prodl,f,c
 18538  0144F4  1EF4               	comf	prodh,f,c
 18539  0144F6  4AF3               	infsnz	prodl,f,c
 18540  0144F8  2AF4               	incf	prodh,f,c
 18541  0144FA  516F               	movf	Console_Tab@c& (0+255),w,b
 18542  0144FC  6F68               	movwf	??_Console_Tab& (0+255),b
 18543  0144FE  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
 18544  014500  50F3               	movf	prodl,w,c
 18545  014502  2768               	addwf	??_Console_Tab& (0+255),f,b
 18546  014504  50F4               	movf	prodh,w,c
 18547  014506  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 18548  014508  1F68               	comf	??_Console_Tab& (0+255),f,b
 18549  01450A  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
 18550  01450C  4B68               	infsnz	??_Console_Tab& (0+255),f,b
 18551  01450E  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
 18552  014510  0E04               	movlw	4
 18553  014512  2768               	addwf	??_Console_Tab& (0+255),f,b
 18554  014514  0E00               	movlw	0
 18555  014516  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 18556  014518  516E               	movf	Console_Tab@i& (0+255),w,b
 18557  01451A  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
 18558  01451C  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
 18559  01451E  5168               	movf	??_Console_Tab& (0+255),w,b
 18560  014520  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
 18561  014522  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
 18562  014524  0A80               	xorlw	128
 18563  014526  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
 18564  014528  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
 18565  01452A  0A80               	xorlw	128
 18566  01452C  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 18567  01452E  B0D8               	btfsc	status,0,c
 18568  014530  0012               	return	
 18569  014532  D7D7               	goto	l1010
 18570  014534                     __end_of_Console_Tab:
 18571                           	opt stack 0
 18572                           tosu	equ	0xFFF
 18573                           tosh	equ	0xFFE
 18574                           tosl	equ	0xFFD
 18575                           pclath	equ	0xFFA
 18576                           tblptru	equ	0xFF8
 18577                           tblptrh	equ	0xFF7
 18578                           tblptrl	equ	0xFF6
 18579                           tablat	equ	0xFF5
 18580                           prodh	equ	0xFF4
 18581                           prodl	equ	0xFF3
 18582                           intcon	equ	0xFF2
 18583                           indf0	equ	0xFEF
 18584                           postinc0	equ	0xFEE
 18585                           fsr0h	equ	0xFEA
 18586                           fsr0l	equ	0xFE9
 18587                           wreg	equ	0xFE8
 18588                           indf1	equ	0xFE7
 18589                           postdec1	equ	0xFE5
 18590                           fsr1h	equ	0xFE2
 18591                           fsr1l	equ	0xFE1
 18592                           indf2	equ	0xFDF
 18593                           postinc2	equ	0xFDE
 18594                           postdec2	equ	0xFDD
 18595                           plusw2	equ	0xFDB
 18596                           fsr2h	equ	0xFDA
 18597                           fsr2l	equ	0xFD9
 18598                           status	equ	0xFD8
 18599                           
 18600 ;; *************** function _Console_IncrementCursor *****************
 18601 ;; Defined at:
 18602 ;;		line 243 in file "Library/Console.c"
 18603 ;; Parameters:    Size  Location     Type
 18604 ;;		None
 18605 ;; Auto vars:     Size  Location     Type
 18606 ;;		None
 18607 ;; Return value:  Size  Location     Type
 18608 ;;                  1    wreg      unsigned char 
 18609 ;; Registers used:
 18610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18611 ;; Tracked objects:
 18612 ;;		On entry : 0/0
 18613 ;;		On exit  : 0/0
 18614 ;;		Unchanged: 0/0
 18615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18618 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18620 ;;Total ram usage:        2 bytes
 18621 ;; Hardware stack levels used:    1
 18622 ;; Hardware stack levels required when called:    8
 18623 ;; This function calls:
 18624 ;;		_Console_FormFeed
 18625 ;;		_Console_NewLine
 18626 ;; This function is called by:
 18627 ;;		_Console_Tab
 18628 ;;		_Console_PrintChar
 18629 ;; This function uses a non-reentrant model
 18630 ;;
 18631                           
 18632                           	psect	text99
 18633  0152D8                     __ptext99:
 18634                           	opt stack 0
 18635  0152D8                     _Console_IncrementCursor:
 18636                           	opt stack 18
 18637                           
 18638                           ;Console.c: 246: lBufferX += 1;
 18639                           
 18640                           ; BSR set to: 0
 18641                           ;incstack = 0
 18642  0152D8  0100               	movlb	0	; () banked
 18643  0152DA  2BF5               	incf	_lBufferX& (0+255),f,b
 18644                           
 18645                           ; BSR set to: 0
 18646                           ;Console.c: 248: gCursor.x += 6;
 18647  0152DC  0E06               	movlw	6
 18648  0152DE  2645               	addwf	_gCursor,f,c
 18649  0152E0  0E00               	movlw	0
 18650  0152E2  2246               	addwfc	_gCursor+1,f,c
 18651                           
 18652                           ; BSR set to: 0
 18653                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 18654  0152E4  0E06               	movlw	6
 18655  0152E6  2445               	addwf	_gCursor,w,c
 18656  0152E8  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 18657  0152EA  0E00               	movlw	0
 18658  0152EC  2046               	addwfc	_gCursor+1,w,c
 18659  0152EE  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 18660  0152F0  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 18661  0152F2  D007               	goto	l1004
 18662  0152F4  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 18663  0152F6  E103               	bnz	u9800
 18664  0152F8  0E80               	movlw	128
 18665  0152FA  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 18666  0152FC  B0D8               	btfsc	status,0,c
 18667  0152FE                     u9800:
 18668                           
 18669                           ; BSR set to: 0
 18670                           ;Console.c: 250: Console_NewLine();
 18671  0152FE  EC01  F0A5         	call	_Console_NewLine	;wreg free
 18672  015302                     l1004:
 18673                           
 18674                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 18675  015302  0E08               	movlw	8
 18676  015304  2447               	addwf	_gCursor+2,w,c
 18677  015306  0100               	movlb	0	; () banked
 18678  015308  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 18679  01530A  0E00               	movlw	0
 18680  01530C  2048               	addwfc	_gCursor+3,w,c
 18681  01530E  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 18682  015310  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 18683  015312  D00A               	goto	l1005
 18684  015314  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 18685  015316  E104               	bnz	u9810
 18686  015318  0E80               	movlw	128
 18687  01531A  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 18688  01531C  A0D8               	btfss	status,0,c
 18689  01531E  D004               	goto	l1005
 18690  015320                     u9810:
 18691                           
 18692                           ; BSR set to: 0
 18693                           ;Console.c: 252: {
 18694                           ;Console.c: 253: Console_FormFeed();
 18695  015320  ECE0  F0A6         	call	_Console_FormFeed	;wreg free
 18696                           
 18697                           ;Console.c: 254: return 1;
 18698  015324  0E01               	movlw	1
 18699  015326  0012               	return	
 18700  015328                     l1005:
 18701                           
 18702                           ;Console.c: 255: }
 18703                           ;Console.c: 257: return 0;
 18704  015328  0E00               	movlw	0
 18705  01532A  0012               	return	
 18706  01532C                     __end_of_Console_IncrementCursor:
 18707                           	opt stack 0
 18708                           tosu	equ	0xFFF
 18709                           tosh	equ	0xFFE
 18710                           tosl	equ	0xFFD
 18711                           pclath	equ	0xFFA
 18712                           tblptru	equ	0xFF8
 18713                           tblptrh	equ	0xFF7
 18714                           tblptrl	equ	0xFF6
 18715                           tablat	equ	0xFF5
 18716                           prodh	equ	0xFF4
 18717                           prodl	equ	0xFF3
 18718                           intcon	equ	0xFF2
 18719                           indf0	equ	0xFEF
 18720                           postinc0	equ	0xFEE
 18721                           fsr0h	equ	0xFEA
 18722                           fsr0l	equ	0xFE9
 18723                           wreg	equ	0xFE8
 18724                           indf1	equ	0xFE7
 18725                           postdec1	equ	0xFE5
 18726                           fsr1h	equ	0xFE2
 18727                           fsr1l	equ	0xFE1
 18728                           indf2	equ	0xFDF
 18729                           postinc2	equ	0xFDE
 18730                           postdec2	equ	0xFDD
 18731                           plusw2	equ	0xFDB
 18732                           fsr2h	equ	0xFDA
 18733                           fsr2l	equ	0xFD9
 18734                           status	equ	0xFD8
 18735                           
 18736 ;; *************** function _Console_NewLine *****************
 18737 ;; Defined at:
 18738 ;;		line 175 in file "Library/Console.c"
 18739 ;; Parameters:    Size  Location     Type
 18740 ;;		None
 18741 ;; Auto vars:     Size  Location     Type
 18742 ;;		None
 18743 ;; Return value:  Size  Location     Type
 18744 ;;                  1    wreg      void 
 18745 ;; Registers used:
 18746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18747 ;; Tracked objects:
 18748 ;;		On entry : 0/0
 18749 ;;		On exit  : 0/0
 18750 ;;		Unchanged: 0/0
 18751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18756 ;;Total ram usage:        2 bytes
 18757 ;; Hardware stack levels used:    1
 18758 ;; Hardware stack levels required when called:    7
 18759 ;; This function calls:
 18760 ;;		Nothing
 18761 ;; This function is called by:
 18762 ;;		_Console_IncrementCursor
 18763 ;;		_Console_PrintChar
 18764 ;; This function uses a non-reentrant model
 18765 ;;
 18766                           
 18767                           	psect	text100
 18768  014A02                     __ptext100:
 18769                           	opt stack 0
 18770  014A02                     _Console_NewLine:
 18771                           	opt stack 18
 18772                           
 18773                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 18774                           
 18775                           ;incstack = 0
 18776  014A02  D02D               	goto	l983
 18777  014A04                     
 18778                           ;Console.c: 179: {
 18779                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 18780  014A04  0100               	movlb	0	; () banked
 18781  014A06  51F4               	movf	_lBufferY& (0+255),w,b
 18782  014A08  0D14               	mullw	20
 18783  014A0A  0E18               	movlw	low _lBuffer
 18784  014A0C  6F60               	movwf	??_Console_NewLine& (0+255),b
 18785  014A0E  0E03               	movlw	high _lBuffer
 18786  014A10  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 18787  014A12  50F3               	movf	prodl,w,c
 18788  014A14  2760               	addwf	??_Console_NewLine& (0+255),f,b
 18789  014A16  50F4               	movf	prodh,w,c
 18790  014A18  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 18791  014A1A  51F5               	movf	_lBufferX& (0+255),w,b
 18792  014A1C  0D01               	mullw	1
 18793  014A1E  50F3               	movf	prodl,w,c
 18794  014A20  2560               	addwf	??_Console_NewLine& (0+255),w,b
 18795  014A22  6ED9               	movwf	fsr2l,c
 18796  014A24  50F4               	movf	prodh,w,c
 18797  014A26  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 18798  014A28  6EDA               	movwf	fsr2h,c
 18799  014A2A  50DF               	movf	indf2,w,c
 18800  014A2C  B4D8               	btfsc	status,2,c
 18801  014A2E  D016               	goto	l985
 18802                           
 18803                           ; BSR set to: 0
 18804                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 18805  014A30  0E01               	movlw	1
 18806  014A32  6E4E               	movwf	_change,c
 18807                           
 18808                           ; BSR set to: 0
 18809  014A34  51F4               	movf	_lBufferY& (0+255),w,b
 18810  014A36  0D14               	mullw	20
 18811  014A38  0E18               	movlw	low _lBuffer
 18812  014A3A  6F60               	movwf	??_Console_NewLine& (0+255),b
 18813  014A3C  0E03               	movlw	high _lBuffer
 18814  014A3E  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 18815  014A40  50F3               	movf	prodl,w,c
 18816  014A42  2760               	addwf	??_Console_NewLine& (0+255),f,b
 18817  014A44  50F4               	movf	prodh,w,c
 18818  014A46  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 18819  014A48  51F5               	movf	_lBufferX& (0+255),w,b
 18820  014A4A  0D01               	mullw	1
 18821  014A4C  50F3               	movf	prodl,w,c
 18822  014A4E  2560               	addwf	??_Console_NewLine& (0+255),w,b
 18823  014A50  6ED9               	movwf	fsr2l,c
 18824  014A52  50F4               	movf	prodh,w,c
 18825  014A54  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 18826  014A56  6EDA               	movwf	fsr2h,c
 18827  014A58  0E80               	movlw	128
 18828  014A5A  6EDF               	movwf	indf2,c
 18829  014A5C                     l985:
 18830                           
 18831                           ; BSR set to: 0
 18832                           ;Console.c: 182: lBufferX ++;
 18833                           
 18834                           ; BSR set to: 0
 18835  014A5C  2BF5               	incf	_lBufferX& (0+255),f,b
 18836  014A5E                     l983:
 18837                           
 18838                           ; BSR set to: 0
 18839  014A5E  0E13               	movlw	19
 18840  014A60  0100               	movlb	0	; () banked
 18841  014A62  65F5               	cpfsgt	_lBufferX& (0+255),b
 18842  014A64  D7CF               	goto	l984
 18843                           
 18844                           ; BSR set to: 0
 18845                           ;Console.c: 183: }
 18846                           ;Console.c: 185: lBufferX = 0;
 18847                           
 18848                           ; BSR set to: 0
 18849  014A66  0E00               	movlw	0
 18850  014A68  6FF5               	movwf	_lBufferX& (0+255),b
 18851                           
 18852                           ; BSR set to: 0
 18853                           ;Console.c: 186: lBufferY ++;
 18854  014A6A  2BF4               	incf	_lBufferY& (0+255),f,b
 18855                           
 18856                           ; BSR set to: 0
 18857                           ;Console.c: 188: gCursor.y += 8;
 18858  014A6C  0E08               	movlw	8
 18859  014A6E  2647               	addwf	_gCursor+2,f,c
 18860  014A70  0E00               	movlw	0
 18861  014A72  2248               	addwfc	_gCursor+3,f,c
 18862                           
 18863                           ; BSR set to: 0
 18864                           ;Console.c: 189: gCursor.x = 6;
 18865  014A74  0E00               	movlw	0
 18866  014A76  6E46               	movwf	_gCursor+1,c
 18867  014A78  0E06               	movlw	6
 18868  014A7A  6E45               	movwf	_gCursor,c
 18869                           
 18870                           ; BSR set to: 0
 18871  014A7C  0012               	return		;funcret
 18872  014A7E                     __end_of_Console_NewLine:
 18873                           	opt stack 0
 18874                           tosu	equ	0xFFF
 18875                           tosh	equ	0xFFE
 18876                           tosl	equ	0xFFD
 18877                           pclath	equ	0xFFA
 18878                           tblptru	equ	0xFF8
 18879                           tblptrh	equ	0xFF7
 18880                           tblptrl	equ	0xFF6
 18881                           tablat	equ	0xFF5
 18882                           prodh	equ	0xFF4
 18883                           prodl	equ	0xFF3
 18884                           intcon	equ	0xFF2
 18885                           indf0	equ	0xFEF
 18886                           postinc0	equ	0xFEE
 18887                           fsr0h	equ	0xFEA
 18888                           fsr0l	equ	0xFE9
 18889                           wreg	equ	0xFE8
 18890                           indf1	equ	0xFE7
 18891                           postdec1	equ	0xFE5
 18892                           fsr1h	equ	0xFE2
 18893                           fsr1l	equ	0xFE1
 18894                           indf2	equ	0xFDF
 18895                           postinc2	equ	0xFDE
 18896                           postdec2	equ	0xFDD
 18897                           plusw2	equ	0xFDB
 18898                           fsr2h	equ	0xFDA
 18899                           fsr2l	equ	0xFD9
 18900                           status	equ	0xFD8
 18901                           
 18902 ;; *************** function _Console_FormFeed *****************
 18903 ;; Defined at:
 18904 ;;		line 192 in file "Library/Console.c"
 18905 ;; Parameters:    Size  Location     Type
 18906 ;;		None
 18907 ;; Auto vars:     Size  Location     Type
 18908 ;;  y               1    3[BANK0 ] unsigned char 
 18909 ;;  x               1    2[BANK0 ] unsigned char 
 18910 ;; Return value:  Size  Location     Type
 18911 ;;                  1    wreg      void 
 18912 ;; Registers used:
 18913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18914 ;; Tracked objects:
 18915 ;;		On entry : 0/0
 18916 ;;		On exit  : 0/0
 18917 ;;		Unchanged: 0/0
 18918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18921 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18922 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18923 ;;Total ram usage:        4 bytes
 18924 ;; Hardware stack levels used:    1
 18925 ;; Hardware stack levels required when called:    7
 18926 ;; This function calls:
 18927 ;;		Nothing
 18928 ;; This function is called by:
 18929 ;;		_Console_IncrementCursor
 18930 ;;		_Console_PrintChar
 18931 ;; This function uses a non-reentrant model
 18932 ;;
 18933                           
 18934                           	psect	text101
 18935  014DC0                     __ptext101:
 18936                           	opt stack 0
 18937  014DC0                     _Console_FormFeed:
 18938                           	opt stack 18
 18939                           
 18940                           ;Console.c: 195: lBufferX = 0;
 18941                           
 18942                           ; BSR set to: 0
 18943                           ;incstack = 0
 18944  014DC0  0E00               	movlw	0
 18945  014DC2  0100               	movlb	0	; () banked
 18946  014DC4  6FF5               	movwf	_lBufferX& (0+255),b
 18947                           
 18948                           ;Console.c: 196: lBufferY = 0;
 18949  014DC6  0E00               	movlw	0
 18950  014DC8  6FF4               	movwf	_lBufferY& (0+255),b
 18951                           
 18952                           ;Console.c: 197: UINT8 x, y;
 18953                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 18954  014DCA  0E00               	movlw	0
 18955  014DCC  6F63               	movwf	Console_FormFeed@y& (0+255),b
 18956  014DCE                     l12469:
 18957                           
 18958                           ; BSR set to: 0
 18959  014DCE  0E0E               	movlw	14
 18960  014DD0  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 18961  014DD2  D001               	goto	l990
 18962  014DD4  D020               	goto	u9730
 18963  014DD6                     l990:
 18964                           
 18965                           ; BSR set to: 0
 18966                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 18967                           
 18968                           ; BSR set to: 0
 18969  014DD6  0E00               	movlw	0
 18970  014DD8  6F62               	movwf	Console_FormFeed@x& (0+255),b
 18971  014DDA                     l12475:
 18972                           
 18973                           ; BSR set to: 0
 18974  014DDA  0E13               	movlw	19
 18975  014DDC  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 18976  014DDE  D001               	goto	l992
 18977  014DE0  D018               	goto	u9720
 18978  014DE2                     l992:
 18979                           
 18980                           ; BSR set to: 0
 18981                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 18982                           
 18983                           ; BSR set to: 0
 18984  014DE2  0E01               	movlw	1
 18985  014DE4  6E4E               	movwf	_change,c
 18986                           
 18987                           ; BSR set to: 0
 18988  014DE6  5163               	movf	Console_FormFeed@y& (0+255),w,b
 18989  014DE8  0D14               	mullw	20
 18990  014DEA  0E18               	movlw	low _lBuffer
 18991  014DEC  6F60               	movwf	??_Console_FormFeed& (0+255),b
 18992  014DEE  0E03               	movlw	high _lBuffer
 18993  014DF0  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 18994  014DF2  50F3               	movf	prodl,w,c
 18995  014DF4  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 18996  014DF6  50F4               	movf	prodh,w,c
 18997  014DF8  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 18998  014DFA  5162               	movf	Console_FormFeed@x& (0+255),w,b
 18999  014DFC  0D01               	mullw	1
 19000  014DFE  50F3               	movf	prodl,w,c
 19001  014E00  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 19002  014E02  6ED9               	movwf	fsr2l,c
 19003  014E04  50F4               	movf	prodh,w,c
 19004  014E06  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 19005  014E08  6EDA               	movwf	fsr2h,c
 19006  014E0A  0E80               	movlw	128
 19007  014E0C  6EDF               	movwf	indf2,c
 19008                           
 19009                           ; BSR set to: 0
 19010  014E0E  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 19011  014E10  D7E4               	goto	l12475
 19012  014E12                     u9720:
 19013                           
 19014                           ; BSR set to: 0
 19015                           
 19016                           ; BSR set to: 0
 19017  014E12  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 19018  014E14  D7DC               	goto	l12469
 19019  014E16                     u9730:
 19020                           
 19021                           ; BSR set to: 0
 19022                           ;Console.c: 204: clearall = 1;
 19023                           
 19024                           ; BSR set to: 0
 19025  014E16  0E01               	movlw	1
 19026  014E18  6E44               	movwf	_clearall,c
 19027                           
 19028                           ;Console.c: 205: gCursor.x = 6;
 19029  014E1A  0E00               	movlw	0
 19030  014E1C  6E46               	movwf	_gCursor+1,c
 19031  014E1E  0E06               	movlw	6
 19032  014E20  6E45               	movwf	_gCursor,c
 19033                           
 19034                           ;Console.c: 206: gCursor.y = 6;
 19035  014E22  0E00               	movlw	0
 19036  014E24  6E48               	movwf	_gCursor+3,c
 19037  014E26  0E06               	movlw	6
 19038  014E28  6E47               	movwf	_gCursor+2,c
 19039                           
 19040                           ; BSR set to: 0
 19041  014E2A  0012               	return		;funcret
 19042  014E2C                     __end_of_Console_FormFeed:
 19043                           	opt stack 0
 19044                           tosu	equ	0xFFF
 19045                           tosh	equ	0xFFE
 19046                           tosl	equ	0xFFD
 19047                           pclath	equ	0xFFA
 19048                           tblptru	equ	0xFF8
 19049                           tblptrh	equ	0xFF7
 19050                           tblptrl	equ	0xFF6
 19051                           tablat	equ	0xFF5
 19052                           prodh	equ	0xFF4
 19053                           prodl	equ	0xFF3
 19054                           intcon	equ	0xFF2
 19055                           indf0	equ	0xFEF
 19056                           postinc0	equ	0xFEE
 19057                           fsr0h	equ	0xFEA
 19058                           fsr0l	equ	0xFE9
 19059                           wreg	equ	0xFE8
 19060                           indf1	equ	0xFE7
 19061                           postdec1	equ	0xFE5
 19062                           fsr1h	equ	0xFE2
 19063                           fsr1l	equ	0xFE1
 19064                           indf2	equ	0xFDF
 19065                           postinc2	equ	0xFDE
 19066                           postdec2	equ	0xFDD
 19067                           plusw2	equ	0xFDB
 19068                           fsr2h	equ	0xFDA
 19069                           fsr2l	equ	0xFD9
 19070                           status	equ	0xFD8
 19071                           
 19072 ;; *************** function _Console_ResetCursor *****************
 19073 ;; Defined at:
 19074 ;;		line 297 in file "Library/Console.c"
 19075 ;; Parameters:    Size  Location     Type
 19076 ;;		None
 19077 ;; Auto vars:     Size  Location     Type
 19078 ;;		None
 19079 ;; Return value:  Size  Location     Type
 19080 ;;                  1    wreg      void 
 19081 ;; Registers used:
 19082 ;;		wreg, status,2
 19083 ;; Tracked objects:
 19084 ;;		On entry : 0/0
 19085 ;;		On exit  : 0/0
 19086 ;;		Unchanged: 0/0
 19087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19092 ;;Total ram usage:        0 bytes
 19093 ;; Hardware stack levels used:    1
 19094 ;; Hardware stack levels required when called:    7
 19095 ;; This function calls:
 19096 ;;		Nothing
 19097 ;; This function is called by:
 19098 ;;		_Console_PrintChar
 19099 ;; This function uses a non-reentrant model
 19100 ;;
 19101                           
 19102                           	psect	text102
 19103  015E94                     __ptext102:
 19104                           	opt stack 0
 19105  015E94                     _Console_ResetCursor:
 19106                           	opt stack 20
 19107                           
 19108                           ;Console.c: 299: gCursor.x = 6;
 19109                           
 19110                           ; BSR set to: 0
 19111                           ;incstack = 0
 19112  015E94  0E00               	movlw	0
 19113  015E96  6E46               	movwf	_gCursor+1,c
 19114  015E98  0E06               	movlw	6
 19115  015E9A  6E45               	movwf	_gCursor,c
 19116                           
 19117                           ;Console.c: 300: gCursor.y = 6;
 19118  015E9C  0E00               	movlw	0
 19119  015E9E  6E48               	movwf	_gCursor+3,c
 19120  015EA0  0E06               	movlw	6
 19121  015EA2  6E47               	movwf	_gCursor+2,c
 19122                           
 19123                           ;Console.c: 303: lBufferX = 0;
 19124  015EA4  0E00               	movlw	0
 19125  015EA6  0100               	movlb	0	; () banked
 19126  015EA8  6FF5               	movwf	_lBufferX& (0+255),b
 19127                           
 19128                           ;Console.c: 304: lBufferY = 0;
 19129  015EAA  0E00               	movlw	0
 19130  015EAC  6FF4               	movwf	_lBufferY& (0+255),b
 19131                           
 19132                           ; BSR set to: 0
 19133  015EAE  0012               	return		;funcret
 19134  015EB0                     __end_of_Console_ResetCursor:
 19135                           	opt stack 0
 19136                           tosu	equ	0xFFF
 19137                           tosh	equ	0xFFE
 19138                           tosl	equ	0xFFD
 19139                           pclath	equ	0xFFA
 19140                           tblptru	equ	0xFF8
 19141                           tblptrh	equ	0xFF7
 19142                           tblptrl	equ	0xFF6
 19143                           tablat	equ	0xFF5
 19144                           prodh	equ	0xFF4
 19145                           prodl	equ	0xFF3
 19146                           intcon	equ	0xFF2
 19147                           indf0	equ	0xFEF
 19148                           postinc0	equ	0xFEE
 19149                           fsr0h	equ	0xFEA
 19150                           fsr0l	equ	0xFE9
 19151                           wreg	equ	0xFE8
 19152                           indf1	equ	0xFE7
 19153                           postdec1	equ	0xFE5
 19154                           fsr1h	equ	0xFE2
 19155                           fsr1l	equ	0xFE1
 19156                           indf2	equ	0xFDF
 19157                           postinc2	equ	0xFDE
 19158                           postdec2	equ	0xFDD
 19159                           plusw2	equ	0xFDB
 19160                           fsr2h	equ	0xFDA
 19161                           fsr2l	equ	0xFD9
 19162                           status	equ	0xFD8
 19163                           
 19164 ;; *************** function _Console_Backspace *****************
 19165 ;; Defined at:
 19166 ;;		line 209 in file "Library/Console.c"
 19167 ;; Parameters:    Size  Location     Type
 19168 ;;		None
 19169 ;; Auto vars:     Size  Location     Type
 19170 ;;		None
 19171 ;; Return value:  Size  Location     Type
 19172 ;;                  1    wreg      void 
 19173 ;; Registers used:
 19174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19175 ;; Tracked objects:
 19176 ;;		On entry : 0/0
 19177 ;;		On exit  : 0/0
 19178 ;;		Unchanged: 0/0
 19179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19184 ;;Total ram usage:        0 bytes
 19185 ;; Hardware stack levels used:    1
 19186 ;; Hardware stack levels required when called:    8
 19187 ;; This function calls:
 19188 ;;		_Console_ClearCursor
 19189 ;; This function is called by:
 19190 ;;		_Console_PrintChar
 19191 ;; This function uses a non-reentrant model
 19192 ;;
 19193                           
 19194                           	psect	text103
 19195  01551A                     __ptext103:
 19196                           	opt stack 0
 19197  01551A                     _Console_Backspace:
 19198                           	opt stack 19
 19199                           
 19200                           ;Console.c: 211: if (lBufferX > 0)
 19201                           
 19202                           ; BSR set to: 0
 19203                           ;incstack = 0
 19204  01551A  0100               	movlb	0	; () banked
 19205  01551C  51F5               	movf	_lBufferX& (0+255),w,b
 19206  01551E  B4D8               	btfsc	status,2,c
 19207  015520  D006               	goto	l997
 19208                           
 19209                           ; BSR set to: 0
 19210                           ;Console.c: 212: {
 19211                           ;Console.c: 213: gCursor.x -= 6;
 19212  015522  0EFA               	movlw	250
 19213  015524  2645               	addwf	_gCursor,f,c
 19214  015526  0EFF               	movlw	255
 19215  015528  2246               	addwfc	_gCursor+1,f,c
 19216                           
 19217                           ; BSR set to: 0
 19218                           ;Console.c: 216: lBufferX --;
 19219  01552A  07F5               	decf	_lBufferX& (0+255),f,b
 19220                           
 19221                           ;Console.c: 218: }
 19222  01552C  D01B               	goto	l1000
 19223  01552E                     l997:
 19224                           
 19225                           ; BSR set to: 0
 19226                           ;Console.c: 219: else if (lBufferY > 0)
 19227                           
 19228                           ; BSR set to: 0
 19229  01552E  51F4               	movf	_lBufferY& (0+255),w,b
 19230  015530  B4D8               	btfsc	status,2,c
 19231  015532  D00C               	goto	l999
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;Console.c: 220: {
 19235                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 19236  015534  0E00               	movlw	0
 19237  015536  6E46               	movwf	_gCursor+1,c
 19238  015538  0E72               	movlw	114
 19239  01553A  6E45               	movwf	_gCursor,c
 19240                           
 19241                           ; BSR set to: 0
 19242                           ;Console.c: 222: gCursor.y -= 8;
 19243  01553C  0EF8               	movlw	248
 19244  01553E  2647               	addwf	_gCursor+2,f,c
 19245  015540  0EFF               	movlw	255
 19246  015542  2248               	addwfc	_gCursor+3,f,c
 19247                           
 19248                           ; BSR set to: 0
 19249                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 19250  015544  0E13               	movlw	19
 19251  015546  6FF5               	movwf	_lBufferX& (0+255),b
 19252                           
 19253                           ; BSR set to: 0
 19254                           ;Console.c: 226: lBufferY --;
 19255  015548  07F4               	decf	_lBufferY& (0+255),f,b
 19256                           
 19257                           ;Console.c: 228: }
 19258  01554A  D00C               	goto	l1000
 19259  01554C                     l999:
 19260                           
 19261                           ; BSR set to: 0
 19262                           ;Console.c: 229: else
 19263                           ;Console.c: 230: {
 19264                           ;Console.c: 231: gCursor.x = 6;
 19265                           
 19266                           ; BSR set to: 0
 19267  01554C  0E00               	movlw	0
 19268  01554E  6E46               	movwf	_gCursor+1,c
 19269  015550  0E06               	movlw	6
 19270  015552  6E45               	movwf	_gCursor,c
 19271                           
 19272                           ;Console.c: 232: gCursor.y = 6;
 19273  015554  0E00               	movlw	0
 19274  015556  6E48               	movwf	_gCursor+3,c
 19275  015558  0E06               	movlw	6
 19276  01555A  6E47               	movwf	_gCursor+2,c
 19277                           
 19278                           ;Console.c: 235: lBufferX = 0;
 19279  01555C  0E00               	movlw	0
 19280  01555E  6FF5               	movwf	_lBufferX& (0+255),b
 19281                           
 19282                           ;Console.c: 236: lBufferY = 0;
 19283  015560  0E00               	movlw	0
 19284  015562  6FF4               	movwf	_lBufferY& (0+255),b
 19285  015564                     l1000:
 19286                           
 19287                           ; BSR set to: 0
 19288                           ;Console.c: 238: }
 19289                           ;Console.c: 240: Console_ClearCursor();
 19290                           
 19291                           ; BSR set to: 0
 19292                           
 19293                           ; BSR set to: 0
 19294  015564  EC02  F0AE         	call	_Console_ClearCursor	;wreg free
 19295  015568  0012               	return		;funcret
 19296  01556A                     __end_of_Console_Backspace:
 19297                           	opt stack 0
 19298                           tosu	equ	0xFFF
 19299                           tosh	equ	0xFFE
 19300                           tosl	equ	0xFFD
 19301                           pclath	equ	0xFFA
 19302                           tblptru	equ	0xFF8
 19303                           tblptrh	equ	0xFF7
 19304                           tblptrl	equ	0xFF6
 19305                           tablat	equ	0xFF5
 19306                           prodh	equ	0xFF4
 19307                           prodl	equ	0xFF3
 19308                           intcon	equ	0xFF2
 19309                           indf0	equ	0xFEF
 19310                           postinc0	equ	0xFEE
 19311                           fsr0h	equ	0xFEA
 19312                           fsr0l	equ	0xFE9
 19313                           wreg	equ	0xFE8
 19314                           indf1	equ	0xFE7
 19315                           postdec1	equ	0xFE5
 19316                           fsr1h	equ	0xFE2
 19317                           fsr1l	equ	0xFE1
 19318                           indf2	equ	0xFDF
 19319                           postinc2	equ	0xFDE
 19320                           postdec2	equ	0xFDD
 19321                           plusw2	equ	0xFDB
 19322                           fsr2h	equ	0xFDA
 19323                           fsr2l	equ	0xFD9
 19324                           status	equ	0xFD8
 19325                           
 19326 ;; *************** function _Console_ClearCursor *****************
 19327 ;; Defined at:
 19328 ;;		line 308 in file "Library/Console.c"
 19329 ;; Parameters:    Size  Location     Type
 19330 ;;		None
 19331 ;; Auto vars:     Size  Location     Type
 19332 ;;		None
 19333 ;; Return value:  Size  Location     Type
 19334 ;;                  1    wreg      void 
 19335 ;; Registers used:
 19336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19337 ;; Tracked objects:
 19338 ;;		On entry : 0/0
 19339 ;;		On exit  : 0/0
 19340 ;;		Unchanged: 0/0
 19341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19345 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19346 ;;Total ram usage:        2 bytes
 19347 ;; Hardware stack levels used:    1
 19348 ;; Hardware stack levels required when called:    7
 19349 ;; This function calls:
 19350 ;;		Nothing
 19351 ;; This function is called by:
 19352 ;;		_Console_Backspace
 19353 ;;		_Console_Tab
 19354 ;; This function uses a non-reentrant model
 19355 ;;
 19356                           
 19357                           	psect	text104
 19358  015C04                     __ptext104:
 19359                           	opt stack 0
 19360  015C04                     _Console_ClearCursor:
 19361                           	opt stack 19
 19362                           
 19363                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 19364                           
 19365                           ;incstack = 0
 19366  015C04  0E01               	movlw	1
 19367  015C06  6E4E               	movwf	_change,c
 19368  015C08  0100               	movlb	0	; () banked
 19369  015C0A  51F4               	movf	_lBufferY& (0+255),w,b
 19370  015C0C  0D14               	mullw	20
 19371  015C0E  0E18               	movlw	low _lBuffer
 19372  015C10  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 19373  015C12  0E03               	movlw	high _lBuffer
 19374  015C14  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 19375  015C16  50F3               	movf	prodl,w,c
 19376  015C18  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 19377  015C1A  50F4               	movf	prodh,w,c
 19378  015C1C  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 19379  015C1E  51F5               	movf	_lBufferX& (0+255),w,b
 19380  015C20  0D01               	mullw	1
 19381  015C22  50F3               	movf	prodl,w,c
 19382  015C24  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 19383  015C26  6ED9               	movwf	fsr2l,c
 19384  015C28  50F4               	movf	prodh,w,c
 19385  015C2A  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 19386  015C2C  6EDA               	movwf	fsr2h,c
 19387  015C2E  0E80               	movlw	128
 19388  015C30  6EDF               	movwf	indf2,c
 19389                           
 19390                           ; BSR set to: 0
 19391  015C32  0012               	return		;funcret
 19392  015C34                     __end_of_Console_ClearCursor:
 19393                           	opt stack 0
 19394                           tosu	equ	0xFFF
 19395                           tosh	equ	0xFFE
 19396                           tosl	equ	0xFFD
 19397                           pclath	equ	0xFFA
 19398                           tblptru	equ	0xFF8
 19399                           tblptrh	equ	0xFF7
 19400                           tblptrl	equ	0xFF6
 19401                           tablat	equ	0xFF5
 19402                           prodh	equ	0xFF4
 19403                           prodl	equ	0xFF3
 19404                           intcon	equ	0xFF2
 19405                           indf0	equ	0xFEF
 19406                           postinc0	equ	0xFEE
 19407                           fsr0h	equ	0xFEA
 19408                           fsr0l	equ	0xFE9
 19409                           wreg	equ	0xFE8
 19410                           indf1	equ	0xFE7
 19411                           postdec1	equ	0xFE5
 19412                           fsr1h	equ	0xFE2
 19413                           fsr1l	equ	0xFE1
 19414                           indf2	equ	0xFDF
 19415                           postinc2	equ	0xFDE
 19416                           postdec2	equ	0xFDD
 19417                           plusw2	equ	0xFDB
 19418                           fsr2h	equ	0xFDA
 19419                           fsr2l	equ	0xFD9
 19420                           status	equ	0xFD8
 19421                           
 19422 ;; *************** function _SteppingCCW *****************
 19423 ;; Defined at:
 19424 ;;		line 277 in file "main.c"
 19425 ;; Parameters:    Size  Location     Type
 19426 ;;		None
 19427 ;; Auto vars:     Size  Location     Type
 19428 ;;		None
 19429 ;; Return value:  Size  Location     Type
 19430 ;;                  2  2202[None  ] int 
 19431 ;; Registers used:
 19432 ;;		wreg, status,2, status,0, cstack
 19433 ;; Tracked objects:
 19434 ;;		On entry : 0/0
 19435 ;;		On exit  : 0/0
 19436 ;;		Unchanged: 0/0
 19437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19442 ;;Total ram usage:        0 bytes
 19443 ;; Hardware stack levels used:    1
 19444 ;; Hardware stack levels required when called:    8
 19445 ;; This function calls:
 19446 ;;		_STP1
 19447 ;;		_STP2
 19448 ;;		_STP3
 19449 ;;		_STP4
 19450 ;;		_delay_ms
 19451 ;; This function is called by:
 19452 ;;		_Sensor_Observe2
 19453 ;;		_Closest_Object
 19454 ;; This function uses a non-reentrant model
 19455 ;;
 19456                           
 19457                           	psect	text105
 19458  01564C                     __ptext105:
 19459                           	opt stack 0
 19460  01564C                     _SteppingCCW:
 19461                           	opt stack 21
 19462                           
 19463                           ;main.c: 278: STP4();
 19464                           
 19465                           ; BSR set to: 0
 19466                           ;incstack = 0
 19467  01564C  EC25  F0B0         	call	_STP4	;wreg free
 19468                           
 19469                           ;main.c: 279: delay_ms(2);
 19470  015650  0E00               	movlw	0
 19471  015652  0100               	movlb	0	; () banked
 19472  015654  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19473  015656  0E02               	movlw	2
 19474  015658  6F60               	movwf	delay_ms@ms& (0+255),b
 19475  01565A  EC14  F0A9         	call	_delay_ms	;wreg free
 19476                           
 19477                           ;main.c: 280: STP3();
 19478  01565E  EC2F  F0B0         	call	_STP3	;wreg free
 19479                           
 19480                           ;main.c: 281: delay_ms(2);
 19481  015662  0E00               	movlw	0
 19482  015664  0100               	movlb	0	; () banked
 19483  015666  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19484  015668  0E02               	movlw	2
 19485  01566A  6F60               	movwf	delay_ms@ms& (0+255),b
 19486  01566C  EC14  F0A9         	call	_delay_ms	;wreg free
 19487                           
 19488                           ;main.c: 282: STP2();
 19489  015670  EC39  F0B0         	call	_STP2	;wreg free
 19490                           
 19491                           ;main.c: 283: delay_ms(2);
 19492  015674  0E00               	movlw	0
 19493  015676  0100               	movlb	0	; () banked
 19494  015678  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19495  01567A  0E02               	movlw	2
 19496  01567C  6F60               	movwf	delay_ms@ms& (0+255),b
 19497  01567E  EC14  F0A9         	call	_delay_ms	;wreg free
 19498                           
 19499                           ;main.c: 284: STP1();
 19500  015682  EC43  F0B0         	call	_STP1	;wreg free
 19501                           
 19502                           ;main.c: 285: delay_ms(2);
 19503  015686  0E00               	movlw	0
 19504  015688  0100               	movlb	0	; () banked
 19505  01568A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19506  01568C  0E02               	movlw	2
 19507  01568E  6F60               	movwf	delay_ms@ms& (0+255),b
 19508  015690  EC14  F0A9         	call	_delay_ms	;wreg free
 19509  015694  0012               	return		;funcret
 19510  015696                     __end_of_SteppingCCW:
 19511                           	opt stack 0
 19512                           tosu	equ	0xFFF
 19513                           tosh	equ	0xFFE
 19514                           tosl	equ	0xFFD
 19515                           pclath	equ	0xFFA
 19516                           tblptru	equ	0xFF8
 19517                           tblptrh	equ	0xFF7
 19518                           tblptrl	equ	0xFF6
 19519                           tablat	equ	0xFF5
 19520                           prodh	equ	0xFF4
 19521                           prodl	equ	0xFF3
 19522                           intcon	equ	0xFF2
 19523                           indf0	equ	0xFEF
 19524                           postinc0	equ	0xFEE
 19525                           fsr0h	equ	0xFEA
 19526                           fsr0l	equ	0xFE9
 19527                           wreg	equ	0xFE8
 19528                           indf1	equ	0xFE7
 19529                           postdec1	equ	0xFE5
 19530                           fsr1h	equ	0xFE2
 19531                           fsr1l	equ	0xFE1
 19532                           indf2	equ	0xFDF
 19533                           postinc2	equ	0xFDE
 19534                           postdec2	equ	0xFDD
 19535                           plusw2	equ	0xFDB
 19536                           fsr2h	equ	0xFDA
 19537                           fsr2l	equ	0xFD9
 19538                           status	equ	0xFD8
 19539                           
 19540 ;; *************** function _delay_ms *****************
 19541 ;; Defined at:
 19542 ;;		line 240 in file "Library/Types.c"
 19543 ;; Parameters:    Size  Location     Type
 19544 ;;  ms              2    0[BANK0 ] unsigned short 
 19545 ;; Auto vars:     Size  Location     Type
 19546 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19547 ;; Return value:  Size  Location     Type
 19548 ;;                  1    wreg      void 
 19549 ;; Registers used:
 19550 ;;		wreg, status,2, status,0
 19551 ;; Tracked objects:
 19552 ;;		On entry : 0/0
 19553 ;;		On exit  : 0/0
 19554 ;;		Unchanged: 0/0
 19555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19556 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19557 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19559 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19560 ;;Total ram usage:        6 bytes
 19561 ;; Hardware stack levels used:    1
 19562 ;; Hardware stack levels required when called:    7
 19563 ;; This function calls:
 19564 ;;		Nothing
 19565 ;; This function is called by:
 19566 ;;		_LCD_Reset
 19567 ;;		_LCD_Init
 19568 ;;		_MXK_Init
 19569 ;;		_UpdateDistance
 19570 ;;		_SteppingCCW
 19571 ;;		_SteppingCW
 19572 ;;		_Turn
 19573 ;;		_main
 19574 ;; This function uses a non-reentrant model
 19575 ;;
 19576                           
 19577                           	psect	text106
 19578  015228                     __ptext106:
 19579                           	opt stack 0
 19580  015228                     _delay_ms:
 19581                           	opt stack 23
 19582                           
 19583                           ;Types.c: 242: volatile unsigned long u;
 19584                           ;Types.c: 243: while (ms--)
 19585                           
 19586                           ;incstack = 0
 19587  015228  D01B               	goto	u11290
 19588  01522A                     l13809:
 19589                           
 19590                           ;Types.c: 244: {
 19591                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19592  01522A  0E00               	movlw	0
 19593  01522C  0100               	movlb	0	; () banked
 19594  01522E  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19595  015230  0E00               	movlw	0
 19596  015232  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19597  015234  0E00               	movlw	0
 19598  015236  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19599  015238  0E00               	movlw	0
 19600  01523A  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19601  01523C                     l13811:
 19602                           
 19603                           ; BSR set to: 0
 19604  01523C  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19605  01523E  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19606  015240  E10F               	bnz	l13817
 19607  015242  0EB0               	movlw	176
 19608  015244  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19609  015246  0E04               	movlw	4
 19610  015248  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19611  01524A  B0D8               	btfsc	status,0,c
 19612  01524C  D009               	goto	u11290
 19613                           
 19614                           ; BSR set to: 0
 19615                           
 19616                           ; BSR set to: 0
 19617  01524E  F000               	nop		; ;# 
 19618  015250  0E01               	movlw	1
 19619  015252  0100               	movlb	0	; () banked
 19620  015254  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19621  015256  0E00               	movlw	0
 19622  015258  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19623  01525A  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19624  01525C  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19625  01525E  D7EE               	goto	l13811
 19626  015260                     u11290:
 19627  015260                     l13817:
 19628  015260  0100               	movlb	0	; () banked
 19629  015262  0760               	decf	delay_ms@ms& (0+255),f,b
 19630  015264  A0D8               	btfss	status,0,c
 19631  015266  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 19632  015268  2960               	incf	delay_ms@ms& (0+255),w,b
 19633  01526A  E1DF               	bnz	l13809
 19634  01526C  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 19635  01526E  A4D8               	btfss	status,2,c
 19636  015270  D7DC               	goto	l824
 19637                           
 19638                           ; BSR set to: 0
 19639                           ;Types.c: 251: }
 19640                           ;Types.c: 252: }
 19641                           ;Types.c: 253: u = 0x8008;
 19642                           
 19643                           ; BSR set to: 0
 19644  015272  0E08               	movlw	8
 19645  015274  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19646  015276  0E80               	movlw	128
 19647  015278  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19648  01527A  0E00               	movlw	0
 19649  01527C  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19650  01527E  0E00               	movlw	0
 19651  015280  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19652                           
 19653                           ; BSR set to: 0
 19654  015282  0012               	return		;funcret
 19655  015284                     __end_of_delay_ms:
 19656                           	opt stack 0
 19657                           tosu	equ	0xFFF
 19658                           tosh	equ	0xFFE
 19659                           tosl	equ	0xFFD
 19660                           pclath	equ	0xFFA
 19661                           tblptru	equ	0xFF8
 19662                           tblptrh	equ	0xFF7
 19663                           tblptrl	equ	0xFF6
 19664                           tablat	equ	0xFF5
 19665                           prodh	equ	0xFF4
 19666                           prodl	equ	0xFF3
 19667                           intcon	equ	0xFF2
 19668                           indf0	equ	0xFEF
 19669                           postinc0	equ	0xFEE
 19670                           fsr0h	equ	0xFEA
 19671                           fsr0l	equ	0xFE9
 19672                           wreg	equ	0xFE8
 19673                           indf1	equ	0xFE7
 19674                           postdec1	equ	0xFE5
 19675                           fsr1h	equ	0xFE2
 19676                           fsr1l	equ	0xFE1
 19677                           indf2	equ	0xFDF
 19678                           postinc2	equ	0xFDE
 19679                           postdec2	equ	0xFDD
 19680                           plusw2	equ	0xFDB
 19681                           fsr2h	equ	0xFDA
 19682                           fsr2l	equ	0xFD9
 19683                           status	equ	0xFD8
 19684                           
 19685 ;; *************** function _STP4 *****************
 19686 ;; Defined at:
 19687 ;;		line 337 in file "main.c"
 19688 ;; Parameters:    Size  Location     Type
 19689 ;;		None
 19690 ;; Auto vars:     Size  Location     Type
 19691 ;;		None
 19692 ;; Return value:  Size  Location     Type
 19693 ;;                  2  1994[None  ] int 
 19694 ;; Registers used:
 19695 ;;		None
 19696 ;; Tracked objects:
 19697 ;;		On entry : 0/0
 19698 ;;		On exit  : 0/0
 19699 ;;		Unchanged: 0/0
 19700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19705 ;;Total ram usage:        0 bytes
 19706 ;; Hardware stack levels used:    1
 19707 ;; Hardware stack levels required when called:    7
 19708 ;; This function calls:
 19709 ;;		Nothing
 19710 ;; This function is called by:
 19711 ;;		_SteppingCCW
 19712 ;;		_SteppingCW
 19713 ;; This function uses a non-reentrant model
 19714 ;;
 19715                           
 19716                           	psect	text107
 19717  01604A                     __ptext107:
 19718                           	opt stack 0
 19719  01604A                     _STP4:
 19720                           	opt stack 21
 19721                           
 19722                           ;main.c: 338: TRISA2=0;
 19723                           
 19724                           ; BSR set to: 0
 19725                           ;incstack = 0
 19726  01604A  9492               	bcf	3986,2,c	;volatile
 19727                           
 19728                           ;main.c: 339: TRISA3=0;
 19729  01604C  9692               	bcf	3986,3,c	;volatile
 19730                           
 19731                           ;main.c: 340: TRISD5=0;
 19732  01604E  9A95               	bcf	3989,5,c	;volatile
 19733                           
 19734                           ;main.c: 341: TRISD7=0;
 19735  016050  9E95               	bcf	3989,7,c	;volatile
 19736                           
 19737                           ;main.c: 342: RD5=0;
 19738  016052  9A83               	bcf	3971,5,c	;volatile
 19739                           
 19740                           ;main.c: 343: RD7=0;
 19741  016054  9E83               	bcf	3971,7,c	;volatile
 19742                           
 19743                           ;main.c: 344: RA2=0;
 19744  016056  9480               	bcf	3968,2,c	;volatile
 19745                           
 19746                           ;main.c: 345: RA3=0;
 19747  016058  9680               	bcf	3968,3,c	;volatile
 19748                           
 19749                           ;main.c: 346: RD7 = 1;
 19750  01605A  8E83               	bsf	3971,7,c	;volatile
 19751  01605C  0012               	return		;funcret
 19752  01605E                     __end_of_STP4:
 19753                           	opt stack 0
 19754                           tosu	equ	0xFFF
 19755                           tosh	equ	0xFFE
 19756                           tosl	equ	0xFFD
 19757                           pclath	equ	0xFFA
 19758                           tblptru	equ	0xFF8
 19759                           tblptrh	equ	0xFF7
 19760                           tblptrl	equ	0xFF6
 19761                           tablat	equ	0xFF5
 19762                           prodh	equ	0xFF4
 19763                           prodl	equ	0xFF3
 19764                           intcon	equ	0xFF2
 19765                           indf0	equ	0xFEF
 19766                           postinc0	equ	0xFEE
 19767                           fsr0h	equ	0xFEA
 19768                           fsr0l	equ	0xFE9
 19769                           wreg	equ	0xFE8
 19770                           indf1	equ	0xFE7
 19771                           postdec1	equ	0xFE5
 19772                           fsr1h	equ	0xFE2
 19773                           fsr1l	equ	0xFE1
 19774                           indf2	equ	0xFDF
 19775                           postinc2	equ	0xFDE
 19776                           postdec2	equ	0xFDD
 19777                           plusw2	equ	0xFDB
 19778                           fsr2h	equ	0xFDA
 19779                           fsr2l	equ	0xFD9
 19780                           status	equ	0xFD8
 19781                           
 19782 ;; *************** function _STP3 *****************
 19783 ;; Defined at:
 19784 ;;		line 326 in file "main.c"
 19785 ;; Parameters:    Size  Location     Type
 19786 ;;		None
 19787 ;; Auto vars:     Size  Location     Type
 19788 ;;		None
 19789 ;; Return value:  Size  Location     Type
 19790 ;;                  2  1996[None  ] int 
 19791 ;; Registers used:
 19792 ;;		None
 19793 ;; Tracked objects:
 19794 ;;		On entry : 0/0
 19795 ;;		On exit  : 0/0
 19796 ;;		Unchanged: 0/0
 19797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19802 ;;Total ram usage:        0 bytes
 19803 ;; Hardware stack levels used:    1
 19804 ;; Hardware stack levels required when called:    7
 19805 ;; This function calls:
 19806 ;;		Nothing
 19807 ;; This function is called by:
 19808 ;;		_SteppingCCW
 19809 ;;		_SteppingCW
 19810 ;; This function uses a non-reentrant model
 19811 ;;
 19812                           
 19813                           	psect	text108
 19814  01605E                     __ptext108:
 19815                           	opt stack 0
 19816  01605E                     _STP3:
 19817                           	opt stack 21
 19818                           
 19819                           ;main.c: 327: TRISA2=0;
 19820                           
 19821                           ;incstack = 0
 19822  01605E  9492               	bcf	3986,2,c	;volatile
 19823                           
 19824                           ;main.c: 328: TRISA3=0;
 19825  016060  9692               	bcf	3986,3,c	;volatile
 19826                           
 19827                           ;main.c: 329: TRISD5=0;
 19828  016062  9A95               	bcf	3989,5,c	;volatile
 19829                           
 19830                           ;main.c: 330: TRISD7=0;
 19831  016064  9E95               	bcf	3989,7,c	;volatile
 19832                           
 19833                           ;main.c: 331: RD5=0;
 19834  016066  9A83               	bcf	3971,5,c	;volatile
 19835                           
 19836                           ;main.c: 332: RD7=0;
 19837  016068  9E83               	bcf	3971,7,c	;volatile
 19838                           
 19839                           ;main.c: 333: RA2=0;
 19840  01606A  9480               	bcf	3968,2,c	;volatile
 19841                           
 19842                           ;main.c: 334: RA3=0;
 19843  01606C  9680               	bcf	3968,3,c	;volatile
 19844                           
 19845                           ;main.c: 335: RD5 = 1;
 19846  01606E  8A83               	bsf	3971,5,c	;volatile
 19847  016070  0012               	return		;funcret
 19848  016072                     __end_of_STP3:
 19849                           	opt stack 0
 19850                           tosu	equ	0xFFF
 19851                           tosh	equ	0xFFE
 19852                           tosl	equ	0xFFD
 19853                           pclath	equ	0xFFA
 19854                           tblptru	equ	0xFF8
 19855                           tblptrh	equ	0xFF7
 19856                           tblptrl	equ	0xFF6
 19857                           tablat	equ	0xFF5
 19858                           prodh	equ	0xFF4
 19859                           prodl	equ	0xFF3
 19860                           intcon	equ	0xFF2
 19861                           indf0	equ	0xFEF
 19862                           postinc0	equ	0xFEE
 19863                           fsr0h	equ	0xFEA
 19864                           fsr0l	equ	0xFE9
 19865                           wreg	equ	0xFE8
 19866                           indf1	equ	0xFE7
 19867                           postdec1	equ	0xFE5
 19868                           fsr1h	equ	0xFE2
 19869                           fsr1l	equ	0xFE1
 19870                           indf2	equ	0xFDF
 19871                           postinc2	equ	0xFDE
 19872                           postdec2	equ	0xFDD
 19873                           plusw2	equ	0xFDB
 19874                           fsr2h	equ	0xFDA
 19875                           fsr2l	equ	0xFD9
 19876                           status	equ	0xFD8
 19877                           
 19878 ;; *************** function _STP2 *****************
 19879 ;; Defined at:
 19880 ;;		line 315 in file "main.c"
 19881 ;; Parameters:    Size  Location     Type
 19882 ;;		None
 19883 ;; Auto vars:     Size  Location     Type
 19884 ;;		None
 19885 ;; Return value:  Size  Location     Type
 19886 ;;                  2  1998[None  ] int 
 19887 ;; Registers used:
 19888 ;;		None
 19889 ;; Tracked objects:
 19890 ;;		On entry : 0/0
 19891 ;;		On exit  : 0/0
 19892 ;;		Unchanged: 0/0
 19893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19898 ;;Total ram usage:        0 bytes
 19899 ;; Hardware stack levels used:    1
 19900 ;; Hardware stack levels required when called:    7
 19901 ;; This function calls:
 19902 ;;		Nothing
 19903 ;; This function is called by:
 19904 ;;		_SteppingCCW
 19905 ;;		_SteppingCW
 19906 ;; This function uses a non-reentrant model
 19907 ;;
 19908                           
 19909                           	psect	text109
 19910  016072                     __ptext109:
 19911                           	opt stack 0
 19912  016072                     _STP2:
 19913                           	opt stack 21
 19914                           
 19915                           ;main.c: 316: TRISA2=0;
 19916                           
 19917                           ;incstack = 0
 19918  016072  9492               	bcf	3986,2,c	;volatile
 19919                           
 19920                           ;main.c: 317: TRISA3=0;
 19921  016074  9692               	bcf	3986,3,c	;volatile
 19922                           
 19923                           ;main.c: 318: TRISD5=0;
 19924  016076  9A95               	bcf	3989,5,c	;volatile
 19925                           
 19926                           ;main.c: 319: TRISD7=0;
 19927  016078  9E95               	bcf	3989,7,c	;volatile
 19928                           
 19929                           ;main.c: 320: RD5=0;
 19930  01607A  9A83               	bcf	3971,5,c	;volatile
 19931                           
 19932                           ;main.c: 321: RD7=0;
 19933  01607C  9E83               	bcf	3971,7,c	;volatile
 19934                           
 19935                           ;main.c: 322: RA2=0;
 19936  01607E  9480               	bcf	3968,2,c	;volatile
 19937                           
 19938                           ;main.c: 323: RA3=0;
 19939  016080  9680               	bcf	3968,3,c	;volatile
 19940                           
 19941                           ;main.c: 324: RA3 = 1;
 19942  016082  8680               	bsf	3968,3,c	;volatile
 19943  016084  0012               	return		;funcret
 19944  016086                     __end_of_STP2:
 19945                           	opt stack 0
 19946                           tosu	equ	0xFFF
 19947                           tosh	equ	0xFFE
 19948                           tosl	equ	0xFFD
 19949                           pclath	equ	0xFFA
 19950                           tblptru	equ	0xFF8
 19951                           tblptrh	equ	0xFF7
 19952                           tblptrl	equ	0xFF6
 19953                           tablat	equ	0xFF5
 19954                           prodh	equ	0xFF4
 19955                           prodl	equ	0xFF3
 19956                           intcon	equ	0xFF2
 19957                           indf0	equ	0xFEF
 19958                           postinc0	equ	0xFEE
 19959                           fsr0h	equ	0xFEA
 19960                           fsr0l	equ	0xFE9
 19961                           wreg	equ	0xFE8
 19962                           indf1	equ	0xFE7
 19963                           postdec1	equ	0xFE5
 19964                           fsr1h	equ	0xFE2
 19965                           fsr1l	equ	0xFE1
 19966                           indf2	equ	0xFDF
 19967                           postinc2	equ	0xFDE
 19968                           postdec2	equ	0xFDD
 19969                           plusw2	equ	0xFDB
 19970                           fsr2h	equ	0xFDA
 19971                           fsr2l	equ	0xFD9
 19972                           status	equ	0xFD8
 19973                           
 19974 ;; *************** function _STP1 *****************
 19975 ;; Defined at:
 19976 ;;		line 303 in file "main.c"
 19977 ;; Parameters:    Size  Location     Type
 19978 ;;		None
 19979 ;; Auto vars:     Size  Location     Type
 19980 ;;		None
 19981 ;; Return value:  Size  Location     Type
 19982 ;;                  2  2000[None  ] int 
 19983 ;; Registers used:
 19984 ;;		None
 19985 ;; Tracked objects:
 19986 ;;		On entry : 0/0
 19987 ;;		On exit  : 0/0
 19988 ;;		Unchanged: 0/0
 19989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19994 ;;Total ram usage:        0 bytes
 19995 ;; Hardware stack levels used:    1
 19996 ;; Hardware stack levels required when called:    7
 19997 ;; This function calls:
 19998 ;;		Nothing
 19999 ;; This function is called by:
 20000 ;;		_SteppingCCW
 20001 ;;		_SteppingCW
 20002 ;; This function uses a non-reentrant model
 20003 ;;
 20004                           
 20005                           	psect	text110
 20006  016086                     __ptext110:
 20007                           	opt stack 0
 20008  016086                     _STP1:
 20009                           	opt stack 21
 20010                           
 20011                           ;main.c: 304: TRISA2=0;
 20012                           
 20013                           ;incstack = 0
 20014  016086  9492               	bcf	3986,2,c	;volatile
 20015                           
 20016                           ;main.c: 305: TRISA3=0;
 20017  016088  9692               	bcf	3986,3,c	;volatile
 20018                           
 20019                           ;main.c: 306: TRISD5=0;
 20020  01608A  9A95               	bcf	3989,5,c	;volatile
 20021                           
 20022                           ;main.c: 307: TRISD7=0;
 20023  01608C  9E95               	bcf	3989,7,c	;volatile
 20024                           
 20025                           ;main.c: 308: RD5=0;
 20026  01608E  9A83               	bcf	3971,5,c	;volatile
 20027                           
 20028                           ;main.c: 309: RD7=0;
 20029  016090  9E83               	bcf	3971,7,c	;volatile
 20030                           
 20031                           ;main.c: 310: RA2=0;
 20032  016092  9480               	bcf	3968,2,c	;volatile
 20033                           
 20034                           ;main.c: 311: RA3=0;
 20035  016094  9680               	bcf	3968,3,c	;volatile
 20036                           
 20037                           ;main.c: 312: RA2 = 1;
 20038  016096  8480               	bsf	3968,2,c	;volatile
 20039  016098  0012               	return		;funcret
 20040  01609A                     __end_of_STP1:
 20041                           	opt stack 0
 20042                           tosu	equ	0xFFF
 20043                           tosh	equ	0xFFE
 20044                           tosl	equ	0xFFD
 20045                           pclath	equ	0xFFA
 20046                           tblptru	equ	0xFF8
 20047                           tblptrh	equ	0xFF7
 20048                           tblptrl	equ	0xFF6
 20049                           tablat	equ	0xFF5
 20050                           prodh	equ	0xFF4
 20051                           prodl	equ	0xFF3
 20052                           intcon	equ	0xFF2
 20053                           indf0	equ	0xFEF
 20054                           postinc0	equ	0xFEE
 20055                           fsr0h	equ	0xFEA
 20056                           fsr0l	equ	0xFE9
 20057                           wreg	equ	0xFE8
 20058                           indf1	equ	0xFE7
 20059                           postdec1	equ	0xFE5
 20060                           fsr1h	equ	0xFE2
 20061                           fsr1l	equ	0xFE1
 20062                           indf2	equ	0xFDF
 20063                           postinc2	equ	0xFDE
 20064                           postdec2	equ	0xFDD
 20065                           plusw2	equ	0xFDB
 20066                           fsr2h	equ	0xFDA
 20067                           fsr2l	equ	0xFD9
 20068                           status	equ	0xFD8
 20069                           
 20070 ;; *************** function _Console_Render *****************
 20071 ;; Defined at:
 20072 ;;		line 377 in file "Library/Console.c"
 20073 ;; Parameters:    Size  Location     Type
 20074 ;;		None
 20075 ;; Auto vars:     Size  Location     Type
 20076 ;;  lCursor         4   38[BANK0 ] struct Point
 20077 ;;  y               1   43[BANK0 ] unsigned char 
 20078 ;;  x               1   42[BANK0 ] unsigned char 
 20079 ;;  temp            1   37[BANK0 ] unsigned char 
 20080 ;;  Temp            2    0        unsigned short 
 20081 ;; Return value:  Size  Location     Type
 20082 ;;                  1    wreg      void 
 20083 ;; Registers used:
 20084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20085 ;; Tracked objects:
 20086 ;;		On entry : 0/0
 20087 ;;		On exit  : 0/0
 20088 ;;		Unchanged: 0/0
 20089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20091 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20093 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20094 ;;Total ram usage:        9 bytes
 20095 ;; Hardware stack levels used:    1
 20096 ;; Hardware stack levels required when called:   11
 20097 ;; This function calls:
 20098 ;;		_Console_MakeField
 20099 ;;		_LCD_DrawField
 20100 ;;		_LCD_FillRectangle
 20101 ;; This function is called by:
 20102 ;;		_Sensor_Observe2
 20103 ;;		_Closest_Object2
 20104 ;;		_Sensor_Observe
 20105 ;;		_Closest_Object
 20106 ;;		_main
 20107 ;; This function uses a non-reentrant model
 20108 ;;
 20109                           
 20110                           	psect	text111
 20111  0124CC                     __ptext111:
 20112                           	opt stack 0
 20113  0124CC                     _Console_Render:
 20114                           	opt stack 18
 20115                           
 20116                           ;Console.c: 379: Colour Temp;
 20117                           ;Console.c: 380: if (change)
 20118                           
 20119                           ;incstack = 0
 20120  0124CC  504E               	movf	_change,w,c
 20121  0124CE  B4D8               	btfsc	status,2,c
 20122  0124D0  0012               	return	
 20123                           
 20124                           ;Console.c: 381: {
 20125                           ;Console.c: 382: UINT8 x, y, temp;
 20126                           ;Console.c: 383: Point lCursor = {6,6};
 20127  0124D2  C1E5  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 20128  0124D6  C1E6  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 20129  0124DA  C1E7  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 20130  0124DE  C1E8  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 20131                           
 20132                           ;Console.c: 385: if (clearall)
 20133  0124E2  5044               	movf	_clearall,w,c
 20134  0124E4  B4D8               	btfsc	status,2,c
 20135  0124E6  D005               	goto	l1056
 20136                           
 20137                           ;Console.c: 386: {
 20138                           ;Console.c: 389: temp = lBufferY;
 20139  0124E8  C0F4  F085         	movff	_lBufferY,Console_Render@temp
 20140                           
 20141                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 20142  0124EC  0E0F               	movlw	15
 20143  0124EE  0100               	movlb	0	; () banked
 20144  0124F0  6FF4               	movwf	_lBufferY& (0+255),b
 20145  0124F2                     l1056:
 20146                           
 20147                           ;Console.c: 391: }
 20148                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 20149  0124F2  0E00               	movlw	0
 20150  0124F4  0100               	movlb	0	; () banked
 20151  0124F6  6F8B               	movwf	Console_Render@y& (0+255),b
 20152  0124F8  D0B9               	goto	l1057
 20153  0124FA                     
 20154                           ; BSR set to: 0
 20155                           ;Console.c: 394: {
 20156                           ;Console.c: 395: gForecolour = lCBuffer[y];
 20157                           
 20158                           ; BSR set to: 0
 20159  0124FA  518B               	movf	Console_Render@y& (0+255),w,b
 20160  0124FC  0D02               	mullw	2
 20161  0124FE  0E64               	movlw	low _lCBuffer
 20162  012500  24F3               	addwf	prodl,w,c
 20163  012502  6ED9               	movwf	fsr2l,c
 20164  012504  0E02               	movlw	high _lCBuffer
 20165  012506  20F4               	addwfc	prodh,w,c
 20166  012508  6EDA               	movwf	fsr2h,c
 20167  01250A  CFDE F1F5          	movff	postinc2,_gForecolour
 20168  01250E  CFDD F1F6          	movff	postdec2,_gForecolour+1
 20169                           
 20170                           ; BSR set to: 0
 20171                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 20172  012512  0E00               	movlw	0
 20173  012514  6F8A               	movwf	Console_Render@x& (0+255),b
 20174  012516                     l14825:
 20175                           
 20176                           ; BSR set to: 0
 20177  012516  0E13               	movlw	19
 20178  012518  658A               	cpfsgt	Console_Render@x& (0+255),b
 20179  01251A  D001               	goto	l1059
 20180  01251C  D09E               	goto	u12220
 20181  01251E                     l1059:
 20182                           
 20183                           ; BSR set to: 0
 20184                           ;Console.c: 397: {
 20185                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 20186                           
 20187                           ; BSR set to: 0
 20188  01251E  518B               	movf	Console_Render@y& (0+255),w,b
 20189  012520  0D14               	mullw	20
 20190  012522  0E18               	movlw	low _lBuffer
 20191  012524  6F83               	movwf	??_Console_Render& (0+255),b
 20192  012526  0E03               	movlw	high _lBuffer
 20193  012528  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20194  01252A  50F3               	movf	prodl,w,c
 20195  01252C  2783               	addwf	??_Console_Render& (0+255),f,b
 20196  01252E  50F4               	movf	prodh,w,c
 20197  012530  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20198  012532  518A               	movf	Console_Render@x& (0+255),w,b
 20199  012534  0D01               	mullw	1
 20200  012536  50F3               	movf	prodl,w,c
 20201  012538  2583               	addwf	??_Console_Render& (0+255),w,b
 20202  01253A  6ED9               	movwf	fsr2l,c
 20203  01253C  50F4               	movf	prodh,w,c
 20204  01253E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20205  012540  6EDA               	movwf	fsr2h,c
 20206  012542  AEDF               	btfss	indf2,7,c
 20207  012544  D083               	goto	l1063
 20208                           
 20209                           ; BSR set to: 0
 20210                           ;Console.c: 399: {
 20211                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 20212  012546  518B               	movf	Console_Render@y& (0+255),w,b
 20213  012548  0D14               	mullw	20
 20214  01254A  0E18               	movlw	low _lBuffer
 20215  01254C  6F83               	movwf	??_Console_Render& (0+255),b
 20216  01254E  0E03               	movlw	high _lBuffer
 20217  012550  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20218  012552  50F3               	movf	prodl,w,c
 20219  012554  2783               	addwf	??_Console_Render& (0+255),f,b
 20220  012556  50F4               	movf	prodh,w,c
 20221  012558  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20222  01255A  518A               	movf	Console_Render@x& (0+255),w,b
 20223  01255C  0D01               	mullw	1
 20224  01255E  50F3               	movf	prodl,w,c
 20225  012560  2583               	addwf	??_Console_Render& (0+255),w,b
 20226  012562  6ED9               	movwf	fsr2l,c
 20227  012564  50F4               	movf	prodh,w,c
 20228  012566  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20229  012568  6EDA               	movwf	fsr2h,c
 20230  01256A  0E7F               	movlw	127
 20231  01256C  16DF               	andwf	indf2,f,c
 20232                           
 20233                           ;Console.c: 401: if (lBuffer[y][x])
 20234  01256E  518B               	movf	Console_Render@y& (0+255),w,b
 20235  012570  0D14               	mullw	20
 20236  012572  0E18               	movlw	low _lBuffer
 20237  012574  6F83               	movwf	??_Console_Render& (0+255),b
 20238  012576  0E03               	movlw	high _lBuffer
 20239  012578  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20240  01257A  50F3               	movf	prodl,w,c
 20241  01257C  2783               	addwf	??_Console_Render& (0+255),f,b
 20242  01257E  50F4               	movf	prodh,w,c
 20243  012580  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20244  012582  518A               	movf	Console_Render@x& (0+255),w,b
 20245  012584  0D01               	mullw	1
 20246  012586  50F3               	movf	prodl,w,c
 20247  012588  2583               	addwf	??_Console_Render& (0+255),w,b
 20248  01258A  6ED9               	movwf	fsr2l,c
 20249  01258C  50F4               	movf	prodh,w,c
 20250  01258E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20251  012590  6EDA               	movwf	fsr2h,c
 20252  012592  50DF               	movf	indf2,w,c
 20253  012594  B4D8               	btfsc	status,2,c
 20254  012596  D043               	goto	l1062
 20255                           
 20256                           ; BSR set to: 0
 20257                           ;Console.c: 402: {
 20258                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 20259  012598  C039  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 20260  01259C  C03A  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 20261  0125A0  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20262  0125A4  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20263  0125A8  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20264  0125AC  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20265  0125B0  C1ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 20266  0125B4  C1EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20267  0125B8  C1EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20268  0125BC  C1F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20269  0125C0  EC96  F0A9         	call	_LCD_FillRectangle	;wreg free
 20270                           
 20271                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 20272  0125C4  0100               	movlb	0	; () banked
 20273  0125C6  518B               	movf	Console_Render@y& (0+255),w,b
 20274  0125C8  0D14               	mullw	20
 20275  0125CA  0E18               	movlw	low _lBuffer
 20276  0125CC  6F83               	movwf	??_Console_Render& (0+255),b
 20277  0125CE  0E03               	movlw	high _lBuffer
 20278  0125D0  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20279  0125D2  50F3               	movf	prodl,w,c
 20280  0125D4  2783               	addwf	??_Console_Render& (0+255),f,b
 20281  0125D6  50F4               	movf	prodh,w,c
 20282  0125D8  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20283  0125DA  518A               	movf	Console_Render@x& (0+255),w,b
 20284  0125DC  0D01               	mullw	1
 20285  0125DE  50F3               	movf	prodl,w,c
 20286  0125E0  2583               	addwf	??_Console_Render& (0+255),w,b
 20287  0125E2  6ED9               	movwf	fsr2l,c
 20288  0125E4  50F4               	movf	prodh,w,c
 20289  0125E6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20290  0125E8  6EDA               	movwf	fsr2h,c
 20291  0125EA  50DF               	movf	indf2,w,c
 20292  0125EC  EC13  F0A1         	call	_Console_MakeField
 20293  0125F0  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 20294  0125F4  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 20295  0125F8  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 20296  0125FC  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 20297  012600  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 20298  012604  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 20299  012608  C1ED  F078         	movff	_gCharSize,LCD_DrawField@pSize
 20300  01260C  C1EE  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 20301  012610  C1EF  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 20302  012614  C1F0  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 20303  012618  ECC2  F0A4         	call	_LCD_DrawField	;wreg free
 20304                           
 20305                           ;Console.c: 405: }
 20306  01261C  D017               	goto	l1063
 20307  01261E                     l1062:
 20308                           
 20309                           ;Console.c: 406: else
 20310                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 20311  01261E  0E00               	movlw	0
 20312  012620  0100               	movlb	0	; () banked
 20313  012622  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 20314  012624  0E00               	movlw	0
 20315  012626  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 20316  012628  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20317  01262C  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20318  012630  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20319  012634  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20320  012638  C1ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 20321  01263C  C1EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20322  012640  C1EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20323  012644  C1F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20324  012648  EC96  F0A9         	call	_LCD_FillRectangle	;wreg free
 20325  01264C                     l1063:
 20326                           
 20327                           ;Console.c: 408: }
 20328                           ;Console.c: 409: lCursor.x += (5 + 1);
 20329  01264C  0E06               	movlw	6
 20330  01264E  0100               	movlb	0	; () banked
 20331  012650  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 20332  012652  0E00               	movlw	0
 20333  012654  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 20334                           
 20335                           ; BSR set to: 0
 20336  012656  2B8A               	incf	Console_Render@x& (0+255),f,b
 20337  012658  D75E               	goto	l14825
 20338  01265A                     u12220:
 20339                           
 20340                           ; BSR set to: 0
 20341                           ;Console.c: 410: }
 20342                           ;Console.c: 411: lCursor.y += (7 + 1);
 20343                           
 20344                           ; BSR set to: 0
 20345  01265A  0E08               	movlw	8
 20346  01265C  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 20347  01265E  0E00               	movlw	0
 20348  012660  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 20349                           
 20350                           ; BSR set to: 0
 20351                           ;Console.c: 412: lCursor.x = 6;
 20352  012662  0E00               	movlw	0
 20353  012664  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 20354  012666  0E06               	movlw	6
 20355  012668  6F86               	movwf	Console_Render@lCursor& (0+255),b
 20356                           
 20357                           ; BSR set to: 0
 20358  01266A  2B8B               	incf	Console_Render@y& (0+255),f,b
 20359  01266C                     l1057:
 20360                           
 20361                           ; BSR set to: 0
 20362                           
 20363                           ; BSR set to: 0
 20364  01266C  518B               	movf	Console_Render@y& (0+255),w,b
 20365  01266E  5DF4               	subwf	_lBufferY& (0+255),w,b
 20366  012670  B0D8               	btfsc	status,0,c
 20367  012672  D743               	goto	l1058
 20368                           
 20369                           ; BSR set to: 0
 20370                           ;Console.c: 413: }
 20371                           ;Console.c: 415: if (clearall)
 20372                           
 20373                           ; BSR set to: 0
 20374  012674  5044               	movf	_clearall,w,c
 20375  012676  B4D8               	btfsc	status,2,c
 20376  012678  0012               	return	
 20377                           
 20378                           ; BSR set to: 0
 20379                           ;Console.c: 416: {
 20380                           ;Console.c: 417: clearall = 0;
 20381  01267A  0E00               	movlw	0
 20382  01267C  6E44               	movwf	_clearall,c
 20383                           
 20384                           ; BSR set to: 0
 20385                           ;Console.c: 418: lBufferY = temp;
 20386  01267E  C085  F0F4         	movff	Console_Render@temp,_lBufferY
 20387                           
 20388                           ; BSR set to: 0
 20389  012682  0012               	return	
 20390  012684                     __end_of_Console_Render:
 20391                           	opt stack 0
 20392                           tosu	equ	0xFFF
 20393                           tosh	equ	0xFFE
 20394                           tosl	equ	0xFFD
 20395                           pclath	equ	0xFFA
 20396                           tblptru	equ	0xFF8
 20397                           tblptrh	equ	0xFF7
 20398                           tblptrl	equ	0xFF6
 20399                           tablat	equ	0xFF5
 20400                           prodh	equ	0xFF4
 20401                           prodl	equ	0xFF3
 20402                           intcon	equ	0xFF2
 20403                           indf0	equ	0xFEF
 20404                           postinc0	equ	0xFEE
 20405                           fsr0h	equ	0xFEA
 20406                           fsr0l	equ	0xFE9
 20407                           wreg	equ	0xFE8
 20408                           indf1	equ	0xFE7
 20409                           postdec1	equ	0xFE5
 20410                           fsr1h	equ	0xFE2
 20411                           fsr1l	equ	0xFE1
 20412                           indf2	equ	0xFDF
 20413                           postinc2	equ	0xFDE
 20414                           postdec2	equ	0xFDD
 20415                           plusw2	equ	0xFDB
 20416                           fsr2h	equ	0xFDA
 20417                           fsr2l	equ	0xFD9
 20418                           status	equ	0xFD8
 20419                           
 20420 ;; *************** function _LCD_FillRectangle *****************
 20421 ;; Defined at:
 20422 ;;		line 318 in file "Library/LCD.c"
 20423 ;; Parameters:    Size  Location     Type
 20424 ;;  pColour         2    9[BANK0 ] unsigned short 
 20425 ;;  pPoint          4   11[BANK0 ] struct Point
 20426 ;;  pSize           4   15[BANK0 ] struct Point
 20427 ;; Auto vars:     Size  Location     Type
 20428 ;;  j               1   22[BANK0 ] unsigned char 
 20429 ;;  i               1   21[BANK0 ] unsigned char 
 20430 ;; Return value:  Size  Location     Type
 20431 ;;                  1    wreg      void 
 20432 ;; Registers used:
 20433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20434 ;; Tracked objects:
 20435 ;;		On entry : 0/0
 20436 ;;		On exit  : 0/0
 20437 ;;		Unchanged: 0/0
 20438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20439 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20440 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20442 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20443 ;;Total ram usage:       14 bytes
 20444 ;; Hardware stack levels used:    1
 20445 ;; Hardware stack levels required when called:   10
 20446 ;; This function calls:
 20447 ;;		_LCD_Word_Write
 20448 ;;		_Set_Addr_Window
 20449 ;; This function is called by:
 20450 ;;		_Console_Render
 20451 ;;		_Console_ClearLine
 20452 ;; This function uses a non-reentrant model
 20453 ;;
 20454                           
 20455                           	psect	text112
 20456  01532C                     __ptext112:
 20457                           	opt stack 0
 20458  01532C                     _LCD_FillRectangle:
 20459                           	opt stack 18
 20460                           
 20461                           ;LCD.c: 320: UINT8 i = 0x00;
 20462                           
 20463                           ;incstack = 0
 20464  01532C  0E00               	movlw	0
 20465  01532E  0100               	movlb	0	; () banked
 20466  015330  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 20467                           
 20468                           ;LCD.c: 321: UINT8 j = 0x00;
 20469  015332  0E00               	movlw	0
 20470  015334  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 20471                           
 20472                           ; BSR set to: 0
 20473                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 20474  015336  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 20475  01533A  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20476  01533C  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 20477  01533E  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 20478  015340  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 20479  015342  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20480  015344  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 20481  015346  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 20482  015348  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 20483  01534A  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 20484  01534C  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20485  01534E  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20486  015350  EC03  F0A2         	call	_Set_Addr_Window
 20487                           
 20488                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 20489  015354  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 20490  015358  0100               	movlb	0	; () banked
 20491  01535A  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 20492  01535C  B4D8               	btfsc	status,2,c
 20493  01535E  0012               	return	
 20494                           
 20495                           ; BSR set to: 0
 20496                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 20497                           
 20498                           ; BSR set to: 0
 20499  015360  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 20500  015364                     l14217:
 20501                           
 20502                           ; BSR set to: 0
 20503  015364  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 20504  015366  B4D8               	btfsc	status,2,c
 20505  015368  D009               	goto	u11640
 20506                           
 20507                           ; BSR set to: 0
 20508                           ;LCD.c: 333: LCD_Word_Write(pColour);
 20509                           
 20510                           ; BSR set to: 0
 20511                           
 20512                           ; BSR set to: 0
 20513  01536A  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 20514  01536E  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 20515  015372  EC72  F0AF         	call	_LCD_Word_Write	;wreg free
 20516  015376  0100               	movlb	0	; () banked
 20517  015378  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 20518  01537A  D7F4               	goto	l14217
 20519  01537C                     u11640:
 20520                           
 20521                           ; BSR set to: 0
 20522                           
 20523                           ; BSR set to: 0
 20524  01537C  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 20525  01537E  D7ED               	goto	L9
 20526  015380                     __end_of_LCD_FillRectangle:
 20527                           	opt stack 0
 20528                           tosu	equ	0xFFF
 20529                           tosh	equ	0xFFE
 20530                           tosl	equ	0xFFD
 20531                           pclath	equ	0xFFA
 20532                           tblptru	equ	0xFF8
 20533                           tblptrh	equ	0xFF7
 20534                           tblptrl	equ	0xFF6
 20535                           tablat	equ	0xFF5
 20536                           prodh	equ	0xFF4
 20537                           prodl	equ	0xFF3
 20538                           intcon	equ	0xFF2
 20539                           indf0	equ	0xFEF
 20540                           postinc0	equ	0xFEE
 20541                           fsr0h	equ	0xFEA
 20542                           fsr0l	equ	0xFE9
 20543                           wreg	equ	0xFE8
 20544                           indf1	equ	0xFE7
 20545                           postdec1	equ	0xFE5
 20546                           fsr1h	equ	0xFE2
 20547                           fsr1l	equ	0xFE1
 20548                           indf2	equ	0xFDF
 20549                           postinc2	equ	0xFDE
 20550                           postdec2	equ	0xFDD
 20551                           plusw2	equ	0xFDB
 20552                           fsr2h	equ	0xFDA
 20553                           fsr2l	equ	0xFD9
 20554                           status	equ	0xFD8
 20555                           
 20556 ;; *************** function _LCD_DrawField *****************
 20557 ;; Defined at:
 20558 ;;		line 393 in file "Library/LCD.c"
 20559 ;; Parameters:    Size  Location     Type
 20560 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 20561 ;;		 -> Console_MakeField@Fill(70), 
 20562 ;;  pPoint          4   20[BANK0 ] struct Point
 20563 ;;  pSize           4   24[BANK0 ] struct Point
 20564 ;; Auto vars:     Size  Location     Type
 20565 ;;  count           2   30[BANK0 ] unsigned short 
 20566 ;;  i               1   34[BANK0 ] unsigned char 
 20567 ;;  ymax            1   33[BANK0 ] unsigned char 
 20568 ;;  xmax            1   32[BANK0 ] unsigned char 
 20569 ;; Return value:  Size  Location     Type
 20570 ;;                  1    wreg      void 
 20571 ;; Registers used:
 20572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20573 ;; Tracked objects:
 20574 ;;		On entry : 0/0
 20575 ;;		On exit  : 0/0
 20576 ;;		Unchanged: 0/0
 20577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20578 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20579 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20580 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20581 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20582 ;;Total ram usage:       17 bytes
 20583 ;; Hardware stack levels used:    1
 20584 ;; Hardware stack levels required when called:   10
 20585 ;; This function calls:
 20586 ;;		_LCD_Word_Write
 20587 ;;		_Set_Addr_Window
 20588 ;;		___wmul
 20589 ;; This function is called by:
 20590 ;;		_Console_Render
 20591 ;; This function uses a non-reentrant model
 20592 ;;
 20593                           
 20594                           	psect	text113
 20595  014984                     __ptext113:
 20596                           	opt stack 0
 20597  014984                     _LCD_DrawField:
 20598                           	opt stack 18
 20599                           
 20600                           ;LCD.c: 396: UINT8 i = 0x00;
 20601                           
 20602                           ; BSR set to: 0
 20603                           ;incstack = 0
 20604  014984  0E00               	movlw	0
 20605  014986  0100               	movlb	0	; () banked
 20606  014988  6F82               	movwf	LCD_DrawField@i& (0+255),b
 20607                           
 20608                           ; BSR set to: 0
 20609                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 20610  01498A  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20611  01498C  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 20612  01498E  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 20613                           
 20614                           ; BSR set to: 0
 20615                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 20616  014990  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 20617  014992  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 20618  014994  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 20619                           
 20620                           ; BSR set to: 0
 20621                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 20622  014996  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 20623  01499A  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 20624  01499E  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 20625  0149A2  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 20626  0149A6  EC8B  F0AE         	call	___wmul	;wreg free
 20627  0149AA  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 20628  0149AE  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 20629                           
 20630                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 20631  0149B2  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 20632  0149B6  0100               	movlb	0	; () banked
 20633  0149B8  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 20634  0149BA  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20635  0149BC  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 20636  0149BE  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20637  0149C0  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20638  0149C2  EC03  F0A2         	call	_Set_Addr_Window
 20639                           
 20640                           ;LCD.c: 403: for(i = 0; i < count; i++)
 20641  0149C6  0E00               	movlw	0
 20642  0149C8  0100               	movlb	0	; () banked
 20643  0149CA  6F82               	movwf	LCD_DrawField@i& (0+255),b
 20644  0149CC  D010               	goto	l183
 20645  0149CE                     
 20646                           ; BSR set to: 0
 20647                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 20648                           
 20649                           ; BSR set to: 0
 20650  0149CE  5182               	movf	LCD_DrawField@i& (0+255),w,b
 20651  0149D0  0D02               	mullw	2
 20652  0149D2  50F3               	movf	prodl,w,c
 20653  0149D4  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 20654  0149D6  6ED9               	movwf	fsr2l,c
 20655  0149D8  50F4               	movf	prodh,w,c
 20656  0149DA  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 20657  0149DC  6EDA               	movwf	fsr2h,c
 20658  0149DE  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 20659  0149E2  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 20660  0149E6  EC72  F0AF         	call	_LCD_Word_Write	;wreg free
 20661  0149EA  0100               	movlb	0	; () banked
 20662  0149EC  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 20663  0149EE                     l183:
 20664                           
 20665                           ; BSR set to: 0
 20666                           
 20667                           ; BSR set to: 0
 20668  0149EE  5182               	movf	LCD_DrawField@i& (0+255),w,b
 20669  0149F0  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 20670  0149F2  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 20671  0149F4  517E               	movf	LCD_DrawField@count& (0+255),w,b
 20672  0149F6  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 20673  0149F8  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 20674  0149FA  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 20675  0149FC  B0D8               	btfsc	status,0,c
 20676  0149FE  0012               	return	
 20677  014A00  D7E6               	goto	l184
 20678  014A02                     __end_of_LCD_DrawField:
 20679                           	opt stack 0
 20680                           tosu	equ	0xFFF
 20681                           tosh	equ	0xFFE
 20682                           tosl	equ	0xFFD
 20683                           pclath	equ	0xFFA
 20684                           tblptru	equ	0xFF8
 20685                           tblptrh	equ	0xFF7
 20686                           tblptrl	equ	0xFF6
 20687                           tablat	equ	0xFF5
 20688                           prodh	equ	0xFF4
 20689                           prodl	equ	0xFF3
 20690                           intcon	equ	0xFF2
 20691                           indf0	equ	0xFEF
 20692                           postinc0	equ	0xFEE
 20693                           fsr0h	equ	0xFEA
 20694                           fsr0l	equ	0xFE9
 20695                           wreg	equ	0xFE8
 20696                           indf1	equ	0xFE7
 20697                           postdec1	equ	0xFE5
 20698                           fsr1h	equ	0xFE2
 20699                           fsr1l	equ	0xFE1
 20700                           indf2	equ	0xFDF
 20701                           postinc2	equ	0xFDE
 20702                           postdec2	equ	0xFDD
 20703                           plusw2	equ	0xFDB
 20704                           fsr2h	equ	0xFDA
 20705                           fsr2l	equ	0xFD9
 20706                           status	equ	0xFD8
 20707                           
 20708 ;; *************** function ___wmul *****************
 20709 ;; Defined at:
 20710 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 20711 ;; Parameters:    Size  Location     Type
 20712 ;;  multiplier      2    0[BANK0 ] unsigned int 
 20713 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 20714 ;; Auto vars:     Size  Location     Type
 20715 ;;  product         2    4[BANK0 ] unsigned int 
 20716 ;; Return value:  Size  Location     Type
 20717 ;;                  2    0[BANK0 ] unsigned int 
 20718 ;; Registers used:
 20719 ;;		wreg, status,2, status,0, prodl, prodh
 20720 ;; Tracked objects:
 20721 ;;		On entry : 0/0
 20722 ;;		On exit  : 0/0
 20723 ;;		Unchanged: 0/0
 20724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20725 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20726 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20728 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20729 ;;Total ram usage:        6 bytes
 20730 ;; Hardware stack levels used:    1
 20731 ;; Hardware stack levels required when called:    7
 20732 ;; This function calls:
 20733 ;;		Nothing
 20734 ;; This function is called by:
 20735 ;;		_LCD_DrawField
 20736 ;; This function uses a non-reentrant model
 20737 ;;
 20738                           
 20739                           	psect	text114
 20740  015D16                     __ptext114:
 20741                           	opt stack 0
 20742  015D16                     ___wmul:
 20743                           	opt stack 20
 20744                           
 20745                           ; BSR set to: 0
 20746                           ;incstack = 0
 20747  015D16  0100               	movlb	0	; () banked
 20748  015D18  5160               	movf	___wmul@multiplier& (0+255),w,b
 20749  015D1A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 20750  015D1C  CFF3 F064          	movff	prodl,___wmul@product
 20751  015D20  CFF4 F065          	movff	prodh,___wmul@product+1
 20752  015D24  5160               	movf	___wmul@multiplier& (0+255),w,b
 20753  015D26  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 20754  015D28  50F3               	movf	prodl,w,c
 20755  015D2A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 20756  015D2C  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 20757  015D2E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 20758  015D30  50F3               	movf	prodl,w,c
 20759  015D32  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 20760                           
 20761                           ; BSR set to: 0
 20762  015D34  C064  F060         	movff	___wmul@product,?___wmul
 20763  015D38  C065  F061         	movff	___wmul@product+1,?___wmul+1
 20764  015D3C  0012               	return	
 20765  015D3E                     __end_of___wmul:
 20766                           	opt stack 0
 20767                           tosu	equ	0xFFF
 20768                           tosh	equ	0xFFE
 20769                           tosl	equ	0xFFD
 20770                           pclath	equ	0xFFA
 20771                           tblptru	equ	0xFF8
 20772                           tblptrh	equ	0xFF7
 20773                           tblptrl	equ	0xFF6
 20774                           tablat	equ	0xFF5
 20775                           prodh	equ	0xFF4
 20776                           prodl	equ	0xFF3
 20777                           intcon	equ	0xFF2
 20778                           indf0	equ	0xFEF
 20779                           postinc0	equ	0xFEE
 20780                           fsr0h	equ	0xFEA
 20781                           fsr0l	equ	0xFE9
 20782                           wreg	equ	0xFE8
 20783                           indf1	equ	0xFE7
 20784                           postdec1	equ	0xFE5
 20785                           fsr1h	equ	0xFE2
 20786                           fsr1l	equ	0xFE1
 20787                           indf2	equ	0xFDF
 20788                           postinc2	equ	0xFDE
 20789                           postdec2	equ	0xFDD
 20790                           plusw2	equ	0xFDB
 20791                           fsr2h	equ	0xFDA
 20792                           fsr2l	equ	0xFD9
 20793                           status	equ	0xFD8
 20794                           
 20795 ;; *************** function _Set_Addr_Window *****************
 20796 ;; Defined at:
 20797 ;;		line 214 in file "Library/LCD.c"
 20798 ;; Parameters:    Size  Location     Type
 20799 ;;  xs              1    wreg     unsigned char 
 20800 ;;  ys              1    5[BANK0 ] unsigned char 
 20801 ;;  xe              1    6[BANK0 ] unsigned char 
 20802 ;;  ye              1    7[BANK0 ] unsigned char 
 20803 ;; Auto vars:     Size  Location     Type
 20804 ;;  xs              1    8[BANK0 ] unsigned char 
 20805 ;; Return value:  Size  Location     Type
 20806 ;;                  1    wreg      void 
 20807 ;; Registers used:
 20808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20809 ;; Tracked objects:
 20810 ;;		On entry : 0/0
 20811 ;;		On exit  : 0/0
 20812 ;;		Unchanged: 0/0
 20813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20814 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20815 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20817 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20818 ;;Total ram usage:        4 bytes
 20819 ;; Hardware stack levels used:    1
 20820 ;; Hardware stack levels required when called:    9
 20821 ;; This function calls:
 20822 ;;		_LCD_Write
 20823 ;; This function is called by:
 20824 ;;		_LCD_Fill
 20825 ;;		_LCD_FillRectangle
 20826 ;;		_LCD_DrawField
 20827 ;;		_RAM_Address_Set
 20828 ;;		_LCD_DrawPixel
 20829 ;; This function uses a non-reentrant model
 20830 ;;
 20831                           
 20832                           	psect	text115
 20833  014406                     __ptext115:
 20834                           	opt stack 0
 20835  014406                     _Set_Addr_Window:
 20836                           	opt stack 18
 20837                           
 20838                           ; BSR set to: 0
 20839                           ;incstack = 0
 20840                           ;Set_Addr_Window@xs stored from wreg
 20841  014406  0100               	movlb	0	; () banked
 20842  014408  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 20843                           
 20844                           ;LCD.c: 216: ys+=2;
 20845  01440A  0E02               	movlw	2
 20846  01440C  0100               	movlb	0	; () banked
 20847  01440E  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20848                           
 20849                           ;LCD.c: 217: ye+=2;
 20850  014410  0E02               	movlw	2
 20851  014412  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20852                           
 20853                           ;LCD.c: 218: xs+=3;
 20854  014414  0E03               	movlw	3
 20855  014416  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20856                           
 20857                           ;LCD.c: 219: xe+=3;
 20858  014418  0E03               	movlw	3
 20859  01441A  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20860                           
 20861                           ; BSR set to: 0
 20862                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20863  01441C  0E00               	movlw	0
 20864  01441E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20865  014420  0E2A               	movlw	42
 20866  014422  EC1D  F0AF         	call	_LCD_Write
 20867                           
 20868                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20869  014426  0E01               	movlw	1
 20870  014428  0100               	movlb	0	; () banked
 20871  01442A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20872  01442C  0E00               	movlw	0
 20873  01442E  EC1D  F0AF         	call	_LCD_Write
 20874                           
 20875                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20876  014432  0E01               	movlw	1
 20877  014434  0100               	movlb	0	; () banked
 20878  014436  6F63               	movwf	LCD_Write@mode& (0+255),b
 20879  014438  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 20880  01443A  EC1D  F0AF         	call	_LCD_Write
 20881                           
 20882                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20883  01443E  0E01               	movlw	1
 20884  014440  0100               	movlb	0	; () banked
 20885  014442  6F63               	movwf	LCD_Write@mode& (0+255),b
 20886  014444  0E00               	movlw	0
 20887  014446  EC1D  F0AF         	call	_LCD_Write
 20888                           
 20889                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20890  01444A  0E01               	movlw	1
 20891  01444C  0100               	movlb	0	; () banked
 20892  01444E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20893  014450  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 20894  014452  EC1D  F0AF         	call	_LCD_Write
 20895                           
 20896                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20897  014456  0E00               	movlw	0
 20898  014458  0100               	movlb	0	; () banked
 20899  01445A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20900  01445C  0E2B               	movlw	43
 20901  01445E  EC1D  F0AF         	call	_LCD_Write
 20902                           
 20903                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20904  014462  0E01               	movlw	1
 20905  014464  0100               	movlb	0	; () banked
 20906  014466  6F63               	movwf	LCD_Write@mode& (0+255),b
 20907  014468  0E00               	movlw	0
 20908  01446A  EC1D  F0AF         	call	_LCD_Write
 20909                           
 20910                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20911  01446E  0E01               	movlw	1
 20912  014470  0100               	movlb	0	; () banked
 20913  014472  6F63               	movwf	LCD_Write@mode& (0+255),b
 20914  014474  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 20915  014476  EC1D  F0AF         	call	_LCD_Write
 20916                           
 20917                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20918  01447A  0E01               	movlw	1
 20919  01447C  0100               	movlb	0	; () banked
 20920  01447E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20921  014480  0E00               	movlw	0
 20922  014482  EC1D  F0AF         	call	_LCD_Write
 20923                           
 20924                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20925  014486  0E01               	movlw	1
 20926  014488  0100               	movlb	0	; () banked
 20927  01448A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20928  01448C  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 20929  01448E  EC1D  F0AF         	call	_LCD_Write
 20930                           
 20931                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20932  014492  0E00               	movlw	0
 20933  014494  0100               	movlb	0	; () banked
 20934  014496  6F63               	movwf	LCD_Write@mode& (0+255),b
 20935  014498  0E2C               	movlw	44
 20936  01449A  EC1D  F0AF         	call	_LCD_Write
 20937  01449E  0012               	return		;funcret
 20938  0144A0                     __end_of_Set_Addr_Window:
 20939                           	opt stack 0
 20940                           tosu	equ	0xFFF
 20941                           tosh	equ	0xFFE
 20942                           tosl	equ	0xFFD
 20943                           pclath	equ	0xFFA
 20944                           tblptru	equ	0xFF8
 20945                           tblptrh	equ	0xFF7
 20946                           tblptrl	equ	0xFF6
 20947                           tablat	equ	0xFF5
 20948                           prodh	equ	0xFF4
 20949                           prodl	equ	0xFF3
 20950                           intcon	equ	0xFF2
 20951                           indf0	equ	0xFEF
 20952                           postinc0	equ	0xFEE
 20953                           fsr0h	equ	0xFEA
 20954                           fsr0l	equ	0xFE9
 20955                           wreg	equ	0xFE8
 20956                           indf1	equ	0xFE7
 20957                           postdec1	equ	0xFE5
 20958                           fsr1h	equ	0xFE2
 20959                           fsr1l	equ	0xFE1
 20960                           indf2	equ	0xFDF
 20961                           postinc2	equ	0xFDE
 20962                           postdec2	equ	0xFDD
 20963                           plusw2	equ	0xFDB
 20964                           fsr2h	equ	0xFDA
 20965                           fsr2l	equ	0xFD9
 20966                           status	equ	0xFD8
 20967                           
 20968 ;; *************** function _LCD_Word_Write *****************
 20969 ;; Defined at:
 20970 ;;		line 198 in file "Library/LCD.c"
 20971 ;; Parameters:    Size  Location     Type
 20972 ;;  value           2    5[BANK0 ] unsigned short 
 20973 ;; Auto vars:     Size  Location     Type
 20974 ;;		None
 20975 ;; Return value:  Size  Location     Type
 20976 ;;                  1    wreg      void 
 20977 ;; Registers used:
 20978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20979 ;; Tracked objects:
 20980 ;;		On entry : 0/0
 20981 ;;		On exit  : 0/0
 20982 ;;		Unchanged: 0/0
 20983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20988 ;;Total ram usage:        2 bytes
 20989 ;; Hardware stack levels used:    1
 20990 ;; Hardware stack levels required when called:    9
 20991 ;; This function calls:
 20992 ;;		_LCD_Write
 20993 ;; This function is called by:
 20994 ;;		_LCD_Fill
 20995 ;;		_LCD_FillRectangle
 20996 ;;		_LCD_DrawField
 20997 ;;		_LCD_DrawPixel
 20998 ;; This function uses a non-reentrant model
 20999 ;;
 21000                           
 21001                           	psect	text116
 21002  015EE4                     __ptext116:
 21003                           	opt stack 0
 21004  015EE4                     _LCD_Word_Write:
 21005                           	opt stack 18
 21006                           
 21007                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 21008                           
 21009                           ;incstack = 0
 21010  015EE4  0E01               	movlw	1
 21011  015EE6  0100               	movlb	0	; () banked
 21012  015EE8  6F63               	movwf	LCD_Write@mode& (0+255),b
 21013  015EEA  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 21014  015EEC  EC1D  F0AF         	call	_LCD_Write
 21015                           
 21016                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 21017  015EF0  0E01               	movlw	1
 21018  015EF2  0100               	movlb	0	; () banked
 21019  015EF4  6F63               	movwf	LCD_Write@mode& (0+255),b
 21020  015EF6  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 21021  015EF8  EC1D  F0AF         	call	_LCD_Write
 21022  015EFC  0012               	return		;funcret
 21023  015EFE                     __end_of_LCD_Word_Write:
 21024                           	opt stack 0
 21025                           tosu	equ	0xFFF
 21026                           tosh	equ	0xFFE
 21027                           tosl	equ	0xFFD
 21028                           pclath	equ	0xFFA
 21029                           tblptru	equ	0xFF8
 21030                           tblptrh	equ	0xFF7
 21031                           tblptrl	equ	0xFF6
 21032                           tablat	equ	0xFF5
 21033                           prodh	equ	0xFF4
 21034                           prodl	equ	0xFF3
 21035                           intcon	equ	0xFF2
 21036                           indf0	equ	0xFEF
 21037                           postinc0	equ	0xFEE
 21038                           fsr0h	equ	0xFEA
 21039                           fsr0l	equ	0xFE9
 21040                           wreg	equ	0xFE8
 21041                           indf1	equ	0xFE7
 21042                           postdec1	equ	0xFE5
 21043                           fsr1h	equ	0xFE2
 21044                           fsr1l	equ	0xFE1
 21045                           indf2	equ	0xFDF
 21046                           postinc2	equ	0xFDE
 21047                           postdec2	equ	0xFDD
 21048                           plusw2	equ	0xFDB
 21049                           fsr2h	equ	0xFDA
 21050                           fsr2l	equ	0xFD9
 21051                           status	equ	0xFD8
 21052                           
 21053 ;; *************** function _LCD_Write *****************
 21054 ;; Defined at:
 21055 ;;		line 67 in file "Library/LCD.c"
 21056 ;; Parameters:    Size  Location     Type
 21057 ;;  value           1    wreg     unsigned char 
 21058 ;;  mode            1    3[BANK0 ] enum E6761
 21059 ;; Auto vars:     Size  Location     Type
 21060 ;;  value           1    4[BANK0 ] unsigned char 
 21061 ;; Return value:  Size  Location     Type
 21062 ;;                  1    wreg      void 
 21063 ;; Registers used:
 21064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21065 ;; Tracked objects:
 21066 ;;		On entry : 0/0
 21067 ;;		On exit  : 0/0
 21068 ;;		Unchanged: 0/0
 21069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21070 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21073 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21074 ;;Total ram usage:        2 bytes
 21075 ;; Hardware stack levels used:    1
 21076 ;; Hardware stack levels required when called:    8
 21077 ;; This function calls:
 21078 ;;		_Mode_Set
 21079 ;;		_SPI_Send
 21080 ;; This function is called by:
 21081 ;;		_LCD_Init
 21082 ;;		_LCD_Word_Write
 21083 ;;		_Set_Addr_Window
 21084 ;;		_Set_Rotation
 21085 ;;		_LCD_WriteCMD
 21086 ;;		_LCD_WriteData
 21087 ;;		_LCD_Data_Write
 21088 ;;		_LCD_Data_Write_4k
 21089 ;;		_Invert_Display
 21090 ;; This function uses a non-reentrant model
 21091 ;;
 21092                           
 21093                           	psect	text117
 21094  015E3A                     __ptext117:
 21095                           	opt stack 0
 21096  015E3A                     _LCD_Write:
 21097                           	opt stack 18
 21098                           
 21099                           ;incstack = 0
 21100                           ;LCD_Write@value stored from wreg
 21101  015E3A  0100               	movlb	0	; () banked
 21102  015E3C  6F64               	movwf	LCD_Write@value& (0+255),b
 21103                           
 21104                           ;LCD.c: 89: Mode_Set(mode);
 21105  015E3E  0100               	movlb	0	; () banked
 21106  015E40  5163               	movf	LCD_Write@mode& (0+255),w,b
 21107  015E42  EC56  F0B0         	call	_Mode_Set
 21108                           
 21109                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 21110  015E46  0E7E               	movlw	low _SPI2
 21111  015E48  0100               	movlb	0	; () banked
 21112  015E4A  6F60               	movwf	SPI_Send@pInput& (0+255),b
 21113  015E4C  0E01               	movlw	high _SPI2
 21114  015E4E  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 21115  015E50  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 21116  015E54  EC16  F0A7         	call	_SPI_Send	;wreg free
 21117  015E58  0012               	return		;funcret
 21118  015E5A                     __end_of_LCD_Write:
 21119                           	opt stack 0
 21120                           tosu	equ	0xFFF
 21121                           tosh	equ	0xFFE
 21122                           tosl	equ	0xFFD
 21123                           pclath	equ	0xFFA
 21124                           tblptru	equ	0xFF8
 21125                           tblptrh	equ	0xFF7
 21126                           tblptrl	equ	0xFF6
 21127                           tablat	equ	0xFF5
 21128                           prodh	equ	0xFF4
 21129                           prodl	equ	0xFF3
 21130                           intcon	equ	0xFF2
 21131                           indf0	equ	0xFEF
 21132                           postinc0	equ	0xFEE
 21133                           fsr0h	equ	0xFEA
 21134                           fsr0l	equ	0xFE9
 21135                           wreg	equ	0xFE8
 21136                           indf1	equ	0xFE7
 21137                           postdec1	equ	0xFE5
 21138                           fsr1h	equ	0xFE2
 21139                           fsr1l	equ	0xFE1
 21140                           indf2	equ	0xFDF
 21141                           postinc2	equ	0xFDE
 21142                           postdec2	equ	0xFDD
 21143                           plusw2	equ	0xFDB
 21144                           fsr2h	equ	0xFDA
 21145                           fsr2l	equ	0xFD9
 21146                           status	equ	0xFD8
 21147                           
 21148 ;; *************** function _Mode_Set *****************
 21149 ;; Defined at:
 21150 ;;		line 40 in file "Library/LCD.c"
 21151 ;; Parameters:    Size  Location     Type
 21152 ;;  pMode           1    wreg     enum E6761
 21153 ;; Auto vars:     Size  Location     Type
 21154 ;;  pMode           1    0[BANK0 ] enum E6761
 21155 ;; Return value:  Size  Location     Type
 21156 ;;                  1    wreg      void 
 21157 ;; Registers used:
 21158 ;;		wreg
 21159 ;; Tracked objects:
 21160 ;;		On entry : 0/0
 21161 ;;		On exit  : 0/0
 21162 ;;		Unchanged: 0/0
 21163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21168 ;;Total ram usage:        1 bytes
 21169 ;; Hardware stack levels used:    1
 21170 ;; Hardware stack levels required when called:    7
 21171 ;; This function calls:
 21172 ;;		Nothing
 21173 ;; This function is called by:
 21174 ;;		_LCD_Write
 21175 ;; This function uses a non-reentrant model
 21176 ;;
 21177                           
 21178                           	psect	text118
 21179  0160AC                     __ptext118:
 21180                           	opt stack 0
 21181  0160AC                     _Mode_Set:
 21182                           	opt stack 18
 21183                           
 21184                           ;incstack = 0
 21185                           ;Mode_Set@pMode stored from wreg
 21186  0160AC  0100               	movlb	0	; () banked
 21187  0160AE  6F60               	movwf	Mode_Set@pMode& (0+255),b
 21188                           
 21189                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21190  0160B0  0100               	movlb	0	; () banked
 21191  0160B2  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 21192  0160B4  D002               	bra	u9745
 21193  0160B6  9E85               	bcf	3973,7,c	;volatile
 21194  0160B8  D001               	bra	u9746
 21195  0160BA                     u9745:
 21196  0160BA  8E85               	bsf	3973,7,c	;volatile
 21197  0160BC                     u9746:
 21198  0160BC  0012               	return		;funcret
 21199  0160BE                     __end_of_Mode_Set:
 21200                           	opt stack 0
 21201                           tosu	equ	0xFFF
 21202                           tosh	equ	0xFFE
 21203                           tosl	equ	0xFFD
 21204                           pclath	equ	0xFFA
 21205                           tblptru	equ	0xFF8
 21206                           tblptrh	equ	0xFF7
 21207                           tblptrl	equ	0xFF6
 21208                           tablat	equ	0xFF5
 21209                           prodh	equ	0xFF4
 21210                           prodl	equ	0xFF3
 21211                           intcon	equ	0xFF2
 21212                           indf0	equ	0xFEF
 21213                           postinc0	equ	0xFEE
 21214                           fsr0h	equ	0xFEA
 21215                           fsr0l	equ	0xFE9
 21216                           wreg	equ	0xFE8
 21217                           indf1	equ	0xFE7
 21218                           postdec1	equ	0xFE5
 21219                           fsr1h	equ	0xFE2
 21220                           fsr1l	equ	0xFE1
 21221                           indf2	equ	0xFDF
 21222                           postinc2	equ	0xFDE
 21223                           postdec2	equ	0xFDD
 21224                           plusw2	equ	0xFDB
 21225                           fsr2h	equ	0xFDA
 21226                           fsr2l	equ	0xFD9
 21227                           status	equ	0xFD8
 21228                           
 21229 ;; *************** function _Console_MakeField *****************
 21230 ;; Defined at:
 21231 ;;		line 435 in file "Library/Console.c"
 21232 ;; Parameters:    Size  Location     Type
 21233 ;;  pInput          1    wreg     unsigned char 
 21234 ;; Auto vars:     Size  Location     Type
 21235 ;;  pInput          1   11[BANK0 ] unsigned char 
 21236 ;;  y               1   17[BANK0 ] unsigned char 
 21237 ;;  x               1   16[BANK0 ] unsigned char 
 21238 ;;  Column          2   12[BANK0 ] PTR struct Byte
 21239 ;;		 -> Font5x7(480), 
 21240 ;;  Index           2    9[BANK0 ] unsigned short 
 21241 ;; Return value:  Size  Location     Type
 21242 ;;                  2    5[BANK0 ] PTR unsigned short 
 21243 ;; Registers used:
 21244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21245 ;; Tracked objects:
 21246 ;;		On entry : 0/0
 21247 ;;		On exit  : 0/0
 21248 ;;		Unchanged: 0/0
 21249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21250 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21251 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21253 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21254 ;;Total ram usage:       13 bytes
 21255 ;; Hardware stack levels used:    1
 21256 ;; Hardware stack levels required when called:    8
 21257 ;; This function calls:
 21258 ;;		_Byte_GetBit
 21259 ;; This function is called by:
 21260 ;;		_Console_Render
 21261 ;; This function uses a non-reentrant model
 21262 ;;
 21263                           
 21264                           	psect	text119
 21265  014226                     __ptext119:
 21266                           	opt stack 0
 21267  014226                     _Console_MakeField:
 21268                           	opt stack 20
 21269                           
 21270                           ;incstack = 0
 21271                           ;Console_MakeField@pInput stored from wreg
 21272  014226  0100               	movlb	0	; () banked
 21273  014228  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 21274                           
 21275                           ;Console.c: 437: static Colour Fill[7][5];
 21276                           ;Console.c: 438: pInput -= 32;
 21277  01422A  0E20               	movlw	32
 21278  01422C  0100               	movlb	0	; () banked
 21279  01422E  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 21280                           
 21281                           ; BSR set to: 0
 21282                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 21283  014230  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 21284  014232  0D05               	mullw	5
 21285  014234  CFF3 F069          	movff	prodl,Console_MakeField@Index
 21286  014238  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 21287                           
 21288                           ; BSR set to: 0
 21289                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 21290  01423C  0E65               	movlw	low _Font5x7
 21291  01423E  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 21292  014240  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 21293  014242  0EFC               	movlw	high _Font5x7
 21294  014244  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 21295  014246  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 21296                           
 21297                           ; BSR set to: 0
 21298                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 21299  014248  0E00               	movlw	0
 21300  01424A  6F70               	movwf	Console_MakeField@x& (0+255),b
 21301  01424C                     l14439:
 21302                           
 21303                           ; BSR set to: 0
 21304  01424C  0E04               	movlw	4
 21305  01424E  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 21306  014250  D001               	goto	l1077
 21307  014252  D037               	goto	u11830
 21308  014254                     l1077:
 21309                           
 21310                           ; BSR set to: 0
 21311                           ;Console.c: 444: {
 21312                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 21313                           
 21314                           ; BSR set to: 0
 21315  014254  0E00               	movlw	0
 21316  014256  6F71               	movwf	Console_MakeField@y& (0+255),b
 21317  014258                     l14445:
 21318                           
 21319                           ; BSR set to: 0
 21320  014258  0E06               	movlw	6
 21321  01425A  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 21322  01425C  D001               	goto	l1079
 21323  01425E  D02D               	goto	u11820
 21324  014260                     l1079:
 21325                           
 21326                           ; BSR set to: 0
 21327                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 21328                           
 21329                           ; BSR set to: 0
 21330  014260  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 21331  014264  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 21332  014268  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 21333  01426C  EC61  F0AE         	call	_Byte_GetBit	;wreg free
 21334  014270  0900               	iorlw	0
 21335  014272  A4D8               	btfss	status,2,c
 21336  014274  D005               	goto	l1082
 21337  014276  C039  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 21338  01427A  C03A  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 21339  01427E  D004               	goto	l1084
 21340  014280                     l1082:
 21341  014280  C1F5  F06E         	movff	_gForecolour,_Console_MakeField$10974
 21342  014284  C1F6  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 21343  014288                     l1084:
 21344  014288  0100               	movlb	0	; () banked
 21345  01428A  5171               	movf	Console_MakeField@y& (0+255),w,b
 21346  01428C  0D0A               	mullw	10
 21347  01428E  0E82               	movlw	low Console_MakeField@Fill
 21348  014290  6F67               	movwf	??_Console_MakeField& (0+255),b
 21349  014292  0E02               	movlw	high Console_MakeField@Fill
 21350  014294  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 21351  014296  50F3               	movf	prodl,w,c
 21352  014298  2767               	addwf	??_Console_MakeField& (0+255),f,b
 21353  01429A  50F4               	movf	prodh,w,c
 21354  01429C  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 21355  01429E  5170               	movf	Console_MakeField@x& (0+255),w,b
 21356  0142A0  0D02               	mullw	2
 21357  0142A2  50F3               	movf	prodl,w,c
 21358  0142A4  2567               	addwf	??_Console_MakeField& (0+255),w,b
 21359  0142A6  6ED9               	movwf	fsr2l,c
 21360  0142A8  50F4               	movf	prodh,w,c
 21361  0142AA  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 21362  0142AC  6EDA               	movwf	fsr2h,c
 21363  0142AE  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 21364  0142B2  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 21365                           
 21366                           ; BSR set to: 0
 21367  0142B6  2B71               	incf	Console_MakeField@y& (0+255),f,b
 21368  0142B8  D7CF               	goto	l14445
 21369  0142BA                     u11820:
 21370                           
 21371                           ; BSR set to: 0
 21372                           ;Console.c: 447: Column += 1;
 21373                           
 21374                           ; BSR set to: 0
 21375  0142BA  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 21376  0142BC  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 21377  0142BE  2B70               	incf	Console_MakeField@x& (0+255),f,b
 21378  0142C0  D7C5               	goto	l14439
 21379  0142C2                     u11830:
 21380                           
 21381                           ; BSR set to: 0
 21382                           ;Console.c: 448: }
 21383                           ;Console.c: 449: return (ColourPtr)Fill;
 21384                           
 21385                           ; BSR set to: 0
 21386  0142C2  0E82               	movlw	low Console_MakeField@Fill
 21387  0142C4  6F65               	movwf	?_Console_MakeField& (0+255),b
 21388  0142C6  0E02               	movlw	high Console_MakeField@Fill
 21389  0142C8  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 21390  0142CA  0012               	return	
 21391  0142CC                     __end_of_Console_MakeField:
 21392                           	opt stack 0
 21393                           tosu	equ	0xFFF
 21394                           tosh	equ	0xFFE
 21395                           tosl	equ	0xFFD
 21396                           pclath	equ	0xFFA
 21397                           tblptru	equ	0xFF8
 21398                           tblptrh	equ	0xFF7
 21399                           tblptrl	equ	0xFF6
 21400                           tablat	equ	0xFF5
 21401                           prodh	equ	0xFF4
 21402                           prodl	equ	0xFF3
 21403                           intcon	equ	0xFF2
 21404                           indf0	equ	0xFEF
 21405                           postinc0	equ	0xFEE
 21406                           fsr0h	equ	0xFEA
 21407                           fsr0l	equ	0xFE9
 21408                           wreg	equ	0xFE8
 21409                           indf1	equ	0xFE7
 21410                           postdec1	equ	0xFE5
 21411                           fsr1h	equ	0xFE2
 21412                           fsr1l	equ	0xFE1
 21413                           indf2	equ	0xFDF
 21414                           postinc2	equ	0xFDE
 21415                           postdec2	equ	0xFDD
 21416                           plusw2	equ	0xFDB
 21417                           fsr2h	equ	0xFDA
 21418                           fsr2l	equ	0xFD9
 21419                           status	equ	0xFD8
 21420                           
 21421 ;; *************** function _Byte_GetBit *****************
 21422 ;; Defined at:
 21423 ;;		line 38 in file "Library/Types.c"
 21424 ;; Parameters:    Size  Location     Type
 21425 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21426 ;;		 -> Font5x7(480), 
 21427 ;;  pBit            1    2[BANK0 ] unsigned char 
 21428 ;; Auto vars:     Size  Location     Type
 21429 ;;  Output          1    4[BANK0 ] unsigned char 
 21430 ;; Return value:  Size  Location     Type
 21431 ;;                  1    wreg      unsigned char 
 21432 ;; Registers used:
 21433 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 21434 ;; Tracked objects:
 21435 ;;		On entry : 0/0
 21436 ;;		On exit  : 0/0
 21437 ;;		Unchanged: 0/0
 21438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21439 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21442 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21443 ;;Total ram usage:        5 bytes
 21444 ;; Hardware stack levels used:    1
 21445 ;; Hardware stack levels required when called:    7
 21446 ;; This function calls:
 21447 ;;		Nothing
 21448 ;; This function is called by:
 21449 ;;		_Console_MakeField
 21450 ;;		_Word_GetBit
 21451 ;; This function uses a non-reentrant model
 21452 ;;
 21453                           
 21454                           	psect	text120
 21455  015CC2                     __ptext120:
 21456                           	opt stack 0
 21457  015CC2                     _Byte_GetBit:
 21458                           	opt stack 20
 21459                           
 21460                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 21461                           
 21462                           ; BSR set to: 0
 21463                           ;incstack = 0
 21464  015CC2  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 21465  015CC6  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 21466  015CCA                     	if	0	;tblptru may be non-zero
 21467  015CCA                     	endif
 21468  015CCA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21469  015CCA  0E00               	movlw	low (__mediumconst shr (0+16))
 21470  015CCC  6EF8               	movwf	tblptru,c
 21471  015CCE                     	endif
 21472  015CCE  0008               	tblrd		*
 21473  015CD0  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 21474                           
 21475                           ;Types.c: 42: Output >>= pBit;
 21476  015CD4  0100               	movlb	0	; () banked
 21477  015CD6  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 21478  015CD8  6F63               	movwf	??_Byte_GetBit& (0+255),b
 21479  015CDA  D002               	goto	u11400
 21480  015CDC                     u11405:
 21481  015CDC  90D8               	bcf	status,0,c
 21482  015CDE  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 21483  015CE0                     u11400:
 21484  015CE0  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 21485  015CE2  D7FC               	goto	u11405
 21486                           
 21487                           ;Types.c: 43: Output &= 1;
 21488  015CE4  0E01               	movlw	1
 21489  015CE6  0100               	movlb	0	; () banked
 21490  015CE8  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 21491                           
 21492                           ; BSR set to: 0
 21493                           ;Types.c: 44: return Output;
 21494  015CEA  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 21495  015CEC  0012               	return	
 21496  015CEE                     __end_of_Byte_GetBit:
 21497                           	opt stack 0
 21498                           tosu	equ	0xFFF
 21499                           tosh	equ	0xFFE
 21500                           tosl	equ	0xFFD
 21501                           pclath	equ	0xFFA
 21502                           tblptru	equ	0xFF8
 21503                           tblptrh	equ	0xFF7
 21504                           tblptrl	equ	0xFF6
 21505                           tablat	equ	0xFF5
 21506                           prodh	equ	0xFF4
 21507                           prodl	equ	0xFF3
 21508                           intcon	equ	0xFF2
 21509                           indf0	equ	0xFEF
 21510                           postinc0	equ	0xFEE
 21511                           fsr0h	equ	0xFEA
 21512                           fsr0l	equ	0xFE9
 21513                           wreg	equ	0xFE8
 21514                           indf1	equ	0xFE7
 21515                           postdec1	equ	0xFE5
 21516                           fsr1h	equ	0xFE2
 21517                           fsr1l	equ	0xFE1
 21518                           indf2	equ	0xFDF
 21519                           postinc2	equ	0xFDE
 21520                           postdec2	equ	0xFDD
 21521                           plusw2	equ	0xFDB
 21522                           fsr2h	equ	0xFDA
 21523                           fsr2l	equ	0xFD9
 21524                           status	equ	0xFD8
 21525                           
 21526 ;; *************** function _ADCAverage *****************
 21527 ;; Defined at:
 21528 ;;		line 111 in file "main.c"
 21529 ;; Parameters:    Size  Location     Type
 21530 ;;		None
 21531 ;; Auto vars:     Size  Location     Type
 21532 ;;		None
 21533 ;; Return value:  Size  Location     Type
 21534 ;;                  2  2128[None  ] int 
 21535 ;; Registers used:
 21536 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21537 ;; Tracked objects:
 21538 ;;		On entry : 0/0
 21539 ;;		On exit  : 0/0
 21540 ;;		Unchanged: 0/0
 21541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21543 ;;      Locals:         0       0       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21544 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21545 ;;      Totals:         0       2       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21546 ;;Total ram usage:       26 bytes
 21547 ;; Hardware stack levels used:    1
 21548 ;; Hardware stack levels required when called:   11
 21549 ;; This function calls:
 21550 ;;		_FunctReadADC
 21551 ;;		_HMI_Render
 21552 ;;		_HMI_SetNumber
 21553 ;;		___awdiv
 21554 ;;		___fladd
 21555 ;;		___flmul
 21556 ;;		___flneg
 21557 ;;		___fltol
 21558 ;;		___xxtofl
 21559 ;;		_pow
 21560 ;; This function is called by:
 21561 ;;		_Sensor_Observe2
 21562 ;;		_Closest_Object2
 21563 ;;		_Sensor_Observe
 21564 ;;		_Closest_Object
 21565 ;;		_main
 21566 ;; This function uses a non-reentrant model
 21567 ;;
 21568                           
 21569                           	psect	text121
 21570  0111D2                     __ptext121:
 21571                           	opt stack 0
 21572  0111D2                     _ADCAverage:
 21573                           	opt stack 18
 21574                           
 21575                           ;main.c: 113: total = total - readings[readIndex];
 21576                           
 21577                           ; BSR set to: 0
 21578                           ;incstack = 0
 21579  0111D2  90D8               	bcf	status,0,c
 21580  0111D4  3429               	rlcf	_readIndex,w,c
 21581  0111D6  6ED9               	movwf	fsr2l,c
 21582  0111D8  342A               	rlcf	_readIndex+1,w,c
 21583  0111DA  6EDA               	movwf	fsr2h,c
 21584  0111DC  0E00               	movlw	low _readings
 21585  0111DE  26D9               	addwf	fsr2l,f,c
 21586  0111E0  0E02               	movlw	high _readings
 21587  0111E2  22DA               	addwfc	fsr2h,f,c
 21588  0111E4  CFDE F0D7          	movff	postinc2,??_ADCAverage
 21589  0111E8  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 21590  0111EC  0100               	movlb	0	; () banked
 21591  0111EE  1FD7               	comf	??_ADCAverage& (0+255),f,b
 21592  0111F0  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
 21593  0111F2  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
 21594  0111F4  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
 21595  0111F6  0101               	movlb	1	; () banked
 21596  0111F8  5122               	movf	_total& (0+255),w,b
 21597  0111FA  0100               	movlb	0	; () banked
 21598  0111FC  25D7               	addwf	??_ADCAverage& (0+255),w,b
 21599  0111FE  0101               	movlb	1	; () banked
 21600  011200  6F22               	movwf	_total& (0+255),b
 21601  011202  5123               	movf	(_total+1)& (0+255),w,b
 21602  011204  0100               	movlb	0	; () banked
 21603  011206  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 21604  011208  0101               	movlb	1	; () banked
 21605  01120A  6F23               	movwf	(_total+1)& (0+255),b
 21606                           
 21607                           ; BSR set to: 1
 21608                           ;main.c: 115: readings[readIndex] = (FunctReadADC(0));
 21609  01120C  0E00               	movlw	0
 21610  01120E  0100               	movlb	0	; () banked
 21611  011210  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
 21612  011212  0E00               	movlw	0
 21613  011214  6F60               	movwf	FunctReadADC@channel& (0+255),b
 21614  011216  ECBE  F0AC         	call	_FunctReadADC	;wreg free
 21615  01121A  90D8               	bcf	status,0,c
 21616  01121C  3429               	rlcf	_readIndex,w,c
 21617  01121E  6ED9               	movwf	fsr2l,c
 21618  011220  342A               	rlcf	_readIndex+1,w,c
 21619  011222  6EDA               	movwf	fsr2h,c
 21620  011224  0E00               	movlw	low _readings
 21621  011226  26D9               	addwf	fsr2l,f,c
 21622  011228  0E02               	movlw	high _readings
 21623  01122A  22DA               	addwfc	fsr2h,f,c
 21624  01122C  0100               	movlb	0	; () banked
 21625  01122E  C060  FFDE         	movff	?_FunctReadADC,postinc2
 21626  011232  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
 21627                           
 21628                           ; BSR set to: 0
 21629                           ;main.c: 117: total = total + readings[readIndex];
 21630  011236  90D8               	bcf	status,0,c
 21631  011238  3429               	rlcf	_readIndex,w,c
 21632  01123A  6ED9               	movwf	fsr2l,c
 21633  01123C  342A               	rlcf	_readIndex+1,w,c
 21634  01123E  6EDA               	movwf	fsr2h,c
 21635  011240  0E00               	movlw	low _readings
 21636  011242  26D9               	addwf	fsr2l,f,c
 21637  011244  0E02               	movlw	high _readings
 21638  011246  22DA               	addwfc	fsr2h,f,c
 21639  011248  CFDE F0D7          	movff	postinc2,??_ADCAverage
 21640  01124C  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 21641  011250  0101               	movlb	1	; () banked
 21642  011252  5122               	movf	_total& (0+255),w,b
 21643  011254  0100               	movlb	0	; () banked
 21644  011256  25D7               	addwf	??_ADCAverage& (0+255),w,b
 21645  011258  0101               	movlb	1	; () banked
 21646  01125A  6F22               	movwf	_total& (0+255),b
 21647  01125C  5123               	movf	(_total+1)& (0+255),w,b
 21648  01125E  0100               	movlb	0	; () banked
 21649  011260  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 21650  011262  0101               	movlb	1	; () banked
 21651  011264  6F23               	movwf	(_total+1)& (0+255),b
 21652                           
 21653                           ; BSR set to: 1
 21654                           ;main.c: 119: readIndex++;
 21655  011266  4A29               	infsnz	_readIndex,f,c
 21656  011268  2A2A               	incf	_readIndex+1,f,c
 21657                           
 21658                           ; BSR set to: 1
 21659                           ;main.c: 122: if (readIndex >= numReadings) {
 21660  01126A  5049               	movf	_numReadings,w,c
 21661  01126C  5C29               	subwf	_readIndex,w,c
 21662  01126E  502A               	movf	_readIndex+1,w,c
 21663  011270  0A80               	xorlw	128
 21664  011272  0100               	movlb	0	; () banked
 21665  011274  6FD7               	movwf	??_ADCAverage& (0+255),b
 21666  011276  504A               	movf	_numReadings+1,w,c
 21667  011278  0A80               	xorlw	128
 21668  01127A  59D7               	subwfb	??_ADCAverage& (0+255),w,b
 21669  01127C  A0D8               	btfss	status,0,c
 21670  01127E  D004               	goto	l2129
 21671                           
 21672                           ; BSR set to: 0
 21673                           ;main.c: 124: readIndex = 0;
 21674  011280  0E00               	movlw	0
 21675  011282  6E2A               	movwf	_readIndex+1,c
 21676  011284  0E00               	movlw	0
 21677  011286  6E29               	movwf	_readIndex,c
 21678  011288                     l2129:
 21679                           
 21680                           ; BSR set to: 0
 21681                           ;main.c: 125: }
 21682                           ;main.c: 128: average = total / numReadings;
 21683                           
 21684                           ; BSR set to: 0
 21685  011288  C122  F060         	movff	_total,___awdiv@dividend
 21686  01128C  C123  F061         	movff	_total+1,___awdiv@dividend+1
 21687  011290  C049  F062         	movff	_numReadings,___awdiv@divisor
 21688  011294  C04A  F063         	movff	_numReadings+1,___awdiv@divisor+1
 21689  011298  EC3D  F0A4         	call	___awdiv	;wreg free
 21690  01129C  C060  F0E9         	movff	?___awdiv,_average
 21691  0112A0  C061  F0EA         	movff	?___awdiv+1,_average+1
 21692                           
 21693                           ;main.c: 129: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 21694  0112A4  C0E9  F060         	movff	_average,___xxtofl@val
 21695  0112A8  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21696  0112AC  0100               	movlb	0	; () banked
 21697  0112AE  0E00               	movlw	0
 21698  0112B0  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21699  0112B2  0EFF               	movlw	-1
 21700  0112B4  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21701  0112B6  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21702  0112B8  0E01               	movlw	1
 21703  0112BA  ECF7  F096         	call	___xxtofl
 21704  0112BE  C060  F300         	movff	?___xxtofl,_ADCAverage$15653
 21705  0112C2  C061  F301         	movff	?___xxtofl+1,_ADCAverage$15653+1
 21706  0112C6  C062  F302         	movff	?___xxtofl+2,_ADCAverage$15653+2
 21707  0112CA  C063  F303         	movff	?___xxtofl+3,_ADCAverage$15653+3
 21708                           
 21709                           ;main.c: 129: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 21710  0112CE  0E00               	movlw	0
 21711  0112D0  0100               	movlb	0	; () banked
 21712  0112D2  6FC6               	movwf	pow@y& (0+255),b
 21713  0112D4  0E00               	movlw	0
 21714  0112D6  6FC7               	movwf	(pow@y+1)& (0+255),b
 21715  0112D8  0E00               	movlw	0
 21716  0112DA  6FC8               	movwf	(pow@y+2)& (0+255),b
 21717  0112DC  0E40               	movlw	64
 21718  0112DE  6FC9               	movwf	(pow@y+3)& (0+255),b
 21719  0112E0  C300  F0C2         	movff	_ADCAverage$15653,pow@x
 21720  0112E4  C301  F0C3         	movff	_ADCAverage$15653+1,pow@x+1
 21721  0112E8  C302  F0C4         	movff	_ADCAverage$15653+2,pow@x+2
 21722  0112EC  C303  F0C5         	movff	_ADCAverage$15653+3,pow@x+3
 21723  0112F0  EC94  F090         	call	_pow	;wreg free
 21724  0112F4  C0C2  F304         	movff	?_pow,_ADCAverage$15654
 21725  0112F8  C0C3  F305         	movff	?_pow+1,_ADCAverage$15654+1
 21726  0112FC  C0C4  F306         	movff	?_pow+2,_ADCAverage$15654+2
 21727  011300  C0C5  F307         	movff	?_pow+3,_ADCAverage$15654+3
 21728                           
 21729                           ;main.c: 129: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 21730  011304  C0E9  F060         	movff	_average,___xxtofl@val
 21731  011308  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21732  01130C  0100               	movlb	0	; () banked
 21733  01130E  0E00               	movlw	0
 21734  011310  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21735  011312  0EFF               	movlw	-1
 21736  011314  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21737  011316  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21738  011318  0E01               	movlw	1
 21739  01131A  ECF7  F096         	call	___xxtofl
 21740  01131E  C060  F308         	movff	?___xxtofl,_ADCAverage$15655
 21741  011322  C061  F309         	movff	?___xxtofl+1,_ADCAverage$15655+1
 21742  011326  C062  F30A         	movff	?___xxtofl+2,_ADCAverage$15655+2
 21743  01132A  C063  F30B         	movff	?___xxtofl+3,_ADCAverage$15655+3
 21744                           
 21745                           ;main.c: 129: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 21746  01132E  0E00               	movlw	0
 21747  011330  0100               	movlb	0	; () banked
 21748  011332  6FC6               	movwf	pow@y& (0+255),b
 21749  011334  0E00               	movlw	0
 21750  011336  6FC7               	movwf	(pow@y+1)& (0+255),b
 21751  011338  0E40               	movlw	64
 21752  01133A  6FC8               	movwf	(pow@y+2)& (0+255),b
 21753  01133C  0E40               	movlw	64
 21754  01133E  6FC9               	movwf	(pow@y+3)& (0+255),b
 21755  011340  C308  F0C2         	movff	_ADCAverage$15655,pow@x
 21756  011344  C309  F0C3         	movff	_ADCAverage$15655+1,pow@x+1
 21757  011348  C30A  F0C4         	movff	_ADCAverage$15655+2,pow@x+2
 21758  01134C  C30B  F0C5         	movff	_ADCAverage$15655+3,pow@x+3
 21759  011350  EC94  F090         	call	_pow	;wreg free
 21760  011354  C0C2  F30C         	movff	?_pow,_ADCAverage$15656
 21761  011358  C0C3  F30D         	movff	?_pow+1,_ADCAverage$15656+1
 21762  01135C  C0C4  F30E         	movff	?_pow+2,_ADCAverage$15656+2
 21763  011360  C0C5  F30F         	movff	?_pow+3,_ADCAverage$15656+3
 21764                           
 21765                           ;main.c: 129: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 21766  011364  0EA6               	movlw	166
 21767  011366  0100               	movlb	0	; () banked
 21768  011368  6F72               	movwf	___flmul@a& (0+255),b
 21769  01136A  0E9B               	movlw	155
 21770  01136C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21771  01136E  0EC4               	movlw	196
 21772  011370  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21773  011372  0E3A               	movlw	58
 21774  011374  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21775  011376  C304  F06E         	movff	_ADCAverage$15654,___flmul@b
 21776  01137A  C305  F06F         	movff	_ADCAverage$15654+1,___flmul@b+1
 21777  01137E  C306  F070         	movff	_ADCAverage$15654+2,___flmul@b+2
 21778  011382  C307  F071         	movff	_ADCAverage$15654+3,___flmul@b+3
 21779  011386  ECA1  F085         	call	___flmul	;wreg free
 21780  01138A  C06E  F08F         	movff	?___flmul,___fladd@a
 21781  01138E  C06F  F090         	movff	?___flmul+1,___fladd@a+1
 21782  011392  C070  F091         	movff	?___flmul+2,___fladd@a+2
 21783  011396  C071  F092         	movff	?___flmul+3,___fladd@a+3
 21784  01139A  0E87               	movlw	135
 21785  01139C  0100               	movlb	0	; () banked
 21786  01139E  6F72               	movwf	___flmul@a& (0+255),b
 21787  0113A0  0E97               	movlw	151
 21788  0113A2  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21789  0113A4  0E71               	movlw	113
 21790  0113A6  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21791  0113A8  0EB5               	movlw	181
 21792  0113AA  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21793  0113AC  C30C  F06E         	movff	_ADCAverage$15656,___flmul@b
 21794  0113B0  C30D  F06F         	movff	_ADCAverage$15656+1,___flmul@b+1
 21795  0113B4  C30E  F070         	movff	_ADCAverage$15656+2,___flmul@b+2
 21796  0113B8  C30F  F071         	movff	_ADCAverage$15656+3,___flmul@b+3
 21797  0113BC  ECA1  F085         	call	___flmul	;wreg free
 21798  0113C0  C06E  F08B         	movff	?___flmul,___fladd@b
 21799  0113C4  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 21800  0113C8  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 21801  0113CC  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 21802  0113D0  EC4A  F087         	call	___fladd	;wreg free
 21803  0113D4  C08B  F310         	movff	?___fladd,_ADCAverage$15657
 21804  0113D8  C08C  F311         	movff	?___fladd+1,_ADCAverage$15657+1
 21805  0113DC  C08D  F312         	movff	?___fladd+2,_ADCAverage$15657+2
 21806  0113E0  C08E  F313         	movff	?___fladd+3,_ADCAverage$15657+3
 21807                           
 21808                           ;main.c: 129: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 21809  0113E4  0E8C               	movlw	140
 21810  0113E6  0100               	movlb	0	; () banked
 21811  0113E8  6F72               	movwf	___flmul@a& (0+255),b
 21812  0113EA  0EB9               	movlw	185
 21813  0113EC  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21814  0113EE  0E6B               	movlw	107
 21815  0113F0  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21816  0113F2  0E3F               	movlw	63
 21817  0113F4  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21818  0113F6  C0E9  F060         	movff	_average,___xxtofl@val
 21819  0113FA  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21820  0113FE  0E00               	movlw	0
 21821  011400  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21822  011402  0EFF               	movlw	-1
 21823  011404  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21824  011406  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21825  011408  0E01               	movlw	1
 21826  01140A  ECF7  F096         	call	___xxtofl
 21827  01140E  C060  F06E         	movff	?___xxtofl,___flmul@b
 21828  011412  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 21829  011416  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 21830  01141A  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 21831  01141E  ECA1  F085         	call	___flmul	;wreg free
 21832  011422  C06E  F087         	movff	?___flmul,___flneg@f1
 21833  011426  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
 21834  01142A  C070  F089         	movff	?___flmul+2,___flneg@f1+2
 21835  01142E  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
 21836  011432  EC1A  F0AE         	call	___flneg	;wreg free
 21837  011436  C087  F08F         	movff	?___flneg,___fladd@a
 21838  01143A  C088  F090         	movff	?___flneg+1,___fladd@a+1
 21839  01143E  C089  F091         	movff	?___flneg+2,___fladd@a+2
 21840  011442  C08A  F092         	movff	?___flneg+3,___fladd@a+3
 21841  011446  C310  F08B         	movff	_ADCAverage$15657,___fladd@b
 21842  01144A  C311  F08C         	movff	_ADCAverage$15657+1,___fladd@b+1
 21843  01144E  C312  F08D         	movff	_ADCAverage$15657+2,___fladd@b+2
 21844  011452  C313  F08E         	movff	_ADCAverage$15657+3,___fladd@b+3
 21845  011456  EC4A  F087         	call	___fladd	;wreg free
 21846  01145A  C08B  F314         	movff	?___fladd,_ADCAverage$15658
 21847  01145E  C08C  F315         	movff	?___fladd+1,_ADCAverage$15658+1
 21848  011462  C08D  F316         	movff	?___fladd+2,_ADCAverage$15658+2
 21849  011466  C08E  F317         	movff	?___fladd+3,_ADCAverage$15658+3
 21850                           
 21851                           ;main.c: 129: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 21852  01146A  0E7B               	movlw	123
 21853  01146C  0100               	movlb	0	; () banked
 21854  01146E  6F8F               	movwf	___fladd@a& (0+255),b
 21855  011470  0E54               	movlw	84
 21856  011472  6F90               	movwf	(___fladd@a+1)& (0+255),b
 21857  011474  0E63               	movlw	99
 21858  011476  6F91               	movwf	(___fladd@a+2)& (0+255),b
 21859  011478  0E43               	movlw	67
 21860  01147A  6F92               	movwf	(___fladd@a+3)& (0+255),b
 21861  01147C  C314  F08B         	movff	_ADCAverage$15658,___fladd@b
 21862  011480  C315  F08C         	movff	_ADCAverage$15658+1,___fladd@b+1
 21863  011484  C316  F08D         	movff	_ADCAverage$15658+2,___fladd@b+2
 21864  011488  C317  F08E         	movff	_ADCAverage$15658+3,___fladd@b+3
 21865  01148C  EC4A  F087         	call	___fladd	;wreg free
 21866  011490  C08B  F09F         	movff	?___fladd,___fltol@f1
 21867  011494  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 21868  011498  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 21869  01149C  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 21870  0114A0  ECE9  F09E         	call	___fltol	;wreg free
 21871  0114A4  C09F  F0E9         	movff	?___fltol,_average
 21872  0114A8  C0A0  F0EA         	movff	?___fltol+1,_average+1
 21873                           
 21874                           ;main.c: 132: HMI_SetNumber(average);
 21875  0114AC  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
 21876  0114B0  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
 21877  0114B4  ECDA  F0AE         	call	_HMI_SetNumber	;wreg free
 21878                           
 21879                           ;main.c: 133: HMI_Render();
 21880  0114B8  EC4F  F0AD         	call	_HMI_Render	;wreg free
 21881  0114BC  0012               	return	
 21882  0114BE                     __end_of_ADCAverage:
 21883                           	opt stack 0
 21884                           tosu	equ	0xFFF
 21885                           tosh	equ	0xFFE
 21886                           tosl	equ	0xFFD
 21887                           pclath	equ	0xFFA
 21888                           tblptru	equ	0xFF8
 21889                           tblptrh	equ	0xFF7
 21890                           tblptrl	equ	0xFF6
 21891                           tablat	equ	0xFF5
 21892                           prodh	equ	0xFF4
 21893                           prodl	equ	0xFF3
 21894                           intcon	equ	0xFF2
 21895                           indf0	equ	0xFEF
 21896                           postinc0	equ	0xFEE
 21897                           fsr0h	equ	0xFEA
 21898                           fsr0l	equ	0xFE9
 21899                           wreg	equ	0xFE8
 21900                           indf1	equ	0xFE7
 21901                           postdec1	equ	0xFE5
 21902                           fsr1h	equ	0xFE2
 21903                           fsr1l	equ	0xFE1
 21904                           indf2	equ	0xFDF
 21905                           postinc2	equ	0xFDE
 21906                           postdec2	equ	0xFDD
 21907                           plusw2	equ	0xFDB
 21908                           fsr2h	equ	0xFDA
 21909                           fsr2l	equ	0xFD9
 21910                           status	equ	0xFD8
 21911                           
 21912 ;; *************** function _pow *****************
 21913 ;; Defined at:
 21914 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
 21915 ;; Parameters:    Size  Location     Type
 21916 ;;  x               4   98[BANK0 ] int 
 21917 ;;  y               4  102[BANK0 ] int 
 21918 ;; Auto vars:     Size  Location     Type
 21919 ;;  yi              4  115[BANK0 ] unsigned long 
 21920 ;;  sign            1  114[BANK0 ] unsigned char 
 21921 ;; Return value:  Size  Location     Type
 21922 ;;                  4   98[BANK0 ] unsigned char 
 21923 ;; Registers used:
 21924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21925 ;; Tracked objects:
 21926 ;;		On entry : 0/0
 21927 ;;		On exit  : 0/0
 21928 ;;		Unchanged: 0/0
 21929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21930 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21931 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21933 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21934 ;;Total ram usage:       21 bytes
 21935 ;; Hardware stack levels used:    1
 21936 ;; Hardware stack levels required when called:   10
 21937 ;; This function calls:
 21938 ;;		___flge
 21939 ;;		___flmul
 21940 ;;		___flneg
 21941 ;;		___fltol
 21942 ;;		___xxtofl
 21943 ;;		_exp
 21944 ;;		_log
 21945 ;; This function is called by:
 21946 ;;		_ADCAverage
 21947 ;; This function uses a non-reentrant model
 21948 ;;
 21949                           
 21950                           	psect	text122
 21951  012128                     __ptext122:
 21952                           	opt stack 0
 21953  012128                     _pow:
 21954                           	opt stack 18
 21955                           
 21956                           ;incstack = 0
 21957  012128  0E00               	movlw	0
 21958  01212A  0100               	movlb	0	; () banked
 21959  01212C  6FD2               	movwf	pow@sign& (0+255),b
 21960                           
 21961                           ; BSR set to: 0
 21962  01212E  51C2               	movf	pow@x& (0+255),w,b
 21963  012130  11C3               	iorwf	(pow@x+1)& (0+255),w,b
 21964  012132  11C4               	iorwf	(pow@x+2)& (0+255),w,b
 21965  012134  11C5               	iorwf	(pow@x+3)& (0+255),w,b
 21966  012136  A4D8               	btfss	status,2,c
 21967  012138  D024               	goto	l2756
 21968                           
 21969                           ; BSR set to: 0
 21970  01213A  0E00               	movlw	0
 21971  01213C  6F60               	movwf	___flge@ff1& (0+255),b
 21972  01213E  0E00               	movlw	0
 21973  012140  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 21974  012142  0E00               	movlw	0
 21975  012144  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 21976  012146  0E00               	movlw	0
 21977  012148  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 21978  01214A  C0C6  F064         	movff	pow@y,___flge@ff2
 21979  01214E  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
 21980  012152  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
 21981  012156  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
 21982  01215A  ECC5  F09A         	call	___flge	;wreg free
 21983  01215E  0100               	movlb	0	; () banked
 21984  012160  A0D8               	btfss	status,0,c
 21985  012162  D005               	goto	l2757
 21986                           
 21987                           ; BSR set to: 0
 21988  012164  0E00               	movlw	0
 21989  012166  0101               	movlb	1	; () banked
 21990  012168  6F1B               	movwf	(_errno+1)& (0+255),b
 21991  01216A  0E21               	movlw	33
 21992  01216C  6F1A               	movwf	_errno& (0+255),b
 21993  01216E                     l2757:
 21994  01216E  0E00               	movlw	0
 21995  012170  0100               	movlb	0	; () banked
 21996  012172  6FC2               	movwf	?_pow& (0+255),b
 21997  012174  0E00               	movlw	0
 21998  012176  6FC3               	movwf	(?_pow+1)& (0+255),b
 21999  012178  0E00               	movlw	0
 22000  01217A  6FC4               	movwf	(?_pow+2)& (0+255),b
 22001  01217C  0E00               	movlw	0
 22002  01217E  6FC5               	movwf	(?_pow+3)& (0+255),b
 22003                           
 22004                           ; BSR set to: 0
 22005  012180  0012               	return	
 22006  012182                     l2756:
 22007                           
 22008                           ; BSR set to: 0
 22009                           
 22010                           ; BSR set to: 0
 22011  012182  51C6               	movf	pow@y& (0+255),w,b
 22012  012184  11C7               	iorwf	(pow@y+1)& (0+255),w,b
 22013  012186  11C8               	iorwf	(pow@y+2)& (0+255),w,b
 22014  012188  11C9               	iorwf	(pow@y+3)& (0+255),w,b
 22015  01218A  A4D8               	btfss	status,2,c
 22016  01218C  D009               	goto	l2759
 22017                           
 22018                           ; BSR set to: 0
 22019  01218E  0E00               	movlw	0
 22020  012190  6FC2               	movwf	?_pow& (0+255),b
 22021  012192  0E00               	movlw	0
 22022  012194  6FC3               	movwf	(?_pow+1)& (0+255),b
 22023  012196  0E80               	movlw	128
 22024  012198  6FC4               	movwf	(?_pow+2)& (0+255),b
 22025  01219A  0E3F               	movlw	63
 22026  01219C  6FC5               	movwf	(?_pow+3)& (0+255),b
 22027                           
 22028                           ; BSR set to: 0
 22029  01219E  0012               	return	
 22030  0121A0                     l2759:
 22031                           
 22032                           ; BSR set to: 0
 22033                           
 22034                           ; BSR set to: 0
 22035  0121A0  AFC5               	btfss	(pow@x+3)& (0+255),7,b
 22036  0121A2  D04F               	goto	l2760
 22037                           
 22038                           ; BSR set to: 0
 22039  0121A4  C0C6  F09F         	movff	pow@y,___fltol@f1
 22040  0121A8  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
 22041  0121AC  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
 22042  0121B0  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
 22043  0121B4  ECE9  F09E         	call	___fltol	;wreg free
 22044  0121B8  C09F  F0D3         	movff	?___fltol,pow@yi
 22045  0121BC  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
 22046  0121C0  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
 22047  0121C4  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
 22048  0121C8  C0D3  F060         	movff	pow@yi,___xxtofl@val
 22049  0121CC  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
 22050  0121D0  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
 22051  0121D4  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
 22052  0121D8  0E00               	movlw	0
 22053  0121DA  ECF7  F096         	call	___xxtofl
 22054  0121DE  0100               	movlb	0	; () banked
 22055  0121E0  51C6               	movf	pow@y& (0+255),w,b
 22056  0121E2  1960               	xorwf	?___xxtofl& (0+255),w,b
 22057  0121E4  E10A               	bnz	u11960
 22058  0121E6  51C7               	movf	(pow@y+1)& (0+255),w,b
 22059  0121E8  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 22060  0121EA  E107               	bnz	u11960
 22061  0121EC  51C8               	movf	(pow@y+2)& (0+255),w,b
 22062  0121EE  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 22063  0121F0  E104               	bnz	u11960
 22064  0121F2  51C9               	movf	(pow@y+3)& (0+255),w,b
 22065  0121F4  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 22066  0121F6  B4D8               	btfsc	status,2,c
 22067  0121F8  D00F               	goto	l2761
 22068  0121FA                     u11960:
 22069                           
 22070                           ; BSR set to: 0
 22071  0121FA  0E00               	movlw	0
 22072  0121FC  0101               	movlb	1	; () banked
 22073  0121FE  6F1B               	movwf	(_errno+1)& (0+255),b
 22074  012200  0E21               	movlw	33
 22075  012202  6F1A               	movwf	_errno& (0+255),b
 22076  012204  0E00               	movlw	0
 22077  012206  0100               	movlb	0	; () banked
 22078  012208  6FC2               	movwf	?_pow& (0+255),b
 22079  01220A  0E00               	movlw	0
 22080  01220C  6FC3               	movwf	(?_pow+1)& (0+255),b
 22081  01220E  0E00               	movlw	0
 22082  012210  6FC4               	movwf	(?_pow+2)& (0+255),b
 22083  012212  0E00               	movlw	0
 22084  012214  6FC5               	movwf	(?_pow+3)& (0+255),b
 22085                           
 22086                           ; BSR set to: 0
 22087  012216  0012               	return	
 22088  012218                     l2761:
 22089                           
 22090                           ; BSR set to: 0
 22091                           
 22092                           ; BSR set to: 0
 22093  012218  51D3               	movf	pow@yi& (0+255),w,b
 22094  01221A  0B01               	andlw	1
 22095  01221C  6FD2               	movwf	pow@sign& (0+255),b
 22096                           
 22097                           ; BSR set to: 0
 22098  01221E  C0C2  F087         	movff	pow@x,___flneg@f1
 22099  012222  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 22100  012226  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 22101  01222A  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 22102  01222E  EC1A  F0AE         	call	___flneg	;wreg free
 22103  012232  C087  F0C2         	movff	?___flneg,pow@x
 22104  012236  C088  F0C3         	movff	?___flneg+1,pow@x+1
 22105  01223A  C089  F0C4         	movff	?___flneg+2,pow@x+2
 22106  01223E  C08A  F0C5         	movff	?___flneg+3,pow@x+3
 22107  012242                     l2760:
 22108  012242  C0C2  F0AF         	movff	pow@x,log@x
 22109  012246  C0C3  F0B0         	movff	pow@x+1,log@x+1
 22110  01224A  C0C4  F0B1         	movff	pow@x+2,log@x+2
 22111  01224E  C0C5  F0B2         	movff	pow@x+3,log@x+3
 22112  012252  EC89  F095         	call	_log	;wreg free
 22113  012256  C0AF  F0CA         	movff	?_log,_pow$15659
 22114  01225A  C0B0  F0CB         	movff	?_log+1,_pow$15659+1
 22115  01225E  C0B1  F0CC         	movff	?_log+2,_pow$15659+2
 22116  012262  C0B2  F0CD         	movff	?_log+3,_pow$15659+3
 22117  012266  C0CA  F06E         	movff	_pow$15659,___flmul@b
 22118  01226A  C0CB  F06F         	movff	_pow$15659+1,___flmul@b+1
 22119  01226E  C0CC  F070         	movff	_pow$15659+2,___flmul@b+2
 22120  012272  C0CD  F071         	movff	_pow$15659+3,___flmul@b+3
 22121  012276  C0C6  F072         	movff	pow@y,___flmul@a
 22122  01227A  C0C7  F073         	movff	pow@y+1,___flmul@a+1
 22123  01227E  C0C8  F074         	movff	pow@y+2,___flmul@a+2
 22124  012282  C0C9  F075         	movff	pow@y+3,___flmul@a+3
 22125  012286  ECA1  F085         	call	___flmul	;wreg free
 22126  01228A  C06E  F0CE         	movff	?___flmul,_pow$15660
 22127  01228E  C06F  F0CF         	movff	?___flmul+1,_pow$15660+1
 22128  012292  C070  F0D0         	movff	?___flmul+2,_pow$15660+2
 22129  012296  C071  F0D1         	movff	?___flmul+3,_pow$15660+3
 22130  01229A  C0CE  F0B7         	movff	_pow$15660,exp@x
 22131  01229E  C0CF  F0B8         	movff	_pow$15660+1,exp@x+1
 22132  0122A2  C0D0  F0B9         	movff	_pow$15660+2,exp@x+2
 22133  0122A6  C0D1  F0BA         	movff	_pow$15660+3,exp@x+3
 22134  0122AA  EC51  F08E         	call	_exp	;wreg free
 22135  0122AE  C0B7  F0C2         	movff	?_exp,pow@x
 22136  0122B2  C0B8  F0C3         	movff	?_exp+1,pow@x+1
 22137  0122B6  C0B9  F0C4         	movff	?_exp+2,pow@x+2
 22138  0122BA  C0BA  F0C5         	movff	?_exp+3,pow@x+3
 22139  0122BE  0100               	movlb	0	; () banked
 22140  0122C0  51D2               	movf	pow@sign& (0+255),w,b
 22141  0122C2  B4D8               	btfsc	status,2,c
 22142  0122C4  D013               	goto	l2762
 22143                           
 22144                           ; BSR set to: 0
 22145  0122C6  C0C2  F087         	movff	pow@x,___flneg@f1
 22146  0122CA  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 22147  0122CE  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 22148  0122D2  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 22149  0122D6  EC1A  F0AE         	call	___flneg	;wreg free
 22150  0122DA  C087  F0C2         	movff	?___flneg,?_pow
 22151  0122DE  C088  F0C3         	movff	?___flneg+1,?_pow+1
 22152  0122E2  C089  F0C4         	movff	?___flneg+2,?_pow+2
 22153  0122E6  C08A  F0C5         	movff	?___flneg+3,?_pow+3
 22154  0122EA  0012               	return	
 22155  0122EC                     l2762:
 22156                           
 22157                           ; BSR set to: 0
 22158  0122EC  C0C2  F0C2         	movff	pow@x,?_pow
 22159  0122F0  C0C3  F0C3         	movff	pow@x+1,?_pow+1
 22160  0122F4  C0C4  F0C4         	movff	pow@x+2,?_pow+2
 22161  0122F8  C0C5  F0C5         	movff	pow@x+3,?_pow+3
 22162  0122FC  0012               	return		;funcret
 22163  0122FE                     __end_of_pow:
 22164                           	opt stack 0
 22165                           tosu	equ	0xFFF
 22166                           tosh	equ	0xFFE
 22167                           tosl	equ	0xFFD
 22168                           pclath	equ	0xFFA
 22169                           tblptru	equ	0xFF8
 22170                           tblptrh	equ	0xFF7
 22171                           tblptrl	equ	0xFF6
 22172                           tablat	equ	0xFF5
 22173                           prodh	equ	0xFF4
 22174                           prodl	equ	0xFF3
 22175                           intcon	equ	0xFF2
 22176                           indf0	equ	0xFEF
 22177                           postinc0	equ	0xFEE
 22178                           fsr0h	equ	0xFEA
 22179                           fsr0l	equ	0xFE9
 22180                           wreg	equ	0xFE8
 22181                           indf1	equ	0xFE7
 22182                           postdec1	equ	0xFE5
 22183                           fsr1h	equ	0xFE2
 22184                           fsr1l	equ	0xFE1
 22185                           indf2	equ	0xFDF
 22186                           postinc2	equ	0xFDE
 22187                           postdec2	equ	0xFDD
 22188                           plusw2	equ	0xFDB
 22189                           fsr2h	equ	0xFDA
 22190                           fsr2l	equ	0xFD9
 22191                           status	equ	0xFD8
 22192                           
 22193 ;; *************** function _log *****************
 22194 ;; Defined at:
 22195 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
 22196 ;; Parameters:    Size  Location     Type
 22197 ;;  x               4   79[BANK0 ] unsigned char 
 22198 ;; Auto vars:     Size  Location     Type
 22199 ;;  exponent        2   83[BANK0 ] int 
 22200 ;; Return value:  Size  Location     Type
 22201 ;;                  4   79[BANK0 ] int 
 22202 ;; Registers used:
 22203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22204 ;; Tracked objects:
 22205 ;;		On entry : 0/0
 22206 ;;		On exit  : 0/0
 22207 ;;		Unchanged: 0/0
 22208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22209 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22210 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22212 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22213 ;;Total ram usage:        6 bytes
 22214 ;; Hardware stack levels used:    1
 22215 ;; Hardware stack levels required when called:    9
 22216 ;; This function calls:
 22217 ;;		___fladd
 22218 ;;		___flmul
 22219 ;;		___xxtofl
 22220 ;;		_eval_poly
 22221 ;;		_frexp
 22222 ;; This function is called by:
 22223 ;;		_pow
 22224 ;; This function uses a non-reentrant model
 22225 ;;
 22226                           
 22227                           	psect	text123
 22228  012B12                     __ptext123:
 22229                           	opt stack 0
 22230  012B12                     _log:
 22231                           	opt stack 18
 22232                           
 22233                           ;incstack = 0
 22234  012B12  0100               	movlb	0	; () banked
 22235  012B14  AFB2               	btfss	(log@x+3)& (0+255),7,b
 22236  012B16  D00F               	goto	l2958
 22237                           
 22238                           ; BSR set to: 0
 22239  012B18  0E00               	movlw	0
 22240  012B1A  0101               	movlb	1	; () banked
 22241  012B1C  6F1B               	movwf	(_errno+1)& (0+255),b
 22242  012B1E  0E21               	movlw	33
 22243  012B20  6F1A               	movwf	_errno& (0+255),b
 22244  012B22  0E00               	movlw	0
 22245  012B24  0100               	movlb	0	; () banked
 22246  012B26  6FAF               	movwf	?_log& (0+255),b
 22247  012B28  0E00               	movlw	0
 22248  012B2A  6FB0               	movwf	(?_log+1)& (0+255),b
 22249  012B2C  0E00               	movlw	0
 22250  012B2E  6FB1               	movwf	(?_log+2)& (0+255),b
 22251  012B30  0E00               	movlw	0
 22252  012B32  6FB2               	movwf	(?_log+3)& (0+255),b
 22253                           
 22254                           ; BSR set to: 0
 22255  012B34  0012               	return	
 22256  012B36                     l2958:
 22257                           
 22258                           ; BSR set to: 0
 22259                           
 22260                           ; BSR set to: 0
 22261  012B36  51AF               	movf	log@x& (0+255),w,b
 22262  012B38  11B0               	iorwf	(log@x+1)& (0+255),w,b
 22263  012B3A  11B1               	iorwf	(log@x+2)& (0+255),w,b
 22264  012B3C  11B2               	iorwf	(log@x+3)& (0+255),w,b
 22265  012B3E  A4D8               	btfss	status,2,c
 22266  012B40  D00F               	goto	l2960
 22267                           
 22268                           ; BSR set to: 0
 22269  012B42  0E00               	movlw	0
 22270  012B44  0101               	movlb	1	; () banked
 22271  012B46  6F1B               	movwf	(_errno+1)& (0+255),b
 22272  012B48  0E22               	movlw	34
 22273  012B4A  6F1A               	movwf	_errno& (0+255),b
 22274  012B4C  0E00               	movlw	0
 22275  012B4E  0100               	movlb	0	; () banked
 22276  012B50  6FAF               	movwf	?_log& (0+255),b
 22277  012B52  0E00               	movlw	0
 22278  012B54  6FB0               	movwf	(?_log+1)& (0+255),b
 22279  012B56  0E00               	movlw	0
 22280  012B58  6FB1               	movwf	(?_log+2)& (0+255),b
 22281  012B5A  0E00               	movlw	0
 22282  012B5C  6FB2               	movwf	(?_log+3)& (0+255),b
 22283                           
 22284                           ; BSR set to: 0
 22285  012B5E  0012               	return	
 22286  012B60                     l2960:
 22287                           
 22288                           ; BSR set to: 0
 22289                           
 22290                           ; BSR set to: 0
 22291  012B60  0E00               	movlw	0
 22292  012B62  6F72               	movwf	___flmul@a& (0+255),b
 22293  012B64  0E00               	movlw	0
 22294  012B66  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22295  012B68  0E00               	movlw	0
 22296  012B6A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22297  012B6C  0E40               	movlw	64
 22298  012B6E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22299  012B70  0EB3               	movlw	low log@exponent
 22300  012B72  6F64               	movwf	frexp@eptr& (0+255),b
 22301  012B74  0E00               	movlw	high log@exponent
 22302  012B76  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 22303  012B78  C0AF  F060         	movff	log@x,frexp@value
 22304  012B7C  C0B0  F061         	movff	log@x+1,frexp@value+1
 22305  012B80  C0B1  F062         	movff	log@x+2,frexp@value+2
 22306  012B84  C0B2  F063         	movff	log@x+3,frexp@value+3
 22307  012B88  EC66  F0A1         	call	_frexp	;wreg free
 22308  012B8C  C060  F06E         	movff	?_frexp,___flmul@b
 22309  012B90  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 22310  012B94  C062  F070         	movff	?_frexp+2,___flmul@b+2
 22311  012B98  C063  F071         	movff	?_frexp+3,___flmul@b+3
 22312  012B9C  ECA1  F085         	call	___flmul	;wreg free
 22313  012BA0  C06E  F08B         	movff	?___flmul,___fladd@b
 22314  012BA4  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 22315  012BA8  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 22316  012BAC  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 22317  012BB0  0E00               	movlw	0
 22318  012BB2  0100               	movlb	0	; () banked
 22319  012BB4  6F8F               	movwf	___fladd@a& (0+255),b
 22320  012BB6  0E00               	movlw	0
 22321  012BB8  6F90               	movwf	(___fladd@a+1)& (0+255),b
 22322  012BBA  0E80               	movlw	128
 22323  012BBC  6F91               	movwf	(___fladd@a+2)& (0+255),b
 22324  012BBE  0EBF               	movlw	191
 22325  012BC0  6F92               	movwf	(___fladd@a+3)& (0+255),b
 22326  012BC2  EC4A  F087         	call	___fladd	;wreg free
 22327  012BC6  C08B  F0AF         	movff	?___fladd,log@x
 22328  012BCA  C08C  F0B0         	movff	?___fladd+1,log@x+1
 22329  012BCE  C08D  F0B1         	movff	?___fladd+2,log@x+2
 22330  012BD2  C08E  F0B2         	movff	?___fladd+3,log@x+3
 22331  012BD6  0100               	movlb	0	; () banked
 22332  012BD8  07B3               	decf	log@exponent& (0+255),f,b
 22333  012BDA  A0D8               	btfss	status,0,c
 22334  012BDC  07B4               	decf	(log@exponent+1)& (0+255),f,b
 22335                           
 22336                           ; BSR set to: 0
 22337  012BDE  C0AF  F09F         	movff	log@x,eval_poly@x
 22338  012BE2  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
 22339  012BE6  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
 22340  012BEA  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
 22341  012BEE  0E6D               	movlw	low log@coeff
 22342  012BF0  6FA3               	movwf	eval_poly@d& (0+255),b
 22343  012BF2  0EFE               	movlw	high log@coeff
 22344  012BF4  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 22345  012BF6  0E00               	movlw	0
 22346  012BF8  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 22347  012BFA  0E08               	movlw	8
 22348  012BFC  6FA5               	movwf	eval_poly@n& (0+255),b
 22349  012BFE  EC77  F09D         	call	_eval_poly	;wreg free
 22350  012C02  C09F  F0AF         	movff	?_eval_poly,log@x
 22351  012C06  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
 22352  012C0A  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
 22353  012C0E  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
 22354  012C12  0E18               	movlw	24
 22355  012C14  0100               	movlb	0	; () banked
 22356  012C16  6F72               	movwf	___flmul@a& (0+255),b
 22357  012C18  0E72               	movlw	114
 22358  012C1A  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22359  012C1C  0E31               	movlw	49
 22360  012C1E  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22361  012C20  0E3F               	movlw	63
 22362  012C22  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22363  012C24  C0B3  F060         	movff	log@exponent,___xxtofl@val
 22364  012C28  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
 22365  012C2C  0E00               	movlw	0
 22366  012C2E  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 22367  012C30  0EFF               	movlw	-1
 22368  012C32  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 22369  012C34  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 22370  012C36  0E01               	movlw	1
 22371  012C38  ECF7  F096         	call	___xxtofl
 22372  012C3C  C060  F06E         	movff	?___xxtofl,___flmul@b
 22373  012C40  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 22374  012C44  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 22375  012C48  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 22376  012C4C  ECA1  F085         	call	___flmul	;wreg free
 22377  012C50  C06E  F08B         	movff	?___flmul,___fladd@b
 22378  012C54  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 22379  012C58  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 22380  012C5C  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 22381  012C60  C0AF  F08F         	movff	log@x,___fladd@a
 22382  012C64  C0B0  F090         	movff	log@x+1,___fladd@a+1
 22383  012C68  C0B1  F091         	movff	log@x+2,___fladd@a+2
 22384  012C6C  C0B2  F092         	movff	log@x+3,___fladd@a+3
 22385  012C70  EC4A  F087         	call	___fladd	;wreg free
 22386  012C74  C08B  F0AF         	movff	?___fladd,?_log
 22387  012C78  C08C  F0B0         	movff	?___fladd+1,?_log+1
 22388  012C7C  C08D  F0B1         	movff	?___fladd+2,?_log+2
 22389  012C80  C08E  F0B2         	movff	?___fladd+3,?_log+3
 22390  012C84  0012               	return	
 22391  012C86                     __end_of_log:
 22392                           	opt stack 0
 22393                           tosu	equ	0xFFF
 22394                           tosh	equ	0xFFE
 22395                           tosl	equ	0xFFD
 22396                           pclath	equ	0xFFA
 22397                           tblptru	equ	0xFF8
 22398                           tblptrh	equ	0xFF7
 22399                           tblptrl	equ	0xFF6
 22400                           tablat	equ	0xFF5
 22401                           prodh	equ	0xFF4
 22402                           prodl	equ	0xFF3
 22403                           intcon	equ	0xFF2
 22404                           indf0	equ	0xFEF
 22405                           postinc0	equ	0xFEE
 22406                           fsr0h	equ	0xFEA
 22407                           fsr0l	equ	0xFE9
 22408                           wreg	equ	0xFE8
 22409                           indf1	equ	0xFE7
 22410                           postdec1	equ	0xFE5
 22411                           fsr1h	equ	0xFE2
 22412                           fsr1l	equ	0xFE1
 22413                           indf2	equ	0xFDF
 22414                           postinc2	equ	0xFDE
 22415                           postdec2	equ	0xFDD
 22416                           plusw2	equ	0xFDB
 22417                           fsr2h	equ	0xFDA
 22418                           fsr2l	equ	0xFD9
 22419                           status	equ	0xFD8
 22420                           
 22421 ;; *************** function _exp *****************
 22422 ;; Defined at:
 22423 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
 22424 ;; Parameters:    Size  Location     Type
 22425 ;;  x               4   87[BANK0 ] int 
 22426 ;; Auto vars:     Size  Location     Type
 22427 ;;  exponent        2   95[BANK0 ] int 
 22428 ;;  sign            1   97[BANK0 ] unsigned char 
 22429 ;; Return value:  Size  Location     Type
 22430 ;;                  4   87[BANK0 ] unsigned char 
 22431 ;; Registers used:
 22432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22433 ;; Tracked objects:
 22434 ;;		On entry : 0/0
 22435 ;;		On exit  : 0/0
 22436 ;;		Unchanged: 0/0
 22437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22438 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22439 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22441 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22442 ;;Total ram usage:       11 bytes
 22443 ;; Hardware stack levels used:    1
 22444 ;; Hardware stack levels required when called:    9
 22445 ;; This function calls:
 22446 ;;		___fldiv
 22447 ;;		___flge
 22448 ;;		___flmul
 22449 ;;		___flneg
 22450 ;;		___flsub
 22451 ;;		___fltol
 22452 ;;		___xxtofl
 22453 ;;		_eval_poly
 22454 ;;		_floor
 22455 ;;		_ldexp
 22456 ;; This function is called by:
 22457 ;;		_pow
 22458 ;; This function uses a non-reentrant model
 22459 ;;
 22460                           
 22461                           	psect	text124
 22462  011CA2                     __ptext124:
 22463                           	opt stack 0
 22464  011CA2                     _exp:
 22465                           	opt stack 18
 22466                           
 22467                           ;incstack = 0
 22468  011CA2  0100               	movlb	0	; () banked
 22469  011CA4  51B7               	movf	exp@x& (0+255),w,b
 22470  011CA6  11B8               	iorwf	(exp@x+1)& (0+255),w,b
 22471  011CA8  11B9               	iorwf	(exp@x+2)& (0+255),w,b
 22472  011CAA  11BA               	iorwf	(exp@x+3)& (0+255),w,b
 22473  011CAC  A4D8               	btfss	status,2,c
 22474  011CAE  D009               	goto	l2916
 22475                           
 22476                           ; BSR set to: 0
 22477  011CB0  0E00               	movlw	0
 22478  011CB2  6FB7               	movwf	?_exp& (0+255),b
 22479  011CB4  0E00               	movlw	0
 22480  011CB6  6FB8               	movwf	(?_exp+1)& (0+255),b
 22481  011CB8  0E80               	movlw	128
 22482  011CBA  6FB9               	movwf	(?_exp+2)& (0+255),b
 22483  011CBC  0E3F               	movlw	63
 22484  011CBE  6FBA               	movwf	(?_exp+3)& (0+255),b
 22485                           
 22486                           ; BSR set to: 0
 22487  011CC0  0012               	return	
 22488  011CC2                     l2916:
 22489                           
 22490                           ; BSR set to: 0
 22491                           
 22492                           ; BSR set to: 0
 22493  011CC2  0E18               	movlw	24
 22494  011CC4  6F60               	movwf	___flge@ff1& (0+255),b
 22495  011CC6  0E72               	movlw	114
 22496  011CC8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 22497  011CCA  0E31               	movlw	49
 22498  011CCC  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 22499  011CCE  0E44               	movlw	68
 22500  011CD0  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 22501  011CD2  C0B7  F064         	movff	exp@x,___flge@ff2
 22502  011CD6  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
 22503  011CDA  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
 22504  011CDE  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
 22505  011CE2  ECC5  F09A         	call	___flge	;wreg free
 22506  011CE6  0100               	movlb	0	; () banked
 22507  011CE8  B0D8               	btfsc	status,0,c
 22508  011CEA  D00F               	goto	l2918
 22509                           
 22510                           ; BSR set to: 0
 22511  011CEC  0E00               	movlw	0
 22512  011CEE  0101               	movlb	1	; () banked
 22513  011CF0  6F1B               	movwf	(_errno+1)& (0+255),b
 22514  011CF2  0E22               	movlw	34
 22515  011CF4  6F1A               	movwf	_errno& (0+255),b
 22516  011CF6  0EFF               	movlw	255
 22517  011CF8  0100               	movlb	0	; () banked
 22518  011CFA  6FB7               	movwf	?_exp& (0+255),b
 22519  011CFC  0EFF               	movlw	255
 22520  011CFE  6FB8               	movwf	(?_exp+1)& (0+255),b
 22521  011D00  0E7F               	movlw	127
 22522  011D02  6FB9               	movwf	(?_exp+2)& (0+255),b
 22523  011D04  0E7F               	movlw	127
 22524  011D06  6FBA               	movwf	(?_exp+3)& (0+255),b
 22525                           
 22526                           ; BSR set to: 0
 22527  011D08  0012               	return	
 22528  011D0A                     l2918:
 22529                           
 22530                           ; BSR set to: 0
 22531                           
 22532                           ; BSR set to: 0
 22533  011D0A  C0B7  F060         	movff	exp@x,___flge@ff1
 22534  011D0E  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
 22535  011D12  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
 22536  011D16  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
 22537  011D1A  0E87               	movlw	135
 22538  011D1C  6F64               	movwf	___flge@ff2& (0+255),b
 22539  011D1E  0E48               	movlw	72
 22540  011D20  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22541  011D22  0E3A               	movlw	58
 22542  011D24  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22543  011D26  0EC4               	movlw	196
 22544  011D28  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22545  011D2A  ECC5  F09A         	call	___flge	;wreg free
 22546  011D2E  0100               	movlb	0	; () banked
 22547  011D30  B0D8               	btfsc	status,0,c
 22548  011D32  D00F               	goto	l2919
 22549                           
 22550                           ; BSR set to: 0
 22551  011D34  0E00               	movlw	0
 22552  011D36  0101               	movlb	1	; () banked
 22553  011D38  6F1B               	movwf	(_errno+1)& (0+255),b
 22554  011D3A  0E22               	movlw	34
 22555  011D3C  6F1A               	movwf	_errno& (0+255),b
 22556  011D3E  0E00               	movlw	0
 22557  011D40  0100               	movlb	0	; () banked
 22558  011D42  6FB7               	movwf	?_exp& (0+255),b
 22559  011D44  0E00               	movlw	0
 22560  011D46  6FB8               	movwf	(?_exp+1)& (0+255),b
 22561  011D48  0E00               	movlw	0
 22562  011D4A  6FB9               	movwf	(?_exp+2)& (0+255),b
 22563  011D4C  0E00               	movlw	0
 22564  011D4E  6FBA               	movwf	(?_exp+3)& (0+255),b
 22565                           
 22566                           ; BSR set to: 0
 22567  011D50  0012               	return	
 22568  011D52                     l2919:
 22569                           
 22570                           ; BSR set to: 0
 22571                           
 22572                           ; BSR set to: 0
 22573  011D52  AFBA               	btfss	(exp@x+3)& (0+255),7,b
 22574  011D54  D002               	goto	u11570
 22575  011D56  0E01               	movlw	1
 22576  011D58  D001               	goto	u11580
 22577  011D5A                     u11570:
 22578  011D5A  0E00               	movlw	0
 22579  011D5C                     u11580:
 22580  011D5C  6FC1               	movwf	exp@sign& (0+255),b
 22581                           
 22582                           ; BSR set to: 0
 22583  011D5E  51C1               	movf	exp@sign& (0+255),w,b
 22584  011D60  B4D8               	btfsc	status,2,c
 22585  011D62  D012               	goto	l2920
 22586                           
 22587                           ; BSR set to: 0
 22588  011D64  C0B7  F087         	movff	exp@x,___flneg@f1
 22589  011D68  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
 22590  011D6C  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
 22591  011D70  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
 22592  011D74  EC1A  F0AE         	call	___flneg	;wreg free
 22593  011D78  C087  F0B7         	movff	?___flneg,exp@x
 22594  011D7C  C088  F0B8         	movff	?___flneg+1,exp@x+1
 22595  011D80  C089  F0B9         	movff	?___flneg+2,exp@x+2
 22596  011D84  C08A  F0BA         	movff	?___flneg+3,exp@x+3
 22597  011D88                     l2920:
 22598  011D88  C0B7  F06E         	movff	exp@x,___flmul@b
 22599  011D8C  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
 22600  011D90  C0B9  F070         	movff	exp@x+2,___flmul@b+2
 22601  011D94  C0BA  F071         	movff	exp@x+3,___flmul@b+3
 22602  011D98  0E3B               	movlw	59
 22603  011D9A  0100               	movlb	0	; () banked
 22604  011D9C  6F72               	movwf	___flmul@a& (0+255),b
 22605  011D9E  0EAA               	movlw	170
 22606  011DA0  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22607  011DA2  0EB8               	movlw	184
 22608  011DA4  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22609  011DA6  0E3F               	movlw	63
 22610  011DA8  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22611  011DAA  ECA1  F085         	call	___flmul	;wreg free
 22612  011DAE  C06E  F0B7         	movff	?___flmul,exp@x
 22613  011DB2  C06F  F0B8         	movff	?___flmul+1,exp@x+1
 22614  011DB6  C070  F0B9         	movff	?___flmul+2,exp@x+2
 22615  011DBA  C071  F0BA         	movff	?___flmul+3,exp@x+3
 22616  011DBE  C0B7  F0A9         	movff	exp@x,floor@x
 22617  011DC2  C0B8  F0AA         	movff	exp@x+1,floor@x+1
 22618  011DC6  C0B9  F0AB         	movff	exp@x+2,floor@x+2
 22619  011DCA  C0BA  F0AC         	movff	exp@x+3,floor@x+3
 22620  011DCE  ECE1  F09B         	call	_floor	;wreg free
 22621  011DD2  C0A9  F0BB         	movff	?_floor,_exp$15661
 22622  011DD6  C0AA  F0BC         	movff	?_floor+1,_exp$15661+1
 22623  011DDA  C0AB  F0BD         	movff	?_floor+2,_exp$15661+2
 22624  011DDE  C0AC  F0BE         	movff	?_floor+3,_exp$15661+3
 22625  011DE2  C0BB  F09F         	movff	_exp$15661,___fltol@f1
 22626  011DE6  C0BC  F0A0         	movff	_exp$15661+1,___fltol@f1+1
 22627  011DEA  C0BD  F0A1         	movff	_exp$15661+2,___fltol@f1+2
 22628  011DEE  C0BE  F0A2         	movff	_exp$15661+3,___fltol@f1+3
 22629  011DF2  ECE9  F09E         	call	___fltol	;wreg free
 22630  011DF6  C09F  F0BF         	movff	?___fltol,exp@exponent
 22631  011DFA  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
 22632  011DFE  C0B7  F09F         	movff	exp@x,___flsub@b
 22633  011E02  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
 22634  011E06  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
 22635  011E0A  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
 22636  011E0E  C0BF  F060         	movff	exp@exponent,___xxtofl@val
 22637  011E12  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
 22638  011E16  0100               	movlb	0	; () banked
 22639  011E18  0E00               	movlw	0
 22640  011E1A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 22641  011E1C  0EFF               	movlw	-1
 22642  011E1E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 22643  011E20  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 22644  011E22  0E01               	movlw	1
 22645  011E24  ECF7  F096         	call	___xxtofl
 22646  011E28  C060  F0A3         	movff	?___xxtofl,___flsub@a
 22647  011E2C  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
 22648  011E30  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
 22649  011E34  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
 22650  011E38  ECB7  F0AB         	call	___flsub	;wreg free
 22651  011E3C  C09F  F0B7         	movff	?___flsub,exp@x
 22652  011E40  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
 22653  011E44  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
 22654  011E48  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
 22655  011E4C  C0B7  F09F         	movff	exp@x,eval_poly@x
 22656  011E50  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
 22657  011E54  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
 22658  011E58  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
 22659  011E5C  0E45               	movlw	low exp@coeff
 22660  011E5E  0100               	movlb	0	; () banked
 22661  011E60  6FA3               	movwf	eval_poly@d& (0+255),b
 22662  011E62  0EFE               	movlw	high exp@coeff
 22663  011E64  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 22664  011E66  0E00               	movlw	0
 22665  011E68  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 22666  011E6A  0E09               	movlw	9
 22667  011E6C  6FA5               	movwf	eval_poly@n& (0+255),b
 22668  011E6E  EC77  F09D         	call	_eval_poly	;wreg free
 22669  011E72  C09F  F0AF         	movff	?_eval_poly,ldexp@value
 22670  011E76  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
 22671  011E7A  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
 22672  011E7E  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
 22673  011E82  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
 22674  011E86  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
 22675  011E8A  EC77  F09E         	call	_ldexp	;wreg free
 22676  011E8E  C0AF  F0B7         	movff	?_ldexp,exp@x
 22677  011E92  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
 22678  011E96  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
 22679  011E9A  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
 22680  011E9E  0100               	movlb	0	; () banked
 22681  011EA0  51C1               	movf	exp@sign& (0+255),w,b
 22682  011EA2  B4D8               	btfsc	status,2,c
 22683  011EA4  D02F               	goto	l2921
 22684                           
 22685                           ; BSR set to: 0
 22686  011EA6  29B7               	incf	exp@x& (0+255),w,b
 22687  011EA8  E112               	bnz	l14119
 22688  011EAA  29B8               	incf	(exp@x+1)& (0+255),w,b
 22689  011EAC  E110               	bnz	l14119
 22690  011EAE  0E7F               	movlw	127
 22691  011EB0  19B9               	xorwf	(exp@x+2)& (0+255),w,b
 22692  011EB2  E10D               	bnz	l14119
 22693  011EB4  0E7F               	movlw	127
 22694  011EB6  19BA               	xorwf	(exp@x+3)& (0+255),w,b
 22695  011EB8  A4D8               	btfss	status,2,c
 22696  011EBA  D009               	goto	l2922
 22697                           
 22698                           ; BSR set to: 0
 22699  011EBC  0E00               	movlw	0
 22700  011EBE  6FB7               	movwf	?_exp& (0+255),b
 22701  011EC0  0E00               	movlw	0
 22702  011EC2  6FB8               	movwf	(?_exp+1)& (0+255),b
 22703  011EC4  0E00               	movlw	0
 22704  011EC6  6FB9               	movwf	(?_exp+2)& (0+255),b
 22705  011EC8  0E00               	movlw	0
 22706  011ECA  6FBA               	movwf	(?_exp+3)& (0+255),b
 22707                           
 22708                           ; BSR set to: 0
 22709  011ECC  0012               	return	
 22710  011ECE                     l2922:
 22711  011ECE                     l14119:
 22712                           
 22713                           ; BSR set to: 0
 22714  011ECE  0E00               	movlw	0
 22715  011ED0  6F60               	movwf	___fldiv@b& (0+255),b
 22716  011ED2  0E00               	movlw	0
 22717  011ED4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 22718  011ED6  0E80               	movlw	128
 22719  011ED8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 22720  011EDA  0E3F               	movlw	63
 22721  011EDC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 22722  011EDE  C0B7  F064         	movff	exp@x,___fldiv@a
 22723  011EE2  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
 22724  011EE6  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
 22725  011EEA  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
 22726  011EEE  EC5F  F08A         	call	___fldiv	;wreg free
 22727  011EF2  C060  F0B7         	movff	?___fldiv,?_exp
 22728  011EF6  C061  F0B8         	movff	?___fldiv+1,?_exp+1
 22729  011EFA  C062  F0B9         	movff	?___fldiv+2,?_exp+2
 22730  011EFE  C063  F0BA         	movff	?___fldiv+3,?_exp+3
 22731  011F02  0012               	return	
 22732  011F04                     l2921:
 22733                           
 22734                           ; BSR set to: 0
 22735  011F04  C0B7  F0B7         	movff	exp@x,?_exp
 22736  011F08  C0B8  F0B8         	movff	exp@x+1,?_exp+1
 22737  011F0C  C0B9  F0B9         	movff	exp@x+2,?_exp+2
 22738  011F10  C0BA  F0BA         	movff	exp@x+3,?_exp+3
 22739  011F14  0012               	return		;funcret
 22740  011F16                     __end_of_exp:
 22741                           	opt stack 0
 22742                           tosu	equ	0xFFF
 22743                           tosh	equ	0xFFE
 22744                           tosl	equ	0xFFD
 22745                           pclath	equ	0xFFA
 22746                           tblptru	equ	0xFF8
 22747                           tblptrh	equ	0xFF7
 22748                           tblptrl	equ	0xFF6
 22749                           tablat	equ	0xFF5
 22750                           prodh	equ	0xFF4
 22751                           prodl	equ	0xFF3
 22752                           intcon	equ	0xFF2
 22753                           indf0	equ	0xFEF
 22754                           postinc0	equ	0xFEE
 22755                           fsr0h	equ	0xFEA
 22756                           fsr0l	equ	0xFE9
 22757                           wreg	equ	0xFE8
 22758                           indf1	equ	0xFE7
 22759                           postdec1	equ	0xFE5
 22760                           fsr1h	equ	0xFE2
 22761                           fsr1l	equ	0xFE1
 22762                           indf2	equ	0xFDF
 22763                           postinc2	equ	0xFDE
 22764                           postdec2	equ	0xFDD
 22765                           plusw2	equ	0xFDB
 22766                           fsr2h	equ	0xFDA
 22767                           fsr2l	equ	0xFD9
 22768                           status	equ	0xFD8
 22769                           
 22770 ;; *************** function _ldexp *****************
 22771 ;; Defined at:
 22772 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 22773 ;; Parameters:    Size  Location     Type
 22774 ;;  value           4   79[BANK0 ] unsigned char 
 22775 ;;  newexp          2   83[BANK0 ] int 
 22776 ;; Auto vars:     Size  Location     Type
 22777 ;;		None
 22778 ;; Return value:  Size  Location     Type
 22779 ;;                  4   79[BANK0 ] int 
 22780 ;; Registers used:
 22781 ;;		wreg, status,2, status,0
 22782 ;; Tracked objects:
 22783 ;;		On entry : 0/0
 22784 ;;		On exit  : 0/0
 22785 ;;		Unchanged: 0/0
 22786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22787 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22789 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22790 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22791 ;;Total ram usage:        8 bytes
 22792 ;; Hardware stack levels used:    1
 22793 ;; Hardware stack levels required when called:    7
 22794 ;; This function calls:
 22795 ;;		Nothing
 22796 ;; This function is called by:
 22797 ;;		_exp
 22798 ;; This function uses a non-reentrant model
 22799 ;;
 22800                           
 22801                           	psect	text125
 22802  013CEE                     __ptext125:
 22803                           	opt stack 0
 22804  013CEE                     _ldexp:
 22805                           	opt stack 19
 22806                           
 22807                           ;incstack = 0
 22808  013CEE  0100               	movlb	0	; () banked
 22809  013CF0  51AF               	movf	ldexp@value& (0+255),w,b
 22810  013CF2  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
 22811  013CF4  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
 22812  013CF6  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
 22813  013CF8  A4D8               	btfss	status,2,c
 22814  013CFA  D009               	goto	l2940
 22815                           
 22816                           ; BSR set to: 0
 22817  013CFC  0E00               	movlw	0
 22818  013CFE  6FAF               	movwf	?_ldexp& (0+255),b
 22819  013D00  0E00               	movlw	0
 22820  013D02  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22821  013D04  0E00               	movlw	0
 22822  013D06  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22823  013D08  0E00               	movlw	0
 22824  013D0A  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 22825                           
 22826                           ; BSR set to: 0
 22827  013D0C  0012               	return	
 22828  013D0E                     l2940:
 22829                           
 22830                           ; BSR set to: 0
 22831                           
 22832                           ; BSR set to: 0
 22833  013D0E  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 22834  013D10  0B7F               	andlw	127
 22835  013D12  6FB5               	movwf	??_ldexp& (0+255),b
 22836  013D14  6BB6               	clrf	(??_ldexp+1)& (0+255),b
 22837  013D16  90D8               	bcf	status,0,c
 22838  013D18  37B5               	rlcf	??_ldexp& (0+255),f,b
 22839  013D1A  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
 22840  013D1C  51B5               	movf	??_ldexp& (0+255),w,b
 22841  013D1E  27B3               	addwf	ldexp@newexp& (0+255),f,b
 22842  013D20  51B6               	movf	(??_ldexp+1)& (0+255),w,b
 22843  013D22  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 22844  013D24  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
 22845  013D26  D003               	goto	u11210
 22846  013D28  6BB5               	clrf	??_ldexp& (0+255),b
 22847  013D2A  2BB5               	incf	??_ldexp& (0+255),f,b
 22848  013D2C  D002               	goto	u11218
 22849  013D2E                     u11210:
 22850  013D2E  0100               	movlb	0	; () banked
 22851  013D30  6BB5               	clrf	??_ldexp& (0+255),b
 22852  013D32                     u11218:
 22853  013D32  51B5               	movf	??_ldexp& (0+255),w,b
 22854  013D34  27B3               	addwf	ldexp@newexp& (0+255),f,b
 22855  013D36  0E00               	movlw	0
 22856  013D38  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 22857  013D3A  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
 22858  013D3C  D00F               	goto	l2942
 22859                           
 22860                           ; BSR set to: 0
 22861  013D3E  0E00               	movlw	0
 22862  013D40  0101               	movlb	1	; () banked
 22863  013D42  6F1B               	movwf	(_errno+1)& (0+255),b
 22864  013D44  0E22               	movlw	34
 22865  013D46  6F1A               	movwf	_errno& (0+255),b
 22866  013D48  0E00               	movlw	0
 22867  013D4A  0100               	movlb	0	; () banked
 22868  013D4C  6FAF               	movwf	?_ldexp& (0+255),b
 22869  013D4E  0E00               	movlw	0
 22870  013D50  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22871  013D52  0E00               	movlw	0
 22872  013D54  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22873  013D56  0E00               	movlw	0
 22874  013D58                     L10:
 22875  013D58  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 22876                           
 22877                           ; BSR set to: 0
 22878  013D5A  0012               	return	
 22879  013D5C                     l2942:
 22880                           
 22881                           ; BSR set to: 0
 22882                           
 22883                           ; BSR set to: 0
 22884  013D5C  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 22885  013D5E  D01B               	goto	l2944
 22886  013D60  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
 22887  013D62  A0D8               	btfss	status,0,c
 22888  013D64  D018               	goto	l2944
 22889                           
 22890                           ; BSR set to: 0
 22891  013D66  0E00               	movlw	0
 22892  013D68  0101               	movlb	1	; () banked
 22893  013D6A  6F1B               	movwf	(_errno+1)& (0+255),b
 22894  013D6C  0E22               	movlw	34
 22895  013D6E  6F1A               	movwf	_errno& (0+255),b
 22896                           
 22897                           ; BSR set to: 1
 22898  013D70  0100               	movlb	0	; () banked
 22899  013D72  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
 22900  013D74  D008               	goto	l2945
 22901                           
 22902                           ; BSR set to: 0
 22903  013D76  0EFF               	movlw	255
 22904  013D78  6FAF               	movwf	?_ldexp& (0+255),b
 22905  013D7A  0EFF               	movlw	255
 22906  013D7C  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22907  013D7E  0E7F               	movlw	127
 22908  013D80  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22909  013D82  0EFF               	movlw	255
 22910  013D84  D7E9               	goto	L10
 22911  013D86                     l2945:
 22912                           
 22913                           ; BSR set to: 0
 22914                           
 22915                           ; BSR set to: 0
 22916  013D86  0EFF               	movlw	255
 22917  013D88  6FAF               	movwf	?_ldexp& (0+255),b
 22918  013D8A  0EFF               	movlw	255
 22919  013D8C  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22920  013D8E  0E7F               	movlw	127
 22921  013D90  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22922  013D92  0E7F               	movlw	127
 22923  013D94  D7E1               	goto	L10
 22924  013D96                     l2944:
 22925                           
 22926                           ; BSR set to: 0
 22927                           
 22928                           ; BSR set to: 0
 22929  013D96  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 22930  013D98  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 22931  013D9A  6FB6               	movwf	(??_ldexp+1)& (0+255),b
 22932  013D9C  31B3               	rrcf	ldexp@newexp& (0+255),w,b
 22933  013D9E  6FB5               	movwf	??_ldexp& (0+255),b
 22934  013DA0  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 22935  013DA2  19B5               	xorwf	??_ldexp& (0+255),w,b
 22936  013DA4  0B80               	andlw	-128
 22937  013DA6  19B5               	xorwf	??_ldexp& (0+255),w,b
 22938  013DA8  6FB2               	movwf	(ldexp@value+3)& (0+255),b
 22939  013DAA  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
 22940  013DAE  0E01               	movlw	1
 22941  013DB0  17B5               	andwf	??_ldexp& (0+255),f,b
 22942  013DB2  33B5               	rrcf	??_ldexp& (0+255),f,b
 22943  013DB4  33B5               	rrcf	??_ldexp& (0+255),f,b
 22944  013DB6  51B1               	movf	(ldexp@value+2)& (0+255),w,b
 22945  013DB8  19B5               	xorwf	??_ldexp& (0+255),w,b
 22946  013DBA  0B7F               	andlw	-129
 22947  013DBC  19B5               	xorwf	??_ldexp& (0+255),w,b
 22948  013DBE  6FB1               	movwf	(ldexp@value+2)& (0+255),b
 22949                           
 22950                           ; BSR set to: 0
 22951                           
 22952                           ; BSR set to: 0
 22953                           
 22954                           ; BSR set to: 0
 22955  013DC0  C0AF  F0AF         	movff	ldexp@value,?_ldexp
 22956  013DC4  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
 22957  013DC8  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
 22958  013DCC  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
 22959  013DD0  0012               	return	
 22960  013DD2                     __end_of_ldexp:
 22961                           	opt stack 0
 22962                           tosu	equ	0xFFF
 22963                           tosh	equ	0xFFE
 22964                           tosl	equ	0xFFD
 22965                           pclath	equ	0xFFA
 22966                           tblptru	equ	0xFF8
 22967                           tblptrh	equ	0xFF7
 22968                           tblptrl	equ	0xFF6
 22969                           tablat	equ	0xFF5
 22970                           prodh	equ	0xFF4
 22971                           prodl	equ	0xFF3
 22972                           intcon	equ	0xFF2
 22973                           indf0	equ	0xFEF
 22974                           postinc0	equ	0xFEE
 22975                           fsr0h	equ	0xFEA
 22976                           fsr0l	equ	0xFE9
 22977                           wreg	equ	0xFE8
 22978                           indf1	equ	0xFE7
 22979                           postdec1	equ	0xFE5
 22980                           fsr1h	equ	0xFE2
 22981                           fsr1l	equ	0xFE1
 22982                           indf2	equ	0xFDF
 22983                           postinc2	equ	0xFDE
 22984                           postdec2	equ	0xFDD
 22985                           plusw2	equ	0xFDB
 22986                           fsr2h	equ	0xFDA
 22987                           fsr2l	equ	0xFD9
 22988                           status	equ	0xFD8
 22989                           
 22990 ;; *************** function _floor *****************
 22991 ;; Defined at:
 22992 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
 22993 ;; Parameters:    Size  Location     Type
 22994 ;;  x               4   73[BANK0 ] int 
 22995 ;; Auto vars:     Size  Location     Type
 22996 ;;  i               4   77[BANK0 ] int 
 22997 ;;  expon           2   81[BANK0 ] int 
 22998 ;; Return value:  Size  Location     Type
 22999 ;;                  4   73[BANK0 ] int 
 23000 ;; Registers used:
 23001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23002 ;; Tracked objects:
 23003 ;;		On entry : 0/0
 23004 ;;		On exit  : 0/0
 23005 ;;		Unchanged: 0/0
 23006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23007 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23008 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23010 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23011 ;;Total ram usage:       10 bytes
 23012 ;; Hardware stack levels used:    1
 23013 ;; Hardware stack levels required when called:    8
 23014 ;; This function calls:
 23015 ;;		___fladd
 23016 ;;		___flge
 23017 ;;		___fltol
 23018 ;;		___xxtofl
 23019 ;;		_frexp
 23020 ;; This function is called by:
 23021 ;;		_exp
 23022 ;; This function uses a non-reentrant model
 23023 ;;
 23024                           
 23025                           	psect	text126
 23026  0137C2                     __ptext126:
 23027                           	opt stack 0
 23028  0137C2                     _floor:
 23029                           	opt stack 18
 23030                           
 23031                           ; BSR set to: 0
 23032                           ;incstack = 0
 23033  0137C2  C0A9  F060         	movff	floor@x,frexp@value
 23034  0137C6  C0AA  F061         	movff	floor@x+1,frexp@value+1
 23035  0137CA  C0AB  F062         	movff	floor@x+2,frexp@value+2
 23036  0137CE  C0AC  F063         	movff	floor@x+3,frexp@value+3
 23037  0137D2  0EB1               	movlw	low floor@expon
 23038  0137D4  0100               	movlb	0	; () banked
 23039  0137D6  6F64               	movwf	frexp@eptr& (0+255),b
 23040  0137D8  0E00               	movlw	high floor@expon
 23041  0137DA  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 23042  0137DC  EC66  F0A1         	call	_frexp	;wreg free
 23043  0137E0  0100               	movlb	0	; () banked
 23044  0137E2  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
 23045  0137E4  D014               	goto	l2927
 23046                           
 23047                           ; BSR set to: 0
 23048  0137E6  AFAC               	btfss	(floor@x+3)& (0+255),7,b
 23049  0137E8  D009               	goto	l2928
 23050                           
 23051                           ; BSR set to: 0
 23052  0137EA  0E00               	movlw	0
 23053  0137EC  6FA9               	movwf	?_floor& (0+255),b
 23054  0137EE  0E00               	movlw	0
 23055  0137F0  6FAA               	movwf	(?_floor+1)& (0+255),b
 23056  0137F2  0E80               	movlw	128
 23057  0137F4  6FAB               	movwf	(?_floor+2)& (0+255),b
 23058  0137F6  0EBF               	movlw	191
 23059  0137F8  6FAC               	movwf	(?_floor+3)& (0+255),b
 23060                           
 23061                           ; BSR set to: 0
 23062  0137FA  0012               	return	
 23063  0137FC                     l2928:
 23064                           
 23065                           ; BSR set to: 0
 23066                           
 23067                           ; BSR set to: 0
 23068  0137FC  0E00               	movlw	0
 23069  0137FE  6FA9               	movwf	?_floor& (0+255),b
 23070  013800  0E00               	movlw	0
 23071  013802  6FAA               	movwf	(?_floor+1)& (0+255),b
 23072  013804  0E00               	movlw	0
 23073  013806  6FAB               	movwf	(?_floor+2)& (0+255),b
 23074  013808  0E00               	movlw	0
 23075  01380A  6FAC               	movwf	(?_floor+3)& (0+255),b
 23076                           
 23077                           ; BSR set to: 0
 23078  01380C  0012               	return	
 23079  01380E                     l2927:
 23080                           
 23081                           ; BSR set to: 0
 23082                           
 23083                           ; BSR set to: 0
 23084  01380E  51B2               	movf	(floor@expon+1)& (0+255),w,b
 23085  013810  E104               	bnz	u11170
 23086  013812  0E1D               	movlw	29
 23087  013814  5DB1               	subwf	floor@expon& (0+255),w,b
 23088  013816  A0D8               	btfss	status,0,c
 23089  013818  D009               	goto	l2930
 23090  01381A                     u11170:
 23091                           
 23092                           ; BSR set to: 0
 23093  01381A  C0A9  F0A9         	movff	floor@x,?_floor
 23094  01381E  C0AA  F0AA         	movff	floor@x+1,?_floor+1
 23095  013822  C0AB  F0AB         	movff	floor@x+2,?_floor+2
 23096  013826  C0AC  F0AC         	movff	floor@x+3,?_floor+3
 23097  01382A  0012               	return	
 23098  01382C                     l2930:
 23099                           
 23100                           ; BSR set to: 0
 23101                           
 23102                           ; BSR set to: 0
 23103  01382C  C0A9  F09F         	movff	floor@x,___fltol@f1
 23104  013830  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
 23105  013834  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
 23106  013838  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
 23107  01383C  ECE9  F09E         	call	___fltol	;wreg free
 23108  013840  C09F  F060         	movff	?___fltol,___xxtofl@val
 23109  013844  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
 23110  013848  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
 23111  01384C  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
 23112  013850  0E01               	movlw	1
 23113  013852  ECF7  F096         	call	___xxtofl
 23114  013856  C060  F0AD         	movff	?___xxtofl,floor@i
 23115  01385A  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
 23116  01385E  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
 23117  013862  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
 23118  013866  C0A9  F060         	movff	floor@x,___flge@ff1
 23119  01386A  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
 23120  01386E  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
 23121  013872  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
 23122  013876  C0AD  F064         	movff	floor@i,___flge@ff2
 23123  01387A  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
 23124  01387E  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
 23125  013882  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
 23126  013886  ECC5  F09A         	call	___flge	;wreg free
 23127  01388A  0100               	movlb	0	; () banked
 23128  01388C  B0D8               	btfsc	status,0,c
 23129  01388E  D01B               	goto	l2931
 23130                           
 23131                           ; BSR set to: 0
 23132  013890  C0AD  F08B         	movff	floor@i,___fladd@b
 23133  013894  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
 23134  013898  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
 23135  01389C  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
 23136  0138A0  0E00               	movlw	0
 23137  0138A2  6F8F               	movwf	___fladd@a& (0+255),b
 23138  0138A4  0E00               	movlw	0
 23139  0138A6  6F90               	movwf	(___fladd@a+1)& (0+255),b
 23140  0138A8  0E80               	movlw	128
 23141  0138AA  6F91               	movwf	(___fladd@a+2)& (0+255),b
 23142  0138AC  0EBF               	movlw	191
 23143  0138AE  6F92               	movwf	(___fladd@a+3)& (0+255),b
 23144  0138B0  EC4A  F087         	call	___fladd	;wreg free
 23145  0138B4  C08B  F0A9         	movff	?___fladd,?_floor
 23146  0138B8  C08C  F0AA         	movff	?___fladd+1,?_floor+1
 23147  0138BC  C08D  F0AB         	movff	?___fladd+2,?_floor+2
 23148  0138C0  C08E  F0AC         	movff	?___fladd+3,?_floor+3
 23149  0138C4  0012               	return	
 23150  0138C6                     l2931:
 23151                           
 23152                           ; BSR set to: 0
 23153  0138C6  C0AD  F0A9         	movff	floor@i,?_floor
 23154  0138CA  C0AE  F0AA         	movff	floor@i+1,?_floor+1
 23155  0138CE  C0AF  F0AB         	movff	floor@i+2,?_floor+2
 23156  0138D2  C0B0  F0AC         	movff	floor@i+3,?_floor+3
 23157  0138D6  0012               	return		;funcret
 23158  0138D8                     __end_of_floor:
 23159                           	opt stack 0
 23160                           tosu	equ	0xFFF
 23161                           tosh	equ	0xFFE
 23162                           tosl	equ	0xFFD
 23163                           pclath	equ	0xFFA
 23164                           tblptru	equ	0xFF8
 23165                           tblptrh	equ	0xFF7
 23166                           tblptrl	equ	0xFF6
 23167                           tablat	equ	0xFF5
 23168                           prodh	equ	0xFF4
 23169                           prodl	equ	0xFF3
 23170                           intcon	equ	0xFF2
 23171                           indf0	equ	0xFEF
 23172                           postinc0	equ	0xFEE
 23173                           fsr0h	equ	0xFEA
 23174                           fsr0l	equ	0xFE9
 23175                           wreg	equ	0xFE8
 23176                           indf1	equ	0xFE7
 23177                           postdec1	equ	0xFE5
 23178                           fsr1h	equ	0xFE2
 23179                           fsr1l	equ	0xFE1
 23180                           indf2	equ	0xFDF
 23181                           postinc2	equ	0xFDE
 23182                           postdec2	equ	0xFDD
 23183                           plusw2	equ	0xFDB
 23184                           fsr2h	equ	0xFDA
 23185                           fsr2l	equ	0xFD9
 23186                           status	equ	0xFD8
 23187                           
 23188 ;; *************** function _frexp *****************
 23189 ;; Defined at:
 23190 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 23191 ;; Parameters:    Size  Location     Type
 23192 ;;  value           4    0[BANK0 ] int 
 23193 ;;  eptr            2    4[BANK0 ] PTR int 
 23194 ;;		 -> log@exponent(2), floor@expon(2), 
 23195 ;; Auto vars:     Size  Location     Type
 23196 ;;		None
 23197 ;; Return value:  Size  Location     Type
 23198 ;;                  4    0[BANK0 ] PTR int 
 23199 ;; Registers used:
 23200 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23201 ;; Tracked objects:
 23202 ;;		On entry : 0/0
 23203 ;;		On exit  : 0/0
 23204 ;;		Unchanged: 0/0
 23205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23206 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23208 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23209 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23210 ;;Total ram usage:        8 bytes
 23211 ;; Hardware stack levels used:    1
 23212 ;; Hardware stack levels required when called:    7
 23213 ;; This function calls:
 23214 ;;		Nothing
 23215 ;; This function is called by:
 23216 ;;		_floor
 23217 ;;		_log
 23218 ;; This function uses a non-reentrant model
 23219 ;;
 23220                           
 23221                           	psect	text127
 23222  0142CC                     __ptext127:
 23223                           	opt stack 0
 23224  0142CC                     _frexp:
 23225                           	opt stack 19
 23226                           
 23227                           ;incstack = 0
 23228  0142CC  0100               	movlb	0	; () banked
 23229  0142CE  5160               	movf	frexp@value& (0+255),w,b
 23230  0142D0  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 23231  0142D2  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 23232  0142D4  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 23233  0142D6  A4D8               	btfss	status,2,c
 23234  0142D8  D011               	goto	l2936
 23235                           
 23236                           ; BSR set to: 0
 23237  0142DA  C064  FFD9         	movff	frexp@eptr,fsr2l
 23238  0142DE  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23239  0142E2  0E00               	movlw	0
 23240  0142E4  6EDE               	movwf	postinc2,c
 23241  0142E6  0E00               	movlw	0
 23242  0142E8  6EDD               	movwf	postdec2,c
 23243                           
 23244                           ; BSR set to: 0
 23245  0142EA  0E00               	movlw	0
 23246  0142EC  6F60               	movwf	?_frexp& (0+255),b
 23247  0142EE  0E00               	movlw	0
 23248  0142F0  6F61               	movwf	(?_frexp+1)& (0+255),b
 23249  0142F2  0E00               	movlw	0
 23250  0142F4  6F62               	movwf	(?_frexp+2)& (0+255),b
 23251  0142F6  0E00               	movlw	0
 23252  0142F8  6F63               	movwf	(?_frexp+3)& (0+255),b
 23253                           
 23254                           ; BSR set to: 0
 23255  0142FA  0012               	return	
 23256  0142FC                     l2936:
 23257                           
 23258                           ; BSR set to: 0
 23259                           
 23260                           ; BSR set to: 0
 23261  0142FC  5163               	movf	(frexp@value+3)& (0+255),w,b
 23262  0142FE  0B7F               	andlw	127
 23263  014300  6F66               	movwf	??_frexp& (0+255),b
 23264  014302  6B67               	clrf	(??_frexp+1)& (0+255),b
 23265  014304  90D8               	bcf	status,0,c
 23266  014306  3766               	rlcf	??_frexp& (0+255),f,b
 23267  014308  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 23268  01430A  C064  FFD9         	movff	frexp@eptr,fsr2l
 23269  01430E  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23270  014312  C066  FFDE         	movff	??_frexp,postinc2
 23271  014316  C067  FFDD         	movff	??_frexp+1,postdec2
 23272  01431A  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 23273  01431C  D003               	goto	u10750
 23274  01431E  6B66               	clrf	??_frexp& (0+255),b
 23275  014320  2B66               	incf	??_frexp& (0+255),f,b
 23276  014322  D002               	goto	u10758
 23277  014324                     u10750:
 23278  014324  0100               	movlb	0	; () banked
 23279  014326  6B66               	clrf	??_frexp& (0+255),b
 23280  014328                     u10758:
 23281  014328  5166               	movf	??_frexp& (0+255),w,b
 23282  01432A  C064  FFD9         	movff	frexp@eptr,fsr2l
 23283  01432E  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23284  014332  12DE               	iorwf	postinc2,f,c
 23285  014334  0E00               	movlw	0
 23286  014336  12DD               	iorwf	postdec2,f,c
 23287                           
 23288                           ; BSR set to: 0
 23289  014338  C064  FFD9         	movff	frexp@eptr,fsr2l
 23290  01433C  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23291  014340  0E82               	movlw	130
 23292  014342  26DE               	addwf	postinc2,f,c
 23293  014344  0EFF               	movlw	255
 23294  014346  22DD               	addwfc	postdec2,f,c
 23295                           
 23296                           ; BSR set to: 0
 23297  014348  8163               	bsf	(frexp@value+3)& (0+255),0,b
 23298  01434A  8363               	bsf	(frexp@value+3)& (0+255),1,b
 23299  01434C  8563               	bsf	(frexp@value+3)& (0+255),2,b
 23300  01434E  8763               	bsf	(frexp@value+3)& (0+255),3,b
 23301  014350  8963               	bsf	(frexp@value+3)& (0+255),4,b
 23302  014352  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 23303  014354  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 23304                           
 23305                           ; BSR set to: 0
 23306  014356  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 23307                           
 23308                           ; BSR set to: 0
 23309  014358  C060  F060         	movff	frexp@value,?_frexp
 23310  01435C  C061  F061         	movff	frexp@value+1,?_frexp+1
 23311  014360  C062  F062         	movff	frexp@value+2,?_frexp+2
 23312  014364  C063  F063         	movff	frexp@value+3,?_frexp+3
 23313  014368  0012               	return	
 23314  01436A                     __end_of_frexp:
 23315                           	opt stack 0
 23316                           tosu	equ	0xFFF
 23317                           tosh	equ	0xFFE
 23318                           tosl	equ	0xFFD
 23319                           pclath	equ	0xFFA
 23320                           tblptru	equ	0xFF8
 23321                           tblptrh	equ	0xFF7
 23322                           tblptrl	equ	0xFF6
 23323                           tablat	equ	0xFF5
 23324                           prodh	equ	0xFF4
 23325                           prodl	equ	0xFF3
 23326                           intcon	equ	0xFF2
 23327                           indf0	equ	0xFEF
 23328                           postinc0	equ	0xFEE
 23329                           fsr0h	equ	0xFEA
 23330                           fsr0l	equ	0xFE9
 23331                           wreg	equ	0xFE8
 23332                           indf1	equ	0xFE7
 23333                           postdec1	equ	0xFE5
 23334                           fsr1h	equ	0xFE2
 23335                           fsr1l	equ	0xFE1
 23336                           indf2	equ	0xFDF
 23337                           postinc2	equ	0xFDE
 23338                           postdec2	equ	0xFDD
 23339                           plusw2	equ	0xFDB
 23340                           fsr2h	equ	0xFDA
 23341                           fsr2l	equ	0xFD9
 23342                           status	equ	0xFD8
 23343                           
 23344 ;; *************** function ___xxtofl *****************
 23345 ;; Defined at:
 23346 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\xxtofl.c"
 23347 ;; Parameters:    Size  Location     Type
 23348 ;;  sign            1    wreg     unsigned char 
 23349 ;;  val             4    0[BANK0 ] long 
 23350 ;; Auto vars:     Size  Location     Type
 23351 ;;  sign            1    8[BANK0 ] unsigned char 
 23352 ;;  arg             4   10[BANK0 ] unsigned long 
 23353 ;;  exp             1    9[BANK0 ] unsigned char 
 23354 ;; Return value:  Size  Location     Type
 23355 ;;                  4    0[BANK0 ] unsigned char 
 23356 ;; Registers used:
 23357 ;;		wreg, status,2, status,0
 23358 ;; Tracked objects:
 23359 ;;		On entry : 0/0
 23360 ;;		On exit  : 0/0
 23361 ;;		Unchanged: 0/0
 23362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23363 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23364 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23365 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23366 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23367 ;;Total ram usage:       14 bytes
 23368 ;; Hardware stack levels used:    1
 23369 ;; Hardware stack levels required when called:    7
 23370 ;; This function calls:
 23371 ;;		Nothing
 23372 ;; This function is called by:
 23373 ;;		_ADCAverage
 23374 ;;		_pow
 23375 ;;		_exp
 23376 ;;		_floor
 23377 ;;		_log
 23378 ;;		_ADC_Voltage
 23379 ;; This function uses a non-reentrant model
 23380 ;;
 23381                           
 23382                           	psect	text128
 23383  012DEE                     __ptext128:
 23384                           	opt stack 0
 23385  012DEE                     ___xxtofl:
 23386                           	opt stack 19
 23387                           
 23388                           ; BSR set to: 0
 23389                           ;incstack = 0
 23390                           ;___xxtofl@sign stored from wreg
 23391  012DEE  0100               	movlb	0	; () banked
 23392  012DF0  6F68               	movwf	___xxtofl@sign& (0+255),b
 23393  012DF2  0100               	movlb	0	; () banked
 23394  012DF4  5168               	movf	___xxtofl@sign& (0+255),w,b
 23395  012DF6  A4D8               	btfss	status,2,c
 23396                           
 23397                           ; BSR set to: 0
 23398  012DF8  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23399  012DFA  D01A               	goto	l2885
 23400                           
 23401                           ; BSR set to: 0
 23402  012DFC  C060  F064         	movff	___xxtofl@val,??___xxtofl
 23403  012E00  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 23404  012E04  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 23405  012E08  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 23406  012E0C  1F64               	comf	??___xxtofl& (0+255),f,b
 23407  012E0E  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 23408  012E10  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 23409  012E12  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 23410  012E14  2B64               	incf	??___xxtofl& (0+255),f,b
 23411  012E16  0E00               	movlw	0
 23412  012E18  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 23413  012E1A  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 23414  012E1C  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 23415  012E1E  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 23416  012E22  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 23417  012E26  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 23418  012E2A  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 23419  012E2E  D008               	goto	l2886
 23420  012E30                     l2885:
 23421                           
 23422                           ; BSR set to: 0
 23423  012E30  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 23424  012E34  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 23425  012E38  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 23426  012E3C  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 23427  012E40                     l2886:
 23428                           
 23429                           ; BSR set to: 0
 23430                           
 23431                           ; BSR set to: 0
 23432  012E40  5160               	movf	___xxtofl@val& (0+255),w,b
 23433  012E42  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 23434  012E44  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 23435  012E46  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 23436  012E48  A4D8               	btfss	status,2,c
 23437  012E4A  D009               	goto	l2887
 23438                           
 23439                           ; BSR set to: 0
 23440  012E4C  0E00               	movlw	0
 23441  012E4E  6F60               	movwf	?___xxtofl& (0+255),b
 23442  012E50  0E00               	movlw	0
 23443  012E52  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 23444  012E54  0E00               	movlw	0
 23445  012E56  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 23446  012E58  0E00               	movlw	0
 23447  012E5A  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 23448                           
 23449                           ; BSR set to: 0
 23450  012E5C  0012               	return	
 23451  012E5E                     l2887:
 23452                           
 23453                           ; BSR set to: 0
 23454                           
 23455                           ; BSR set to: 0
 23456  012E5E  0E96               	movlw	150
 23457  012E60  6F69               	movwf	___xxtofl@exp& (0+255),b
 23458  012E62  D006               	goto	l2889
 23459  012E64                     
 23460                           ; BSR set to: 0
 23461                           
 23462                           ; BSR set to: 0
 23463  012E64  2B69               	incf	___xxtofl@exp& (0+255),f,b
 23464  012E66  90D8               	bcf	status,0,c
 23465  012E68  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23466  012E6A  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23467  012E6C  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23468  012E6E  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 23469  012E70                     l2889:
 23470                           
 23471                           ; BSR set to: 0
 23472                           
 23473                           ; BSR set to: 0
 23474  012E70  0E00               	movlw	0
 23475  012E72  156A               	andwf	___xxtofl@arg& (0+255),w,b
 23476  012E74  6F64               	movwf	??___xxtofl& (0+255),b
 23477  012E76  0E00               	movlw	0
 23478  012E78  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23479  012E7A  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 23480  012E7C  0E00               	movlw	0
 23481  012E7E  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23482  012E80  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 23483  012E82  0EFE               	movlw	254
 23484  012E84  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23485  012E86  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 23486  012E88  5164               	movf	??___xxtofl& (0+255),w,b
 23487  012E8A  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23488  012E8C  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23489  012E8E  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23490  012E90  B4D8               	btfsc	status,2,c
 23491  012E92  D00D               	goto	l2892
 23492  012E94  D7E7               	goto	l2890
 23493  012E96                     
 23494                           ; BSR set to: 0
 23495                           
 23496                           ; BSR set to: 0
 23497  012E96  2B69               	incf	___xxtofl@exp& (0+255),f,b
 23498                           
 23499                           ; BSR set to: 0
 23500  012E98  0E01               	movlw	1
 23501  012E9A  276A               	addwf	___xxtofl@arg& (0+255),f,b
 23502  012E9C  0E00               	movlw	0
 23503  012E9E  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 23504  012EA0  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 23505  012EA2  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 23506                           
 23507                           ; BSR set to: 0
 23508  012EA4  90D8               	bcf	status,0,c
 23509  012EA6  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23510  012EA8  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23511  012EAA  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23512  012EAC  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 23513  012EAE                     l2892:
 23514                           
 23515                           ; BSR set to: 0
 23516  012EAE  0E00               	movlw	0
 23517  012EB0  156A               	andwf	___xxtofl@arg& (0+255),w,b
 23518  012EB2  6F64               	movwf	??___xxtofl& (0+255),b
 23519  012EB4  0E00               	movlw	0
 23520  012EB6  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23521  012EB8  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 23522  012EBA  0E00               	movlw	0
 23523  012EBC  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23524  012EBE  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 23525  012EC0  0EFF               	movlw	255
 23526  012EC2  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23527  012EC4  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 23528  012EC6  5164               	movf	??___xxtofl& (0+255),w,b
 23529  012EC8  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23530  012ECA  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23531  012ECC  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23532  012ECE  B4D8               	btfsc	status,2,c
 23533  012ED0  D007               	goto	l2895
 23534  012ED2  D7E1               	goto	l2893
 23535  012ED4                     
 23536                           ; BSR set to: 0
 23537                           
 23538                           ; BSR set to: 0
 23539  012ED4  0769               	decf	___xxtofl@exp& (0+255),f,b
 23540  012ED6  90D8               	bcf	status,0,c
 23541  012ED8  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 23542  012EDA  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 23543  012EDC  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 23544  012EDE  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 23545  012EE0                     l2895:
 23546                           
 23547                           ; BSR set to: 0
 23548                           
 23549                           ; BSR set to: 0
 23550  012EE0  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 23551  012EE2  D003               	goto	u10700
 23552                           
 23553                           ; BSR set to: 0
 23554  012EE4  0E02               	movlw	2
 23555  012EE6  6169               	cpfslt	___xxtofl@exp& (0+255),b
 23556  012EE8  D7F5               	goto	l2896
 23557  012EEA                     u10700:
 23558                           
 23559                           ; BSR set to: 0
 23560                           
 23561                           ; BSR set to: 0
 23562  012EEA  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 23563  012EEC  D008               	goto	l2900
 23564                           
 23565                           ; BSR set to: 0
 23566  012EEE  0EFF               	movlw	255
 23567  012EF0  176A               	andwf	___xxtofl@arg& (0+255),f,b
 23568  012EF2  0EFF               	movlw	255
 23569  012EF4  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 23570  012EF6  0E7F               	movlw	127
 23571  012EF8  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 23572  012EFA  0EFF               	movlw	255
 23573  012EFC  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 23574  012EFE                     l2900:
 23575                           
 23576                           ; BSR set to: 0
 23577  012EFE  90D8               	bcf	status,0,c
 23578  012F00  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 23579  012F02  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 23580  012F06  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 23581  012F08  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 23582  012F0A  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 23583  012F0C  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 23584  012F10  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 23585  012F12  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 23586  012F14  6B64               	clrf	??___xxtofl& (0+255),b
 23587  012F16  5164               	movf	??___xxtofl& (0+255),w,b
 23588  012F18  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 23589  012F1A  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 23590  012F1C  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 23591  012F1E  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 23592  012F20  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 23593  012F22  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 23594  012F24  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 23595                           
 23596                           ; BSR set to: 0
 23597  012F26  5168               	movf	___xxtofl@sign& (0+255),w,b
 23598  012F28  A4D8               	btfss	status,2,c
 23599                           
 23600                           ; BSR set to: 0
 23601  012F2A  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23602  012F2C  D001               	goto	l2901
 23603                           
 23604                           ; BSR set to: 0
 23605  012F2E  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 23606  012F30                     l2901:
 23607                           
 23608                           ; BSR set to: 0
 23609                           
 23610                           ; BSR set to: 0
 23611  012F30  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 23612  012F34  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 23613  012F38  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 23614  012F3C  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 23615  012F40  0012               	return	
 23616  012F42                     __end_of___xxtofl:
 23617                           	opt stack 0
 23618                           tosu	equ	0xFFF
 23619                           tosh	equ	0xFFE
 23620                           tosl	equ	0xFFD
 23621                           pclath	equ	0xFFA
 23622                           tblptru	equ	0xFF8
 23623                           tblptrh	equ	0xFF7
 23624                           tblptrl	equ	0xFF6
 23625                           tablat	equ	0xFF5
 23626                           prodh	equ	0xFF4
 23627                           prodl	equ	0xFF3
 23628                           intcon	equ	0xFF2
 23629                           indf0	equ	0xFEF
 23630                           postinc0	equ	0xFEE
 23631                           fsr0h	equ	0xFEA
 23632                           fsr0l	equ	0xFE9
 23633                           wreg	equ	0xFE8
 23634                           indf1	equ	0xFE7
 23635                           postdec1	equ	0xFE5
 23636                           fsr1h	equ	0xFE2
 23637                           fsr1l	equ	0xFE1
 23638                           indf2	equ	0xFDF
 23639                           postinc2	equ	0xFDE
 23640                           postdec2	equ	0xFDD
 23641                           plusw2	equ	0xFDB
 23642                           fsr2h	equ	0xFDA
 23643                           fsr2l	equ	0xFD9
 23644                           status	equ	0xFD8
 23645                           
 23646 ;; *************** function ___fltol *****************
 23647 ;; Defined at:
 23648 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fltol.c"
 23649 ;; Parameters:    Size  Location     Type
 23650 ;;  f1              4   63[BANK0 ] unsigned char 
 23651 ;; Auto vars:     Size  Location     Type
 23652 ;;  exp1            1   72[BANK0 ] unsigned char 
 23653 ;;  sign1           1   71[BANK0 ] unsigned char 
 23654 ;; Return value:  Size  Location     Type
 23655 ;;                  4   63[BANK0 ] long 
 23656 ;; Registers used:
 23657 ;;		wreg, status,2, status,0
 23658 ;; Tracked objects:
 23659 ;;		On entry : 0/0
 23660 ;;		On exit  : 0/0
 23661 ;;		Unchanged: 0/0
 23662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23663 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23664 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23665 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23666 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23667 ;;Total ram usage:       10 bytes
 23668 ;; Hardware stack levels used:    1
 23669 ;; Hardware stack levels required when called:    7
 23670 ;; This function calls:
 23671 ;;		Nothing
 23672 ;; This function is called by:
 23673 ;;		_ADCAverage
 23674 ;;		_pow
 23675 ;;		_exp
 23676 ;;		_floor
 23677 ;; This function uses a non-reentrant model
 23678 ;;
 23679                           
 23680                           	psect	text129
 23681  013DD2                     __ptext129:
 23682                           	opt stack 0
 23683  013DD2                     ___fltol:
 23684                           	opt stack 18
 23685                           
 23686                           ; BSR set to: 0
 23687                           ;incstack = 0
 23688  013DD2  0100               	movlb	0	; () banked
 23689  013DD4  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
 23690  013DD6  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
 23691  013DD8  6FA8               	movwf	___fltol@exp1& (0+255),b
 23692  013DDA  51A8               	movf	___fltol@exp1& (0+255),w,b
 23693  013DDC  A4D8               	btfss	status,2,c
 23694  013DDE  D009               	goto	l2552
 23695                           
 23696                           ; BSR set to: 0
 23697  013DE0  0E00               	movlw	0
 23698  013DE2  6F9F               	movwf	?___fltol& (0+255),b
 23699  013DE4  0E00               	movlw	0
 23700  013DE6  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23701  013DE8  0E00               	movlw	0
 23702  013DEA  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23703  013DEC  0E00               	movlw	0
 23704  013DEE  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23705                           
 23706                           ; BSR set to: 0
 23707  013DF0  0012               	return	
 23708  013DF2                     l2552:
 23709                           
 23710                           ; BSR set to: 0
 23711                           
 23712                           ; BSR set to: 0
 23713  013DF2  C09F  F0A3         	movff	___fltol@f1,??___fltol
 23714  013DF6  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
 23715  013DFA  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
 23716  013DFE  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
 23717  013E02  0E20               	movlw	32
 23718  013E04  D005               	goto	u10520
 23719  013E06                     u10525:
 23720  013E06  90D8               	bcf	status,0,c
 23721  013E08  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
 23722  013E0A  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
 23723  013E0C  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
 23724  013E0E  33A3               	rrcf	??___fltol& (0+255),f,b
 23725  013E10                     u10520:
 23726  013E10  2EE8               	decfsz	wreg,f,c
 23727  013E12  D7F9               	goto	u10525
 23728  013E14  51A3               	movf	??___fltol& (0+255),w,b
 23729  013E16  6FA7               	movwf	___fltol@sign1& (0+255),b
 23730                           
 23731                           ; BSR set to: 0
 23732  013E18  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
 23733                           
 23734                           ; BSR set to: 0
 23735  013E1A  0EFF               	movlw	255
 23736  013E1C  179F               	andwf	___fltol@f1& (0+255),f,b
 23737  013E1E  0EFF               	movlw	255
 23738  013E20  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
 23739  013E22  0EFF               	movlw	255
 23740  013E24  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
 23741  013E26  0E00               	movlw	0
 23742  013E28  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
 23743                           
 23744                           ; BSR set to: 0
 23745  013E2A  0E96               	movlw	150
 23746  013E2C  5FA8               	subwf	___fltol@exp1& (0+255),f,b
 23747                           
 23748                           ; BSR set to: 0
 23749  013E2E  AFA8               	btfss	___fltol@exp1& (0+255),7,b
 23750  013E30  D016               	goto	l2554
 23751                           
 23752                           ; BSR set to: 0
 23753  013E32  51A8               	movf	___fltol@exp1& (0+255),w,b
 23754  013E34  0A80               	xorlw	128
 23755  013E36  0F97               	addlw	151
 23756  013E38  B0D8               	btfsc	status,0,c
 23757  013E3A  D009               	goto	l2555
 23758                           
 23759                           ; BSR set to: 0
 23760  013E3C  0E00               	movlw	0
 23761  013E3E  6F9F               	movwf	?___fltol& (0+255),b
 23762  013E40  0E00               	movlw	0
 23763  013E42  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23764  013E44  0E00               	movlw	0
 23765  013E46  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23766  013E48  0E00               	movlw	0
 23767  013E4A  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23768                           
 23769                           ; BSR set to: 0
 23770  013E4C  0012               	return	
 23771  013E4E                     l2555:
 23772                           
 23773                           ; BSR set to: 0
 23774                           
 23775                           ; BSR set to: 0
 23776                           
 23777                           ; BSR set to: 0
 23778  013E4E  90D8               	bcf	status,0,c
 23779  013E50  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
 23780  013E52  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
 23781  013E54  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
 23782  013E56  339F               	rrcf	___fltol@f1& (0+255),f,b
 23783                           
 23784                           ; BSR set to: 0
 23785  013E58  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
 23786  013E5A  D7F9               	goto	l2555
 23787                           
 23788                           ; BSR set to: 0
 23789  013E5C  D015               	goto	u10560
 23790  013E5E                     l2554:
 23791                           
 23792                           ; BSR set to: 0
 23793                           
 23794                           ; BSR set to: 0
 23795  013E5E  0E1F               	movlw	31
 23796  013E60  65A8               	cpfsgt	___fltol@exp1& (0+255),b
 23797  013E62  D00F               	goto	l2560
 23798                           
 23799                           ; BSR set to: 0
 23800  013E64  0E00               	movlw	0
 23801  013E66  6F9F               	movwf	?___fltol& (0+255),b
 23802  013E68  0E00               	movlw	0
 23803  013E6A  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23804  013E6C  0E00               	movlw	0
 23805  013E6E  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23806  013E70  0E00               	movlw	0
 23807  013E72  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23808                           
 23809                           ; BSR set to: 0
 23810  013E74  0012               	return	
 23811  013E76                     
 23812                           ; BSR set to: 0
 23813                           
 23814                           ; BSR set to: 0
 23815  013E76  90D8               	bcf	status,0,c
 23816  013E78  379F               	rlcf	___fltol@f1& (0+255),f,b
 23817  013E7A  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
 23818  013E7C  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
 23819  013E7E  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
 23820  013E80  07A8               	decf	___fltol@exp1& (0+255),f,b
 23821  013E82                     l2560:
 23822                           
 23823                           ; BSR set to: 0
 23824                           
 23825                           ; BSR set to: 0
 23826  013E82  51A8               	movf	___fltol@exp1& (0+255),w,b
 23827  013E84  A4D8               	btfss	status,2,c
 23828  013E86  D7F7               	goto	l2561
 23829  013E88                     u10560:
 23830                           
 23831                           ; BSR set to: 0
 23832                           
 23833                           ; BSR set to: 0
 23834                           
 23835                           ; BSR set to: 0
 23836  013E88  51A7               	movf	___fltol@sign1& (0+255),w,b
 23837  013E8A  B4D8               	btfsc	status,2,c
 23838  013E8C  D008               	goto	l2563
 23839                           
 23840                           ; BSR set to: 0
 23841  013E8E  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
 23842  013E90  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
 23843  013E92  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
 23844  013E94  6D9F               	negf	___fltol@f1& (0+255),b
 23845  013E96  0E00               	movlw	0
 23846  013E98  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
 23847  013E9A  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
 23848  013E9C  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
 23849  013E9E                     l2563:
 23850                           
 23851                           ; BSR set to: 0
 23852                           
 23853                           ; BSR set to: 0
 23854  013E9E  C09F  F09F         	movff	___fltol@f1,?___fltol
 23855  013EA2  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
 23856  013EA6  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
 23857  013EAA  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
 23858  013EAE  0012               	return	
 23859  013EB0                     __end_of___fltol:
 23860                           	opt stack 0
 23861                           tosu	equ	0xFFF
 23862                           tosh	equ	0xFFE
 23863                           tosl	equ	0xFFD
 23864                           pclath	equ	0xFFA
 23865                           tblptru	equ	0xFF8
 23866                           tblptrh	equ	0xFF7
 23867                           tblptrl	equ	0xFF6
 23868                           tablat	equ	0xFF5
 23869                           prodh	equ	0xFF4
 23870                           prodl	equ	0xFF3
 23871                           intcon	equ	0xFF2
 23872                           indf0	equ	0xFEF
 23873                           postinc0	equ	0xFEE
 23874                           fsr0h	equ	0xFEA
 23875                           fsr0l	equ	0xFE9
 23876                           wreg	equ	0xFE8
 23877                           indf1	equ	0xFE7
 23878                           postdec1	equ	0xFE5
 23879                           fsr1h	equ	0xFE2
 23880                           fsr1l	equ	0xFE1
 23881                           indf2	equ	0xFDF
 23882                           postinc2	equ	0xFDE
 23883                           postdec2	equ	0xFDD
 23884                           plusw2	equ	0xFDB
 23885                           fsr2h	equ	0xFDA
 23886                           fsr2l	equ	0xFD9
 23887                           status	equ	0xFD8
 23888                           
 23889 ;; *************** function ___flge *****************
 23890 ;; Defined at:
 23891 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flge.c"
 23892 ;; Parameters:    Size  Location     Type
 23893 ;;  ff1             4    0[BANK0 ] long 
 23894 ;;  ff2             4    4[BANK0 ] long 
 23895 ;; Auto vars:     Size  Location     Type
 23896 ;;		None
 23897 ;; Return value:  Size  Location     Type
 23898 ;;		None               void
 23899 ;; Registers used:
 23900 ;;		wreg, status,2, status,0
 23901 ;; Tracked objects:
 23902 ;;		On entry : 0/0
 23903 ;;		On exit  : 0/0
 23904 ;;		Unchanged: 0/0
 23905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23906 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23908 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23909 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23910 ;;Total ram usage:       12 bytes
 23911 ;; Hardware stack levels used:    1
 23912 ;; Hardware stack levels required when called:    7
 23913 ;; This function calls:
 23914 ;;		Nothing
 23915 ;; This function is called by:
 23916 ;;		_pow
 23917 ;;		_exp
 23918 ;;		_floor
 23919 ;; This function uses a non-reentrant model
 23920 ;;
 23921                           
 23922                           	psect	text130
 23923  01358A                     __ptext130:
 23924                           	opt stack 0
 23925  01358A                     ___flge:
 23926                           	opt stack 18
 23927                           
 23928                           ; BSR set to: 0
 23929                           ;incstack = 0
 23930  01358A  0E00               	movlw	0
 23931  01358C  0100               	movlb	0	; () banked
 23932  01358E  1560               	andwf	___flge@ff1& (0+255),w,b
 23933  013590  6F68               	movwf	??___flge& (0+255),b
 23934  013592  0E00               	movlw	0
 23935  013594  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 23936  013596  6F69               	movwf	(??___flge+1)& (0+255),b
 23937  013598  0E80               	movlw	128
 23938  01359A  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 23939  01359C  6F6A               	movwf	(??___flge+2)& (0+255),b
 23940  01359E  0E7F               	movlw	127
 23941  0135A0  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 23942  0135A2  6F6B               	movwf	(??___flge+3)& (0+255),b
 23943  0135A4  5168               	movf	??___flge& (0+255),w,b
 23944  0135A6  1169               	iorwf	(??___flge+1)& (0+255),w,b
 23945  0135A8  116A               	iorwf	(??___flge+2)& (0+255),w,b
 23946  0135AA  116B               	iorwf	(??___flge+3)& (0+255),w,b
 23947  0135AC  A4D8               	btfss	status,2,c
 23948  0135AE  D008               	goto	l2522
 23949                           
 23950                           ; BSR set to: 0
 23951  0135B0  0E00               	movlw	0
 23952  0135B2  6F60               	movwf	___flge@ff1& (0+255),b
 23953  0135B4  0E00               	movlw	0
 23954  0135B6  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 23955  0135B8  0E00               	movlw	0
 23956  0135BA  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 23957  0135BC  0E00               	movlw	0
 23958  0135BE  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 23959  0135C0                     l2522:
 23960                           
 23961                           ; BSR set to: 0
 23962                           
 23963                           ; BSR set to: 0
 23964  0135C0  0E00               	movlw	0
 23965  0135C2  1564               	andwf	___flge@ff2& (0+255),w,b
 23966  0135C4  6F68               	movwf	??___flge& (0+255),b
 23967  0135C6  0E00               	movlw	0
 23968  0135C8  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 23969  0135CA  6F69               	movwf	(??___flge+1)& (0+255),b
 23970  0135CC  0E80               	movlw	128
 23971  0135CE  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 23972  0135D0  6F6A               	movwf	(??___flge+2)& (0+255),b
 23973  0135D2  0E7F               	movlw	127
 23974  0135D4  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 23975  0135D6  6F6B               	movwf	(??___flge+3)& (0+255),b
 23976  0135D8  5168               	movf	??___flge& (0+255),w,b
 23977  0135DA  1169               	iorwf	(??___flge+1)& (0+255),w,b
 23978  0135DC  116A               	iorwf	(??___flge+2)& (0+255),w,b
 23979  0135DE  116B               	iorwf	(??___flge+3)& (0+255),w,b
 23980  0135E0  A4D8               	btfss	status,2,c
 23981  0135E2  D008               	goto	l2523
 23982                           
 23983                           ; BSR set to: 0
 23984  0135E4  0E00               	movlw	0
 23985  0135E6  6F64               	movwf	___flge@ff2& (0+255),b
 23986  0135E8  0E00               	movlw	0
 23987  0135EA  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 23988  0135EC  0E00               	movlw	0
 23989  0135EE  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 23990  0135F0  0E00               	movlw	0
 23991  0135F2  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 23992  0135F4                     l2523:
 23993                           
 23994                           ; BSR set to: 0
 23995                           
 23996                           ; BSR set to: 0
 23997  0135F4  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 23998  0135F6  D01D               	goto	l2524
 23999                           
 24000                           ; BSR set to: 0
 24001  0135F8  C060  F068         	movff	___flge@ff1,??___flge
 24002  0135FC  C061  F069         	movff	___flge@ff1+1,??___flge+1
 24003  013600  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 24004  013604  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 24005  013608  1F68               	comf	??___flge& (0+255),f,b
 24006  01360A  1F69               	comf	(??___flge+1)& (0+255),f,b
 24007  01360C  1F6A               	comf	(??___flge+2)& (0+255),f,b
 24008  01360E  1F6B               	comf	(??___flge+3)& (0+255),f,b
 24009  013610  2B68               	incf	??___flge& (0+255),f,b
 24010  013612  0E00               	movlw	0
 24011  013614  2369               	addwfc	(??___flge+1)& (0+255),f,b
 24012  013616  236A               	addwfc	(??___flge+2)& (0+255),f,b
 24013  013618  236B               	addwfc	(??___flge+3)& (0+255),f,b
 24014  01361A  0E00               	movlw	0
 24015  01361C  2568               	addwf	??___flge& (0+255),w,b
 24016  01361E  6F60               	movwf	___flge@ff1& (0+255),b
 24017  013620  0E00               	movlw	0
 24018  013622  2169               	addwfc	(??___flge+1)& (0+255),w,b
 24019  013624  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 24020  013626  0E00               	movlw	0
 24021  013628  216A               	addwfc	(??___flge+2)& (0+255),w,b
 24022  01362A  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 24023  01362C  0E80               	movlw	128
 24024  01362E  216B               	addwfc	(??___flge+3)& (0+255),w,b
 24025  013630  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 24026  013632                     l2524:
 24027                           
 24028                           ; BSR set to: 0
 24029                           
 24030                           ; BSR set to: 0
 24031  013632  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 24032  013634  D01D               	goto	l2525
 24033                           
 24034                           ; BSR set to: 0
 24035  013636  C064  F068         	movff	___flge@ff2,??___flge
 24036  01363A  C065  F069         	movff	___flge@ff2+1,??___flge+1
 24037  01363E  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 24038  013642  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 24039  013646  1F68               	comf	??___flge& (0+255),f,b
 24040  013648  1F69               	comf	(??___flge+1)& (0+255),f,b
 24041  01364A  1F6A               	comf	(??___flge+2)& (0+255),f,b
 24042  01364C  1F6B               	comf	(??___flge+3)& (0+255),f,b
 24043  01364E  2B68               	incf	??___flge& (0+255),f,b
 24044  013650  0E00               	movlw	0
 24045  013652  2369               	addwfc	(??___flge+1)& (0+255),f,b
 24046  013654  236A               	addwfc	(??___flge+2)& (0+255),f,b
 24047  013656  236B               	addwfc	(??___flge+3)& (0+255),f,b
 24048  013658  0E00               	movlw	0
 24049  01365A  2568               	addwf	??___flge& (0+255),w,b
 24050  01365C  6F64               	movwf	___flge@ff2& (0+255),b
 24051  01365E  0E00               	movlw	0
 24052  013660  2169               	addwfc	(??___flge+1)& (0+255),w,b
 24053  013662  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 24054  013664  0E00               	movlw	0
 24055  013666  216A               	addwfc	(??___flge+2)& (0+255),w,b
 24056  013668  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 24057  01366A  0E80               	movlw	128
 24058  01366C  216B               	addwfc	(??___flge+3)& (0+255),w,b
 24059  01366E  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 24060  013670                     l2525:
 24061                           
 24062                           ; BSR set to: 0
 24063  013670  0E00               	movlw	0
 24064  013672  1B60               	xorwf	___flge@ff1& (0+255),f,b
 24065  013674  0E00               	movlw	0
 24066  013676  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 24067  013678  0E00               	movlw	0
 24068  01367A  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 24069  01367C  0E80               	movlw	128
 24070  01367E  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 24071  013680  0E00               	movlw	0
 24072  013682  1B64               	xorwf	___flge@ff2& (0+255),f,b
 24073  013684  0E00               	movlw	0
 24074  013686  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 24075  013688  0E00               	movlw	0
 24076  01368A  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 24077  01368C  0E80               	movlw	128
 24078  01368E  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 24079  013690  5164               	movf	___flge@ff2& (0+255),w,b
 24080  013692  5D60               	subwf	___flge@ff1& (0+255),w,b
 24081  013694  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 24082  013696  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 24083  013698  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 24084  01369A  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 24085  01369C  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 24086  01369E  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 24087  0136A0  B0D8               	btfsc	status,0,c
 24088  0136A2  D002               	goto	l12361
 24089                           
 24090                           ; BSR set to: 0
 24091  0136A4  90D8               	bcf	status,0,c
 24092  0136A6  0012               	return	
 24093  0136A8                     l12361:
 24094                           
 24095                           ; BSR set to: 0
 24096                           
 24097                           ; BSR set to: 0
 24098  0136A8  80D8               	bsf	status,0,c
 24099                           
 24100                           ; BSR set to: 0
 24101  0136AA  0012               	return	
 24102  0136AC                     __end_of___flge:
 24103                           	opt stack 0
 24104                           tosu	equ	0xFFF
 24105                           tosh	equ	0xFFE
 24106                           tosl	equ	0xFFD
 24107                           pclath	equ	0xFFA
 24108                           tblptru	equ	0xFF8
 24109                           tblptrh	equ	0xFF7
 24110                           tblptrl	equ	0xFF6
 24111                           tablat	equ	0xFF5
 24112                           prodh	equ	0xFF4
 24113                           prodl	equ	0xFF3
 24114                           intcon	equ	0xFF2
 24115                           indf0	equ	0xFEF
 24116                           postinc0	equ	0xFEE
 24117                           fsr0h	equ	0xFEA
 24118                           fsr0l	equ	0xFE9
 24119                           wreg	equ	0xFE8
 24120                           indf1	equ	0xFE7
 24121                           postdec1	equ	0xFE5
 24122                           fsr1h	equ	0xFE2
 24123                           fsr1l	equ	0xFE1
 24124                           indf2	equ	0xFDF
 24125                           postinc2	equ	0xFDE
 24126                           postdec2	equ	0xFDD
 24127                           plusw2	equ	0xFDB
 24128                           fsr2h	equ	0xFDA
 24129                           fsr2l	equ	0xFD9
 24130                           status	equ	0xFD8
 24131                           
 24132 ;; *************** function _eval_poly *****************
 24133 ;; Defined at:
 24134 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
 24135 ;; Parameters:    Size  Location     Type
 24136 ;;  x               4   63[BANK0 ] long 
 24137 ;;  d               2   67[BANK0 ] PTR const 
 24138 ;;		 -> log@coeff(36), exp@coeff(40), 
 24139 ;;  n               2   69[BANK0 ] int 
 24140 ;; Auto vars:     Size  Location     Type
 24141 ;;  res             4   75[BANK0 ] int 
 24142 ;; Return value:  Size  Location     Type
 24143 ;;                  4   63[BANK0 ] int 
 24144 ;; Registers used:
 24145 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24146 ;; Tracked objects:
 24147 ;;		On entry : 0/0
 24148 ;;		On exit  : 0/0
 24149 ;;		Unchanged: 0/0
 24150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24151 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24152 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24153 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24154 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24155 ;;Total ram usage:       16 bytes
 24156 ;; Hardware stack levels used:    1
 24157 ;; Hardware stack levels required when called:    8
 24158 ;; This function calls:
 24159 ;;		___fladd
 24160 ;;		___flmul
 24161 ;; This function is called by:
 24162 ;;		_exp
 24163 ;;		_log
 24164 ;; This function uses a non-reentrant model
 24165 ;;
 24166                           
 24167                           	psect	text131
 24168  013AEE                     __ptext131:
 24169                           	opt stack 0
 24170  013AEE                     _eval_poly:
 24171                           	opt stack 18
 24172                           
 24173                           ; BSR set to: 0
 24174                           ;incstack = 0
 24175  013AEE  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 24176  013AF2  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 24177  013AF6  0100               	movlb	0	; () banked
 24178  013AF8  90D8               	bcf	status,0,c
 24179  013AFA  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24180  013AFC  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24181  013AFE  90D8               	bcf	status,0,c
 24182  013B00  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24183  013B02  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24184  013B04  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 24185  013B08  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 24186  013B0C  51A7               	movf	??_eval_poly& (0+255),w,b
 24187  013B0E  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 24188  013B10  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 24189  013B12  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 24190  013B14  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 24191  013B18  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 24192  013B1C                     	if	0	;tblptru may be non-zero
 24193  013B1C                     	endif
 24194  013B1C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24195  013B1C  0E00               	movlw	low (__mediumconst shr (0+16))
 24196  013B1E  6EF8               	movwf	tblptru,c
 24197  013B20                     	endif
 24198  013B20  0009               	tblrd		*+
 24199  013B22  CFF5 F0AB          	movff	tablat,eval_poly@res
 24200  013B26  0009               	tblrd		*+
 24201  013B28  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 24202  013B2C  0009               	tblrd		*+
 24203  013B2E  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 24204  013B32  000A               	tblrd		*-
 24205  013B34  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 24206  013B38  D04C               	goto	l2966
 24207  013B3A                     
 24208                           ; BSR set to: 0
 24209                           
 24210                           ; BSR set to: 0
 24211  013B3A  C0AB  F072         	movff	eval_poly@res,___flmul@a
 24212  013B3E  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 24213  013B42  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 24214  013B46  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 24215  013B4A  C09F  F06E         	movff	eval_poly@x,___flmul@b
 24216  013B4E  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 24217  013B52  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 24218  013B56  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 24219  013B5A  ECA1  F085         	call	___flmul	;wreg free
 24220  013B5E  C06E  F08B         	movff	?___flmul,___fladd@b
 24221  013B62  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 24222  013B66  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 24223  013B6A  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 24224  013B6E  0100               	movlb	0	; () banked
 24225  013B70  07A5               	decf	eval_poly@n& (0+255),f,b
 24226  013B72  A0D8               	btfss	status,0,c
 24227  013B74  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 24228  013B76  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 24229  013B7A  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 24230  013B7E  90D8               	bcf	status,0,c
 24231  013B80  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24232  013B82  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24233  013B84  90D8               	bcf	status,0,c
 24234  013B86  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24235  013B88  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24236  013B8A  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 24237  013B8E  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 24238  013B92  51A7               	movf	??_eval_poly& (0+255),w,b
 24239  013B94  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 24240  013B96  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 24241  013B98  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 24242  013B9A  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 24243  013B9E  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 24244  013BA2                     	if	0	;tblptru may be non-zero
 24245  013BA2                     	endif
 24246  013BA2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24247  013BA2  0E00               	movlw	low (__mediumconst shr (0+16))
 24248  013BA4  6EF8               	movwf	tblptru,c
 24249  013BA6                     	endif
 24250  013BA6  0009               	tblrd		*+
 24251  013BA8  CFF5 F08F          	movff	tablat,___fladd@a
 24252  013BAC  0009               	tblrd		*+
 24253  013BAE  CFF5 F090          	movff	tablat,___fladd@a+1
 24254  013BB2  0009               	tblrd		*+
 24255  013BB4  CFF5 F091          	movff	tablat,___fladd@a+2
 24256  013BB8  000A               	tblrd		*-
 24257  013BBA  CFF5 F092          	movff	tablat,___fladd@a+3
 24258  013BBE  EC4A  F087         	call	___fladd	;wreg free
 24259  013BC2  C08B  F0AB         	movff	?___fladd,eval_poly@res
 24260  013BC6  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 24261  013BCA  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 24262  013BCE  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 24263  013BD2                     l2966:
 24264  013BD2  0100               	movlb	0	; () banked
 24265  013BD4  51A5               	movf	eval_poly@n& (0+255),w,b
 24266  013BD6  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 24267  013BD8  A4D8               	btfss	status,2,c
 24268  013BDA  D7AF               	goto	l2967
 24269                           
 24270                           ; BSR set to: 0
 24271  013BDC  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 24272  013BE0  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 24273  013BE4  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 24274  013BE8  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 24275                           
 24276                           ; BSR set to: 0
 24277  013BEC  0012               	return		;funcret
 24278  013BEE                     __end_of_eval_poly:
 24279                           	opt stack 0
 24280                           tosu	equ	0xFFF
 24281                           tosh	equ	0xFFE
 24282                           tosl	equ	0xFFD
 24283                           pclath	equ	0xFFA
 24284                           tblptru	equ	0xFF8
 24285                           tblptrh	equ	0xFF7
 24286                           tblptrl	equ	0xFF6
 24287                           tablat	equ	0xFF5
 24288                           prodh	equ	0xFF4
 24289                           prodl	equ	0xFF3
 24290                           intcon	equ	0xFF2
 24291                           indf0	equ	0xFEF
 24292                           postinc0	equ	0xFEE
 24293                           fsr0h	equ	0xFEA
 24294                           fsr0l	equ	0xFE9
 24295                           wreg	equ	0xFE8
 24296                           indf1	equ	0xFE7
 24297                           postdec1	equ	0xFE5
 24298                           fsr1h	equ	0xFE2
 24299                           fsr1l	equ	0xFE1
 24300                           indf2	equ	0xFDF
 24301                           postinc2	equ	0xFDE
 24302                           postdec2	equ	0xFDD
 24303                           plusw2	equ	0xFDB
 24304                           fsr2h	equ	0xFDA
 24305                           fsr2l	equ	0xFD9
 24306                           status	equ	0xFD8
 24307                           
 24308 ;; *************** function ___flmul *****************
 24309 ;; Defined at:
 24310 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcmul.c"
 24311 ;; Parameters:    Size  Location     Type
 24312 ;;  b               4   14[BANK0 ] int 
 24313 ;;  a               4   18[BANK0 ] int 
 24314 ;; Auto vars:     Size  Location     Type
 24315 ;;  prod            4   33[BANK0 ] struct .
 24316 ;;  grs             4   28[BANK0 ] unsigned long 
 24317 ;;  temp            2   37[BANK0 ] struct .
 24318 ;;  bexp            1   32[BANK0 ] unsigned char 
 24319 ;;  aexp            1   27[BANK0 ] unsigned char 
 24320 ;;  sign            1   26[BANK0 ] unsigned char 
 24321 ;; Return value:  Size  Location     Type
 24322 ;;                  4   14[BANK0 ] unsigned char 
 24323 ;; Registers used:
 24324 ;;		wreg, status,2, status,0, prodl, prodh
 24325 ;; Tracked objects:
 24326 ;;		On entry : 0/0
 24327 ;;		On exit  : 0/0
 24328 ;;		Unchanged: 0/0
 24329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24330 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24331 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24332 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24333 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24334 ;;Total ram usage:       25 bytes
 24335 ;; Hardware stack levels used:    1
 24336 ;; Hardware stack levels required when called:    7
 24337 ;; This function calls:
 24338 ;;		Nothing
 24339 ;; This function is called by:
 24340 ;;		_ADCAverage
 24341 ;;		_pow
 24342 ;;		_exp
 24343 ;;		_log
 24344 ;;		_eval_poly
 24345 ;;		_ADC_Voltage
 24346 ;; This function uses a non-reentrant model
 24347 ;;
 24348                           
 24349                           	psect	text132
 24350  010B42                     __ptext132:
 24351                           	opt stack 0
 24352  010B42                     ___flmul:
 24353                           	opt stack 18
 24354                           
 24355                           ; BSR set to: 0
 24356                           ;incstack = 0
 24357  010B42  0100               	movlb	0	; () banked
 24358  010B44  5171               	movf	(___flmul@b+3)& (0+255),w,b
 24359  010B46  0B80               	andlw	128
 24360  010B48  6F7A               	movwf	___flmul@sign& (0+255),b
 24361  010B4A  5171               	movf	(___flmul@b+3)& (0+255),w,b
 24362  010B4C  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 24363  010B4E  6F80               	movwf	___flmul@bexp& (0+255),b
 24364                           
 24365                           ; BSR set to: 0
 24366  010B50  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 24367                           
 24368                           ; BSR set to: 0
 24369  010B52  8180               	bsf	___flmul@bexp& (0+255),0,b
 24370                           
 24371                           ; BSR set to: 0
 24372                           
 24373                           ; BSR set to: 0
 24374  010B54  5180               	movf	___flmul@bexp& (0+255),w,b
 24375  010B56  B4D8               	btfsc	status,2,c
 24376  010B58  D00D               	goto	l2857
 24377                           
 24378                           ; BSR set to: 0
 24379  010B5A  2980               	incf	___flmul@bexp& (0+255),w,b
 24380  010B5C  A4D8               	btfss	status,2,c
 24381  010B5E  D008               	goto	l2858
 24382                           
 24383                           ; BSR set to: 0
 24384  010B60  0E00               	movlw	0
 24385  010B62  6F6E               	movwf	___flmul@b& (0+255),b
 24386  010B64  0E00               	movlw	0
 24387  010B66  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 24388  010B68  0E00               	movlw	0
 24389  010B6A  6F70               	movwf	(___flmul@b+2)& (0+255),b
 24390  010B6C  0E00               	movlw	0
 24391  010B6E  6F71               	movwf	(___flmul@b+3)& (0+255),b
 24392  010B70                     l2858:
 24393                           
 24394                           ; BSR set to: 0
 24395                           
 24396                           ; BSR set to: 0
 24397  010B70  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 24398  010B72  D008               	goto	l2859
 24399  010B74                     l2857:
 24400                           
 24401                           ; BSR set to: 0
 24402                           
 24403                           ; BSR set to: 0
 24404  010B74  0E00               	movlw	0
 24405  010B76  6F6E               	movwf	___flmul@b& (0+255),b
 24406  010B78  0E00               	movlw	0
 24407  010B7A  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 24408  010B7C  0E00               	movlw	0
 24409  010B7E  6F70               	movwf	(___flmul@b+2)& (0+255),b
 24410  010B80  0E00               	movlw	0
 24411  010B82  6F71               	movwf	(___flmul@b+3)& (0+255),b
 24412  010B84                     l2859:
 24413                           
 24414                           ; BSR set to: 0
 24415                           
 24416                           ; BSR set to: 0
 24417  010B84  5175               	movf	(___flmul@a+3)& (0+255),w,b
 24418  010B86  0B80               	andlw	128
 24419  010B88  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 24420                           
 24421                           ; BSR set to: 0
 24422  010B8A  5175               	movf	(___flmul@a+3)& (0+255),w,b
 24423  010B8C  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 24424  010B8E  6F7B               	movwf	___flmul@aexp& (0+255),b
 24425                           
 24426                           ; BSR set to: 0
 24427  010B90  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 24428                           
 24429                           ; BSR set to: 0
 24430  010B92  817B               	bsf	___flmul@aexp& (0+255),0,b
 24431                           
 24432                           ; BSR set to: 0
 24433                           
 24434                           ; BSR set to: 0
 24435  010B94  517B               	movf	___flmul@aexp& (0+255),w,b
 24436  010B96  B4D8               	btfsc	status,2,c
 24437  010B98  D00D               	goto	l2861
 24438                           
 24439                           ; BSR set to: 0
 24440  010B9A  297B               	incf	___flmul@aexp& (0+255),w,b
 24441  010B9C  A4D8               	btfss	status,2,c
 24442  010B9E  D008               	goto	l2862
 24443                           
 24444                           ; BSR set to: 0
 24445  010BA0  0E00               	movlw	0
 24446  010BA2  6F72               	movwf	___flmul@a& (0+255),b
 24447  010BA4  0E00               	movlw	0
 24448  010BA6  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24449  010BA8  0E00               	movlw	0
 24450  010BAA  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24451  010BAC  0E00               	movlw	0
 24452  010BAE  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24453  010BB0                     l2862:
 24454                           
 24455                           ; BSR set to: 0
 24456                           
 24457                           ; BSR set to: 0
 24458  010BB0  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 24459  010BB2  D008               	goto	l2863
 24460  010BB4                     l2861:
 24461                           
 24462                           ; BSR set to: 0
 24463                           
 24464                           ; BSR set to: 0
 24465  010BB4  0E00               	movlw	0
 24466  010BB6  6F72               	movwf	___flmul@a& (0+255),b
 24467  010BB8  0E00               	movlw	0
 24468  010BBA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24469  010BBC  0E00               	movlw	0
 24470  010BBE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24471  010BC0  0E00               	movlw	0
 24472  010BC2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24473  010BC4                     l2863:
 24474                           
 24475                           ; BSR set to: 0
 24476  010BC4  517B               	movf	___flmul@aexp& (0+255),w,b
 24477  010BC6  B4D8               	btfsc	status,2,c
 24478  010BC8  D003               	goto	u10280
 24479                           
 24480                           ; BSR set to: 0
 24481  010BCA  5180               	movf	___flmul@bexp& (0+255),w,b
 24482  010BCC  A4D8               	btfss	status,2,c
 24483  010BCE  D009               	goto	l2864
 24484  010BD0                     u10280:
 24485                           
 24486                           ; BSR set to: 0
 24487                           
 24488                           ; BSR set to: 0
 24489  010BD0  0E00               	movlw	0
 24490  010BD2  6F6E               	movwf	?___flmul& (0+255),b
 24491  010BD4  0E00               	movlw	0
 24492  010BD6  6F6F               	movwf	(?___flmul+1)& (0+255),b
 24493  010BD8  0E00               	movlw	0
 24494  010BDA  6F70               	movwf	(?___flmul+2)& (0+255),b
 24495  010BDC  0E00               	movlw	0
 24496  010BDE  6F71               	movwf	(?___flmul+3)& (0+255),b
 24497                           
 24498                           ; BSR set to: 0
 24499  010BE0  0012               	return	
 24500  010BE2                     l2864:
 24501                           
 24502                           ; BSR set to: 0
 24503                           
 24504                           ; BSR set to: 0
 24505  010BE2  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24506  010BE4  036E               	mulwf	___flmul@b& (0+255),b
 24507  010BE6  CFF3 F085          	movff	prodl,___flmul@temp
 24508  010BEA  CFF4 F086          	movff	prodh,___flmul@temp+1
 24509                           
 24510                           ; BSR set to: 0
 24511  010BEE  5185               	movf	___flmul@temp& (0+255),w,b
 24512  010BF0  6F7C               	movwf	___flmul@grs& (0+255),b
 24513  010BF2  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 24514  010BF4  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 24515  010BF6  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 24516                           
 24517                           ; BSR set to: 0
 24518  010BF8  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24519  010BFA  6F81               	movwf	___flmul@prod& (0+255),b
 24520  010BFC  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 24521  010BFE  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 24522  010C00  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 24523  010C02  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24524  010C04  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24525  010C06  CFF3 F085          	movff	prodl,___flmul@temp
 24526  010C0A  CFF4 F086          	movff	prodh,___flmul@temp+1
 24527                           
 24528                           ; BSR set to: 0
 24529  010C0E  5185               	movf	___flmul@temp& (0+255),w,b
 24530  010C10  277C               	addwf	___flmul@grs& (0+255),f,b
 24531  010C12  0E00               	movlw	0
 24532  010C14  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24533  010C16  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24534  010C18  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24535                           
 24536                           ; BSR set to: 0
 24537  010C1A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24538  010C1C  2781               	addwf	___flmul@prod& (0+255),f,b
 24539  010C1E  0E00               	movlw	0
 24540  010C20  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24541  010C22  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24542  010C24  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24543  010C26  5172               	movf	___flmul@a& (0+255),w,b
 24544  010C28  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24545  010C2A  CFF3 F085          	movff	prodl,___flmul@temp
 24546  010C2E  CFF4 F086          	movff	prodh,___flmul@temp+1
 24547                           
 24548                           ; BSR set to: 0
 24549  010C32  5185               	movf	___flmul@temp& (0+255),w,b
 24550  010C34  277C               	addwf	___flmul@grs& (0+255),f,b
 24551  010C36  0E00               	movlw	0
 24552  010C38  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24553  010C3A  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24554  010C3C  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24555                           
 24556                           ; BSR set to: 0
 24557  010C3E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24558  010C40  2781               	addwf	___flmul@prod& (0+255),f,b
 24559  010C42  0E00               	movlw	0
 24560  010C44  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24561  010C46  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24562  010C48  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24563                           
 24564                           ; BSR set to: 0
 24565  010C4A  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24566  010C4E  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24567  010C52  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24568  010C56  6B7C               	clrf	___flmul@grs& (0+255),b
 24569                           
 24570                           ; BSR set to: 0
 24571  010C58  5172               	movf	___flmul@a& (0+255),w,b
 24572  010C5A  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24573  010C5C  CFF3 F085          	movff	prodl,___flmul@temp
 24574  010C60  CFF4 F086          	movff	prodh,___flmul@temp+1
 24575                           
 24576                           ; BSR set to: 0
 24577  010C64  5185               	movf	___flmul@temp& (0+255),w,b
 24578  010C66  277C               	addwf	___flmul@grs& (0+255),f,b
 24579  010C68  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24580  010C6A  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24581  010C6C  0E00               	movlw	0
 24582  010C6E  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24583  010C70  0E00               	movlw	0
 24584  010C72  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24585                           
 24586                           ; BSR set to: 0
 24587  010C74  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24588  010C76  036E               	mulwf	___flmul@b& (0+255),b
 24589  010C78  CFF3 F085          	movff	prodl,___flmul@temp
 24590  010C7C  CFF4 F086          	movff	prodh,___flmul@temp+1
 24591                           
 24592                           ; BSR set to: 0
 24593  010C80  5185               	movf	___flmul@temp& (0+255),w,b
 24594  010C82  277C               	addwf	___flmul@grs& (0+255),f,b
 24595  010C84  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24596  010C86  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24597  010C88  0E00               	movlw	0
 24598  010C8A  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24599  010C8C  0E00               	movlw	0
 24600  010C8E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24601                           
 24602                           ; BSR set to: 0
 24603  010C90  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24604  010C94  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24605  010C98  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24606  010C9C  6B7C               	clrf	___flmul@grs& (0+255),b
 24607  010C9E  5172               	movf	___flmul@a& (0+255),w,b
 24608  010CA0  036E               	mulwf	___flmul@b& (0+255),b
 24609  010CA2  CFF3 F085          	movff	prodl,___flmul@temp
 24610  010CA6  CFF4 F086          	movff	prodh,___flmul@temp+1
 24611                           
 24612                           ; BSR set to: 0
 24613  010CAA  5185               	movf	___flmul@temp& (0+255),w,b
 24614  010CAC  277C               	addwf	___flmul@grs& (0+255),f,b
 24615  010CAE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24616  010CB0  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24617  010CB2  0E00               	movlw	0
 24618  010CB4  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24619  010CB6  0E00               	movlw	0
 24620  010CB8  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24621                           
 24622                           ; BSR set to: 0
 24623  010CBA  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24624  010CBC  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24625  010CBE  CFF3 F085          	movff	prodl,___flmul@temp
 24626  010CC2  CFF4 F086          	movff	prodh,___flmul@temp+1
 24627  010CC6  5185               	movf	___flmul@temp& (0+255),w,b
 24628  010CC8  2781               	addwf	___flmul@prod& (0+255),f,b
 24629  010CCA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24630  010CCC  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24631  010CCE  0E00               	movlw	0
 24632  010CD0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24633  010CD2  0E00               	movlw	0
 24634  010CD4  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24635                           
 24636                           ; BSR set to: 0
 24637  010CD6  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24638  010CD8  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24639  010CDA  CFF3 F085          	movff	prodl,___flmul@temp
 24640  010CDE  CFF4 F086          	movff	prodh,___flmul@temp+1
 24641                           
 24642                           ; BSR set to: 0
 24643  010CE2  5185               	movf	___flmul@temp& (0+255),w,b
 24644  010CE4  2781               	addwf	___flmul@prod& (0+255),f,b
 24645  010CE6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24646  010CE8  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24647  010CEA  0E00               	movlw	0
 24648  010CEC  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24649  010CEE  0E00               	movlw	0
 24650  010CF0  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24651  010CF2  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24652  010CF4  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24653  010CF6  CFF3 F085          	movff	prodl,___flmul@temp
 24654  010CFA  CFF4 F086          	movff	prodh,___flmul@temp+1
 24655                           
 24656                           ; BSR set to: 0
 24657  010CFE  5185               	movf	___flmul@temp& (0+255),w,b
 24658  010D00  6F76               	movwf	??___flmul& (0+255),b
 24659  010D02  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24660  010D04  6F77               	movwf	(??___flmul+1)& (0+255),b
 24661  010D06  6B78               	clrf	(??___flmul+2)& (0+255),b
 24662  010D08  6B79               	clrf	(??___flmul+3)& (0+255),b
 24663  010D0A  C078  F079         	movff	??___flmul+2,??___flmul+3
 24664  010D0E  C077  F078         	movff	??___flmul+1,??___flmul+2
 24665  010D12  C076  F077         	movff	??___flmul,??___flmul+1
 24666  010D16  6B76               	clrf	??___flmul& (0+255),b
 24667  010D18  5176               	movf	??___flmul& (0+255),w,b
 24668  010D1A  2781               	addwf	___flmul@prod& (0+255),f,b
 24669  010D1C  5177               	movf	(??___flmul+1)& (0+255),w,b
 24670  010D1E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24671  010D20  5178               	movf	(??___flmul+2)& (0+255),w,b
 24672  010D22  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24673  010D24  5179               	movf	(??___flmul+3)& (0+255),w,b
 24674  010D26  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24675                           
 24676                           ; BSR set to: 0
 24677  010D28  C07C  F076         	movff	___flmul@grs,??___flmul
 24678  010D2C  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 24679  010D30  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 24680  010D34  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 24681  010D38  0E19               	movlw	25
 24682  010D3A  D005               	goto	u10290
 24683  010D3C                     u10295:
 24684  010D3C  90D8               	bcf	status,0,c
 24685  010D3E  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 24686  010D40  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 24687  010D42  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 24688  010D44  3376               	rrcf	??___flmul& (0+255),f,b
 24689  010D46                     u10290:
 24690  010D46  2EE8               	decfsz	wreg,f,c
 24691  010D48  D7F9               	goto	u10295
 24692  010D4A  5176               	movf	??___flmul& (0+255),w,b
 24693  010D4C  2781               	addwf	___flmul@prod& (0+255),f,b
 24694  010D4E  5177               	movf	(??___flmul+1)& (0+255),w,b
 24695  010D50  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24696  010D52  5178               	movf	(??___flmul+2)& (0+255),w,b
 24697  010D54  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24698  010D56  5179               	movf	(??___flmul+3)& (0+255),w,b
 24699  010D58  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24700                           
 24701                           ; BSR set to: 0
 24702  010D5A  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24703  010D5E  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24704  010D62  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24705  010D66  6B7C               	clrf	___flmul@grs& (0+255),b
 24706                           
 24707                           ; BSR set to: 0
 24708  010D68  517B               	movf	___flmul@aexp& (0+255),w,b
 24709  010D6A  C080  F076         	movff	___flmul@bexp,??___flmul
 24710  010D6E  6B77               	clrf	(??___flmul+1)& (0+255),b
 24711  010D70  2776               	addwf	??___flmul& (0+255),f,b
 24712  010D72  0E00               	movlw	0
 24713  010D74  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 24714  010D76  0E82               	movlw	130
 24715  010D78  2576               	addwf	??___flmul& (0+255),w,b
 24716  010D7A  6F85               	movwf	___flmul@temp& (0+255),b
 24717  010D7C  0EFF               	movlw	255
 24718  010D7E  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 24719  010D80  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 24720  010D82  D00F               	goto	l2868
 24721  010D84                     
 24722                           ; BSR set to: 0
 24723                           
 24724                           ; BSR set to: 0
 24725  010D84  90D8               	bcf	status,0,c
 24726  010D86  3781               	rlcf	___flmul@prod& (0+255),f,b
 24727  010D88  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 24728  010D8A  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 24729  010D8C  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 24730                           
 24731                           ; BSR set to: 0
 24732  010D8E  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 24733                           
 24734                           ; BSR set to: 0
 24735  010D90  8181               	bsf	___flmul@prod& (0+255),0,b
 24736                           
 24737                           ; BSR set to: 0
 24738  010D92  90D8               	bcf	status,0,c
 24739  010D94  377C               	rlcf	___flmul@grs& (0+255),f,b
 24740  010D96  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 24741  010D98  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 24742  010D9A  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 24743  010D9C  0785               	decf	___flmul@temp& (0+255),f,b
 24744  010D9E  A0D8               	btfss	status,0,c
 24745  010DA0  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 24746  010DA2                     l2868:
 24747                           
 24748                           ; BSR set to: 0
 24749                           
 24750                           ; BSR set to: 0
 24751  010DA2  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 24752  010DA4  D7EF               	goto	l2869
 24753                           
 24754                           ; BSR set to: 0
 24755                           
 24756                           ; BSR set to: 0
 24757  010DA6  0E00               	movlw	0
 24758  010DA8  6F7B               	movwf	___flmul@aexp& (0+255),b
 24759                           
 24760                           ; BSR set to: 0
 24761  010DAA  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 24762  010DAC  D016               	goto	l2875
 24763                           
 24764                           ; BSR set to: 0
 24765  010DAE  0EFF               	movlw	255
 24766  010DB0  157C               	andwf	___flmul@grs& (0+255),w,b
 24767  010DB2  6F76               	movwf	??___flmul& (0+255),b
 24768  010DB4  0EFF               	movlw	255
 24769  010DB6  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 24770  010DB8  6F77               	movwf	(??___flmul+1)& (0+255),b
 24771  010DBA  0EFF               	movlw	255
 24772  010DBC  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 24773  010DBE  6F78               	movwf	(??___flmul+2)& (0+255),b
 24774  010DC0  0E7F               	movlw	127
 24775  010DC2  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 24776  010DC4  6F79               	movwf	(??___flmul+3)& (0+255),b
 24777  010DC6  5176               	movf	??___flmul& (0+255),w,b
 24778  010DC8  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 24779  010DCA  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 24780  010DCC  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 24781  010DCE  A4D8               	btfss	status,2,c
 24782  010DD0  D002               	goto	u10340
 24783                           
 24784                           ; BSR set to: 0
 24785                           
 24786                           ; BSR set to: 0
 24787  010DD2  A181               	btfss	___flmul@prod& (0+255),0,b
 24788  010DD4  D002               	goto	l2875
 24789  010DD6                     u10340:
 24790                           
 24791                           ; BSR set to: 0
 24792  010DD6  0E01               	movlw	1
 24793  010DD8  6F7B               	movwf	___flmul@aexp& (0+255),b
 24794  010DDA                     l2875:
 24795                           
 24796                           ; BSR set to: 0
 24797                           
 24798                           ; BSR set to: 0
 24799                           
 24800                           ; BSR set to: 0
 24801  010DDA  517B               	movf	___flmul@aexp& (0+255),w,b
 24802  010DDC  B4D8               	btfsc	status,2,c
 24803  010DDE  D01F               	goto	l2877
 24804                           
 24805                           ; BSR set to: 0
 24806  010DE0  0E01               	movlw	1
 24807  010DE2  2781               	addwf	___flmul@prod& (0+255),f,b
 24808  010DE4  0E00               	movlw	0
 24809  010DE6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24810  010DE8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24811  010DEA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24812                           
 24813                           ; BSR set to: 0
 24814  010DEC  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 24815  010DEE  D017               	goto	l2877
 24816                           
 24817                           ; BSR set to: 0
 24818  010DF0  C081  F076         	movff	___flmul@prod,??___flmul
 24819  010DF4  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 24820  010DF8  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 24821  010DFC  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 24822  010E00  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 24823  010E02  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 24824  010E04  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 24825  010E06  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 24826  010E08  3376               	rrcf	??___flmul& (0+255),f,b
 24827  010E0A  C076  F081         	movff	??___flmul,___flmul@prod
 24828  010E0E  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 24829  010E12  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 24830  010E16  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 24831                           
 24832                           ; BSR set to: 0
 24833  010E1A  4B85               	infsnz	___flmul@temp& (0+255),f,b
 24834  010E1C  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 24835  010E1E                     l2877:
 24836                           
 24837                           ; BSR set to: 0
 24838                           
 24839                           ; BSR set to: 0
 24840                           
 24841                           ; BSR set to: 0
 24842  010E1E  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24843  010E20  D00D               	goto	l2878
 24844  010E22  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24845  010E24  E103               	bnz	u10370
 24846  010E26  2985               	incf	___flmul@temp& (0+255),w,b
 24847  010E28  A0D8               	btfss	status,0,c
 24848  010E2A  D008               	goto	l2878
 24849  010E2C                     u10370:
 24850                           
 24851                           ; BSR set to: 0
 24852  010E2C  0E00               	movlw	0
 24853  010E2E  6F81               	movwf	___flmul@prod& (0+255),b
 24854  010E30  0E00               	movlw	0
 24855  010E32  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 24856  010E34  0E80               	movlw	128
 24857  010E36  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 24858  010E38  0E7F               	movlw	127
 24859  010E3A  D020               	goto	L11
 24860  010E3C                     l2878:
 24861                           
 24862                           ; BSR set to: 0
 24863                           
 24864                           ; BSR set to: 0
 24865  010E3C  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24866  010E3E  D005               	goto	u10380
 24867  010E40  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24868  010E42  E10E               	bnz	l2880
 24869  010E44  0585               	decf	___flmul@temp& (0+255),w,b
 24870  010E46  B0D8               	btfsc	status,0,c
 24871  010E48  D00B               	goto	l2880
 24872  010E4A                     u10380:
 24873                           
 24874                           ; BSR set to: 0
 24875  010E4A  0E00               	movlw	0
 24876  010E4C  6F81               	movwf	___flmul@prod& (0+255),b
 24877  010E4E  0E00               	movlw	0
 24878  010E50  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 24879  010E52  0E00               	movlw	0
 24880  010E54  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 24881  010E56  0E00               	movlw	0
 24882  010E58  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 24883  010E5A  0E00               	movlw	0
 24884  010E5C  6F7A               	movwf	___flmul@sign& (0+255),b
 24885  010E5E  D00F               	goto	l2881
 24886  010E60                     l2880:
 24887                           
 24888                           ; BSR set to: 0
 24889  010E60  C085  F080         	movff	___flmul@temp,___flmul@bexp
 24890                           
 24891                           ; BSR set to: 0
 24892  010E64  0EFF               	movlw	255
 24893  010E66  1781               	andwf	___flmul@prod& (0+255),f,b
 24894  010E68  0EFF               	movlw	255
 24895  010E6A  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 24896  010E6C  0E7F               	movlw	127
 24897  010E6E  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 24898  010E70  0E00               	movlw	0
 24899  010E72  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 24900                           
 24901                           ; BSR set to: 0
 24902  010E74  B180               	btfsc	___flmul@bexp& (0+255),0,b
 24903                           
 24904                           ; BSR set to: 0
 24905  010E76  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 24906                           
 24907                           ; BSR set to: 0
 24908                           
 24909                           ; BSR set to: 0
 24910  010E78  90D8               	bcf	status,0,c
 24911  010E7A  3180               	rrcf	___flmul@bexp& (0+255),w,b
 24912  010E7C                     L11:
 24913  010E7C  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 24914  010E7E                     l2881:
 24915                           
 24916                           ; BSR set to: 0
 24917                           
 24918                           ; BSR set to: 0
 24919                           
 24920                           ; BSR set to: 0
 24921  010E7E  517A               	movf	___flmul@sign& (0+255),w,b
 24922  010E80  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 24923                           
 24924                           ; BSR set to: 0
 24925  010E82  C081  F06E         	movff	___flmul@prod,?___flmul
 24926  010E86  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 24927  010E8A  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 24928  010E8E  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 24929  010E92  0012               	return	
 24930  010E94                     __end_of___flmul:
 24931                           	opt stack 0
 24932                           tosu	equ	0xFFF
 24933                           tosh	equ	0xFFE
 24934                           tosl	equ	0xFFD
 24935                           pclath	equ	0xFFA
 24936                           tblptru	equ	0xFF8
 24937                           tblptrh	equ	0xFF7
 24938                           tblptrl	equ	0xFF6
 24939                           tablat	equ	0xFF5
 24940                           prodh	equ	0xFF4
 24941                           prodl	equ	0xFF3
 24942                           intcon	equ	0xFF2
 24943                           indf0	equ	0xFEF
 24944                           postinc0	equ	0xFEE
 24945                           fsr0h	equ	0xFEA
 24946                           fsr0l	equ	0xFE9
 24947                           wreg	equ	0xFE8
 24948                           indf1	equ	0xFE7
 24949                           postdec1	equ	0xFE5
 24950                           fsr1h	equ	0xFE2
 24951                           fsr1l	equ	0xFE1
 24952                           indf2	equ	0xFDF
 24953                           postinc2	equ	0xFDE
 24954                           postdec2	equ	0xFDD
 24955                           plusw2	equ	0xFDB
 24956                           fsr2h	equ	0xFDA
 24957                           fsr2l	equ	0xFD9
 24958                           status	equ	0xFD8
 24959                           
 24960 ;; *************** function ___flsub *****************
 24961 ;; Defined at:
 24962 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 24963 ;; Parameters:    Size  Location     Type
 24964 ;;  b               4   63[BANK0 ] unsigned char 
 24965 ;;  a               4   67[BANK0 ] unsigned char 
 24966 ;; Auto vars:     Size  Location     Type
 24967 ;;		None
 24968 ;; Return value:  Size  Location     Type
 24969 ;;                  4   63[BANK0 ] unsigned char 
 24970 ;; Registers used:
 24971 ;;		wreg, status,2, status,0, cstack
 24972 ;; Tracked objects:
 24973 ;;		On entry : 0/0
 24974 ;;		On exit  : 0/0
 24975 ;;		Unchanged: 0/0
 24976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24977 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24980 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24981 ;;Total ram usage:        8 bytes
 24982 ;; Hardware stack levels used:    1
 24983 ;; Hardware stack levels required when called:    8
 24984 ;; This function calls:
 24985 ;;		___fladd
 24986 ;; This function is called by:
 24987 ;;		_exp
 24988 ;; This function uses a non-reentrant model
 24989 ;;
 24990                           
 24991                           	psect	text133
 24992  01576E                     __ptext133:
 24993                           	opt stack 0
 24994  01576E                     ___flsub:
 24995                           	opt stack 18
 24996                           
 24997                           ; BSR set to: 0
 24998                           ;incstack = 0
 24999  01576E  0E00               	movlw	0
 25000  015770  0100               	movlb	0	; () banked
 25001  015772  1BA3               	xorwf	___flsub@a& (0+255),f,b
 25002  015774  0E00               	movlw	0
 25003  015776  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 25004  015778  0E00               	movlw	0
 25005  01577A  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 25006  01577C  0E80               	movlw	128
 25007  01577E  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 25008                           
 25009                           ; BSR set to: 0
 25010  015780  C09F  F08B         	movff	___flsub@b,___fladd@b
 25011  015784  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 25012  015788  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 25013  01578C  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 25014  015790  C0A3  F08F         	movff	___flsub@a,___fladd@a
 25015  015794  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 25016  015798  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 25017  01579C  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 25018  0157A0  EC4A  F087         	call	___fladd	;wreg free
 25019  0157A4  C08B  F09F         	movff	?___fladd,?___flsub
 25020  0157A8  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 25021  0157AC  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 25022  0157B0  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 25023  0157B4  0012               	return	
 25024  0157B6                     __end_of___flsub:
 25025                           	opt stack 0
 25026                           tosu	equ	0xFFF
 25027                           tosh	equ	0xFFE
 25028                           tosl	equ	0xFFD
 25029                           pclath	equ	0xFFA
 25030                           tblptru	equ	0xFF8
 25031                           tblptrh	equ	0xFF7
 25032                           tblptrl	equ	0xFF6
 25033                           tablat	equ	0xFF5
 25034                           prodh	equ	0xFF4
 25035                           prodl	equ	0xFF3
 25036                           intcon	equ	0xFF2
 25037                           indf0	equ	0xFEF
 25038                           postinc0	equ	0xFEE
 25039                           fsr0h	equ	0xFEA
 25040                           fsr0l	equ	0xFE9
 25041                           wreg	equ	0xFE8
 25042                           indf1	equ	0xFE7
 25043                           postdec1	equ	0xFE5
 25044                           fsr1h	equ	0xFE2
 25045                           fsr1l	equ	0xFE1
 25046                           indf2	equ	0xFDF
 25047                           postinc2	equ	0xFDE
 25048                           postdec2	equ	0xFDD
 25049                           plusw2	equ	0xFDB
 25050                           fsr2h	equ	0xFDA
 25051                           fsr2l	equ	0xFD9
 25052                           status	equ	0xFD8
 25053                           
 25054 ;; *************** function ___fladd *****************
 25055 ;; Defined at:
 25056 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 25057 ;; Parameters:    Size  Location     Type
 25058 ;;  b               4   43[BANK0 ] unsigned char 
 25059 ;;  a               4   47[BANK0 ] unsigned char 
 25060 ;; Auto vars:     Size  Location     Type
 25061 ;;  grs             1   62[BANK0 ] unsigned char 
 25062 ;;  bexp            1   61[BANK0 ] unsigned char 
 25063 ;;  aexp            1   60[BANK0 ] unsigned char 
 25064 ;;  signs           1   59[BANK0 ] unsigned char 
 25065 ;; Return value:  Size  Location     Type
 25066 ;;                  4   43[BANK0 ] unsigned char 
 25067 ;; Registers used:
 25068 ;;		wreg, status,2, status,0
 25069 ;; Tracked objects:
 25070 ;;		On entry : 0/0
 25071 ;;		On exit  : 0/0
 25072 ;;		Unchanged: 0/0
 25073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25074 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25075 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25076 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25077 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25078 ;;Total ram usage:       20 bytes
 25079 ;; Hardware stack levels used:    1
 25080 ;; Hardware stack levels required when called:    7
 25081 ;; This function calls:
 25082 ;;		Nothing
 25083 ;; This function is called by:
 25084 ;;		_ADCAverage
 25085 ;;		___flsub
 25086 ;;		_floor
 25087 ;;		_log
 25088 ;;		_eval_poly
 25089 ;; This function uses a non-reentrant model
 25090 ;;
 25091                           
 25092                           	psect	text134
 25093  010E94                     __ptext134:
 25094                           	opt stack 0
 25095  010E94                     ___fladd:
 25096                           	opt stack 18
 25097                           
 25098                           ;incstack = 0
 25099  010E94  0100               	movlb	0	; () banked
 25100  010E96  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25101  010E98  0B80               	andlw	128
 25102  010E9A  6F9B               	movwf	___fladd@signs& (0+255),b
 25103  010E9C  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25104  010E9E  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 25105  010EA0  6F9D               	movwf	___fladd@bexp& (0+255),b
 25106                           
 25107                           ; BSR set to: 0
 25108  010EA2  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 25109                           
 25110                           ; BSR set to: 0
 25111  010EA4  819D               	bsf	___fladd@bexp& (0+255),0,b
 25112                           
 25113                           ; BSR set to: 0
 25114                           
 25115                           ; BSR set to: 0
 25116  010EA6  519D               	movf	___fladd@bexp& (0+255),w,b
 25117  010EA8  B4D8               	btfsc	status,2,c
 25118  010EAA  D00D               	goto	l2766
 25119                           
 25120                           ; BSR set to: 0
 25121  010EAC  299D               	incf	___fladd@bexp& (0+255),w,b
 25122  010EAE  A4D8               	btfss	status,2,c
 25123  010EB0  D008               	goto	l2767
 25124                           
 25125                           ; BSR set to: 0
 25126  010EB2  0E00               	movlw	0
 25127  010EB4  6F8B               	movwf	___fladd@b& (0+255),b
 25128  010EB6  0E00               	movlw	0
 25129  010EB8  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25130  010EBA  0E00               	movlw	0
 25131  010EBC  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25132  010EBE  0E00               	movlw	0
 25133  010EC0  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25134  010EC2                     l2767:
 25135                           
 25136                           ; BSR set to: 0
 25137                           
 25138                           ; BSR set to: 0
 25139  010EC2  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 25140  010EC4  D006               	goto	L12
 25141  010EC6                     l2766:
 25142                           
 25143                           ; BSR set to: 0
 25144                           
 25145                           ; BSR set to: 0
 25146  010EC6  0E00               	movlw	0
 25147  010EC8  6F8B               	movwf	___fladd@b& (0+255),b
 25148  010ECA  0E00               	movlw	0
 25149  010ECC  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25150  010ECE  0E00               	movlw	0
 25151  010ED0  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25152  010ED2                     L12:
 25153  010ED2  0E00               	movlw	0
 25154  010ED4  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25155                           
 25156                           ; BSR set to: 0
 25157                           
 25158                           ; BSR set to: 0
 25159  010ED6  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25160  010ED8  0B80               	andlw	128
 25161  010EDA  6F9C               	movwf	___fladd@aexp& (0+255),b
 25162                           
 25163                           ; BSR set to: 0
 25164  010EDC  519B               	movf	___fladd@signs& (0+255),w,b
 25165  010EDE  199C               	xorwf	___fladd@aexp& (0+255),w,b
 25166  010EE0  A4D8               	btfss	status,2,c
 25167                           
 25168                           ; BSR set to: 0
 25169  010EE2  8D9B               	bsf	___fladd@signs& (0+255),6,b
 25170                           
 25171                           ; BSR set to: 0
 25172                           
 25173                           ; BSR set to: 0
 25174  010EE4  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25175  010EE6  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 25176  010EE8  6F9C               	movwf	___fladd@aexp& (0+255),b
 25177                           
 25178                           ; BSR set to: 0
 25179  010EEA  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 25180                           
 25181                           ; BSR set to: 0
 25182  010EEC  819C               	bsf	___fladd@aexp& (0+255),0,b
 25183                           
 25184                           ; BSR set to: 0
 25185                           
 25186                           ; BSR set to: 0
 25187  010EEE  519C               	movf	___fladd@aexp& (0+255),w,b
 25188  010EF0  B4D8               	btfsc	status,2,c
 25189  010EF2  D00D               	goto	l2771
 25190                           
 25191                           ; BSR set to: 0
 25192  010EF4  299C               	incf	___fladd@aexp& (0+255),w,b
 25193  010EF6  A4D8               	btfss	status,2,c
 25194  010EF8  D008               	goto	l2772
 25195                           
 25196                           ; BSR set to: 0
 25197  010EFA  0E00               	movlw	0
 25198  010EFC  6F8F               	movwf	___fladd@a& (0+255),b
 25199  010EFE  0E00               	movlw	0
 25200  010F00  6F90               	movwf	(___fladd@a+1)& (0+255),b
 25201  010F02  0E00               	movlw	0
 25202  010F04  6F91               	movwf	(___fladd@a+2)& (0+255),b
 25203  010F06  0E00               	movlw	0
 25204  010F08  6F92               	movwf	(___fladd@a+3)& (0+255),b
 25205  010F0A                     l2772:
 25206                           
 25207                           ; BSR set to: 0
 25208                           
 25209                           ; BSR set to: 0
 25210  010F0A  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 25211  010F0C  D006               	goto	L13
 25212  010F0E                     l2771:
 25213                           
 25214                           ; BSR set to: 0
 25215                           
 25216                           ; BSR set to: 0
 25217  010F0E  0E00               	movlw	0
 25218  010F10  6F8F               	movwf	___fladd@a& (0+255),b
 25219  010F12  0E00               	movlw	0
 25220  010F14  6F90               	movwf	(___fladd@a+1)& (0+255),b
 25221  010F16  0E00               	movlw	0
 25222  010F18  6F91               	movwf	(___fladd@a+2)& (0+255),b
 25223  010F1A                     L13:
 25224  010F1A  0E00               	movlw	0
 25225  010F1C  6F92               	movwf	(___fladd@a+3)& (0+255),b
 25226                           
 25227                           ; BSR set to: 0
 25228                           
 25229                           ; BSR set to: 0
 25230  010F1E  519D               	movf	___fladd@bexp& (0+255),w,b
 25231  010F20  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 25232  010F22  B0D8               	btfsc	status,0,c
 25233  010F24  D022               	goto	l2774
 25234                           
 25235                           ; BSR set to: 0
 25236  010F26  AD9B               	btfss	___fladd@signs& (0+255),6,b
 25237  010F28  D002               	goto	l2775
 25238                           
 25239                           ; BSR set to: 0
 25240  010F2A  0E80               	movlw	128
 25241  010F2C  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 25242  010F2E                     l2775:
 25243                           
 25244                           ; BSR set to: 0
 25245                           
 25246                           ; BSR set to: 0
 25247  010F2E  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 25248                           
 25249                           ; BSR set to: 0
 25250  010F32  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 25251                           
 25252                           ; BSR set to: 0
 25253  010F36  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 25254                           
 25255                           ; BSR set to: 0
 25256  010F3A  C08B  F09E         	movff	___fladd@b,___fladd@grs
 25257                           
 25258                           ; BSR set to: 0
 25259  010F3E  C08F  F08B         	movff	___fladd@a,___fladd@b
 25260                           
 25261                           ; BSR set to: 0
 25262  010F42  C09E  F08F         	movff	___fladd@grs,___fladd@a
 25263                           
 25264                           ; BSR set to: 0
 25265  010F46  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 25266                           
 25267                           ; BSR set to: 0
 25268  010F4A  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 25269                           
 25270                           ; BSR set to: 0
 25271  010F4E  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 25272                           
 25273                           ; BSR set to: 0
 25274  010F52  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 25275                           
 25276                           ; BSR set to: 0
 25277  010F56  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 25278                           
 25279                           ; BSR set to: 0
 25280  010F5A  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 25281                           
 25282                           ; BSR set to: 0
 25283  010F5E  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 25284                           
 25285                           ; BSR set to: 0
 25286  010F62  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 25287                           
 25288                           ; BSR set to: 0
 25289  010F66  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 25290  010F6A                     l2774:
 25291                           
 25292                           ; BSR set to: 0
 25293                           
 25294                           ; BSR set to: 0
 25295  010F6A  0E00               	movlw	0
 25296  010F6C  6F9E               	movwf	___fladd@grs& (0+255),b
 25297                           
 25298                           ; BSR set to: 0
 25299  010F6E  519D               	movf	___fladd@bexp& (0+255),w,b
 25300  010F70  6F93               	movwf	??___fladd& (0+255),b
 25301  010F72  6B94               	clrf	(??___fladd+1)& (0+255),b
 25302  010F74  1F93               	comf	??___fladd& (0+255),f,b
 25303  010F76  1F94               	comf	(??___fladd+1)& (0+255),f,b
 25304  010F78  4B93               	infsnz	??___fladd& (0+255),f,b
 25305  010F7A  2B94               	incf	(??___fladd+1)& (0+255),f,b
 25306  010F7C  519C               	movf	___fladd@aexp& (0+255),w,b
 25307  010F7E  6F95               	movwf	(??___fladd+2)& (0+255),b
 25308  010F80  6B96               	clrf	(??___fladd+3)& (0+255),b
 25309  010F82  5193               	movf	??___fladd& (0+255),w,b
 25310  010F84  2795               	addwf	(??___fladd+2)& (0+255),f,b
 25311  010F86  5194               	movf	(??___fladd+1)& (0+255),w,b
 25312  010F88  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 25313  010F8A  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 25314  010F8C  D02C               	goto	l2778
 25315  010F8E  5196               	movf	(??___fladd+3)& (0+255),w,b
 25316  010F90  E104               	bnz	u9910
 25317  010F92  0E1A               	movlw	26
 25318  010F94  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 25319  010F96  A0D8               	btfss	status,0,c
 25320  010F98  D026               	goto	l2778
 25321  010F9A                     u9910:
 25322                           
 25323                           ; BSR set to: 0
 25324  010F9A  518B               	movf	___fladd@b& (0+255),w,b
 25325  010F9C  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 25326  010F9E  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 25327  010FA0  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 25328  010FA2  B4D8               	btfsc	status,2,c
 25329  010FA4  D002               	goto	u9920
 25330  010FA6  0E01               	movlw	1
 25331  010FA8  D001               	goto	u9930
 25332  010FAA                     u9920:
 25333  010FAA  0E00               	movlw	0
 25334  010FAC                     u9930:
 25335  010FAC  6F9E               	movwf	___fladd@grs& (0+255),b
 25336                           
 25337                           ; BSR set to: 0
 25338  010FAE  0E00               	movlw	0
 25339  010FB0  6F8B               	movwf	___fladd@b& (0+255),b
 25340  010FB2  0E00               	movlw	0
 25341  010FB4  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25342  010FB6  0E00               	movlw	0
 25343  010FB8  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25344  010FBA  0E00               	movlw	0
 25345  010FBC  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25346                           
 25347                           ; BSR set to: 0
 25348  010FBE  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 25349  010FC2  D015               	goto	u9960
 25350  010FC4                     l2779:
 25351                           
 25352                           ; BSR set to: 0
 25353  010FC4  A19E               	btfss	___fladd@grs& (0+255),0,b
 25354  010FC6  D005               	goto	l2780
 25355                           
 25356                           ; BSR set to: 0
 25357  010FC8  90D8               	bcf	status,0,c
 25358  010FCA  319E               	rrcf	___fladd@grs& (0+255),w,b
 25359  010FCC  0901               	iorlw	1
 25360  010FCE  6F9E               	movwf	___fladd@grs& (0+255),b
 25361  010FD0  D002               	goto	l2781
 25362  010FD2                     l2780:
 25363                           
 25364                           ; BSR set to: 0
 25365                           
 25366                           ; BSR set to: 0
 25367  010FD2  90D8               	bcf	status,0,c
 25368  010FD4  339E               	rrcf	___fladd@grs& (0+255),f,b
 25369  010FD6                     l2781:
 25370                           
 25371                           ; BSR set to: 0
 25372                           
 25373                           ; BSR set to: 0
 25374  010FD6  B18B               	btfsc	___fladd@b& (0+255),0,b
 25375                           
 25376                           ; BSR set to: 0
 25377  010FD8  8F9E               	bsf	___fladd@grs& (0+255),7,b
 25378                           
 25379                           ; BSR set to: 0
 25380                           
 25381                           ; BSR set to: 0
 25382  010FDA  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 25383  010FDC  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 25384  010FDE  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 25385  010FE0  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 25386  010FE2  338B               	rrcf	___fladd@b& (0+255),f,b
 25387                           
 25388                           ; BSR set to: 0
 25389  010FE4  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25390  010FE6                     l2778:
 25391                           
 25392                           ; BSR set to: 0
 25393  010FE6  519C               	movf	___fladd@aexp& (0+255),w,b
 25394  010FE8  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 25395  010FEA  A0D8               	btfss	status,0,c
 25396  010FEC  D7EB               	goto	l2779
 25397  010FEE                     u9960:
 25398                           
 25399                           ; BSR set to: 0
 25400                           
 25401                           ; BSR set to: 0
 25402  010FEE  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 25403  010FF0  D029               	goto	l2784
 25404                           
 25405                           ; BSR set to: 0
 25406  010FF2  519D               	movf	___fladd@bexp& (0+255),w,b
 25407  010FF4  A4D8               	btfss	status,2,c
 25408  010FF6  D009               	goto	l2785
 25409                           
 25410                           ; BSR set to: 0
 25411  010FF8  0E00               	movlw	0
 25412  010FFA  6F8B               	movwf	?___fladd& (0+255),b
 25413  010FFC  0E00               	movlw	0
 25414  010FFE  6F8C               	movwf	(?___fladd+1)& (0+255),b
 25415  011000  0E00               	movlw	0
 25416  011002  6F8D               	movwf	(?___fladd+2)& (0+255),b
 25417  011004  0E00               	movlw	0
 25418  011006  6F8E               	movwf	(?___fladd+3)& (0+255),b
 25419                           
 25420                           ; BSR set to: 0
 25421  011008  0012               	return	
 25422  01100A                     l2785:
 25423                           
 25424                           ; BSR set to: 0
 25425                           
 25426                           ; BSR set to: 0
 25427  01100A  518F               	movf	___fladd@a& (0+255),w,b
 25428  01100C  278B               	addwf	___fladd@b& (0+255),f,b
 25429  01100E  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25430  011010  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25431  011012  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25432  011014  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25433  011016  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25434  011018  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25435                           
 25436                           ; BSR set to: 0
 25437  01101A  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 25438  01101C  D083               	goto	u10090
 25439                           
 25440                           ; BSR set to: 0
 25441  01101E  A19E               	btfss	___fladd@grs& (0+255),0,b
 25442  011020  D006               	goto	l2788
 25443                           
 25444                           ; BSR set to: 0
 25445  011022  90D8               	bcf	status,0,c
 25446  011024  339E               	rrcf	___fladd@grs& (0+255),f,b
 25447  011026  519E               	movf	___fladd@grs& (0+255),w,b
 25448  011028  0901               	iorlw	1
 25449  01102A  6F9E               	movwf	___fladd@grs& (0+255),b
 25450  01102C  D002               	goto	l2789
 25451  01102E                     l2788:
 25452                           
 25453                           ; BSR set to: 0
 25454                           
 25455                           ; BSR set to: 0
 25456  01102E  90D8               	bcf	status,0,c
 25457  011030  339E               	rrcf	___fladd@grs& (0+255),f,b
 25458  011032                     l2789:
 25459                           
 25460                           ; BSR set to: 0
 25461                           
 25462                           ; BSR set to: 0
 25463  011032  B18B               	btfsc	___fladd@b& (0+255),0,b
 25464                           
 25465                           ; BSR set to: 0
 25466  011034  8F9E               	bsf	___fladd@grs& (0+255),7,b
 25467                           
 25468                           ; BSR set to: 0
 25469                           
 25470                           ; BSR set to: 0
 25471  011036  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 25472  011038  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 25473  01103A  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 25474  01103C  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 25475  01103E  338B               	rrcf	___fladd@b& (0+255),f,b
 25476                           
 25477                           ; BSR set to: 0
 25478  011040  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25479                           
 25480                           ; BSR set to: 0
 25481  011042  D070               	goto	u10090
 25482  011044                     l2784:
 25483                           
 25484                           ; BSR set to: 0
 25485                           
 25486                           ; BSR set to: 0
 25487  011044  518F               	movf	___fladd@a& (0+255),w,b
 25488  011046  5D8B               	subwf	___fladd@b& (0+255),w,b
 25489  011048  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25490  01104A  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 25491  01104C  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25492  01104E  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 25493  011050  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25494  011052  0A80               	xorlw	128
 25495  011054  6F93               	movwf	??___fladd& (0+255),b
 25496  011056  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25497  011058  0A80               	xorlw	128
 25498  01105A  5993               	subwfb	??___fladd& (0+255),w,b
 25499  01105C  B0D8               	btfsc	status,0,c
 25500  01105E  D036               	goto	l2792
 25501                           
 25502                           ; BSR set to: 0
 25503  011060  C08B  F093         	movff	___fladd@b,??___fladd
 25504  011064  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 25505  011068  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 25506  01106C  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 25507  011070  1F93               	comf	??___fladd& (0+255),f,b
 25508  011072  1F94               	comf	(??___fladd+1)& (0+255),f,b
 25509  011074  1F95               	comf	(??___fladd+2)& (0+255),f,b
 25510  011076  1F96               	comf	(??___fladd+3)& (0+255),f,b
 25511  011078  2B93               	incf	??___fladd& (0+255),f,b
 25512  01107A  0E00               	movlw	0
 25513  01107C  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 25514  01107E  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 25515  011080  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 25516  011082  518F               	movf	___fladd@a& (0+255),w,b
 25517  011084  2593               	addwf	??___fladd& (0+255),w,b
 25518  011086  6F97               	movwf	(??___fladd+4)& (0+255),b
 25519  011088  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25520  01108A  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 25521  01108C  6F98               	movwf	(??___fladd+5)& (0+255),b
 25522  01108E  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25523  011090  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 25524  011092  6F99               	movwf	(??___fladd+6)& (0+255),b
 25525  011094  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25526  011096  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 25527  011098  6F9A               	movwf	(??___fladd+7)& (0+255),b
 25528  01109A  0EFF               	movlw	255
 25529  01109C  2597               	addwf	(??___fladd+4)& (0+255),w,b
 25530  01109E  6F8B               	movwf	___fladd@b& (0+255),b
 25531  0110A0  0EFF               	movlw	255
 25532  0110A2  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 25533  0110A4  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25534  0110A6  0EFF               	movlw	255
 25535  0110A8  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 25536  0110AA  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25537  0110AC  0EFF               	movlw	255
 25538  0110AE  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 25539  0110B0  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25540  0110B2  0E80               	movlw	128
 25541  0110B4  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 25542                           
 25543                           ; BSR set to: 0
 25544  0110B6  6D9E               	negf	___fladd@grs& (0+255),b
 25545                           
 25546                           ; BSR set to: 0
 25547  0110B8  519E               	movf	___fladd@grs& (0+255),w,b
 25548  0110BA  A4D8               	btfss	status,2,c
 25549  0110BC  D00F               	goto	l2794
 25550                           
 25551                           ; BSR set to: 0
 25552  0110BE  0E01               	movlw	1
 25553  0110C0  278B               	addwf	___fladd@b& (0+255),f,b
 25554  0110C2  0E00               	movlw	0
 25555  0110C4  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25556  0110C6  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25557  0110C8  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25558                           
 25559                           ; BSR set to: 0
 25560  0110CA  D008               	goto	l2794
 25561  0110CC                     l2792:
 25562                           
 25563                           ; BSR set to: 0
 25564                           
 25565                           ; BSR set to: 0
 25566  0110CC  518F               	movf	___fladd@a& (0+255),w,b
 25567  0110CE  5F8B               	subwf	___fladd@b& (0+255),f,b
 25568  0110D0  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25569  0110D2  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 25570  0110D4  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25571  0110D6  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 25572  0110D8  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25573  0110DA  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 25574  0110DC                     l2794:
 25575                           
 25576                           ; BSR set to: 0
 25577  0110DC  518B               	movf	___fladd@b& (0+255),w,b
 25578  0110DE  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 25579  0110E0  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 25580  0110E2  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 25581  0110E4  A4D8               	btfss	status,2,c
 25582  0110E6  D01C               	goto	l2801
 25583                           
 25584                           ; BSR set to: 0
 25585  0110E8  519E               	movf	___fladd@grs& (0+255),w,b
 25586  0110EA  A4D8               	btfss	status,2,c
 25587  0110EC  D019               	goto	l2801
 25588                           
 25589                           ; BSR set to: 0
 25590  0110EE  0E00               	movlw	0
 25591  0110F0  6F8B               	movwf	?___fladd& (0+255),b
 25592  0110F2  0E00               	movlw	0
 25593  0110F4  6F8C               	movwf	(?___fladd+1)& (0+255),b
 25594  0110F6  0E00               	movlw	0
 25595  0110F8  6F8D               	movwf	(?___fladd+2)& (0+255),b
 25596  0110FA  0E00               	movlw	0
 25597  0110FC  6F8E               	movwf	(?___fladd+3)& (0+255),b
 25598                           
 25599                           ; BSR set to: 0
 25600  0110FE  0012               	return	
 25601  011100                     
 25602                           ; BSR set to: 0
 25603                           
 25604                           ; BSR set to: 0
 25605  011100  90D8               	bcf	status,0,c
 25606  011102  378B               	rlcf	___fladd@b& (0+255),f,b
 25607  011104  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 25608  011106  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 25609  011108  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 25610                           
 25611                           ; BSR set to: 0
 25612  01110A  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 25613                           
 25614                           ; BSR set to: 0
 25615  01110C  818B               	bsf	___fladd@b& (0+255),0,b
 25616                           
 25617                           ; BSR set to: 0
 25618                           
 25619                           ; BSR set to: 0
 25620  01110E  A19E               	btfss	___fladd@grs& (0+255),0,b
 25621  011110  D002               	goto	l2799
 25622                           
 25623                           ; BSR set to: 0
 25624  011112  80D8               	bsf	status,0,c
 25625  011114  D001               	goto	L14
 25626  011116                     l2799:
 25627                           
 25628                           ; BSR set to: 0
 25629                           
 25630                           ; BSR set to: 0
 25631  011116  90D8               	bcf	status,0,c
 25632  011118                     L14:
 25633  011118  379E               	rlcf	___fladd@grs& (0+255),f,b
 25634                           
 25635                           ; BSR set to: 0
 25636                           
 25637                           ; BSR set to: 0
 25638  01111A  519D               	movf	___fladd@bexp& (0+255),w,b
 25639  01111C  A4D8               	btfss	status,2,c
 25640                           
 25641                           ; BSR set to: 0
 25642  01111E  079D               	decf	___fladd@bexp& (0+255),f,b
 25643  011120                     l2801:
 25644                           
 25645                           ; BSR set to: 0
 25646                           
 25647                           ; BSR set to: 0
 25648                           
 25649                           ; BSR set to: 0
 25650  011120  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 25651  011122  D7EE               	goto	l2797
 25652  011124                     u10090:
 25653                           
 25654                           ; BSR set to: 0
 25655                           
 25656                           ; BSR set to: 0
 25657                           
 25658                           ; BSR set to: 0
 25659  011124  0E00               	movlw	0
 25660  011126  6F9C               	movwf	___fladd@aexp& (0+255),b
 25661                           
 25662                           ; BSR set to: 0
 25663  011128  AF9E               	btfss	___fladd@grs& (0+255),7,b
 25664  01112A  D00A               	goto	l2806
 25665                           
 25666                           ; BSR set to: 0
 25667  01112C  C09E  F093         	movff	___fladd@grs,??___fladd
 25668  011130  0E7F               	movlw	127
 25669  011132  1793               	andwf	??___fladd& (0+255),f,b
 25670  011134  A4D8               	btfss	status,2,c
 25671  011136  D002               	goto	u10120
 25672                           
 25673                           ; BSR set to: 0
 25674                           
 25675                           ; BSR set to: 0
 25676  011138  A18B               	btfss	___fladd@b& (0+255),0,b
 25677  01113A  D002               	goto	l2806
 25678  01113C                     u10120:
 25679                           
 25680                           ; BSR set to: 0
 25681  01113C  0E01               	movlw	1
 25682  01113E  6F9C               	movwf	___fladd@aexp& (0+255),b
 25683  011140                     l2806:
 25684                           
 25685                           ; BSR set to: 0
 25686                           
 25687                           ; BSR set to: 0
 25688                           
 25689                           ; BSR set to: 0
 25690  011140  519C               	movf	___fladd@aexp& (0+255),w,b
 25691  011142  B4D8               	btfsc	status,2,c
 25692  011144  D020               	goto	l2809
 25693                           
 25694                           ; BSR set to: 0
 25695  011146  0E01               	movlw	1
 25696  011148  278B               	addwf	___fladd@b& (0+255),f,b
 25697  01114A  0E00               	movlw	0
 25698  01114C  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25699  01114E  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25700  011150  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25701                           
 25702                           ; BSR set to: 0
 25703  011152  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 25704  011154  D018               	goto	l2809
 25705                           
 25706                           ; BSR set to: 0
 25707  011156  C08B  F093         	movff	___fladd@b,??___fladd
 25708  01115A  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 25709  01115E  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 25710  011162  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 25711  011166  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 25712  011168  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 25713  01116A  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 25714  01116C  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 25715  01116E  3393               	rrcf	??___fladd& (0+255),f,b
 25716  011170  C093  F08B         	movff	??___fladd,___fladd@b
 25717  011174  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 25718  011178  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 25719  01117C  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 25720  011180  299D               	incf	___fladd@bexp& (0+255),w,b
 25721  011182  A4D8               	btfss	status,2,c
 25722                           
 25723                           ; BSR set to: 0
 25724  011184  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25725  011186                     l2809:
 25726                           
 25727                           ; BSR set to: 0
 25728                           
 25729                           ; BSR set to: 0
 25730                           
 25731                           ; BSR set to: 0
 25732                           
 25733                           ; BSR set to: 0
 25734  011186  299D               	incf	___fladd@bexp& (0+255),w,b
 25735  011188  B4D8               	btfsc	status,2,c
 25736  01118A  D003               	goto	u10170
 25737                           
 25738                           ; BSR set to: 0
 25739  01118C  519D               	movf	___fladd@bexp& (0+255),w,b
 25740  01118E  A4D8               	btfss	status,2,c
 25741  011190  D00D               	goto	l2813
 25742  011192                     u10170:
 25743                           
 25744                           ; BSR set to: 0
 25745                           
 25746                           ; BSR set to: 0
 25747  011192  0E00               	movlw	0
 25748  011194  6F8B               	movwf	___fladd@b& (0+255),b
 25749  011196  0E00               	movlw	0
 25750  011198  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25751  01119A  0E00               	movlw	0
 25752  01119C  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25753  01119E  0E00               	movlw	0
 25754  0111A0  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25755  0111A2  519D               	movf	___fladd@bexp& (0+255),w,b
 25756  0111A4  A4D8               	btfss	status,2,c
 25757  0111A6  D002               	goto	l2813
 25758                           
 25759                           ; BSR set to: 0
 25760  0111A8  0E00               	movlw	0
 25761  0111AA  6F9B               	movwf	___fladd@signs& (0+255),b
 25762  0111AC                     l2813:
 25763                           
 25764                           ; BSR set to: 0
 25765                           
 25766                           ; BSR set to: 0
 25767                           
 25768                           ; BSR set to: 0
 25769  0111AC  A19D               	btfss	___fladd@bexp& (0+255),0,b
 25770  0111AE  D002               	goto	l2814
 25771                           
 25772                           ; BSR set to: 0
 25773  0111B0  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 25774  0111B2  D001               	goto	l2815
 25775  0111B4                     l2814:
 25776                           
 25777                           ; BSR set to: 0
 25778                           
 25779                           ; BSR set to: 0
 25780  0111B4  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 25781  0111B6                     l2815:
 25782                           
 25783                           ; BSR set to: 0
 25784                           
 25785                           ; BSR set to: 0
 25786  0111B6  90D8               	bcf	status,0,c
 25787  0111B8  319D               	rrcf	___fladd@bexp& (0+255),w,b
 25788  0111BA  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25789                           
 25790                           ; BSR set to: 0
 25791  0111BC  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 25792                           
 25793                           ; BSR set to: 0
 25794  0111BE  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 25795                           
 25796                           ; BSR set to: 0
 25797                           
 25798                           ; BSR set to: 0
 25799  0111C0  C08B  F08B         	movff	___fladd@b,?___fladd
 25800  0111C4  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 25801  0111C8  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 25802  0111CC  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 25803  0111D0  0012               	return	
 25804  0111D2                     __end_of___fladd:
 25805                           	opt stack 0
 25806                           tosu	equ	0xFFF
 25807                           tosh	equ	0xFFE
 25808                           tosl	equ	0xFFD
 25809                           pclath	equ	0xFFA
 25810                           tblptru	equ	0xFF8
 25811                           tblptrh	equ	0xFF7
 25812                           tblptrl	equ	0xFF6
 25813                           tablat	equ	0xFF5
 25814                           prodh	equ	0xFF4
 25815                           prodl	equ	0xFF3
 25816                           intcon	equ	0xFF2
 25817                           indf0	equ	0xFEF
 25818                           postinc0	equ	0xFEE
 25819                           fsr0h	equ	0xFEA
 25820                           fsr0l	equ	0xFE9
 25821                           wreg	equ	0xFE8
 25822                           indf1	equ	0xFE7
 25823                           postdec1	equ	0xFE5
 25824                           fsr1h	equ	0xFE2
 25825                           fsr1l	equ	0xFE1
 25826                           indf2	equ	0xFDF
 25827                           postinc2	equ	0xFDE
 25828                           postdec2	equ	0xFDD
 25829                           plusw2	equ	0xFDB
 25830                           fsr2h	equ	0xFDA
 25831                           fsr2l	equ	0xFD9
 25832                           status	equ	0xFD8
 25833                           
 25834 ;; *************** function ___flneg *****************
 25835 ;; Defined at:
 25836 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flneg.c"
 25837 ;; Parameters:    Size  Location     Type
 25838 ;;  f1              4   39[BANK0 ] unsigned char 
 25839 ;; Auto vars:     Size  Location     Type
 25840 ;;		None
 25841 ;; Return value:  Size  Location     Type
 25842 ;;                  4   39[BANK0 ] unsigned char 
 25843 ;; Registers used:
 25844 ;;		wreg, status,2, status,0
 25845 ;; Tracked objects:
 25846 ;;		On entry : 0/0
 25847 ;;		On exit  : 0/0
 25848 ;;		Unchanged: 0/0
 25849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25850 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25854 ;;Total ram usage:        4 bytes
 25855 ;; Hardware stack levels used:    1
 25856 ;; Hardware stack levels required when called:    7
 25857 ;; This function calls:
 25858 ;;		Nothing
 25859 ;; This function is called by:
 25860 ;;		_ADCAverage
 25861 ;;		_pow
 25862 ;;		_exp
 25863 ;; This function uses a non-reentrant model
 25864 ;;
 25865                           
 25866                           	psect	text135
 25867  015C34                     __ptext135:
 25868                           	opt stack 0
 25869  015C34                     ___flneg:
 25870                           	opt stack 19
 25871                           
 25872                           ; BSR set to: 0
 25873                           ;incstack = 0
 25874  015C34  0100               	movlb	0	; () banked
 25875  015C36  5187               	movf	___flneg@f1& (0+255),w,b
 25876  015C38  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 25877  015C3A  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 25878  015C3C  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 25879  015C3E  B4D8               	btfsc	status,2,c
 25880  015C40  D008               	goto	l2529
 25881                           
 25882                           ; BSR set to: 0
 25883  015C42  0E00               	movlw	0
 25884  015C44  1B87               	xorwf	___flneg@f1& (0+255),f,b
 25885  015C46  0E00               	movlw	0
 25886  015C48  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 25887  015C4A  0E00               	movlw	0
 25888  015C4C  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 25889  015C4E  0E80               	movlw	128
 25890  015C50  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 25891  015C52                     l2529:
 25892                           
 25893                           ; BSR set to: 0
 25894                           
 25895                           ; BSR set to: 0
 25896  015C52  C087  F087         	movff	___flneg@f1,?___flneg
 25897  015C56  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 25898  015C5A  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 25899  015C5E  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 25900  015C62  0012               	return	
 25901  015C64                     __end_of___flneg:
 25902                           	opt stack 0
 25903                           tosu	equ	0xFFF
 25904                           tosh	equ	0xFFE
 25905                           tosl	equ	0xFFD
 25906                           pclath	equ	0xFFA
 25907                           tblptru	equ	0xFF8
 25908                           tblptrh	equ	0xFF7
 25909                           tblptrl	equ	0xFF6
 25910                           tablat	equ	0xFF5
 25911                           prodh	equ	0xFF4
 25912                           prodl	equ	0xFF3
 25913                           intcon	equ	0xFF2
 25914                           indf0	equ	0xFEF
 25915                           postinc0	equ	0xFEE
 25916                           fsr0h	equ	0xFEA
 25917                           fsr0l	equ	0xFE9
 25918                           wreg	equ	0xFE8
 25919                           indf1	equ	0xFE7
 25920                           postdec1	equ	0xFE5
 25921                           fsr1h	equ	0xFE2
 25922                           fsr1l	equ	0xFE1
 25923                           indf2	equ	0xFDF
 25924                           postinc2	equ	0xFDE
 25925                           postdec2	equ	0xFDD
 25926                           plusw2	equ	0xFDB
 25927                           fsr2h	equ	0xFDA
 25928                           fsr2l	equ	0xFD9
 25929                           status	equ	0xFD8
 25930                           
 25931 ;; *************** function ___fldiv *****************
 25932 ;; Defined at:
 25933 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcdiv.c"
 25934 ;; Parameters:    Size  Location     Type
 25935 ;;  b               4    0[BANK0 ] unsigned char 
 25936 ;;  a               4    4[BANK0 ] unsigned char 
 25937 ;; Auto vars:     Size  Location     Type
 25938 ;;  grs             4   19[BANK0 ] unsigned long 
 25939 ;;  rem             4   13[BANK0 ] unsigned long 
 25940 ;;  new_exp         2   17[BANK0 ] int 
 25941 ;;  aexp            1   24[BANK0 ] unsigned char 
 25942 ;;  bexp            1   23[BANK0 ] unsigned char 
 25943 ;;  sign            1   12[BANK0 ] unsigned char 
 25944 ;; Return value:  Size  Location     Type
 25945 ;;                  4    0[BANK0 ] unsigned char 
 25946 ;; Registers used:
 25947 ;;		wreg, status,2, status,0
 25948 ;; Tracked objects:
 25949 ;;		On entry : 0/0
 25950 ;;		On exit  : 0/0
 25951 ;;		Unchanged: 0/0
 25952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25953 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25954 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25955 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25956 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25957 ;;Total ram usage:       25 bytes
 25958 ;; Hardware stack levels used:    1
 25959 ;; Hardware stack levels required when called:    7
 25960 ;; This function calls:
 25961 ;;		Nothing
 25962 ;; This function is called by:
 25963 ;;		_exp
 25964 ;;		_ADC_Voltage
 25965 ;; This function uses a non-reentrant model
 25966 ;;
 25967                           
 25968                           	psect	text136
 25969  0114BE                     __ptext136:
 25970                           	opt stack 0
 25971  0114BE                     ___fldiv:
 25972                           	opt stack 19
 25973                           
 25974                           ; BSR set to: 0
 25975                           ;incstack = 0
 25976  0114BE  0100               	movlb	0	; () banked
 25977  0114C0  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25978  0114C2  0B80               	andlw	128
 25979  0114C4  6F6C               	movwf	___fldiv@sign& (0+255),b
 25980  0114C6  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25981  0114C8  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 25982  0114CA  6F77               	movwf	___fldiv@bexp& (0+255),b
 25983                           
 25984                           ; BSR set to: 0
 25985  0114CC  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 25986                           
 25987                           ; BSR set to: 0
 25988  0114CE  8177               	bsf	___fldiv@bexp& (0+255),0,b
 25989                           
 25990                           ; BSR set to: 0
 25991                           
 25992                           ; BSR set to: 0
 25993  0114D0  5177               	movf	___fldiv@bexp& (0+255),w,b
 25994  0114D2  B4D8               	btfsc	status,2,c
 25995  0114D4  D00D               	goto	l2823
 25996                           
 25997                           ; BSR set to: 0
 25998  0114D6  2977               	incf	___fldiv@bexp& (0+255),w,b
 25999  0114D8  A4D8               	btfss	status,2,c
 26000  0114DA  D008               	goto	l2824
 26001                           
 26002                           ; BSR set to: 0
 26003  0114DC  0E00               	movlw	0
 26004  0114DE  6F60               	movwf	___fldiv@b& (0+255),b
 26005  0114E0  0E00               	movlw	0
 26006  0114E2  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26007  0114E4  0E00               	movlw	0
 26008  0114E6  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26009  0114E8  0E00               	movlw	0
 26010  0114EA  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26011  0114EC                     l2824:
 26012                           
 26013                           ; BSR set to: 0
 26014                           
 26015                           ; BSR set to: 0
 26016  0114EC  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 26017  0114EE  D006               	goto	L15
 26018  0114F0                     l2823:
 26019                           
 26020                           ; BSR set to: 0
 26021                           
 26022                           ; BSR set to: 0
 26023  0114F0  0E00               	movlw	0
 26024  0114F2  6F60               	movwf	___fldiv@b& (0+255),b
 26025  0114F4  0E00               	movlw	0
 26026  0114F6  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26027  0114F8  0E00               	movlw	0
 26028  0114FA  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26029  0114FC                     L15:
 26030  0114FC  0E00               	movlw	0
 26031  0114FE  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26032                           
 26033                           ; BSR set to: 0
 26034                           
 26035                           ; BSR set to: 0
 26036  011500  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26037  011502  0B80               	andlw	128
 26038  011504  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 26039                           
 26040                           ; BSR set to: 0
 26041  011506  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26042  011508  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 26043  01150A  6F78               	movwf	___fldiv@aexp& (0+255),b
 26044                           
 26045                           ; BSR set to: 0
 26046  01150C  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 26047                           
 26048                           ; BSR set to: 0
 26049  01150E  8178               	bsf	___fldiv@aexp& (0+255),0,b
 26050                           
 26051                           ; BSR set to: 0
 26052                           
 26053                           ; BSR set to: 0
 26054  011510  5178               	movf	___fldiv@aexp& (0+255),w,b
 26055  011512  B4D8               	btfsc	status,2,c
 26056  011514  D00D               	goto	l2827
 26057                           
 26058                           ; BSR set to: 0
 26059  011516  2978               	incf	___fldiv@aexp& (0+255),w,b
 26060  011518  A4D8               	btfss	status,2,c
 26061  01151A  D008               	goto	l2828
 26062                           
 26063                           ; BSR set to: 0
 26064  01151C  0E00               	movlw	0
 26065  01151E  6F64               	movwf	___fldiv@a& (0+255),b
 26066  011520  0E00               	movlw	0
 26067  011522  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26068  011524  0E00               	movlw	0
 26069  011526  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26070  011528  0E00               	movlw	0
 26071  01152A  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26072  01152C                     l2828:
 26073                           
 26074                           ; BSR set to: 0
 26075                           
 26076                           ; BSR set to: 0
 26077  01152C  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 26078  01152E  D006               	goto	L16
 26079  011530                     l2827:
 26080                           
 26081                           ; BSR set to: 0
 26082                           
 26083                           ; BSR set to: 0
 26084  011530  0E00               	movlw	0
 26085  011532  6F64               	movwf	___fldiv@a& (0+255),b
 26086  011534  0E00               	movlw	0
 26087  011536  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26088  011538  0E00               	movlw	0
 26089  01153A  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26090  01153C                     L16:
 26091  01153C  0E00               	movlw	0
 26092  01153E  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26093                           
 26094                           ; BSR set to: 0
 26095                           
 26096                           ; BSR set to: 0
 26097  011540  5164               	movf	___fldiv@a& (0+255),w,b
 26098  011542  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 26099  011544  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 26100  011546  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 26101  011548  A4D8               	btfss	status,2,c
 26102  01154A  D015               	goto	l2830
 26103                           
 26104                           ; BSR set to: 0
 26105  01154C  0E00               	movlw	0
 26106  01154E  6F60               	movwf	___fldiv@b& (0+255),b
 26107  011550  0E00               	movlw	0
 26108  011552  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26109  011554  0E00               	movlw	0
 26110  011556  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26111  011558  0E00               	movlw	0
 26112  01155A  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26113                           
 26114                           ; BSR set to: 0
 26115  01155C  0E80               	movlw	128
 26116  01155E  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 26117  011560  0E7F               	movlw	127
 26118  011562  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26119                           
 26120                           ; BSR set to: 0
 26121  011564  C060  F060         	movff	___fldiv@b,?___fldiv
 26122  011568  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26123  01156C  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26124  011570  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26125                           
 26126                           ; BSR set to: 0
 26127  011574  0012               	return	
 26128  011576                     l2830:
 26129                           
 26130                           ; BSR set to: 0
 26131                           
 26132                           ; BSR set to: 0
 26133  011576  5177               	movf	___fldiv@bexp& (0+255),w,b
 26134  011578  A4D8               	btfss	status,2,c
 26135  01157A  D011               	goto	l2832
 26136                           
 26137                           ; BSR set to: 0
 26138  01157C  0E00               	movlw	0
 26139  01157E  6F60               	movwf	___fldiv@b& (0+255),b
 26140  011580  0E00               	movlw	0
 26141  011582  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26142  011584  0E00               	movlw	0
 26143  011586  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26144  011588  0E00               	movlw	0
 26145  01158A  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26146                           
 26147                           ; BSR set to: 0
 26148  01158C  C060  F060         	movff	___fldiv@b,?___fldiv
 26149  011590  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26150  011594  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26151  011598  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26152                           
 26153                           ; BSR set to: 0
 26154  01159C  0012               	return	
 26155  01159E                     l2832:
 26156                           
 26157                           ; BSR set to: 0
 26158                           
 26159                           ; BSR set to: 0
 26160  01159E  5178               	movf	___fldiv@aexp& (0+255),w,b
 26161  0115A0  6F68               	movwf	??___fldiv& (0+255),b
 26162  0115A2  6B69               	clrf	(??___fldiv+1)& (0+255),b
 26163  0115A4  1F68               	comf	??___fldiv& (0+255),f,b
 26164  0115A6  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 26165  0115A8  4B68               	infsnz	??___fldiv& (0+255),f,b
 26166  0115AA  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 26167  0115AC  5177               	movf	___fldiv@bexp& (0+255),w,b
 26168  0115AE  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26169  0115B0  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 26170  0115B2  5168               	movf	??___fldiv& (0+255),w,b
 26171  0115B4  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 26172  0115B6  5169               	movf	(??___fldiv+1)& (0+255),w,b
 26173  0115B8  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 26174  0115BA  0E7F               	movlw	127
 26175  0115BC  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 26176  0115BE  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26177  0115C0  0E00               	movlw	0
 26178  0115C2  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 26179  0115C4  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26180                           
 26181                           ; BSR set to: 0
 26182  0115C6  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 26183  0115CA  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 26184  0115CE  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 26185  0115D2  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 26186                           
 26187                           ; BSR set to: 0
 26188  0115D6  0E00               	movlw	0
 26189  0115D8  6F60               	movwf	___fldiv@b& (0+255),b
 26190  0115DA  0E00               	movlw	0
 26191  0115DC  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26192  0115DE  0E00               	movlw	0
 26193  0115E0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26194  0115E2  0E00               	movlw	0
 26195  0115E4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26196                           
 26197                           ; BSR set to: 0
 26198  0115E6  0E00               	movlw	0
 26199  0115E8  6F73               	movwf	___fldiv@grs& (0+255),b
 26200  0115EA  0E00               	movlw	0
 26201  0115EC  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 26202  0115EE  0E00               	movlw	0
 26203  0115F0  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 26204  0115F2  0E00               	movlw	0
 26205  0115F4  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 26206                           
 26207                           ; BSR set to: 0
 26208  0115F6  0E00               	movlw	0
 26209  0115F8  6F78               	movwf	___fldiv@aexp& (0+255),b
 26210  0115FA  D028               	goto	l2833
 26211  0115FC                     
 26212                           ; BSR set to: 0
 26213                           
 26214                           ; BSR set to: 0
 26215  0115FC  5178               	movf	___fldiv@aexp& (0+255),w,b
 26216  0115FE  B4D8               	btfsc	status,2,c
 26217  011600  D011               	goto	l2835
 26218                           
 26219                           ; BSR set to: 0
 26220  011602  90D8               	bcf	status,0,c
 26221  011604  376D               	rlcf	___fldiv@rem& (0+255),f,b
 26222  011606  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 26223  011608  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 26224  01160A  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 26225  01160C  90D8               	bcf	status,0,c
 26226  01160E  3760               	rlcf	___fldiv@b& (0+255),f,b
 26227  011610  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26228  011612  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26229  011614  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26230                           
 26231                           ; BSR set to: 0
 26232  011616  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26233                           
 26234                           ; BSR set to: 0
 26235  011618  8160               	bsf	___fldiv@b& (0+255),0,b
 26236                           
 26237                           ; BSR set to: 0
 26238  01161A  90D8               	bcf	status,0,c
 26239  01161C  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26240  01161E  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26241  011620  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26242  011622  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26243  011624                     l2835:
 26244                           
 26245                           ; BSR set to: 0
 26246                           
 26247                           ; BSR set to: 0
 26248  011624  5164               	movf	___fldiv@a& (0+255),w,b
 26249  011626  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 26250  011628  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26251  01162A  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 26252  01162C  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26253  01162E  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 26254  011630  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26255  011632  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 26256  011634  A0D8               	btfss	status,0,c
 26257  011636  D009               	goto	l2837
 26258                           
 26259                           ; BSR set to: 0
 26260  011638  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 26261                           
 26262                           ; BSR set to: 0
 26263  01163A  5164               	movf	___fldiv@a& (0+255),w,b
 26264  01163C  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 26265  01163E  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26266  011640  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 26267  011642  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26268  011644  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 26269  011646  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26270  011648  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 26271  01164A                     l2837:
 26272                           
 26273                           ; BSR set to: 0
 26274                           
 26275                           ; BSR set to: 0
 26276  01164A  2B78               	incf	___fldiv@aexp& (0+255),f,b
 26277  01164C                     l2833:
 26278                           
 26279                           ; BSR set to: 0
 26280  01164C  0E19               	movlw	25
 26281  01164E  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 26282  011650  D7D5               	goto	l2834
 26283                           
 26284                           ; BSR set to: 0
 26285                           
 26286                           ; BSR set to: 0
 26287  011652  516D               	movf	___fldiv@rem& (0+255),w,b
 26288  011654  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 26289  011656  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 26290  011658  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 26291  01165A  B4D8               	btfsc	status,2,c
 26292  01165C  D011               	goto	l2840
 26293                           
 26294                           ; BSR set to: 0
 26295  01165E  8173               	bsf	___fldiv@grs& (0+255),0,b
 26296                           
 26297                           ; BSR set to: 0
 26298  011660  D00F               	goto	l2840
 26299  011662                     
 26300                           ; BSR set to: 0
 26301                           
 26302                           ; BSR set to: 0
 26303  011662  90D8               	bcf	status,0,c
 26304  011664  3760               	rlcf	___fldiv@b& (0+255),f,b
 26305  011666  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26306  011668  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26307  01166A  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26308                           
 26309                           ; BSR set to: 0
 26310  01166C  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26311                           
 26312                           ; BSR set to: 0
 26313  01166E  8160               	bsf	___fldiv@b& (0+255),0,b
 26314                           
 26315                           ; BSR set to: 0
 26316  011670  90D8               	bcf	status,0,c
 26317  011672  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26318  011674  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26319  011676  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26320  011678  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26321  01167A  0771               	decf	___fldiv@new_exp& (0+255),f,b
 26322  01167C  A0D8               	btfss	status,0,c
 26323  01167E  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 26324  011680                     l2840:
 26325                           
 26326                           ; BSR set to: 0
 26327                           
 26328                           ; BSR set to: 0
 26329  011680  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 26330  011682  D7EF               	goto	l2841
 26331                           
 26332                           ; BSR set to: 0
 26333                           
 26334                           ; BSR set to: 0
 26335  011684  0E00               	movlw	0
 26336  011686  6F78               	movwf	___fldiv@aexp& (0+255),b
 26337                           
 26338                           ; BSR set to: 0
 26339  011688  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 26340  01168A  D016               	goto	l2847
 26341                           
 26342                           ; BSR set to: 0
 26343  01168C  0EFF               	movlw	255
 26344  01168E  1573               	andwf	___fldiv@grs& (0+255),w,b
 26345  011690  6F68               	movwf	??___fldiv& (0+255),b
 26346  011692  0EFF               	movlw	255
 26347  011694  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 26348  011696  6F69               	movwf	(??___fldiv+1)& (0+255),b
 26349  011698  0EFF               	movlw	255
 26350  01169A  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 26351  01169C  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26352  01169E  0E7F               	movlw	127
 26353  0116A0  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 26354  0116A2  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 26355  0116A4  5168               	movf	??___fldiv& (0+255),w,b
 26356  0116A6  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 26357  0116A8  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 26358  0116AA  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 26359  0116AC  A4D8               	btfss	status,2,c
 26360  0116AE  D002               	goto	u11050
 26361                           
 26362                           ; BSR set to: 0
 26363                           
 26364                           ; BSR set to: 0
 26365  0116B0  A160               	btfss	___fldiv@b& (0+255),0,b
 26366  0116B2  D002               	goto	l2847
 26367  0116B4                     u11050:
 26368                           
 26369                           ; BSR set to: 0
 26370  0116B4  0E01               	movlw	1
 26371  0116B6  6F78               	movwf	___fldiv@aexp& (0+255),b
 26372  0116B8                     l2847:
 26373                           
 26374                           ; BSR set to: 0
 26375                           
 26376                           ; BSR set to: 0
 26377                           
 26378                           ; BSR set to: 0
 26379  0116B8  5178               	movf	___fldiv@aexp& (0+255),w,b
 26380  0116BA  B4D8               	btfsc	status,2,c
 26381  0116BC  D01F               	goto	l2849
 26382                           
 26383                           ; BSR set to: 0
 26384  0116BE  0E01               	movlw	1
 26385  0116C0  2760               	addwf	___fldiv@b& (0+255),f,b
 26386  0116C2  0E00               	movlw	0
 26387  0116C4  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 26388  0116C6  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 26389  0116C8  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 26390                           
 26391                           ; BSR set to: 0
 26392  0116CA  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 26393  0116CC  D017               	goto	l2849
 26394                           
 26395                           ; BSR set to: 0
 26396  0116CE  C060  F068         	movff	___fldiv@b,??___fldiv
 26397  0116D2  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 26398  0116D6  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 26399  0116DA  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 26400  0116DE  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 26401  0116E0  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 26402  0116E2  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 26403  0116E4  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 26404  0116E6  3368               	rrcf	??___fldiv& (0+255),f,b
 26405  0116E8  C068  F060         	movff	??___fldiv,___fldiv@b
 26406  0116EC  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 26407  0116F0  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 26408  0116F4  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 26409                           
 26410                           ; BSR set to: 0
 26411  0116F8  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 26412  0116FA  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 26413  0116FC                     l2849:
 26414                           
 26415                           ; BSR set to: 0
 26416                           
 26417                           ; BSR set to: 0
 26418                           
 26419                           ; BSR set to: 0
 26420  0116FC  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26421  0116FE  D010               	goto	l2850
 26422  011700  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26423  011702  E103               	bnz	u11080
 26424  011704  2971               	incf	___fldiv@new_exp& (0+255),w,b
 26425  011706  A0D8               	btfss	status,0,c
 26426  011708  D00B               	goto	l2850
 26427  01170A                     u11080:
 26428                           
 26429                           ; BSR set to: 0
 26430  01170A  0E00               	movlw	0
 26431  01170C  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26432  01170E  6971               	setf	___fldiv@new_exp& (0+255),b
 26433  011710  0E00               	movlw	0
 26434  011712  6F60               	movwf	___fldiv@b& (0+255),b
 26435  011714  0E00               	movlw	0
 26436  011716  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26437  011718  0E00               	movlw	0
 26438  01171A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26439  01171C  0E00               	movlw	0
 26440  01171E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26441  011720                     l2850:
 26442                           
 26443                           ; BSR set to: 0
 26444                           
 26445                           ; BSR set to: 0
 26446  011720  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26447  011722  D005               	goto	u11090
 26448  011724  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26449  011726  E111               	bnz	l13645
 26450  011728  0571               	decf	___fldiv@new_exp& (0+255),w,b
 26451  01172A  B0D8               	btfsc	status,0,c
 26452  01172C  D00E               	goto	l2851
 26453  01172E                     u11090:
 26454                           
 26455                           ; BSR set to: 0
 26456  01172E  0E00               	movlw	0
 26457  011730  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26458  011732  0E00               	movlw	0
 26459  011734  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26460  011736  0E00               	movlw	0
 26461  011738  6F60               	movwf	___fldiv@b& (0+255),b
 26462  01173A  0E00               	movlw	0
 26463  01173C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26464  01173E  0E00               	movlw	0
 26465  011740  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26466  011742  0E00               	movlw	0
 26467  011744  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26468  011746  0E00               	movlw	0
 26469  011748  6F6C               	movwf	___fldiv@sign& (0+255),b
 26470  01174A                     l2851:
 26471  01174A                     l13645:
 26472                           
 26473                           ; BSR set to: 0
 26474  01174A  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 26475                           
 26476                           ; BSR set to: 0
 26477  01174E  A177               	btfss	___fldiv@bexp& (0+255),0,b
 26478  011750  D002               	goto	l2852
 26479                           
 26480                           ; BSR set to: 0
 26481  011752  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 26482  011754  D001               	goto	l2853
 26483  011756                     l2852:
 26484                           
 26485                           ; BSR set to: 0
 26486                           
 26487                           ; BSR set to: 0
 26488  011756  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 26489  011758                     l2853:
 26490                           
 26491                           ; BSR set to: 0
 26492                           
 26493                           ; BSR set to: 0
 26494  011758  90D8               	bcf	status,0,c
 26495  01175A  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 26496  01175C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26497                           
 26498                           ; BSR set to: 0
 26499  01175E  516C               	movf	___fldiv@sign& (0+255),w,b
 26500  011760  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26501                           
 26502                           ; BSR set to: 0
 26503  011762  C060  F060         	movff	___fldiv@b,?___fldiv
 26504  011766  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26505  01176A  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26506  01176E  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26507  011772  0012               	return	
 26508  011774                     __end_of___fldiv:
 26509                           	opt stack 0
 26510                           tosu	equ	0xFFF
 26511                           tosh	equ	0xFFE
 26512                           tosl	equ	0xFFD
 26513                           pclath	equ	0xFFA
 26514                           tblptru	equ	0xFF8
 26515                           tblptrh	equ	0xFF7
 26516                           tblptrl	equ	0xFF6
 26517                           tablat	equ	0xFF5
 26518                           prodh	equ	0xFF4
 26519                           prodl	equ	0xFF3
 26520                           intcon	equ	0xFF2
 26521                           indf0	equ	0xFEF
 26522                           postinc0	equ	0xFEE
 26523                           fsr0h	equ	0xFEA
 26524                           fsr0l	equ	0xFE9
 26525                           wreg	equ	0xFE8
 26526                           indf1	equ	0xFE7
 26527                           postdec1	equ	0xFE5
 26528                           fsr1h	equ	0xFE2
 26529                           fsr1l	equ	0xFE1
 26530                           indf2	equ	0xFDF
 26531                           postinc2	equ	0xFDE
 26532                           postdec2	equ	0xFDD
 26533                           plusw2	equ	0xFDB
 26534                           fsr2h	equ	0xFDA
 26535                           fsr2l	equ	0xFD9
 26536                           status	equ	0xFD8
 26537                           
 26538 ;; *************** function ___awdiv *****************
 26539 ;; Defined at:
 26540 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
 26541 ;; Parameters:    Size  Location     Type
 26542 ;;  dividend        2    0[BANK0 ] int 
 26543 ;;  divisor         2    2[BANK0 ] int 
 26544 ;; Auto vars:     Size  Location     Type
 26545 ;;  quotient        2    6[BANK0 ] int 
 26546 ;;  sign            1    5[BANK0 ] unsigned char 
 26547 ;;  counter         1    4[BANK0 ] unsigned char 
 26548 ;; Return value:  Size  Location     Type
 26549 ;;                  2    0[BANK0 ] int 
 26550 ;; Registers used:
 26551 ;;		wreg, status,2, status,0
 26552 ;; Tracked objects:
 26553 ;;		On entry : 0/0
 26554 ;;		On exit  : 0/0
 26555 ;;		Unchanged: 0/0
 26556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26557 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26558 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26560 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26561 ;;Total ram usage:        8 bytes
 26562 ;; Hardware stack levels used:    1
 26563 ;; Hardware stack levels required when called:    7
 26564 ;; This function calls:
 26565 ;;		Nothing
 26566 ;; This function is called by:
 26567 ;;		_Console_Tab
 26568 ;;		_ADCAverage
 26569 ;; This function uses a non-reentrant model
 26570 ;;
 26571                           
 26572                           	psect	text137
 26573  01487A                     __ptext137:
 26574                           	opt stack 0
 26575  01487A                     ___awdiv:
 26576                           	opt stack 19
 26577                           
 26578                           ; BSR set to: 0
 26579                           ;incstack = 0
 26580  01487A  0E00               	movlw	0
 26581  01487C  0100               	movlb	0	; () banked
 26582  01487E  6F65               	movwf	___awdiv@sign& (0+255),b
 26583                           
 26584                           ; BSR set to: 0
 26585  014880  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26586  014882  D006               	goto	l2490
 26587                           
 26588                           ; BSR set to: 0
 26589  014884  6D62               	negf	___awdiv@divisor& (0+255),b
 26590  014886  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 26591  014888  B0D8               	btfsc	status,0,c
 26592  01488A  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 26593                           
 26594                           ; BSR set to: 0
 26595  01488C  0E01               	movlw	1
 26596  01488E  6F65               	movwf	___awdiv@sign& (0+255),b
 26597  014890                     l2490:
 26598                           
 26599                           ; BSR set to: 0
 26600                           
 26601                           ; BSR set to: 0
 26602  014890  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 26603  014892  D006               	goto	l2491
 26604                           
 26605                           ; BSR set to: 0
 26606  014894  6D60               	negf	___awdiv@dividend& (0+255),b
 26607  014896  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 26608  014898  B0D8               	btfsc	status,0,c
 26609  01489A  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 26610                           
 26611                           ; BSR set to: 0
 26612  01489C  0E01               	movlw	1
 26613  01489E  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 26614  0148A0                     l2491:
 26615                           
 26616                           ; BSR set to: 0
 26617                           
 26618                           ; BSR set to: 0
 26619  0148A0  0E00               	movlw	0
 26620  0148A2  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 26621  0148A4  0E00               	movlw	0
 26622  0148A6  6F66               	movwf	___awdiv@quotient& (0+255),b
 26623                           
 26624                           ; BSR set to: 0
 26625  0148A8  5162               	movf	___awdiv@divisor& (0+255),w,b
 26626  0148AA  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 26627  0148AC  B4D8               	btfsc	status,2,c
 26628  0148AE  D01C               	goto	l2498
 26629                           
 26630                           ; BSR set to: 0
 26631  0148B0  0E01               	movlw	1
 26632  0148B2  6F64               	movwf	___awdiv@counter& (0+255),b
 26633  0148B4  D004               	goto	l2493
 26634  0148B6                     
 26635                           ; BSR set to: 0
 26636                           
 26637                           ; BSR set to: 0
 26638  0148B6  90D8               	bcf	status,0,c
 26639  0148B8  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 26640  0148BA  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 26641  0148BC  2B64               	incf	___awdiv@counter& (0+255),f,b
 26642  0148BE                     l2493:
 26643                           
 26644                           ; BSR set to: 0
 26645                           
 26646                           ; BSR set to: 0
 26647  0148BE  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26648  0148C0  D7FA               	goto	l2494
 26649  0148C2                     u10430:
 26650                           
 26651                           ; BSR set to: 0
 26652                           
 26653                           ; BSR set to: 0
 26654                           
 26655                           ; BSR set to: 0
 26656  0148C2  90D8               	bcf	status,0,c
 26657  0148C4  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 26658  0148C6  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 26659                           
 26660                           ; BSR set to: 0
 26661  0148C8  5162               	movf	___awdiv@divisor& (0+255),w,b
 26662  0148CA  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 26663  0148CC  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26664  0148CE  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 26665  0148D0  A0D8               	btfss	status,0,c
 26666  0148D2  D005               	goto	l2497
 26667                           
 26668                           ; BSR set to: 0
 26669  0148D4  5162               	movf	___awdiv@divisor& (0+255),w,b
 26670  0148D6  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 26671  0148D8  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26672  0148DA  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 26673                           
 26674                           ; BSR set to: 0
 26675  0148DC  8166               	bsf	___awdiv@quotient& (0+255),0,b
 26676  0148DE                     l2497:
 26677                           
 26678                           ; BSR set to: 0
 26679                           
 26680                           ; BSR set to: 0
 26681  0148DE  90D8               	bcf	status,0,c
 26682  0148E0  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 26683  0148E2  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 26684                           
 26685                           ; BSR set to: 0
 26686  0148E4  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 26687  0148E6  D7ED               	goto	u10430
 26688  0148E8                     l2498:
 26689                           
 26690                           ; BSR set to: 0
 26691                           
 26692                           ; BSR set to: 0
 26693                           
 26694                           ; BSR set to: 0
 26695  0148E8  5165               	movf	___awdiv@sign& (0+255),w,b
 26696  0148EA  B4D8               	btfsc	status,2,c
 26697  0148EC  D004               	goto	l2499
 26698                           
 26699                           ; BSR set to: 0
 26700  0148EE  6D66               	negf	___awdiv@quotient& (0+255),b
 26701  0148F0  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 26702  0148F2  B0D8               	btfsc	status,0,c
 26703  0148F4  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 26704  0148F6                     l2499:
 26705                           
 26706                           ; BSR set to: 0
 26707                           
 26708                           ; BSR set to: 0
 26709  0148F6  C066  F060         	movff	___awdiv@quotient,?___awdiv
 26710  0148FA  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 26711  0148FE  0012               	return	
 26712  014900                     __end_of___awdiv:
 26713                           	opt stack 0
 26714                           tosu	equ	0xFFF
 26715                           tosh	equ	0xFFE
 26716                           tosl	equ	0xFFD
 26717                           pclath	equ	0xFFA
 26718                           tblptru	equ	0xFF8
 26719                           tblptrh	equ	0xFF7
 26720                           tblptrl	equ	0xFF6
 26721                           tablat	equ	0xFF5
 26722                           prodh	equ	0xFF4
 26723                           prodl	equ	0xFF3
 26724                           intcon	equ	0xFF2
 26725                           indf0	equ	0xFEF
 26726                           postinc0	equ	0xFEE
 26727                           fsr0h	equ	0xFEA
 26728                           fsr0l	equ	0xFE9
 26729                           wreg	equ	0xFE8
 26730                           indf1	equ	0xFE7
 26731                           postdec1	equ	0xFE5
 26732                           fsr1h	equ	0xFE2
 26733                           fsr1l	equ	0xFE1
 26734                           indf2	equ	0xFDF
 26735                           postinc2	equ	0xFDE
 26736                           postdec2	equ	0xFDD
 26737                           plusw2	equ	0xFDB
 26738                           fsr2h	equ	0xFDA
 26739                           fsr2l	equ	0xFD9
 26740                           status	equ	0xFD8
 26741                           
 26742 ;; *************** function _HMI_SetNumber *****************
 26743 ;; Defined at:
 26744 ;;		line 221 in file "HMI.c"
 26745 ;; Parameters:    Size  Location     Type
 26746 ;;  pInput          2   22[BANK0 ] int 
 26747 ;; Auto vars:     Size  Location     Type
 26748 ;;		None
 26749 ;; Return value:  Size  Location     Type
 26750 ;;                  1    wreg      void 
 26751 ;; Registers used:
 26752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26753 ;; Tracked objects:
 26754 ;;		On entry : 0/0
 26755 ;;		On exit  : 0/0
 26756 ;;		Unchanged: 0/0
 26757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26762 ;;Total ram usage:        2 bytes
 26763 ;; Hardware stack levels used:    1
 26764 ;; Hardware stack levels required when called:    9
 26765 ;; This function calls:
 26766 ;;		_HMI_SetSegments
 26767 ;;		_itos
 26768 ;; This function is called by:
 26769 ;;		_Event_TestButton
 26770 ;;		_ADCAverage
 26771 ;;		_main
 26772 ;;		_Event_HMI_UpButton
 26773 ;;		_Event_HMI_DownButton
 26774 ;; This function uses a non-reentrant model
 26775 ;;
 26776                           
 26777                           	psect	text138
 26778  015DB4                     __ptext138:
 26779                           	opt stack 0
 26780  015DB4                     _HMI_SetNumber:
 26781                           	opt stack 19
 26782                           
 26783                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26784                           
 26785                           ; BSR set to: 0
 26786                           ;incstack = 0
 26787  015DB4  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 26788  015DB8  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26789  015DBC  0E44               	movlw	low _HMIBoard
 26790  015DBE  0100               	movlb	0	; () banked
 26791  015DC0  6F6E               	movwf	itos@destination& (0+255),b
 26792  015DC2  0E01               	movlw	high _HMIBoard
 26793  015DC4  6F6F               	movwf	(itos@destination+1)& (0+255),b
 26794  015DC6  EC58  F09F         	call	_itos	;wreg free
 26795                           
 26796                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26797  015DCA  0E44               	movlw	low _HMIBoard
 26798  015DCC  0100               	movlb	0	; () banked
 26799  015DCE  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 26800  015DD0  0E01               	movlw	high _HMIBoard
 26801  015DD2  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26802  015DD4  ECB5  F0A1         	call	_HMI_SetSegments	;wreg free
 26803  015DD8  0012               	return		;funcret
 26804  015DDA                     __end_of_HMI_SetNumber:
 26805                           	opt stack 0
 26806                           tosu	equ	0xFFF
 26807                           tosh	equ	0xFFE
 26808                           tosl	equ	0xFFD
 26809                           pclath	equ	0xFFA
 26810                           tblptru	equ	0xFF8
 26811                           tblptrh	equ	0xFF7
 26812                           tblptrl	equ	0xFF6
 26813                           tablat	equ	0xFF5
 26814                           prodh	equ	0xFF4
 26815                           prodl	equ	0xFF3
 26816                           intcon	equ	0xFF2
 26817                           indf0	equ	0xFEF
 26818                           postinc0	equ	0xFEE
 26819                           fsr0h	equ	0xFEA
 26820                           fsr0l	equ	0xFE9
 26821                           wreg	equ	0xFE8
 26822                           indf1	equ	0xFE7
 26823                           postdec1	equ	0xFE5
 26824                           fsr1h	equ	0xFE2
 26825                           fsr1l	equ	0xFE1
 26826                           indf2	equ	0xFDF
 26827                           postinc2	equ	0xFDE
 26828                           postdec2	equ	0xFDD
 26829                           plusw2	equ	0xFDB
 26830                           fsr2h	equ	0xFDA
 26831                           fsr2l	equ	0xFD9
 26832                           status	equ	0xFD8
 26833                           
 26834 ;; *************** function _itos *****************
 26835 ;; Defined at:
 26836 ;;		line 369 in file "Library/Types.c"
 26837 ;; Parameters:    Size  Location     Type
 26838 ;;  input           2   12[BANK0 ] unsigned short 
 26839 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26840 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26841 ;; Auto vars:     Size  Location     Type
 26842 ;;  Out             2   20[BANK0 ] unsigned short 
 26843 ;;  Length          2   18[BANK0 ] unsigned short 
 26844 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26845 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26846 ;; Return value:  Size  Location     Type
 26847 ;;                  1    wreg      void 
 26848 ;; Registers used:
 26849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26850 ;; Tracked objects:
 26851 ;;		On entry : 0/0
 26852 ;;		On exit  : 0/0
 26853 ;;		Unchanged: 0/0
 26854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26855 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26856 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26858 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26859 ;;Total ram usage:       10 bytes
 26860 ;; Hardware stack levels used:    1
 26861 ;; Hardware stack levels required when called:    8
 26862 ;; This function calls:
 26863 ;;		___lwdiv
 26864 ;;		___lwmod
 26865 ;;		_reverse
 26866 ;; This function is called by:
 26867 ;;		_HMI_SetNumber
 26868 ;; This function uses a non-reentrant model
 26869 ;;
 26870                           
 26871                           	psect	text139
 26872  013EB0                     __ptext139:
 26873                           	opt stack 0
 26874  013EB0                     _itos:
 26875                           	opt stack 19
 26876                           
 26877                           ;Types.c: 371: UINT16 Out = input;
 26878                           
 26879                           ;incstack = 0
 26880  013EB0  C06C  F074         	movff	itos@input,itos@Out
 26881  013EB4  C06D  F075         	movff	itos@input+1,itos@Out+1
 26882                           
 26883                           ;Types.c: 372: UINT16 Length = 0;
 26884  013EB8  0E00               	movlw	0
 26885  013EBA  0100               	movlb	0	; () banked
 26886  013EBC  6F73               	movwf	(itos@Length+1)& (0+255),b
 26887  013EBE  0E00               	movlw	0
 26888  013EC0  6F72               	movwf	itos@Length& (0+255),b
 26889                           
 26890                           ; BSR set to: 0
 26891                           ;Types.c: 373: char *Data = destination;
 26892  013EC2  C06E  F070         	movff	itos@destination,itos@Data
 26893  013EC6  C06F  F071         	movff	itos@destination+1,itos@Data+1
 26894                           
 26895                           ; BSR set to: 0
 26896                           ;Types.c: 374: if(Out == 0)
 26897  013ECA  5174               	movf	itos@Out& (0+255),w,b
 26898  013ECC  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26899  013ECE  A4D8               	btfss	status,2,c
 26900  013ED0  D030               	goto	l929
 26901                           
 26902                           ; BSR set to: 0
 26903                           ;Types.c: 375: {
 26904                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26905  013ED2  C070  FFD9         	movff	itos@Data,fsr2l
 26906  013ED6  C071  FFDA         	movff	itos@Data+1,fsr2h
 26907  013EDA  0E30               	movlw	48
 26908  013EDC  6EDF               	movwf	indf2,c
 26909                           
 26910                           ; BSR set to: 0
 26911                           ;Types.c: 377: Length = 1;
 26912  013EDE  0E00               	movlw	0
 26913  013EE0  6F73               	movwf	(itos@Length+1)& (0+255),b
 26914  013EE2  0E01               	movlw	1
 26915  013EE4  6F72               	movwf	itos@Length& (0+255),b
 26916                           
 26917                           ;Types.c: 378: }
 26918  013EE6  D039               	goto	l928
 26919  013EE8                     
 26920                           ; BSR set to: 0
 26921                           ;Types.c: 382: {
 26922                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26923                           
 26924                           ; BSR set to: 0
 26925  013EE8  C074  F067         	movff	itos@Out,___lwmod@dividend
 26926  013EEC  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 26927  013EF0  0E00               	movlw	0
 26928  013EF2  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 26929  013EF4  0E0A               	movlw	10
 26930  013EF6  6F69               	movwf	___lwmod@divisor& (0+255),b
 26931  013EF8  ECFE  F0AB         	call	___lwmod	;wreg free
 26932  013EFC  0100               	movlb	0	; () banked
 26933  013EFE  5167               	movf	?___lwmod& (0+255),w,b
 26934  013F00  0F30               	addlw	48
 26935  013F02  C070  FFD9         	movff	itos@Data,fsr2l
 26936  013F06  C071  FFDA         	movff	itos@Data+1,fsr2h
 26937  013F0A  6EDF               	movwf	indf2,c
 26938                           
 26939                           ; BSR set to: 0
 26940                           ;Types.c: 384: Out /= 10;
 26941  013F0C  C074  F060         	movff	itos@Out,___lwdiv@dividend
 26942  013F10  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 26943  013F14  0E00               	movlw	0
 26944  013F16  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26945  013F18  0E0A               	movlw	10
 26946  013F1A  6F62               	movwf	___lwdiv@divisor& (0+255),b
 26947  013F1C  ECEA  F0A9         	call	___lwdiv	;wreg free
 26948  013F20  C060  F074         	movff	?___lwdiv,itos@Out
 26949  013F24  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 26950                           
 26951                           ;Types.c: 385: Length ++;
 26952  013F28  0100               	movlb	0	; () banked
 26953  013F2A  4B72               	infsnz	itos@Length& (0+255),f,b
 26954  013F2C  2B73               	incf	(itos@Length+1)& (0+255),f,b
 26955                           
 26956                           ; BSR set to: 0
 26957                           ;Types.c: 386: Data++;
 26958  013F2E  4B70               	infsnz	itos@Data& (0+255),f,b
 26959  013F30  2B71               	incf	(itos@Data+1)& (0+255),f,b
 26960  013F32                     l929:
 26961                           
 26962                           ; BSR set to: 0
 26963                           
 26964                           ; BSR set to: 0
 26965  013F32  5174               	movf	itos@Out& (0+255),w,b
 26966  013F34  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26967  013F36  B4D8               	btfsc	status,2,c
 26968  013F38  D006               	goto	u10800
 26969                           
 26970                           ; BSR set to: 0
 26971  013F3A  5173               	movf	(itos@Length+1)& (0+255),w,b
 26972  013F3C  E104               	bnz	l13459
 26973  013F3E  0E06               	movlw	6
 26974  013F40  5D72               	subwf	itos@Length& (0+255),w,b
 26975  013F42  A0D8               	btfss	status,0,c
 26976  013F44  D7D1               	goto	l930
 26977  013F46                     u10800:
 26978  013F46                     l13459:
 26979                           
 26980                           ; BSR set to: 0
 26981                           ;Types.c: 387: }
 26982                           ;Types.c: 388: reverse(destination, Length);
 26983  013F46  C06E  F060         	movff	itos@destination,reverse@input
 26984  013F4A  C06F  F061         	movff	itos@destination+1,reverse@input+1
 26985  013F4E  C072  F062         	movff	itos@Length,reverse@length
 26986  013F52  C073  F063         	movff	itos@Length+1,reverse@length+1
 26987  013F56  ECC0  F0A9         	call	_reverse	;wreg free
 26988  013F5A                     l928:
 26989                           
 26990                           ;Types.c: 389: }
 26991                           ;Types.c: 390: destination[Length] = '\0';
 26992  013F5A  0100               	movlb	0	; () banked
 26993  013F5C  5172               	movf	itos@Length& (0+255),w,b
 26994  013F5E  256E               	addwf	itos@destination& (0+255),w,b
 26995  013F60  6ED9               	movwf	fsr2l,c
 26996  013F62  5173               	movf	(itos@Length+1)& (0+255),w,b
 26997  013F64  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 26998  013F66  6EDA               	movwf	fsr2h,c
 26999  013F68  0E00               	movlw	0
 27000  013F6A  6EDF               	movwf	indf2,c
 27001                           
 27002                           ; BSR set to: 0
 27003  013F6C  0012               	return		;funcret
 27004  013F6E                     __end_of_itos:
 27005                           	opt stack 0
 27006                           tosu	equ	0xFFF
 27007                           tosh	equ	0xFFE
 27008                           tosl	equ	0xFFD
 27009                           pclath	equ	0xFFA
 27010                           tblptru	equ	0xFF8
 27011                           tblptrh	equ	0xFF7
 27012                           tblptrl	equ	0xFF6
 27013                           tablat	equ	0xFF5
 27014                           prodh	equ	0xFF4
 27015                           prodl	equ	0xFF3
 27016                           intcon	equ	0xFF2
 27017                           indf0	equ	0xFEF
 27018                           postinc0	equ	0xFEE
 27019                           fsr0h	equ	0xFEA
 27020                           fsr0l	equ	0xFE9
 27021                           wreg	equ	0xFE8
 27022                           indf1	equ	0xFE7
 27023                           postdec1	equ	0xFE5
 27024                           fsr1h	equ	0xFE2
 27025                           fsr1l	equ	0xFE1
 27026                           indf2	equ	0xFDF
 27027                           postinc2	equ	0xFDE
 27028                           postdec2	equ	0xFDD
 27029                           plusw2	equ	0xFDB
 27030                           fsr2h	equ	0xFDA
 27031                           fsr2l	equ	0xFD9
 27032                           status	equ	0xFD8
 27033                           
 27034 ;; *************** function _reverse *****************
 27035 ;; Defined at:
 27036 ;;		line 357 in file "Library/Types.c"
 27037 ;; Parameters:    Size  Location     Type
 27038 ;;  input           2    0[BANK0 ] PTR unsigned char 
 27039 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27040 ;;  length          2    2[BANK0 ] unsigned short 
 27041 ;; Auto vars:     Size  Location     Type
 27042 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 27043 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27044 ;;  tempVar         1    4[BANK0 ] unsigned char 
 27045 ;; Return value:  Size  Location     Type
 27046 ;;                  1    wreg      void 
 27047 ;; Registers used:
 27048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27049 ;; Tracked objects:
 27050 ;;		On entry : 0/0
 27051 ;;		On exit  : 0/0
 27052 ;;		Unchanged: 0/0
 27053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27054 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27055 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27057 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27058 ;;Total ram usage:        7 bytes
 27059 ;; Hardware stack levels used:    1
 27060 ;; Hardware stack levels required when called:    7
 27061 ;; This function calls:
 27062 ;;		Nothing
 27063 ;; This function is called by:
 27064 ;;		_itos
 27065 ;; This function uses a non-reentrant model
 27066 ;;
 27067                           
 27068                           	psect	text140
 27069  015380                     __ptext140:
 27070                           	opt stack 0
 27071  015380                     _reverse:
 27072                           	opt stack 19
 27073                           
 27074                           ;Types.c: 359: char tempVar,
 27075                           ;Types.c: 360: *iterator = input + length;
 27076                           
 27077                           ; BSR set to: 0
 27078                           ;incstack = 0
 27079  015380  0100               	movlb	0	; () banked
 27080  015382  5162               	movf	reverse@length& (0+255),w,b
 27081  015384  2560               	addwf	reverse@input& (0+255),w,b
 27082  015386  6F65               	movwf	reverse@iterator& (0+255),b
 27083  015388  5163               	movf	(reverse@length+1)& (0+255),w,b
 27084  01538A  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 27085  01538C  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 27086                           
 27087                           ;Types.c: 362: while ( --iterator > input )
 27088  01538E  D018               	goto	l921
 27089  015390                     
 27090                           ; BSR set to: 0
 27091                           ;Types.c: 363: {
 27092                           ;Types.c: 364: tempVar = *input;
 27093                           
 27094                           ; BSR set to: 0
 27095  015390  C060  FFD9         	movff	reverse@input,fsr2l
 27096  015394  C061  FFDA         	movff	reverse@input+1,fsr2h
 27097  015398  50DF               	movf	indf2,w,c
 27098  01539A  6F64               	movwf	reverse@tempVar& (0+255),b
 27099                           
 27100                           ; BSR set to: 0
 27101                           ;Types.c: 365: *input++=*iterator;
 27102  01539C  C065  FFD9         	movff	reverse@iterator,fsr2l
 27103  0153A0  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 27104  0153A4  C060  FFE1         	movff	reverse@input,fsr1l
 27105  0153A8  C061  FFE2         	movff	reverse@input+1,fsr1h
 27106  0153AC  CFDF FFE7          	movff	indf2,indf1
 27107                           
 27108                           ; BSR set to: 0
 27109  0153B0  4B60               	infsnz	reverse@input& (0+255),f,b
 27110  0153B2  2B61               	incf	(reverse@input+1)& (0+255),f,b
 27111                           
 27112                           ; BSR set to: 0
 27113                           ;Types.c: 366: *iterator=tempVar;
 27114  0153B4  C065  FFD9         	movff	reverse@iterator,fsr2l
 27115  0153B8  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 27116  0153BC  C064  FFDF         	movff	reverse@tempVar,indf2
 27117  0153C0                     l921:
 27118                           
 27119                           ; BSR set to: 0
 27120                           
 27121                           ; BSR set to: 0
 27122  0153C0  0765               	decf	reverse@iterator& (0+255),f,b
 27123  0153C2  A0D8               	btfss	status,0,c
 27124  0153C4  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 27125  0153C6  5165               	movf	reverse@iterator& (0+255),w,b
 27126  0153C8  5D60               	subwf	reverse@input& (0+255),w,b
 27127  0153CA  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 27128  0153CC  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 27129  0153CE  B0D8               	btfsc	status,0,c
 27130  0153D0  0012               	return	
 27131  0153D2  D7DE               	goto	l922
 27132  0153D4                     __end_of_reverse:
 27133                           	opt stack 0
 27134                           tosu	equ	0xFFF
 27135                           tosh	equ	0xFFE
 27136                           tosl	equ	0xFFD
 27137                           pclath	equ	0xFFA
 27138                           tblptru	equ	0xFF8
 27139                           tblptrh	equ	0xFF7
 27140                           tblptrl	equ	0xFF6
 27141                           tablat	equ	0xFF5
 27142                           prodh	equ	0xFF4
 27143                           prodl	equ	0xFF3
 27144                           intcon	equ	0xFF2
 27145                           indf0	equ	0xFEF
 27146                           postinc0	equ	0xFEE
 27147                           fsr0h	equ	0xFEA
 27148                           fsr0l	equ	0xFE9
 27149                           wreg	equ	0xFE8
 27150                           indf1	equ	0xFE7
 27151                           postdec1	equ	0xFE5
 27152                           fsr1h	equ	0xFE2
 27153                           fsr1l	equ	0xFE1
 27154                           indf2	equ	0xFDF
 27155                           postinc2	equ	0xFDE
 27156                           postdec2	equ	0xFDD
 27157                           plusw2	equ	0xFDB
 27158                           fsr2h	equ	0xFDA
 27159                           fsr2l	equ	0xFD9
 27160                           status	equ	0xFD8
 27161                           
 27162 ;; *************** function ___lwmod *****************
 27163 ;; Defined at:
 27164 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 27165 ;; Parameters:    Size  Location     Type
 27166 ;;  dividend        2    7[BANK0 ] unsigned int 
 27167 ;;  divisor         2    9[BANK0 ] unsigned int 
 27168 ;; Auto vars:     Size  Location     Type
 27169 ;;  counter         1   11[BANK0 ] unsigned char 
 27170 ;; Return value:  Size  Location     Type
 27171 ;;                  2    7[BANK0 ] unsigned int 
 27172 ;; Registers used:
 27173 ;;		wreg, status,2, status,0
 27174 ;; Tracked objects:
 27175 ;;		On entry : 0/0
 27176 ;;		On exit  : 0/0
 27177 ;;		Unchanged: 0/0
 27178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27179 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27182 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27183 ;;Total ram usage:        5 bytes
 27184 ;; Hardware stack levels used:    1
 27185 ;; Hardware stack levels required when called:    7
 27186 ;; This function calls:
 27187 ;;		Nothing
 27188 ;; This function is called by:
 27189 ;;		_itos
 27190 ;;		_printf
 27191 ;; This function uses a non-reentrant model
 27192 ;;
 27193                           
 27194                           	psect	text141
 27195  0157FC                     __ptext141:
 27196                           	opt stack 0
 27197  0157FC                     ___lwmod:
 27198                           	opt stack 22
 27199                           
 27200                           ; BSR set to: 0
 27201                           ;incstack = 0
 27202  0157FC  0100               	movlb	0	; () banked
 27203  0157FE  5169               	movf	___lwmod@divisor& (0+255),w,b
 27204  015800  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27205  015802  B4D8               	btfsc	status,2,c
 27206  015804  D018               	goto	l2741
 27207                           
 27208                           ; BSR set to: 0
 27209  015806  0E01               	movlw	1
 27210  015808  6F6B               	movwf	___lwmod@counter& (0+255),b
 27211  01580A  D004               	goto	l2736
 27212  01580C                     
 27213                           ; BSR set to: 0
 27214                           
 27215                           ; BSR set to: 0
 27216  01580C  90D8               	bcf	status,0,c
 27217  01580E  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 27218  015810  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27219  015812  2B6B               	incf	___lwmod@counter& (0+255),f,b
 27220  015814                     l2736:
 27221                           
 27222                           ; BSR set to: 0
 27223                           
 27224                           ; BSR set to: 0
 27225  015814  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27226  015816  D7FA               	goto	l2737
 27227  015818                     u10620:
 27228                           
 27229                           ; BSR set to: 0
 27230                           
 27231                           ; BSR set to: 0
 27232                           
 27233                           ; BSR set to: 0
 27234  015818  5169               	movf	___lwmod@divisor& (0+255),w,b
 27235  01581A  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 27236  01581C  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27237  01581E  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27238  015820  A0D8               	btfss	status,0,c
 27239  015822  D004               	goto	l2740
 27240                           
 27241                           ; BSR set to: 0
 27242  015824  5169               	movf	___lwmod@divisor& (0+255),w,b
 27243  015826  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 27244  015828  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27245  01582A  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27246  01582C                     l2740:
 27247                           
 27248                           ; BSR set to: 0
 27249                           
 27250                           ; BSR set to: 0
 27251  01582C  90D8               	bcf	status,0,c
 27252  01582E  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27253  015830  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 27254                           
 27255                           ; BSR set to: 0
 27256  015832  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 27257  015834  D7F1               	goto	u10620
 27258  015836                     l2741:
 27259                           
 27260                           ; BSR set to: 0
 27261                           
 27262                           ; BSR set to: 0
 27263  015836  C067  F067         	movff	___lwmod@dividend,?___lwmod
 27264  01583A  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 27265                           
 27266                           ; BSR set to: 0
 27267  01583E  0012               	return		;funcret
 27268  015840                     __end_of___lwmod:
 27269                           	opt stack 0
 27270                           tosu	equ	0xFFF
 27271                           tosh	equ	0xFFE
 27272                           tosl	equ	0xFFD
 27273                           pclath	equ	0xFFA
 27274                           tblptru	equ	0xFF8
 27275                           tblptrh	equ	0xFF7
 27276                           tblptrl	equ	0xFF6
 27277                           tablat	equ	0xFF5
 27278                           prodh	equ	0xFF4
 27279                           prodl	equ	0xFF3
 27280                           intcon	equ	0xFF2
 27281                           indf0	equ	0xFEF
 27282                           postinc0	equ	0xFEE
 27283                           fsr0h	equ	0xFEA
 27284                           fsr0l	equ	0xFE9
 27285                           wreg	equ	0xFE8
 27286                           indf1	equ	0xFE7
 27287                           postdec1	equ	0xFE5
 27288                           fsr1h	equ	0xFE2
 27289                           fsr1l	equ	0xFE1
 27290                           indf2	equ	0xFDF
 27291                           postinc2	equ	0xFDE
 27292                           postdec2	equ	0xFDD
 27293                           plusw2	equ	0xFDB
 27294                           fsr2h	equ	0xFDA
 27295                           fsr2l	equ	0xFD9
 27296                           status	equ	0xFD8
 27297                           
 27298 ;; *************** function ___lwdiv *****************
 27299 ;; Defined at:
 27300 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 27301 ;; Parameters:    Size  Location     Type
 27302 ;;  dividend        2    0[BANK0 ] unsigned int 
 27303 ;;  divisor         2    2[BANK0 ] unsigned int 
 27304 ;; Auto vars:     Size  Location     Type
 27305 ;;  quotient        2    5[BANK0 ] unsigned int 
 27306 ;;  counter         1    4[BANK0 ] unsigned char 
 27307 ;; Return value:  Size  Location     Type
 27308 ;;                  2    0[BANK0 ] unsigned int 
 27309 ;; Registers used:
 27310 ;;		wreg, status,2, status,0
 27311 ;; Tracked objects:
 27312 ;;		On entry : 0/0
 27313 ;;		On exit  : 0/0
 27314 ;;		Unchanged: 0/0
 27315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27316 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27317 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27319 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27320 ;;Total ram usage:        7 bytes
 27321 ;; Hardware stack levels used:    1
 27322 ;; Hardware stack levels required when called:    7
 27323 ;; This function calls:
 27324 ;;		Nothing
 27325 ;; This function is called by:
 27326 ;;		_itos
 27327 ;;		_printf
 27328 ;; This function uses a non-reentrant model
 27329 ;;
 27330                           
 27331                           	psect	text142
 27332  0153D4                     __ptext142:
 27333                           	opt stack 0
 27334  0153D4                     ___lwdiv:
 27335                           	opt stack 22
 27336                           
 27337                           ; BSR set to: 0
 27338                           ;incstack = 0
 27339  0153D4  0E00               	movlw	0
 27340  0153D6  0100               	movlb	0	; () banked
 27341  0153D8  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27342  0153DA  0E00               	movlw	0
 27343  0153DC  6F65               	movwf	___lwdiv@quotient& (0+255),b
 27344                           
 27345                           ; BSR set to: 0
 27346  0153DE  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27347  0153E0  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27348  0153E2  B4D8               	btfsc	status,2,c
 27349  0153E4  D01C               	goto	l2731
 27350                           
 27351                           ; BSR set to: 0
 27352  0153E6  0E01               	movlw	1
 27353  0153E8  6F64               	movwf	___lwdiv@counter& (0+255),b
 27354  0153EA  D004               	goto	l2726
 27355  0153EC                     
 27356                           ; BSR set to: 0
 27357                           
 27358                           ; BSR set to: 0
 27359  0153EC  90D8               	bcf	status,0,c
 27360  0153EE  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 27361  0153F0  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27362  0153F2  2B64               	incf	___lwdiv@counter& (0+255),f,b
 27363  0153F4                     l2726:
 27364                           
 27365                           ; BSR set to: 0
 27366                           
 27367                           ; BSR set to: 0
 27368  0153F4  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27369  0153F6  D7FA               	goto	l2727
 27370  0153F8                     u10590:
 27371                           
 27372                           ; BSR set to: 0
 27373                           
 27374                           ; BSR set to: 0
 27375                           
 27376                           ; BSR set to: 0
 27377  0153F8  90D8               	bcf	status,0,c
 27378  0153FA  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 27379  0153FC  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27380                           
 27381                           ; BSR set to: 0
 27382  0153FE  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27383  015400  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 27384  015402  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27385  015404  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27386  015406  A0D8               	btfss	status,0,c
 27387  015408  D005               	goto	l2730
 27388                           
 27389                           ; BSR set to: 0
 27390  01540A  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27391  01540C  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 27392  01540E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27393  015410  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27394                           
 27395                           ; BSR set to: 0
 27396  015412  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 27397  015414                     l2730:
 27398                           
 27399                           ; BSR set to: 0
 27400                           
 27401                           ; BSR set to: 0
 27402  015414  90D8               	bcf	status,0,c
 27403  015416  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27404  015418  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 27405                           
 27406                           ; BSR set to: 0
 27407  01541A  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 27408  01541C  D7ED               	goto	u10590
 27409  01541E                     l2731:
 27410                           
 27411                           ; BSR set to: 0
 27412                           
 27413                           ; BSR set to: 0
 27414  01541E  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 27415  015422  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27416                           
 27417                           ; BSR set to: 0
 27418  015426  0012               	return		;funcret
 27419  015428                     __end_of___lwdiv:
 27420                           	opt stack 0
 27421                           tosu	equ	0xFFF
 27422                           tosh	equ	0xFFE
 27423                           tosl	equ	0xFFD
 27424                           pclath	equ	0xFFA
 27425                           tblptru	equ	0xFF8
 27426                           tblptrh	equ	0xFF7
 27427                           tblptrl	equ	0xFF6
 27428                           tablat	equ	0xFF5
 27429                           prodh	equ	0xFF4
 27430                           prodl	equ	0xFF3
 27431                           intcon	equ	0xFF2
 27432                           indf0	equ	0xFEF
 27433                           postinc0	equ	0xFEE
 27434                           fsr0h	equ	0xFEA
 27435                           fsr0l	equ	0xFE9
 27436                           wreg	equ	0xFE8
 27437                           indf1	equ	0xFE7
 27438                           postdec1	equ	0xFE5
 27439                           fsr1h	equ	0xFE2
 27440                           fsr1l	equ	0xFE1
 27441                           indf2	equ	0xFDF
 27442                           postinc2	equ	0xFDE
 27443                           postdec2	equ	0xFDD
 27444                           plusw2	equ	0xFDB
 27445                           fsr2h	equ	0xFDA
 27446                           fsr2l	equ	0xFD9
 27447                           status	equ	0xFD8
 27448                           
 27449 ;; *************** function _HMI_SetSegments *****************
 27450 ;; Defined at:
 27451 ;;		line 226 in file "HMI.c"
 27452 ;; Parameters:    Size  Location     Type
 27453 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27454 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27455 ;; Auto vars:     Size  Location     Type
 27456 ;;  in              2    4[BANK0 ] unsigned short 
 27457 ;; Return value:  Size  Location     Type
 27458 ;;                  1    wreg      void 
 27459 ;; Registers used:
 27460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27461 ;; Tracked objects:
 27462 ;;		On entry : 0/0
 27463 ;;		On exit  : 0/0
 27464 ;;		Unchanged: 0/0
 27465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27468 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27469 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27470 ;;Total ram usage:        5 bytes
 27471 ;; Hardware stack levels used:    1
 27472 ;; Hardware stack levels required when called:    8
 27473 ;; This function calls:
 27474 ;;		_ToSegment
 27475 ;; This function is called by:
 27476 ;;		_HMI_SetNumber
 27477 ;; This function uses a non-reentrant model
 27478 ;;
 27479                           
 27480                           	psect	text143
 27481  01436A                     __ptext143:
 27482                           	opt stack 0
 27483  01436A                     _HMI_SetSegments:
 27484                           	opt stack 19
 27485                           
 27486                           ;HMI.c: 228: UINT16 in=0;
 27487                           
 27488                           ; BSR set to: 0
 27489                           ;incstack = 0
 27490  01436A  0E00               	movlw	0
 27491  01436C  0100               	movlb	0	; () banked
 27492  01436E  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27493  014370  0E00               	movlw	0
 27494  014372  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 27495                           
 27496                           ;HMI.c: 229: while(*pString)
 27497  014374  D02E               	goto	l1202
 27498  014376                     
 27499                           ; BSR set to: 0
 27500                           ;HMI.c: 230: {
 27501                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27502                           
 27503                           ; BSR set to: 0
 27504  014376  0E44               	movlw	low _HMIBoard
 27505  014378  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27506  01437A  6ED9               	movwf	fsr2l,c
 27507  01437C  0E01               	movlw	high _HMIBoard
 27508  01437E  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27509  014380  6EDA               	movwf	fsr2h,c
 27510  014382  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27511  014386  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27512  01438A  50E7               	movf	indf1,w,c
 27513  01438C  EC0F  F08D         	call	_ToSegment
 27514  014390  6EDF               	movwf	indf2,c
 27515                           
 27516                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27517  014392  0E44               	movlw	low _HMIBoard
 27518  014394  0100               	movlb	0	; () banked
 27519  014396  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27520  014398  6ED9               	movwf	fsr2l,c
 27521  01439A  0E01               	movlw	high _HMIBoard
 27522  01439C  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27523  01439E  6EDA               	movwf	fsr2h,c
 27524  0143A0  0E80               	movlw	128
 27525  0143A2  18DE               	xorwf	postinc2,w,c
 27526  0143A4  A4D8               	btfss	status,2,c
 27527  0143A6  D00B               	goto	l1201
 27528                           
 27529                           ; BSR set to: 0
 27530                           ;HMI.c: 234: {
 27531                           ;HMI.c: 235: in--;
 27532  0143A8  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 27533  0143AA  A0D8               	btfss	status,0,c
 27534  0143AC  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27535                           
 27536                           ; BSR set to: 0
 27537                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27538  0143AE  0E44               	movlw	low _HMIBoard
 27539  0143B0  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27540  0143B2  6ED9               	movwf	fsr2l,c
 27541  0143B4  0E01               	movlw	high _HMIBoard
 27542  0143B6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27543  0143B8  6EDA               	movwf	fsr2h,c
 27544  0143BA  0E00               	movlw	0
 27545  0143BC  8EDB               	bsf	plusw2,7,c
 27546  0143BE                     l1201:
 27547                           
 27548                           ; BSR set to: 0
 27549                           ;HMI.c: 237: }
 27550                           ;HMI.c: 239: pString++;
 27551                           
 27552                           ; BSR set to: 0
 27553  0143BE  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27554  0143C0  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27555                           
 27556                           ; BSR set to: 0
 27557                           ;HMI.c: 240: in++;
 27558  0143C2  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27559  0143C4  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27560                           
 27561                           ; BSR set to: 0
 27562                           ;HMI.c: 241: if (in>=6)
 27563  0143C6  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27564  0143C8  E116               	bnz	l13521
 27565  0143CA  0E06               	movlw	6
 27566  0143CC  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27567  0143CE  B0D8               	btfsc	status,0,c
 27568  0143D0  D012               	goto	l1204
 27569  0143D2                     l1202:
 27570                           
 27571                           ; BSR set to: 0
 27572                           
 27573                           ; BSR set to: 0
 27574                           
 27575                           ; BSR set to: 0
 27576  0143D2  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27577  0143D6  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27578  0143DA  50DF               	movf	indf2,w,c
 27579  0143DC  B4D8               	btfsc	status,2,c
 27580  0143DE  D00B               	goto	l1204
 27581  0143E0  D7CA               	goto	l1200
 27582  0143E2                     
 27583                           ; BSR set to: 0
 27584                           ;HMI.c: 245: {
 27585                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27586                           
 27587                           ; BSR set to: 0
 27588  0143E2  0E44               	movlw	low _HMIBoard
 27589  0143E4  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27590  0143E6  6ED9               	movwf	fsr2l,c
 27591  0143E8  0E01               	movlw	high _HMIBoard
 27592  0143EA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27593  0143EC  6EDA               	movwf	fsr2h,c
 27594  0143EE  0E00               	movlw	0
 27595  0143F0  6EDF               	movwf	indf2,c
 27596                           
 27597                           ; BSR set to: 0
 27598                           ;HMI.c: 247: in++;
 27599  0143F2  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27600  0143F4  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27601  0143F6                     l1204:
 27602  0143F6                     l13521:
 27603                           
 27604                           ; BSR set to: 0
 27605  0143F6  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27606  0143F8  E105               	bnz	l1207
 27607  0143FA  0E06               	movlw	6
 27608  0143FC  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27609  0143FE  B0D8               	btfsc	status,0,c
 27610  014400  0012               	return	
 27611  014402  D7EF               	goto	l1205
 27612  014404                     l1207:
 27613                           
 27614                           ; BSR set to: 0
 27615  014404  0012               	return		;funcret
 27616  014406                     __end_of_HMI_SetSegments:
 27617                           	opt stack 0
 27618                           tosu	equ	0xFFF
 27619                           tosh	equ	0xFFE
 27620                           tosl	equ	0xFFD
 27621                           pclath	equ	0xFFA
 27622                           tblptru	equ	0xFF8
 27623                           tblptrh	equ	0xFF7
 27624                           tblptrl	equ	0xFF6
 27625                           tablat	equ	0xFF5
 27626                           prodh	equ	0xFF4
 27627                           prodl	equ	0xFF3
 27628                           intcon	equ	0xFF2
 27629                           indf0	equ	0xFEF
 27630                           postinc0	equ	0xFEE
 27631                           fsr0h	equ	0xFEA
 27632                           fsr0l	equ	0xFE9
 27633                           wreg	equ	0xFE8
 27634                           indf1	equ	0xFE7
 27635                           postdec1	equ	0xFE5
 27636                           fsr1h	equ	0xFE2
 27637                           fsr1l	equ	0xFE1
 27638                           indf2	equ	0xFDF
 27639                           postinc2	equ	0xFDE
 27640                           postdec2	equ	0xFDD
 27641                           plusw2	equ	0xFDB
 27642                           fsr2h	equ	0xFDA
 27643                           fsr2l	equ	0xFD9
 27644                           status	equ	0xFD8
 27645                           
 27646 ;; *************** function _ToSegment *****************
 27647 ;; Defined at:
 27648 ;;		line 284 in file "Library/Types.c"
 27649 ;; Parameters:    Size  Location     Type
 27650 ;;  pCHR            1    wreg     unsigned char 
 27651 ;; Auto vars:     Size  Location     Type
 27652 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27653 ;; Return value:  Size  Location     Type
 27654 ;;                  1    wreg      unsigned char 
 27655 ;; Registers used:
 27656 ;;		wreg, status,2, status,0
 27657 ;; Tracked objects:
 27658 ;;		On entry : 0/0
 27659 ;;		On exit  : 0/0
 27660 ;;		Unchanged: 0/0
 27661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27665 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27666 ;;Total ram usage:        1 bytes
 27667 ;; Hardware stack levels used:    1
 27668 ;; Hardware stack levels required when called:    7
 27669 ;; This function calls:
 27670 ;;		Nothing
 27671 ;; This function is called by:
 27672 ;;		_HMI_SetSegments
 27673 ;; This function uses a non-reentrant model
 27674 ;;
 27675                           
 27676                           	psect	text144
 27677  011A1E                     __ptext144:
 27678                           	opt stack 0
 27679  011A1E                     _ToSegment:
 27680                           	opt stack 19
 27681                           
 27682                           ; BSR set to: 0
 27683                           ;incstack = 0
 27684                           ;ToSegment@pCHR stored from wreg
 27685  011A1E  0100               	movlb	0	; () banked
 27686  011A20  6F60               	movwf	ToSegment@pCHR& (0+255),b
 27687                           
 27688                           ;Types.c: 286: switch(pCHR)
 27689  011A22  D07E               	goto	l853
 27690  011A24  0E3F               	movlw	63
 27691  011A26  0012               	return	
 27692  011A28  0E06               	movlw	6
 27693  011A2A  0012               	return	
 27694  011A2C  0E5B               	movlw	91
 27695  011A2E  0012               	return	
 27696  011A30  0E4F               	movlw	79
 27697  011A32  0012               	return	
 27698  011A34  0E66               	movlw	102
 27699  011A36  0012               	return	
 27700  011A38  0E6D               	movlw	109
 27701  011A3A  0012               	return	
 27702  011A3C  0E7D               	movlw	125
 27703  011A3E  0012               	return	
 27704  011A40  0E07               	movlw	7
 27705  011A42  0012               	return	
 27706  011A44  0E7F               	movlw	127
 27707  011A46  0012               	return	
 27708  011A48  0E6F               	movlw	111
 27709  011A4A  0012               	return	
 27710  011A4C  0E5F               	movlw	95
 27711  011A4E  0012               	return	
 27712  011A50  0E7C               	movlw	124
 27713  011A52  0012               	return	
 27714  011A54  0E58               	movlw	88
 27715  011A56  0012               	return	
 27716  011A58  0E5E               	movlw	94
 27717  011A5A  0012               	return	
 27718  011A5C  0E7B               	movlw	123
 27719  011A5E  0012               	return	
 27720  011A60  0E71               	movlw	113
 27721  011A62  0012               	return	
 27722  011A64  0E6F               	movlw	111
 27723  011A66  0012               	return	
 27724  011A68  0E74               	movlw	116
 27725  011A6A  0012               	return	
 27726  011A6C  0E04               	movlw	4
 27727  011A6E  0012               	return	
 27728  011A70  0E0E               	movlw	14
 27729  011A72  0012               	return	
 27730  011A74  0E7A               	movlw	122
 27731  011A76  0012               	return	
 27732  011A78  0E06               	movlw	6
 27733  011A7A  0012               	return	
 27734  011A7C  0E14               	movlw	20
 27735  011A7E  0012               	return	
 27736  011A80  0E54               	movlw	84
 27737  011A82  0012               	return	
 27738  011A84  0E5C               	movlw	92
 27739  011A86  0012               	return	
 27740  011A88  0E73               	movlw	115
 27741  011A8A  0012               	return	
 27742  011A8C  0E67               	movlw	103
 27743  011A8E  0012               	return	
 27744  011A90  0E50               	movlw	80
 27745  011A92  0012               	return	
 27746  011A94  0E6D               	movlw	109
 27747  011A96  0012               	return	
 27748  011A98  0E78               	movlw	120
 27749  011A9A  0012               	return	
 27750  011A9C  0E1C               	movlw	28
 27751  011A9E  0012               	return	
 27752  011AA0  0E62               	movlw	98
 27753  011AA2  0012               	return	
 27754  011AA4  0E2A               	movlw	42
 27755  011AA6  0012               	return	
 27756  011AA8  0E64               	movlw	100
 27757  011AAA  0012               	return	
 27758  011AAC  0E6E               	movlw	110
 27759  011AAE  0012               	return	
 27760  011AB0  0E5B               	movlw	91
 27761  011AB2  0012               	return	
 27762  011AB4  0E77               	movlw	119
 27763  011AB6  0012               	return	
 27764  011AB8  0E7F               	movlw	127
 27765  011ABA  0012               	return	
 27766  011ABC  0E39               	movlw	57
 27767  011ABE  0012               	return	
 27768  011AC0  0E3F               	movlw	63
 27769  011AC2  0012               	return	
 27770  011AC4  0E79               	movlw	121
 27771  011AC6  0012               	return	
 27772  011AC8  0E71               	movlw	113
 27773  011ACA  0012               	return	
 27774  011ACC  0E3D               	movlw	61
 27775  011ACE  0012               	return	
 27776  011AD0  0E76               	movlw	118
 27777  011AD2  0012               	return	
 27778  011AD4  0E06               	movlw	6
 27779  011AD6  0012               	return	
 27780  011AD8  0E1E               	movlw	30
 27781  011ADA  0012               	return	
 27782  011ADC  0E57               	movlw	87
 27783  011ADE  0012               	return	
 27784  011AE0  0E38               	movlw	56
 27785  011AE2  0012               	return	
 27786  011AE4  0E76               	movlw	118
 27787  011AE6  0012               	return	
 27788  011AE8  0E76               	movlw	118
 27789  011AEA  0012               	return	
 27790  011AEC  0E3F               	movlw	63
 27791  011AEE  0012               	return	
 27792  011AF0  0E73               	movlw	115
 27793  011AF2  0012               	return	
 27794  011AF4  0E3F               	movlw	63
 27795  011AF6  0012               	return	
 27796  011AF8  0E77               	movlw	119
 27797  011AFA  0012               	return	
 27798  011AFC  0E6D               	movlw	109
 27799  011AFE  0012               	return	
 27800  011B00  0E31               	movlw	49
 27801  011B02  0012               	return	
 27802  011B04  0E3E               	movlw	62
 27803  011B06  0012               	return	
 27804  011B08  0E3E               	movlw	62
 27805  011B0A  0012               	return	
 27806  011B0C  0E7E               	movlw	126
 27807  011B0E  0012               	return	
 27808  011B10  0E76               	movlw	118
 27809  011B12  0012               	return	
 27810  011B14  0E66               	movlw	102
 27811  011B16  0012               	return	
 27812  011B18  0E5B               	movlw	91
 27813  011B1A  0012               	return	
 27814  011B1C  0E80               	movlw	128
 27815  011B1E  0012               	return	
 27816  011B20                     l853:
 27817  011B20  0100               	movlb	0	; () banked
 27818  011B22  5160               	movf	ToSegment@pCHR& (0+255),w,b
 27819                           
 27820                           ; Switch size 1, requested type "space"
 27821                           ; Number of cases is 63, Range of values is 46 to 122
 27822                           ; switch strategies available:
 27823                           ; Name         Instructions Cycles
 27824                           ; simple_byte          190    96 (average)
 27825                           ;	Chosen strategy is simple_byte
 27826  011B24  0A2E               	xorlw	46	; case 46
 27827  011B26  B4D8               	btfsc	status,2,c
 27828  011B28  D7F9               	goto	l917
 27829  011B2A  0A1E               	xorlw	30	; case 48
 27830  011B2C  B4D8               	btfsc	status,2,c
 27831  011B2E  D77A               	goto	l854
 27832  011B30  0A01               	xorlw	1	; case 49
 27833  011B32  B4D8               	btfsc	status,2,c
 27834  011B34  D779               	goto	l856
 27835  011B36  0A03               	xorlw	3	; case 50
 27836  011B38  B4D8               	btfsc	status,2,c
 27837  011B3A  D778               	goto	l857
 27838  011B3C  0A01               	xorlw	1	; case 51
 27839  011B3E  B4D8               	btfsc	status,2,c
 27840  011B40  D777               	goto	l858
 27841  011B42  0A07               	xorlw	7	; case 52
 27842  011B44  B4D8               	btfsc	status,2,c
 27843  011B46  D776               	goto	l859
 27844  011B48  0A01               	xorlw	1	; case 53
 27845  011B4A  B4D8               	btfsc	status,2,c
 27846  011B4C  D775               	goto	l860
 27847  011B4E  0A03               	xorlw	3	; case 54
 27848  011B50  B4D8               	btfsc	status,2,c
 27849  011B52  D774               	goto	l861
 27850  011B54  0A01               	xorlw	1	; case 55
 27851  011B56  B4D8               	btfsc	status,2,c
 27852  011B58  D773               	goto	l862
 27853  011B5A  0A0F               	xorlw	15	; case 56
 27854  011B5C  B4D8               	btfsc	status,2,c
 27855  011B5E  D772               	goto	l863
 27856  011B60  0A01               	xorlw	1	; case 57
 27857  011B62  B4D8               	btfsc	status,2,c
 27858  011B64  D771               	goto	l864
 27859  011B66  0A78               	xorlw	120	; case 65
 27860  011B68  B4D8               	btfsc	status,2,c
 27861  011B6A  D7A4               	goto	l891
 27862  011B6C  0A03               	xorlw	3	; case 66
 27863  011B6E  B4D8               	btfsc	status,2,c
 27864  011B70  D7A3               	goto	l892
 27865  011B72  0A01               	xorlw	1	; case 67
 27866  011B74  B4D8               	btfsc	status,2,c
 27867  011B76  D7A2               	goto	l893
 27868  011B78  0A07               	xorlw	7	; case 68
 27869  011B7A  B4D8               	btfsc	status,2,c
 27870  011B7C  D7A1               	goto	l894
 27871  011B7E  0A01               	xorlw	1	; case 69
 27872  011B80  B4D8               	btfsc	status,2,c
 27873  011B82  D7A0               	goto	l895
 27874  011B84  0A03               	xorlw	3	; case 70
 27875  011B86  B4D8               	btfsc	status,2,c
 27876  011B88  D79F               	goto	l896
 27877  011B8A  0A01               	xorlw	1	; case 71
 27878  011B8C  B4D8               	btfsc	status,2,c
 27879  011B8E  D79E               	goto	l897
 27880  011B90  0A0F               	xorlw	15	; case 72
 27881  011B92  B4D8               	btfsc	status,2,c
 27882  011B94  D79D               	goto	l898
 27883  011B96  0A01               	xorlw	1	; case 73
 27884  011B98  B4D8               	btfsc	status,2,c
 27885  011B9A  D79C               	goto	l899
 27886  011B9C  0A03               	xorlw	3	; case 74
 27887  011B9E  B4D8               	btfsc	status,2,c
 27888  011BA0  D79B               	goto	l900
 27889  011BA2  0A01               	xorlw	1	; case 75
 27890  011BA4  B4D8               	btfsc	status,2,c
 27891  011BA6  D79A               	goto	l901
 27892  011BA8  0A07               	xorlw	7	; case 76
 27893  011BAA  B4D8               	btfsc	status,2,c
 27894  011BAC  D799               	goto	l902
 27895  011BAE  0A01               	xorlw	1	; case 77
 27896  011BB0  B4D8               	btfsc	status,2,c
 27897  011BB2  D798               	goto	l903
 27898  011BB4  0A03               	xorlw	3	; case 78
 27899  011BB6  B4D8               	btfsc	status,2,c
 27900  011BB8  D797               	goto	l904
 27901  011BBA  0A01               	xorlw	1	; case 79
 27902  011BBC  B4D8               	btfsc	status,2,c
 27903  011BBE  D796               	goto	l905
 27904  011BC0  0A1F               	xorlw	31	; case 80
 27905  011BC2  B4D8               	btfsc	status,2,c
 27906  011BC4  D795               	goto	l906
 27907  011BC6  0A01               	xorlw	1	; case 81
 27908  011BC8  B4D8               	btfsc	status,2,c
 27909  011BCA  D794               	goto	l907
 27910  011BCC  0A03               	xorlw	3	; case 82
 27911  011BCE  B4D8               	btfsc	status,2,c
 27912  011BD0  D793               	goto	l908
 27913  011BD2  0A01               	xorlw	1	; case 83
 27914  011BD4  B4D8               	btfsc	status,2,c
 27915  011BD6  D792               	goto	l909
 27916  011BD8  0A07               	xorlw	7	; case 84
 27917  011BDA  B4D8               	btfsc	status,2,c
 27918  011BDC  D791               	goto	l910
 27919  011BDE  0A01               	xorlw	1	; case 85
 27920  011BE0  B4D8               	btfsc	status,2,c
 27921  011BE2  D790               	goto	l911
 27922  011BE4  0A03               	xorlw	3	; case 86
 27923  011BE6  B4D8               	btfsc	status,2,c
 27924  011BE8  D78F               	goto	l912
 27925  011BEA  0A01               	xorlw	1	; case 87
 27926  011BEC  B4D8               	btfsc	status,2,c
 27927  011BEE  D78E               	goto	l913
 27928  011BF0  0A0F               	xorlw	15	; case 88
 27929  011BF2  B4D8               	btfsc	status,2,c
 27930  011BF4  D78D               	goto	l914
 27931  011BF6  0A01               	xorlw	1	; case 89
 27932  011BF8  B4D8               	btfsc	status,2,c
 27933  011BFA  D78C               	goto	l915
 27934  011BFC  0A03               	xorlw	3	; case 90
 27935  011BFE  B4D8               	btfsc	status,2,c
 27936  011C00  D78B               	goto	l916
 27937  011C02  0A3B               	xorlw	59	; case 97
 27938  011C04  B4D8               	btfsc	status,2,c
 27939  011C06  D722               	goto	l865
 27940  011C08  0A03               	xorlw	3	; case 98
 27941  011C0A  B4D8               	btfsc	status,2,c
 27942  011C0C  D721               	goto	l866
 27943  011C0E  0A01               	xorlw	1	; case 99
 27944  011C10  B4D8               	btfsc	status,2,c
 27945  011C12  D720               	goto	l867
 27946  011C14  0A07               	xorlw	7	; case 100
 27947  011C16  B4D8               	btfsc	status,2,c
 27948  011C18  D71F               	goto	l868
 27949  011C1A  0A01               	xorlw	1	; case 101
 27950  011C1C  B4D8               	btfsc	status,2,c
 27951  011C1E  D71E               	goto	l869
 27952  011C20  0A03               	xorlw	3	; case 102
 27953  011C22  B4D8               	btfsc	status,2,c
 27954  011C24  D71D               	goto	l870
 27955  011C26  0A01               	xorlw	1	; case 103
 27956  011C28  B4D8               	btfsc	status,2,c
 27957  011C2A  D71C               	goto	l871
 27958  011C2C  0A0F               	xorlw	15	; case 104
 27959  011C2E  B4D8               	btfsc	status,2,c
 27960  011C30  D71B               	goto	l872
 27961  011C32  0A01               	xorlw	1	; case 105
 27962  011C34  B4D8               	btfsc	status,2,c
 27963  011C36  D71A               	goto	l873
 27964  011C38  0A03               	xorlw	3	; case 106
 27965  011C3A  B4D8               	btfsc	status,2,c
 27966  011C3C  D719               	goto	l874
 27967  011C3E  0A01               	xorlw	1	; case 107
 27968  011C40  B4D8               	btfsc	status,2,c
 27969  011C42  D718               	goto	l875
 27970  011C44  0A07               	xorlw	7	; case 108
 27971  011C46  B4D8               	btfsc	status,2,c
 27972  011C48  D717               	goto	l876
 27973  011C4A  0A01               	xorlw	1	; case 109
 27974  011C4C  B4D8               	btfsc	status,2,c
 27975  011C4E  D716               	goto	l877
 27976  011C50  0A03               	xorlw	3	; case 110
 27977  011C52  B4D8               	btfsc	status,2,c
 27978  011C54  D715               	goto	l878
 27979  011C56  0A01               	xorlw	1	; case 111
 27980  011C58  B4D8               	btfsc	status,2,c
 27981  011C5A  D714               	goto	l879
 27982  011C5C  0A1F               	xorlw	31	; case 112
 27983  011C5E  B4D8               	btfsc	status,2,c
 27984  011C60  D713               	goto	l880
 27985  011C62  0A01               	xorlw	1	; case 113
 27986  011C64  B4D8               	btfsc	status,2,c
 27987  011C66  D712               	goto	l881
 27988  011C68  0A03               	xorlw	3	; case 114
 27989  011C6A  B4D8               	btfsc	status,2,c
 27990  011C6C  D711               	goto	l882
 27991  011C6E  0A01               	xorlw	1	; case 115
 27992  011C70  B4D8               	btfsc	status,2,c
 27993  011C72  D710               	goto	l883
 27994  011C74  0A07               	xorlw	7	; case 116
 27995  011C76  B4D8               	btfsc	status,2,c
 27996  011C78  D70F               	goto	l884
 27997  011C7A  0A01               	xorlw	1	; case 117
 27998  011C7C  B4D8               	btfsc	status,2,c
 27999  011C7E  D70E               	goto	l885
 28000  011C80  0A03               	xorlw	3	; case 118
 28001  011C82  B4D8               	btfsc	status,2,c
 28002  011C84  D70D               	goto	l886
 28003  011C86  0A01               	xorlw	1	; case 119
 28004  011C88  B4D8               	btfsc	status,2,c
 28005  011C8A  D70C               	goto	l887
 28006  011C8C  0A0F               	xorlw	15	; case 120
 28007  011C8E  B4D8               	btfsc	status,2,c
 28008  011C90  D70B               	goto	l888
 28009  011C92  0A01               	xorlw	1	; case 121
 28010  011C94  B4D8               	btfsc	status,2,c
 28011  011C96  D70A               	goto	l889
 28012  011C98  0A03               	xorlw	3	; case 122
 28013  011C9A  B4D8               	btfsc	status,2,c
 28014  011C9C  D709               	goto	l890
 28015                           
 28016                           ;Types.c: 354: return 0;
 28017                           
 28018                           ; BSR set to: 0
 28019  011C9E  0E00               	movlw	0
 28020  011CA0  0012               	return	
 28021  011CA2                     __end_of_ToSegment:
 28022                           	opt stack 0
 28023                           tosu	equ	0xFFF
 28024                           tosh	equ	0xFFE
 28025                           tosl	equ	0xFFD
 28026                           pclath	equ	0xFFA
 28027                           tblptru	equ	0xFF8
 28028                           tblptrh	equ	0xFF7
 28029                           tblptrl	equ	0xFF6
 28030                           tablat	equ	0xFF5
 28031                           prodh	equ	0xFF4
 28032                           prodl	equ	0xFF3
 28033                           intcon	equ	0xFF2
 28034                           indf0	equ	0xFEF
 28035                           postinc0	equ	0xFEE
 28036                           fsr0h	equ	0xFEA
 28037                           fsr0l	equ	0xFE9
 28038                           wreg	equ	0xFE8
 28039                           indf1	equ	0xFE7
 28040                           postdec1	equ	0xFE5
 28041                           fsr1h	equ	0xFE2
 28042                           fsr1l	equ	0xFE1
 28043                           indf2	equ	0xFDF
 28044                           postinc2	equ	0xFDE
 28045                           postdec2	equ	0xFDD
 28046                           plusw2	equ	0xFDB
 28047                           fsr2h	equ	0xFDA
 28048                           fsr2l	equ	0xFD9
 28049                           status	equ	0xFD8
 28050                           
 28051 ;; *************** function _HMI_Render *****************
 28052 ;; Defined at:
 28053 ;;		line 138 in file "HMI.c"
 28054 ;; Parameters:    Size  Location     Type
 28055 ;;		None
 28056 ;; Auto vars:     Size  Location     Type
 28057 ;;  a               2    8[BANK0 ] unsigned short 
 28058 ;; Return value:  Size  Location     Type
 28059 ;;                  1    wreg      void 
 28060 ;; Registers used:
 28061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28062 ;; Tracked objects:
 28063 ;;		On entry : 0/0
 28064 ;;		On exit  : 0/0
 28065 ;;		Unchanged: 0/0
 28066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28068 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28070 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28071 ;;Total ram usage:        2 bytes
 28072 ;; Hardware stack levels used:    1
 28073 ;; Hardware stack levels required when called:    9
 28074 ;; This function calls:
 28075 ;;		_OutSeg
 28076 ;; This function is called by:
 28077 ;;		_ADCAverage
 28078 ;;		_main
 28079 ;; This function uses a non-reentrant model
 28080 ;;
 28081                           
 28082                           	psect	text145
 28083  015A9E                     __ptext145:
 28084                           	opt stack 0
 28085  015A9E                     _HMI_Render:
 28086                           	opt stack 19
 28087                           
 28088                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 28089                           
 28090                           ;incstack = 0
 28091  015A9E  0E00               	movlw	0
 28092  015AA0  0100               	movlb	0	; () banked
 28093  015AA2  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 28094  015AA4  0E00               	movlw	0
 28095  015AA6  6F68               	movwf	HMI_Render@a& (0+255),b
 28096  015AA8                     l14493:
 28097                           
 28098                           ; BSR set to: 0
 28099  015AA8  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 28100  015AAA  E113               	bnz	l1158
 28101  015AAC  0E08               	movlw	8
 28102  015AAE  5D68               	subwf	HMI_Render@a& (0+255),w,b
 28103  015AB0  B0D8               	btfsc	status,0,c
 28104  015AB2  0012               	return	
 28105                           
 28106                           ; BSR set to: 0
 28107                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 28108                           
 28109                           ; BSR set to: 0
 28110                           
 28111                           ; BSR set to: 0
 28112  015AB4  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 28113  015AB8  0E44               	movlw	low _HMIBoard
 28114  015ABA  2568               	addwf	HMI_Render@a& (0+255),w,b
 28115  015ABC  6ED9               	movwf	fsr2l,c
 28116  015ABE  0E01               	movlw	high _HMIBoard
 28117  015AC0  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 28118  015AC2  6EDA               	movwf	fsr2h,c
 28119  015AC4  50DF               	movf	indf2,w,c
 28120  015AC6  ECA9  F0A6         	call	_OutSeg
 28121  015ACA  0100               	movlb	0	; () banked
 28122  015ACC  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 28123  015ACE  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 28124  015AD0  D7EB               	goto	l14493
 28125  015AD2                     l1158:
 28126                           
 28127                           ; BSR set to: 0
 28128  015AD2  0012               	return		;funcret
 28129  015AD4                     __end_of_HMI_Render:
 28130                           	opt stack 0
 28131                           tosu	equ	0xFFF
 28132                           tosh	equ	0xFFE
 28133                           tosl	equ	0xFFD
 28134                           pclath	equ	0xFFA
 28135                           tblptru	equ	0xFF8
 28136                           tblptrh	equ	0xFF7
 28137                           tblptrl	equ	0xFF6
 28138                           tablat	equ	0xFF5
 28139                           prodh	equ	0xFF4
 28140                           prodl	equ	0xFF3
 28141                           intcon	equ	0xFF2
 28142                           indf0	equ	0xFEF
 28143                           postinc0	equ	0xFEE
 28144                           fsr0h	equ	0xFEA
 28145                           fsr0l	equ	0xFE9
 28146                           wreg	equ	0xFE8
 28147                           indf1	equ	0xFE7
 28148                           postdec1	equ	0xFE5
 28149                           fsr1h	equ	0xFE2
 28150                           fsr1l	equ	0xFE1
 28151                           indf2	equ	0xFDF
 28152                           postinc2	equ	0xFDE
 28153                           postdec2	equ	0xFDD
 28154                           plusw2	equ	0xFDB
 28155                           fsr2h	equ	0xFDA
 28156                           fsr2l	equ	0xFD9
 28157                           status	equ	0xFD8
 28158                           
 28159 ;; *************** function _OutSeg *****************
 28160 ;; Defined at:
 28161 ;;		line 54 in file "HMI.c"
 28162 ;; Parameters:    Size  Location     Type
 28163 ;;  pInput          1    wreg     unsigned char 
 28164 ;;  pSegment        1    3[BANK0 ] unsigned char 
 28165 ;; Auto vars:     Size  Location     Type
 28166 ;;  pInput          1    6[BANK0 ] unsigned char 
 28167 ;;  out             1    7[BANK0 ] volatile unsigned char 
 28168 ;; Return value:  Size  Location     Type
 28169 ;;                  1    wreg      void 
 28170 ;; Registers used:
 28171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28172 ;; Tracked objects:
 28173 ;;		On entry : 0/0
 28174 ;;		On exit  : 0/0
 28175 ;;		Unchanged: 0/0
 28176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28177 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28179 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28180 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28181 ;;Total ram usage:        5 bytes
 28182 ;; Hardware stack levels used:    1
 28183 ;; Hardware stack levels required when called:    8
 28184 ;; This function calls:
 28185 ;;		_SPI_Send
 28186 ;; This function is called by:
 28187 ;;		_HMI_Render
 28188 ;;		_HMI_GRender
 28189 ;; This function uses a non-reentrant model
 28190 ;;
 28191                           
 28192                           	psect	text146
 28193  014D52                     __ptext146:
 28194                           	opt stack 0
 28195  014D52                     _OutSeg:
 28196                           	opt stack 19
 28197                           
 28198                           ; BSR set to: 0
 28199                           ;incstack = 0
 28200                           ;OutSeg@pInput stored from wreg
 28201  014D52  0100               	movlb	0	; () banked
 28202  014D54  6F66               	movwf	OutSeg@pInput& (0+255),b
 28203                           
 28204                           ;HMI.c: 58: static UINT8 cur;
 28205                           ;HMI.c: 59: volatile UINT8 out;
 28206                           ;HMI.c: 60: static UINT8 segset;
 28207                           ;HMI.c: 61: static UINT8 a;
 28208                           ;HMI.c: 83: if (pSegment <= 8)
 28209  014D56  0E09               	movlw	9
 28210  014D58  0100               	movlb	0	; () banked
 28211  014D5A  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 28212  014D5C  0012               	return	
 28213                           
 28214                           ; BSR set to: 0
 28215                           ;HMI.c: 84: {
 28216                           ;HMI.c: 85: cur = pInput;
 28217  014D5E  C066  F043         	movff	OutSeg@pInput,OutSeg@cur
 28218                           
 28219                           ; BSR set to: 0
 28220                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 28221  014D62  0E00               	movlw	0
 28222  014D64  6E41               	movwf	OutSeg@a,c
 28223  014D66                     l14013:
 28224                           
 28225                           ; BSR set to: 0
 28226  014D66  0E07               	movlw	7
 28227  014D68  6441               	cpfsgt	OutSeg@a,c
 28228  014D6A  D001               	goto	l1146
 28229  014D6C  D01F               	goto	u11500
 28230  014D6E                     l1146:
 28231                           
 28232                           ;HMI.c: 87: {
 28233                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 28234                           
 28235                           ; BSR set to: 0
 28236  014D6E  C043  F064         	movff	OutSeg@cur,??_OutSeg
 28237  014D72  0E01               	movlw	1
 28238  014D74  0100               	movlb	0	; () banked
 28239  014D76  1764               	andwf	??_OutSeg& (0+255),f,b
 28240  014D78  0E06               	movlw	6
 28241  014D7A  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 28242  014D7C                     u11495:
 28243  014D7C  90D8               	bcf	status,0,c
 28244  014D7E  3764               	rlcf	??_OutSeg& (0+255),f,b
 28245  014D80  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 28246  014D82  D7FC               	goto	u11495
 28247  014D84  5164               	movf	??_OutSeg& (0+255),w,b
 28248  014D86  6E42               	movwf	OutSeg@segset,c
 28249                           
 28250                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 28251  014D88  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 28252  014D8A  42E8               	rrncf	wreg,f,c
 28253  014D8C  0BF8               	andlw	248
 28254  014D8E  1041               	iorwf	OutSeg@a,w,c
 28255  014D90  1042               	iorwf	OutSeg@segset,w,c
 28256  014D92  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 28257                           
 28258                           ;HMI.c: 90: cur >>= 1;
 28259  014D94  90D8               	bcf	status,0,c
 28260  014D96  3243               	rrcf	OutSeg@cur,f,c
 28261                           
 28262                           ; BSR set to: 0
 28263                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 28264  014D98  0EC8               	movlw	low _SPI1
 28265  014D9A  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28266  014D9C  0E02               	movlw	high _SPI1
 28267  014D9E  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28268  014DA0  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 28269  014DA4  EC16  F0A7         	call	_SPI_Send	;wreg free
 28270  014DA8  2A41               	incf	OutSeg@a,f,c
 28271  014DAA  D7DD               	goto	l14013
 28272  014DAC                     u11500:
 28273                           
 28274                           ;HMI.c: 96: }
 28275                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 28276  014DAC  0EC8               	movlw	low _SPI1
 28277  014DAE  0100               	movlb	0	; () banked
 28278  014DB0  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28279  014DB2  0E02               	movlw	high _SPI1
 28280  014DB4  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28281  014DB6  0E00               	movlw	0
 28282  014DB8  6F62               	movwf	SPI_Send@pData& (0+255),b
 28283  014DBA  EC16  F0A7         	call	_SPI_Send	;wreg free
 28284  014DBE  0012               	return	
 28285  014DC0                     __end_of_OutSeg:
 28286                           	opt stack 0
 28287                           tosu	equ	0xFFF
 28288                           tosh	equ	0xFFE
 28289                           tosl	equ	0xFFD
 28290                           pclath	equ	0xFFA
 28291                           tblptru	equ	0xFF8
 28292                           tblptrh	equ	0xFF7
 28293                           tblptrl	equ	0xFF6
 28294                           tablat	equ	0xFF5
 28295                           prodh	equ	0xFF4
 28296                           prodl	equ	0xFF3
 28297                           intcon	equ	0xFF2
 28298                           indf0	equ	0xFEF
 28299                           postinc0	equ	0xFEE
 28300                           fsr0h	equ	0xFEA
 28301                           fsr0l	equ	0xFE9
 28302                           wreg	equ	0xFE8
 28303                           indf1	equ	0xFE7
 28304                           postdec1	equ	0xFE5
 28305                           fsr1h	equ	0xFE2
 28306                           fsr1l	equ	0xFE1
 28307                           indf2	equ	0xFDF
 28308                           postinc2	equ	0xFDE
 28309                           postdec2	equ	0xFDD
 28310                           plusw2	equ	0xFDB
 28311                           fsr2h	equ	0xFDA
 28312                           fsr2l	equ	0xFD9
 28313                           status	equ	0xFD8
 28314                           
 28315 ;; *************** function _SPI_Send *****************
 28316 ;; Defined at:
 28317 ;;		line 226 in file "Library/SPI.c"
 28318 ;; Parameters:    Size  Location     Type
 28319 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 28320 ;;		 -> SPI1(11), SPI2(11), 
 28321 ;;  pData           1    2[BANK0 ] unsigned char 
 28322 ;; Auto vars:     Size  Location     Type
 28323 ;;		None
 28324 ;; Return value:  Size  Location     Type
 28325 ;;                  1    wreg      unsigned char 
 28326 ;; Registers used:
 28327 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28328 ;; Tracked objects:
 28329 ;;		On entry : 0/0
 28330 ;;		On exit  : 0/0
 28331 ;;		Unchanged: 0/0
 28332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28333 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28336 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28337 ;;Total ram usage:        3 bytes
 28338 ;; Hardware stack levels used:    1
 28339 ;; Hardware stack levels required when called:    7
 28340 ;; This function calls:
 28341 ;;		Nothing
 28342 ;; This function is called by:
 28343 ;;		_LCD_Write
 28344 ;;		_OutSeg
 28345 ;; This function uses a non-reentrant model
 28346 ;;
 28347                           
 28348                           	psect	text147
 28349  014E2C                     __ptext147:
 28350                           	opt stack 0
 28351  014E2C                     _SPI_Send:
 28352                           	opt stack 18
 28353                           
 28354                           ;SPI.c: 253: switch (pInput->mChannel)
 28355                           
 28356                           ;incstack = 0
 28357  014E2C  D026               	goto	l678
 28358  014E2E                     
 28359                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 28360  014E2E  C1AB  FFD9         	movff	_PortC+4,fsr2l
 28361  014E32  C1AC  FFDA         	movff	_PortC+5,fsr2h
 28362  014E36  0101               	movlb	1	; () banked
 28363  014E38  94DF               	bcf	indf2,2,c
 28364                           
 28365                           ; BSR set to: 1
 28366                           ;SPI.c: 257: SSP1BUF = pData;
 28367  014E3A  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 28368  014E3E                     
 28369                           ; BSR set to: 1
 28370  014E3E  A0C7               	btfss	4039,0,c	;volatile
 28371  014E40  D7FE               	goto	l681
 28372                           
 28373                           ;SPI.c: 259: pData = SSP1BUF;
 28374  014E42  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 28375                           
 28376                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 28377  014E46  C1AB  FFD9         	movff	_PortC+4,fsr2l
 28378  014E4A  C1AC  FFDA         	movff	_PortC+5,fsr2h
 28379  014E4E  0101               	movlb	1	; () banked
 28380  014E50  84DF               	bsf	indf2,2,c
 28381                           
 28382                           ; BSR set to: 1
 28383                           ;SPI.c: 261: return pData;
 28384                           ;	Return value of _SPI_Send is never used
 28385  014E52  0012               	return	
 28386  014E54                     
 28387                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 28388                           
 28389                           ; BSR set to: 1
 28390  014E54  C197  FFD9         	movff	_PortD+4,fsr2l
 28391  014E58  C198  FFDA         	movff	_PortD+5,fsr2h
 28392  014E5C  0101               	movlb	1	; () banked
 28393  014E5E  9EDF               	bcf	indf2,7,c
 28394                           
 28395                           ; BSR set to: 1
 28396                           ;SPI.c: 264: SSP2BUF = pData;
 28397  014E60  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 28398  014E64                     
 28399                           ; BSR set to: 1
 28400  014E64  A06D               	btfss	3949,0,c	;volatile
 28401  014E66  D7FE               	goto	l686
 28402                           
 28403                           ;SPI.c: 266: pData = SSP2BUF;
 28404  014E68  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 28405                           
 28406                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 28407  014E6C  C197  FFD9         	movff	_PortD+4,fsr2l
 28408  014E70  C198  FFDA         	movff	_PortD+5,fsr2h
 28409  014E74  0101               	movlb	1	; () banked
 28410  014E76  8EDF               	bsf	indf2,7,c
 28411                           
 28412                           ; BSR set to: 1
 28413                           ;SPI.c: 269: };
 28414                           
 28415                           ; BSR set to: 1
 28416                           ;SPI.c: 268: return pData;
 28417                           ;	Return value of _SPI_Send is never used
 28418  014E78  0012               	return	
 28419  014E7A                     l678:
 28420                           
 28421                           ; BSR set to: 1
 28422  014E7A  0100               	movlb	0	; () banked
 28423  014E7C  EE20 F002          	lfsr	2,2
 28424  014E80  5160               	movf	SPI_Send@pInput& (0+255),w,b
 28425  014E82  26D9               	addwf	fsr2l,f,c
 28426  014E84  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 28427  014E86  22DA               	addwfc	fsr2h,f,c
 28428  014E88  50DF               	movf	indf2,w,c
 28429                           
 28430                           ; Switch size 1, requested type "space"
 28431                           ; Number of cases is 2, Range of values is 0 to 1
 28432                           ; switch strategies available:
 28433                           ; Name         Instructions Cycles
 28434                           ; simple_byte            7     4 (average)
 28435                           ;	Chosen strategy is simple_byte
 28436  014E8A  0A00               	xorlw	0	; case 0
 28437  014E8C  B4D8               	btfsc	status,2,c
 28438  014E8E  D7CF               	goto	l679
 28439  014E90  0A01               	xorlw	1	; case 1
 28440  014E92  A4D8               	btfss	status,2,c
 28441  014E94  0012               	return	
 28442  014E96  D7DE               	goto	l684
 28443  014E98                     __end_of_SPI_Send:
 28444                           	opt stack 0
 28445                           tosu	equ	0xFFF
 28446                           tosh	equ	0xFFE
 28447                           tosl	equ	0xFFD
 28448                           pclath	equ	0xFFA
 28449                           tblptru	equ	0xFF8
 28450                           tblptrh	equ	0xFF7
 28451                           tblptrl	equ	0xFF6
 28452                           tablat	equ	0xFF5
 28453                           prodh	equ	0xFF4
 28454                           prodl	equ	0xFF3
 28455                           intcon	equ	0xFF2
 28456                           indf0	equ	0xFEF
 28457                           postinc0	equ	0xFEE
 28458                           fsr0h	equ	0xFEA
 28459                           fsr0l	equ	0xFE9
 28460                           wreg	equ	0xFE8
 28461                           indf1	equ	0xFE7
 28462                           postdec1	equ	0xFE5
 28463                           fsr1h	equ	0xFE2
 28464                           fsr1l	equ	0xFE1
 28465                           indf2	equ	0xFDF
 28466                           postinc2	equ	0xFDE
 28467                           postdec2	equ	0xFDD
 28468                           plusw2	equ	0xFDB
 28469                           fsr2h	equ	0xFDA
 28470                           fsr2l	equ	0xFD9
 28471                           status	equ	0xFD8
 28472                           
 28473 ;; *************** function _FunctReadADC *****************
 28474 ;; Defined at:
 28475 ;;		line 100 in file "main.c"
 28476 ;; Parameters:    Size  Location     Type
 28477 ;;  channel         2    0[BANK0 ] int 
 28478 ;; Auto vars:     Size  Location     Type
 28479 ;;		None
 28480 ;; Return value:  Size  Location     Type
 28481 ;;                  2    0[BANK0 ] int 
 28482 ;; Registers used:
 28483 ;;		wreg, status,2, status,0
 28484 ;; Tracked objects:
 28485 ;;		On entry : 0/0
 28486 ;;		On exit  : 0/0
 28487 ;;		Unchanged: 0/0
 28488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28489 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28492 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28493 ;;Total ram usage:        2 bytes
 28494 ;; Hardware stack levels used:    1
 28495 ;; Hardware stack levels required when called:    7
 28496 ;; This function calls:
 28497 ;;		Nothing
 28498 ;; This function is called by:
 28499 ;;		_ADCAverage
 28500 ;; This function uses a non-reentrant model
 28501 ;;
 28502                           
 28503                           	psect	text148
 28504  01597C                     __ptext148:
 28505                           	opt stack 0
 28506  01597C                     _FunctReadADC:
 28507                           	opt stack 21
 28508                           
 28509                           ;main.c: 102: if(channel>4) return 0;
 28510                           
 28511                           ;incstack = 0
 28512  01597C  0100               	movlb	0	; () banked
 28513  01597E  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 28514  015980  D00B               	goto	l2122
 28515  015982  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 28516  015984  E104               	bnz	u11900
 28517  015986  0E05               	movlw	5
 28518  015988  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 28519  01598A  A0D8               	btfss	status,0,c
 28520  01598C  D005               	goto	l2122
 28521  01598E                     u11900:
 28522                           
 28523                           ; BSR set to: 0
 28524  01598E  0E00               	movlw	0
 28525  015990  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 28526  015992  0E00               	movlw	0
 28527  015994  6F60               	movwf	?_FunctReadADC& (0+255),b
 28528                           
 28529                           ; BSR set to: 0
 28530  015996  0012               	return	
 28531  015998                     l2122:
 28532                           
 28533                           ; BSR set to: 0
 28534                           ;main.c: 103: ADCON0=0x00;
 28535                           
 28536                           ; BSR set to: 0
 28537  015998  0E00               	movlw	0
 28538  01599A  6EC2               	movwf	4034,c	;volatile
 28539                           
 28540                           ; BSR set to: 0
 28541                           ;main.c: 104: ADCON0=(channel<<2);
 28542  01599C  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 28543  01599E  46E8               	rlncf	wreg,f,c
 28544  0159A0  0BFC               	andlw	252
 28545  0159A2  6EC2               	movwf	4034,c	;volatile
 28546                           
 28547                           ; BSR set to: 0
 28548                           ;main.c: 105: ADON=1;
 28549  0159A4  80C2               	bsf	4034,0,c	;volatile
 28550                           
 28551                           ; BSR set to: 0
 28552                           ;main.c: 106: GODONE=1;
 28553  0159A6  82C2               	bsf	4034,1,c	;volatile
 28554  0159A8                     
 28555                           ; BSR set to: 0
 28556  0159A8  B2C2               	btfsc	4034,1,c	;volatile
 28557  0159AA  D7FE               	goto	l2125
 28558                           
 28559                           ;main.c: 108: ADON=0;
 28560  0159AC  90C2               	bcf	4034,0,c	;volatile
 28561                           
 28562                           ;main.c: 109: return ADRES;
 28563  0159AE  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 28564  0159B2  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 28565  0159B6  0012               	return		;funcret
 28566  0159B8                     __end_of_FunctReadADC:
 28567                           	opt stack 0
 28568                           tosu	equ	0xFFF
 28569                           tosh	equ	0xFFE
 28570                           tosl	equ	0xFFD
 28571                           pclath	equ	0xFFA
 28572                           tblptru	equ	0xFF8
 28573                           tblptrh	equ	0xFF7
 28574                           tblptrl	equ	0xFF6
 28575                           tablat	equ	0xFF5
 28576                           prodh	equ	0xFF4
 28577                           prodl	equ	0xFF3
 28578                           intcon	equ	0xFF2
 28579                           indf0	equ	0xFEF
 28580                           postinc0	equ	0xFEE
 28581                           fsr0h	equ	0xFEA
 28582                           fsr0l	equ	0xFE9
 28583                           wreg	equ	0xFE8
 28584                           indf1	equ	0xFE7
 28585                           postdec1	equ	0xFE5
 28586                           fsr1h	equ	0xFE2
 28587                           fsr1l	equ	0xFE1
 28588                           indf2	equ	0xFDF
 28589                           postinc2	equ	0xFDE
 28590                           postdec2	equ	0xFDD
 28591                           plusw2	equ	0xFDB
 28592                           fsr2h	equ	0xFDA
 28593                           fsr2l	equ	0xFD9
 28594                           status	equ	0xFD8
 28595                           
 28596 ;; *************** function _BangBang *****************
 28597 ;; Defined at:
 28598 ;;		line 224 in file "main.c"
 28599 ;; Parameters:    Size  Location     Type
 28600 ;;  RSpeedH         2    1[BANK0 ] int 
 28601 ;;  RSpeedL         2    3[BANK0 ] int 
 28602 ;;  LSpeedH         2    5[BANK0 ] int 
 28603 ;;  LSpeedL         2    7[BANK0 ] int 
 28604 ;; Auto vars:     Size  Location     Type
 28605 ;;		None
 28606 ;; Return value:  Size  Location     Type
 28607 ;;                  1    wreg      void 
 28608 ;; Registers used:
 28609 ;;		wreg, status,2, cstack
 28610 ;; Tracked objects:
 28611 ;;		On entry : 0/0
 28612 ;;		On exit  : 0/0
 28613 ;;		Unchanged: 0/0
 28614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28615 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28618 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28619 ;;Total ram usage:        8 bytes
 28620 ;; Hardware stack levels used:    1
 28621 ;; Hardware stack levels required when called:    8
 28622 ;; This function calls:
 28623 ;;		_eusartSend
 28624 ;; This function is called by:
 28625 ;;		_main
 28626 ;; This function uses a non-reentrant model
 28627 ;;
 28628                           
 28629                           	psect	text149
 28630  015D3E                     __ptext149:
 28631                           	opt stack 0
 28632  015D3E                     _BangBang:
 28633                           	opt stack 22
 28634                           
 28635                           ;main.c: 226: eusartSend(145);
 28636                           
 28637                           ;incstack = 0
 28638  015D3E  0E91               	movlw	145
 28639  015D40  EC74  F0B0         	call	_eusartSend
 28640                           
 28641                           ;main.c: 227: eusartSend((((RSpeedH)>>8) & 255));
 28642  015D44  0100               	movlb	0	; () banked
 28643  015D46  5162               	movf	(BangBang@RSpeedH+1)& (0+255),w,b
 28644  015D48  EC74  F0B0         	call	_eusartSend
 28645                           
 28646                           ;main.c: 228: eusartSend(((RSpeedL) & 255));
 28647  015D4C  0100               	movlb	0	; () banked
 28648  015D4E  5163               	movf	BangBang@RSpeedL& (0+255),w,b
 28649  015D50  EC74  F0B0         	call	_eusartSend
 28650                           
 28651                           ;main.c: 229: eusartSend((((LSpeedH)>>8) & 255));
 28652  015D54  0100               	movlb	0	; () banked
 28653  015D56  5166               	movf	(BangBang@LSpeedH+1)& (0+255),w,b
 28654  015D58  EC74  F0B0         	call	_eusartSend
 28655                           
 28656                           ;main.c: 230: eusartSend(((LSpeedL) & 255));
 28657  015D5C  0100               	movlb	0	; () banked
 28658  015D5E  5167               	movf	BangBang@LSpeedL& (0+255),w,b
 28659  015D60  EC74  F0B0         	call	_eusartSend
 28660  015D64  0012               	return		;funcret
 28661  015D66                     __end_of_BangBang:
 28662                           	opt stack 0
 28663                           tosu	equ	0xFFF
 28664                           tosh	equ	0xFFE
 28665                           tosl	equ	0xFFD
 28666                           pclath	equ	0xFFA
 28667                           tblptru	equ	0xFF8
 28668                           tblptrh	equ	0xFF7
 28669                           tblptrl	equ	0xFF6
 28670                           tablat	equ	0xFF5
 28671                           prodh	equ	0xFF4
 28672                           prodl	equ	0xFF3
 28673                           intcon	equ	0xFF2
 28674                           indf0	equ	0xFEF
 28675                           postinc0	equ	0xFEE
 28676                           fsr0h	equ	0xFEA
 28677                           fsr0l	equ	0xFE9
 28678                           wreg	equ	0xFE8
 28679                           indf1	equ	0xFE7
 28680                           postdec1	equ	0xFE5
 28681                           fsr1h	equ	0xFE2
 28682                           fsr1l	equ	0xFE1
 28683                           indf2	equ	0xFDF
 28684                           postinc2	equ	0xFDE
 28685                           postdec2	equ	0xFDD
 28686                           plusw2	equ	0xFDB
 28687                           fsr2h	equ	0xFDA
 28688                           fsr2l	equ	0xFD9
 28689                           status	equ	0xFD8
 28690                           
 28691 ;; *************** function _eusartSend *****************
 28692 ;; Defined at:
 28693 ;;		line 157 in file "main.c"
 28694 ;; Parameters:    Size  Location     Type
 28695 ;;  sendChar        1    wreg     unsigned char 
 28696 ;; Auto vars:     Size  Location     Type
 28697 ;;  sendChar        1    0[BANK0 ] unsigned char 
 28698 ;; Return value:  Size  Location     Type
 28699 ;;                  1    wreg      void 
 28700 ;; Registers used:
 28701 ;;		wreg
 28702 ;; Tracked objects:
 28703 ;;		On entry : 0/0
 28704 ;;		On exit  : 0/0
 28705 ;;		Unchanged: 0/0
 28706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28710 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28711 ;;Total ram usage:        1 bytes
 28712 ;; Hardware stack levels used:    1
 28713 ;; Hardware stack levels required when called:    7
 28714 ;; This function calls:
 28715 ;;		Nothing
 28716 ;; This function is called by:
 28717 ;;		_Get_Sensor_State
 28718 ;;		_UpdateDistance
 28719 ;;		_Drive
 28720 ;;		_BangBang
 28721 ;;		_Robot_Stop
 28722 ;;		_Robot_Init
 28723 ;;		_LEDOn
 28724 ;;		_LEDOff
 28725 ;;		_Turn
 28726 ;; This function uses a non-reentrant model
 28727 ;;
 28728                           
 28729                           	psect	text150
 28730  0160E8                     __ptext150:
 28731                           	opt stack 0
 28732  0160E8                     _eusartSend:
 28733                           	opt stack 22
 28734                           
 28735                           ;incstack = 0
 28736                           ;eusartSend@sendChar stored from wreg
 28737  0160E8  0100               	movlb	0	; () banked
 28738  0160EA  6F60               	movwf	eusartSend@sendChar& (0+255),b
 28739  0160EC                     
 28740                           ;main.c: 158: while(!TXSTA1bits.TRMT){};
 28741  0160EC  A2AD               	btfss	4013,1,c	;volatile
 28742  0160EE  D7FE               	goto	l14629
 28743                           
 28744                           ;main.c: 159: TXREG1 = sendChar;
 28745  0160F0  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
 28746  0160F4  0012               	return		;funcret
 28747  0160F6                     __end_of_eusartSend:
 28748                           	opt stack 0
 28749                           tosu	equ	0xFFF
 28750                           tosh	equ	0xFFE
 28751                           tosl	equ	0xFFD
 28752                           pclath	equ	0xFFA
 28753                           tblptru	equ	0xFF8
 28754                           tblptrh	equ	0xFF7
 28755                           tblptrl	equ	0xFF6
 28756                           tablat	equ	0xFF5
 28757                           prodh	equ	0xFF4
 28758                           prodl	equ	0xFF3
 28759                           intcon	equ	0xFF2
 28760                           indf0	equ	0xFEF
 28761                           postinc0	equ	0xFEE
 28762                           fsr0h	equ	0xFEA
 28763                           fsr0l	equ	0xFE9
 28764                           wreg	equ	0xFE8
 28765                           indf1	equ	0xFE7
 28766                           postdec1	equ	0xFE5
 28767                           fsr1h	equ	0xFE2
 28768                           fsr1l	equ	0xFE1
 28769                           indf2	equ	0xFDF
 28770                           postinc2	equ	0xFDE
 28771                           postdec2	equ	0xFDD
 28772                           plusw2	equ	0xFDB
 28773                           fsr2h	equ	0xFDA
 28774                           fsr2l	equ	0xFD9
 28775                           status	equ	0xFD8
 28776                           
 28777 ;; *************** function _ISR_Function *****************
 28778 ;; Defined at:
 28779 ;;		line 38 in file "Library/ISR.c"
 28780 ;; Parameters:    Size  Location     Type
 28781 ;;		None
 28782 ;; Auto vars:     Size  Location     Type
 28783 ;;		None
 28784 ;; Return value:  Size  Location     Type
 28785 ;;                  1    wreg      void 
 28786 ;; Registers used:
 28787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28788 ;; Tracked objects:
 28789 ;;		On entry : 0/0
 28790 ;;		On exit  : 0/0
 28791 ;;		Unchanged: 0/0
 28792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28795 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28796 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28797 ;;Total ram usage:       18 bytes
 28798 ;; Hardware stack levels used:    1
 28799 ;; Hardware stack levels required when called:    6
 28800 ;; This function calls:
 28801 ;;		_Timer0_ISR
 28802 ;; This function is called by:
 28803 ;;		Interrupt level 2
 28804 ;; This function uses a non-reentrant model
 28805 ;;
 28806                           
 28807                           	psect	intcode
 28808  001408                     __pintcode:
 28809                           	opt stack 0
 28810  001408                     _ISR_Function:
 28811                           	opt stack 14
 28812                           
 28813                           ;incstack = 0
 28814  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28815  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 28816  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 28817  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 28818  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 28819  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 28820  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 28821  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 28822  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 28823  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 28824  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 28825  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 28826  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 28827  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 28828  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 28829  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 28830  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 28831  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 28832  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 28833                           
 28834                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 28835  001452  92F2               	bcf	intcon,1,c	;volatile
 28836                           
 28837                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 28838  001454  B4F2               	btfsc	intcon,2,c	;volatile
 28839  001456  AAF2               	btfss	intcon,5,c	;volatile
 28840  001458  D002               	goto	i2l1590
 28841                           
 28842                           ;ISR.c: 68: Timer0_ISR();
 28843  00145A  ECB3  F0AE         	call	_Timer0_ISR	;wreg free
 28844  00145E                     i2l1590:
 28845  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 28846  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 28847  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 28848  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 28849  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 28850  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 28851  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 28852  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 28853  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 28854  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 28855  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 28856  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 28857  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 28858  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 28859  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 28860  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 28861  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 28862  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 28863  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 28864  0014A8  0011               	retfie		f
 28865  0014AA                     __end_of_ISR_Function:
 28866                           	opt stack 0
 28867                           tosu	equ	0xFFF
 28868                           tosh	equ	0xFFE
 28869                           tosl	equ	0xFFD
 28870                           pclatu	equ	0xFFB
 28871                           pclath	equ	0xFFA
 28872                           tblptru	equ	0xFF8
 28873                           tblptrh	equ	0xFF7
 28874                           tblptrl	equ	0xFF6
 28875                           tablat	equ	0xFF5
 28876                           prodh	equ	0xFF4
 28877                           prodl	equ	0xFF3
 28878                           intcon	equ	0xFF2
 28879                           indf0	equ	0xFEF
 28880                           postinc0	equ	0xFEE
 28881                           fsr0h	equ	0xFEA
 28882                           fsr0l	equ	0xFE9
 28883                           wreg	equ	0xFE8
 28884                           indf1	equ	0xFE7
 28885                           postdec1	equ	0xFE5
 28886                           fsr1h	equ	0xFE2
 28887                           fsr1l	equ	0xFE1
 28888                           indf2	equ	0xFDF
 28889                           postinc2	equ	0xFDE
 28890                           postdec2	equ	0xFDD
 28891                           plusw2	equ	0xFDB
 28892                           fsr2h	equ	0xFDA
 28893                           fsr2l	equ	0xFD9
 28894                           status	equ	0xFD8
 28895                           
 28896 ;; *************** function _Timer0_ISR *****************
 28897 ;; Defined at:
 28898 ;;		line 94 in file "Library/Timer0.c"
 28899 ;; Parameters:    Size  Location     Type
 28900 ;;		None
 28901 ;; Auto vars:     Size  Location     Type
 28902 ;;		None
 28903 ;; Return value:  Size  Location     Type
 28904 ;;                  1    wreg      void 
 28905 ;; Registers used:
 28906 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28907 ;; Tracked objects:
 28908 ;;		On entry : 0/0
 28909 ;;		On exit  : 0/0
 28910 ;;		Unchanged: 0/0
 28911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28916 ;;Total ram usage:        0 bytes
 28917 ;; Hardware stack levels used:    1
 28918 ;; Hardware stack levels required when called:    5
 28919 ;; This function calls:
 28920 ;;		Absolute function
 28921 ;;		i2_Motor_Step
 28922 ;;		i2_Timer0_Stop
 28923 ;; This function is called by:
 28924 ;;		_ISR_Function
 28925 ;; This function uses a non-reentrant model
 28926 ;;
 28927                           
 28928                           	psect	text152
 28929  015D66                     __ptext152:
 28930                           	opt stack 0
 28931  015D66                     _Timer0_ISR:
 28932                           	opt stack 14
 28933                           
 28934                           ;Timer0.c: 96: Timer0_Stop();
 28935                           
 28936                           ;incstack = 0
 28937  015D66  ECAB  F0B0         	call	i2_Timer0_Stop	;wreg free
 28938                           
 28939                           ;Timer0.c: 99: if (gISR != 0)
 28940  015D6A  0101               	movlb	1	; () banked
 28941  015D6C  5108               	movf	_gISR& (0+255),w,b
 28942  015D6E  1109               	iorwf	(_gISR+1)& (0+255),w,b
 28943  015D70  110A               	iorwf	(_gISR+2)& (0+255),w,b
 28944  015D72  B4D8               	btfsc	status,2,c
 28945  015D74  0012               	return	
 28946                           
 28947                           ; BSR set to: 1
 28948                           ;Timer0.c: 100: gISR();
 28949  015D76  D801               	call	i2u1436_48
 28950  015D78  0012               	return	
 28951  015D7A                     i2u1436_48:
 28952  015D7A  0005               	push	
 28953  015D7C  6EFA               	movwf	pclath,c
 28954  015D7E  5108               	movf	_gISR& (0+255),w,b
 28955  015D80  6EFD               	movwf	tosl,c
 28956  015D82  5109               	movf	(_gISR+1)& (0+255),w,b
 28957  015D84  6EFE               	movwf	tosh,c
 28958  015D86  510A               	movf	(_gISR+2)& (0+255),w,b
 28959  015D88  6EFF               	movwf	tosu,c
 28960  015D8A  50FA               	movf	pclath,w,c
 28961  015D8C  0012               	return		;indir
 28962  015D8E                     __end_of_Timer0_ISR:
 28963                           	opt stack 0
 28964                           tosu	equ	0xFFF
 28965                           tosh	equ	0xFFE
 28966                           tosl	equ	0xFFD
 28967                           pclatu	equ	0xFFB
 28968                           pclath	equ	0xFFA
 28969                           tblptru	equ	0xFF8
 28970                           tblptrh	equ	0xFF7
 28971                           tblptrl	equ	0xFF6
 28972                           tablat	equ	0xFF5
 28973                           prodh	equ	0xFF4
 28974                           prodl	equ	0xFF3
 28975                           intcon	equ	0xFF2
 28976                           indf0	equ	0xFEF
 28977                           postinc0	equ	0xFEE
 28978                           fsr0h	equ	0xFEA
 28979                           fsr0l	equ	0xFE9
 28980                           wreg	equ	0xFE8
 28981                           indf1	equ	0xFE7
 28982                           postdec1	equ	0xFE5
 28983                           fsr1h	equ	0xFE2
 28984                           fsr1l	equ	0xFE1
 28985                           indf2	equ	0xFDF
 28986                           postinc2	equ	0xFDE
 28987                           postdec2	equ	0xFDD
 28988                           plusw2	equ	0xFDB
 28989                           fsr2h	equ	0xFDA
 28990                           fsr2l	equ	0xFD9
 28991                           status	equ	0xFD8
 28992                           
 28993 ;; *************** function i2_Motor_Step *****************
 28994 ;; Defined at:
 28995 ;;		line 75 in file "Library/Motor.c"
 28996 ;; Parameters:    Size  Location     Type
 28997 ;;		None
 28998 ;; Auto vars:     Size  Location     Type
 28999 ;;		None
 29000 ;; Return value:  Size  Location     Type
 29001 ;;                  1    wreg      void 
 29002 ;; Registers used:
 29003 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29004 ;; Tracked objects:
 29005 ;;		On entry : 0/0
 29006 ;;		On exit  : 0/0
 29007 ;;		Unchanged: 0/0
 29008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29012 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29013 ;;Total ram usage:        2 bytes
 29014 ;; Hardware stack levels used:    1
 29015 ;; Hardware stack levels required when called:    4
 29016 ;; This function calls:
 29017 ;;		i2_MXK_Queue
 29018 ;;		i2_MXK_Release
 29019 ;;		i2_MXK_SwitchTo
 29020 ;;		i2_Port_SetPin
 29021 ;;		i2_Timer0_Restart
 29022 ;;		i2_Timer0_Stop
 29023 ;; This function is called by:
 29024 ;; This function uses a non-reentrant model
 29025 ;;
 29026                           
 29027                           	psect	text153
 29028  013BEE                     __ptext153:
 29029                           	opt stack 0
 29030  013BEE                     i2_Motor_Step:
 29031                           	opt stack 14
 29032                           
 29033                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29034                           
 29035                           ;incstack = 0
 29036  013BEE  0100               	movlb	0	; () banked
 29037  013BF0  EE20 F004          	lfsr	2,4
 29038  013BF4  51EF               	movf	_lMotor& (0+255),w,b
 29039  013BF6  26D9               	addwf	fsr2l,f,c
 29040  013BF8  51F0               	movf	(_lMotor+1)& (0+255),w,b
 29041  013BFA  22DA               	addwfc	fsr2h,f,c
 29042  013BFC  50DF               	movf	indf2,w,c
 29043  013BFE  EC6A  F0AD         	call	i2_MXK_SwitchTo
 29044  013C02  0900               	iorlw	0
 29045  013C04  B4D8               	btfsc	status,2,c
 29046  013C06  D06A               	goto	i2l1627
 29047                           
 29048                           ;Motor.c: 78: {
 29049                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29050  013C08  C0EF  FFD9         	movff	_lMotor,fsr2l
 29051  013C0C  C0F0  FFDA         	movff	_lMotor+1,fsr2h
 29052  013C10  50DE               	movf	postinc2,w,c
 29053  013C12  10DE               	iorwf	postinc2,w,c
 29054  013C14  B4D8               	btfsc	status,2,c
 29055  013C16  D05D               	goto	i2l1628
 29056                           
 29057                           ;Motor.c: 80: {
 29058                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29059  013C18  C0EF  FFD9         	movff	_lMotor,fsr2l
 29060  013C1C  C0F0  FFDA         	movff	_lMotor+1,fsr2h
 29061  013C20  0E01               	movlw	1
 29062  013C22  BEDB               	btfsc	plusw2,7,c
 29063  013C24  D022               	goto	i2l1629
 29064  013C26  0E01               	movlw	1
 29065  013C28  50DB               	movf	plusw2,w,c
 29066  013C2A  E103               	bnz	i2u789_40
 29067  013C2C  04DE               	decf	postinc2,w,c
 29068  013C2E  A0D8               	btfss	status,0,c
 29069  013C30  D01C               	goto	i2l1629
 29070  013C32                     i2u789_40:
 29071                           
 29072                           ;Motor.c: 83: {
 29073                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29074  013C32  C0EF  FFD9         	movff	_lMotor,fsr2l
 29075  013C36  C0F0  FFDA         	movff	_lMotor+1,fsr2h
 29076  013C3A  28DE               	incf	postinc2,w,c
 29077  013C3C  E104               	bnz	i2u790_40
 29078  013C3E  0E7F               	movlw	127
 29079  013C40  18DE               	xorwf	postinc2,w,c
 29080  013C42  B4D8               	btfsc	status,2,c
 29081  013C44  D007               	goto	i2l1630
 29082  013C46                     i2u790_40:
 29083                           
 29084                           ;Motor.c: 85: lMotor->mDelta --;
 29085  013C46  C0EF  FFD9         	movff	_lMotor,fsr2l
 29086  013C4A  C0F0  FFDA         	movff	_lMotor+1,fsr2h
 29087  013C4E  06DE               	decf	postinc2,f,c
 29088  013C50  0E00               	movlw	0
 29089  013C52  5ADD               	subwfb	postdec2,f,c
 29090  013C54                     i2l1630:
 29091                           
 29092                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29093  013C54  0E89               	movlw	low _PortE
 29094  013C56  6E10               	movwf	i2Port_SetPin@pInput,c
 29095  013C58  0E01               	movlw	high _PortE
 29096  013C5A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29097  013C5C  0E00               	movlw	0
 29098  013C5E  6E12               	movwf	i2Port_SetPin@pPin,c
 29099  013C60  0E01               	movlw	1
 29100  013C62  6E13               	movwf	i2Port_SetPin@pValue,c
 29101  013C64  ECBE  F0A0         	call	i2_Port_SetPin	;wreg free
 29102                           
 29103                           ;Motor.c: 88: }
 29104  013C68  D01B               	goto	i2l1631
 29105  013C6A                     i2l1629:
 29106                           
 29107                           ;Motor.c: 89: else
 29108                           ;Motor.c: 90: {
 29109                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29110  013C6A  C0EF  FFD9         	movff	_lMotor,fsr2l
 29111  013C6E  C0F0  FFDA         	movff	_lMotor+1,fsr2h
 29112  013C72  04DE               	decf	postinc2,w,c
 29113  013C74  E104               	bnz	i2u791_40
 29114  013C76  0E80               	movlw	128
 29115  013C78  18DE               	xorwf	postinc2,w,c
 29116  013C7A  B4D8               	btfsc	status,2,c
 29117  013C7C  D007               	goto	i2l1632
 29118  013C7E                     i2u791_40:
 29119                           
 29120                           ;Motor.c: 92: lMotor->mDelta ++;
 29121  013C7E  C0EF  FFD9         	movff	_lMotor,fsr2l
 29122  013C82  C0F0  FFDA         	movff	_lMotor+1,fsr2h
 29123  013C86  2ADE               	incf	postinc2,f,c
 29124  013C88  0E00               	movlw	0
 29125  013C8A  22DD               	addwfc	postdec2,f,c
 29126  013C8C                     i2l1632:
 29127                           
 29128                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29129  013C8C  0E89               	movlw	low _PortE
 29130  013C8E  6E10               	movwf	i2Port_SetPin@pInput,c
 29131  013C90  0E01               	movlw	high _PortE
 29132  013C92  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29133  013C94  0E00               	movlw	0
 29134  013C96  6E12               	movwf	i2Port_SetPin@pPin,c
 29135  013C98  0E00               	movlw	0
 29136  013C9A  6E13               	movwf	i2Port_SetPin@pValue,c
 29137  013C9C  ECBE  F0A0         	call	i2_Port_SetPin	;wreg free
 29138  013CA0                     i2l1631:
 29139                           
 29140                           ;Motor.c: 95: }
 29141                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29142  013CA0  0E89               	movlw	low _PortE
 29143  013CA2  6E10               	movwf	i2Port_SetPin@pInput,c
 29144  013CA4  0E01               	movlw	high _PortE
 29145  013CA6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29146  013CA8  0E01               	movlw	1
 29147  013CAA  6E12               	movwf	i2Port_SetPin@pPin,c
 29148  013CAC  0E01               	movlw	1
 29149  013CAE  6E13               	movwf	i2Port_SetPin@pValue,c
 29150  013CB0  ECBE  F0A0         	call	i2_Port_SetPin	;wreg free
 29151                           
 29152                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29153  013CB4  0E89               	movlw	low _PortE
 29154  013CB6  6E10               	movwf	i2Port_SetPin@pInput,c
 29155  013CB8  0E01               	movlw	high _PortE
 29156  013CBA  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29157  013CBC  0E01               	movlw	1
 29158  013CBE  6E12               	movwf	i2Port_SetPin@pPin,c
 29159  013CC0  0E00               	movlw	0
 29160  013CC2  6E13               	movwf	i2Port_SetPin@pValue,c
 29161  013CC4  ECBE  F0A0         	call	i2_Port_SetPin	;wreg free
 29162                           
 29163                           ;Motor.c: 101: MXK_Release();
 29164  013CC8  ECAE  F0B0         	call	i2_MXK_Release	;wreg free
 29165                           
 29166                           ;Motor.c: 102: Timer0_Restart();
 29167  013CCC  EC8E  F0B0         	call	i2_Timer0_Restart	;wreg free
 29168                           
 29169                           ;Motor.c: 103: return;
 29170  013CD0  0012               	return	
 29171  013CD2                     i2l1628:
 29172                           
 29173                           ;Motor.c: 104: }
 29174                           ;Motor.c: 105: MXK_Release();
 29175  013CD2  ECAE  F0B0         	call	i2_MXK_Release	;wreg free
 29176                           
 29177                           ;Motor.c: 106: Timer0_Stop();
 29178  013CD6  ECAB  F0B0         	call	i2_Timer0_Stop	;wreg free
 29179                           
 29180                           ;Motor.c: 107: return;
 29181  013CDA  0012               	return	
 29182  013CDC                     i2l1627:
 29183                           
 29184                           ;Motor.c: 108: }
 29185                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29186  013CDC  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29187  013CE0  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29188  013CE4  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29189  013CE8  EC7B  F0B0         	call	i2_MXK_Queue	;wreg free
 29190  013CEC  0012               	return		;funcret
 29191  013CEE                     __end_ofi2_Motor_Step:
 29192                           	opt stack 0
 29193                           tosu	equ	0xFFF
 29194                           tosh	equ	0xFFE
 29195                           tosl	equ	0xFFD
 29196                           pclatu	equ	0xFFB
 29197                           pclath	equ	0xFFA
 29198                           tblptru	equ	0xFF8
 29199                           tblptrh	equ	0xFF7
 29200                           tblptrl	equ	0xFF6
 29201                           tablat	equ	0xFF5
 29202                           prodh	equ	0xFF4
 29203                           prodl	equ	0xFF3
 29204                           intcon	equ	0xFF2
 29205                           indf0	equ	0xFEF
 29206                           postinc0	equ	0xFEE
 29207                           fsr0h	equ	0xFEA
 29208                           fsr0l	equ	0xFE9
 29209                           wreg	equ	0xFE8
 29210                           indf1	equ	0xFE7
 29211                           postdec1	equ	0xFE5
 29212                           fsr1h	equ	0xFE2
 29213                           fsr1l	equ	0xFE1
 29214                           indf2	equ	0xFDF
 29215                           postinc2	equ	0xFDE
 29216                           postdec2	equ	0xFDD
 29217                           plusw2	equ	0xFDB
 29218                           fsr2h	equ	0xFDA
 29219                           fsr2l	equ	0xFD9
 29220                           status	equ	0xFD8
 29221                           
 29222 ;; *************** function i2_Timer0_Stop *****************
 29223 ;; Defined at:
 29224 ;;		line 89 in file "Library/Timer0.c"
 29225 ;; Parameters:    Size  Location     Type
 29226 ;;		None
 29227 ;; Auto vars:     Size  Location     Type
 29228 ;;		None
 29229 ;; Return value:  Size  Location     Type
 29230 ;;                  1    wreg      void 
 29231 ;; Registers used:
 29232 ;;		None
 29233 ;; Tracked objects:
 29234 ;;		On entry : 0/0
 29235 ;;		On exit  : 0/0
 29236 ;;		Unchanged: 0/0
 29237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29242 ;;Total ram usage:        0 bytes
 29243 ;; Hardware stack levels used:    1
 29244 ;; This function calls:
 29245 ;;		Nothing
 29246 ;; This function is called by:
 29247 ;;		_Timer0_ISR
 29248 ;;		i2_Motor_Step
 29249 ;; This function uses a non-reentrant model
 29250 ;;
 29251                           
 29252                           	psect	text154
 29253  016156                     __ptext154:
 29254                           	opt stack 0
 29255  016156                     i2_Timer0_Stop:
 29256                           	opt stack 18
 29257                           
 29258                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29259                           
 29260                           ;incstack = 0
 29261  016156  9AF2               	bcf	intcon,5,c	;volatile
 29262                           
 29263                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29264  016158  94F2               	bcf	intcon,2,c	;volatile
 29265  01615A  0012               	return		;funcret
 29266  01615C                     __end_ofi2_Timer0_Stop:
 29267                           	opt stack 0
 29268                           tosu	equ	0xFFF
 29269                           tosh	equ	0xFFE
 29270                           tosl	equ	0xFFD
 29271                           pclatu	equ	0xFFB
 29272                           pclath	equ	0xFFA
 29273                           tblptru	equ	0xFF8
 29274                           tblptrh	equ	0xFF7
 29275                           tblptrl	equ	0xFF6
 29276                           tablat	equ	0xFF5
 29277                           prodh	equ	0xFF4
 29278                           prodl	equ	0xFF3
 29279                           intcon	equ	0xFF2
 29280                           indf0	equ	0xFEF
 29281                           postinc0	equ	0xFEE
 29282                           fsr0h	equ	0xFEA
 29283                           fsr0l	equ	0xFE9
 29284                           wreg	equ	0xFE8
 29285                           indf1	equ	0xFE7
 29286                           postdec1	equ	0xFE5
 29287                           fsr1h	equ	0xFE2
 29288                           fsr1l	equ	0xFE1
 29289                           indf2	equ	0xFDF
 29290                           postinc2	equ	0xFDE
 29291                           postdec2	equ	0xFDD
 29292                           plusw2	equ	0xFDB
 29293                           fsr2h	equ	0xFDA
 29294                           fsr2l	equ	0xFD9
 29295                           status	equ	0xFD8
 29296                           
 29297 ;; *************** function i2_Timer0_Restart *****************
 29298 ;; Defined at:
 29299 ;;		line 83 in file "Library/Timer0.c"
 29300 ;; Parameters:    Size  Location     Type
 29301 ;;		None
 29302 ;; Auto vars:     Size  Location     Type
 29303 ;;		None
 29304 ;; Return value:  Size  Location     Type
 29305 ;;                  1    wreg      void 
 29306 ;; Registers used:
 29307 ;;		None
 29308 ;; Tracked objects:
 29309 ;;		On entry : 0/0
 29310 ;;		On exit  : 0/0
 29311 ;;		Unchanged: 0/0
 29312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29317 ;;Total ram usage:        0 bytes
 29318 ;; Hardware stack levels used:    1
 29319 ;; This function calls:
 29320 ;;		Nothing
 29321 ;; This function is called by:
 29322 ;;		i2_Motor_Step
 29323 ;; This function uses a non-reentrant model
 29324 ;;
 29325                           
 29326                           	psect	text155
 29327  01611C                     __ptext155:
 29328                           	opt stack 0
 29329  01611C                     i2_Timer0_Restart:
 29330                           	opt stack 17
 29331                           
 29332                           ;Timer0.c: 85: TMR0 = COUNTER;
 29333                           
 29334                           ;incstack = 0
 29335  01611C  C035  FFD6         	movff	_COUNTER,4054	;volatile
 29336  016120  C036  FFD7         	movff	_COUNTER+1,4055	;volatile
 29337                           
 29338                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29339  016124  8AF2               	bsf	intcon,5,c	;volatile
 29340  016126  0012               	return		;funcret
 29341  016128                     __end_ofi2_Timer0_Restart:
 29342                           	opt stack 0
 29343                           tosu	equ	0xFFF
 29344                           tosh	equ	0xFFE
 29345                           tosl	equ	0xFFD
 29346                           pclatu	equ	0xFFB
 29347                           pclath	equ	0xFFA
 29348                           tblptru	equ	0xFF8
 29349                           tblptrh	equ	0xFF7
 29350                           tblptrl	equ	0xFF6
 29351                           tablat	equ	0xFF5
 29352                           prodh	equ	0xFF4
 29353                           prodl	equ	0xFF3
 29354                           intcon	equ	0xFF2
 29355                           indf0	equ	0xFEF
 29356                           postinc0	equ	0xFEE
 29357                           fsr0h	equ	0xFEA
 29358                           fsr0l	equ	0xFE9
 29359                           wreg	equ	0xFE8
 29360                           indf1	equ	0xFE7
 29361                           postdec1	equ	0xFE5
 29362                           fsr1h	equ	0xFE2
 29363                           fsr1l	equ	0xFE1
 29364                           indf2	equ	0xFDF
 29365                           postinc2	equ	0xFDE
 29366                           postdec2	equ	0xFDD
 29367                           plusw2	equ	0xFDB
 29368                           fsr2h	equ	0xFDA
 29369                           fsr2l	equ	0xFD9
 29370                           status	equ	0xFD8
 29371                           
 29372 ;; *************** function i2_Port_SetPin *****************
 29373 ;; Defined at:
 29374 ;;		line 247 in file "Library/Port.c"
 29375 ;; Parameters:    Size  Location     Type
 29376 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29377 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29378 ;;  pPin            1   17[COMRAM] enum E6750
 29379 ;;  pValue          1   18[COMRAM] unsigned char 
 29380 ;; Auto vars:     Size  Location     Type
 29381 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29382 ;; Return value:  Size  Location     Type
 29383 ;;                  1    wreg      void 
 29384 ;; Registers used:
 29385 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29386 ;; Tracked objects:
 29387 ;;		On entry : 0/0
 29388 ;;		On exit  : 0/0
 29389 ;;		Unchanged: 0/0
 29390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29391 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29394 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29395 ;;Total ram usage:        5 bytes
 29396 ;; Hardware stack levels used:    1
 29397 ;; Hardware stack levels required when called:    3
 29398 ;; This function calls:
 29399 ;;		i2_Byte_SetBit
 29400 ;;		i2_Word_GetPair
 29401 ;; This function is called by:
 29402 ;;		i2_Motor_Step
 29403 ;; This function uses a non-reentrant model
 29404 ;;
 29405                           
 29406                           	psect	text156
 29407  01417C                     __ptext156:
 29408                           	opt stack 0
 29409  01417C                     i2_Port_SetPin:
 29410                           	opt stack 14
 29411                           
 29412                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29413                           
 29414                           ;incstack = 0
 29415  01417C  0E08               	movlw	8
 29416  01417E  2410               	addwf	i2Port_SetPin@pInput,w,c
 29417  014180  6E0D               	movwf	i2Word_GetPair@pInput,c
 29418  014182  0E00               	movlw	0
 29419  014184  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29420  014186  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29421  014188  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29422  01418C  EC32  F0AE         	call	i2_Word_GetPair	;wreg free
 29423  014190  6E14               	movwf	i2Port_SetPin@Type,c
 29424                           
 29425                           ;Port.c: 250: switch (Type)
 29426  014192  D03B               	goto	i2l427
 29427  014194                     
 29428                           ;Port.c: 256: pValue &= 1;
 29429  014194  0E01               	movlw	1
 29430  014196  1613               	andwf	i2Port_SetPin@pValue,f,c
 29431                           
 29432                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29433  014198  EE20 F002          	lfsr	2,2
 29434  01419C  5010               	movf	i2Port_SetPin@pInput,w,c
 29435  01419E  26D9               	addwf	fsr2l,f,c
 29436  0141A0  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29437  0141A2  22DA               	addwfc	fsr2h,f,c
 29438  0141A4  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29439  0141A8  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29440  0141AC  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29441  0141B0  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29442  0141B4  ECDB  F0AA         	call	i2_Byte_SetBit	;wreg free
 29443                           
 29444                           ;Port.c: 258: break;
 29445  0141B8  0012               	return	
 29446  0141BA                     
 29447                           ;Port.c: 261: pValue &= 1;
 29448  0141BA  0E01               	movlw	1
 29449  0141BC  1613               	andwf	i2Port_SetPin@pValue,f,c
 29450                           
 29451                           ;Port.c: 262: pValue ^= 1;
 29452  0141BE  0E01               	movlw	1
 29453  0141C0  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29454                           
 29455                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29456  0141C2  EE20 F002          	lfsr	2,2
 29457  0141C6  5010               	movf	i2Port_SetPin@pInput,w,c
 29458  0141C8  26D9               	addwf	fsr2l,f,c
 29459  0141CA  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29460  0141CC  22DA               	addwfc	fsr2h,f,c
 29461  0141CE  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29462  0141D2  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29463  0141D6  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29464  0141DA  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29465  0141DE  ECDB  F0AA         	call	i2_Byte_SetBit	;wreg free
 29466                           
 29467                           ;Port.c: 264: break;
 29468  0141E2  0012               	return	
 29469  0141E4                     
 29470                           ;Port.c: 266: pValue &= 1;
 29471  0141E4  0E01               	movlw	1
 29472  0141E6  1613               	andwf	i2Port_SetPin@pValue,f,c
 29473                           
 29474                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29475  0141E8  EE20 F004          	lfsr	2,4
 29476  0141EC  5010               	movf	i2Port_SetPin@pInput,w,c
 29477  0141EE  26D9               	addwf	fsr2l,f,c
 29478  0141F0  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29479  0141F2  22DA               	addwfc	fsr2h,f,c
 29480  0141F4  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29481  0141F8  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29482  0141FC  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29483  014200  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29484  014204  ECDB  F0AA         	call	i2_Byte_SetBit	;wreg free
 29485                           
 29486                           ;Port.c: 269: }
 29487                           
 29488                           ;Port.c: 268: break;
 29489  014208  0012               	return	
 29490  01420A                     i2l427:
 29491  01420A  5014               	movf	i2Port_SetPin@Type,w,c
 29492                           
 29493                           ; Switch size 1, requested type "space"
 29494                           ; Number of cases is 4, Range of values is 0 to 3
 29495                           ; switch strategies available:
 29496                           ; Name         Instructions Cycles
 29497                           ; simple_byte           13     7 (average)
 29498                           ;	Chosen strategy is simple_byte
 29499  01420C  0A00               	xorlw	0	; case 0
 29500  01420E  B4D8               	btfsc	status,2,c
 29501  014210  0012               	return	
 29502  014212  0A01               	xorlw	1	; case 1
 29503  014214  B4D8               	btfsc	status,2,c
 29504  014216  D7BE               	goto	i2l430
 29505  014218  0A03               	xorlw	3	; case 2
 29506  01421A  B4D8               	btfsc	status,2,c
 29507  01421C  D7CE               	goto	i2l432
 29508  01421E  0A01               	xorlw	1	; case 3
 29509  014220  A4D8               	btfss	status,2,c
 29510  014222  0012               	return	
 29511  014224  D7DF               	goto	i2l433
 29512  014226                     __end_ofi2_Port_SetPin:
 29513                           	opt stack 0
 29514                           tosu	equ	0xFFF
 29515                           tosh	equ	0xFFE
 29516                           tosl	equ	0xFFD
 29517                           pclatu	equ	0xFFB
 29518                           pclath	equ	0xFFA
 29519                           tblptru	equ	0xFF8
 29520                           tblptrh	equ	0xFF7
 29521                           tblptrl	equ	0xFF6
 29522                           tablat	equ	0xFF5
 29523                           prodh	equ	0xFF4
 29524                           prodl	equ	0xFF3
 29525                           intcon	equ	0xFF2
 29526                           indf0	equ	0xFEF
 29527                           postinc0	equ	0xFEE
 29528                           fsr0h	equ	0xFEA
 29529                           fsr0l	equ	0xFE9
 29530                           wreg	equ	0xFE8
 29531                           indf1	equ	0xFE7
 29532                           postdec1	equ	0xFE5
 29533                           fsr1h	equ	0xFE2
 29534                           fsr1l	equ	0xFE1
 29535                           indf2	equ	0xFDF
 29536                           postinc2	equ	0xFDE
 29537                           postdec2	equ	0xFDD
 29538                           plusw2	equ	0xFDB
 29539                           fsr2h	equ	0xFDA
 29540                           fsr2l	equ	0xFD9
 29541                           status	equ	0xFD8
 29542                           
 29543 ;; *************** function i2_Word_GetPair *****************
 29544 ;; Defined at:
 29545 ;;		line 156 in file "Library/Types.c"
 29546 ;; Parameters:    Size  Location     Type
 29547 ;;  pInput          2   12[COMRAM] PTR struct Word
 29548 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29549 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29550 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29551 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29552 ;;  pPair           1   14[COMRAM] unsigned char 
 29553 ;; Auto vars:     Size  Location     Type
 29554 ;;		None
 29555 ;; Return value:  Size  Location     Type
 29556 ;;                  1    wreg      unsigned char 
 29557 ;; Registers used:
 29558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29559 ;; Tracked objects:
 29560 ;;		On entry : 0/0
 29561 ;;		On exit  : 0/0
 29562 ;;		Unchanged: 0/0
 29563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29564 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29567 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29568 ;;Total ram usage:        3 bytes
 29569 ;; Hardware stack levels used:    1
 29570 ;; Hardware stack levels required when called:    2
 29571 ;; This function calls:
 29572 ;;		i2_Byte_GetPair
 29573 ;; This function is called by:
 29574 ;;		i2_Port_SetPin
 29575 ;; This function uses a non-reentrant model
 29576 ;;
 29577                           
 29578                           	psect	text157
 29579  015C64                     __ptext157:
 29580                           	opt stack 0
 29581  015C64                     i2_Word_GetPair:
 29582                           	opt stack 14
 29583                           
 29584                           ;Types.c: 158: if (pPair >= 4)
 29585                           
 29586                           ;incstack = 0
 29587  015C64  0E03               	movlw	3
 29588  015C66  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29589  015C68  D00C               	goto	i2l781
 29590                           
 29591                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29592  015C6A  0E01               	movlw	1
 29593  015C6C  240D               	addwf	i2Word_GetPair@pInput,w,c
 29594  015C6E  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29595  015C70  0E00               	movlw	0
 29596  015C72  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29597  015C74  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29598  015C76  500F               	movf	i2Word_GetPair@pPair,w,c
 29599  015C78  0FFC               	addlw	252
 29600  015C7A  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29601  015C7C  EC7F  F0AF         	call	i2_Byte_GetPair	;wreg free
 29602  015C80  0012               	return	
 29603  015C82                     i2l781:
 29604                           
 29605                           ;Types.c: 160: else
 29606                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29607  015C82  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29608  015C86  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29609  015C8A  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29610  015C8E  EC7F  F0AF         	call	i2_Byte_GetPair	;wreg free
 29611  015C92  0012               	return	
 29612  015C94                     __end_ofi2_Word_GetPair:
 29613                           	opt stack 0
 29614                           tosu	equ	0xFFF
 29615                           tosh	equ	0xFFE
 29616                           tosl	equ	0xFFD
 29617                           pclatu	equ	0xFFB
 29618                           pclath	equ	0xFFA
 29619                           tblptru	equ	0xFF8
 29620                           tblptrh	equ	0xFF7
 29621                           tblptrl	equ	0xFF6
 29622                           tablat	equ	0xFF5
 29623                           prodh	equ	0xFF4
 29624                           prodl	equ	0xFF3
 29625                           intcon	equ	0xFF2
 29626                           indf0	equ	0xFEF
 29627                           postinc0	equ	0xFEE
 29628                           fsr0h	equ	0xFEA
 29629                           fsr0l	equ	0xFE9
 29630                           wreg	equ	0xFE8
 29631                           indf1	equ	0xFE7
 29632                           postdec1	equ	0xFE5
 29633                           fsr1h	equ	0xFE2
 29634                           fsr1l	equ	0xFE1
 29635                           indf2	equ	0xFDF
 29636                           postinc2	equ	0xFDE
 29637                           postdec2	equ	0xFDD
 29638                           plusw2	equ	0xFDB
 29639                           fsr2h	equ	0xFDA
 29640                           fsr2l	equ	0xFD9
 29641                           status	equ	0xFD8
 29642                           
 29643 ;; *************** function i2_Byte_GetPair *****************
 29644 ;; Defined at:
 29645 ;;		line 87 in file "Library/Types.c"
 29646 ;; Parameters:    Size  Location     Type
 29647 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29648 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29649 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29650 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29651 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29652 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29653 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29654 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29655 ;;		 -> NULL(0), 
 29656 ;;  pPair           1   11[COMRAM] unsigned char 
 29657 ;; Auto vars:     Size  Location     Type
 29658 ;;		None
 29659 ;; Return value:  Size  Location     Type
 29660 ;;                  1    wreg      unsigned char 
 29661 ;; Registers used:
 29662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29663 ;; Tracked objects:
 29664 ;;		On entry : 0/0
 29665 ;;		On exit  : 0/0
 29666 ;;		Unchanged: 0/0
 29667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29668 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29671 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29672 ;;Total ram usage:        3 bytes
 29673 ;; Hardware stack levels used:    1
 29674 ;; Hardware stack levels required when called:    1
 29675 ;; This function calls:
 29676 ;;		i2_Byte_GetZone
 29677 ;; This function is called by:
 29678 ;;		i2_Word_GetPair
 29679 ;; This function uses a non-reentrant model
 29680 ;;
 29681                           
 29682                           	psect	text158
 29683  015EFE                     __ptext158:
 29684                           	opt stack 0
 29685  015EFE                     i2_Byte_GetPair:
 29686                           	opt stack 14
 29687                           
 29688                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29689                           
 29690                           ;incstack = 0
 29691  015EFE  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 29692  015F02  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 29693  015F06  0E04               	movlw	4
 29694  015F08  6E03               	movwf	i2Byte_GetZone@pMax,c
 29695  015F0A  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 29696  015F0E  0E02               	movlw	2
 29697  015F10  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 29698  015F12  EC6E  F0A6         	call	i2_Byte_GetZone	;wreg free
 29699  015F16  0012               	return	
 29700  015F18                     __end_ofi2_Byte_GetPair:
 29701                           	opt stack 0
 29702                           tosu	equ	0xFFF
 29703                           tosh	equ	0xFFE
 29704                           tosl	equ	0xFFD
 29705                           pclatu	equ	0xFFB
 29706                           pclath	equ	0xFFA
 29707                           tblptru	equ	0xFF8
 29708                           tblptrh	equ	0xFF7
 29709                           tblptrl	equ	0xFF6
 29710                           tablat	equ	0xFF5
 29711                           prodh	equ	0xFF4
 29712                           prodl	equ	0xFF3
 29713                           intcon	equ	0xFF2
 29714                           indf0	equ	0xFEF
 29715                           postinc0	equ	0xFEE
 29716                           fsr0h	equ	0xFEA
 29717                           fsr0l	equ	0xFE9
 29718                           wreg	equ	0xFE8
 29719                           indf1	equ	0xFE7
 29720                           postdec1	equ	0xFE5
 29721                           fsr1h	equ	0xFE2
 29722                           fsr1l	equ	0xFE1
 29723                           indf2	equ	0xFDF
 29724                           postinc2	equ	0xFDE
 29725                           postdec2	equ	0xFDD
 29726                           plusw2	equ	0xFDB
 29727                           fsr2h	equ	0xFDA
 29728                           fsr2l	equ	0xFD9
 29729                           status	equ	0xFD8
 29730                           
 29731 ;; *************** function i2_Byte_GetZone *****************
 29732 ;; Defined at:
 29733 ;;		line 64 in file "Library/Types.c"
 29734 ;; Parameters:    Size  Location     Type
 29735 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29736 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29737 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29738 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29739 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29740 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29741 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29742 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29743 ;;		 -> NULL(0), 
 29744 ;;  pMax            1    2[COMRAM] unsigned char 
 29745 ;;  pChunk          1    3[COMRAM] unsigned char 
 29746 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 29747 ;; Auto vars:     Size  Location     Type
 29748 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 29749 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 29750 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 29751 ;; Return value:  Size  Location     Type
 29752 ;;                  1    wreg      unsigned char 
 29753 ;; Registers used:
 29754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29755 ;; Tracked objects:
 29756 ;;		On entry : 0/0
 29757 ;;		On exit  : 0/0
 29758 ;;		Unchanged: 0/0
 29759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29760 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29761 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29763 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29764 ;;Total ram usage:        9 bytes
 29765 ;; Hardware stack levels used:    1
 29766 ;; This function calls:
 29767 ;;		Nothing
 29768 ;; This function is called by:
 29769 ;;		i2_Byte_GetPair
 29770 ;; This function uses a non-reentrant model
 29771 ;;
 29772                           
 29773                           	psect	text159
 29774  014CDC                     __ptext159:
 29775                           	opt stack 0
 29776  014CDC                     i2_Byte_GetZone:
 29777                           	opt stack 14
 29778                           
 29779                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29780                           
 29781                           ;incstack = 0
 29782  014CDC  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 29783  014CE0  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 29784  014CE4  0E00               	movlw	low (__mediumconst shr (0+16))
 29785  014CE6  6EF8               	movwf	tblptru,c
 29786  014CE8  0E0F               	movlw	(high __ramtop+-1)
 29787  014CEA  64F7               	cpfsgt	tblptrh,c
 29788  014CEC  D003               	bra	i2u603_47
 29789  014CEE  0008               	tblrd		*
 29790  014CF0  50F5               	movf	tablat,w,c
 29791  014CF2  D005               	bra	i2u603_40
 29792  014CF4                     i2u603_47:
 29793  014CF4  CFF6 FFE9          	movff	tblptrl,fsr0l
 29794  014CF8  CFF7 FFEA          	movff	tblptrh,fsr0h
 29795  014CFC  50EF               	movf	indf0,w,c
 29796  014CFE                     i2u603_40:
 29797  014CFE  6E09               	movwf	i2Byte_GetZone@Output,c
 29798                           
 29799                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29800  014D00  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29801  014D02  0D01               	mullw	1
 29802  014D04  0E55               	movlw	low _MASKS
 29803  014D06  24F3               	addwf	prodl,w,c
 29804  014D08  6EF6               	movwf	tblptrl,c
 29805  014D0A  0EFC               	movlw	high _MASKS
 29806  014D0C  20F4               	addwfc	prodh,w,c
 29807  014D0E  6EF7               	movwf	tblptrh,c
 29808  014D10                     	if	1	;There are 3 active tblptr bytes
 29809  014D10  6AF8               	clrf	tblptru,c
 29810  014D12  0E00               	movlw	low (__mediumconst shr (0+16))
 29811  014D14  22F8               	addwfc	tblptru,f,c
 29812  014D16                     	endif
 29813  014D16  0008               	tblrd		*
 29814  014D18  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 29815                           
 29816                           ;Types.c: 68: UINT8 Offset = 0;
 29817  014D1C  0E00               	movlw	0
 29818  014D1E  6E08               	movwf	i2Byte_GetZone@Offset,c
 29819                           
 29820                           ;Types.c: 70: while (pChunk >= pMax)
 29821  014D20  D003               	goto	i2l732
 29822  014D22                     
 29823                           ;Types.c: 71: {
 29824                           ;Types.c: 72: pChunk -= pMax;
 29825  014D22  5003               	movf	i2Byte_GetZone@pMax,w,c
 29826  014D24  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 29827                           
 29828                           ;Types.c: 73: Offset += 1;
 29829  014D26  2A08               	incf	i2Byte_GetZone@Offset,f,c
 29830  014D28                     i2l732:
 29831  014D28  5003               	movf	i2Byte_GetZone@pMax,w,c
 29832  014D2A  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 29833  014D2C  B0D8               	btfsc	status,0,c
 29834  014D2E  D7F9               	goto	i2l733
 29835                           
 29836                           ;Types.c: 74: }
 29837                           ;Types.c: 75: pChunk *= pChunkSize;
 29838  014D30  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29839  014D32  0204               	mulwf	i2Byte_GetZone@pChunk,c
 29840  014D34  50F3               	movf	prodl,w,c
 29841  014D36  6E04               	movwf	i2Byte_GetZone@pChunk,c
 29842                           
 29843                           ;Types.c: 76: pChunk += Offset;
 29844  014D38  5008               	movf	i2Byte_GetZone@Offset,w,c
 29845  014D3A  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 29846                           
 29847                           ;Types.c: 78: Output >>= pChunk;
 29848  014D3C  2804               	incf	i2Byte_GetZone@pChunk,w,c
 29849  014D3E  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 29850  014D40  D002               	goto	i2u605_40
 29851  014D42                     i2u605_45:
 29852  014D42  90D8               	bcf	status,0,c
 29853  014D44  3209               	rrcf	i2Byte_GetZone@Output,f,c
 29854  014D46                     i2u605_40:
 29855  014D46  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 29856  014D48  D7FC               	goto	i2u605_45
 29857                           
 29858                           ;Types.c: 79: Output &= MASK;
 29859  014D4A  5007               	movf	i2Byte_GetZone@MASK,w,c
 29860  014D4C  1609               	andwf	i2Byte_GetZone@Output,f,c
 29861                           
 29862                           ;Types.c: 80: return Output;
 29863  014D4E  5009               	movf	i2Byte_GetZone@Output,w,c
 29864  014D50  0012               	return	
 29865  014D52                     __end_ofi2_Byte_GetZone:
 29866                           	opt stack 0
 29867                           tosu	equ	0xFFF
 29868                           tosh	equ	0xFFE
 29869                           tosl	equ	0xFFD
 29870                           pclatu	equ	0xFFB
 29871                           pclath	equ	0xFFA
 29872                           tblptru	equ	0xFF8
 29873                           tblptrh	equ	0xFF7
 29874                           tblptrl	equ	0xFF6
 29875                           tablat	equ	0xFF5
 29876                           prodh	equ	0xFF4
 29877                           prodl	equ	0xFF3
 29878                           intcon	equ	0xFF2
 29879                           indf0	equ	0xFEF
 29880                           postinc0	equ	0xFEE
 29881                           fsr0h	equ	0xFEA
 29882                           fsr0l	equ	0xFE9
 29883                           wreg	equ	0xFE8
 29884                           indf1	equ	0xFE7
 29885                           postdec1	equ	0xFE5
 29886                           fsr1h	equ	0xFE2
 29887                           fsr1l	equ	0xFE1
 29888                           indf2	equ	0xFDF
 29889                           postinc2	equ	0xFDE
 29890                           postdec2	equ	0xFDD
 29891                           plusw2	equ	0xFDB
 29892                           fsr2h	equ	0xFDA
 29893                           fsr2l	equ	0xFD9
 29894                           status	equ	0xFD8
 29895                           
 29896 ;; *************** function i2_Byte_SetBit *****************
 29897 ;; Defined at:
 29898 ;;		line 32 in file "Library/Types.c"
 29899 ;; Parameters:    Size  Location     Type
 29900 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29901 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 29902 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 29903 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 29904 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 29905 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 29906 ;;		 -> NULL(0), 
 29907 ;;  pBit            1    2[COMRAM] unsigned char 
 29908 ;;  pValue          1    3[COMRAM] unsigned char 
 29909 ;; Auto vars:     Size  Location     Type
 29910 ;;		None
 29911 ;; Return value:  Size  Location     Type
 29912 ;;                  1    wreg      void 
 29913 ;; Registers used:
 29914 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29915 ;; Tracked objects:
 29916 ;;		On entry : 0/0
 29917 ;;		On exit  : 0/0
 29918 ;;		Unchanged: 0/0
 29919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29920 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29922 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29923 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29924 ;;Total ram usage:        7 bytes
 29925 ;; Hardware stack levels used:    1
 29926 ;; This function calls:
 29927 ;;		Nothing
 29928 ;; This function is called by:
 29929 ;;		i2_Port_SetPin
 29930 ;; This function uses a non-reentrant model
 29931 ;;
 29932                           
 29933                           	psect	text160
 29934  0155B6                     __ptext160:
 29935                           	opt stack 0
 29936  0155B6                     i2_Byte_SetBit:
 29937                           	opt stack 16
 29938                           
 29939                           ;Types.c: 34: pValue &= 1;
 29940                           
 29941                           ;incstack = 0
 29942  0155B6  0E01               	movlw	1
 29943  0155B8  1604               	andwf	i2Byte_SetBit@pValue,f,c
 29944                           
 29945                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 29946  0155BA  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 29947  0155BE  0E01               	movlw	1
 29948  0155C0  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 29949  0155C2  2A05               	incf	??i2_Byte_SetBit,f,c
 29950  0155C4  D002               	goto	i2u692_44
 29951  0155C6                     i2u692_45:
 29952  0155C6  90D8               	bcf	status,0,c
 29953  0155C8  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 29954  0155CA                     i2u692_44:
 29955  0155CA  2E05               	decfsz	??i2_Byte_SetBit,f,c
 29956  0155CC  D7FC               	goto	i2u692_45
 29957  0155CE  5006               	movf	??i2_Byte_SetBit+1,w,c
 29958  0155D0  0AFF               	xorlw	255
 29959  0155D2  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 29960  0155D4  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 29961  0155D8  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 29962  0155DC  5007               	movf	??i2_Byte_SetBit+2,w,c
 29963  0155DE  16DF               	andwf	indf2,f,c
 29964                           
 29965                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 29966  0155E0  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 29967  0155E4  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 29968  0155E8  2A05               	incf	??i2_Byte_SetBit,f,c
 29969  0155EA  D002               	goto	i2u693_44
 29970  0155EC                     i2u693_45:
 29971  0155EC  90D8               	bcf	status,0,c
 29972  0155EE  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 29973  0155F0                     i2u693_44:
 29974  0155F0  2E05               	decfsz	??i2_Byte_SetBit,f,c
 29975  0155F2  D7FC               	goto	i2u693_45
 29976  0155F4  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 29977  0155F8  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 29978  0155FC  5006               	movf	??i2_Byte_SetBit+1,w,c
 29979  0155FE  12DF               	iorwf	indf2,f,c
 29980  015600  0012               	return		;funcret
 29981  015602                     __end_ofi2_Byte_SetBit:
 29982                           	opt stack 0
 29983                           tosu	equ	0xFFF
 29984                           tosh	equ	0xFFE
 29985                           tosl	equ	0xFFD
 29986                           pclatu	equ	0xFFB
 29987                           pclath	equ	0xFFA
 29988                           tblptru	equ	0xFF8
 29989                           tblptrh	equ	0xFF7
 29990                           tblptrl	equ	0xFF6
 29991                           tablat	equ	0xFF5
 29992                           prodh	equ	0xFF4
 29993                           prodl	equ	0xFF3
 29994                           intcon	equ	0xFF2
 29995                           indf0	equ	0xFEF
 29996                           postinc0	equ	0xFEE
 29997                           fsr0h	equ	0xFEA
 29998                           fsr0l	equ	0xFE9
 29999                           wreg	equ	0xFE8
 30000                           indf1	equ	0xFE7
 30001                           postdec1	equ	0xFE5
 30002                           fsr1h	equ	0xFE2
 30003                           fsr1l	equ	0xFE1
 30004                           indf2	equ	0xFDF
 30005                           postinc2	equ	0xFDE
 30006                           postdec2	equ	0xFDD
 30007                           plusw2	equ	0xFDB
 30008                           fsr2h	equ	0xFDA
 30009                           fsr2l	equ	0xFD9
 30010                           status	equ	0xFD8
 30011                           
 30012 ;; *************** function i2_MXK_SwitchTo *****************
 30013 ;; Defined at:
 30014 ;;		line 105 in file "Library/MXK.c"
 30015 ;; Parameters:    Size  Location     Type
 30016 ;;  pModule         1    wreg     enum E6927
 30017 ;; Auto vars:     Size  Location     Type
 30018 ;;  pModule         1    7[COMRAM] enum E6927
 30019 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30020 ;; Return value:  Size  Location     Type
 30021 ;;                  1    wreg      unsigned char 
 30022 ;; Registers used:
 30023 ;;		wreg, status,2, status,0, cstack
 30024 ;; Tracked objects:
 30025 ;;		On entry : 0/0
 30026 ;;		On exit  : 0/0
 30027 ;;		Unchanged: 0/0
 30028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30032 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30033 ;;Total ram usage:        2 bytes
 30034 ;; Hardware stack levels used:    1
 30035 ;; Hardware stack levels required when called:    1
 30036 ;; This function calls:
 30037 ;;		i2_delay_us
 30038 ;; This function is called by:
 30039 ;;		i2_Motor_Step
 30040 ;; This function uses a non-reentrant model
 30041 ;;
 30042                           
 30043                           	psect	text161
 30044  015AD4                     __ptext161:
 30045                           	opt stack 0
 30046  015AD4                     i2_MXK_SwitchTo:
 30047                           	opt stack 16
 30048                           
 30049                           ;incstack = 0
 30050                           ;i2MXK_SwitchTo@pModule stored from wreg
 30051  015AD4  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30052                           
 30053                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30054  015AD6  5086               	movf	3974,w,c	;volatile
 30055  015AD8  0B0F               	andlw	15
 30056  015ADA  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30057                           
 30058                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30059  015ADC  504D               	movf	_Bus_State,w,c
 30060  015ADE  A4D8               	btfss	status,2,c
 30061  015AE0  D002               	goto	i2l1730
 30062                           
 30063                           ;MXK.c: 110: return 0;
 30064  015AE2  0E00               	movlw	0
 30065  015AE4  0012               	return	
 30066  015AE6                     i2l1730:
 30067                           
 30068                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30069  015AE6  0E00               	movlw	0
 30070  015AE8  6E4D               	movwf	_Bus_State,c
 30071                           
 30072                           ;MXK.c: 114: if (CUR != pModule)
 30073  015AEA  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30074  015AEC  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30075  015AEE  B4D8               	btfsc	status,2,c
 30076  015AF0  D00A               	goto	i2l1732
 30077                           
 30078                           ;MXK.c: 115: {
 30079                           ;MXK.c: 116: PORTG &= ~(0xF);
 30080  015AF2  0EF0               	movlw	240
 30081  015AF4  1686               	andwf	3974,f,c	;volatile
 30082                           
 30083                           ;MXK.c: 117: PORTG |= pModule;
 30084  015AF6  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30085  015AF8  1286               	iorwf	3974,f,c	;volatile
 30086                           
 30087                           ;MXK.c: 120: delay_us(10);
 30088  015AFA  0E00               	movlw	0
 30089  015AFC  6E02               	movwf	i2delay_us@us+1,c
 30090  015AFE  0E0A               	movlw	10
 30091  015B00  6E01               	movwf	i2delay_us@us,c
 30092  015B02  EC60  F0AC         	call	i2_delay_us	;wreg free
 30093  015B06                     i2l1732:
 30094                           
 30095                           ;MXK.c: 121: }
 30096                           ;MXK.c: 122: return 1;
 30097  015B06  0E01               	movlw	1
 30098  015B08  0012               	return	
 30099  015B0A                     __end_ofi2_MXK_SwitchTo:
 30100                           	opt stack 0
 30101                           tosu	equ	0xFFF
 30102                           tosh	equ	0xFFE
 30103                           tosl	equ	0xFFD
 30104                           pclatu	equ	0xFFB
 30105                           pclath	equ	0xFFA
 30106                           tblptru	equ	0xFF8
 30107                           tblptrh	equ	0xFF7
 30108                           tblptrl	equ	0xFF6
 30109                           tablat	equ	0xFF5
 30110                           prodh	equ	0xFF4
 30111                           prodl	equ	0xFF3
 30112                           intcon	equ	0xFF2
 30113                           indf0	equ	0xFEF
 30114                           postinc0	equ	0xFEE
 30115                           fsr0h	equ	0xFEA
 30116                           fsr0l	equ	0xFE9
 30117                           wreg	equ	0xFE8
 30118                           indf1	equ	0xFE7
 30119                           postdec1	equ	0xFE5
 30120                           fsr1h	equ	0xFE2
 30121                           fsr1l	equ	0xFE1
 30122                           indf2	equ	0xFDF
 30123                           postinc2	equ	0xFDE
 30124                           postdec2	equ	0xFDD
 30125                           plusw2	equ	0xFDB
 30126                           fsr2h	equ	0xFDA
 30127                           fsr2l	equ	0xFD9
 30128                           status	equ	0xFD8
 30129                           
 30130 ;; *************** function i2_delay_us *****************
 30131 ;; Defined at:
 30132 ;;		line 255 in file "Library/Types.c"
 30133 ;; Parameters:    Size  Location     Type
 30134 ;;  us              2    0[COMRAM] unsigned short 
 30135 ;; Auto vars:     Size  Location     Type
 30136 ;;  delay_us        4    2[COMRAM] unsigned long 
 30137 ;; Return value:  Size  Location     Type
 30138 ;;                  1    wreg      void 
 30139 ;; Registers used:
 30140 ;;		wreg, status,2, status,0
 30141 ;; Tracked objects:
 30142 ;;		On entry : 0/0
 30143 ;;		On exit  : 0/0
 30144 ;;		Unchanged: 0/0
 30145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30146 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30147 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30149 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30150 ;;Total ram usage:        6 bytes
 30151 ;; Hardware stack levels used:    1
 30152 ;; This function calls:
 30153 ;;		Nothing
 30154 ;; This function is called by:
 30155 ;;		i2_MXK_SwitchTo
 30156 ;; This function uses a non-reentrant model
 30157 ;;
 30158                           
 30159                           	psect	text162
 30160  0158C0                     __ptext162:
 30161                           	opt stack 0
 30162  0158C0                     i2_delay_us:
 30163                           	opt stack 16
 30164                           
 30165                           ;Types.c: 256: unsigned long u;
 30166                           ;Types.c: 257: while (us--) {
 30167                           
 30168                           ;incstack = 0
 30169  0158C0  D016               	goto	i2u696_40
 30170  0158C2                     i2l9623:
 30171                           
 30172                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30173  0158C2  0E00               	movlw	0
 30174  0158C4  6E03               	movwf	i2delay_us@u,c
 30175  0158C6  0E00               	movlw	0
 30176  0158C8  6E04               	movwf	i2delay_us@u+1,c
 30177  0158CA  0E00               	movlw	0
 30178  0158CC  6E05               	movwf	i2delay_us@u+2,c
 30179  0158CE  0E00               	movlw	0
 30180  0158D0  6E06               	movwf	i2delay_us@u+3,c
 30181  0158D2                     i2l9625:
 30182  0158D2  5003               	movf	i2delay_us@u,w,c
 30183  0158D4  1004               	iorwf	i2delay_us@u+1,w,c
 30184  0158D6  1005               	iorwf	i2delay_us@u+2,w,c
 30185  0158D8  1006               	iorwf	i2delay_us@u+3,w,c
 30186  0158DA  A4D8               	btfss	status,2,c
 30187  0158DC  D008               	goto	i2u696_40
 30188  0158DE  F000               	nop		; ;# 
 30189  0158E0  0E01               	movlw	1
 30190  0158E2  2603               	addwf	i2delay_us@u,f,c
 30191  0158E4  0E00               	movlw	0
 30192  0158E6  2204               	addwfc	i2delay_us@u+1,f,c
 30193  0158E8  2205               	addwfc	i2delay_us@u+2,f,c
 30194  0158EA  2206               	addwfc	i2delay_us@u+3,f,c
 30195  0158EC  D7F2               	goto	i2l9625
 30196  0158EE                     i2u696_40:
 30197  0158EE  0601               	decf	i2delay_us@us,f,c
 30198  0158F0  A0D8               	btfss	status,0,c
 30199  0158F2  0602               	decf	i2delay_us@us+1,f,c
 30200  0158F4  2801               	incf	i2delay_us@us,w,c
 30201  0158F6  E1E5               	bnz	i2l9623
 30202  0158F8  2802               	incf	i2delay_us@us+1,w,c
 30203  0158FA  B4D8               	btfsc	status,2,c
 30204  0158FC  0012               	return	
 30205  0158FE  D7E1               	goto	i2l832
 30206  015900                     __end_ofi2_delay_us:
 30207                           	opt stack 0
 30208                           tosu	equ	0xFFF
 30209                           tosh	equ	0xFFE
 30210                           tosl	equ	0xFFD
 30211                           pclatu	equ	0xFFB
 30212                           pclath	equ	0xFFA
 30213                           tblptru	equ	0xFF8
 30214                           tblptrh	equ	0xFF7
 30215                           tblptrl	equ	0xFF6
 30216                           tablat	equ	0xFF5
 30217                           prodh	equ	0xFF4
 30218                           prodl	equ	0xFF3
 30219                           intcon	equ	0xFF2
 30220                           indf0	equ	0xFEF
 30221                           postinc0	equ	0xFEE
 30222                           fsr0h	equ	0xFEA
 30223                           fsr0l	equ	0xFE9
 30224                           wreg	equ	0xFE8
 30225                           indf1	equ	0xFE7
 30226                           postdec1	equ	0xFE5
 30227                           fsr1h	equ	0xFE2
 30228                           fsr1l	equ	0xFE1
 30229                           indf2	equ	0xFDF
 30230                           postinc2	equ	0xFDE
 30231                           postdec2	equ	0xFDD
 30232                           plusw2	equ	0xFDB
 30233                           fsr2h	equ	0xFDA
 30234                           fsr2l	equ	0xFD9
 30235                           status	equ	0xFD8
 30236                           
 30237 ;; *************** function i2_MXK_Release *****************
 30238 ;; Defined at:
 30239 ;;		line 130 in file "Library/MXK.c"
 30240 ;; Parameters:    Size  Location     Type
 30241 ;;		None
 30242 ;; Auto vars:     Size  Location     Type
 30243 ;;		None
 30244 ;; Return value:  Size  Location     Type
 30245 ;;                  1    wreg      unsigned char 
 30246 ;; Registers used:
 30247 ;;		wreg, status,2, status,0
 30248 ;; Tracked objects:
 30249 ;;		On entry : 0/0
 30250 ;;		On exit  : 0/0
 30251 ;;		Unchanged: 0/0
 30252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30257 ;;Total ram usage:        0 bytes
 30258 ;; Hardware stack levels used:    1
 30259 ;; This function calls:
 30260 ;;		Nothing
 30261 ;; This function is called by:
 30262 ;;		i2_Motor_Step
 30263 ;; This function uses a non-reentrant model
 30264 ;;
 30265                           
 30266                           	psect	text163
 30267  01615C                     __ptext163:
 30268                           	opt stack 0
 30269  01615C                     i2_MXK_Release:
 30270                           	opt stack 17
 30271                           
 30272                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30273                           
 30274                           ;incstack = 0
 30275  01615C  0E01               	movlw	1
 30276  01615E  6E4D               	movwf	_Bus_State,c
 30277                           
 30278                           ;MXK.c: 135: return 1;
 30279                           ;	Return value of i2_MXK_Release is never used
 30280  016160  0012               	return	
 30281  016162                     __end_ofi2_MXK_Release:
 30282                           	opt stack 0
 30283                           tosu	equ	0xFFF
 30284                           tosh	equ	0xFFE
 30285                           tosl	equ	0xFFD
 30286                           pclatu	equ	0xFFB
 30287                           pclath	equ	0xFFA
 30288                           tblptru	equ	0xFF8
 30289                           tblptrh	equ	0xFF7
 30290                           tblptrl	equ	0xFF6
 30291                           tablat	equ	0xFF5
 30292                           prodh	equ	0xFF4
 30293                           prodl	equ	0xFF3
 30294                           intcon	equ	0xFF2
 30295                           indf0	equ	0xFEF
 30296                           postinc0	equ	0xFEE
 30297                           fsr0h	equ	0xFEA
 30298                           fsr0l	equ	0xFE9
 30299                           wreg	equ	0xFE8
 30300                           indf1	equ	0xFE7
 30301                           postdec1	equ	0xFE5
 30302                           fsr1h	equ	0xFE2
 30303                           fsr1l	equ	0xFE1
 30304                           indf2	equ	0xFDF
 30305                           postinc2	equ	0xFDE
 30306                           postdec2	equ	0xFDD
 30307                           plusw2	equ	0xFDB
 30308                           fsr2h	equ	0xFDA
 30309                           fsr2l	equ	0xFD9
 30310                           status	equ	0xFD8
 30311                           
 30312 ;; *************** function i2_MXK_Queue *****************
 30313 ;; Defined at:
 30314 ;;		line 144 in file "Library/MXK.c"
 30315 ;; Parameters:    Size  Location     Type
 30316 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30317 ;;		 -> Absolute function(1), Motor_Step(1), 
 30318 ;; Auto vars:     Size  Location     Type
 30319 ;;		None
 30320 ;; Return value:  Size  Location     Type
 30321 ;;                  1    wreg      void 
 30322 ;; Registers used:
 30323 ;;		wreg, status,2, status,0
 30324 ;; Tracked objects:
 30325 ;;		On entry : 0/0
 30326 ;;		On exit  : 0/0
 30327 ;;		Unchanged: 0/0
 30328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30329 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30332 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30333 ;;Total ram usage:        3 bytes
 30334 ;; Hardware stack levels used:    1
 30335 ;; This function calls:
 30336 ;;		Nothing
 30337 ;; This function is called by:
 30338 ;;		i2_Motor_Step
 30339 ;; This function uses a non-reentrant model
 30340 ;;
 30341                           
 30342                           	psect	text164
 30343  0160F6                     __ptext164:
 30344                           	opt stack 0
 30345  0160F6                     i2_MXK_Queue:
 30346                           	opt stack 17
 30347                           
 30348                           ;MXK.c: 146: lQueue = pCallback;
 30349                           
 30350                           ;incstack = 0
 30351  0160F6  C001  F0E6         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30352  0160FA  C002  F0E7         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30353  0160FE  C003  F0E8         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30354  016102  0012               	return		;funcret
 30355  016104                     __end_ofi2_MXK_Queue:
 30356                           	opt stack 0
 30357                           tosu	equ	0xFFF
 30358                           tosh	equ	0xFFE
 30359                           tosl	equ	0xFFD
 30360                           pclatu	equ	0xFFB
 30361                           pclath	equ	0xFFA
 30362                           tblptru	equ	0xFF8
 30363                           tblptrh	equ	0xFF7
 30364                           tblptrl	equ	0xFF6
 30365                           tablat	equ	0xFF5
 30366                           prodh	equ	0xFF4
 30367                           prodl	equ	0xFF3
 30368                           intcon	equ	0xFF2
 30369                           indf0	equ	0xFEF
 30370                           postinc0	equ	0xFEE
 30371                           fsr0h	equ	0xFEA
 30372                           fsr0l	equ	0xFE9
 30373                           wreg	equ	0xFE8
 30374                           indf1	equ	0xFE7
 30375                           postdec1	equ	0xFE5
 30376                           fsr1h	equ	0xFE2
 30377                           fsr1l	equ	0xFE1
 30378                           indf2	equ	0xFDF
 30379                           postinc2	equ	0xFDE
 30380                           postdec2	equ	0xFDD
 30381                           plusw2	equ	0xFDB
 30382                           fsr2h	equ	0xFDA
 30383                           fsr2l	equ	0xFD9
 30384                           status	equ	0xFD8
 30385                           tosu	equ	0xFFF
 30386                           tosh	equ	0xFFE
 30387                           tosl	equ	0xFFD
 30388                           pclatu	equ	0xFFB
 30389                           pclath	equ	0xFFA
 30390                           tblptru	equ	0xFF8
 30391                           tblptrh	equ	0xFF7
 30392                           tblptrl	equ	0xFF6
 30393                           tablat	equ	0xFF5
 30394                           prodh	equ	0xFF4
 30395                           prodl	equ	0xFF3
 30396                           intcon	equ	0xFF2
 30397                           indf0	equ	0xFEF
 30398                           postinc0	equ	0xFEE
 30399                           fsr0h	equ	0xFEA
 30400                           fsr0l	equ	0xFE9
 30401                           wreg	equ	0xFE8
 30402                           indf1	equ	0xFE7
 30403                           postdec1	equ	0xFE5
 30404                           fsr1h	equ	0xFE2
 30405                           fsr1l	equ	0xFE1
 30406                           indf2	equ	0xFDF
 30407                           postinc2	equ	0xFDE
 30408                           postdec2	equ	0xFDD
 30409                           plusw2	equ	0xFDB
 30410                           fsr2h	equ	0xFDA
 30411                           fsr2l	equ	0xFD9
 30412                           status	equ	0xFD8
 30413                           
 30414                           	psect	text165
 30415  000000                     __ptext165:
 30416                           	opt stack 0
 30417                           tosu	equ	0xFFF
 30418                           tosh	equ	0xFFE
 30419                           tosl	equ	0xFFD
 30420                           pclatu	equ	0xFFB
 30421                           pclath	equ	0xFFA
 30422                           tblptru	equ	0xFF8
 30423                           tblptrh	equ	0xFF7
 30424                           tblptrl	equ	0xFF6
 30425                           tablat	equ	0xFF5
 30426                           prodh	equ	0xFF4
 30427                           prodl	equ	0xFF3
 30428                           intcon	equ	0xFF2
 30429                           indf0	equ	0xFEF
 30430                           postinc0	equ	0xFEE
 30431                           fsr0h	equ	0xFEA
 30432                           fsr0l	equ	0xFE9
 30433                           wreg	equ	0xFE8
 30434                           indf1	equ	0xFE7
 30435                           postdec1	equ	0xFE5
 30436                           fsr1h	equ	0xFE2
 30437                           fsr1l	equ	0xFE1
 30438                           indf2	equ	0xFDF
 30439                           postinc2	equ	0xFDE
 30440                           postdec2	equ	0xFDD
 30441                           plusw2	equ	0xFDB
 30442                           fsr2h	equ	0xFDA
 30443                           fsr2l	equ	0xFD9
 30444                           status	equ	0xFD8
 30445                           
 30446                           	psect	rparam
 30447  0000                     tosu	equ	0xFFF
 30448                           tosh	equ	0xFFE
 30449                           tosl	equ	0xFFD
 30450                           pclatu	equ	0xFFB
 30451                           pclath	equ	0xFFA
 30452                           tblptru	equ	0xFF8
 30453                           tblptrh	equ	0xFF7
 30454                           tblptrl	equ	0xFF6
 30455                           tablat	equ	0xFF5
 30456                           prodh	equ	0xFF4
 30457                           prodl	equ	0xFF3
 30458                           intcon	equ	0xFF2
 30459                           indf0	equ	0xFEF
 30460                           postinc0	equ	0xFEE
 30461                           fsr0h	equ	0xFEA
 30462                           fsr0l	equ	0xFE9
 30463                           wreg	equ	0xFE8
 30464                           indf1	equ	0xFE7
 30465                           postdec1	equ	0xFE5
 30466                           fsr1h	equ	0xFE2
 30467                           fsr1l	equ	0xFE1
 30468                           indf2	equ	0xFDF
 30469                           postinc2	equ	0xFDE
 30470                           postdec2	equ	0xFDD
 30471                           plusw2	equ	0xFDB
 30472                           fsr2h	equ	0xFDA
 30473                           fsr2l	equ	0xFD9
 30474                           status	equ	0xFD8
 30475                           
 30476                           	psect	temp
 30477  000051                     btemp:
 30478                           	opt stack 0
 30479  000051                     	ds	1
 30480  0000                     int$flags	set	btemp
 30481  0000                     wtemp6	set	btemp+1
 30482                           tosu	equ	0xFFF
 30483                           tosh	equ	0xFFE
 30484                           tosl	equ	0xFFD
 30485                           pclatu	equ	0xFFB
 30486                           pclath	equ	0xFFA
 30487                           tblptru	equ	0xFF8
 30488                           tblptrh	equ	0xFF7
 30489                           tblptrl	equ	0xFF6
 30490                           tablat	equ	0xFF5
 30491                           prodh	equ	0xFF4
 30492                           prodl	equ	0xFF3
 30493                           intcon	equ	0xFF2
 30494                           indf0	equ	0xFEF
 30495                           postinc0	equ	0xFEE
 30496                           fsr0h	equ	0xFEA
 30497                           fsr0l	equ	0xFE9
 30498                           wreg	equ	0xFE8
 30499                           indf1	equ	0xFE7
 30500                           postdec1	equ	0xFE5
 30501                           fsr1h	equ	0xFE2
 30502                           fsr1l	equ	0xFE1
 30503                           indf2	equ	0xFDF
 30504                           postinc2	equ	0xFDE
 30505                           postdec2	equ	0xFDD
 30506                           plusw2	equ	0xFDB
 30507                           fsr2h	equ	0xFDA
 30508                           fsr2l	equ	0xFD9
 30509                           status	equ	0xFD8


Data Sizes:
    Strings     352
    Constant    806
    Data        33
    BSS         824
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    134     150
    BANK1           256      0     250
    BANK2           256      0     251
    BANK3           256     24      24
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK1[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_71(CODE[19]), STR_70(CODE[19]), STR_69(CODE[19]), STR_68(CODE[19]), 
		 -> STR_67(CODE[19]), STR_66(CODE[19]), STR_65(CODE[19]), STR_64(CODE[19]), 
		 -> STR_63(CODE[16]), STR_62(CODE[28]), STR_61(CODE[3]), STR_60(CODE[19]), 
		 -> STR_59(CODE[19]), STR_58(CODE[19]), STR_57(CODE[19]), STR_56(CODE[19]), 
		 -> STR_55(CODE[19]), STR_54(CODE[19]), STR_53(CODE[19]), STR_52(CODE[11]), 
		 -> STR_51(CODE[23]), STR_50(CODE[3]), STR_49(CODE[19]), STR_48(CODE[19]), 
		 -> STR_47(CODE[19]), STR_46(CODE[19]), STR_45(CODE[19]), STR_44(CODE[19]), 
		 -> STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[22]), STR_40(CODE[3]), 
		 -> STR_39(CODE[19]), STR_38(CODE[19]), STR_37(CODE[19]), STR_36(CODE[19]), 
		 -> STR_35(CODE[28]), STR_34(CODE[28]), STR_33(CODE[27]), STR_32(CODE[28]), 
		 -> STR_31(CODE[15]), STR_30(CODE[3]), STR_29(CODE[21]), STR_28(CODE[3]), 
		 -> STR_27(CODE[19]), STR_26(CODE[28]), STR_25(CODE[20]), STR_24(CODE[3]), 
		 -> STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[19]), STR_20(CODE[19]), 
		 -> STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[16]), STR_16(CODE[19]), 
		 -> STR_15(CODE[3]), STR_14(CODE[19]), STR_13(CODE[28]), STR_12(CODE[20]), 
		 -> STR_11(CODE[3]), STR_10(CODE[19]), STR_9(CODE[19]), STR_8(CODE[19]), 
		 -> STR_7(CODE[19]), STR_6(CODE[19]), STR_5(CODE[19]), STR_4(CODE[19]), 
		 -> STR_3(CODE[16]), STR_2(CODE[19]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_Sensor_Observe
    _main->_Sensor_Observe2
    _UpdateDistance->_delay_ms
    _Turn->_delay_ms
    _Sensor_Observe2->_ADCAverage
    _Sensor_Observe->_ADCAverage
    _Robot_Init->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _LEDOn->_eusartSend
    _LEDOff->_eusartSend
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _Get_Sensor_State->_eusartSend
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Drive->_eusartSend
    _Closest_Object2->_ADCAverage
    _SteppingCW->_delay_ms
    _Closest_Object->_ADCAverage
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _SteppingCCW->_delay_ms
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _BangBang->_eusartSend

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_ADCAverage
    _Sensor_Observe2->_ADCAverage
    _Sensor_Observe->_ADCAverage
    _Closest_Object2->_ADCAverage
    _Closest_Object->_ADCAverage

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0 2032598
                                            123 BANK0     11    11      0
                         _ADCAverage
                           _BangBang
                     _Closest_Object
                    _Closest_Object2
                       _Console_Init
                     _Console_Render
                              _Drive
                    _FunctInitButton
                   _Get_Sensor_State
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                          _LEDToggle
                           _LED_Init
                            _LED_Set
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                    _Reset_variables
                         _Robot_Init
                         _Robot_Stop
                     _Sensor_Observe
                    _Sensor_Observe2
                               _Turn
                     _UpdateDistance
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _UpdateDistance                                       4     2      2    3021
                                              6 BANK0      4     2      2
                           _delay_ms
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Turn                                                 6     4      2    3303
                                              6 BANK0      6     4      2
                           _delay_ms
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe2                                      2     2      0  157600
                                            121 BANK0      2     2      0
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe                                       2     2      0  157600
                                            121 BANK0      2     2      0
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      62
                         _Robot_Stop
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Reset_variables                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  364744
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   86131
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   31288
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LEDToggle                                            0     0      0      62
                             _LEDOff
                              _LEDOn
 ---------------------------------------------------------------------------------
 (2) _LEDOn                                                0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _LEDOff                                               0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  294164
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  263485
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   96109
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84861
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84861
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37493
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Get_Sensor_State                                     0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Drive                                                4     2      2     462
                                              1 BANK0      4     2      2
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Closest_Object2                                      0     0      0  157600
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SteppingCW                                           0     0      0    2990
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _Closest_Object                                       0     0      0  157600
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4   15388
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SteppingCCW                                          0     0      0    2990
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    2990
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _STP4                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _STP3                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _STP2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _STP1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADCAverage                                          26    26      0  103895
                                            119 BANK0      2     2      0
                                              0 BANK3     24    24      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   81724
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   26512
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43838
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   11207
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4    1692
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4     945
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   12261
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    5457
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    6271
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    5638
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetNumber                                        2     0      2    4398
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (4) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (5) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _BangBang                                             8     0      8    3195
                                              1 BANK0      8     0      8
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _BangBang
     _eusartSend
   _Closest_Object
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Closest_Object2
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Drive
     _eusartSend
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _Get_Sensor_State
     _eusartSend
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LEDToggle *
     _LEDOff
       _eusartSend
     _LEDOn
       _eusartSend
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _LED_Set *
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Reset_variables *
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _eusartSend
   _Robot_Stop *
     _eusartSend
   _Sensor_Observe *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Sensor_Observe2 *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Turn *
     _delay_ms
     _eusartSend
   _UpdateDistance *
     _delay_ms
     _eusartSend
   _delay_ms *
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     18      18      11        9.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FB       9       98.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FA       7       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      96       5       93.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2F3      12        0.0%
DATA                 0      0     41F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu May 10 11:00:07 2018

                   i2_Timer0_Stop 6156                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 0038                      i2_Motor_Step 3BEE  
                               _A 01F7                                 l8 405A  
                    ___fldiv@aexp 0078                      ___fldiv@bexp 0077  
                               _a 01F8                                 _i 0142  
                               _j 0141                                 _l 004F  
                               _u 0140                                 _w 0050  
                               _x 0120                      ___fldiv@sign 006C  
               ??_Reset_variables 0060                                l11 34CE  
                              l12 34BC                                l90 3192  
                              l87 310C               __size_of_ADCAverage 02EC  
                              l89 316C                  ??_UpdateDistance 0068  
                    ___awdiv@sign 0065               ___wmul@multiplicand 0062  
                   _HMI_DIPSwitch 5FD2                LCD_DrawField@pSize 0078  
              LCD_DrawField@count 007E                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 611C                               l120 4566  
                             l121 457C                               l122 4592  
                             l220 52BA                               l117 45A8  
                             l221 528A                               l118 4552  
                             l230 56B4                               l222 52CA  
                             l223 52A2                       ?_LED_Toggle 0001  
                             l234 58AE                               l235 5886  
                             l227 56CC                               l403 2ACA  
                             l412 27EA                               l228 569C  
                             l340 477C                               l404 2A6A  
                             l421 2786                               l413 269C  
                             l237 589A                               l341 4786  
                             l405 2AFA                     ??_Console_Tab 0068  
                             l414 2806                               l430 3F8A  
                             l350 484A                               l342 4790  
                             l510 2306                               l406 2A82  
                             l183 49EE                               l415 26BE  
                             l351 47F8                               l343 479A  
                             l511 23FC                               l407 2A9A  
                             l184 49CE                               l600 07AA  
                             l432 3FB0                               l344 47A4  
                             l512 2326                               l408 2AB2  
                             l417 2722                               l601 08FC  
                             l433 3FDC                               l353 4804  
                             l337 47C2                               l345 47AE  
                             l610 0974                               l602 07D6  
                             l354 480E                               l346 47B8  
                             l338 4770                               l370 471C  
                             l611 09BA                               l603 090C  
                             l427 4004                               l355 4818  
                             l363 473A                               l371 4726  
                             l531 19BC                       ?_HMI_GetBar 0001  
                             l612 0A00                               l604 0866  
                             l356 4822                               l372 4730  
                             l364 46E8                               l532 19DE  
                             l516 2366                               l357 482C  
                             l509 23E2                               l614 0AD2  
                             l358 4836                               l366 46F4  
                             l526 19FE                               l615 0ACA  
                             l607 0A46                               l359 4840  
                             l367 46FE                               l519 23A6  
                             l616 0AE4                               l608 092E  
                             l368 4708                               l528 1A1C  
                             l393 5516                               l617 0ACE  
                             l609 0A64                               l369 4712  
                             l529 199E                               l483 1FC6  
                             l900 1AD8                               l732 4BC0  
                             l476 208E                               l901 1ADC  
                             l733 4BBA                               l389 51C6  
                             l477 1F1E                               l397 587C  
                             l910 1B00                               l902 1AE0  
                             l726 467E                               l478 20AA  
                             l486 202A                               l654 5CF8  
                             l911 1B04                               l903 1AE4  
                             l727 4678                               l479 1F62  
                             l655 5CF0                               l912 1B08  
                             l904 1AE8                               l824 522A  
                             l832 57B8                               l681 4E3E  
                             l913 1B0C                               l905 1AEC  
                             l921 53C0                               l673 5BF6  
                             l657 5CF4                               l914 1B10  
                             l906 1AF0                               l922 5390  
                             l930 3EE8                               l915 1B14  
                             l907 1AF4                               l819 50A0  
                             l684 4E54                               l916 1B18  
                             l908 1AF8                               l860 1A38  
                             l853 1B20                               l917 1B1C  
                             l909 1AFC                               l861 1A3C  
                             l781 5B90                               l597 07B4  
                             l678 4E7A                               l686 4E64  
                             l870 1A60                               l862 1A40  
                             l854 1A24                               l598 07A0  
                             l679 4E2E                               l871 1A64  
                             l863 1A44                               l599 07C4  
                             l880 1A88                               l872 1A68  
                             l864 1A48                               l856 1A28  
                             l928 3F5A                               l776 5A50  
                             l881 1A8C                               l873 1A6C  
                             l865 1A4C                               l857 1A2C  
                             l929 3F32                               l890 1AB0  
                             l882 1A90                               l874 1A70  
                             l866 1A50                               l858 1A30  
                             l891 1AB4                               l883 1A94  
                             l875 1A74                               l867 1A54  
                             l859 1A34                               l892 1AB8  
                             l884 1A98                               l876 1A78  
                             l868 1A58                               l893 1ABC  
                             l885 1A9C                               l877 1A7C  
                             l869 1A5C                               l894 1AC0  
                             l886 1AA0                               l878 1A80  
                             l990 4DD6                               l895 1AC4  
                             l887 1AA4                               l879 1A84  
                             l983 4A5E                               l896 1AC8  
                             l888 1AA8                               l992 4DE2  
                             l984 4A04                               l976 4F18  
                             l897 1ACC                               l889 1AAC  
                             l985 4A5C                               l898 1AD0  
                             l978 4F24                               l899 1AD4  
                             l997 552E                               l999 554C  
                             _RA2 007C02                               _RA3 007C03  
                             _RD5 007C1D                               _RD7 007C1F  
                             _PR2 000FCB                               _exp 1CA2  
                             _log 2B12                               _mod 0132  
                             _val 0033                               _pow 2128  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 0079  
                    _Word_GetPair 5B70                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 0067  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 0070                Console_MakeField@y 0071  
                      _TXSTA1bits 000FAD                      Console_Tab@c 006F  
                    Console_Tab@i 006E               LCD_DrawField@pField 0072  
                    Console_Tab@t 006D                      ___flmul@aexp 007B  
                    ___flmul@bexp 0080                        i2_delay_us 58C0  
            Port_Set@TypeRequired 0082                      ___flmul@sign 007A  
                    ___flmul@temp 0085                      ___flmul@prod 0081  
               Console_FormFeed@x 0062                 Console_FormFeed@y 0063  
             LCD_DrawField@pPoint 0074                    ?_LCD_DrawField 0072  
           Port_SetPinType@Output 008A                   Port_SetPin@Type 0073  
                 Port_SetPin@pPin 0071                     ?_Byte_GetPair 0069  
                 __end_of_LED_Set 56DE           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 417C                      ___fltol@exp1 00A8  
                    _Word_SetPair 5A2C                              l1000 5564  
                            l1010 44E2                              l1004 5302  
                   ?_Byte_GetZone 0060                              l1005 5328  
                            l1200 4376                              l1040 2F4E  
                            l1201 43BE                              l1009 44EE  
                            l1041 2F54                              l1202 43D2  
                            l1042 2F5A                              l1043 2F60  
                            l1204 43F6                              l1036 305C  
                            l1044 2F66                              l1205 43E2  
                            l1045 2F6C                              l1037 2F48  
                            l1062 261E                              l1207 4404  
                            l1063 264C                              l1047 2FEA  
                            l1056 24F2                              l2200 593C  
                            l1057 266C                              l1153 299C  
                            l2122 5998                              l1146 4D6E  
                            l1082 4280                              l1058 24FA  
                            l1059 251E                              l1084 4288  
                            l2116 5756                              l2125 59A8  
                            l1077 4254                              l2117 5736  
                            l2221 3778                              l1158 5AD2  
                            l2310 2CF8                              l2222 3746  
                            l1079 4260                              l2311 2CAA  
                            l2303 2C92                              l2223 3774  
                            l2312 2CBE                              l2304 2CA2  
                            l2152 50C4                              l2129 1288  
                            l2313 2D22                              l2305 2CC6  
                            l2241 4168                              l2161 5100  
                            l2242 4128                              l2234 3AA4  
                            l2170 4EC4                              l2155 50D8  
                            l2235 3A72                              l2228 4C52  
                            l2236 3AA0                              l2260 010C  
                            l2317 2D6A                              l2229 4BEE  
                            l2149 50B0                              l2173 4EE6  
                            l2261 011A                              l2318 2DC4  
                            l2158 50EC                              l1630 3944  
                            l2270 042E                              l2319 2D70  
                            l1631 3994                              l2167 4EB8  
                            l2271 0408                              l2263 01DC  
                            l1632 397E                              l2256 0046  
                            l2281 060A                              l2265 02C0  
                            l2522 35C0                              l1730 59CE  
                            l2274 078A                              l2282 065C  
                            l2258 00F0                              l2523 35F4  
                            l1627 39D4                              l2283 06A2  
                            l2259 00FE                              l2524 3632  
                            l1724 5A72                              l1732 59EE  
                            l1628 39CA                              l2284 06F4  
                            l2268 02EC                              l2525 3670  
                            l1629 395C                              l2285 0724  
                            l2277 0484                              l1726 5A9A  
                            l2278 05C4                              l1735 5F2C  
                            l2287 0776                              l2560 3E82  
                            l2552 3DF2                              l2529 5C52  
                            l2801 1120                              l2561 3E76  
                            l2730 5414                              l2490 4890  
                            l2554 3E5E                              l2731 541E  
                            l2491 48A0                              l2563 3E9E  
                            l2555 3E4E                              l1827 323E  
                            l2740 582C                              l2900 2EFE  
                            l1828 325A                              l2741 5836  
                            l2493 48BE                              l2813 11AC  
                            l2901 2F30                              l2726 53F4  
                            l2494 48B6                              l2830 1576  
                            l2814 11B4                              l2806 1140  
                            l2727 53EC                              l2823 14F0  
                            l2815 11B6                              l2736 5814  
                            l2840 1680                              l2832 159E  
                            l2824 14EC                              l2920 1D88  
                            l2760 2242                              l2737 580C  
                            l2497 48DE                              l2841 1662  
                            l2833 164C                              l2809 1186  
                            l2921 1F04                              l2761 2218  
                            l2673 4930                              l1873 5B68  
                            l2498 48E8                              l2850 1720  
                            l2834 15FC                              l2930 382C  
                            l2922 1ECE                              l2762 22EC  
                            l2674 4924                              l2499 48F6  
                            l2851 174A                              l2835 1624  
                            l2827 1530                              l2771 0F0E  
                            l2931 38C6                              l2852 1756  
                            l2828 152C                              l2780 0FD2  
                            l2772 0F0A                              l2940 3D0E  
                            l2916 1CC2                              l2756 2182  
                            l2853 1758                              l2837 164A  
                            l2781 0FD6                              l2861 0BB4  
                            l2757 216E                              l2677 4964  
                            l2774 0F6A                              l2766 0EC6  
                            l2862 0BB0                              l2942 3D5C  
                            l2918 1D0A                              l2678 4972  
                            l2847 16B8                              l2775 0F2E  
                            l2767 0EC2                              l2863 0BC4  
                            l2927 380E                              l2919 1D52  
                            l2759 21A0                              l2792 10CC  
                            l2784 1044                              l2880 0E60  
                            l2864 0BE2                              l2936 42FC  
                            l2928 37FC                              l2944 3D96  
                            l2960 2B60                              l2849 16FC  
                            l2785 100A                              l2881 0E7E  
                            l2857 0B74                              l2945 3D86  
                            l2794 10DC                              l2778 0FE6  
                            l2858 0B70                              l2890 2E64  
                            l2779 0FC4                              l2875 0DDA  
                            l2859 0B84                              l2788 102E  
                            l2868 0DA2                              l2892 2EAE  
                            l2797 1100                              l2789 1032  
                            l2877 0E1E                              l2869 0D84  
                            l2893 2E96                              l2885 2E30  
                            l2878 0E3C                              l2966 3BD2  
                            l2886 2E40                              l2958 2B36  
                            l2799 1116                              l2967 3B3A  
                            l2895 2EE0                              l2887 2E5E  
                            l2896 2ED4                              l2889 2E70  
                            ?_exp 00B7                              ?_log 00AF  
                  ??_Console_Init 0060                              _ADON 007E10  
           Port_SetPinType@pInput 0086                              ?_pow 00C2  
                            STR_1 FFFC                              STR_2 FF9C  
                            STR_3 FFC2                              STR_4 FF9C  
                            STR_5 FF9C                              STR_6 FF9C  
                            STR_7 FF9C                              STR_8 FF9C  
                            STR_9 FF9C                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 0018  
                            _LATG 000F8F               __end_of_GetPortPORT 487A  
                            _PIR1 000F9E                              _PIR2 000FA1  
                            _PIR3 000FA4               __end_of_GetPortTRIS 476A  
                            u9600 504E                              u9720 4E12  
                            u9800 52FE                              u9560 4B94  
                            u9730 4E16                              u9810 5320  
                            u9634 543E                              u9635 543A  
                            _SPI1 02C8                              u9580 4BDE  
                            u9644 5466                              _SPI2 017E  
                            u9645 5462                              u9910 0F9A  
                            u9567 4B8A                              u9920 0FAA  
                            u9664 46A6                              u9745 60BA  
                            u9665 46A2                              u9585 4BDA  
                            u9930 0FAC                              u9746 60BC  
                            u9674 46CE                              u9675 46CA  
                            u9780 5A1E                              u9960 0FEE  
                            _TMR0 000FD6                              u9785 5A1A  
                            _STP1 6086                              _STP2 6072  
                            _STP3 605E                              _STP4 604A  
                            _gISR 0108                Event_DIPSwitch@Bar 007A  
                   ??_Byte_GetBit 0063                              _Turn 4A7E  
              SPI_MaxSpeed@pInput 006F                     ?_Byte_SetByte 0060  
                   ?_Byte_SetPair 006B                   __end_of_SPI_DCS 5C04  
                            _main 0000                              _mode 00EB  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 006B  
                            _itos 3EB0                              _test 011C  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     ?_Byte_SetZone 0060  
                            btemp 0051                              _zero 01F9  
                            exp@x 00B7                              log@x 00AF  
                   ??_Byte_SetBit 0064                              pow@x 00C2  
                            pow@y 00C6                __size_of_LCD_Reset 0050  
                            prodh 000FF4                              prodl 000FF3  
                            start 14AA                __size_of_LCD_Write 0020  
                   __CFG_IESO$OFF 000000                   ___fldiv@new_exp 0071  
                 ?_SPI_DisableISR 0060                __size_of_LEDToggle 003E  
             HMI_SetButton@pValue 0066                        _Cliff_Left 013C  
                   Console_Init@x 0062                     Console_Init@y 0063  
                  ?i2_Timer0_Stop 0001                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FE45  
                 __end_of_InitADC 576E              Set_Rotation@rotation 0066  
       __size_of_Get_Sensor_State 0066                     ??_Init_Timer0 0060  
          __size_of_HMI_SetButton 007A            __size_of_HMI_SetNumber 0026  
                     ?_ISR_Enable 0001                             ??_exp 00BB  
                           ??_log 00B3                             ??_pow 00CA  
    __size_of_Console_ClearCursor 0030                  __end_of_LCD_Fill 5726  
                __end_of_LCD_Init 31DA                             ?_STP1 0001  
                           ?_STP2 0001                             ?_STP3 0001  
                           ?_STP4 0001                    ?_HMI_DIPSwitch 0001  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 52D8  
                    _BAUDCON1bits 000F7E                     ??_Button_Init 00A8  
         GetPortProperties@pInput 0062                     ??_Button_Poll 007E  
                __end_of_HMI_Init 299E                             l14013 4D66  
                           l12361 36A8                             l14119 1ECE  
                           l13521 43F6                             l14217 5364  
                           l12475 4DDA                             l12469 4DCE  
                           l15213 297A                             l15029 310C  
                           ?_Turn 0066                             l15039 319E  
                           l13459 3F46                             l13811 523C  
                           l13645 174A                             l14445 4258  
                           l13901 323E                             l14439 424C  
                           l15191 4F1C                             l13809 522A  
                           l13817 5260                             l15185 4F10  
                           l14629 60EC                             l14493 5AA8  
                __end_of_HMI_Poll 516A                             l13951 57CA  
                           l14825 2516                             l14745 570A  
                           l15395 591C                             l13949 57B8  
                           l14783 2A62                             l14989 2D26  
                           _I2C1T 01C2                             _I2C2T 01BB  
                   ___fltol@sign1 00A7                   __end_of___fladd 11D2  
                           ?_main 0001                   __end_of___fldiv 1774  
                 __end_of___awdiv 4900                   __end_of___flneg 5C64  
                           _ADRES 000FC3                             ?_itos 006C  
                           STR_10 FF9C                             STR_11 FFFC  
                           STR_20 FF9C                             STR_12 FF88  
                           STR_21 FF9C                             STR_13 FF0F  
                           STR_22 FF9C                             STR_30 FFFC  
                           STR_14 FFAF                             STR_23 FF9C  
                           STR_15 FFFC                             STR_31 FFE2  
                           STR_16 FF9C                             STR_40 FFFC  
                           STR_24 FFFC                             STR_32 FEBB  
                           STR_17 FFC2                             STR_25 FF88  
                           STR_41 FF5D                             STR_33 FF2B  
                           STR_42 FF9C                             STR_18 FF9C  
                           STR_50 FFFC                             STR_26 FF0F  
                           STR_34 FE9F                             STR_43 FF9C  
                           STR_19 FF9C                             STR_27 FFAF  
                           STR_51 FF46                             STR_35 FEF3  
                           STR_60 FF9C                             STR_44 FF9C  
                           STR_36 FF9C                             STR_28 FFFC  
                           STR_52 FFF1                             STR_53 FF9C  
                           STR_45 FF9C                             STR_37 FF9C  
                           STR_61 FFFC                             STR_29 FF73  
                           STR_70 FF9C                             STR_54 FF9C  
                           STR_46 FF9C                             STR_38 FF9C  
                           STR_62 FED7                             STR_71 FF9C  
                           STR_55 FF9C                             STR_47 FF9C  
                           STR_39 FF9C                             STR_63 FFD2  
                           STR_64 FF9C                             STR_56 FF9C  
                           STR_48 FF9C                             STR_65 FF9C  
                           STR_57 FF9C                             STR_49 FF9C  
                           STR_66 FF9C                             STR_58 FF9C  
                           STR_67 FF9C                             STR_59 FF9C  
                           STR_68 FF9C                             STR_69 FF9C  
                 __end_of___flmul 0E94                   __end_of___flsub 57B6  
                 __end_of___fltol 3EB0                   _Event_DIPSwitch 5D8E  
                 __end_of___lldiv 4984                             u10120 113C  
                           u11050 16B4                             u10170 1192  
                           u10090 1124                             u11210 3D2E  
                           u11130 4934                             u10340 0DD6  
                           u10430 48C2                             u11080 170A  
                           u10280 0BD0                             u10520 3E10  
                           u11400 5CE0                             u11090 172E  
                           u10370 0E2C                             u10290 0D46  
                           u11170 381A                             u11218 3D32  
                           u12130 5722                             u11500 4DAC  
                           u10620 5818                             u10380 0E4A  
                           u10700 2EEA                             u12220 265A  
         __size_of_HMI_LeftSwitch 0014                             u12108 3574  
                           u11420 57E8                   ___awdiv@divisor 0062  
                           u10525 3E06                             u11405 5CDC  
                           u11350 596E                             u10295 0D3C  
                           u10800 3F46                             u10560 3E88  
                           u12048 40BE                             u12160 2B00  
                           u11290 5260                             u11514 4B4A  
                           u12058 346E                             u11515 4B46  
                           u11355 596A                             u12059 3482  
                           u11380 32A0                             u11365 31FA  
                           u10590 53F8                             u10750 4324  
                           u12350 2D58                             u12430 319E  
                           u12270 3922                             u11640 537C  
                           u12280 3936                             u11705 1796  
                           u11570 1D5A                             u12370 2DCE  
                           u12290 3970                             u11715 17A8  
                           u11900 598E                             u11580 1D5C  
                           u11820 42BA                             u11725 17BA  
                           u10758 4328                             u11830 42C2  
                           u11495 4D7C                             u11735 17D2  
                           u11745 18CC                             u12650 4F68  
                           u11755 1920                             u11765 194E  
                           u11775 197C                             u11960 21FA  
                           u14600 0478                             u14620 05A0  
                           u14438 006A                             u14439 007E  
                           u14720 0780                             u14448 008A  
                           u14449 009E                             u14458 00AA  
                           u14459 00BE                             u14388 5B1A  
                           u14708 074E                             u14468 00CA  
                           u14389 5B2E                             u14709 0762  
                           u14469 00DE                             u14670 0718  
                           u14688 072C                             u14689 0740  
                           _INDEX 003F                   __end_of___lwdiv 5428  
                           _LEDOn 5EB0                             _MASKS FC55  
                 __end_of___lwmod 5840                             i2l430 4194  
                           i2l432 41BA                             i2l433 41E4  
                           i2l427 420A                             i2l732 4D28  
                           i2l733 4D22                             i2l832 58C2  
                           i2l781 5C82                   ___awdiv@counter 0064  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86           __size_of_HMI_DownSwitch 0014  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                             _T_VAR 002F  
                ??i2_Byte_GetPair 000D                             _Drive 5BA2  
                   ?_FunctReadADC 0060                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 0076           __size_of_Sensor_Observe 0108  
                  __CFG_FCMEN$OFF 000000                             _PortA 02F1  
                           _PortB 019D                             _PortC 01A7  
                           _PortD 0193                             _PortE 0189  
                           _PortF 01B1                             _PortG 02E7  
         __end_of_Port_SetPinType 2822                   _ADC_Initialised 0143  
                  ??_Byte_GetPair 006C                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 0075                   __end_of_dpowers FC55  
                  ??_Byte_GetZone 0065                             _count 012C  
                           _floor 37C2                             _ldexp 3CEE  
                  Button_Poll@Pin 0083                             _frexp 42CC  
                           _errno 011A          __size_of_Set_Addr_Window 009A  
             __end_of_Console_Tab 4534                  __end_of_MXK_Init 345C  
            i2Byte_GetPair@pInput 000A                             _putch 60DA  
                           _total 0122                  __end_of_SPI_Init 0B42  
                __end_of_SPI_Send 4E98                        _BumpSensor 003B  
                __end_of_BangBang 5D66             __end_ofi2_MXK_Release 6162  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_reverse 53D4                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 0063                    ??_Byte_SetPair 006F  
                           pow@yi 00D3                    ??_Byte_SetQuad 006F  
                           plusw2 000FDB                    ??_Byte_SetZone 0066  
                           status 000FD8                             wtemp6 0052  
                 _Configure_GPIOs 51CA              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 5EE4  
                     _Cliff_FLeft 013E               __size_of_LED_Toggle 0040  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
                     exp@exponent 00BF                        _Event_NULL 1404  
     __size_of_Port_CheckPairType 0060                       ldexp@newexp 00B3  
                    __end_of_STP1 609A                      __end_of_STP2 6086  
                    __end_of_STP3 6072                      __end_of_STP4 605E  
                     _Cliff_Right 013D               __size_of_HMI_SetBar 000A  
                 __initialization 45C6               __size_of_HMI_Render 0036  
                     log@exponent 00B3               __end_of_Byte_GetBit 5CEE  
                   _Current_Dist1 0138                     _Current_Dist2 0136  
                    __end_of_Turn 4AF8                      __end_of_main 079E  
                    __end_of_itos 3F6E              HMI_SetButton@reindex 0062  
                    SPI_Send9@dat 013A               __end_of_Byte_SetBit 547A  
                __end_of_InitList FC2B       __size_of_Port_CheckQuadType 0050  
                          ??_STP1 0060                            ??_STP2 0060  
                          ??_STP3 0060                            ??_STP4 0060  
                __end_of_Mode_Set 60BE       __size_of_Port_CheckPortType 0040  
                          ??_Turn 0068                       HMI_Render@a 0068  
                          ??_main 00DB                            ??_itos 0070  
             __end_of_Init_Timer0 5F78          __size_of_FunctInitButton 0076  
         _Console_MakeField$10974 006E                     __activetblptr 000003  
                          ?_LEDOn 0001                 Port_SetPin@pInput 006F  
               __end_of_LCD_Reset 54CA                 Port_SetPin@pValue 0072  
                       ??_LED_Set 0075                 _MXK_InitDIPSwitch 5F78  
                  ??_FunctReadADC 0062                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 5E5A                       _GetPortPORT 47F2  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 46E2  
                 ??_LCD_DrawField 007C                            ?_Drive 0061  
      __end_of_PortProperty_Valid 50A4                  __end_of_Port_Set 1A1E  
               __end_of_LEDToggle 593E                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0054               __end_of_Button_Init 40D2  
             __end_of_Button_Poll 358A                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 4AF8                            _ADCON0 000FC2  
                          _ADCON1 000FC1                      ??_ADCAverage 00D7  
                       ??_SPI_DCS 0062                            ?_floor 00A9  
                          ?_ldexp 00AF                            ?_frexp 0060  
                      _Low_Sensor 004B                            _ADRESH 000FC4  
                          _ADRESL 000FC3                     _HMI_SetNumber 5DB4  
          Port_SetQuadType@Output 009A                            _ANCON0 000FC1  
                ___awdiv@dividend 0060                            ?_putch 0001  
                ??_Console_Render 0083                     ToSegment@pCHR 0060  
                          _GODONE 007E11                  _Console_FormFeed 4DC0  
          Port_SetQuadType@pInput 0096                            _LEDOff 5ECA  
                          i2l1630 3C54                            i2l1631 3CA0  
                          i2l1632 3C8C                            i2l1730 5AE6  
                          i2l1627 3CDC                            i2l1732 5B06  
                          i2l1628 3CD2                            i2l1629 3C6A  
                          i2l1590 145E                    __CFG_WDTEN$OFF 000000  
             __size_of_ISR_Enable 000A                            i2l9623 58C2  
                          i2l9625 58D2                            _RCREG1 000FAF  
                          _RCSTA1 000FAC            __end_of_LCD_Word_Write 5EFE  
                  _Timer0_Restart 6110                            _SPBRG1 000FB0  
             ??_MXK_InitDIPSwitch 009B                            _TRISA2 007C92  
                          _TRISA3 007C93                            _TRISD5 007CAD  
                          _TRISD7 007CAF                            _TXREG1 000FAE  
                __end_of___xxtofl 2F42                         ??_InitADC 0060  
                  i2_MXK_SwitchTo 5AD4                            _TXSTA1 000FAD  
                 Byte_GetBit@pBit 0062                        _Reset_High 5F48  
              Console_Render@temp 0085                    ??_HMI_UpSwitch 0066  
                  OutSeg@pSegment 0063                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 0077                  __end_of_delay_ms 5284  
                    LED_Init@pLED 008D                  __end_of_delay_us 57FC  
                   ??_Timer2_Init 0071                     ??_Timer0_Stop 0060  
        __size_of_Sensor_Observe2 0116                        _Timer0_ISR 5D66  
        __size_of_Console_NewLine 007C                 Timer2_Init@DIVIDE 007A  
                  __CFG_XINST$OFF 000000                            _OutSeg 4D52  
        __size_of_HMI_InitButtons 0006                            ___flge 358A  
                      _Motor_Step 38D8                   _Closest_Object2 4BEC  
         __end_of_Event_DIPSwitch 5DB4                         ??___fladd 0093  
                          ___wmul 5D16                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 0064  
                       ??___flneg 008B                    __CFG_STVREN$ON 000000  
                      _Robot_Init 609A                            _change 004E  
                       ??___flmul 0076                            _lMotor 00EF  
                       ??___flsub 00A7                         ??___fltol 00A3  
                       ??___lldiv 0068                            _lQueue 00E6  
                      _TestButton 02DD                        _Robot_Stop 5DDA  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 006B          __end_of_Port_SetQuadType 2128  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 0037  
            __end_of_Console_Init 4F6C                 GetPortTRIS@pInput 0062  
              __size_of_Reset_Low 0018                            clear_0 460E  
                          clear_1 4620                            clear_2 462C  
                          clear_3 4638                            clear_4 4644  
              __end_of_ADCAverage 14BE                  ___awdiv@quotient 0066  
                      Port_Init@i 00A5                 __end_of_MXK_Queue 60DA  
      __end_ofHMI_SetButton@F7213 FC62                            _printf 2C86  
       __end_of_MXK_InitDIPSwitch 5F90                            main@up 00E3  
                  HMI_SetButton@v 0067                            floor@i 00AD  
                          floor@x 00A9            HMI_SetSegments@pString 0061  
                     _Console_Tab 44A0               LCD_Word_Write@value 0065  
                    __pdataCOMRAM 0045                __size_of_Port_Init 0174  
                   ??_Port_GetPin 0063          Port_CheckPortType@Output 0099  
                 ??i2_Port_SetPin 0014                      __mediumconst FB78  
     __end_ofTimer2_Init@PRESCALE FC65          Port_CheckPortType@pDrive 0098  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 0096  
                   ??_Port_SetPin 0073                         ??_reverse 0064  
           Console_MakeField@Fill 0282                  ?_Port_SetPinType 0086  
                          putch@c 0074                    ?_HMI_SetNumber 0076  
                  i2_Word_GetPair 5C64           __end_of_Configure_GPIOs 5228  
                ??_MXK_TestButton 0066            __end_of_Timer0_Restart 611C  
                   Set_Rotation@m 0065                      ?_MXK_Release 0001  
                      ___flge@ff1 0060                        ___flge@ff2 0064  
                      _SteppingCW 5602                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 5B0A                      ___xxtofl@arg 006A  
                __end_ofexp@coeff FE6D                      i2delay_us@us 0001  
                    ___xxtofl@exp 0069                      ___xxtofl@val 0060  
                __end_oflog@coeff FE91                   ?_LCD_Word_Write 0065  
                      __accesstop 0060           __end_of__initialization 464A  
                       ?_LCD_Fill 0069                         ?_LCD_Init 0001  
                    _Cliff_FRight 013F                     SPI_Init@pMode 0092  
                      ___flneg@f1 0087                   _Reset_variables 556A  
                     _Byte_GetBit 5CC2                         ?_LED_Init 0001  
        __end_ofi2_Timer0_Restart 6128                         ?_HMI_Init 0001  
               ??_Set_Addr_Window 0068                         ?_HMI_Poll 0001  
                    eval_poly@res 00AB                     ___rparam_used 000001  
                      ___fltol@f1 009F                       _Byte_SetBit 5428  
                   __end_of_LEDOn 5ECA                     __end_of_MASKS FC5E  
                  _PortA_Property FE9D                       ?_Event_NULL 0001  
                       LCD_Fill@i 006B                         LCD_Fill@j 006C  
                       LCD_Init@i 0097                     __end_of_Drive 5BD4  
                  __pcstackCOMRAM 0001                  _Get_Sensor_State 50A4  
                  _PortB_Property FE9B               __size_ofi2_delay_us 0040  
                    __pidataBANK1 5FA8                       _Init_Timer0 5F60  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 5E94  
                 Console_Render@x 008A                   Console_Render@y 008B  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FC2B              __end_of_Byte_GetZone 4BEC  
                   __end_of_floor 38D8                     __end_of_ldexp 3DD2  
                   __end_of_frexp 436A               FunctReadADC@channel 0060  
                  _PortC_Property FE99                     __end_of_putch 60E8  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 3320  
             __end_of_Timer0_Stop 614A                         ?_SPI_Init 008D  
                       ?_SPI_Send 0060                       _Button_Init 4022  
                       ?_BangBang 0061                 Port_SetType@pType 009C  
                     _Button_Poll 345C              __end_of_Byte_SetByte 60CC  
            __end_of_Byte_SetPair 5E1A                    _HMI_LeftSwitch 6022  
                  _PortD_Property FE97              __end_of_Byte_SetQuad 5E3A  
                    ??_LED_Toggle 0078                      ??_HMI_GetBar 0060  
            __end_of_Byte_SetZone 46E2                           ??_LEDOn 0061  
                  _HMI_DownSwitch 5FE6                     SPI_Send@pData 0062  
                   ??_SteppingCCW 0066             __end_of_MXK_DIPSwitch 5FD2  
                    ??_HMI_SetBar 0060                      ??_HMI_Render 0068  
                  _PortE_Property FE95                    _Sensor_Observe 39E6  
        __size_of_HMI_SetSegments 009C            __end_ofi2_Word_GetPair 5C94  
                         ??_Drive 0063                    _PortF_Property FE93  
         Port_CheckQuadType@Pair1 0093           Port_CheckQuadType@Pair2 0094  
        MXK_BlockSwitchTo@pModule 0067                           ??_floor 00AD  
                         ??_ldexp 00B5                           ??_frexp 0066  
               ??_FunctInitButton 00A8                 _Console_Backspace 551A  
                 ?_Timer0_Restart 0001                           ??_putch 0074  
        __size_of_HMI_RightSwitch 0014               _Console_ClearCursor 5C04  
               __end_of_ToSegment 1CA2                    _PortG_Property FE91  
                      __pbssBANK0 00E6                        __pbssBANK1 0100  
                      __pbssBANK2 0200               __end_of_Port_GetPin 5A2C  
         Port_CheckQuadType@pQuad 0091                   reverse@iterator 0065  
                         ?_LEDOff 0001                __size_of_eval_poly 0100  
                ??_SPI_DisableISR 0062                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 5F48  
       __size_of_Event_TestButton 0032           __size_of_Port_TogglePin 002E  
                      ??_LCD_Fill 006B                        ??_LCD_Init 0095  
             __end_of_Port_SetPin 4022            __end_of_PortA_Property FE9F  
                       ?_Mode_Set 0001                Byte_SetByte@pInput 0060  
                      ??_LED_Init 008D                Byte_SetByte@pValue 0062  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
         __end_of_Closest_Object2 4C66                        ??_HMI_Init 00A8  
                      ??_HMI_Poll 0084                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 008D            __end_of_PortB_Property FE9D  
               __end_of_Port_Init 2B12                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 0088                __end_of_LED_Toggle 58C0  
              __end_of_HMI_GetBar 6150          LCD_FillRectangle@pColour 0069  
            __end_of_FunctReadADC 59B8               ??_Console_Backspace 0062  
               Set_Addr_Window@xe 0066                 Set_Addr_Window@ye 0067  
               Set_Addr_Window@xs 0068                 Set_Addr_Window@ys 0065  
                         ?_OutSeg 0063                Byte_SetPair@pInput 006B  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 006E  
                         ?___flge 0060                __end_of_HMI_SetBar 613C  
          __end_of_PortC_Property FE9B                Word_GetPair@pInput 006C  
              __end_of_HMI_Render 5AD4                    ??_Set_Rotation 0065  
                       ?_Port_Set 006F                           ?___wmul 0060  
                     ?_Robot_Init 0001                  ?_Event_DIPSwitch 0001  
               Port_GetPin@Output 0065                      ??_ISR_Enable 0060  
                     ?_Robot_Stop 0001      __size_of_Console_ResetCursor 001C  
            ?_Console_ClearCursor 0001            __end_of_HMI_LeftSwitch 6036  
          __end_of_PortD_Property FE99                           _ADC_AN0 01D8  
                         _ADC_AN1 01D3                           _ADC_AN2 01CE  
                         _ADC_AN3 01C9                        ??_MXK_Init 00A6  
               Port_GetPin@pInput 0060                 _Console_MakeField 4226  
               ??_Sensor_Observe2 00D9                 ??_Console_NewLine 0060  
          __end_of_HMI_DownSwitch 5FFA                        ??_SPI_Init 0093  
          Event_TestButton@pState 0079                        ??_SPI_Send 0063  
                      ??_BangBang 0069                           ?_printf 0075  
               ??_HMI_InitButtons 0060        __size_of_MXK_InitDIPSwitch 0018  
          __end_of_PortE_Property FE97               Console_Render@F6956 01E5  
          __end_of_Sensor_Observe 3AEE                ?_Console_MakeField 0065  
                         _COUNTER 0035                   ??_HMI_SetButton 0060  
            __end_of_HMI_UpSwitch 600E                           _LED_Set 5696  
         _Console_IncrementCursor 52D8                         ?___xxtofl 0060  
          __end_of_PortF_Property FE95                       _gBackcolour 0039  
                 ??_HMI_SetNumber 0078                         _I2C1_Done 0117  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 0114  
                       _I2C1_More 0111                         _I2C2_More 010E  
                       ?_delay_ms 0060         __end_of_Console_Backspace 556A  
                       ?_delay_us 0060               __size_of_Event_NULL 0002  
      __end_of_MXK_InitTestButton 5FA8                           _SSP1ADD 000FC8  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
         __end_of_Reset_variables 55B6            __end_of_PortG_Property FE93  
             ??_Console_MakeField 0067                           _SPI_DCS 5BD4  
            __size_ofi2_MXK_Queue 000E                  ?_Configure_GPIOs 0001  
        ?_InitSerialCommunication 0001               __end_of_SteppingCCW 5696  
              eusartSend@sendChar 0060              i2Byte_GetZone@Offset 0008  
                     ?_SteppingCW 0001                   __size_of_LEDOff 001A  
              __end_of_ISR_Enable 6132                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                 Event_TestButton@j 003C  
                      ??_Mode_Set 0060                    ??_Timer2_Clear 0060  
                         _Font5x7 FC65              i2Byte_GetZone@pChunk 0004  
                         _InitADC 5726              i2Byte_GetZone@pInput 0001  
            SPI_DisableISR@pInput 0060                     ?_Port_GetQuad 0060  
                 Byte_SetBit@pBit 0062              Port_TogglePin@pInput 0074  
           __end_ofi2_Byte_SetBit 5602                           __Hparam 0000  
               Port_GetQuad@pQuad 0062                       _Timer2_Init 31DA  
                         __Lparam 0000                       _Timer0_Stop 6144  
           __size_of_Console_Init 006A                           OutSeg@a 0041  
 __end_ofPortProperty_Valid@F6830 FC4B                     LCD_Write@mode 0063  
                 __size_of_OutSeg 006E                       _Motor_Count 002D  
                      ??_Port_Set 0072                   __size_of___flge 0122  
       __end_of_Console_MakeField 42CC                 _Console_PrintChar 2F42  
         __size_of_Closest_Object 00AA                           ___fladd 0E94  
                   ?_Port_SetType 009A                           _gCursor 0045  
                         ___fldiv 14BE                           ___awdiv 487A  
                         ___flneg 5C34             ??_Console_ClearCursor 0060  
                         ___flmul 0B42                           ___flsub 576E  
                         ___fltol 3DD2                           _lBuffer 0318  
                         ___lldiv 4900                   __size_of___wmul 0028  
                         ___lwdiv 53D4                           ___lwmod 57FC  
                 ?_HMI_LeftSwitch 0001          __end_of_Console_FormFeed 4E2C  
              ?_Console_PrintChar 0001                           __pcinit 45C6  
               __end_of_eval_poly 3BEE                   ?_HMI_DownSwitch 0001  
                         __ramtop 1000                         _CCW_Count 012A  
                         __ptext0 0000                           __ptext1 4E98  
                         __ptext2 4A7E                           __ptext3 36AC  
                         __ptext4 39E6                           __ptext5 609A  
                         __ptext6 5DDA                           __ptext7 556A  
                         __ptext8 3320                           __ptext9 299E  
                      _eusartSend 60E8                   __size_of_printf 0168  
                         _average 00E9                         _T0CONbits 000FD5  
                 ?_Sensor_Observe 0001                 i2MXK_SwitchTo@CUR 0007  
                         _countOn 01F3                           _dpowers FC4B  
                       _T2CONbits 000FCA                     LED_Set@pValue 0074  
                    __size_of_exp 0274                      __size_of_log 0174  
             __size_of_Reset_High 0018             Event_DIPSwitch@pState 0079  
                    __size_of_pow 01D6                        ??___xxtofl 0064  
                    ?_GetPortPORT 0060                      ?_GetPortTRIS 0060  
             ??_Console_PrintChar 0070                       _Port_GetPin 59F2  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 01E1  
             LCD_DrawRectangle@p4 01DD                      ??i2_delay_us 0003  
                      ??_delay_ms 0062                        ??_delay_us 0062  
                         _reverse 5380                         _DIPSwitch 02D3  
             __size_of_Timer0_ISR 0028                       _Port_SetPin 3F6E  
         __size_of_UpdateDistance 006A                    LCD_DrawField@i 0082  
                       _LCD_Reset 547A               __size_of_Motor_Step 010E  
                       _LCD_Write 5E3A              __size_of_MXK_Dequeue 0034  
                      delay_ms@ms 0060              end_of_initialization 464A  
                       _LEDToggle 5900               __size_of_Robot_Init 0012  
                         exp@sign 00C1                        delay_us@us 0060  
             __size_of_Robot_Stop 0020                 ??_HMI_SetSegments 0063  
         Console_PrintChar@pInput 0073                      _Console_Init 4F02  
                 BangBang@LSpeedH 0065                   BangBang@LSpeedL 0067  
            __size_of_MXK_Release 0018        __end_of_Port_CheckPairType 51CA  
                         itos@Out 0074                    ??_Port_GetQuad 0063  
              _PortProperty_Valid 503C                  ?_Closest_Object2 0001  
              Byte_SetQuad@pInput 006B                   BangBang@RSpeedH 0061  
                 BangBang@RSpeedL 0063                         i2u1436_48 5D7A  
              SPI_MinSpeed@pInput 006F                Byte_SetQuad@pValue 006E  
           __size_of_Byte_GetPair 001C                   ___lldiv@divisor 0064  
           __size_of_Byte_GetZone 007A                 ??_HMI_RightSwitch 0066  
                         pow@sign 00D2                   ___lldiv@counter 006C  
       __end_of_Console_PrintChar 3092                    ??_Port_SetType 009D  
      __end_of_Port_CheckQuadType 551A                           printf@c 0080  
                         printf@f 0075                    Port_Init@pPort 00A2  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0020  
                _ADCAverage$15653 0300                  _ADCAverage$15654 0304  
          Console_MakeField@Index 0069                  _ADCAverage$15655 0308  
                _ADCAverage$15656 030C                  _ADCAverage$15657 0310  
                _ADCAverage$15658 0314                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 006F  
           __size_of_Byte_SetQuad 0020        __end_of_Port_CheckPortType 5880  
           __size_of_Byte_SetZone 008E                __end_ofi2_delay_us 5900  
              Button_Init@pInitIO 009F                 ?_Port_SetQuadType 0096  
                     _gForecolour 01F5         ??_Console_IncrementCursor 0064  
          __size_ofi2_MXK_Release 0006               __size_of_SteppingCW 004A  
                       _PORTFbits 000F85                        _timercount 011E  
              ??_Port_SetQuadType 009A                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 0066                       ___fladd@grs 009E  
           Console_Render@lCursor 0086                       _SteppingCCW 564C  
 __end_of_InitSerialCommunication 5E78                         _MXK_Queue 60CC  
                __CFG_CPUDIV$OSC1 000000                     ___xxtofl@sign 0068  
                Byte_GetZone@pMax 0062        __size_of_Console_Backspace 0050  
                       _TRISCbits 000F94                       _Square_Dist 0134  
                 _Set_Addr_Window 4406                    SPI_Init@pClock 008D  
                ??_LCD_Word_Write 0067          __end_of_Get_Sensor_State 510A  
                     ___fldiv@grs 0073                       ___fldiv@rem 006D  
           __end_of_LCD_DrawField 4A02                    Port_Set@pInput 006F  
                  SPI_Init@pInput 0093              ??_PortProperty_Valid 0073  
                ?_Reset_variables 0001                    Port_Set@pValue 0071  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 45C6  
                      ?_LCD_Write 0063                      _Byte_GetPair 5E78  
              HMI_SetButton@F7213 FC5E                      _Byte_GetZone 4B72  
                      ?_LEDToggle 0001                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 0080                 LCD_DrawField@ymax 0081  
                  _Port_TogglePin 5C94                  _Event_TestButton 5B3E  
                     ___flmul@grs 007C             __size_of_FunctReadADC 003C  
            Port_SetPinType@Props 008B                      ?_Byte_GetBit 0060  
                  __end_of_LEDOff 5EE4           __size_ofi2_Byte_GetPair 001A  
                    _Byte_SetByte 60BE                      _Byte_SetPair 5DFA  
                    _Byte_SetQuad 5E1A           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 4654              Port_SetPinType@pType 0089  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 0060  
                   ?_SPI_MaxSpeed 006F                 __size_of_LCD_Fill 0048  
                    ??_Event_NULL 0060                 __size_of_LCD_Init 0148  
               __size_of_LED_Init 0054                     ?_SPI_MinSpeed 006F  
           __end_ofi2_Timer0_Stop 615C                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 017C                 __size_of_HMI_Poll 0060  
                   ?i2_Motor_Step 0001                      ?_Init_Timer0 0001  
      __size_of_Console_MakeField 00A6                    __end_of_OutSeg 4DC0  
                  __end_of___flge 36AC             __size_of_HMI_UpSwitch 0014  
                       _Close_Pos 002B                    __end_of___wmul 5D3E  
           __end_of_HMI_DIPSwitch 5FE6                     __pidataCOMRAM 6104  
                    ?_Button_Init 009B                   _FunctInitButton 4C66  
                    ?_Button_Poll 007B                       ?_eusartSend 0001  
                       _Bus_State 004D               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA                 __size_of_MXK_Init 013C  
                       _BumpState 0130                       Turn@C_Angle 0068  
                      floor@expon 00B1              __end_of_Timer2_Clear 6144  
                  __end_of_printf 2DEE                 __size_of_SPI_Init 03A4  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 006C  
               __size_of_BangBang 0028                  ??_Timer0_Restart 0060  
              Port_SetType@Output 009F               start_initialization 45C6  
                      ?_MXK_Queue 0060                        eval_poly@d 00A3  
                      eval_poly@n 00A5                        eval_poly@x 009F  
                      ldexp@value 00AF                      _FunctReadADC 597C  
        PortProperty_Valid@Errors 0075                  ??i2_MXK_SwitchTo 0007  
               _LCD_FillRectangle 532C                Port_SetType@pInput 009A  
                    _Current_Dist 0031                       __end_of_exp 1F16  
                     __end_of_log 2C86                       _ADC_Reading 012E  
                     __end_of_pow 22FE                        HMI_Init@in 00A8  
             HMI_SetNumber@pInput 0076             __end_ofi2_Port_SetPin 4226  
              __end_of_Event_NULL 1406            __end_of_Port_TogglePin 5CC2  
                   ?_Word_SetPair 006F                 Byte_SetBit@pInput 0060  
                  ??_MXK_SwitchTo 0066                 Byte_SetBit@pValue 0063  
              ?_LCD_FillRectangle 0069               _Console_ResetCursor 5E94  
     PortProperty_Valid@pPinDrive 0071              MXK_BlockSwitchTo@CUR 0066  
        PortProperty_Valid@pInput 006F                          ??_LEDOff 0061  
                   i2_MXK_Release 615C                        frexp@value 0060  
          LCD_FillRectangle@pSize 006F                    SPI_Send@pInput 0060  
                    ??_Reset_High 0074          __size_of_Port_SetPinType 019E  
                  ??_SPI_MaxSpeed 0071             Port_SetQuadType@pQuad 0098  
                       _ToSegment 1A1E               ??_LCD_FillRectangle 0073  
           Port_SetQuadType@pType 0099                   _Sensor_Observe2 36AC  
                 _Console_NewLine 4A02                    ??_SPI_MinSpeed 0071  
                    _HMI_UpSwitch 5FFA                         _Reset_Low 5F30  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 6150  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 0150  
                       _gCharSize 01ED                  Timer2_Init@INDEX 00F3  
                       OutSeg@cur 0043                    ??i2_Motor_Step 0015  
                        ??_OutSeg 0064                         OutSeg@out 0067  
         __size_of_Console_Render 01B8                      ??_Motor_Step 0074  
                  _Closest_Object 40D2                          ??___flge 0068  
              Byte_SetZone@Offset 0069                      ??_Robot_Init 0061  
                        ??___wmul 0064                      ??_Robot_Stop 0061  
            ?_Console_ResetCursor 0001                         _Port_Init 299E  
                     __pdataBANK1 01E5                 __size_of_Port_Set 02AA  
              Byte_SetZone@pChunk 0063                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 0060                Byte_SetZone@pValue 0065  
                   Mode_Set@pMode 0060                          ??_printf 0079  
         __end_of_Set_Addr_Window 44A0          Port_CheckQuadType@Output 0095  
                       _gLineSize 01E9          Port_CheckQuadType@pDrive 0092  
                       ___fladd@a 008F                         ___fladd@b 008B  
                  ??_Word_GetPair 006F          Port_CheckQuadType@pInput 008F  
            __end_of_Port_GetQuad 597C                         ___fldiv@a 0064  
                       ___fldiv@b 0060         __end_of_LCD_FillRectangle 5380  
                     __pbssBIGRAM 0318                          ?_LED_Set 0074  
                       ___flmul@a 0072                         ___flmul@b 006E  
                     __pbssCOMRAM 0029                         ___flsub@a 00A3  
                       ___flsub@b 009F                __end_of_Reset_High 5F60  
                   __pcstackBANK0 0060                     __pcstackBANK3 0300  
                  _UpdateDistance 4E98                        itos@Length 0072  
                  ??_Word_SetPair 0073                 __size_of___xxtofl 0154  
              __end_of_Timer0_ISR 5D8E              __size_of_GetPortPORT 0088  
                     ??_LCD_Reset 0079              __size_of_GetPortTRIS 0088  
            __end_of_Port_SetType 24CC                          ?_SPI_DCS 0060  
                 ?_Port_TogglePin 0074                       ??_LCD_Write 0064  
               __size_of_delay_ms 005C                 __size_of_delay_us 0046  
                       Turn@Angle 0066               __CFG_CCP2MX$DEFAULT 000000  
                     ??_LEDToggle 0061                __end_of_Motor_Step 39E6  
           Timer2_Init@pFrequency 006D                      ??_SteppingCW 0066  
                  ?i2_MXK_Release 0001                         Turn@Speed 006A  
              __end_of_Robot_Init 60AC                __end_of_Robot_Stop 5DFA  
                       _exp$15661 00BB                          ?_InitADC 0001  
        Port_CheckPairType@Output 008C               __size_of_eusartSend 000E  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 0089  
        Port_CheckPairType@pInput 0086                    reverse@tempVar 0064  
          __end_of_Closest_Object 417C                _MXK_InitTestButton 5F90  
                      ?_Reset_Low 0001            __size_of_MXK_DIPSwitch 0014  
                    ?_Timer2_Init 006D                  ??_HMI_LeftSwitch 0066  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 0060  
                   _lStepFunction 010B           __size_of_MXK_TestButton 0014  
               Byte_SetPair@pPair 006D           __end_of_FunctInitButton 4CDC  
                ??_HMI_DownSwitch 0066  __size_of_InitSerialCommunication 001E  
                       __pintcode 1408                     __pmediumconst FB78  
           ??_Console_ResetCursor 0060                          ?___fladd 008B  
                        ?___fldiv 0060                          ?___awdiv 0060  
                       __ptext100 4A02                         __ptext101 4DC0  
                       __ptext110 6086                         __ptext102 5E94  
                        ?___flneg 0087                         __ptext111 24CC  
                       __ptext103 551A                         __ptext120 5CC2  
                       __ptext112 532C                         __ptext104 5C04  
                       __ptext121 11D2                         __ptext113 4984  
                       __ptext105 564C                         __ptext130 358A  
                       __ptext122 2128                         __ptext114 5D16  
                       __ptext106 5228                         __ptext131 3AEE  
                       __ptext123 2B12                         __ptext115 4406  
                       __ptext107 604A                         __ptext140 5380  
                       __ptext132 0B42                         __ptext124 1CA2  
                       __ptext116 5EE4                         __ptext108 605E  
                       __ptext141 57FC                         __ptext133 576E  
                       __ptext125 3CEE                         __ptext117 5E3A  
                       __ptext109 6072                         __ptext150 60E8  
                       __ptext142 53D4                         __ptext134 0E94  
                       __ptext126 37C2                         __ptext118 60AC  
                       __ptext143 436A                         __ptext135 5C34  
                       __ptext127 42CC                         __ptext119 4226  
                       __ptext160 55B6                         __ptext152 5D66  
                       __ptext144 1A1E                         __ptext136 14BE  
                       __ptext128 2DEE                         __ptext161 5AD4  
                       __ptext153 3BEE                         __ptext145 5A9E  
                       __ptext137 487A                         __ptext129 3DD2  
                       __ptext162 58C0                         __ptext154 6156  
                       __ptext146 4D52                         __ptext138 5DB4  
                       __ptext163 615C                         __ptext155 611C  
                       __ptext147 4E2C                         __ptext139 3EB0  
                       __ptext164 60F6                         __ptext156 417C  
                       __ptext148 597C                         __ptext165 0000  
                       __ptext157 5C64                         __ptext149 5D3E  
                       __ptext158 5EFE                         _pShiftVal 00ED  
                       __ptext159 4CDC                          ?___flmul 006E  
                ??_Sensor_Observe 00D9                          ?___flsub 009F  
                        ?___fltol 009F                          ?___lldiv 0060  
                      ?_Port_Init 00A0                          ?___lwdiv 0060  
                        ?___lwmod 0067               ?_MXK_InitTestButton 0001  
               ?_Console_FormFeed 0001                 _GetPortProperties 476A  
                       _pow$15660 00CE                         _pow$15659 00CA  
              __end_of_SteppingCW 564C       __end_ofTimer0_Init@PRESCALE FC3B  
              ??_Console_FormFeed 0060                    __size_of_LEDOn 001A  
                 _HMI_SetSegments 436A                ?_GetPortProperties 0060  
                Event_NULL@pState 0001            __end_of_UpdateDistance 4F02  
        __size_of_Event_DIPSwitch 0026             __size_of_Set_Rotation 0092  
                   ??i2_MXK_Queue 0004                         _eval_poly 3AEE  
                     ??_MXK_Queue 0063                      ?_Port_GetPin 0060  
                  __size_of_Drive 0032             __end_of_HMI_SetButton 4B72  
            __size_of_Console_Tab 0094                          ?_reverse 0060  
                    ?_Port_SetPin 006F                         _readIndex 0029  
           __end_of_HMI_SetNumber 5DDA                  ___lwdiv@quotient 0065  
                 _HMI_RightSwitch 600E                    __size_of_floor 0116  
                  __size_of_ldexp 00E4                    __size_of_frexp 009E  
             ??_GetPortProperties 0062           __end_of_Sensor_Observe2 37C2  
         __end_of_Console_NewLine 4A7E              ??_MXK_InitTestButton 008D  
              Byte_GetPair@pInput 0069                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 6156                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 5EFE  
                        _LCD_Fill 56DE                          _LCD_Init 3092  
                  ___wmul@product 0064                          _HMIBoard 0144  
                  i2_Byte_GetZone 4CDC                          _LED_Init 5284  
                       delay_ms@u 0062                Button_Poll@pButton 007B  
                       delay_us@u 0062                          _HMI_Init 2822  
                        _HMI_Poll 510A                MXK_Queue@pCallback 0060  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 5C34          __size_of_Configure_GPIOs 005E  
            __size_of_Byte_GetBit 002C                   ?_Closest_Object 0001  
               Byte_SetQuad@pQuad 006D                          _PIR1bits 000F9E  
                        i2u603_40 4CFE                          i2u603_47 4CF4  
                        i2u605_40 4D46                          _PIR3bits 000FA4  
                        i2u605_45 4D42                          _CW_Count 0128  
                        i2u692_44 55CA                          i2u692_45 55C6  
                        i2u693_44 55F0                          i2u693_45 55EC  
                        i2u790_40 3C46                          i2u791_40 3C7E  
                        i2u696_40 58EE              __size_of_Byte_SetBit 0052  
                        i2u789_40 3C32                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                _Sensor_Observe_Fin 0126  
                __CFG_WDTPS$32768 000000                  HMI_SetBar@pValue 0060  
               Button_Init@pInput 009B           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 008A  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 00A2  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 47F2  
                        _SSP2STAT 000F6D                      _Set_Rotation 4534  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 59F2  
              _Port_CheckPairType 516A                          _MXK_Init 3320  
            __size_of_Init_Timer0 0018                   MXK_SwitchTo@CUR 0066  
                        Drive@Rad 0063                          _SPI_Init 079E  
        __end_of_Event_TestButton 5B70                          _SPI_Send 4E2C  
                        _BangBang 5D3E                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 0065  
               ___wmul@multiplier 0060                 Byte_GetBit@Output 0064  
                      printf@flag 007A              Timer2_Init@pCPUClock 0076  
      __size_of_LCD_FillRectangle 0054                      ?_SteppingCCW 0001  
            __size_of_Button_Init 00B0                   ?_UpdateDistance 0066  
            __end_of_SPI_MaxSpeed 4FD4                        printf@prec 007B  
               Byte_GetBit@pInput 0060               Port_SetPinType@pPin 0088  
            __size_of_Button_Poll 012E                        ?_eval_poly 009F  
              _Port_CheckQuadType 54CA                     _MXK_DIPSwitch 5FBE  
             ?_Port_CheckPairType 0086                         main@right 00E1  
            __end_of_SPI_MinSpeed 503C                     ??_MXK_Dequeue 0076  
                __size_of_LED_Set 0048            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 5840             Button_Poll@pIncrement 007D  
         PortProperty_Valid@F6830 FC3B              __end_ofi2_Motor_Step 3CEE  
                 ??i2_MXK_Release 0001                 ?_Get_Sensor_State 0001  
                      _ADCAverage 11D2                         copy_data0 45DA  
                       copy_data1 45FA                     ??_MXK_Release 0060  
          __end_ofi2_Byte_GetPair 5F18         __size_of_Port_SetQuadType 0212  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 008F  
          __end_ofi2_Byte_GetZone 4D52               __end_ofi2_MXK_Queue 6104  
              ??_Get_Sensor_State 0061               ?_Port_CheckPortType 0096  
                 itos@destination 006E                          _InitList FB79  
            _Motor_Step$intlevel0 38DE                          _Mode_Set 60AC  
              Port_GetQuad@Output 0065                       ??_ToSegment 0060  
                    _ISR_Function 1408                         frexp@eptr 0064  
              Port_GetQuad@pInput 0060                      _Timer2_Clear 613C  
                __size_of_InitADC 0048              __end_of_Word_GetPair 5BA2  
                        _lCBuffer 0264              ??_Port_CheckPairType 008A  
                     ??_Reset_Low 0074                          __Hrparam 0000  
                    OutSeg@pInput 0066                    _Console_Render 24CC  
                        __Lrparam 0000                   Timer2_Init@RDIV 0072  
                ?_FunctInitButton 0001                    LCD_Write@value 0064  
                        _Port_Set 1774                      OutSeg@segset 0042  
                       rand@screw 0040              __end_of_Word_SetPair 5A66  
                     ??_Port_Init 00A3           __end_of_HMI_SetSegments 4406  
            ??_Port_CheckQuadType 0093          __size_of_Closest_Object2 007A  
                __size_of___fladd 033E                  __size_of___fldiv 02B6  
           __size_of_Port_GetQuad 003E                  __size_of___awdiv 0086  
                __size_of___flneg 0030                  __size_of___flmul 0352  
                __size_of___flsub 0048                  __size_of___fltol 00DE  
                __size_of___lldiv 0084                 _MXK_BlockSwitchTo 5A66  
                __size_of___lwdiv 0054              ??_Port_CheckPortType 0099  
                __size_of___lwmod 0044                          _lBufferX 00F5  
                        _lBufferY 00F4               Timer2_Init@PRESCALE FC62  
                    ??_eusartSend 0060                   LCD_Fill@pColour 0069  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 00F1           __end_of_HMI_RightSwitch 6022  
          Byte_GetZone@pChunkSize 0064                    ?_MXK_DIPSwitch 0001  
          Byte_SetZone@pChunkSize 0064             __size_of_Port_SetType 01CE  
                   reverse@length 0062                         itos@input 006C  
           i2MXK_SwitchTo@pModule 0008                          ___xxtofl 2DEE  
                        _delay_ms 5228                          _delay_us 57B6  
                        _clearall 0044                   ___lwdiv@divisor 0062  
                 ___lwdiv@counter 0064                   Port_GetPin@pPin 0062  
                        __ptext10 22FE                          __ptext11 5840  
                        __ptext20 38D8                          __ptext12 1774  
                        __ptext21 6144                          __ptext13 60BE  
                        __ptext30 5ECA                          __ptext22 6110  
                        __ptext14 46E2                          __ptext31 3092  
                        __ptext23 59B8                          __ptext15 476A  
                        __ptext40 5E5A                          __ptext32 4534  
                        __ptext24 5F18                          __ptext16 47F2  
                        __ptext41 5726                          __ptext33 56DE  
                        __ptext25 60CC                          __ptext17 5284  
                        __ptext50 6022                          __ptext42 6128  
                        __ptext34 51CA                          __ptext26 5A66  
                        __ptext18 5696                          __ptext51 6036  
                        __ptext43 510A                          __ptext35 4F6C  
                        __ptext27 57B6                          __ptext19 5B0A  
                        __ptext60 59F2                          __ptext52 593E  
                        __ptext44 345C                          __ptext36 547A  
                        __ptext28 5900                          __ptext61 6132  
                        __ptext53 5D8E                          __ptext45 5FBE  
                        __ptext37 5F30                          __ptext29 5EB0  
                        __ptext70 5BD4                          __ptext62 614A  
                        __ptext54 1404                          __ptext46 5FD2  
                        __ptext38 5F48                          __ptext71 50A4  
                        __ptext63 2822                          __ptext55 5B3E  
                        __ptext47 5FE6                          __ptext39 5F60  
             ??_MXK_BlockSwitchTo 0066                          __ptext80 5A2C  
                        __ptext72 4C66                          __ptext64 4FD4  
                        __ptext56 4AF8                          __ptext48 5FFA  
                        __ptext81 5DFA                          __ptext73 4022  
                        __ptext65 079E                          __ptext57 5880  
                        __ptext49 600E                          __ptext90 5BA2  
                        __ptext82 54CA                          __ptext74 5F78  
                        __ptext66 31DA                          __ptext58 5C94  
                        __ptext91 4F02                          __ptext83 516A  
                        __ptext75 6150                          __ptext67 4900  
                        __ptext59 3F6E                          __ptext92 4BEC  
                        __ptext84 503C                          __ptext76 5F90  
                        __ptext68 613C                          __ptext93 5602  
                        __ptext85 5B70                          __ptext77 2684  
                        __ptext69 5CEE                          __ptext94 40D2  
                        __ptext86 5E78                          __ptext78 5428  
                        __ptext95 2C86                          __ptext87 4B72  
                        __ptext79 1F16                          __ptext96 60DA  
                        __ptext88 5E1A                          __ptext97 2F42  
                        __ptext89 4654                          __ptext98 44A0  
                        __ptext99 52D8                      _SSP1CON1bits 000FC6  
                __size_of_reverse 0054                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 0068                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                ?_Sensor_Observe2 0001                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                 ??_Event_DIPSwitch 0079  
                 ?i2_Byte_GetZone 0001                          _countOff 01F1  
                   __size_of_STP1 0014                     __size_of_STP2 0014  
                   __size_of_STP3 0014                     __size_of_STP4 0014  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
             __end_of_MXK_Dequeue 5B3E                 HMI_SetSegments@in 0064  
           Button_Init@pThreshold 009D                     __size_of_Turn 007A  
                   __size_of_main 079E                     __size_of_itos 00BE  
               Byte_GetPair@pPair 006B                          _readings 0200  
          __end_of_Console_Render 2684          __size_of_Reset_variables 004C  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
              __end_of_eusartSend 60F6                      _Port_GetQuad 593E  
             __end_of_MXK_Release 5F30                    _MXK_TestButton 6036  
         _InitSerialCommunication 5E5A                     i2_Byte_SetBit 55B6  
             i2Word_GetPair@pPair 000F         __end_of_MXK_BlockSwitchTo 5A9E  
        ?_Console_IncrementCursor 0001              __size_of_Timer2_Init 0146  
                        int$flags 0051              __size_of_Timer0_Stop 0006  
                    _Port_SetType 22FE                      Port_Set@Type 0086  
      __size_of_GetPortProperties 0088            __size_of_LCD_DrawField 007E  
               ??_Configure_GPIOs 0095                         printf@val 007E  
                    _SSP1STATbits 000FC7                          main@left 00E2  
                        main@down 00E0                    Timer0_Init@DIV 0104  
                  Timer0_Init@PRE 003E                      _SSP2STATbits 000F6D  
                        exp@coeff FE45                        _LED_Toggle 5880  
                        log@coeff FE6D                        _HMI_GetBar 614A  
            Button_Init@pGetState 00A2            PortProperty_Valid@Pair 0085  
                ??_Port_TogglePin 0077                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2            PortProperty_Valid@pPin 0072  
                     ??_eval_poly 00A7                        _HMI_SetBar 6132  
                      _HMI_Render 5A9E                  Byte_SetZone@MASK 006A  
                     i2_MXK_Queue 60F6                    Timer2_Init@DIV 0100  
                  Timer2_Init@PRE 003D                  Byte_SetZone@pMax 0062  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 003A  
                     ?_ADCAverage 0001              Button_Init@pFunction 00A5  
                        itos@Data 0070                LCD_FillRectangle@i 0075  
              LCD_FillRectangle@j 0076              __size_of_Port_SetPin 00B4  
                        intlevel2 0000                      reverse@input 0060  
                     _numReadings 0049            __size_of_HMI_DIPSwitch 0014  
                ___lwmod@dividend 0067                  ___lldiv@dividend 0060  
          __end_of_MXK_TestButton 604A                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001A                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 003A                    _SPI_DisableISR 5CEE  
                 Port_Init@pInput 00A0                          printf@ap 007C  
                     _thisReading 0124            __size_ofi2_Port_SetPin 00AA  
                      _ISR_Enable 6128                  ?_HMI_SetSegments 0061  
         Console_MakeField@Column 006C               main@Target_Distance 00E4  
           __size_of_SPI_MaxSpeed 0068                     SPI_DCS@pInput 0060  
           __size_of_SPI_MinSpeed 0068                   ??_MXK_DIPSwitch 0066  
           __size_ofi2_Motor_Step 0100           Console_MakeField@pInput 006B  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 0068  
                   ??_GetPortPORT 0062                   ___lwmod@divisor 0069  
                   ??_GetPortTRIS 0062                 ??_Closest_Object2 00D9  
              Word_SetPair@pInput 006F                   ___lwmod@counter 006B  
              Word_SetPair@pValue 0072                       _MXK_Dequeue 5B0A  
            __size_of_SteppingCCW 004A                    LED_Toggle@pLED 0078  
                   ___fladd@signs 009B                     _LCD_DrawField 4984  
                _Port_SetQuadType 1F16                       _MXK_Release 5F18  
       __size_of_Console_FormFeed 006C                      _MXK_SwitchTo 59B8  
           __size_of_Word_GetPair 0032                Byte_GetZone@Offset 0067  
                   ?_Console_Init 0001                 Word_SetPair@pPair 0071  
                ??_Closest_Object 00D9                   _Port_SetPinType 2684  
                    ___fladd@aexp 009C                      ___fladd@bexp 009D  
         __size_of_Timer0_Restart 000C                Byte_GetZone@Output 0068  
       ??_InitSerialCommunication 0060                Byte_GetZone@pChunk 0063  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 5EB0  
              Byte_GetZone@pInput 0060           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 532C             __size_of_Word_SetPair 003A  
          __end_of_SPI_DisableISR 5D16                      _SPI_MaxSpeed 4F6C  
                    _SPI_MinSpeed 4FD4                Port_Set@TypeActual 0084  
                      Drive@Speed 0061  
