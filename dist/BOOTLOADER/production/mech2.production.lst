

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed May 16 11:15:57 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1,inline
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1,inline
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1,group=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1,inline
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1,inline
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   153                           	psect	text131,global,reloc=2,class=CODE,delta=1
   154                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   155                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   156  0000                     
   157                           ; Version 1.44
   158                           ; Generated 14/09/2017 GMT
   159                           ; 
   160                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   161                           ; All rights reserved.
   162                           ; 
   163                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   164                           ; 
   165                           ; Redistribution and use in source and binary forms, with or without modification, are
   166                           ; permitted provided that the following conditions are met:
   167                           ; 
   168                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   169                           ;        conditions and the following disclaimer.
   170                           ; 
   171                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   172                           ;        of conditions and the following disclaimer in the documentation and/or other
   173                           ;        materials provided with the distribution.
   174                           ; 
   175                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   176                           ;        software without specific prior written permission.
   177                           ; 
   178                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   179                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   180                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   181                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   182                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   183                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   184                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   185                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   186                           ; 
   187                           ; 
   188                           ; Code-generator required, PIC18F67J50 Definitions
   189                           ; 
   190                           ; SFR Addresses
   191  0000                     
   192                           	psect	idataCOMRAM
   193  013A80                     __pidataCOMRAM:
   194                           	opt stack 0
   195                           
   196                           ;initializer for _gCursor
   197  013A80  0006               	dw	6
   198  013A82  0006               	dw	6
   199                           
   200                           ;initializer for _numReadings
   201  013A84  0032               	dw	50
   202                           
   203                           ;initializer for _top
   204  013A86  FFFF               	dw	65535
   205                           
   206                           ;initializer for _Bus_State
   207  013A88  01                 	db	1
   208                           
   209                           ;initializer for _A
   210  013A89  41                 	db	65
   211                           
   212                           ;initializer for _a
   213  013A8A  61                 	db	97
   214                           
   215                           ;initializer for _zero
   216  013A8B  30                 	db	48
   217                           
   218                           ;initializer for _l
   219  013A8C  80                 	db	128
   220                           
   221                           ;initializer for _w
   222  013A8D  80                 	db	128
   223                           
   224                           	psect	idataBANK0
   225  013AD4                     __pidataBANK0:
   226                           	opt stack 0
   227                           
   228                           ;initializer for _countOff
   229  013AD4  00F8               	dw	248
   230                           
   231                           ;initializer for _countOn
   232  013AD6  007C               	dw	124
   233                           
   234                           ;initializer for _Low_Sensor
   235  013AD8  2710               	dw	10000
   236                           
   237                           ;initializer for _y_grid
   238  013ADA  0004               	dw	4
   239                           
   240                           ;initializer for _x_grid
   241  013ADC  0005               	dw	5
   242                           
   243                           ;initializer for _gForecolour
   244  013ADE  FFFF               	dw	65535
   245                           
   246                           ;initializer for _change
   247  013AE0  01                 	db	1
   248                           
   249                           	psect	idataBANK1
   250  013AE1                     __pidataBANK1:
   251                           	opt stack 0
   252                           
   253                           ;initializer for Console_Render@F6956
   254  013AE1  0006               	dw	6
   255  013AE3  0006               	dw	6
   256                           
   257                           ;initializer for _gLineSize
   258  013AE5  0080               	dw	128
   259  013AE7  0007               	dw	7
   260                           
   261                           ;initializer for _gCharSize
   262  013AE9  0005               	dw	5
   263  013AEB  0007               	dw	7
   264                           
   265                           	psect	mediumconst
   266  00FBEA                     __pmediumconst:
   267                           	opt stack 0
   268  00FBEA  00                 	db	0
   269  00FBEB                     _InitList:
   270                           	opt stack 0
   271  00FBEB  1100               	dw	4352
   272  00FBED  0080               	dw	128
   273  00FBEF  012C               	dw	300
   274  00FBF1  B100               	dw	45312
   275  00FBF3  0002               	dw	2
   276  00FBF5  0035               	dw	53
   277  00FBF7  0036               	dw	54
   278  00FBF9  B200               	dw	45568
   279  00FBFB  0002               	dw	2
   280  00FBFD  0035               	dw	53
   281  00FBFF  0036               	dw	54
   282  00FC01  B300               	dw	45824
   283  00FC03  0002               	dw	2
   284  00FC05  0035               	dw	53
   285  00FC07  0036               	dw	54
   286  00FC09  0002               	dw	2
   287  00FC0B  0035               	dw	53
   288  00FC0D  0036               	dw	54
   289  00FC0F  B400               	dw	46080
   290  00FC11  0000               	dw	0
   291  00FC13  C000               	dw	49152
   292  00FC15  00A2               	dw	162
   293  00FC17  0002               	dw	2
   294  00FC19  0084               	dw	132
   295  00FC1B  C100               	dw	49408
   296  00FC1D  00C5               	dw	197
   297  00FC1F  C200               	dw	49664
   298  00FC21  000D               	dw	13
   299  00FC23  0000               	dw	0
   300  00FC25  C300               	dw	49920
   301  00FC27  008D               	dw	141
   302  00FC29  002A               	dw	42
   303  00FC2B  C400               	dw	50176
   304  00FC2D  008D               	dw	141
   305  00FC2F  00EE               	dw	238
   306  00FC31  C500               	dw	50432
   307  00FC33  000A               	dw	10
   308  00FC35  3600               	dw	13824
   309  00FC37  00C8               	dw	200
   310  00FC39  E000               	dw	57344
   311  00FC3B  0012               	dw	18
   312  00FC3D  001C               	dw	28
   313  00FC3F  0010               	dw	16
   314  00FC41  0018               	dw	24
   315  00FC43  0033               	dw	51
   316  00FC45  002C               	dw	44
   317  00FC47  0025               	dw	37
   318  00FC49  0028               	dw	40
   319  00FC4B  0028               	dw	40
   320  00FC4D  0027               	dw	39
   321  00FC4F  002F               	dw	47
   322  00FC51  003C               	dw	60
   323  00FC53  0000               	dw	0
   324  00FC55  0003               	dw	3
   325  00FC57  0003               	dw	3
   326  00FC59  0010               	dw	16
   327  00FC5B  0080               	dw	128
   328  00FC5D  0078               	dw	120
   329  00FC5F  E100               	dw	57600
   330  00FC61  0012               	dw	18
   331  00FC63  001C               	dw	28
   332  00FC65  0010               	dw	16
   333  00FC67  0018               	dw	24
   334  00FC69  002D               	dw	45
   335  00FC6B  0028               	dw	40
   336  00FC6D  0023               	dw	35
   337  00FC6F  0028               	dw	40
   338  00FC71  0028               	dw	40
   339  00FC73  0026               	dw	38
   340  00FC75  002F               	dw	47
   341  00FC77  003B               	dw	59
   342  00FC79  0000               	dw	0
   343  00FC7B  0003               	dw	3
   344  00FC7D  0003               	dw	3
   345  00FC7F  0010               	dw	16
   346  00FC81  3A00               	dw	14848
   347  00FC83  0005               	dw	5
   348  00FC85  2A00               	dw	10752
   349  00FC87  0000               	dw	0
   350  00FC89  0002               	dw	2
   351  00FC8B  0000               	dw	0
   352  00FC8D  0081               	dw	129
   353  00FC8F  2B00               	dw	11008
   354  00FC91  0000               	dw	0
   355  00FC93  0003               	dw	3
   356  00FC95  0000               	dw	0
   357  00FC97  00A2               	dw	162
   358  00FC99  2900               	dw	10496
   359  00FC9B  2C00               	dw	11264
   360  00FC9D                     __end_of_InitList:
   361                           	opt stack 0
   362  00FC9D                     Timer0_Init@PRESCALE:
   363                           	opt stack 0
   364  00FC9D  0002               	dw	2
   365  00FC9F  0004               	dw	4
   366  00FCA1  0008               	dw	8
   367  00FCA3  0010               	dw	16
   368  00FCA5  0020               	dw	32
   369  00FCA7  0040               	dw	64
   370  00FCA9  0080               	dw	128
   371  00FCAB  0100               	dw	256
   372  00FCAD                     __end_ofTimer0_Init@PRESCALE:
   373                           	opt stack 0
   374  00FCAD                     PortProperty_Valid@F6830:
   375                           	opt stack 0
   376  00FCAD  00                 	db	0
   377  00FCAE  01                 	db	1
   378  00FCAF  02                 	db	2
   379  00FCB0  00                 	db	0
   380  00FCB1  01                 	db	1
   381  00FCB2  00                 	db	0
   382  00FCB3  01                 	db	1
   383  00FCB4  00                 	db	0
   384  00FCB5  02                 	db	2
   385  00FCB6  02                 	db	2
   386  00FCB7  00                 	db	0
   387  00FCB8  00                 	db	0
   388  00FCB9  03                 	db	3
   389  00FCBA  03                 	db	3
   390  00FCBB  03                 	db	3
   391  00FCBC  00                 	db	0
   392  00FCBD                     __end_ofPortProperty_Valid@F6830:
   393                           	opt stack 0
   394  00FCBD                     _dpowers:
   395                           	opt stack 0
   396  00FCBD  0001               	dw	1
   397  00FCBF  000A               	dw	10
   398  00FCC1  0064               	dw	100
   399  00FCC3  03E8               	dw	1000
   400  00FCC5  2710               	dw	10000
   401  00FCC7                     __end_of_dpowers:
   402                           	opt stack 0
   403  00FCC7                     _MASKS:
   404                           	opt stack 0
   405  00FCC7  00                 	db	0
   406  00FCC8  01                 	db	1
   407  00FCC9  03                 	db	3
   408  00FCCA  07                 	db	7
   409  00FCCB  0F                 	db	15
   410  00FCCC  1F                 	db	31
   411  00FCCD  3F                 	db	63
   412  00FCCE  7F                 	db	127
   413  00FCCF  FF                 	db	255
   414  00FCD0                     __end_of_MASKS:
   415                           	opt stack 0
   416  00FCD0                     HMI_SetButton@F7213:
   417                           	opt stack 0
   418  00FCD0  00                 	db	0
   419  00FCD1  02                 	db	2
   420  00FCD2  01                 	db	1
   421  00FCD3  03                 	db	3
   422  00FCD4                     __end_ofHMI_SetButton@F7213:
   423                           	opt stack 0
   424  00FCD4                     Timer2_Init@PRESCALE:
   425                           	opt stack 0
   426  00FCD4  01                 	db	1
   427  00FCD5  04                 	db	4
   428  00FCD6  10                 	db	16
   429  00FCD7                     __end_ofTimer2_Init@PRESCALE:
   430                           	opt stack 0
   431  00FCD7                     _Font5x7:
   432                           	opt stack 0
   433  00FCD7  00                 	db	0
   434  00FCD8  00                 	db	0
   435  00FCD9  00                 	db	0
   436  00FCDA  00                 	db	0
   437  00FCDB  00                 	db	0
   438  00FCDC  00                 	db	0
   439  00FCDD  00                 	db	0
   440  00FCDE  5F                 	db	95
   441  00FCDF  00                 	db	0
   442  00FCE0  00                 	db	0
   443  00FCE1  00                 	db	0
   444  00FCE2  07                 	db	7
   445  00FCE3  00                 	db	0
   446  00FCE4  07                 	db	7
   447  00FCE5  00                 	db	0
   448  00FCE6  14                 	db	20
   449  00FCE7  7F                 	db	127
   450  00FCE8  14                 	db	20
   451  00FCE9  7F                 	db	127
   452  00FCEA  14                 	db	20
   453  00FCEB  24                 	db	36
   454  00FCEC  2A                 	db	42
   455  00FCED  7F                 	db	127
   456  00FCEE  2A                 	db	42
   457  00FCEF  12                 	db	18
   458  00FCF0  23                 	db	35
   459  00FCF1  13                 	db	19
   460  00FCF2  08                 	db	8
   461  00FCF3  64                 	db	100
   462  00FCF4  62                 	db	98
   463  00FCF5  36                 	db	54
   464  00FCF6  49                 	db	73
   465  00FCF7  55                 	db	85
   466  00FCF8  22                 	db	34
   467  00FCF9  50                 	db	80
   468  00FCFA  00                 	db	0
   469  00FCFB  05                 	db	5
   470  00FCFC  03                 	db	3
   471  00FCFD  00                 	db	0
   472  00FCFE  00                 	db	0
   473  00FCFF  00                 	db	0
   474  00FD00  1C                 	db	28
   475  00FD01  22                 	db	34
   476  00FD02  41                 	db	65
   477  00FD03  00                 	db	0
   478  00FD04  00                 	db	0
   479  00FD05  41                 	db	65
   480  00FD06  22                 	db	34
   481  00FD07  1C                 	db	28
   482  00FD08  00                 	db	0
   483  00FD09  08                 	db	8
   484  00FD0A  2A                 	db	42
   485  00FD0B  1C                 	db	28
   486  00FD0C  2A                 	db	42
   487  00FD0D  08                 	db	8
   488  00FD0E  08                 	db	8
   489  00FD0F  08                 	db	8
   490  00FD10  3E                 	db	62
   491  00FD11  08                 	db	8
   492  00FD12  08                 	db	8
   493  00FD13  00                 	db	0
   494  00FD14  50                 	db	80
   495  00FD15  30                 	db	48
   496  00FD16  00                 	db	0
   497  00FD17  00                 	db	0
   498  00FD18  08                 	db	8
   499  00FD19  08                 	db	8
   500  00FD1A  08                 	db	8
   501  00FD1B  08                 	db	8
   502  00FD1C  08                 	db	8
   503  00FD1D  00                 	db	0
   504  00FD1E  60                 	db	96
   505  00FD1F  60                 	db	96
   506  00FD20  00                 	db	0
   507  00FD21  00                 	db	0
   508  00FD22  20                 	db	32
   509  00FD23  10                 	db	16
   510  00FD24  08                 	db	8
   511  00FD25  04                 	db	4
   512  00FD26  02                 	db	2
   513  00FD27  3E                 	db	62
   514  00FD28  51                 	db	81
   515  00FD29  49                 	db	73
   516  00FD2A  45                 	db	69
   517  00FD2B  3E                 	db	62
   518  00FD2C  00                 	db	0
   519  00FD2D  42                 	db	66
   520  00FD2E  7F                 	db	127
   521  00FD2F  40                 	db	64
   522  00FD30  00                 	db	0
   523  00FD31  42                 	db	66
   524  00FD32  61                 	db	97
   525  00FD33  51                 	db	81
   526  00FD34  49                 	db	73
   527  00FD35  46                 	db	70
   528  00FD36  21                 	db	33
   529  00FD37  41                 	db	65
   530  00FD38  45                 	db	69
   531  00FD39  4B                 	db	75
   532  00FD3A  31                 	db	49
   533  00FD3B  18                 	db	24
   534  00FD3C  14                 	db	20
   535  00FD3D  12                 	db	18
   536  00FD3E  7F                 	db	127
   537  00FD3F  10                 	db	16
   538  00FD40  27                 	db	39
   539  00FD41  45                 	db	69
   540  00FD42  45                 	db	69
   541  00FD43  45                 	db	69
   542  00FD44  39                 	db	57
   543  00FD45  3C                 	db	60
   544  00FD46  4A                 	db	74
   545  00FD47  49                 	db	73
   546  00FD48  49                 	db	73
   547  00FD49  30                 	db	48
   548  00FD4A  01                 	db	1
   549  00FD4B  71                 	db	113
   550  00FD4C  09                 	db	9
   551  00FD4D  05                 	db	5
   552  00FD4E  03                 	db	3
   553  00FD4F  36                 	db	54
   554  00FD50  49                 	db	73
   555  00FD51  49                 	db	73
   556  00FD52  49                 	db	73
   557  00FD53  36                 	db	54
   558  00FD54  06                 	db	6
   559  00FD55  49                 	db	73
   560  00FD56  49                 	db	73
   561  00FD57  29                 	db	41
   562  00FD58  1E                 	db	30
   563  00FD59  00                 	db	0
   564  00FD5A  36                 	db	54
   565  00FD5B  36                 	db	54
   566  00FD5C  00                 	db	0
   567  00FD5D  00                 	db	0
   568  00FD5E  00                 	db	0
   569  00FD5F  56                 	db	86
   570  00FD60  36                 	db	54
   571  00FD61  00                 	db	0
   572  00FD62  00                 	db	0
   573  00FD63  00                 	db	0
   574  00FD64  08                 	db	8
   575  00FD65  14                 	db	20
   576  00FD66  22                 	db	34
   577  00FD67  41                 	db	65
   578  00FD68  14                 	db	20
   579  00FD69  14                 	db	20
   580  00FD6A  14                 	db	20
   581  00FD6B  14                 	db	20
   582  00FD6C  14                 	db	20
   583  00FD6D  41                 	db	65
   584  00FD6E  22                 	db	34
   585  00FD6F  14                 	db	20
   586  00FD70  08                 	db	8
   587  00FD71  00                 	db	0
   588  00FD72  02                 	db	2
   589  00FD73  01                 	db	1
   590  00FD74  51                 	db	81
   591  00FD75  09                 	db	9
   592  00FD76  06                 	db	6
   593  00FD77  32                 	db	50
   594  00FD78  49                 	db	73
   595  00FD79  79                 	db	121
   596  00FD7A  41                 	db	65
   597  00FD7B  3E                 	db	62
   598  00FD7C  7E                 	db	126
   599  00FD7D  11                 	db	17
   600  00FD7E  11                 	db	17
   601  00FD7F  11                 	db	17
   602  00FD80  7E                 	db	126
   603  00FD81  7F                 	db	127
   604  00FD82  49                 	db	73
   605  00FD83  49                 	db	73
   606  00FD84  49                 	db	73
   607  00FD85  36                 	db	54
   608  00FD86  3E                 	db	62
   609  00FD87  41                 	db	65
   610  00FD88  41                 	db	65
   611  00FD89  41                 	db	65
   612  00FD8A  22                 	db	34
   613  00FD8B  7F                 	db	127
   614  00FD8C  41                 	db	65
   615  00FD8D  41                 	db	65
   616  00FD8E  22                 	db	34
   617  00FD8F  1C                 	db	28
   618  00FD90  7F                 	db	127
   619  00FD91  49                 	db	73
   620  00FD92  49                 	db	73
   621  00FD93  49                 	db	73
   622  00FD94  41                 	db	65
   623  00FD95  7F                 	db	127
   624  00FD96  09                 	db	9
   625  00FD97  09                 	db	9
   626  00FD98  01                 	db	1
   627  00FD99  01                 	db	1
   628  00FD9A  3E                 	db	62
   629  00FD9B  41                 	db	65
   630  00FD9C  41                 	db	65
   631  00FD9D  51                 	db	81
   632  00FD9E  32                 	db	50
   633  00FD9F  7F                 	db	127
   634  00FDA0  08                 	db	8
   635  00FDA1  08                 	db	8
   636  00FDA2  08                 	db	8
   637  00FDA3  7F                 	db	127
   638  00FDA4  00                 	db	0
   639  00FDA5  41                 	db	65
   640  00FDA6  7F                 	db	127
   641  00FDA7  41                 	db	65
   642  00FDA8  00                 	db	0
   643  00FDA9  20                 	db	32
   644  00FDAA  40                 	db	64
   645  00FDAB  41                 	db	65
   646  00FDAC  3F                 	db	63
   647  00FDAD  01                 	db	1
   648  00FDAE  7F                 	db	127
   649  00FDAF  08                 	db	8
   650  00FDB0  14                 	db	20
   651  00FDB1  22                 	db	34
   652  00FDB2  41                 	db	65
   653  00FDB3  7F                 	db	127
   654  00FDB4  40                 	db	64
   655  00FDB5  40                 	db	64
   656  00FDB6  40                 	db	64
   657  00FDB7  40                 	db	64
   658  00FDB8  7F                 	db	127
   659  00FDB9  02                 	db	2
   660  00FDBA  04                 	db	4
   661  00FDBB  02                 	db	2
   662  00FDBC  7F                 	db	127
   663  00FDBD  7F                 	db	127
   664  00FDBE  04                 	db	4
   665  00FDBF  08                 	db	8
   666  00FDC0  10                 	db	16
   667  00FDC1  7F                 	db	127
   668  00FDC2  3E                 	db	62
   669  00FDC3  41                 	db	65
   670  00FDC4  41                 	db	65
   671  00FDC5  41                 	db	65
   672  00FDC6  3E                 	db	62
   673  00FDC7  7F                 	db	127
   674  00FDC8  09                 	db	9
   675  00FDC9  09                 	db	9
   676  00FDCA  09                 	db	9
   677  00FDCB  06                 	db	6
   678  00FDCC  3E                 	db	62
   679  00FDCD  41                 	db	65
   680  00FDCE  51                 	db	81
   681  00FDCF  21                 	db	33
   682  00FDD0  5E                 	db	94
   683  00FDD1  7F                 	db	127
   684  00FDD2  09                 	db	9
   685  00FDD3  19                 	db	25
   686  00FDD4  29                 	db	41
   687  00FDD5  46                 	db	70
   688  00FDD6  46                 	db	70
   689  00FDD7  49                 	db	73
   690  00FDD8  49                 	db	73
   691  00FDD9  49                 	db	73
   692  00FDDA  31                 	db	49
   693  00FDDB  01                 	db	1
   694  00FDDC  01                 	db	1
   695  00FDDD  7F                 	db	127
   696  00FDDE  01                 	db	1
   697  00FDDF  01                 	db	1
   698  00FDE0  3F                 	db	63
   699  00FDE1  40                 	db	64
   700  00FDE2  40                 	db	64
   701  00FDE3  40                 	db	64
   702  00FDE4  3F                 	db	63
   703  00FDE5  1F                 	db	31
   704  00FDE6  20                 	db	32
   705  00FDE7  40                 	db	64
   706  00FDE8  20                 	db	32
   707  00FDE9  1F                 	db	31
   708  00FDEA  7F                 	db	127
   709  00FDEB  20                 	db	32
   710  00FDEC  18                 	db	24
   711  00FDED  20                 	db	32
   712  00FDEE  7F                 	db	127
   713  00FDEF  63                 	db	99
   714  00FDF0  14                 	db	20
   715  00FDF1  08                 	db	8
   716  00FDF2  14                 	db	20
   717  00FDF3  63                 	db	99
   718  00FDF4  03                 	db	3
   719  00FDF5  04                 	db	4
   720  00FDF6  78                 	db	120
   721  00FDF7  04                 	db	4
   722  00FDF8  03                 	db	3
   723  00FDF9  61                 	db	97
   724  00FDFA  51                 	db	81
   725  00FDFB  49                 	db	73
   726  00FDFC  45                 	db	69
   727  00FDFD  43                 	db	67
   728  00FDFE  00                 	db	0
   729  00FDFF  00                 	db	0
   730  00FE00  7F                 	db	127
   731  00FE01  41                 	db	65
   732  00FE02  41                 	db	65
   733  00FE03  02                 	db	2
   734  00FE04  04                 	db	4
   735  00FE05  08                 	db	8
   736  00FE06  10                 	db	16
   737  00FE07  20                 	db	32
   738  00FE08  41                 	db	65
   739  00FE09  41                 	db	65
   740  00FE0A  7F                 	db	127
   741  00FE0B  00                 	db	0
   742  00FE0C  00                 	db	0
   743  00FE0D  04                 	db	4
   744  00FE0E  02                 	db	2
   745  00FE0F  01                 	db	1
   746  00FE10  02                 	db	2
   747  00FE11  04                 	db	4
   748  00FE12  40                 	db	64
   749  00FE13  40                 	db	64
   750  00FE14  40                 	db	64
   751  00FE15  40                 	db	64
   752  00FE16  40                 	db	64
   753  00FE17  00                 	db	0
   754  00FE18  01                 	db	1
   755  00FE19  02                 	db	2
   756  00FE1A  04                 	db	4
   757  00FE1B  00                 	db	0
   758  00FE1C  20                 	db	32
   759  00FE1D  54                 	db	84
   760  00FE1E  54                 	db	84
   761  00FE1F  54                 	db	84
   762  00FE20  78                 	db	120
   763  00FE21  7F                 	db	127
   764  00FE22  48                 	db	72
   765  00FE23  44                 	db	68
   766  00FE24  44                 	db	68
   767  00FE25  38                 	db	56
   768  00FE26  38                 	db	56
   769  00FE27  44                 	db	68
   770  00FE28  44                 	db	68
   771  00FE29  44                 	db	68
   772  00FE2A  20                 	db	32
   773  00FE2B  38                 	db	56
   774  00FE2C  44                 	db	68
   775  00FE2D  44                 	db	68
   776  00FE2E  48                 	db	72
   777  00FE2F  7F                 	db	127
   778  00FE30  38                 	db	56
   779  00FE31  54                 	db	84
   780  00FE32  54                 	db	84
   781  00FE33  54                 	db	84
   782  00FE34  18                 	db	24
   783  00FE35  08                 	db	8
   784  00FE36  7E                 	db	126
   785  00FE37  09                 	db	9
   786  00FE38  01                 	db	1
   787  00FE39  02                 	db	2
   788  00FE3A  08                 	db	8
   789  00FE3B  14                 	db	20
   790  00FE3C  54                 	db	84
   791  00FE3D  54                 	db	84
   792  00FE3E  3C                 	db	60
   793  00FE3F  7F                 	db	127
   794  00FE40  08                 	db	8
   795  00FE41  04                 	db	4
   796  00FE42  04                 	db	4
   797  00FE43  78                 	db	120
   798  00FE44  00                 	db	0
   799  00FE45  44                 	db	68
   800  00FE46  7D                 	db	125
   801  00FE47  40                 	db	64
   802  00FE48  00                 	db	0
   803  00FE49  20                 	db	32
   804  00FE4A  40                 	db	64
   805  00FE4B  44                 	db	68
   806  00FE4C  3D                 	db	61
   807  00FE4D  00                 	db	0
   808  00FE4E  00                 	db	0
   809  00FE4F  7F                 	db	127
   810  00FE50  10                 	db	16
   811  00FE51  28                 	db	40
   812  00FE52  44                 	db	68
   813  00FE53  00                 	db	0
   814  00FE54  41                 	db	65
   815  00FE55  7F                 	db	127
   816  00FE56  40                 	db	64
   817  00FE57  00                 	db	0
   818  00FE58  7C                 	db	124
   819  00FE59  04                 	db	4
   820  00FE5A  18                 	db	24
   821  00FE5B  04                 	db	4
   822  00FE5C  78                 	db	120
   823  00FE5D  7C                 	db	124
   824  00FE5E  08                 	db	8
   825  00FE5F  04                 	db	4
   826  00FE60  04                 	db	4
   827  00FE61  78                 	db	120
   828  00FE62  38                 	db	56
   829  00FE63  44                 	db	68
   830  00FE64  44                 	db	68
   831  00FE65  44                 	db	68
   832  00FE66  38                 	db	56
   833  00FE67  7C                 	db	124
   834  00FE68  14                 	db	20
   835  00FE69  14                 	db	20
   836  00FE6A  14                 	db	20
   837  00FE6B  08                 	db	8
   838  00FE6C  08                 	db	8
   839  00FE6D  14                 	db	20
   840  00FE6E  14                 	db	20
   841  00FE6F  18                 	db	24
   842  00FE70  7C                 	db	124
   843  00FE71  7C                 	db	124
   844  00FE72  08                 	db	8
   845  00FE73  04                 	db	4
   846  00FE74  04                 	db	4
   847  00FE75  08                 	db	8
   848  00FE76  48                 	db	72
   849  00FE77  54                 	db	84
   850  00FE78  54                 	db	84
   851  00FE79  54                 	db	84
   852  00FE7A  20                 	db	32
   853  00FE7B  04                 	db	4
   854  00FE7C  3F                 	db	63
   855  00FE7D  44                 	db	68
   856  00FE7E  40                 	db	64
   857  00FE7F  20                 	db	32
   858  00FE80  3C                 	db	60
   859  00FE81  40                 	db	64
   860  00FE82  40                 	db	64
   861  00FE83  20                 	db	32
   862  00FE84  7C                 	db	124
   863  00FE85  1C                 	db	28
   864  00FE86  20                 	db	32
   865  00FE87  40                 	db	64
   866  00FE88  20                 	db	32
   867  00FE89  1C                 	db	28
   868  00FE8A  3C                 	db	60
   869  00FE8B  40                 	db	64
   870  00FE8C  30                 	db	48
   871  00FE8D  40                 	db	64
   872  00FE8E  3C                 	db	60
   873  00FE8F  44                 	db	68
   874  00FE90  28                 	db	40
   875  00FE91  10                 	db	16
   876  00FE92  28                 	db	40
   877  00FE93  44                 	db	68
   878  00FE94  0C                 	db	12
   879  00FE95  50                 	db	80
   880  00FE96  50                 	db	80
   881  00FE97  50                 	db	80
   882  00FE98  3C                 	db	60
   883  00FE99  44                 	db	68
   884  00FE9A  64                 	db	100
   885  00FE9B  54                 	db	84
   886  00FE9C  4C                 	db	76
   887  00FE9D  44                 	db	68
   888  00FE9E  00                 	db	0
   889  00FE9F  08                 	db	8
   890  00FEA0  36                 	db	54
   891  00FEA1  41                 	db	65
   892  00FEA2  00                 	db	0
   893  00FEA3  00                 	db	0
   894  00FEA4  00                 	db	0
   895  00FEA5  7F                 	db	127
   896  00FEA6  00                 	db	0
   897  00FEA7  00                 	db	0
   898  00FEA8  00                 	db	0
   899  00FEA9  41                 	db	65
   900  00FEAA  36                 	db	54
   901  00FEAB  08                 	db	8
   902  00FEAC  00                 	db	0
   903  00FEAD  08                 	db	8
   904  00FEAE  08                 	db	8
   905  00FEAF  2A                 	db	42
   906  00FEB0  1C                 	db	28
   907  00FEB1  08                 	db	8
   908  00FEB2  08                 	db	8
   909  00FEB3  1C                 	db	28
   910  00FEB4  2A                 	db	42
   911  00FEB5  08                 	db	8
   912  00FEB6  08                 	db	8
   913  00FEB7                     __end_of_Font5x7:
   914                           	opt stack 0
   915  00FEB7                     exp@coeff:
   916                           	opt stack 0
   917  00FEB7  0000               	dw	0
   918  00FEB9  3F80               	dw	16256
   919  00FEBB  7218               	dw	29208
   920  00FEBD  3F31               	dw	16177
   921  00FEBF  FDF0               	dw	65008
   922  00FEC1  3E75               	dw	15989
   923  00FEC3  5847               	dw	22599
   924  00FEC5  3D63               	dw	15715
   925  00FEC7  9558               	dw	38232
   926  00FEC9  3C1D               	dw	15389
   927  00FECB  C482               	dw	50306
   928  00FECD  3AAE               	dw	15022
   929  00FECF  78A8               	dw	30888
   930  00FED1  3921               	dw	14625
   931  00FED3  93EF               	dw	37871
   932  00FED5  3780               	dw	14208
   933  00FED7  92A0               	dw	37536
   934  00FED9  35A7               	dw	13735
   935  00FEDB  5646               	dw	22086
   936  00FEDD  3415               	dw	13333
   937  00FEDF                     __end_ofexp@coeff:
   938                           	opt stack 0
   939  00FEDF                     log@coeff:
   940                           	opt stack 0
   941  00FEDF  0000               	dw	0
   942  00FEE1  0000               	dw	0
   943  00FEE3  FFC4               	dw	65476
   944  00FEE5  3F7F               	dw	16255
   945  00FEE7  EF80               	dw	61312
   946  00FEE9  BEFF               	dw	48895
   947  00FEEB  E190               	dw	57744
   948  00FEED  3EA9               	dw	16041
   949  00FEEF  82EC               	dw	33516
   950  00FEF1  BE76               	dw	48758
   951  00FEF3  AD82               	dw	44418
   952  00FEF5  3E2B               	dw	15915
   953  00FEF7  3C0E               	dw	15374
   954  00FEF9  BDC3               	dw	48579
   955  00FEFB  D187               	dw	53639
   956  00FEFD  3D13               	dw	15635
   957  00FEFF  7841               	dw	30785
   958  00FF01  BBD3               	dw	48083
   959  00FF03                     __end_oflog@coeff:
   960                           	opt stack 0
   961  00FF03                     _PortG_Property:
   962                           	opt stack 0
   963  00FF03  FC00               	dw	64512
   964  00FF05                     __end_of_PortG_Property:
   965                           	opt stack 0
   966  00FF05                     _PortF_Property:
   967                           	opt stack 0
   968  00FF05  0FFF               	dw	4095
   969  00FF07                     __end_of_PortF_Property:
   970                           	opt stack 0
   971  00FF07                     _PortE_Property:
   972                           	opt stack 0
   973  00FF07  0000               	dw	0
   974  00FF09                     __end_of_PortE_Property:
   975                           	opt stack 0
   976  00FF09                     _PortD_Property:
   977                           	opt stack 0
   978  00FF09  FFFF               	dw	65535
   979  00FF0B                     __end_of_PortD_Property:
   980                           	opt stack 0
   981  00FF0B                     _PortC_Property:
   982                           	opt stack 0
   983  00FF0B  FFF0               	dw	65520
   984  00FF0D                     __end_of_PortC_Property:
   985                           	opt stack 0
   986  00FF0D                     _PortB_Property:
   987                           	opt stack 0
   988  00FF0D  FF00               	dw	65280
   989  00FF0F                     __end_of_PortB_Property:
   990                           	opt stack 0
   991  00FF0F                     _PortA_Property:
   992                           	opt stack 0
   993  00FF0F  00FF               	dw	255
   994  00FF11                     __end_of_PortA_Property:
   995                           	opt stack 0
   996  0000                     _ADRES	set	4035
   997  0000                     _TMR0	set	4054
   998  0000                     _RCREG1	set	4015
   999  0000                     _TXREG1	set	4014
  1000  0000                     _SPBRG1	set	4016
  1001  0000                     _TXSTA1bits	set	4013
  1002  0000                     _BAUDCON1bits	set	3966
  1003  0000                     _RCSTA1	set	4012
  1004  0000                     _TXSTA1	set	4013
  1005  0000                     _TRISCbits	set	3988
  1006  0000                     _ADCON0	set	4034
  1007  0000                     _ADCON1	set	4033
  1008  0000                     _PR2	set	4043
  1009  0000                     _T2CONbits	set	4042
  1010  0000                     _T0CONbits	set	4053
  1011  0000                     _RCONbits	set	4048
  1012  0000                     _OSCTUNEbits	set	3995
  1013  0000                     _PIR3	set	4004
  1014  0000                     _PIR2	set	4001
  1015  0000                     _PIR1	set	3998
  1016  0000                     _INTCONbits	set	4082
  1017  0000                     _SSP2CON2bits	set	3947
  1018  0000                     _SSP1CON2bits	set	4037
  1019  0000                     _SSP1ADD	set	4040
  1020  0000                     _ANCON0	set	4033
  1021  0000                     _ADRESL	set	4035
  1022  0000                     _ADRESH	set	4036
  1023  0000                     _ADCON1bits	set	4033
  1024  0000                     _ADCON0bits	set	4034
  1025  0000                     _SSP2CON1bits	set	3948
  1026  0000                     _SSP1CON1bits	set	4038
  1027  0000                     _SSP2STATbits	set	3949
  1028  0000                     _SSP1STATbits	set	4039
  1029  0000                     _PIE3bits	set	4003
  1030  0000                     _PIE1bits	set	3997
  1031  0000                     _PIR3bits	set	4004
  1032  0000                     _PIR1bits	set	3998
  1033  0000                     _IPR3bits	set	4005
  1034  0000                     _IPR1bits	set	3999
  1035  0000                     _PORTFbits	set	3973
  1036  0000                     _SSP2CON2	set	3947
  1037  0000                     _SSP1CON2	set	4037
  1038  0000                     _SSP2BUF	set	3951
  1039  0000                     _SSP2CON1	set	3948
  1040  0000                     _SSP2STAT	set	3949
  1041  0000                     _SSP1BUF	set	4041
  1042  0000                     _SSP1CON1	set	4038
  1043  0000                     _SSP1STAT	set	4039
  1044  0000                     _LATG	set	3983
  1045  0000                     _LATF	set	3982
  1046  0000                     _LATE	set	3981
  1047  0000                     _LATD	set	3980
  1048  0000                     _LATC	set	3979
  1049  0000                     _LATB	set	3978
  1050  0000                     _LATA	set	3977
  1051  0000                     _TRISG	set	3992
  1052  0000                     _TRISF	set	3991
  1053  0000                     _TRISE	set	3990
  1054  0000                     _TRISD	set	3989
  1055  0000                     _TRISC	set	3988
  1056  0000                     _TRISB	set	3987
  1057  0000                     _TRISA	set	3986
  1058  0000                     _PORTG	set	3974
  1059  0000                     _PORTF	set	3973
  1060  0000                     _PORTE	set	3972
  1061  0000                     _PORTD	set	3971
  1062  0000                     _PORTC	set	3970
  1063  0000                     _PORTB	set	3969
  1064  0000                     _PORTA	set	3968
  1065  0000                     _RA3	set	31747
  1066  0000                     _RA2	set	31746
  1067  0000                     _RD7	set	31775
  1068  0000                     _RD5	set	31773
  1069  0000                     _TRISD7	set	31919
  1070  0000                     _TRISD5	set	31917
  1071  0000                     _TRISA3	set	31891
  1072  0000                     _TRISA2	set	31890
  1073  0000                     _GODONE	set	32273
  1074  0000                     _ADON	set	32272
  1075  00FF11  43                 	db	67	;'C'
  1076  00FF12  6F                 	db	111	;'o'
  1077  00FF13  75                 	db	117	;'u'
  1078  00FF14  6C                 	db	108	;'l'
  1079  00FF15  64                 	db	100	;'d'
  1080  00FF16  20                 	db	32
  1081  00FF17  6E                 	db	110	;'n'
  1082  00FF18  6F                 	db	111	;'o'
  1083  00FF19  74                 	db	116	;'t'
  1084  00FF1A  20                 	db	32
  1085  00FF1B  72                 	db	114	;'r'
  1086  00FF1C  65                 	db	101	;'e'
  1087  00FF1D  74                 	db	116	;'t'
  1088  00FF1E  72                 	db	114	;'r'
  1089  00FF1F  69                 	db	105	;'i'
  1090  00FF20  65                 	db	101	;'e'
  1091  00FF21  76                 	db	118	;'v'
  1092  00FF22  65                 	db	101	;'e'
  1093  00FF23  20                 	db	32
  1094  00FF24  64                 	db	100	;'d'
  1095  00FF25  61                 	db	97	;'a'
  1096  00FF26  74                 	db	116	;'t'
  1097  00FF27  61                 	db	97	;'a'
  1098  00FF28  2C                 	db	44
  1099  00FF29  20                 	db	32
  1100  00FF2A  53                 	db	83	;'S'
  1101  00FF2B  74                 	db	116	;'t'
  1102  00FF2C  61                 	db	97	;'a'
  1103  00FF2D  63                 	db	99	;'c'
  1104  00FF2E  6B                 	db	107	;'k'
  1105  00FF2F  20                 	db	32
  1106  00FF30  69                 	db	105	;'i'
  1107  00FF31  73                 	db	115	;'s'
  1108  00FF32  20                 	db	32
  1109  00FF33  65                 	db	101	;'e'
  1110  00FF34  6D                 	db	109	;'m'
  1111  00FF35  70                 	db	112	;'p'
  1112  00FF36  74                 	db	116	;'t'
  1113  00FF37  79                 	db	121	;'y'
  1114  00FF38  2E                 	db	46
  1115  00FF39  0A                 	db	10
  1116  00FF3A  00                 	db	0
  1117  00FF3B  43                 	db	67	;'C'
  1118  00FF3C  6F                 	db	111	;'o'
  1119  00FF3D  75                 	db	117	;'u'
  1120  00FF3E  6C                 	db	108	;'l'
  1121  00FF3F  64                 	db	100	;'d'
  1122  00FF40  20                 	db	32
  1123  00FF41  6E                 	db	110	;'n'
  1124  00FF42  6F                 	db	111	;'o'
  1125  00FF43  74                 	db	116	;'t'
  1126  00FF44  20                 	db	32
  1127  00FF45  69                 	db	105	;'i'
  1128  00FF46  6E                 	db	110	;'n'
  1129  00FF47  73                 	db	115	;'s'
  1130  00FF48  65                 	db	101	;'e'
  1131  00FF49  72                 	db	114	;'r'
  1132  00FF4A  74                 	db	116	;'t'
  1133  00FF4B  20                 	db	32
  1134  00FF4C  64                 	db	100	;'d'
  1135  00FF4D  61                 	db	97	;'a'
  1136  00FF4E  74                 	db	116	;'t'
  1137  00FF4F  61                 	db	97	;'a'
  1138  00FF50  2C                 	db	44
  1139  00FF51  20                 	db	32
  1140  00FF52  53                 	db	83	;'S'
  1141  00FF53  74                 	db	116	;'t'
  1142  00FF54  61                 	db	97	;'a'
  1143  00FF55  63                 	db	99	;'c'
  1144  00FF56  6B                 	db	107	;'k'
  1145  00FF57  20                 	db	32
  1146  00FF58  69                 	db	105	;'i'
  1147  00FF59  73                 	db	115	;'s'
  1148  00FF5A  20                 	db	32
  1149  00FF5B  66                 	db	102	;'f'
  1150  00FF5C  75                 	db	117	;'u'
  1151  00FF5D  6C                 	db	108	;'l'
  1152  00FF5E  6C                 	db	108	;'l'
  1153  00FF5F  2E                 	db	46
  1154  00FF60  0A                 	db	10
  1155  00FF61  00                 	db	0
  1156  00FF62                     STR_13:
  1157  00FF62  0A                 	db	10
  1158  00FF63  54                 	db	84	;'T'
  1159  00FF64  68                 	db	104	;'h'
  1160  00FF65  65                 	db	101	;'e'
  1161  00FF66  20                 	db	32
  1162  00FF67  43                 	db	67	;'C'
  1163  00FF68  6C                 	db	108	;'l'
  1164  00FF69  6F                 	db	111	;'o'
  1165  00FF6A  73                 	db	115	;'s'
  1166  00FF6B  65                 	db	101	;'e'
  1167  00FF6C  73                 	db	115	;'s'
  1168  00FF6D  20                 	db	32
  1169  00FF6E  6F                 	db	111	;'o'
  1170  00FF6F  62                 	db	98	;'b'
  1171  00FF70  6A                 	db	106	;'j'
  1172  00FF71  65                 	db	101	;'e'
  1173  00FF72  63                 	db	99	;'c'
  1174  00FF73  74                 	db	116	;'t'
  1175  00FF74  20                 	db	32
  1176  00FF75  28                 	db	40
  1177  00FF76  6D                 	db	109	;'m'
  1178  00FF77  6D                 	db	109	;'m'
  1179  00FF78  29                 	db	41
  1180  00FF79  3A                 	db	58	;':'
  1181  00FF7A  20                 	db	32
  1182  00FF7B  25                 	db	37
  1183  00FF7C  64                 	db	100	;'d'
  1184  00FF7D  00                 	db	0
  1185  00FF7E  0A                 	db	10
  1186  00FF7F  53                 	db	83	;'S'
  1187  00FF80  74                 	db	116	;'t'
  1188  00FF81  65                 	db	101	;'e'
  1189  00FF82  70                 	db	112	;'p'
  1190  00FF83  73                 	db	115	;'s'
  1191  00FF84  20                 	db	32
  1192  00FF85  54                 	db	84	;'T'
  1193  00FF86  72                 	db	114	;'r'
  1194  00FF87  61                 	db	97	;'a'
  1195  00FF88  76                 	db	118	;'v'
  1196  00FF89  65                 	db	101	;'e'
  1197  00FF8A  6C                 	db	108	;'l'
  1198  00FF8B  6C                 	db	108	;'l'
  1199  00FF8C  65                 	db	101	;'e'
  1200  00FF8D  64                 	db	100	;'d'
  1201  00FF8E  3A                 	db	58	;':'
  1202  00FF8F  20                 	db	32
  1203  00FF90  25                 	db	37
  1204  00FF91  64                 	db	100	;'d'
  1205  00FF92  00                 	db	0
  1206  00FF93                     STR_12:
  1207  00FF93  53                 	db	83	;'S'
  1208  00FF94  74                 	db	116	;'t'
  1209  00FF95  65                 	db	101	;'e'
  1210  00FF96  70                 	db	112	;'p'
  1211  00FF97  70                 	db	112	;'p'
  1212  00FF98  65                 	db	101	;'e'
  1213  00FF99  64                 	db	100	;'d'
  1214  00FF9A  20                 	db	32
  1215  00FF9B  33                 	db	51	;'3'
  1216  00FF9C  36                 	db	54	;'6'
  1217  00FF9D  30                 	db	48	;'0'
  1218  00FF9E  20                 	db	32
  1219  00FF9F  64                 	db	100	;'d'
  1220  00FFA0  65                 	db	101	;'e'
  1221  00FFA1  67                 	db	103	;'g'
  1222  00FFA2  72                 	db	114	;'r'
  1223  00FFA3  65                 	db	101	;'e'
  1224  00FFA4  65                 	db	101	;'e'
  1225  00FFA5  73                 	db	115	;'s'
  1226  00FFA6  00                 	db	0
  1227  00FFA7                     STR_2:
  1228  00FFA7  20                 	db	32
  1229  00FFA8  20                 	db	32
  1230  00FFA9  20                 	db	32
  1231  00FFAA  20                 	db	32
  1232  00FFAB  20                 	db	32
  1233  00FFAC  20                 	db	32
  1234  00FFAD  20                 	db	32
  1235  00FFAE  20                 	db	32
  1236  00FFAF  20                 	db	32
  1237  00FFB0  20                 	db	32
  1238  00FFB1  20                 	db	32
  1239  00FFB2  20                 	db	32
  1240  00FFB3  20                 	db	32
  1241  00FFB4  20                 	db	32
  1242  00FFB5  20                 	db	32
  1243  00FFB6  20                 	db	32
  1244  00FFB7  20                 	db	32
  1245  00FFB8  0A                 	db	10
  1246  00FFB9  00                 	db	0
  1247  00FFBA  53                 	db	83	;'S'
  1248  00FFBB  65                 	db	101	;'e'
  1249  00FFBC  6E                 	db	110	;'n'
  1250  00FFBD  73                 	db	115	;'s'
  1251  00FFBE  6F                 	db	111	;'o'
  1252  00FFBF  72                 	db	114	;'r'
  1253  00FFC0  20                 	db	32
  1254  00FFC1  4D                 	db	77	;'M'
  1255  00FFC2  6F                 	db	111	;'o'
  1256  00FFC3  76                 	db	118	;'v'
  1257  00FFC4  69                 	db	105	;'i'
  1258  00FFC5  6E                 	db	110	;'n'
  1259  00FFC6  67                 	db	103	;'g'
  1260  00FFC7  21                 	db	33
  1261  00FFC8  20                 	db	32
  1262  00FFC9  20                 	db	32
  1263  00FFCA  20                 	db	32
  1264  00FFCB  0A                 	db	10
  1265  00FFCC  00                 	db	0
  1266  00FFCD                     STR_14:
  1267  00FFCD  0A                 	db	10
  1268  00FFCE  47                 	db	71	;'G'
  1269  00FFCF  6F                 	db	111	;'o'
  1270  00FFD0  69                 	db	105	;'i'
  1271  00FFD1  6E                 	db	110	;'n'
  1272  00FFD2  67                 	db	103	;'g'
  1273  00FFD3  20                 	db	32
  1274  00FFD4  62                 	db	98	;'b'
  1275  00FFD5  61                 	db	97	;'a'
  1276  00FFD6  63                 	db	99	;'c'
  1277  00FFD7  6B                 	db	107	;'k'
  1278  00FFD8  20                 	db	32
  1279  00FFD9  74                 	db	116	;'t'
  1280  00FFDA  6F                 	db	111	;'o'
  1281  00FFDB  3A                 	db	58	;':'
  1282  00FFDC  20                 	db	32
  1283  00FFDD  25                 	db	37
  1284  00FFDE  64                 	db	100	;'d'
  1285  00FFDF  00                 	db	0
  1286  00FFE0  53                 	db	83	;'S'
  1287  00FFE1  65                 	db	101	;'e'
  1288  00FFE2  6E                 	db	110	;'n'
  1289  00FFE3  73                 	db	115	;'s'
  1290  00FFE4  6F                 	db	111	;'o'
  1291  00FFE5  72                 	db	114	;'r'
  1292  00FFE6  20                 	db	32
  1293  00FFE7  4D                 	db	77	;'M'
  1294  00FFE8  6F                 	db	111	;'o'
  1295  00FFE9  76                 	db	118	;'v'
  1296  00FFEA  69                 	db	105	;'i'
  1297  00FFEB  6E                 	db	110	;'n'
  1298  00FFEC  67                 	db	103	;'g'
  1299  00FFED  21                 	db	33
  1300  00FFEE  0A                 	db	10
  1301  00FFEF  00                 	db	0
  1302  00FFF0                     STR_31:
  1303  00FFF0  74                 	db	116	;'t'
  1304  00FFF1  65                 	db	101	;'e'
  1305  00FFF2  73                 	db	115	;'s'
  1306  00FFF3  74                 	db	116	;'t'
  1307  00FFF4  0A                 	db	10
  1308  00FFF5  00                 	db	0
  1309  00FFF6  25                 	db	37
  1310  00FFF7  64                 	db	100	;'d'
  1311  00FFF8  20                 	db	32
  1312  00FFF9  0A                 	db	10
  1313  00FFFA  00                 	db	0
  1314  00FFFB                     STR_1:
  1315  00FFFB  25                 	db	37
  1316  00FFFC  63                 	db	99	;'c'
  1317  00FFFD  00                 	db	0
  1318  0000                     
  1319                           ; #config settings
  1320  00FFFE  00                 	db	0	; dummy byte at the end
  1321  0000                     
  1322                           	psect	cinit
  1323  012026                     __pcinit:
  1324                           	opt stack 0
  1325  012026                     start_initialization:
  1326                           	opt stack 0
  1327  012026                     __initialization:
  1328                           	opt stack 0
  1329                           
  1330                           ; Initialize objects allocated to BANK1 (12 bytes)
  1331                           ; load TBLPTR registers with __pidataBANK1
  1332  012026  0EE1               	movlw	low __pidataBANK1
  1333  012028  6EF6               	movwf	tblptrl,c
  1334  01202A  0E3A               	movlw	high __pidataBANK1
  1335  01202C  6EF7               	movwf	tblptrh,c
  1336  01202E  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1337  012030  6EF8               	movwf	tblptru,c
  1338  012032  EE01  F0E8         	lfsr	0,__pdataBANK1
  1339  012036  EE10 F00C          	lfsr	1,12
  1340  01203A                     copy_data0:
  1341  01203A  0009               	tblrd		*+
  1342  01203C  CFF5 FFEE          	movff	tablat,postinc0
  1343  012040  50E5               	movf	postdec1,w,c
  1344  012042  50E1               	movf	fsr1l,w,c
  1345  012044  E1FA               	bnz	copy_data0
  1346                           
  1347                           ; Initialize objects allocated to BANK0 (13 bytes)
  1348                           ; load TBLPTR registers with __pidataBANK0
  1349  012046  0ED4               	movlw	low __pidataBANK0
  1350  012048  6EF6               	movwf	tblptrl,c
  1351  01204A  0E3A               	movlw	high __pidataBANK0
  1352  01204C  6EF7               	movwf	tblptrh,c
  1353  01204E  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1354  012050  6EF8               	movwf	tblptru,c
  1355  012052  EE00  F0F3         	lfsr	0,__pdataBANK0
  1356  012056  EE10 F00D          	lfsr	1,13
  1357  01205A                     copy_data1:
  1358  01205A  0009               	tblrd		*+
  1359  01205C  CFF5 FFEE          	movff	tablat,postinc0
  1360  012060  50E5               	movf	postdec1,w,c
  1361  012062  50E1               	movf	fsr1l,w,c
  1362  012064  E1FA               	bnz	copy_data1
  1363                           
  1364                           ; Initialize objects allocated to COMRAM (14 bytes)
  1365                           ; load TBLPTR registers with __pidataCOMRAM
  1366  012066  0E80               	movlw	low __pidataCOMRAM
  1367  012068  6EF6               	movwf	tblptrl,c
  1368  01206A  0E3A               	movlw	high __pidataCOMRAM
  1369  01206C  6EF7               	movwf	tblptrh,c
  1370  01206E  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1371  012070  6EF8               	movwf	tblptru,c
  1372  012072  EE00  F043         	lfsr	0,__pdataCOMRAM
  1373  012076  EE10 F00E          	lfsr	1,14
  1374  01207A                     copy_data2:
  1375  01207A  0009               	tblrd		*+
  1376  01207C  CFF5 FFEE          	movff	tablat,postinc0
  1377  012080  50E5               	movf	postdec1,w,c
  1378  012082  50E1               	movf	fsr1l,w,c
  1379  012084  E1FA               	bnz	copy_data2
  1380                           
  1381                           ; Clear objects allocated to BIGRAM (300 bytes)
  1382  012086  EE02  F0F0         	lfsr	0,__pbssBIGRAM
  1383  01208A  EE11 F02C          	lfsr	1,300
  1384  01208E                     clear_0:
  1385  01208E  6AEE               	clrf	postinc0,c
  1386  012090  50E5               	movf	postdec1,w,c
  1387  012092  50E1               	movf	fsr1l,w,c
  1388  012094  E1FC               	bnz	clear_0
  1389  012096  50E2               	movf	fsr1h,w,c
  1390  012098  E1FA               	bnz	clear_0
  1391                           
  1392                           ; Clear objects allocated to BANK2 (240 bytes)
  1393  01209A  EE02  F000         	lfsr	0,__pbssBANK2
  1394  01209E  0EF0               	movlw	240
  1395  0120A0                     clear_1:
  1396  0120A0  6AEE               	clrf	postinc0,c
  1397  0120A2  06E8               	decf	wreg,f,c
  1398  0120A4  E1FD               	bnz	clear_1
  1399                           
  1400                           ; Clear objects allocated to BANK1 (215 bytes)
  1401  0120A6  EE01  F000         	lfsr	0,__pbssBANK1
  1402  0120AA  0ED7               	movlw	215
  1403  0120AC                     clear_2:
  1404  0120AC  6AEE               	clrf	postinc0,c
  1405  0120AE  06E8               	decf	wreg,f,c
  1406  0120B0  E1FD               	bnz	clear_2
  1407                           
  1408                           ; Clear objects allocated to BANK0 (83 bytes)
  1409  0120B2  EE00  F060         	lfsr	0,__pbssBANK0
  1410  0120B6  0E53               	movlw	83
  1411  0120B8                     clear_3:
  1412  0120B8  6AEE               	clrf	postinc0,c
  1413  0120BA  06E8               	decf	wreg,f,c
  1414  0120BC  E1FD               	bnz	clear_3
  1415                           
  1416                           ; Clear objects allocated to COMRAM (26 bytes)
  1417  0120BE  EE00  F029         	lfsr	0,__pbssCOMRAM
  1418  0120C2  0E1A               	movlw	26
  1419  0120C4                     clear_4:
  1420  0120C4  6AEE               	clrf	postinc0,c
  1421  0120C6  06E8               	decf	wreg,f,c
  1422  0120C8  E1FD               	bnz	clear_4
  1423  0120CA                     end_of_initialization:
  1424                           	opt stack 0
  1425  0120CA                     __end_of__initialization:
  1426                           	opt stack 0
  1427  0120CA  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1428  0120CC  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1429  0120CE  0100               	movlb	0
  1430  0120D0  EFC6  F08C         	goto	_main	;jump to C main() function
  1431                           tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           postdec1	equ	0xFE5
  1438                           fsr1h	equ	0xFE2
  1439                           fsr1l	equ	0xFE1
  1440                           
  1441                           	psect	bssCOMRAM
  1442  000029                     __pbssCOMRAM:
  1443                           	opt stack 0
  1444  000029                     _average:
  1445                           	opt stack 0
  1446  000029                     	ds	2
  1447  00002B                     _total:
  1448                           	opt stack 0
  1449  00002B                     	ds	2
  1450  00002D                     _readIndex:
  1451                           	opt stack 0
  1452  00002D                     	ds	2
  1453  00002F                     _COUNTER:
  1454                           	opt stack 0
  1455  00002F                     	ds	2
  1456  000031                     HMI_GRender@a:
  1457                           	opt stack 0
  1458  000031                     	ds	2
  1459  000033                     _Current_Dist2:
  1460                           	opt stack 0
  1461  000033                     	ds	1
  1462  000034                     _i:
  1463                           	opt stack 0
  1464  000034                     	ds	1
  1465  000035                     Timer0_Init@PRE:
  1466                           	opt stack 0
  1467  000035                     	ds	1
  1468  000036                     _INDEX:
  1469                           	opt stack 0
  1470  000036                     	ds	1
  1471  000037                     rand@screw:
  1472                           	opt stack 0
  1473  000037                     	ds	1
  1474  000038                     _ADC_Initialised:
  1475                           	opt stack 0
  1476  000038                     	ds	1
  1477  000039                     OutSeg@a:
  1478                           	opt stack 0
  1479  000039                     	ds	1
  1480  00003A                     OutSeg@segset:
  1481                           	opt stack 0
  1482  00003A                     	ds	1
  1483  00003B                     OutSeg@cur:
  1484                           	opt stack 0
  1485  00003B                     	ds	1
  1486  00003C                     _I2C1T:
  1487                           	opt stack 0
  1488  00003C                     	ds	7
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postdec1	equ	0xFE5
  1496                           fsr1h	equ	0xFE2
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499                           	psect	dataCOMRAM
  1500  000043                     __pdataCOMRAM:
  1501                           	opt stack 0
  1502  000043                     _gCursor:
  1503                           	opt stack 0
  1504  000043                     	ds	4
  1505  000047                     _numReadings:
  1506                           	opt stack 0
  1507  000047                     	ds	2
  1508  000049                     _top:
  1509                           	opt stack 0
  1510  000049                     	ds	2
  1511  00004B                     _Bus_State:
  1512                           	opt stack 0
  1513  00004B                     	ds	1
  1514  00004C                     	ds	1
  1515  00004D                     	ds	1
  1516  00004E                     	ds	1
  1517  00004F                     _l:
  1518                           	opt stack 0
  1519  00004F                     	ds	1
  1520  000050                     _w:
  1521                           	opt stack 0
  1522  000050                     	ds	1
  1523                           tblptru	equ	0xFF8
  1524                           tblptrh	equ	0xFF7
  1525                           tblptrl	equ	0xFF6
  1526                           tablat	equ	0xFF5
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           postdec1	equ	0xFE5
  1530                           fsr1h	equ	0xFE2
  1531                           fsr1l	equ	0xFE1
  1532                           
  1533                           	psect	bssBANK0
  1534  000060                     __pbssBANK0:
  1535                           	opt stack 0
  1536  000060                     _gISR:
  1537                           	opt stack 0
  1538  000060                     	ds	3
  1539  000063                     _lQueue:
  1540                           	opt stack 0
  1541  000063                     	ds	3
  1542  000066                     _lStepFunction:
  1543                           	opt stack 0
  1544  000066                     	ds	3
  1545  000069                     _timercount:
  1546                           	opt stack 0
  1547  000069                     	ds	2
  1548  00006B                     _thisReading:
  1549                           	opt stack 0
  1550  00006B                     	ds	2
  1551  00006D                     _CW_Count:
  1552                           	opt stack 0
  1553  00006D                     	ds	2
  1554  00006F                     _CCW_Count:
  1555                           	opt stack 0
  1556  00006F                     	ds	2
  1557  000071                     _Close_Pos:
  1558                           	opt stack 0
  1559  000071                     	ds	2
  1560  000073                     _Motor_Count:
  1561                           	opt stack 0
  1562  000073                     	ds	2
  1563  000075                     _mode:
  1564                           	opt stack 0
  1565  000075                     	ds	2
  1566  000077                     _pShiftVal:
  1567                           	opt stack 0
  1568  000077                     	ds	2
  1569  000079                     _val:
  1570                           	opt stack 0
  1571  000079                     	ds	2
  1572  00007B                     _lMotor:
  1573                           	opt stack 0
  1574  00007B                     	ds	2
  1575  00007D                     _lCurrent:
  1576                           	opt stack 0
  1577  00007D                     	ds	2
  1578  00007F                     _gBackcolour:
  1579                           	opt stack 0
  1580  00007F                     	ds	2
  1581  000081                     SPI_Send9@dat:
  1582                           	opt stack 0
  1583  000081                     	ds	2
  1584  000083                     _Cliff_Left:
  1585                           	opt stack 0
  1586  000083                     	ds	1
  1587  000084                     _Cliff_Right:
  1588                           	opt stack 0
  1589  000084                     	ds	1
  1590  000085                     _Cliff_FLeft:
  1591                           	opt stack 0
  1592  000085                     	ds	1
  1593  000086                     _Cliff_FRight:
  1594                           	opt stack 0
  1595  000086                     	ds	1
  1596  000087                     _BumpSensor:
  1597                           	opt stack 0
  1598  000087                     	ds	1
  1599  000088                     _Current_Dist1:
  1600                           	opt stack 0
  1601  000088                     	ds	1
  1602  000089                     Event_TestButton@j:
  1603                           	opt stack 0
  1604  000089                     	ds	1
  1605  00008A                     _u:
  1606                           	opt stack 0
  1607  00008A                     	ds	1
  1608  00008B                     _j:
  1609                           	opt stack 0
  1610  00008B                     	ds	1
  1611  00008C                     Timer2_Init@PRE:
  1612                           	opt stack 0
  1613  00008C                     	ds	1
  1614  00008D                     Timer2_Init@INDEX:
  1615                           	opt stack 0
  1616  00008D                     	ds	1
  1617  00008E                     _lBufferY:
  1618                           	opt stack 0
  1619  00008E                     	ds	1
  1620  00008F                     _lBufferX:
  1621                           	opt stack 0
  1622  00008F                     	ds	1
  1623  000090                     _clearall:
  1624                           	opt stack 0
  1625  000090                     	ds	1
  1626  000091                     _PortE:
  1627                           	opt stack 0
  1628  000091                     	ds	10
  1629  00009B                     _PortD:
  1630                           	opt stack 0
  1631  00009B                     	ds	10
  1632  0000A5                     _PortC:
  1633                           	opt stack 0
  1634  0000A5                     	ds	10
  1635  0000AF                     LCD_DrawRectangle@p2:
  1636                           	opt stack 0
  1637  0000AF                     	ds	4
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           postdec1	equ	0xFE5
  1645                           fsr1h	equ	0xFE2
  1646                           fsr1l	equ	0xFE1
  1647                           
  1648                           	psect	dataBANK0
  1649  0000F3                     __pdataBANK0:
  1650                           	opt stack 0
  1651  0000F3                     _countOff:
  1652                           	opt stack 0
  1653  0000F3                     	ds	2
  1654  0000F5                     _countOn:
  1655                           	opt stack 0
  1656  0000F5                     	ds	2
  1657  0000F7                     _Low_Sensor:
  1658                           	opt stack 0
  1659  0000F7                     	ds	2
  1660  0000F9                     _y_grid:
  1661                           	opt stack 0
  1662  0000F9                     	ds	2
  1663  0000FB                     _x_grid:
  1664                           	opt stack 0
  1665  0000FB                     	ds	2
  1666  0000FD                     _gForecolour:
  1667                           	opt stack 0
  1668  0000FD                     	ds	2
  1669  0000FF                     _change:
  1670                           	opt stack 0
  1671  0000FF                     	ds	1
  1672                           tblptru	equ	0xFF8
  1673                           tblptrh	equ	0xFF7
  1674                           tblptrl	equ	0xFF6
  1675                           tablat	equ	0xFF5
  1676                           postinc0	equ	0xFEE
  1677                           wreg	equ	0xFE8
  1678                           postdec1	equ	0xFE5
  1679                           fsr1h	equ	0xFE2
  1680                           fsr1l	equ	0xFE1
  1681                           
  1682                           	psect	bssBANK1
  1683  000100                     __pbssBANK1:
  1684                           	opt stack 0
  1685  000100                     Timer2_Init@DIV:
  1686                           	opt stack 0
  1687  000100                     	ds	4
  1688  000104                     Timer0_Init@DIV:
  1689                           	opt stack 0
  1690  000104                     	ds	4
  1691  000108                     _I2C2_More:
  1692                           	opt stack 0
  1693  000108                     	ds	3
  1694  00010B                     _I2C1_More:
  1695                           	opt stack 0
  1696  00010B                     	ds	3
  1697  00010E                     _I2C2_Done:
  1698                           	opt stack 0
  1699  00010E                     	ds	3
  1700  000111                     _I2C1_Done:
  1701                           	opt stack 0
  1702  000111                     	ds	3
  1703  000114                     _errno:
  1704                           	opt stack 0
  1705  000114                     	ds	2
  1706  000116                     _test:
  1707                           	opt stack 0
  1708  000116                     	ds	2
  1709  000118                     _Sensor_Observe_Fin:
  1710                           	opt stack 0
  1711  000118                     	ds	2
  1712  00011A                     _count:
  1713                           	opt stack 0
  1714  00011A                     	ds	2
  1715  00011C                     _ADC_Reading:
  1716                           	opt stack 0
  1717  00011C                     	ds	2
  1718  00011E                     _BumpState:
  1719                           	opt stack 0
  1720  00011E                     	ds	2
  1721  000120                     _mod:
  1722                           	opt stack 0
  1723  000120                     	ds	2
  1724  000122                     _Square_Dist:
  1725                           	opt stack 0
  1726  000122                     	ds	2
  1727  000124                     _T_VAR:
  1728                           	opt stack 0
  1729  000124                     	ds	2
  1730  000126                     _Current_Dist:
  1731                           	opt stack 0
  1732  000126                     	ds	2
  1733  000128                     _y:
  1734                           	opt stack 0
  1735  000128                     	ds	2
  1736  00012A                     _x:
  1737                           	opt stack 0
  1738  00012A                     	ds	2
  1739  00012C                     _HMIBoard:
  1740                           	opt stack 0
  1741  00012C                     	ds	58
  1742  000166                     _SPI1:
  1743                           	opt stack 0
  1744  000166                     	ds	11
  1745  000171                     _SPI2:
  1746                           	opt stack 0
  1747  000171                     	ds	11
  1748  00017C                     _DIPSwitch:
  1749                           	opt stack 0
  1750  00017C                     	ds	10
  1751  000186                     _TestButton:
  1752                           	opt stack 0
  1753  000186                     	ds	10
  1754  000190                     _PortG:
  1755                           	opt stack 0
  1756  000190                     	ds	10
  1757  00019A                     _PortB:
  1758                           	opt stack 0
  1759  00019A                     	ds	10
  1760  0001A4                     _PortA:
  1761                           	opt stack 0
  1762  0001A4                     	ds	10
  1763  0001AE                     _PortF:
  1764                           	opt stack 0
  1765  0001AE                     	ds	10
  1766  0001B8                     _I2C2T:
  1767                           	opt stack 0
  1768  0001B8                     	ds	7
  1769  0001BF                     _ADC_AN3:
  1770                           	opt stack 0
  1771  0001BF                     	ds	5
  1772  0001C4                     _ADC_AN2:
  1773                           	opt stack 0
  1774  0001C4                     	ds	5
  1775  0001C9                     _ADC_AN1:
  1776                           	opt stack 0
  1777  0001C9                     	ds	5
  1778  0001CE                     _ADC_AN0:
  1779                           	opt stack 0
  1780  0001CE                     	ds	5
  1781  0001D3                     LCD_DrawRectangle@p4:
  1782                           	opt stack 0
  1783  0001D3                     	ds	4
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1h	equ	0xFE2
  1792                           fsr1l	equ	0xFE1
  1793                           
  1794                           	psect	dataBANK1
  1795  0001E8                     __pdataBANK1:
  1796                           	opt stack 0
  1797  0001E8                     Console_Render@F6956:
  1798                           	opt stack 0
  1799  0001E8                     	ds	4
  1800  0001EC                     _gLineSize:
  1801                           	opt stack 0
  1802  0001EC                     	ds	4
  1803  0001F0                     _gCharSize:
  1804                           	opt stack 0
  1805  0001F0                     	ds	4
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1h	equ	0xFE2
  1814                           fsr1l	equ	0xFE1
  1815                           
  1816                           	psect	bssBANK2
  1817  000200                     __pbssBANK2:
  1818                           	opt stack 0
  1819  000200                     _readings:
  1820                           	opt stack 0
  1821  000200                     	ds	100
  1822  000264                     _stack:
  1823                           	opt stack 0
  1824  000264                     	ds	40
  1825  00028C                     _lCBuffer:
  1826                           	opt stack 0
  1827  00028C                     	ds	30
  1828  0002AA                     Console_MakeField@Fill:
  1829                           	opt stack 0
  1830  0002AA                     	ds	70
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postdec1	equ	0xFE5
  1838                           fsr1h	equ	0xFE2
  1839                           fsr1l	equ	0xFE1
  1840                           
  1841                           	psect	bssBIGRAM
  1842  0002F0                     __pbssBIGRAM:
  1843                           	opt stack 0
  1844  0002F0                     _lBuffer:
  1845                           	opt stack 0
  1846  0002F0                     	ds	300
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           fsr1h	equ	0xFE2
  1855                           fsr1l	equ	0xFE1
  1856                           
  1857                           	psect	cstackBANK1
  1858  0001D7                     __pcstackBANK1:
  1859                           	opt stack 0
  1860  0001D7                     Button_Init@pInput:
  1861                           	opt stack 0
  1862  0001D7                     Port_Init@pInput:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x0
  1866  0001D7                     	ds	2
  1867  0001D9                     Port_Init@pPort:
  1868                           	opt stack 0
  1869  0001D9                     Button_Init@pThreshold:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x2
  1873  0001D9                     	ds	1
  1874  0001DA                     ??_Port_Init:
  1875                           
  1876                           ; 1 bytes @ 0x3
  1877  0001DA                     	ds	1
  1878  0001DB                     Button_Init@pInitIO:
  1879                           	opt stack 0
  1880                           
  1881                           ; 3 bytes @ 0x4
  1882  0001DB                     	ds	1
  1883  0001DC                     Port_Init@i:
  1884                           	opt stack 0
  1885                           
  1886                           ; 1 bytes @ 0x5
  1887  0001DC                     	ds	2
  1888  0001DE                     Button_Init@pGetState:
  1889                           	opt stack 0
  1890                           
  1891                           ; 3 bytes @ 0x7
  1892  0001DE                     	ds	3
  1893  0001E1                     Button_Init@pFunction:
  1894                           	opt stack 0
  1895                           
  1896                           ; 3 bytes @ 0xA
  1897  0001E1                     	ds	3
  1898  0001E4                     main@right:
  1899                           	opt stack 0
  1900                           
  1901                           ; 1 bytes @ 0xD
  1902  0001E4                     	ds	1
  1903  0001E5                     main@up:
  1904                           	opt stack 0
  1905                           
  1906                           ; 1 bytes @ 0xE
  1907  0001E5                     	ds	1
  1908  0001E6                     main@left:
  1909                           	opt stack 0
  1910                           
  1911                           ; 1 bytes @ 0xF
  1912  0001E6                     	ds	1
  1913  0001E7                     main@down:
  1914                           	opt stack 0
  1915                           
  1916                           ; 1 bytes @ 0x10
  1917  0001E7                     	ds	1
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           
  1928                           	psect	cstackBANK0
  1929  0000B3                     __pcstackBANK0:
  1930                           	opt stack 0
  1931  0000B3                     ??_Console_ClearCursor:
  1932  0000B3                     ??_Console_Init:
  1933  0000B3                     ??_Console_NewLine:
  1934  0000B3                     ??_Console_FormFeed:
  1935  0000B3                     ??_HMI_SetButton:
  1936  0000B3                     ??_InitADC:
  1937  0000B3                     ?_GetPortProperties:
  1938                           	opt stack 0
  1939  0000B3                     ?_GetPortPORT:
  1940                           	opt stack 0
  1941  0000B3                     ?_GetPortTRIS:
  1942                           	opt stack 0
  1943  0000B3                     ?___wmul:
  1944                           	opt stack 0
  1945  0000B3                     ?___awdiv:
  1946                           	opt stack 0
  1947  0000B3                     ?___lwdiv:
  1948                           	opt stack 0
  1949  0000B3                     ?___lldiv:
  1950                           	opt stack 0
  1951  0000B3                     Mode_Set@pMode:
  1952                           	opt stack 0
  1953  0000B3                     ToSegment@pCHR:
  1954                           	opt stack 0
  1955  0000B3                     HMI_SetBar@pValue:
  1956                           	opt stack 0
  1957  0000B3                     eusartSend@sendChar:
  1958                           	opt stack 0
  1959  0000B3                     Port_GetPin@pInput:
  1960                           	opt stack 0
  1961  0000B3                     Port_GetQuad@pInput:
  1962                           	opt stack 0
  1963  0000B3                     SPI_DisableISR@pInput:
  1964                           	opt stack 0
  1965  0000B3                     SPI_DCS@pInput:
  1966                           	opt stack 0
  1967  0000B3                     SPI_Send@pInput:
  1968                           	opt stack 0
  1969  0000B3                     Byte_SetBit@pInput:
  1970                           	opt stack 0
  1971  0000B3                     Byte_GetBit@pInput:
  1972                           	opt stack 0
  1973  0000B3                     Byte_SetZone@pInput:
  1974                           	opt stack 0
  1975  0000B3                     Byte_GetZone@pInput:
  1976                           	opt stack 0
  1977  0000B3                     Byte_SetByte@pInput:
  1978                           	opt stack 0
  1979  0000B3                     delay_ms@ms:
  1980                           	opt stack 0
  1981  0000B3                     delay_us@us:
  1982                           	opt stack 0
  1983  0000B3                     reverse@input:
  1984                           	opt stack 0
  1985  0000B3                     ___wmul@multiplier:
  1986                           	opt stack 0
  1987  0000B3                     ___awdiv@dividend:
  1988                           	opt stack 0
  1989  0000B3                     ___lwdiv@dividend:
  1990                           	opt stack 0
  1991  0000B3                     MXK_Queue@pCallback:
  1992                           	opt stack 0
  1993  0000B3                     ___lldiv@dividend:
  1994                           	opt stack 0
  1995                           
  1996                           ; 4 bytes @ 0x0
  1997  0000B3                     	ds	1
  1998  0000B4                     HMI_SetSegments@pString:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x1
  2002  0000B4                     	ds	1
  2003  0000B5                     GetPortProperties@pInput:
  2004                           	opt stack 0
  2005  0000B5                     GetPortPORT@pInput:
  2006                           	opt stack 0
  2007  0000B5                     GetPortTRIS@pInput:
  2008                           	opt stack 0
  2009  0000B5                     Port_GetPin@pPin:
  2010                           	opt stack 0
  2011  0000B5                     Port_GetQuad@pQuad:
  2012                           	opt stack 0
  2013  0000B5                     SPI_Send@pData:
  2014                           	opt stack 0
  2015  0000B5                     Byte_SetBit@pBit:
  2016                           	opt stack 0
  2017  0000B5                     Byte_GetBit@pBit:
  2018                           	opt stack 0
  2019  0000B5                     Byte_SetZone@pMax:
  2020                           	opt stack 0
  2021  0000B5                     Byte_GetZone@pMax:
  2022                           	opt stack 0
  2023  0000B5                     Byte_SetByte@pValue:
  2024                           	opt stack 0
  2025  0000B5                     Console_Init@x:
  2026                           	opt stack 0
  2027  0000B5                     Console_FormFeed@x:
  2028                           	opt stack 0
  2029  0000B5                     reverse@length:
  2030                           	opt stack 0
  2031  0000B5                     ___wmul@multiplicand:
  2032                           	opt stack 0
  2033  0000B5                     ___awdiv@divisor:
  2034                           	opt stack 0
  2035  0000B5                     ___lwdiv@divisor:
  2036                           	opt stack 0
  2037  0000B5                     delay_ms@u:
  2038                           	opt stack 0
  2039  0000B5                     delay_us@u:
  2040                           	opt stack 0
  2041  0000B5                     HMI_SetButton@reindex:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x2
  2045  0000B5                     	ds	1
  2046  0000B6                     ??_Port_GetPin:
  2047  0000B6                     ??_Port_GetQuad:
  2048  0000B6                     ??_Byte_GetBit:
  2049  0000B6                     LCD_Write@mode:
  2050                           	opt stack 0
  2051  0000B6                     Byte_SetBit@pValue:
  2052                           	opt stack 0
  2053  0000B6                     Byte_SetZone@pChunk:
  2054                           	opt stack 0
  2055  0000B6                     Byte_GetZone@pChunk:
  2056                           	opt stack 0
  2057  0000B6                     Console_Init@y:
  2058                           	opt stack 0
  2059  0000B6                     Console_FormFeed@y:
  2060                           	opt stack 0
  2061  0000B6                     OutSeg@pSegment:
  2062                           	opt stack 0
  2063                           
  2064                           ; 1 bytes @ 0x3
  2065  0000B6                     	ds	1
  2066  0000B7                     ??_Byte_SetBit:
  2067  0000B7                     ??_Console_IncrementCursor:
  2068  0000B7                     ??_OutSeg:
  2069  0000B7                     LCD_Write@value:
  2070                           	opt stack 0
  2071  0000B7                     Byte_GetBit@Output:
  2072                           	opt stack 0
  2073  0000B7                     Byte_SetZone@pChunkSize:
  2074                           	opt stack 0
  2075  0000B7                     Byte_GetZone@pChunkSize:
  2076                           	opt stack 0
  2077  0000B7                     reverse@tempVar:
  2078                           	opt stack 0
  2079  0000B7                     ___awdiv@counter:
  2080                           	opt stack 0
  2081  0000B7                     ___lwdiv@counter:
  2082                           	opt stack 0
  2083  0000B7                     HMI_SetSegments@in:
  2084                           	opt stack 0
  2085  0000B7                     ___wmul@product:
  2086                           	opt stack 0
  2087  0000B7                     ___lldiv@divisor:
  2088                           	opt stack 0
  2089                           
  2090                           ; 4 bytes @ 0x4
  2091  0000B7                     	ds	1
  2092  0000B8                     ??_Byte_GetZone:
  2093  0000B8                     ?_Console_MakeField:
  2094                           	opt stack 0
  2095  0000B8                     Set_Addr_Window@ys:
  2096                           	opt stack 0
  2097  0000B8                     Set_Rotation@m:
  2098                           	opt stack 0
  2099  0000B8                     Port_GetPin@Output:
  2100                           	opt stack 0
  2101  0000B8                     Port_GetQuad@Output:
  2102                           	opt stack 0
  2103  0000B8                     Byte_SetZone@pValue:
  2104                           	opt stack 0
  2105  0000B8                     ___awdiv@sign:
  2106                           	opt stack 0
  2107  0000B8                     LCD_Word_Write@value:
  2108                           	opt stack 0
  2109  0000B8                     reverse@iterator:
  2110                           	opt stack 0
  2111  0000B8                     ___lwdiv@quotient:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x5
  2115  0000B8                     	ds	1
  2116  0000B9                     ??_Byte_SetZone:
  2117  0000B9                     Set_Addr_Window@xe:
  2118                           	opt stack 0
  2119  0000B9                     Set_Rotation@rotation:
  2120                           	opt stack 0
  2121  0000B9                     Byte_GetZone@MASK:
  2122                           	opt stack 0
  2123  0000B9                     OutSeg@pInput:
  2124                           	opt stack 0
  2125  0000B9                     HMI_SetButton@pValue:
  2126                           	opt stack 0
  2127  0000B9                     MXK_BlockSwitchTo@CUR:
  2128                           	opt stack 0
  2129  0000B9                     MXK_SwitchTo@CUR:
  2130                           	opt stack 0
  2131  0000B9                     ___awdiv@quotient:
  2132                           	opt stack 0
  2133                           
  2134                           ; 2 bytes @ 0x6
  2135  0000B9                     	ds	1
  2136  0000BA                     ??_Console_MakeField:
  2137  0000BA                     ?___lwmod:
  2138                           	opt stack 0
  2139  0000BA                     Set_Addr_Window@ye:
  2140                           	opt stack 0
  2141  0000BA                     Byte_GetZone@Offset:
  2142                           	opt stack 0
  2143  0000BA                     OutSeg@out:
  2144                           	opt stack 0
  2145  0000BA                     HMI_SetButton@v:
  2146                           	opt stack 0
  2147  0000BA                     MXK_BlockSwitchTo@pModule:
  2148                           	opt stack 0
  2149  0000BA                     MXK_SwitchTo@pModule:
  2150                           	opt stack 0
  2151  0000BA                     ___lwmod@dividend:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x7
  2155  0000BA                     	ds	1
  2156  0000BB                     ??_Console_Tab:
  2157  0000BB                     Set_Addr_Window@xs:
  2158                           	opt stack 0
  2159  0000BB                     Byte_GetZone@Output:
  2160                           	opt stack 0
  2161  0000BB                     HMI_Render@a:
  2162                           	opt stack 0
  2163  0000BB                     ___lldiv@quotient:
  2164                           	opt stack 0
  2165                           
  2166                           ; 4 bytes @ 0x8
  2167  0000BB                     	ds	1
  2168  0000BC                     Byte_SetZone@Offset:
  2169                           	opt stack 0
  2170  0000BC                     LCD_Fill@pColour:
  2171                           	opt stack 0
  2172  0000BC                     LCD_FillRectangle@pColour:
  2173                           	opt stack 0
  2174  0000BC                     Byte_GetPair@pInput:
  2175                           	opt stack 0
  2176  0000BC                     Console_MakeField@Index:
  2177                           	opt stack 0
  2178  0000BC                     ___lwmod@divisor:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x9
  2182  0000BC                     	ds	1
  2183  0000BD                     Byte_SetZone@MASK:
  2184                           	opt stack 0
  2185                           
  2186                           ; 1 bytes @ 0xA
  2187  0000BD                     	ds	1
  2188  0000BE                     LCD_Fill@i:
  2189                           	opt stack 0
  2190  0000BE                     Byte_GetPair@pPair:
  2191                           	opt stack 0
  2192  0000BE                     Console_MakeField@pInput:
  2193                           	opt stack 0
  2194  0000BE                     ___lwmod@counter:
  2195                           	opt stack 0
  2196  0000BE                     Byte_SetPair@pInput:
  2197                           	opt stack 0
  2198  0000BE                     Byte_SetQuad@pInput:
  2199                           	opt stack 0
  2200  0000BE                     LCD_FillRectangle@pPoint:
  2201                           	opt stack 0
  2202                           
  2203                           ; 4 bytes @ 0xB
  2204  0000BE                     	ds	1
  2205  0000BF                     LCD_Fill@j:
  2206                           	opt stack 0
  2207  0000BF                     ___lldiv@counter:
  2208                           	opt stack 0
  2209  0000BF                     Word_GetPair@pInput:
  2210                           	opt stack 0
  2211  0000BF                     itos@input:
  2212                           	opt stack 0
  2213  0000BF                     Console_MakeField@Column:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0xC
  2217  0000BF                     	ds	1
  2218  0000C0                     Byte_SetPair@pPair:
  2219                           	opt stack 0
  2220  0000C0                     Byte_SetQuad@pQuad:
  2221                           	opt stack 0
  2222  0000C0                     Console_Tab@t:
  2223                           	opt stack 0
  2224  0000C0                     Timer2_Init@pFrequency:
  2225                           	opt stack 0
  2226                           
  2227                           ; 4 bytes @ 0xD
  2228  0000C0                     	ds	1
  2229  0000C1                     Byte_SetPair@pValue:
  2230                           	opt stack 0
  2231  0000C1                     Byte_SetQuad@pValue:
  2232                           	opt stack 0
  2233  0000C1                     Word_GetPair@pPair:
  2234                           	opt stack 0
  2235  0000C1                     Console_Tab@i:
  2236                           	opt stack 0
  2237  0000C1                     itos@destination:
  2238                           	opt stack 0
  2239  0000C1                     _Console_MakeField$10974:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0xE
  2243  0000C1                     	ds	1
  2244  0000C2                     Console_Tab@c:
  2245                           	opt stack 0
  2246  0000C2                     Port_SetPin@pInput:
  2247                           	opt stack 0
  2248  0000C2                     Port_Set@pInput:
  2249                           	opt stack 0
  2250  0000C2                     SPI_MinSpeed@pInput:
  2251                           	opt stack 0
  2252  0000C2                     SPI_MaxSpeed@pInput:
  2253                           	opt stack 0
  2254  0000C2                     Word_SetPair@pInput:
  2255                           	opt stack 0
  2256  0000C2                     PortProperty_Valid@pInput:
  2257                           	opt stack 0
  2258  0000C2                     LCD_FillRectangle@pSize:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0xF
  2262  0000C2                     	ds	1
  2263  0000C3                     ??_Console_PrintChar:
  2264  0000C3                     Console_MakeField@x:
  2265                           	opt stack 0
  2266  0000C3                     itos@Data:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x10
  2270  0000C3                     	ds	1
  2271  0000C4                     ??_Timer2_Init:
  2272  0000C4                     Port_SetPin@pPin:
  2273                           	opt stack 0
  2274  0000C4                     Port_Set@pValue:
  2275                           	opt stack 0
  2276  0000C4                     Word_SetPair@pPair:
  2277                           	opt stack 0
  2278  0000C4                     PortProperty_Valid@pPinDrive:
  2279                           	opt stack 0
  2280  0000C4                     Console_MakeField@y:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x11
  2284  0000C4                     	ds	1
  2285  0000C5                     ??_Port_Set:
  2286  0000C5                     Port_SetPin@pValue:
  2287                           	opt stack 0
  2288  0000C5                     Word_SetPair@pValue:
  2289                           	opt stack 0
  2290  0000C5                     PortProperty_Valid@pPin:
  2291                           	opt stack 0
  2292  0000C5                     LCD_DrawField@pField:
  2293                           	opt stack 0
  2294  0000C5                     itos@Length:
  2295                           	opt stack 0
  2296  0000C5                     Timer2_Init@RDIV:
  2297                           	opt stack 0
  2298                           
  2299                           ; 4 bytes @ 0x12
  2300  0000C5                     	ds	1
  2301  0000C6                     ??_PortProperty_Valid:
  2302  0000C6                     ??_LCD_FillRectangle:
  2303  0000C6                     Port_SetPin@Type:
  2304                           	opt stack 0
  2305  0000C6                     Console_PrintChar@pInput:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x13
  2309  0000C6                     	ds	1
  2310  0000C7                     LED_Set@pValue:
  2311                           	opt stack 0
  2312  0000C7                     putch@c:
  2313                           	opt stack 0
  2314  0000C7                     Port_TogglePin@pInput:
  2315                           	opt stack 0
  2316  0000C7                     itos@Out:
  2317                           	opt stack 0
  2318  0000C7                     LCD_DrawField@pPoint:
  2319                           	opt stack 0
  2320                           
  2321                           ; 4 bytes @ 0x14
  2322  0000C7                     	ds	1
  2323  0000C8                     ?_printf:
  2324                           	opt stack 0
  2325  0000C8                     LCD_FillRectangle@i:
  2326                           	opt stack 0
  2327  0000C8                     LED_Set@pLED:
  2328                           	opt stack 0
  2329  0000C8                     printf@f:
  2330                           	opt stack 0
  2331  0000C8                     PortProperty_Valid@Errors:
  2332                           	opt stack 0
  2333                           
  2334                           ; 16 bytes @ 0x15
  2335  0000C8                     	ds	1
  2336  0000C9                     LCD_FillRectangle@j:
  2337                           	opt stack 0
  2338  0000C9                     Port_TogglePin@pPin:
  2339                           	opt stack 0
  2340  0000C9                     HMI_SetNumber@pInput:
  2341                           	opt stack 0
  2342  0000C9                     Timer2_Init@pCPUClock:
  2343                           	opt stack 0
  2344                           
  2345                           ; 4 bytes @ 0x16
  2346  0000C9                     	ds	1
  2347  0000CA                     Port_TogglePin@Value:
  2348                           	opt stack 0
  2349                           
  2350                           ; 1 bytes @ 0x17
  2351  0000CA                     	ds	1
  2352  0000CB                     LED_Toggle@pLED:
  2353                           	opt stack 0
  2354  0000CB                     LCD_DrawField@pSize:
  2355                           	opt stack 0
  2356                           
  2357                           ; 4 bytes @ 0x18
  2358  0000CB                     	ds	1
  2359  0000CC                     ??_printf:
  2360  0000CC                     Event_DIPSwitch@pState:
  2361                           	opt stack 0
  2362  0000CC                     Event_TestButton@pState:
  2363                           	opt stack 0
  2364                           
  2365                           ; 1 bytes @ 0x19
  2366  0000CC                     	ds	1
  2367  0000CD                     Event_DIPSwitch@Bar:
  2368                           	opt stack 0
  2369  0000CD                     printf@flag:
  2370                           	opt stack 0
  2371  0000CD                     Timer2_Init@DIVIDE:
  2372                           	opt stack 0
  2373                           
  2374                           ; 4 bytes @ 0x1A
  2375  0000CD                     	ds	1
  2376  0000CE                     printf@prec:
  2377                           	opt stack 0
  2378  0000CE                     Button_Poll@pButton:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0x1B
  2382  0000CE                     	ds	1
  2383  0000CF                     ??_LCD_DrawField:
  2384  0000CF                     printf@ap:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x1C
  2388  0000CF                     	ds	1
  2389  0000D0                     Button_Poll@pIncrement:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0x1D
  2393  0000D0                     	ds	1
  2394  0000D1                     ??_Button_Poll:
  2395  0000D1                     LCD_DrawField@count:
  2396                           	opt stack 0
  2397  0000D1                     printf@val:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x1E
  2401  0000D1                     	ds	2
  2402  0000D3                     LCD_DrawField@xmax:
  2403                           	opt stack 0
  2404  0000D3                     printf@c:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x20
  2408  0000D3                     	ds	1
  2409  0000D4                     LCD_DrawField@ymax:
  2410                           	opt stack 0
  2411                           
  2412                           ; 1 bytes @ 0x21
  2413  0000D4                     	ds	1
  2414  0000D5                     LCD_DrawField@i:
  2415                           	opt stack 0
  2416  0000D5                     Port_Set@TypeRequired:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x22
  2420  0000D5                     	ds	1
  2421  0000D6                     ??_Console_Render:
  2422  0000D6                     Button_Poll@Pin:
  2423                           	opt stack 0
  2424                           
  2425                           ; 1 bytes @ 0x23
  2426  0000D6                     	ds	1
  2427  0000D7                     Port_Set@TypeActual:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x24
  2431  0000D7                     	ds	1
  2432  0000D8                     PortProperty_Valid@Pair:
  2433                           	opt stack 0
  2434  0000D8                     Console_Render@temp:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0x25
  2438  0000D8                     	ds	1
  2439  0000D9                     Port_Set@Type:
  2440                           	opt stack 0
  2441  0000D9                     Port_CheckPairType@pInput:
  2442                           	opt stack 0
  2443  0000D9                     Port_SetPinType@pInput:
  2444                           	opt stack 0
  2445  0000D9                     Console_Render@lCursor:
  2446                           	opt stack 0
  2447                           
  2448                           ; 4 bytes @ 0x26
  2449  0000D9                     	ds	2
  2450  0000DB                     Port_CheckPairType@pPair:
  2451                           	opt stack 0
  2452  0000DB                     Port_SetPinType@pPin:
  2453                           	opt stack 0
  2454                           
  2455                           ; 1 bytes @ 0x28
  2456  0000DB                     	ds	1
  2457  0000DC                     Port_CheckPairType@pDrive:
  2458                           	opt stack 0
  2459  0000DC                     Port_SetPinType@pType:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0x29
  2463  0000DC                     	ds	1
  2464  0000DD                     Port_CheckPairType@Pin1:
  2465                           	opt stack 0
  2466  0000DD                     Port_SetPinType@Output:
  2467                           	opt stack 0
  2468  0000DD                     Console_Render@x:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x2A
  2472  0000DD                     	ds	1
  2473  0000DE                     Port_CheckPairType@Pin2:
  2474                           	opt stack 0
  2475  0000DE                     Console_Render@y:
  2476                           	opt stack 0
  2477  0000DE                     Port_SetPinType@Props:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0x2B
  2481  0000DE                     	ds	1
  2482  0000DF                     Port_CheckPairType@Output:
  2483                           	opt stack 0
  2484                           
  2485                           ; 1 bytes @ 0x2C
  2486  0000DF                     	ds	1
  2487  0000E0                     LED_Init@pLED:
  2488                           	opt stack 0
  2489  0000E0                     Port_CheckPairType@Props:
  2490                           	opt stack 0
  2491  0000E0                     SPI_Init@pClock:
  2492                           	opt stack 0
  2493                           
  2494                           ; 4 bytes @ 0x2D
  2495  0000E0                     	ds	2
  2496  0000E2                     Port_CheckQuadType@pInput:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x2F
  2500  0000E2                     	ds	2
  2501  0000E4                     Port_CheckQuadType@pQuad:
  2502                           	opt stack 0
  2503  0000E4                     SPI_Init@pChannel:
  2504                           	opt stack 0
  2505                           
  2506                           ; 1 bytes @ 0x31
  2507  0000E4                     	ds	1
  2508  0000E5                     Port_CheckQuadType@pDrive:
  2509                           	opt stack 0
  2510  0000E5                     SPI_Init@pMode:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x32
  2514  0000E5                     	ds	1
  2515  0000E6                     Port_CheckQuadType@Pair1:
  2516                           	opt stack 0
  2517  0000E6                     SPI_Init@pInput:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x33
  2521  0000E6                     	ds	1
  2522  0000E7                     Port_CheckQuadType@Pair2:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x34
  2526  0000E7                     	ds	1
  2527  0000E8                     ??_LCD_Init:
  2528  0000E8                     Port_CheckQuadType@Output:
  2529                           	opt stack 0
  2530                           
  2531                           ; 1 bytes @ 0x35
  2532  0000E8                     	ds	1
  2533  0000E9                     Port_CheckPortType@pInput:
  2534                           	opt stack 0
  2535  0000E9                     Port_SetQuadType@pInput:
  2536                           	opt stack 0
  2537                           
  2538                           ; 2 bytes @ 0x36
  2539  0000E9                     	ds	1
  2540  0000EA                     LCD_Init@i:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x37
  2544  0000EA                     	ds	1
  2545  0000EB                     Port_CheckPortType@pDrive:
  2546                           	opt stack 0
  2547  0000EB                     Port_SetQuadType@pQuad:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x38
  2551  0000EB                     	ds	1
  2552  0000EC                     Port_CheckPortType@Output:
  2553                           	opt stack 0
  2554  0000EC                     Port_SetQuadType@pType:
  2555                           	opt stack 0
  2556                           
  2557                           ; 1 bytes @ 0x39
  2558  0000EC                     	ds	1
  2559  0000ED                     Port_SetQuadType@Output:
  2560                           	opt stack 0
  2561  0000ED                     Port_SetType@pInput:
  2562                           	opt stack 0
  2563                           
  2564                           ; 2 bytes @ 0x3A
  2565  0000ED                     	ds	1
  2566  0000EE                     HMI_Init@in:
  2567                           	opt stack 0
  2568                           
  2569                           ; 2 bytes @ 0x3B
  2570  0000EE                     	ds	1
  2571  0000EF                     Port_SetType@pType:
  2572                           	opt stack 0
  2573                           
  2574                           ; 1 bytes @ 0x3C
  2575  0000EF                     	ds	1
  2576  0000F0                     ??_Port_SetType:
  2577                           
  2578                           ; 1 bytes @ 0x3D
  2579  0000F0                     	ds	2
  2580  0000F2                     Port_SetType@Output:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x3F
  2584  0000F2                     	ds	1
  2585  0000F3                     tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postdec1	equ	0xFE5
  2592                           fsr1h	equ	0xFE2
  2593                           fsr1l	equ	0xFE1
  2594                           
  2595                           ; 1 bytes @ 0x40
  2596                           
  2597                           	psect	cstackCOMRAM
  2598  000001                     __pcstackCOMRAM:
  2599                           	opt stack 0
  2600  000001                     i2Byte_SetBit@pInput:
  2601                           	opt stack 0
  2602  000001                     i2Byte_GetZone@pInput:
  2603                           	opt stack 0
  2604  000001                     i2delay_us@us:
  2605                           	opt stack 0
  2606  000001                     i2MXK_Queue@pCallback:
  2607                           	opt stack 0
  2608                           
  2609                           ; 3 bytes @ 0x0
  2610  000001                     	ds	2
  2611  000003                     i2Byte_SetBit@pBit:
  2612                           	opt stack 0
  2613  000003                     i2Byte_GetZone@pMax:
  2614                           	opt stack 0
  2615  000003                     i2delay_us@u:
  2616                           	opt stack 0
  2617                           
  2618                           ; 4 bytes @ 0x2
  2619  000003                     	ds	1
  2620  000004                     i2Byte_SetBit@pValue:
  2621                           	opt stack 0
  2622  000004                     i2Byte_GetZone@pChunk:
  2623                           	opt stack 0
  2624                           
  2625                           ; 1 bytes @ 0x3
  2626  000004                     	ds	1
  2627  000005                     ??i2_Byte_SetBit:
  2628  000005                     i2Byte_GetZone@pChunkSize:
  2629                           	opt stack 0
  2630                           
  2631                           ; 1 bytes @ 0x4
  2632  000005                     	ds	1
  2633  000006                     ??i2_Byte_GetZone:
  2634                           
  2635                           ; 1 bytes @ 0x5
  2636  000006                     	ds	1
  2637  000007                     i2Byte_GetZone@MASK:
  2638                           	opt stack 0
  2639  000007                     i2MXK_SwitchTo@CUR:
  2640                           	opt stack 0
  2641                           
  2642                           ; 1 bytes @ 0x6
  2643  000007                     	ds	1
  2644  000008                     i2Byte_GetZone@Offset:
  2645                           	opt stack 0
  2646  000008                     i2MXK_SwitchTo@pModule:
  2647                           	opt stack 0
  2648                           
  2649                           ; 1 bytes @ 0x7
  2650  000008                     	ds	1
  2651  000009                     i2Byte_GetZone@Output:
  2652                           	opt stack 0
  2653                           
  2654                           ; 1 bytes @ 0x8
  2655  000009                     	ds	1
  2656  00000A                     i2Byte_GetPair@pInput:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x9
  2660  00000A                     	ds	2
  2661  00000C                     i2Byte_GetPair@pPair:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0xB
  2665  00000C                     	ds	1
  2666  00000D                     i2Word_GetPair@pInput:
  2667                           	opt stack 0
  2668                           
  2669                           ; 2 bytes @ 0xC
  2670  00000D                     	ds	2
  2671  00000F                     i2Word_GetPair@pPair:
  2672                           	opt stack 0
  2673                           
  2674                           ; 1 bytes @ 0xE
  2675  00000F                     	ds	1
  2676  000010                     i2Port_SetPin@pInput:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0xF
  2680  000010                     	ds	2
  2681  000012                     i2Port_SetPin@pPin:
  2682                           	opt stack 0
  2683                           
  2684                           ; 1 bytes @ 0x11
  2685  000012                     	ds	1
  2686  000013                     i2Port_SetPin@pValue:
  2687                           	opt stack 0
  2688                           
  2689                           ; 1 bytes @ 0x12
  2690  000013                     	ds	1
  2691  000014                     i2Port_SetPin@Type:
  2692                           	opt stack 0
  2693                           
  2694                           ; 1 bytes @ 0x13
  2695  000014                     	ds	1
  2696  000015                     
  2697                           ; 1 bytes @ 0x14
  2698  000015                     	ds	2
  2699  000017                     ??_ISR_Function:
  2700                           
  2701                           ; 1 bytes @ 0x16
  2702  000017                     	ds	18
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           postinc0	equ	0xFEE
  2708                           wreg	equ	0xFE8
  2709                           postdec1	equ	0xFE5
  2710                           fsr1h	equ	0xFE2
  2711                           fsr1l	equ	0xFE1
  2712                           
  2713 ;;
  2714 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2715 ;;
  2716 ;; *************** function _main *****************
  2717 ;; Defined at:
  2718 ;;		line 438 in file "main.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;		None
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  down            1   16[BANK1 ] unsigned char 
  2723 ;;  left            1   15[BANK1 ] unsigned char 
  2724 ;;  up              1   14[BANK1 ] unsigned char 
  2725 ;;  right           1   13[BANK1 ] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;Total ram usage:        4 bytes
  2740 ;; Hardware stack levels required when called:   17
  2741 ;; This function calls:
  2742 ;;		_Console_Init
  2743 ;;		_Console_Render
  2744 ;;		_FunctInitButton
  2745 ;;		_HMI_DIPSwitch
  2746 ;;		_HMI_DownSwitch
  2747 ;;		_HMI_Init
  2748 ;;		_HMI_LeftSwitch
  2749 ;;		_HMI_Poll
  2750 ;;		_HMI_Render
  2751 ;;		_HMI_RightSwitch
  2752 ;;		_HMI_SetNumber
  2753 ;;		_HMI_UpSwitch
  2754 ;;		_ISR_Enable
  2755 ;;		_InitADC
  2756 ;;		_InitSerialCommunication
  2757 ;;		_Init_Timer0
  2758 ;;		_LCD_Init
  2759 ;;		_LED_Init
  2760 ;;		_MXK_BlockSwitchTo
  2761 ;;		_MXK_DIPSwitch
  2762 ;;		_MXK_Dequeue
  2763 ;;		_MXK_Init
  2764 ;;		_MXK_Release
  2765 ;;		_MXK_TestButton
  2766 ;;		_Robot_Init
  2767 ;;		_printf
  2768 ;; This function is called by:
  2769 ;;		Startup code after reset
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text0
  2774  01198C                     __ptext0:
  2775                           	opt stack 0
  2776  01198C                     _main:
  2777                           	opt stack 14
  2778                           
  2779                           ;main.c: 441: MXK_Init();
  2780                           
  2781                           ;incstack = 0
  2782  01198C  EC27  F08C         	call	_MXK_Init	;wreg free
  2783                           
  2784                           ;main.c: 442: Init_Timer0();
  2785  011990  ECC2  F09C         	call	_Init_Timer0	;wreg free
  2786                           
  2787                           ;main.c: 443: InitSerialCommunication();
  2788  011994  EC59  F09C         	call	_InitSerialCommunication	;wreg free
  2789                           
  2790                           ;main.c: 444: Robot_Init();
  2791  011998  ECE6  F09C         	call	_Robot_Init	;wreg free
  2792                           
  2793                           ;main.c: 445: ISR_Enable();
  2794  01199C  EC83  F09D         	call	_ISR_Enable	;wreg free
  2795                           
  2796                           ;main.c: 446: FunctInitButton();
  2797  0119A0  ECCF  F094         	call	_FunctInitButton	;wreg free
  2798                           
  2799                           ;main.c: 447: InitADC();
  2800  0119A4  EC79  F099         	call	_InitADC	;wreg free
  2801                           
  2802                           ;main.c: 448: LED_Init(eLED2);
  2803  0119A8  0E01               	movlw	1
  2804  0119AA  EC9F  F097         	call	_LED_Init
  2805                           
  2806                           ;main.c: 450: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2807  0119AE  0E01               	movlw	1
  2808  0119B0  EC93  F09A         	call	_MXK_BlockSwitchTo
  2809  0119B4  0900               	iorlw	0
  2810  0119B6  B4D8               	btfsc	status,2,c
  2811  0119B8  D00C               	goto	l2242
  2812                           
  2813                           ;main.c: 451: HMI_Init();
  2814  0119BA  ECC6  F088         	call	_HMI_Init	;wreg free
  2815                           
  2816                           ;main.c: 452: LCD_Init();
  2817  0119BE  ECE0  F08A         	call	_LCD_Init	;wreg free
  2818                           
  2819                           ;main.c: 453: Console_Init();
  2820  0119C2  ECE7  F095         	call	_Console_Init	;wreg free
  2821                           
  2822                           ;main.c: 454: if (MXK_Release())
  2823  0119C6  EC9E  F09C         	call	_MXK_Release	;wreg free
  2824  0119CA  0900               	iorlw	0
  2825  0119CC  A4D8               	btfss	status,2,c
  2826                           
  2827                           ;main.c: 455: MXK_Dequeue();
  2828  0119CE  ECE5  F09A         	call	_MXK_Dequeue	;wreg free
  2829  0119D2                     l2242:
  2830                           
  2831                           ;main.c: 460: HMI_Poll();
  2832                           
  2833                           ;main.c: 456: }
  2834                           ;main.c: 458: for(;;) {
  2835  0119D2  ECB8  F096         	call	_HMI_Poll	;wreg free
  2836                           
  2837                           ;main.c: 462: bool down = HMIBoard.mDown.mGetState();
  2838  0119D6  EE21  F059         	lfsr	2,_HMIBoard+45
  2839  0119DA  D801               	call	u10568
  2840  0119DC  D00A               	goto	u10569
  2841  0119DE                     u10568:
  2842  0119DE  0005               	push	
  2843  0119E0  6EFA               	movwf	pclath,c
  2844  0119E2  50DE               	movf	postinc2,w,c
  2845  0119E4  6EFD               	movwf	tosl,c
  2846  0119E6  50DE               	movf	postinc2,w,c
  2847  0119E8  6EFE               	movwf	tosh,c
  2848  0119EA  50DE               	movf	postinc2,w,c
  2849  0119EC  6EFF               	movwf	tosu,c
  2850  0119EE  50FA               	movf	pclath,w,c
  2851  0119F0  0012               	return		;indir
  2852  0119F2                     u10569:
  2853  0119F2  0101               	movlb	1	; () banked
  2854  0119F4  6FE7               	movwf	main@down& (0+255),b
  2855                           
  2856                           ; BSR set to: 1
  2857                           ;main.c: 463: bool right = HMIBoard.mRight.mGetState();
  2858  0119F6  EE21  F03B         	lfsr	2,_HMIBoard+15
  2859  0119FA  D801               	call	u10578
  2860  0119FC  D00A               	goto	u10579
  2861  0119FE                     u10578:
  2862  0119FE  0005               	push	
  2863  011A00  6EFA               	movwf	pclath,c
  2864  011A02  50DE               	movf	postinc2,w,c
  2865  011A04  6EFD               	movwf	tosl,c
  2866  011A06  50DE               	movf	postinc2,w,c
  2867  011A08  6EFE               	movwf	tosh,c
  2868  011A0A  50DE               	movf	postinc2,w,c
  2869  011A0C  6EFF               	movwf	tosu,c
  2870  011A0E  50FA               	movf	pclath,w,c
  2871  011A10  0012               	return		;indir
  2872  011A12                     u10579:
  2873  011A12  0101               	movlb	1	; () banked
  2874  011A14  6FE4               	movwf	main@right& (0+255),b
  2875                           
  2876                           ; BSR set to: 1
  2877                           ;main.c: 464: bool up = HMIBoard.mUp.mGetState();
  2878  011A16  EE21  F04F         	lfsr	2,_HMIBoard+35
  2879  011A1A  D801               	call	u10588
  2880  011A1C  D00A               	goto	u10589
  2881  011A1E                     u10588:
  2882  011A1E  0005               	push	
  2883  011A20  6EFA               	movwf	pclath,c
  2884  011A22  50DE               	movf	postinc2,w,c
  2885  011A24  6EFD               	movwf	tosl,c
  2886  011A26  50DE               	movf	postinc2,w,c
  2887  011A28  6EFE               	movwf	tosh,c
  2888  011A2A  50DE               	movf	postinc2,w,c
  2889  011A2C  6EFF               	movwf	tosu,c
  2890  011A2E  50FA               	movf	pclath,w,c
  2891  011A30  0012               	return		;indir
  2892  011A32                     u10589:
  2893  011A32  0101               	movlb	1	; () banked
  2894  011A34  6FE5               	movwf	main@up& (0+255),b
  2895                           
  2896                           ; BSR set to: 1
  2897                           ;main.c: 465: bool left = HMIBoard.mLeft.mGetState();
  2898  011A36  EE21  F045         	lfsr	2,_HMIBoard+25
  2899  011A3A  D801               	call	u10598
  2900  011A3C  D00A               	goto	u10599
  2901  011A3E                     u10598:
  2902  011A3E  0005               	push	
  2903  011A40  6EFA               	movwf	pclath,c
  2904  011A42  50DE               	movf	postinc2,w,c
  2905  011A44  6EFD               	movwf	tosl,c
  2906  011A46  50DE               	movf	postinc2,w,c
  2907  011A48  6EFE               	movwf	tosh,c
  2908  011A4A  50DE               	movf	postinc2,w,c
  2909  011A4C  6EFF               	movwf	tosu,c
  2910  011A4E  50FA               	movf	pclath,w,c
  2911  011A50  0012               	return		;indir
  2912  011A52                     u10599:
  2913  011A52  0101               	movlb	1	; () banked
  2914  011A54  6FE6               	movwf	main@left& (0+255),b
  2915                           
  2916                           ; BSR set to: 1
  2917                           ;main.c: 467: if (down) {
  2918  011A56  51E7               	movf	main@down& (0+255),w,b
  2919  011A58  B4D8               	btfsc	status,2,c
  2920  011A5A  D005               	goto	l2244
  2921                           
  2922                           ; BSR set to: 1
  2923                           ;main.c: 468: mode = 1;
  2924  011A5C  0E00               	movlw	0
  2925  011A5E  0100               	movlb	0	; () banked
  2926  011A60  6F76               	movwf	(_mode+1)& (0+255),b
  2927  011A62  0E01               	movlw	1
  2928  011A64  6F75               	movwf	_mode& (0+255),b
  2929  011A66                     l2244:
  2930                           
  2931                           ;main.c: 469: }
  2932                           ;main.c: 477: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2933                           
  2934                           ; BSR set to: 0
  2935  011A66  0E01               	movlw	1
  2936  011A68  EC93  F09A         	call	_MXK_BlockSwitchTo
  2937  011A6C  0900               	iorlw	0
  2938  011A6E  B4D8               	btfsc	status,2,c
  2939  011A70  D7B0               	goto	l2242
  2940                           
  2941                           ;main.c: 478: if (mode == 1){
  2942  011A72  0100               	movlb	0	; () banked
  2943  011A74  0575               	decf	_mode& (0+255),w,b
  2944  011A76  1176               	iorwf	(_mode+1)& (0+255),w,b
  2945  011A78  A4D8               	btfss	status,2,c
  2946  011A7A  D01C               	goto	l2246
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;main.c: 481: printf("%c",(char)35);
  2950  011A7C  0EFB               	movlw	low STR_1
  2951  011A7E  6FC8               	movwf	printf@f& (0+255),b
  2952  011A80  0EFF               	movlw	high STR_1
  2953  011A82  6FC9               	movwf	(printf@f+1)& (0+255),b
  2954  011A84  0E00               	movlw	0
  2955  011A86  6FCB               	movwf	(?_printf+3)& (0+255),b
  2956  011A88  0E23               	movlw	35
  2957  011A8A  6FCA               	movwf	(?_printf+2)& (0+255),b
  2958  011A8C  EC84  F089         	call	_printf	;wreg free
  2959                           
  2960                           ;main.c: 482: printf("test\n");
  2961  011A90  0EF0               	movlw	low STR_31
  2962  011A92  0100               	movlb	0	; () banked
  2963  011A94  6FC8               	movwf	printf@f& (0+255),b
  2964  011A96  0EFF               	movlw	high STR_31
  2965  011A98  6FC9               	movwf	(printf@f+1)& (0+255),b
  2966  011A9A  EC84  F089         	call	_printf	;wreg free
  2967                           
  2968                           ;main.c: 484: Console_Render();
  2969  011A9E  EC59  F086         	call	_Console_Render	;wreg free
  2970                           
  2971                           ;main.c: 485: HMI_SetNumber (100);
  2972  011AA2  0E00               	movlw	0
  2973  011AA4  0100               	movlb	0	; () banked
  2974  011AA6  6FCA               	movwf	(HMI_SetNumber@pInput+1)& (0+255),b
  2975  011AA8  0E64               	movlw	100
  2976  011AAA  6FC9               	movwf	HMI_SetNumber@pInput& (0+255),b
  2977  011AAC  ECF4  F09B         	call	_HMI_SetNumber	;wreg free
  2978                           
  2979                           ;main.c: 486: HMI_Render();
  2980  011AB0  ECAF  F09A         	call	_HMI_Render	;wreg free
  2981  011AB4                     l2246:
  2982                           
  2983                           ;main.c: 487: }
  2984                           ;main.c: 489: Console_Render();
  2985  011AB4  EC59  F086         	call	_Console_Render	;wreg free
  2986                           
  2987                           ;main.c: 490: if (MXK_Release())
  2988  011AB8  EC9E  F09C         	call	_MXK_Release	;wreg free
  2989  011ABC  0900               	iorlw	0
  2990  011ABE  B4D8               	btfsc	status,2,c
  2991  011AC0  D788               	goto	l2242
  2992                           
  2993                           ;main.c: 491: MXK_Dequeue();
  2994  011AC2  ECE5  F09A         	call	_MXK_Dequeue	;wreg free
  2995                           
  2996                           ;main.c: 492: }
  2997                           ;main.c: 493: }
  2998  011AC6  D785               	goto	l2242
  2999  011AC8                     __end_of_main:
  3000                           	opt stack 0
  3001                           tosu	equ	0xFFF
  3002                           tosh	equ	0xFFE
  3003                           tosl	equ	0xFFD
  3004                           pclath	equ	0xFFA
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           postinc0	equ	0xFEE
  3010                           wreg	equ	0xFE8
  3011                           postdec1	equ	0xFE5
  3012                           fsr1h	equ	0xFE2
  3013                           fsr1l	equ	0xFE1
  3014                           postinc2	equ	0xFDE
  3015                           status	equ	0xFD8
  3016                           
  3017 ;; *************** function _printf *****************
  3018 ;; Defined at:
  3019 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  3022 ;;		 -> STR_35(5), STR_34(3), STR_33(39), STR_32(42), 
  3023 ;;		 -> STR_31(6), STR_30(3), STR_29(21), STR_28(3), 
  3024 ;;		 -> STR_27(19), STR_26(28), STR_25(20), STR_24(3), 
  3025 ;;		 -> STR_23(19), STR_22(19), STR_21(19), STR_20(19), 
  3026 ;;		 -> STR_19(19), STR_18(19), STR_17(19), STR_16(19), 
  3027 ;;		 -> STR_15(3), STR_14(19), STR_13(28), STR_12(20), 
  3028 ;;		 -> STR_11(3), STR_10(19), STR_9(19), STR_8(19), 
  3029 ;;		 -> STR_7(19), STR_6(19), STR_5(19), STR_4(19), 
  3030 ;;		 -> STR_3(16), STR_2(19), STR_1(3), 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  tmpval          4    0        struct .
  3033 ;;  cp              3    0        PTR const unsigned char 
  3034 ;;  val             2   30[BANK0 ] unsigned int 
  3035 ;;  ap              2   28[BANK0 ] PTR void [1]
  3036 ;;		 -> ?_printf(2), 
  3037 ;;  len             2    0        unsigned int 
  3038 ;;  c               1   32[BANK0 ] char 
  3039 ;;  prec            1   27[BANK0 ] char 
  3040 ;;  flag            1   26[BANK0 ] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  2   21[BANK0 ] int 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3050 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;Total ram usage:       12 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:   12
  3057 ;; This function calls:
  3058 ;;		___lwdiv
  3059 ;;		___lwmod
  3060 ;;		_putch
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;;		_Sensor_Observe2
  3064 ;;		_Closest_Object2
  3065 ;;		_Sensor_Observe
  3066 ;;		_Closest_Object
  3067 ;;		_pop
  3068 ;;		_push
  3069 ;;		_giveID
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text1
  3074  011308                     __ptext1:
  3075                           	opt stack 0
  3076  011308                     _printf:
  3077                           	opt stack 18
  3078                           
  3079                           ;doprnt.c: 466: va_list ap;
  3080                           ;doprnt.c: 499: signed char c;
  3081                           ;doprnt.c: 506: signed char prec;
  3082                           ;doprnt.c: 508: unsigned char flag;
  3083                           ;doprnt.c: 523: union {
  3084                           ;doprnt.c: 524: unsigned long vd;
  3085                           ;doprnt.c: 525: double integ;
  3086                           ;doprnt.c: 526: } tmpval;
  3087                           ;doprnt.c: 528: unsigned int val;
  3088                           ;doprnt.c: 529: unsigned len;
  3089                           ;doprnt.c: 530: const char * cp;
  3090                           ;doprnt.c: 533: *ap = __va_start();
  3091                           
  3092                           ;incstack = 0
  3093  011308  0ECA               	movlw	low (?_printf+2)
  3094  01130A  0100               	movlb	0	; () banked
  3095  01130C  6FCF               	movwf	printf@ap& (0+255),b
  3096  01130E  0E00               	movlw	high (?_printf+2)
  3097  011310  6FD0               	movwf	(printf@ap+1)& (0+255),b
  3098                           
  3099                           ;doprnt.c: 536: while(c = *f++) {
  3100  011312  D09E               	goto	u9600
  3101  011314                     
  3102                           ; BSR set to: 0
  3103                           ;doprnt.c: 538: if(c != '%')
  3104                           
  3105                           ; BSR set to: 0
  3106  011314  0E25               	movlw	37
  3107  011316  19D3               	xorwf	printf@c& (0+255),w,b
  3108  011318  B4D8               	btfsc	status,2,c
  3109  01131A  D004               	goto	l2311
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;doprnt.c: 540: {
  3113                           ;doprnt.c: 541: (putch(c) );
  3114  01131C  51D3               	movf	printf@c& (0+255),w,b
  3115  01131E  EC47  F09D         	call	_putch
  3116                           
  3117                           ;doprnt.c: 542: continue;
  3118  011322  D096               	goto	u9600
  3119  011324                     l2311:
  3120                           
  3121                           ;doprnt.c: 543: }
  3122                           ;doprnt.c: 548: flag = 0;
  3123  011324  0E00               	movlw	0
  3124  011326  0100               	movlb	0	; () banked
  3125  011328  6FCD               	movwf	printf@flag& (0+255),b
  3126                           
  3127                           ;doprnt.c: 635: switch(c = *f++) {
  3128  01132A  D00E               	goto	l2312
  3129  01132C                     
  3130                           ; BSR set to: 0
  3131                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3132                           
  3133                           ; BSR set to: 0
  3134  01132C  C0CF  FFD9         	movff	printf@ap,fsr2l
  3135  011330  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  3136  011334  50DF               	movf	indf2,w,c
  3137  011336  6FD3               	movwf	printf@c& (0+255),b
  3138                           
  3139                           ; BSR set to: 0
  3140  011338  0E02               	movlw	2
  3141  01133A  27CF               	addwf	printf@ap& (0+255),f,b
  3142  01133C  0E00               	movlw	0
  3143  01133E  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  3144  011340                     
  3145                           ; BSR set to: 0
  3146                           ;doprnt.c: 809: (putch(c) );
  3147                           
  3148                           ; BSR set to: 0
  3149  011340  51D3               	movf	printf@c& (0+255),w,b
  3150  011342  EC47  F09D         	call	_putch
  3151                           
  3152                           ;doprnt.c: 810: continue;
  3153  011346  D084               	goto	u9600
  3154  011348                     l2312:
  3155  011348  C0C8  FFF6         	movff	printf@f,tblptrl
  3156  01134C  C0C9  FFF7         	movff	printf@f+1,tblptrh
  3157  011350  0100               	movlb	0	; () banked
  3158  011352  4BC8               	infsnz	printf@f& (0+255),f,b
  3159  011354  2BC9               	incf	(printf@f+1)& (0+255),f,b
  3160  011356                     	if	0	;tblptru may be non-zero
  3161  011356                     	endif
  3162  011356                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3163  011356  0E00               	movlw	low (__mediumconst shr (0+16))
  3164  011358  6EF8               	movwf	tblptru,c
  3165  01135A                     	endif
  3166  01135A  0008               	tblrd		*
  3167  01135C  CFF5 F0D3          	movff	tablat,printf@c
  3168  011360  51D3               	movf	printf@c& (0+255),w,b
  3169                           
  3170                           ; Switch size 1, requested type "space"
  3171                           ; Number of cases is 4, Range of values is 0 to 105
  3172                           ; switch strategies available:
  3173                           ; Name         Instructions Cycles
  3174                           ; simple_byte           13     7 (average)
  3175                           ;	Chosen strategy is simple_byte
  3176  011362  0A00               	xorlw	0	; case 0
  3177  011364  B4D8               	btfsc	status,2,c
  3178  011366  0012               	return	
  3179  011368  0A63               	xorlw	99	; case 99
  3180  01136A  B4D8               	btfsc	status,2,c
  3181  01136C  D7DF               	goto	l2318
  3182  01136E  0A07               	xorlw	7	; case 100
  3183  011370  B4D8               	btfsc	status,2,c
  3184  011372  D003               	goto	l2317
  3185  011374  0A0D               	xorlw	13	; case 105
  3186  011376  A4D8               	btfss	status,2,c
  3187  011378  D7E3               	goto	l2319
  3188  01137A                     l2317:
  3189                           
  3190                           ;doprnt.c: 1253: {
  3191                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3192                           
  3193                           ; BSR set to: 0
  3194  01137A  C0CF  FFD9         	movff	printf@ap,fsr2l
  3195  01137E  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  3196  011382  CFDE F0D1          	movff	postinc2,printf@val
  3197  011386  CFDD F0D2          	movff	postdec2,printf@val+1
  3198  01138A  0E02               	movlw	2
  3199  01138C  0100               	movlb	0	; () banked
  3200  01138E  27CF               	addwf	printf@ap& (0+255),f,b
  3201  011390  0E00               	movlw	0
  3202  011392  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;doprnt.c: 1261: if((int)val < 0) {
  3206  011394  AFD2               	btfss	(printf@val+1)& (0+255),7,b
  3207  011396  D006               	goto	l2320
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;doprnt.c: 1262: flag |= 0x03;
  3211  011398  0E03               	movlw	3
  3212  01139A  13CD               	iorwf	printf@flag& (0+255),f,b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;doprnt.c: 1263: val = -val;
  3216  01139C  6DD1               	negf	printf@val& (0+255),b
  3217  01139E  1FD2               	comf	(printf@val+1)& (0+255),f,b
  3218  0113A0  B0D8               	btfsc	status,0,c
  3219  0113A2  2BD2               	incf	(printf@val+1)& (0+255),f,b
  3220  0113A4                     l2320:
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;doprnt.c: 1264: }
  3224                           ;doprnt.c: 1266: }
  3225                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3226                           
  3227                           ; BSR set to: 0
  3228  0113A4  0E01               	movlw	1
  3229  0113A6  6FD3               	movwf	printf@c& (0+255),b
  3230  0113A8                     l13412:
  3231                           
  3232                           ; BSR set to: 0
  3233  0113A8  0E05               	movlw	5
  3234  0113AA  19D3               	xorwf	printf@c& (0+255),w,b
  3235  0113AC  B4D8               	btfsc	status,2,c
  3236  0113AE  D015               	goto	u9580
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;doprnt.c: 1306: if(val < dpowers[c])
  3240                           
  3241                           ; BSR set to: 0
  3242                           
  3243                           ; BSR set to: 0
  3244  0113B0  51D3               	movf	printf@c& (0+255),w,b
  3245  0113B2  0D02               	mullw	2
  3246  0113B4  0EBD               	movlw	low _dpowers
  3247  0113B6  24F3               	addwf	prodl,w,c
  3248  0113B8  6EF6               	movwf	tblptrl,c
  3249  0113BA  0EFC               	movlw	high _dpowers
  3250  0113BC  20F4               	addwfc	prodh,w,c
  3251  0113BE  6EF7               	movwf	tblptrh,c
  3252  0113C0                     	if	1	;There are 3 active tblptr bytes
  3253  0113C0  6AF8               	clrf	tblptru,c
  3254  0113C2  0E00               	movlw	low (__mediumconst shr (0+16))
  3255  0113C4  22F8               	addwfc	tblptru,f,c
  3256  0113C6                     	endif
  3257  0113C6  0009               	tblrd		*+
  3258  0113C8  50F5               	movf	tablat,w,c
  3259  0113CA  5DD1               	subwf	printf@val& (0+255),w,b
  3260  0113CC  0009               	tblrd		*+
  3261  0113CE  50F5               	movf	tablat,w,c
  3262  0113D0  59D2               	subwfb	(printf@val+1)& (0+255),w,b
  3263  0113D2  A0D8               	btfss	status,0,c
  3264  0113D4  D002               	goto	u9580
  3265                           
  3266                           ; BSR set to: 0
  3267                           
  3268                           ; BSR set to: 0
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;doprnt.c: 1307: break;
  3272  0113D6  2BD3               	incf	printf@c& (0+255),f,b
  3273  0113D8  D7E7               	goto	l13412
  3274  0113DA                     u9580:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;doprnt.c: 1422: {
  3278                           ;doprnt.c: 1438: if(flag & 0x03)
  3279                           
  3280                           ; BSR set to: 0
  3281  0113DA  C0CD  F0CC         	movff	printf@flag,??_printf
  3282  0113DE  0E03               	movlw	3
  3283  0113E0  17CC               	andwf	??_printf& (0+255),f,b
  3284  0113E2  B4D8               	btfsc	status,2,c
  3285  0113E4  D003               	goto	l2324
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;doprnt.c: 1439: (putch('-') );
  3289  0113E6  0E2D               	movlw	45
  3290  0113E8  EC47  F09D         	call	_putch
  3291  0113EC                     l2324:
  3292                           
  3293                           ;doprnt.c: 1469: }
  3294                           ;doprnt.c: 1472: prec = c;
  3295  0113EC  C0D3  F0CE         	movff	printf@c,printf@prec
  3296                           
  3297                           ;doprnt.c: 1474: while(prec--) {
  3298  0113F0  D02A               	goto	l2325
  3299  0113F2                     
  3300                           ;doprnt.c: 1478: {
  3301                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3302  0113F2  0100               	movlb	0	; () banked
  3303  0113F4  51CE               	movf	printf@prec& (0+255),w,b
  3304  0113F6  0D02               	mullw	2
  3305  0113F8  0EBD               	movlw	low _dpowers
  3306  0113FA  24F3               	addwf	prodl,w,c
  3307  0113FC  6EF6               	movwf	tblptrl,c
  3308  0113FE  0EFC               	movlw	high _dpowers
  3309  011400  20F4               	addwfc	prodh,w,c
  3310  011402  6EF7               	movwf	tblptrh,c
  3311  011404                     	if	1	;There are 3 active tblptr bytes
  3312  011404  6AF8               	clrf	tblptru,c
  3313  011406  0E00               	movlw	low (__mediumconst shr (0+16))
  3314  011408  22F8               	addwfc	tblptru,f,c
  3315  01140A                     	endif
  3316  01140A  0009               	tblrd		*+
  3317  01140C  CFF5 F0B5          	movff	tablat,___lwdiv@divisor
  3318  011410  000A               	tblrd		*-
  3319  011412  CFF5 F0B6          	movff	tablat,___lwdiv@divisor+1
  3320  011416  C0D1  F0B3         	movff	printf@val,___lwdiv@dividend
  3321  01141A  C0D2  F0B4         	movff	printf@val+1,___lwdiv@dividend+1
  3322  01141E  ECF3  F097         	call	___lwdiv	;wreg free
  3323  011422  C0B3  F0BA         	movff	?___lwdiv,___lwmod@dividend
  3324  011426  C0B4  F0BB         	movff	?___lwdiv+1,___lwmod@dividend+1
  3325  01142A  0E00               	movlw	0
  3326  01142C  0100               	movlb	0	; () banked
  3327  01142E  6FBD               	movwf	(___lwmod@divisor+1)& (0+255),b
  3328  011430  0E0A               	movlw	10
  3329  011432  6FBC               	movwf	___lwmod@divisor& (0+255),b
  3330  011434  EC9B  F099         	call	___lwmod	;wreg free
  3331  011438  0100               	movlb	0	; () banked
  3332  01143A  51BA               	movf	?___lwmod& (0+255),w,b
  3333  01143C  0F30               	addlw	48
  3334  01143E  6FD3               	movwf	printf@c& (0+255),b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 1523: }
  3338                           ;doprnt.c: 1524: (putch(c) );
  3339  011440  51D3               	movf	printf@c& (0+255),w,b
  3340  011442  EC47  F09D         	call	_putch
  3341  011446                     l2325:
  3342  011446  0100               	movlb	0	; () banked
  3343  011448  07CE               	decf	printf@prec& (0+255),f,b
  3344  01144A  29CE               	incf	printf@prec& (0+255),w,b
  3345  01144C  A4D8               	btfss	status,2,c
  3346  01144E  D7D1               	goto	l2326
  3347  011450                     u9600:
  3348                           
  3349                           ; BSR set to: 0
  3350                           
  3351                           ; BSR set to: 0
  3352  011450  C0C8  FFF6         	movff	printf@f,tblptrl
  3353  011454  C0C9  FFF7         	movff	printf@f+1,tblptrh
  3354  011458  0100               	movlb	0	; () banked
  3355  01145A  4BC8               	infsnz	printf@f& (0+255),f,b
  3356  01145C  2BC9               	incf	(printf@f+1)& (0+255),f,b
  3357  01145E                     	if	0	;tblptru may be non-zero
  3358  01145E                     	endif
  3359  01145E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3360  01145E  0E00               	movlw	low (__mediumconst shr (0+16))
  3361  011460  6EF8               	movwf	tblptru,c
  3362  011462                     	endif
  3363  011462  0008               	tblrd		*
  3364  011464  CFF5 F0D3          	movff	tablat,printf@c
  3365  011468  51D3               	movf	printf@c& (0+255),w,b
  3366  01146A  B4D8               	btfsc	status,2,c
  3367  01146C  0012               	return	
  3368  01146E  D752               	goto	l2310
  3369  011470                     __end_of_printf:
  3370                           	opt stack 0
  3371                           tosu	equ	0xFFF
  3372                           tosh	equ	0xFFE
  3373                           tosl	equ	0xFFD
  3374                           pclath	equ	0xFFA
  3375                           tblptru	equ	0xFF8
  3376                           tblptrh	equ	0xFF7
  3377                           tblptrl	equ	0xFF6
  3378                           tablat	equ	0xFF5
  3379                           prodh	equ	0xFF4
  3380                           prodl	equ	0xFF3
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           postdec1	equ	0xFE5
  3384                           fsr1h	equ	0xFE2
  3385                           fsr1l	equ	0xFE1
  3386                           indf2	equ	0xFDF
  3387                           postinc2	equ	0xFDE
  3388                           postdec2	equ	0xFDD
  3389                           fsr2h	equ	0xFDA
  3390                           fsr2l	equ	0xFD9
  3391                           status	equ	0xFD8
  3392                           
  3393 ;; *************** function _putch *****************
  3394 ;; Defined at:
  3395 ;;		line 454 in file "Library/Console.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;  c               1    wreg     unsigned char 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  c               1   20[BANK0 ] unsigned char 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  1    wreg      void 
  3402 ;; Registers used:
  3403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;Total ram usage:        1 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:   11
  3416 ;; This function calls:
  3417 ;;		_Console_PrintChar
  3418 ;; This function is called by:
  3419 ;;		_printf
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text2
  3424  013A8E                     __ptext2:
  3425                           	opt stack 0
  3426  013A8E                     _putch:
  3427                           	opt stack 18
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;incstack = 0
  3431                           ;putch@c stored from wreg
  3432  013A8E  0100               	movlb	0	; () banked
  3433  013A90  6FC7               	movwf	putch@c& (0+255),b
  3434                           
  3435                           ;Console.c: 456: Console_PrintChar(c);
  3436  013A92  0100               	movlb	0	; () banked
  3437  013A94  51C7               	movf	putch@c& (0+255),w,b
  3438  013A96  EC38  F08A         	call	_Console_PrintChar
  3439  013A9A  0012               	return		;funcret
  3440  013A9C                     __end_of_putch:
  3441                           	opt stack 0
  3442                           tosu	equ	0xFFF
  3443                           tosh	equ	0xFFE
  3444                           tosl	equ	0xFFD
  3445                           pclath	equ	0xFFA
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           fsr1h	equ	0xFE2
  3456                           fsr1l	equ	0xFE1
  3457                           indf2	equ	0xFDF
  3458                           postinc2	equ	0xFDE
  3459                           postdec2	equ	0xFDD
  3460                           fsr2h	equ	0xFDA
  3461                           fsr2l	equ	0xFD9
  3462                           status	equ	0xFD8
  3463                           
  3464 ;; *************** function _Console_PrintChar *****************
  3465 ;; Defined at:
  3466 ;;		line 322 in file "Library/Console.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  pInput          1    wreg     unsigned char 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  pInput          1   19[BANK0 ] unsigned char 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;Total ram usage:        4 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:   10
  3487 ;; This function calls:
  3488 ;;		_Console_Backspace
  3489 ;;		_Console_FormFeed
  3490 ;;		_Console_IncrementCursor
  3491 ;;		_Console_NewLine
  3492 ;;		_Console_ResetCursor
  3493 ;;		_Console_Tab
  3494 ;; This function is called by:
  3495 ;;		_putch
  3496 ;;		_Console_PrintString
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text3
  3501  011470                     __ptext3:
  3502                           	opt stack 0
  3503  011470                     _Console_PrintChar:
  3504                           	opt stack 18
  3505                           
  3506                           ;incstack = 0
  3507                           ;Console_PrintChar@pInput stored from wreg
  3508  011470  0100               	movlb	0	; () banked
  3509  011472  6FC6               	movwf	Console_PrintChar@pInput& (0+255),b
  3510                           
  3511                           ;Console.c: 324: switch(pInput)
  3512  011474  D08A               	goto	l1036
  3513  011476                     
  3514                           ;Console.c: 327: case '\n':
  3515                           ;Console.c: 328: Console_NewLine();
  3516  011476  EC17  F094         	call	_Console_NewLine	;wreg free
  3517                           
  3518                           ;Console.c: 329: return;
  3519  01147A  0012               	return	
  3520  01147C                     
  3521                           ;Console.c: 331: Console_Backspace();
  3522  01147C  EC70  F098         	call	_Console_Backspace	;wreg free
  3523                           
  3524                           ;Console.c: 332: return;
  3525  011480  0012               	return	
  3526  011482                     
  3527                           ;Console.c: 334: Console_FormFeed();
  3528  011482  EC7C  F095         	call	_Console_FormFeed	;wreg free
  3529                           
  3530                           ;Console.c: 335: return;
  3531  011486  0012               	return	
  3532  011488                     
  3533                           ;Console.c: 337: Console_Tab();
  3534  011488  ECAD  F091         	call	_Console_Tab	;wreg free
  3535                           
  3536                           ;Console.c: 338: return;
  3537  01148C  0012               	return	
  3538  01148E                     
  3539                           ;Console.c: 340: Console_IncrementCursor();
  3540  01148E  EC75  F097         	call	_Console_IncrementCursor	;wreg free
  3541                           
  3542                           ;Console.c: 341: return;
  3543  011492  0012               	return	
  3544  011494                     
  3545                           ;Console.c: 343: Console_ResetCursor();
  3546  011494  EC68  F09C         	call	_Console_ResetCursor	;wreg free
  3547                           
  3548                           ;Console.c: 344: return;
  3549  011498  0012               	return	
  3550  01149A                     
  3551                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  3552                           
  3553                           ;Console.c: 349: default:
  3554  01149A  C0C6  F0C3         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  3555  01149E  0E7F               	movlw	127
  3556  0114A0  0100               	movlb	0	; () banked
  3557  0114A2  17C3               	andwf	??_Console_PrintChar& (0+255),f,b
  3558  0114A4  518E               	movf	_lBufferY& (0+255),w,b
  3559  0114A6  0D14               	mullw	20
  3560  0114A8  0EF0               	movlw	low _lBuffer
  3561  0114AA  6FC4               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3562  0114AC  0E02               	movlw	high _lBuffer
  3563  0114AE  6FC5               	movwf	(??_Console_PrintChar+2)& (0+255),b
  3564  0114B0  50F3               	movf	prodl,w,c
  3565  0114B2  27C4               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  3566  0114B4  50F4               	movf	prodh,w,c
  3567  0114B6  23C5               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  3568  0114B8  518F               	movf	_lBufferX& (0+255),w,b
  3569  0114BA  0D01               	mullw	1
  3570  0114BC  50F3               	movf	prodl,w,c
  3571  0114BE  25C4               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  3572  0114C0  6ED9               	movwf	fsr2l,c
  3573  0114C2  50F4               	movf	prodh,w,c
  3574  0114C4  21C5               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  3575  0114C6  6EDA               	movwf	fsr2h,c
  3576  0114C8  50DF               	movf	indf2,w,c
  3577  0114CA  0B7F               	andlw	127
  3578  0114CC  19C3               	xorwf	??_Console_PrintChar& (0+255),w,b
  3579  0114CE  B4D8               	btfsc	status,2,c
  3580  0114D0  D023               	goto	l1047
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;Console.c: 351: {
  3584                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  3585  0114D2  0E01               	movlw	1
  3586  0114D4  6FFF               	movwf	_change& (0+255),b
  3587                           
  3588                           ; BSR set to: 0
  3589  0114D6  518E               	movf	_lBufferY& (0+255),w,b
  3590  0114D8  0D14               	mullw	20
  3591  0114DA  0EF0               	movlw	low _lBuffer
  3592  0114DC  6FC3               	movwf	??_Console_PrintChar& (0+255),b
  3593  0114DE  0E02               	movlw	high _lBuffer
  3594  0114E0  6FC4               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3595  0114E2  50F3               	movf	prodl,w,c
  3596  0114E4  27C3               	addwf	??_Console_PrintChar& (0+255),f,b
  3597  0114E6  50F4               	movf	prodh,w,c
  3598  0114E8  23C4               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  3599  0114EA  518F               	movf	_lBufferX& (0+255),w,b
  3600  0114EC  0D01               	mullw	1
  3601  0114EE  50F3               	movf	prodl,w,c
  3602  0114F0  25C3               	addwf	??_Console_PrintChar& (0+255),w,b
  3603  0114F2  6ED9               	movwf	fsr2l,c
  3604  0114F4  50F4               	movf	prodh,w,c
  3605  0114F6  21C4               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  3606  0114F8  6EDA               	movwf	fsr2h,c
  3607  0114FA  51C6               	movf	Console_PrintChar@pInput& (0+255),w,b
  3608  0114FC  0980               	iorlw	128
  3609  0114FE  6EDF               	movwf	indf2,c
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  3613  011500  518E               	movf	_lBufferY& (0+255),w,b
  3614  011502  0D02               	mullw	2
  3615  011504  0E8C               	movlw	low _lCBuffer
  3616  011506  24F3               	addwf	prodl,w,c
  3617  011508  6ED9               	movwf	fsr2l,c
  3618  01150A  0E02               	movlw	high _lCBuffer
  3619  01150C  20F4               	addwfc	prodh,w,c
  3620  01150E  6EDA               	movwf	fsr2h,c
  3621  011510  C0FD  FFDE         	movff	_gForecolour,postinc2
  3622  011514  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  3623  011518                     l1047:
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;Console.c: 354: }
  3627                           ;Console.c: 368: if(Console_IncrementCursor())
  3628                           
  3629                           ; BSR set to: 0
  3630  011518  EC75  F097         	call	_Console_IncrementCursor	;wreg free
  3631  01151C  0900               	iorlw	0
  3632  01151E  B4D8               	btfsc	status,2,c
  3633  011520  0012               	return	
  3634                           
  3635                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  3636  011522  C0C6  F0C3         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  3637  011526  0E7F               	movlw	127
  3638  011528  0100               	movlb	0	; () banked
  3639  01152A  17C3               	andwf	??_Console_PrintChar& (0+255),f,b
  3640  01152C  518E               	movf	_lBufferY& (0+255),w,b
  3641  01152E  0D14               	mullw	20
  3642  011530  0EF0               	movlw	low _lBuffer
  3643  011532  6FC4               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3644  011534  0E02               	movlw	high _lBuffer
  3645  011536  6FC5               	movwf	(??_Console_PrintChar+2)& (0+255),b
  3646  011538  50F3               	movf	prodl,w,c
  3647  01153A  27C4               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  3648  01153C  50F4               	movf	prodh,w,c
  3649  01153E  23C5               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  3650  011540  518F               	movf	_lBufferX& (0+255),w,b
  3651  011542  0D01               	mullw	1
  3652  011544  50F3               	movf	prodl,w,c
  3653  011546  25C4               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  3654  011548  6ED9               	movwf	fsr2l,c
  3655  01154A  50F4               	movf	prodh,w,c
  3656  01154C  21C5               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  3657  01154E  6EDA               	movwf	fsr2h,c
  3658  011550  50DF               	movf	indf2,w,c
  3659  011552  0B7F               	andlw	127
  3660  011554  19C3               	xorwf	??_Console_PrintChar& (0+255),w,b
  3661  011556  B4D8               	btfsc	status,2,c
  3662  011558  0012               	return	
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  3666  01155A  0E01               	movlw	1
  3667  01155C  6FFF               	movwf	_change& (0+255),b
  3668                           
  3669                           ; BSR set to: 0
  3670  01155E  518E               	movf	_lBufferY& (0+255),w,b
  3671  011560  0D14               	mullw	20
  3672  011562  0EF0               	movlw	low _lBuffer
  3673  011564  6FC3               	movwf	??_Console_PrintChar& (0+255),b
  3674  011566  0E02               	movlw	high _lBuffer
  3675  011568  6FC4               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3676  01156A  50F3               	movf	prodl,w,c
  3677  01156C  27C3               	addwf	??_Console_PrintChar& (0+255),f,b
  3678  01156E  50F4               	movf	prodh,w,c
  3679  011570  23C4               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  3680  011572  518F               	movf	_lBufferX& (0+255),w,b
  3681  011574  0D01               	mullw	1
  3682  011576  50F3               	movf	prodl,w,c
  3683  011578  25C3               	addwf	??_Console_PrintChar& (0+255),w,b
  3684  01157A  6ED9               	movwf	fsr2l,c
  3685  01157C  50F4               	movf	prodh,w,c
  3686  01157E  21C4               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  3687  011580  6EDA               	movwf	fsr2h,c
  3688  011582  51C6               	movf	Console_PrintChar@pInput& (0+255),w,b
  3689  011584  0980               	iorlw	128
  3690  011586  6EDF               	movwf	indf2,c
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;Console.c: 372: };
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;Console.c: 371: return;
  3697                           
  3698                           ; BSR set to: 0
  3699                           
  3700                           ; BSR set to: 0
  3701  011588  0012               	return	
  3702  01158A                     l1036:
  3703                           
  3704                           ; BSR set to: 0
  3705  01158A  0100               	movlb	0	; () banked
  3706  01158C  51C6               	movf	Console_PrintChar@pInput& (0+255),w,b
  3707                           
  3708                           ; Switch size 1, requested type "space"
  3709                           ; Number of cases is 8, Range of values is 7 to 35
  3710                           ; switch strategies available:
  3711                           ; Name         Instructions Cycles
  3712                           ; simple_byte           25    13 (average)
  3713                           ;	Chosen strategy is simple_byte
  3714  01158E  0A07               	xorlw	7	; case 7
  3715  011590  B4D8               	btfsc	status,2,c
  3716  011592  D77D               	goto	l1043
  3717  011594  0A0F               	xorlw	15	; case 8
  3718  011596  B4D8               	btfsc	status,2,c
  3719  011598  D771               	goto	l1040
  3720  01159A  0A01               	xorlw	1	; case 9
  3721  01159C  B4D8               	btfsc	status,2,c
  3722  01159E  D774               	goto	l1042
  3723  0115A0  0A03               	xorlw	3	; case 10
  3724  0115A2  B4D8               	btfsc	status,2,c
  3725  0115A4  D768               	goto	l1037
  3726  0115A6  0A06               	xorlw	6	; case 12
  3727  0115A8  B4D8               	btfsc	status,2,c
  3728  0115AA  D76B               	goto	l1041
  3729  0115AC  0A01               	xorlw	1	; case 13
  3730  0115AE  B4D8               	btfsc	status,2,c
  3731  0115B0  D762               	goto	l1037
  3732  0115B2  0A2D               	xorlw	45	; case 32
  3733  0115B4  B4D8               	btfsc	status,2,c
  3734  0115B6  D771               	goto	l1045
  3735  0115B8  0A03               	xorlw	3	; case 35
  3736  0115BA  B4D8               	btfsc	status,2,c
  3737  0115BC  D76B               	goto	l1044
  3738  0115BE  D76D               	goto	l1045
  3739  0115C0                     __end_of_Console_PrintChar:
  3740                           	opt stack 0
  3741                           tosu	equ	0xFFF
  3742                           tosh	equ	0xFFE
  3743                           tosl	equ	0xFFD
  3744                           pclath	equ	0xFFA
  3745                           tblptru	equ	0xFF8
  3746                           tblptrh	equ	0xFF7
  3747                           tblptrl	equ	0xFF6
  3748                           tablat	equ	0xFF5
  3749                           prodh	equ	0xFF4
  3750                           prodl	equ	0xFF3
  3751                           postinc0	equ	0xFEE
  3752                           wreg	equ	0xFE8
  3753                           postdec1	equ	0xFE5
  3754                           fsr1h	equ	0xFE2
  3755                           fsr1l	equ	0xFE1
  3756                           indf2	equ	0xFDF
  3757                           postinc2	equ	0xFDE
  3758                           postdec2	equ	0xFDD
  3759                           fsr2h	equ	0xFDA
  3760                           fsr2l	equ	0xFD9
  3761                           status	equ	0xFD8
  3762                           
  3763 ;; *************** function _Console_Tab *****************
  3764 ;; Defined at:
  3765 ;;		line 260 in file "Library/Console.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  c               1   15[BANK0 ] unsigned char 
  3770 ;;  i               1   14[BANK0 ] unsigned char 
  3771 ;;  t               1   13[BANK0 ] unsigned char 
  3772 ;; Return value:  Size  Location     Type
  3773 ;;                  1    wreg      void 
  3774 ;; Registers used:
  3775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3782 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3785 ;;Total ram usage:        8 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    9
  3788 ;; This function calls:
  3789 ;;		_Console_ClearCursor
  3790 ;;		_Console_IncrementCursor
  3791 ;;		___awdiv
  3792 ;; This function is called by:
  3793 ;;		_Console_PrintChar
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text4
  3798  01235A                     __ptext4:
  3799                           	opt stack 0
  3800  01235A                     _Console_Tab:
  3801                           	opt stack 18
  3802                           
  3803                           ;Console.c: 262: UINT8 i = 0;
  3804                           
  3805                           ;incstack = 0
  3806  01235A  0E00               	movlw	0
  3807  01235C  0100               	movlb	0	; () banked
  3808  01235E  6FC1               	movwf	Console_Tab@i& (0+255),b
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  3812  012360  0EFA               	movlw	250
  3813  012362  2443               	addwf	_gCursor,w,c
  3814  012364  6FB3               	movwf	___awdiv@dividend& (0+255),b
  3815  012366  0EFF               	movlw	255
  3816  012368  2044               	addwfc	_gCursor+1,w,c
  3817  01236A  6FB4               	movwf	(___awdiv@dividend+1)& (0+255),b
  3818  01236C  0E00               	movlw	0
  3819  01236E  6FB6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3820  012370  0E06               	movlw	6
  3821  012372  6FB5               	movwf	___awdiv@divisor& (0+255),b
  3822  012374  EC53  F093         	call	___awdiv	;wreg free
  3823  012378  0100               	movlb	0	; () banked
  3824  01237A  51B3               	movf	?___awdiv& (0+255),w,b
  3825  01237C  6FC2               	movwf	Console_Tab@c& (0+255),b
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;Console.c: 264: UINT8 t = c/4;
  3829  01237E  C0C2  F0B3         	movff	Console_Tab@c,___awdiv@dividend
  3830  012382  6BB4               	clrf	(___awdiv@dividend+1)& (0+255),b
  3831  012384  0E00               	movlw	0
  3832  012386  6FB6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3833  012388  0E04               	movlw	4
  3834  01238A  6FB5               	movwf	___awdiv@divisor& (0+255),b
  3835  01238C  EC53  F093         	call	___awdiv	;wreg free
  3836  012390  0100               	movlb	0	; () banked
  3837  012392  51B3               	movf	?___awdiv& (0+255),w,b
  3838  012394  6FC0               	movwf	Console_Tab@t& (0+255),b
  3839                           
  3840                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  3841  012396  0E00               	movlw	0
  3842  012398  6FC1               	movwf	Console_Tab@i& (0+255),b
  3843  01239A  D006               	goto	l1009
  3844  01239C                     
  3845                           ; BSR set to: 0
  3846                           ;Console.c: 266: {
  3847                           ;Console.c: 267: Console_ClearCursor();
  3848                           
  3849                           ; BSR set to: 0
  3850  01239C  EC32  F09B         	call	_Console_ClearCursor	;wreg free
  3851                           
  3852                           ;Console.c: 268: Console_IncrementCursor();
  3853  0123A0  EC75  F097         	call	_Console_IncrementCursor	;wreg free
  3854  0123A4  0100               	movlb	0	; () banked
  3855  0123A6  2BC1               	incf	Console_Tab@i& (0+255),f,b
  3856  0123A8                     l1009:
  3857                           
  3858                           ; BSR set to: 0
  3859                           
  3860                           ; BSR set to: 0
  3861  0123A8  51C0               	movf	Console_Tab@t& (0+255),w,b
  3862  0123AA  0D04               	mullw	4
  3863  0123AC  1EF3               	comf	prodl,f,c
  3864  0123AE  1EF4               	comf	prodh,f,c
  3865  0123B0  4AF3               	infsnz	prodl,f,c
  3866  0123B2  2AF4               	incf	prodh,f,c
  3867  0123B4  51C2               	movf	Console_Tab@c& (0+255),w,b
  3868  0123B6  6FBB               	movwf	??_Console_Tab& (0+255),b
  3869  0123B8  6BBC               	clrf	(??_Console_Tab+1)& (0+255),b
  3870  0123BA  50F3               	movf	prodl,w,c
  3871  0123BC  27BB               	addwf	??_Console_Tab& (0+255),f,b
  3872  0123BE  50F4               	movf	prodh,w,c
  3873  0123C0  23BC               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3874  0123C2  1FBB               	comf	??_Console_Tab& (0+255),f,b
  3875  0123C4  1FBC               	comf	(??_Console_Tab+1)& (0+255),f,b
  3876  0123C6  4BBB               	infsnz	??_Console_Tab& (0+255),f,b
  3877  0123C8  2BBC               	incf	(??_Console_Tab+1)& (0+255),f,b
  3878  0123CA  0E04               	movlw	4
  3879  0123CC  27BB               	addwf	??_Console_Tab& (0+255),f,b
  3880  0123CE  0E00               	movlw	0
  3881  0123D0  23BC               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3882  0123D2  51C1               	movf	Console_Tab@i& (0+255),w,b
  3883  0123D4  6FBD               	movwf	(??_Console_Tab+2)& (0+255),b
  3884  0123D6  6BBE               	clrf	(??_Console_Tab+3)& (0+255),b
  3885  0123D8  51BB               	movf	??_Console_Tab& (0+255),w,b
  3886  0123DA  5DBD               	subwf	(??_Console_Tab+2)& (0+255),w,b
  3887  0123DC  51BE               	movf	(??_Console_Tab+3)& (0+255),w,b
  3888  0123DE  0A80               	xorlw	128
  3889  0123E0  6FBF               	movwf	(??_Console_Tab+4)& (0+255),b
  3890  0123E2  51BC               	movf	(??_Console_Tab+1)& (0+255),w,b
  3891  0123E4  0A80               	xorlw	128
  3892  0123E6  59BF               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  3893  0123E8  B0D8               	btfsc	status,0,c
  3894  0123EA  0012               	return	
  3895  0123EC  D7D7               	goto	l1010
  3896  0123EE                     __end_of_Console_Tab:
  3897                           	opt stack 0
  3898                           tosu	equ	0xFFF
  3899                           tosh	equ	0xFFE
  3900                           tosl	equ	0xFFD
  3901                           pclath	equ	0xFFA
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           postinc0	equ	0xFEE
  3909                           wreg	equ	0xFE8
  3910                           postdec1	equ	0xFE5
  3911                           fsr1h	equ	0xFE2
  3912                           fsr1l	equ	0xFE1
  3913                           indf2	equ	0xFDF
  3914                           postinc2	equ	0xFDE
  3915                           postdec2	equ	0xFDD
  3916                           fsr2h	equ	0xFDA
  3917                           fsr2l	equ	0xFD9
  3918                           status	equ	0xFD8
  3919                           
  3920 ;; *************** function ___awdiv *****************
  3921 ;; Defined at:
  3922 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  dividend        2    0[BANK0 ] int 
  3925 ;;  divisor         2    2[BANK0 ] int 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  quotient        2    6[BANK0 ] int 
  3928 ;;  sign            1    5[BANK0 ] unsigned char 
  3929 ;;  counter         1    4[BANK0 ] unsigned char 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  2    0[BANK0 ] int 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;Total ram usage:        8 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    7
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_Console_Tab
  3950 ;;		_ADCAverage
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text5
  3955  0126A6                     __ptext5:
  3956                           	opt stack 0
  3957  0126A6                     ___awdiv:
  3958                           	opt stack 19
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;incstack = 0
  3962  0126A6  0E00               	movlw	0
  3963  0126A8  0100               	movlb	0	; () banked
  3964  0126AA  6FB8               	movwf	___awdiv@sign& (0+255),b
  3965                           
  3966                           ; BSR set to: 0
  3967  0126AC  AFB6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3968  0126AE  D006               	goto	l2497
  3969                           
  3970                           ; BSR set to: 0
  3971  0126B0  6DB5               	negf	___awdiv@divisor& (0+255),b
  3972  0126B2  1FB6               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3973  0126B4  B0D8               	btfsc	status,0,c
  3974  0126B6  2BB6               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3975                           
  3976                           ; BSR set to: 0
  3977  0126B8  0E01               	movlw	1
  3978  0126BA  6FB8               	movwf	___awdiv@sign& (0+255),b
  3979  0126BC                     l2497:
  3980                           
  3981                           ; BSR set to: 0
  3982                           
  3983                           ; BSR set to: 0
  3984  0126BC  AFB4               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3985  0126BE  D006               	goto	l2498
  3986                           
  3987                           ; BSR set to: 0
  3988  0126C0  6DB3               	negf	___awdiv@dividend& (0+255),b
  3989  0126C2  1FB4               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3990  0126C4  B0D8               	btfsc	status,0,c
  3991  0126C6  2BB4               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3992                           
  3993                           ; BSR set to: 0
  3994  0126C8  0E01               	movlw	1
  3995  0126CA  1BB8               	xorwf	___awdiv@sign& (0+255),f,b
  3996  0126CC                     l2498:
  3997                           
  3998                           ; BSR set to: 0
  3999                           
  4000                           ; BSR set to: 0
  4001  0126CC  0E00               	movlw	0
  4002  0126CE  6FBA               	movwf	(___awdiv@quotient+1)& (0+255),b
  4003  0126D0  0E00               	movlw	0
  4004  0126D2  6FB9               	movwf	___awdiv@quotient& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007  0126D4  51B5               	movf	___awdiv@divisor& (0+255),w,b
  4008  0126D6  11B6               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4009  0126D8  B4D8               	btfsc	status,2,c
  4010  0126DA  D01C               	goto	l2505
  4011                           
  4012                           ; BSR set to: 0
  4013  0126DC  0E01               	movlw	1
  4014  0126DE  6FB7               	movwf	___awdiv@counter& (0+255),b
  4015  0126E0  D004               	goto	l2500
  4016  0126E2                     
  4017                           ; BSR set to: 0
  4018                           
  4019                           ; BSR set to: 0
  4020  0126E2  90D8               	bcf	status,0,c
  4021  0126E4  37B5               	rlcf	___awdiv@divisor& (0+255),f,b
  4022  0126E6  37B6               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4023  0126E8  2BB7               	incf	___awdiv@counter& (0+255),f,b
  4024  0126EA                     l2500:
  4025                           
  4026                           ; BSR set to: 0
  4027                           
  4028                           ; BSR set to: 0
  4029  0126EA  AFB6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4030  0126EC  D7FA               	goto	l2501
  4031  0126EE                     u8190:
  4032                           
  4033                           ; BSR set to: 0
  4034                           
  4035                           ; BSR set to: 0
  4036                           
  4037                           ; BSR set to: 0
  4038  0126EE  90D8               	bcf	status,0,c
  4039  0126F0  37B9               	rlcf	___awdiv@quotient& (0+255),f,b
  4040  0126F2  37BA               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4041                           
  4042                           ; BSR set to: 0
  4043  0126F4  51B5               	movf	___awdiv@divisor& (0+255),w,b
  4044  0126F6  5DB3               	subwf	___awdiv@dividend& (0+255),w,b
  4045  0126F8  51B6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4046  0126FA  59B4               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4047  0126FC  A0D8               	btfss	status,0,c
  4048  0126FE  D005               	goto	l2504
  4049                           
  4050                           ; BSR set to: 0
  4051  012700  51B5               	movf	___awdiv@divisor& (0+255),w,b
  4052  012702  5FB3               	subwf	___awdiv@dividend& (0+255),f,b
  4053  012704  51B6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4054  012706  5BB4               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4055                           
  4056                           ; BSR set to: 0
  4057  012708  81B9               	bsf	___awdiv@quotient& (0+255),0,b
  4058  01270A                     l2504:
  4059                           
  4060                           ; BSR set to: 0
  4061                           
  4062                           ; BSR set to: 0
  4063  01270A  90D8               	bcf	status,0,c
  4064  01270C  33B6               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4065  01270E  33B5               	rrcf	___awdiv@divisor& (0+255),f,b
  4066                           
  4067                           ; BSR set to: 0
  4068  012710  2FB7               	decfsz	___awdiv@counter& (0+255),f,b
  4069  012712  D7ED               	goto	u8190
  4070  012714                     l2505:
  4071                           
  4072                           ; BSR set to: 0
  4073                           
  4074                           ; BSR set to: 0
  4075                           
  4076                           ; BSR set to: 0
  4077  012714  51B8               	movf	___awdiv@sign& (0+255),w,b
  4078  012716  B4D8               	btfsc	status,2,c
  4079  012718  D004               	goto	l2506
  4080                           
  4081                           ; BSR set to: 0
  4082  01271A  6DB9               	negf	___awdiv@quotient& (0+255),b
  4083  01271C  1FBA               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4084  01271E  B0D8               	btfsc	status,0,c
  4085  012720  2BBA               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4086  012722                     l2506:
  4087                           
  4088                           ; BSR set to: 0
  4089                           
  4090                           ; BSR set to: 0
  4091  012722  C0B9  F0B3         	movff	___awdiv@quotient,?___awdiv
  4092  012726  C0BA  F0B4         	movff	___awdiv@quotient+1,?___awdiv+1
  4093  01272A  0012               	return	
  4094  01272C                     __end_of___awdiv:
  4095                           	opt stack 0
  4096                           tosu	equ	0xFFF
  4097                           tosh	equ	0xFFE
  4098                           tosl	equ	0xFFD
  4099                           pclath	equ	0xFFA
  4100                           tblptru	equ	0xFF8
  4101                           tblptrh	equ	0xFF7
  4102                           tblptrl	equ	0xFF6
  4103                           tablat	equ	0xFF5
  4104                           prodh	equ	0xFF4
  4105                           prodl	equ	0xFF3
  4106                           postinc0	equ	0xFEE
  4107                           wreg	equ	0xFE8
  4108                           postdec1	equ	0xFE5
  4109                           fsr1h	equ	0xFE2
  4110                           fsr1l	equ	0xFE1
  4111                           indf2	equ	0xFDF
  4112                           postinc2	equ	0xFDE
  4113                           postdec2	equ	0xFDD
  4114                           fsr2h	equ	0xFDA
  4115                           fsr2l	equ	0xFD9
  4116                           status	equ	0xFD8
  4117                           
  4118 ;; *************** function _Console_IncrementCursor *****************
  4119 ;; Defined at:
  4120 ;;		line 243 in file "Library/Console.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;		None
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      unsigned char 
  4127 ;; Registers used:
  4128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;Total ram usage:        2 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; Hardware stack levels required when called:    8
  4141 ;; This function calls:
  4142 ;;		_Console_FormFeed
  4143 ;;		_Console_NewLine
  4144 ;; This function is called by:
  4145 ;;		_Console_Tab
  4146 ;;		_Console_PrintChar
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text6
  4151  012EEA                     __ptext6:
  4152                           	opt stack 0
  4153  012EEA                     _Console_IncrementCursor:
  4154                           	opt stack 18
  4155                           
  4156                           ;Console.c: 246: lBufferX += 1;
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;incstack = 0
  4160  012EEA  0100               	movlb	0	; () banked
  4161  012EEC  2B8F               	incf	_lBufferX& (0+255),f,b
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;Console.c: 248: gCursor.x += 6;
  4165  012EEE  0E06               	movlw	6
  4166  012EF0  2643               	addwf	_gCursor,f,c
  4167  012EF2  0E00               	movlw	0
  4168  012EF4  2244               	addwfc	_gCursor+1,f,c
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  4172  012EF6  0E06               	movlw	6
  4173  012EF8  2443               	addwf	_gCursor,w,c
  4174  012EFA  6FB7               	movwf	??_Console_IncrementCursor& (0+255),b
  4175  012EFC  0E00               	movlw	0
  4176  012EFE  2044               	addwfc	_gCursor+1,w,c
  4177  012F00  6FB8               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4178  012F02  BFB8               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4179  012F04  D007               	goto	l1004
  4180  012F06  51B8               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4181  012F08  E103               	bnz	u8100
  4182  012F0A  0E80               	movlw	128
  4183  012F0C  5DB7               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4184  012F0E  B0D8               	btfsc	status,0,c
  4185  012F10                     u8100:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;Console.c: 250: Console_NewLine();
  4189  012F10  EC17  F094         	call	_Console_NewLine	;wreg free
  4190  012F14                     l1004:
  4191                           
  4192                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  4193  012F14  0E08               	movlw	8
  4194  012F16  2445               	addwf	_gCursor+2,w,c
  4195  012F18  0100               	movlb	0	; () banked
  4196  012F1A  6FB7               	movwf	??_Console_IncrementCursor& (0+255),b
  4197  012F1C  0E00               	movlw	0
  4198  012F1E  2046               	addwfc	_gCursor+3,w,c
  4199  012F20  6FB8               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4200  012F22  BFB8               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4201  012F24  D00A               	goto	l1005
  4202  012F26  51B8               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4203  012F28  E104               	bnz	u8110
  4204  012F2A  0E80               	movlw	128
  4205  012F2C  5DB7               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4206  012F2E  A0D8               	btfss	status,0,c
  4207  012F30  D004               	goto	l1005
  4208  012F32                     u8110:
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;Console.c: 252: {
  4212                           ;Console.c: 253: Console_FormFeed();
  4213  012F32  EC7C  F095         	call	_Console_FormFeed	;wreg free
  4214                           
  4215                           ;Console.c: 254: return 1;
  4216  012F36  0E01               	movlw	1
  4217  012F38  0012               	return	
  4218  012F3A                     l1005:
  4219                           
  4220                           ;Console.c: 255: }
  4221                           ;Console.c: 257: return 0;
  4222  012F3A  0E00               	movlw	0
  4223  012F3C  0012               	return	
  4224  012F3E                     __end_of_Console_IncrementCursor:
  4225                           	opt stack 0
  4226                           tosu	equ	0xFFF
  4227                           tosh	equ	0xFFE
  4228                           tosl	equ	0xFFD
  4229                           pclath	equ	0xFFA
  4230                           tblptru	equ	0xFF8
  4231                           tblptrh	equ	0xFF7
  4232                           tblptrl	equ	0xFF6
  4233                           tablat	equ	0xFF5
  4234                           prodh	equ	0xFF4
  4235                           prodl	equ	0xFF3
  4236                           postinc0	equ	0xFEE
  4237                           wreg	equ	0xFE8
  4238                           postdec1	equ	0xFE5
  4239                           fsr1h	equ	0xFE2
  4240                           fsr1l	equ	0xFE1
  4241                           indf2	equ	0xFDF
  4242                           postinc2	equ	0xFDE
  4243                           postdec2	equ	0xFDD
  4244                           fsr2h	equ	0xFDA
  4245                           fsr2l	equ	0xFD9
  4246                           status	equ	0xFD8
  4247                           
  4248 ;; *************** function _Console_NewLine *****************
  4249 ;; Defined at:
  4250 ;;		line 175 in file "Library/Console.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;		None
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;		None
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      void 
  4257 ;; Registers used:
  4258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;Total ram usage:        2 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    7
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_Console_IncrementCursor
  4275 ;;		_Console_PrintChar
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           	psect	text7
  4280  01282E                     __ptext7:
  4281                           	opt stack 0
  4282  01282E                     _Console_NewLine:
  4283                           	opt stack 18
  4284                           
  4285                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  4286                           
  4287                           ;incstack = 0
  4288  01282E  D02D               	goto	l983
  4289  012830                     
  4290                           ;Console.c: 179: {
  4291                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  4292  012830  0100               	movlb	0	; () banked
  4293  012832  518E               	movf	_lBufferY& (0+255),w,b
  4294  012834  0D14               	mullw	20
  4295  012836  0EF0               	movlw	low _lBuffer
  4296  012838  6FB3               	movwf	??_Console_NewLine& (0+255),b
  4297  01283A  0E02               	movlw	high _lBuffer
  4298  01283C  6FB4               	movwf	(??_Console_NewLine+1)& (0+255),b
  4299  01283E  50F3               	movf	prodl,w,c
  4300  012840  27B3               	addwf	??_Console_NewLine& (0+255),f,b
  4301  012842  50F4               	movf	prodh,w,c
  4302  012844  23B4               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4303  012846  518F               	movf	_lBufferX& (0+255),w,b
  4304  012848  0D01               	mullw	1
  4305  01284A  50F3               	movf	prodl,w,c
  4306  01284C  25B3               	addwf	??_Console_NewLine& (0+255),w,b
  4307  01284E  6ED9               	movwf	fsr2l,c
  4308  012850  50F4               	movf	prodh,w,c
  4309  012852  21B4               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4310  012854  6EDA               	movwf	fsr2h,c
  4311  012856  50DF               	movf	indf2,w,c
  4312  012858  B4D8               	btfsc	status,2,c
  4313  01285A  D016               	goto	l985
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  4317  01285C  0E01               	movlw	1
  4318  01285E  6FFF               	movwf	_change& (0+255),b
  4319                           
  4320                           ; BSR set to: 0
  4321  012860  518E               	movf	_lBufferY& (0+255),w,b
  4322  012862  0D14               	mullw	20
  4323  012864  0EF0               	movlw	low _lBuffer
  4324  012866  6FB3               	movwf	??_Console_NewLine& (0+255),b
  4325  012868  0E02               	movlw	high _lBuffer
  4326  01286A  6FB4               	movwf	(??_Console_NewLine+1)& (0+255),b
  4327  01286C  50F3               	movf	prodl,w,c
  4328  01286E  27B3               	addwf	??_Console_NewLine& (0+255),f,b
  4329  012870  50F4               	movf	prodh,w,c
  4330  012872  23B4               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4331  012874  518F               	movf	_lBufferX& (0+255),w,b
  4332  012876  0D01               	mullw	1
  4333  012878  50F3               	movf	prodl,w,c
  4334  01287A  25B3               	addwf	??_Console_NewLine& (0+255),w,b
  4335  01287C  6ED9               	movwf	fsr2l,c
  4336  01287E  50F4               	movf	prodh,w,c
  4337  012880  21B4               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4338  012882  6EDA               	movwf	fsr2h,c
  4339  012884  0E80               	movlw	128
  4340  012886  6EDF               	movwf	indf2,c
  4341  012888                     l985:
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;Console.c: 182: lBufferX ++;
  4345                           
  4346                           ; BSR set to: 0
  4347  012888  2B8F               	incf	_lBufferX& (0+255),f,b
  4348  01288A                     l983:
  4349                           
  4350                           ; BSR set to: 0
  4351  01288A  0E13               	movlw	19
  4352  01288C  0100               	movlb	0	; () banked
  4353  01288E  658F               	cpfsgt	_lBufferX& (0+255),b
  4354  012890  D7CF               	goto	l984
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;Console.c: 183: }
  4358                           ;Console.c: 185: lBufferX = 0;
  4359                           
  4360                           ; BSR set to: 0
  4361  012892  0E00               	movlw	0
  4362  012894  6F8F               	movwf	_lBufferX& (0+255),b
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;Console.c: 186: lBufferY ++;
  4366  012896  2B8E               	incf	_lBufferY& (0+255),f,b
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;Console.c: 188: gCursor.y += 8;
  4370  012898  0E08               	movlw	8
  4371  01289A  2645               	addwf	_gCursor+2,f,c
  4372  01289C  0E00               	movlw	0
  4373  01289E  2246               	addwfc	_gCursor+3,f,c
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;Console.c: 189: gCursor.x = 6;
  4377  0128A0  0E00               	movlw	0
  4378  0128A2  6E44               	movwf	_gCursor+1,c
  4379  0128A4  0E06               	movlw	6
  4380  0128A6  6E43               	movwf	_gCursor,c
  4381                           
  4382                           ; BSR set to: 0
  4383  0128A8  0012               	return		;funcret
  4384  0128AA                     __end_of_Console_NewLine:
  4385                           	opt stack 0
  4386                           tosu	equ	0xFFF
  4387                           tosh	equ	0xFFE
  4388                           tosl	equ	0xFFD
  4389                           pclath	equ	0xFFA
  4390                           tblptru	equ	0xFF8
  4391                           tblptrh	equ	0xFF7
  4392                           tblptrl	equ	0xFF6
  4393                           tablat	equ	0xFF5
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           postinc0	equ	0xFEE
  4397                           wreg	equ	0xFE8
  4398                           postdec1	equ	0xFE5
  4399                           fsr1h	equ	0xFE2
  4400                           fsr1l	equ	0xFE1
  4401                           indf2	equ	0xFDF
  4402                           postinc2	equ	0xFDE
  4403                           postdec2	equ	0xFDD
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function _Console_FormFeed *****************
  4409 ;; Defined at:
  4410 ;;		line 192 in file "Library/Console.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  y               1    3[BANK0 ] unsigned char 
  4415 ;;  x               1    2[BANK0 ] unsigned char 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;Total ram usage:        4 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    7
  4432 ;; This function calls:
  4433 ;;		Nothing
  4434 ;; This function is called by:
  4435 ;;		_Console_IncrementCursor
  4436 ;;		_Console_PrintChar
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text8
  4441  012AF8                     __ptext8:
  4442                           	opt stack 0
  4443  012AF8                     _Console_FormFeed:
  4444                           	opt stack 18
  4445                           
  4446                           ;Console.c: 195: lBufferX = 0;
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;incstack = 0
  4450  012AF8  0E00               	movlw	0
  4451  012AFA  0100               	movlb	0	; () banked
  4452  012AFC  6F8F               	movwf	_lBufferX& (0+255),b
  4453                           
  4454                           ;Console.c: 196: lBufferY = 0;
  4455  012AFE  0E00               	movlw	0
  4456  012B00  6F8E               	movwf	_lBufferY& (0+255),b
  4457                           
  4458                           ;Console.c: 197: UINT8 x, y;
  4459                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  4460  012B02  0E00               	movlw	0
  4461  012B04  6FB6               	movwf	Console_FormFeed@y& (0+255),b
  4462  012B06                     l11668:
  4463                           
  4464                           ; BSR set to: 0
  4465  012B06  0E0E               	movlw	14
  4466  012B08  65B6               	cpfsgt	Console_FormFeed@y& (0+255),b
  4467  012B0A  D001               	goto	l990
  4468  012B0C  D020               	goto	u7950
  4469  012B0E                     l990:
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  4473                           
  4474                           ; BSR set to: 0
  4475  012B0E  0E00               	movlw	0
  4476  012B10  6FB5               	movwf	Console_FormFeed@x& (0+255),b
  4477  012B12                     l11674:
  4478                           
  4479                           ; BSR set to: 0
  4480  012B12  0E13               	movlw	19
  4481  012B14  65B5               	cpfsgt	Console_FormFeed@x& (0+255),b
  4482  012B16  D001               	goto	l992
  4483  012B18  D018               	goto	u7940
  4484  012B1A                     l992:
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  4488                           
  4489                           ; BSR set to: 0
  4490  012B1A  0E01               	movlw	1
  4491  012B1C  6FFF               	movwf	_change& (0+255),b
  4492                           
  4493                           ; BSR set to: 0
  4494  012B1E  51B6               	movf	Console_FormFeed@y& (0+255),w,b
  4495  012B20  0D14               	mullw	20
  4496  012B22  0EF0               	movlw	low _lBuffer
  4497  012B24  6FB3               	movwf	??_Console_FormFeed& (0+255),b
  4498  012B26  0E02               	movlw	high _lBuffer
  4499  012B28  6FB4               	movwf	(??_Console_FormFeed+1)& (0+255),b
  4500  012B2A  50F3               	movf	prodl,w,c
  4501  012B2C  27B3               	addwf	??_Console_FormFeed& (0+255),f,b
  4502  012B2E  50F4               	movf	prodh,w,c
  4503  012B30  23B4               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  4504  012B32  51B5               	movf	Console_FormFeed@x& (0+255),w,b
  4505  012B34  0D01               	mullw	1
  4506  012B36  50F3               	movf	prodl,w,c
  4507  012B38  25B3               	addwf	??_Console_FormFeed& (0+255),w,b
  4508  012B3A  6ED9               	movwf	fsr2l,c
  4509  012B3C  50F4               	movf	prodh,w,c
  4510  012B3E  21B4               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  4511  012B40  6EDA               	movwf	fsr2h,c
  4512  012B42  0E80               	movlw	128
  4513  012B44  6EDF               	movwf	indf2,c
  4514                           
  4515                           ; BSR set to: 0
  4516  012B46  2BB5               	incf	Console_FormFeed@x& (0+255),f,b
  4517  012B48  D7E4               	goto	l11674
  4518  012B4A                     u7940:
  4519                           
  4520                           ; BSR set to: 0
  4521                           
  4522                           ; BSR set to: 0
  4523  012B4A  2BB6               	incf	Console_FormFeed@y& (0+255),f,b
  4524  012B4C  D7DC               	goto	l11668
  4525  012B4E                     u7950:
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;Console.c: 204: clearall = 1;
  4529                           
  4530                           ; BSR set to: 0
  4531  012B4E  0E01               	movlw	1
  4532  012B50  6F90               	movwf	_clearall& (0+255),b
  4533                           
  4534                           ;Console.c: 205: gCursor.x = 6;
  4535  012B52  0E00               	movlw	0
  4536  012B54  6E44               	movwf	_gCursor+1,c
  4537  012B56  0E06               	movlw	6
  4538  012B58  6E43               	movwf	_gCursor,c
  4539                           
  4540                           ;Console.c: 206: gCursor.y = 6;
  4541  012B5A  0E00               	movlw	0
  4542  012B5C  6E46               	movwf	_gCursor+3,c
  4543  012B5E  0E06               	movlw	6
  4544  012B60  6E45               	movwf	_gCursor+2,c
  4545                           
  4546                           ; BSR set to: 0
  4547  012B62  0012               	return		;funcret
  4548  012B64                     __end_of_Console_FormFeed:
  4549                           	opt stack 0
  4550                           tosu	equ	0xFFF
  4551                           tosh	equ	0xFFE
  4552                           tosl	equ	0xFFD
  4553                           pclath	equ	0xFFA
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           prodh	equ	0xFF4
  4559                           prodl	equ	0xFF3
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           postdec1	equ	0xFE5
  4563                           fsr1h	equ	0xFE2
  4564                           fsr1l	equ	0xFE1
  4565                           indf2	equ	0xFDF
  4566                           postinc2	equ	0xFDE
  4567                           postdec2	equ	0xFDD
  4568                           fsr2h	equ	0xFDA
  4569                           fsr2l	equ	0xFD9
  4570                           status	equ	0xFD8
  4571                           
  4572 ;; *************** function _Console_ResetCursor *****************
  4573 ;; Defined at:
  4574 ;;		line 297 in file "Library/Console.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;		None
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;		None
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      void 
  4581 ;; Registers used:
  4582 ;;		wreg, status,2
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;Total ram usage:        0 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    7
  4595 ;; This function calls:
  4596 ;;		Nothing
  4597 ;; This function is called by:
  4598 ;;		_Console_PrintChar
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text9
  4603  0138D0                     __ptext9:
  4604                           	opt stack 0
  4605  0138D0                     _Console_ResetCursor:
  4606                           	opt stack 20
  4607                           
  4608                           ;Console.c: 299: gCursor.x = 6;
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;incstack = 0
  4612  0138D0  0E00               	movlw	0
  4613  0138D2  6E44               	movwf	_gCursor+1,c
  4614  0138D4  0E06               	movlw	6
  4615  0138D6  6E43               	movwf	_gCursor,c
  4616                           
  4617                           ;Console.c: 300: gCursor.y = 6;
  4618  0138D8  0E00               	movlw	0
  4619  0138DA  6E46               	movwf	_gCursor+3,c
  4620  0138DC  0E06               	movlw	6
  4621  0138DE  6E45               	movwf	_gCursor+2,c
  4622                           
  4623                           ;Console.c: 303: lBufferX = 0;
  4624  0138E0  0E00               	movlw	0
  4625  0138E2  0100               	movlb	0	; () banked
  4626  0138E4  6F8F               	movwf	_lBufferX& (0+255),b
  4627                           
  4628                           ;Console.c: 304: lBufferY = 0;
  4629  0138E6  0E00               	movlw	0
  4630  0138E8  6F8E               	movwf	_lBufferY& (0+255),b
  4631                           
  4632                           ; BSR set to: 0
  4633  0138EA  0012               	return		;funcret
  4634  0138EC                     __end_of_Console_ResetCursor:
  4635                           	opt stack 0
  4636                           tosu	equ	0xFFF
  4637                           tosh	equ	0xFFE
  4638                           tosl	equ	0xFFD
  4639                           pclath	equ	0xFFA
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           postdec1	equ	0xFE5
  4649                           fsr1h	equ	0xFE2
  4650                           fsr1l	equ	0xFE1
  4651                           indf2	equ	0xFDF
  4652                           postinc2	equ	0xFDE
  4653                           postdec2	equ	0xFDD
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           
  4658 ;; *************** function _Console_Backspace *****************
  4659 ;; Defined at:
  4660 ;;		line 209 in file "Library/Console.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;		None
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;		None
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      void 
  4667 ;; Registers used:
  4668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;Total ram usage:        0 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    8
  4681 ;; This function calls:
  4682 ;;		_Console_ClearCursor
  4683 ;; This function is called by:
  4684 ;;		_Console_PrintChar
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text10
  4689  0130E0                     __ptext10:
  4690                           	opt stack 0
  4691  0130E0                     _Console_Backspace:
  4692                           	opt stack 19
  4693                           
  4694                           ;Console.c: 211: if (lBufferX > 0)
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;incstack = 0
  4698  0130E0  0100               	movlb	0	; () banked
  4699  0130E2  518F               	movf	_lBufferX& (0+255),w,b
  4700  0130E4  B4D8               	btfsc	status,2,c
  4701  0130E6  D006               	goto	l997
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;Console.c: 212: {
  4705                           ;Console.c: 213: gCursor.x -= 6;
  4706  0130E8  0EFA               	movlw	250
  4707  0130EA  2643               	addwf	_gCursor,f,c
  4708  0130EC  0EFF               	movlw	255
  4709  0130EE  2244               	addwfc	_gCursor+1,f,c
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;Console.c: 216: lBufferX --;
  4713  0130F0  078F               	decf	_lBufferX& (0+255),f,b
  4714                           
  4715                           ;Console.c: 218: }
  4716  0130F2  D01B               	goto	l1000
  4717  0130F4                     l997:
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;Console.c: 219: else if (lBufferY > 0)
  4721                           
  4722                           ; BSR set to: 0
  4723  0130F4  518E               	movf	_lBufferY& (0+255),w,b
  4724  0130F6  B4D8               	btfsc	status,2,c
  4725  0130F8  D00C               	goto	l999
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;Console.c: 220: {
  4729                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  4730  0130FA  0E00               	movlw	0
  4731  0130FC  6E44               	movwf	_gCursor+1,c
  4732  0130FE  0E72               	movlw	114
  4733  013100  6E43               	movwf	_gCursor,c
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;Console.c: 222: gCursor.y -= 8;
  4737  013102  0EF8               	movlw	248
  4738  013104  2645               	addwf	_gCursor+2,f,c
  4739  013106  0EFF               	movlw	255
  4740  013108  2246               	addwfc	_gCursor+3,f,c
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  4744  01310A  0E13               	movlw	19
  4745  01310C  6F8F               	movwf	_lBufferX& (0+255),b
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;Console.c: 226: lBufferY --;
  4749  01310E  078E               	decf	_lBufferY& (0+255),f,b
  4750                           
  4751                           ;Console.c: 228: }
  4752  013110  D00C               	goto	l1000
  4753  013112                     l999:
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;Console.c: 229: else
  4757                           ;Console.c: 230: {
  4758                           ;Console.c: 231: gCursor.x = 6;
  4759                           
  4760                           ; BSR set to: 0
  4761  013112  0E00               	movlw	0
  4762  013114  6E44               	movwf	_gCursor+1,c
  4763  013116  0E06               	movlw	6
  4764  013118  6E43               	movwf	_gCursor,c
  4765                           
  4766                           ;Console.c: 232: gCursor.y = 6;
  4767  01311A  0E00               	movlw	0
  4768  01311C  6E46               	movwf	_gCursor+3,c
  4769  01311E  0E06               	movlw	6
  4770  013120  6E45               	movwf	_gCursor+2,c
  4771                           
  4772                           ;Console.c: 235: lBufferX = 0;
  4773  013122  0E00               	movlw	0
  4774  013124  6F8F               	movwf	_lBufferX& (0+255),b
  4775                           
  4776                           ;Console.c: 236: lBufferY = 0;
  4777  013126  0E00               	movlw	0
  4778  013128  6F8E               	movwf	_lBufferY& (0+255),b
  4779  01312A                     l1000:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;Console.c: 238: }
  4783                           ;Console.c: 240: Console_ClearCursor();
  4784                           
  4785                           ; BSR set to: 0
  4786                           
  4787                           ; BSR set to: 0
  4788  01312A  EC32  F09B         	call	_Console_ClearCursor	;wreg free
  4789  01312E  0012               	return		;funcret
  4790  013130                     __end_of_Console_Backspace:
  4791                           	opt stack 0
  4792                           tosu	equ	0xFFF
  4793                           tosh	equ	0xFFE
  4794                           tosl	equ	0xFFD
  4795                           pclath	equ	0xFFA
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           postinc0	equ	0xFEE
  4803                           wreg	equ	0xFE8
  4804                           postdec1	equ	0xFE5
  4805                           fsr1h	equ	0xFE2
  4806                           fsr1l	equ	0xFE1
  4807                           indf2	equ	0xFDF
  4808                           postinc2	equ	0xFDE
  4809                           postdec2	equ	0xFDD
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function _Console_ClearCursor *****************
  4815 ;; Defined at:
  4816 ;;		line 308 in file "Library/Console.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;		None
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      void 
  4823 ;; Registers used:
  4824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;Total ram usage:        2 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    7
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_Console_Backspace
  4841 ;;		_Console_Tab
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text11
  4846  013664                     __ptext11:
  4847                           	opt stack 0
  4848  013664                     _Console_ClearCursor:
  4849                           	opt stack 19
  4850                           
  4851                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  4852                           
  4853                           ;incstack = 0
  4854  013664  0E01               	movlw	1
  4855  013666  0100               	movlb	0	; () banked
  4856  013668  6FFF               	movwf	_change& (0+255),b
  4857                           
  4858                           ; BSR set to: 0
  4859  01366A  518E               	movf	_lBufferY& (0+255),w,b
  4860  01366C  0D14               	mullw	20
  4861  01366E  0EF0               	movlw	low _lBuffer
  4862  013670  6FB3               	movwf	??_Console_ClearCursor& (0+255),b
  4863  013672  0E02               	movlw	high _lBuffer
  4864  013674  6FB4               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  4865  013676  50F3               	movf	prodl,w,c
  4866  013678  27B3               	addwf	??_Console_ClearCursor& (0+255),f,b
  4867  01367A  50F4               	movf	prodh,w,c
  4868  01367C  23B4               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  4869  01367E  518F               	movf	_lBufferX& (0+255),w,b
  4870  013680  0D01               	mullw	1
  4871  013682  50F3               	movf	prodl,w,c
  4872  013684  25B3               	addwf	??_Console_ClearCursor& (0+255),w,b
  4873  013686  6ED9               	movwf	fsr2l,c
  4874  013688  50F4               	movf	prodh,w,c
  4875  01368A  21B4               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  4876  01368C  6EDA               	movwf	fsr2h,c
  4877  01368E  0E80               	movlw	128
  4878  013690  6EDF               	movwf	indf2,c
  4879                           
  4880                           ; BSR set to: 0
  4881  013692  0012               	return		;funcret
  4882  013694                     __end_of_Console_ClearCursor:
  4883                           	opt stack 0
  4884                           tosu	equ	0xFFF
  4885                           tosh	equ	0xFFE
  4886                           tosl	equ	0xFFD
  4887                           pclath	equ	0xFFA
  4888                           tblptru	equ	0xFF8
  4889                           tblptrh	equ	0xFF7
  4890                           tblptrl	equ	0xFF6
  4891                           tablat	equ	0xFF5
  4892                           prodh	equ	0xFF4
  4893                           prodl	equ	0xFF3
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           postdec1	equ	0xFE5
  4897                           fsr1h	equ	0xFE2
  4898                           fsr1l	equ	0xFE1
  4899                           indf2	equ	0xFDF
  4900                           postinc2	equ	0xFDE
  4901                           postdec2	equ	0xFDD
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function _Robot_Init *****************
  4907 ;; Defined at:
  4908 ;;		line 227 in file "main.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  1    wreg      void 
  4915 ;; Registers used:
  4916 ;;		wreg, status,2, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;Total ram usage:        0 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    9
  4929 ;; This function calls:
  4930 ;;		_Robot_Stop
  4931 ;;		_UpdateDistance
  4932 ;;		_eusartSend
  4933 ;; This function is called by:
  4934 ;;		_main
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text12
  4939  0139CC                     __ptext12:
  4940                           	opt stack 0
  4941  0139CC                     _Robot_Init:
  4942                           	opt stack 21
  4943                           
  4944                           ;main.c: 228: eusartSend(128);
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;incstack = 0
  4948  0139CC  0E80               	movlw	128
  4949  0139CE  EC4E  F09D         	call	_eusartSend
  4950                           
  4951                           ;main.c: 229: eusartSend(132);
  4952  0139D2  0E84               	movlw	132
  4953  0139D4  EC4E  F09D         	call	_eusartSend
  4954                           
  4955                           ;main.c: 230: Robot_Stop();
  4956  0139D8  EC19  F09C         	call	_Robot_Stop	;wreg free
  4957                           
  4958                           ;main.c: 231: UpdateDistance();
  4959  0139DC  EC07  F09C         	call	_UpdateDistance	;wreg free
  4960  0139E0  0012               	return		;funcret
  4961  0139E2                     __end_of_Robot_Init:
  4962                           	opt stack 0
  4963                           tosu	equ	0xFFF
  4964                           tosh	equ	0xFFE
  4965                           tosl	equ	0xFFD
  4966                           pclath	equ	0xFFA
  4967                           tblptru	equ	0xFF8
  4968                           tblptrh	equ	0xFF7
  4969                           tblptrl	equ	0xFF6
  4970                           tablat	equ	0xFF5
  4971                           prodh	equ	0xFF4
  4972                           prodl	equ	0xFF3
  4973                           postinc0	equ	0xFEE
  4974                           wreg	equ	0xFE8
  4975                           postdec1	equ	0xFE5
  4976                           fsr1h	equ	0xFE2
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _UpdateDistance *****************
  4986 ;; Defined at:
  4987 ;;		line 175 in file "main.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  2  2161[None  ] int 
  4994 ;; Registers used:
  4995 ;;		wreg, status,2, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:        0 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    8
  5008 ;; This function calls:
  5009 ;;		_eusartRec
  5010 ;;		_eusartSend
  5011 ;; This function is called by:
  5012 ;;		_Robot_Init
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text13
  5017  01380E                     __ptext13:
  5018                           	opt stack 0
  5019  01380E                     _UpdateDistance:
  5020                           	opt stack 21
  5021                           
  5022                           ;main.c: 176: eusartSend(142);
  5023                           
  5024                           ;incstack = 0
  5025  01380E  0E8E               	movlw	142
  5026  013810  EC4E  F09D         	call	_eusartSend
  5027                           
  5028                           ;main.c: 177: eusartSend(19);
  5029  013814  0E13               	movlw	19
  5030  013816  EC4E  F09D         	call	_eusartSend
  5031                           
  5032                           ;main.c: 178: Current_Dist1 = eusartRec();
  5033  01381A  EC8D  F09D         	call	_eusartRec	;wreg free
  5034  01381E  0100               	movlb	0	; () banked
  5035  013820  6F88               	movwf	_Current_Dist1& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;main.c: 179: Current_Dist2 = eusartRec();
  5039  013822  EC8D  F09D         	call	_eusartRec	;wreg free
  5040  013826  6E33               	movwf	_Current_Dist2,c
  5041                           
  5042                           ;main.c: 181: Current_Dist = Current_Dist2;
  5043  013828  C033  F126         	movff	_Current_Dist2,_Current_Dist
  5044  01382C  0101               	movlb	1	; () banked
  5045  01382E  6B27               	clrf	(_Current_Dist+1)& (0+255),b
  5046  013830  0012               	return	
  5047  013832                     __end_of_UpdateDistance:
  5048                           	opt stack 0
  5049                           tosu	equ	0xFFF
  5050                           tosh	equ	0xFFE
  5051                           tosl	equ	0xFFD
  5052                           pclath	equ	0xFFA
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           postinc0	equ	0xFEE
  5060                           wreg	equ	0xFE8
  5061                           postdec1	equ	0xFE5
  5062                           fsr1h	equ	0xFE2
  5063                           fsr1l	equ	0xFE1
  5064                           indf2	equ	0xFDF
  5065                           postinc2	equ	0xFDE
  5066                           postdec2	equ	0xFDD
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _eusartRec *****************
  5072 ;; Defined at:
  5073 ;;		line 157 in file "main.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      unsigned char 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    7
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_UpdateDistance
  5098 ;;		_Get_Sensor_State
  5099 ;;		_Turn
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text14
  5104  013B1A                     __ptext14:
  5105                           	opt stack 0
  5106  013B1A                     _eusartRec:
  5107                           	opt stack 21
  5108                           
  5109                           ;main.c: 158: while (!PIR1bits.RC1IF) {}
  5110                           
  5111                           ; BSR set to: 1
  5112                           ;incstack = 0
  5113  013B1A  AA9E               	btfss	3998,5,c	;volatile
  5114  013B1C  D7FE               	goto	_eusartRec
  5115                           
  5116                           ;main.c: 159: return RCREG1;
  5117  013B1E  50AF               	movf	4015,w,c	;volatile
  5118  013B20  0012               	return	
  5119  013B22                     __end_of_eusartRec:
  5120                           	opt stack 0
  5121                           tosu	equ	0xFFF
  5122                           tosh	equ	0xFFE
  5123                           tosl	equ	0xFFD
  5124                           pclath	equ	0xFFA
  5125                           tblptru	equ	0xFF8
  5126                           tblptrh	equ	0xFF7
  5127                           tblptrl	equ	0xFF6
  5128                           tablat	equ	0xFF5
  5129                           prodh	equ	0xFF4
  5130                           prodl	equ	0xFF3
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           postdec1	equ	0xFE5
  5134                           fsr1h	equ	0xFE2
  5135                           fsr1l	equ	0xFE1
  5136                           indf2	equ	0xFDF
  5137                           postinc2	equ	0xFDE
  5138                           postdec2	equ	0xFDD
  5139                           fsr2h	equ	0xFDA
  5140                           fsr2l	equ	0xFD9
  5141                           status	equ	0xFD8
  5142                           
  5143 ;; *************** function _Robot_Stop *****************
  5144 ;; Defined at:
  5145 ;;		line 162 in file "main.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;		None
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;		None
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      void 
  5152 ;; Registers used:
  5153 ;;		wreg, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;Total ram usage:        0 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    8
  5166 ;; This function calls:
  5167 ;;		_eusartSend
  5168 ;; This function is called by:
  5169 ;;		_Robot_Init
  5170 ;;		_Turn
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           	psect	text15
  5175  013832                     __ptext15:
  5176                           	opt stack 0
  5177  013832                     _Robot_Stop:
  5178                           	opt stack 21
  5179                           
  5180                           ;main.c: 163: eusartSend(137);
  5181                           
  5182                           ;incstack = 0
  5183  013832  0E89               	movlw	137
  5184  013834  EC4E  F09D         	call	_eusartSend
  5185                           
  5186                           ;main.c: 164: eusartSend(0);
  5187  013838  0E00               	movlw	0
  5188  01383A  EC4E  F09D         	call	_eusartSend
  5189                           
  5190                           ;main.c: 165: eusartSend(0);
  5191  01383E  0E00               	movlw	0
  5192  013840  EC4E  F09D         	call	_eusartSend
  5193                           
  5194                           ;main.c: 166: eusartSend(0);
  5195  013844  0E00               	movlw	0
  5196  013846  EC4E  F09D         	call	_eusartSend
  5197                           
  5198                           ;main.c: 167: eusartSend(0);
  5199  01384A  0E00               	movlw	0
  5200  01384C  EC4E  F09D         	call	_eusartSend
  5201  013850  0012               	return		;funcret
  5202  013852                     __end_of_Robot_Stop:
  5203                           	opt stack 0
  5204                           tosu	equ	0xFFF
  5205                           tosh	equ	0xFFE
  5206                           tosl	equ	0xFFD
  5207                           pclath	equ	0xFFA
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           postdec1	equ	0xFE5
  5217                           fsr1h	equ	0xFE2
  5218                           fsr1l	equ	0xFE1
  5219                           indf2	equ	0xFDF
  5220                           postinc2	equ	0xFDE
  5221                           postdec2	equ	0xFDD
  5222                           fsr2h	equ	0xFDA
  5223                           fsr2l	equ	0xFD9
  5224                           status	equ	0xFD8
  5225                           
  5226 ;; *************** function _eusartSend *****************
  5227 ;; Defined at:
  5228 ;;		line 152 in file "main.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  sendChar        1    wreg     unsigned char 
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  sendChar        1    0[BANK0 ] unsigned char 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;                  1    wreg      void 
  5235 ;; Registers used:
  5236 ;;		wreg
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;Total ram usage:        1 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    7
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_Robot_Stop
  5253 ;;		_UpdateDistance
  5254 ;;		_Robot_Init
  5255 ;;		_Get_Sensor_State
  5256 ;;		_Drive
  5257 ;;		_Turn
  5258 ;;		_BangBang
  5259 ;;		_LEDOn
  5260 ;;		_LEDOff
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text16
  5265  013A9C                     __ptext16:
  5266                           	opt stack 0
  5267  013A9C                     _eusartSend:
  5268                           	opt stack 22
  5269                           
  5270                           ;incstack = 0
  5271                           ;eusartSend@sendChar stored from wreg
  5272  013A9C  0100               	movlb	0	; () banked
  5273  013A9E  6FB3               	movwf	eusartSend@sendChar& (0+255),b
  5274  013AA0                     
  5275                           ;main.c: 153: while (!TXSTA1bits.TRMT) {}
  5276  013AA0  A2AD               	btfss	4013,1,c	;volatile
  5277  013AA2  D7FE               	goto	l12592
  5278                           
  5279                           ;main.c: 154: TXREG1 = sendChar;
  5280  013AA4  C0B3  FFAE         	movff	eusartSend@sendChar,4014	;volatile
  5281  013AA8  0012               	return		;funcret
  5282  013AAA                     __end_of_eusartSend:
  5283                           	opt stack 0
  5284                           tosu	equ	0xFFF
  5285                           tosh	equ	0xFFE
  5286                           tosl	equ	0xFFD
  5287                           pclath	equ	0xFFA
  5288                           tblptru	equ	0xFF8
  5289                           tblptrh	equ	0xFF7
  5290                           tblptrl	equ	0xFF6
  5291                           tablat	equ	0xFF5
  5292                           prodh	equ	0xFF4
  5293                           prodl	equ	0xFF3
  5294                           postinc0	equ	0xFEE
  5295                           wreg	equ	0xFE8
  5296                           postdec1	equ	0xFE5
  5297                           fsr1h	equ	0xFE2
  5298                           fsr1l	equ	0xFE1
  5299                           indf2	equ	0xFDF
  5300                           postinc2	equ	0xFDE
  5301                           postdec2	equ	0xFDD
  5302                           fsr2h	equ	0xFDA
  5303                           fsr2l	equ	0xFD9
  5304                           status	equ	0xFD8
  5305                           
  5306 ;; *************** function _MXK_Init *****************
  5307 ;; Defined at:
  5308 ;;		line 33 in file "Library/MXK.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;		None
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      void 
  5315 ;; Registers used:
  5316 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;Total ram usage:        0 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:   16
  5329 ;; This function calls:
  5330 ;;		_LED_Init
  5331 ;;		_Port_Init
  5332 ;;		_Port_SetPin
  5333 ;;		_Port_SetPinType
  5334 ;;		_Port_SetQuadType
  5335 ;;		_Port_SetType
  5336 ;;		_delay_ms
  5337 ;; This function is called by:
  5338 ;;		_main
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           	psect	text17
  5343  01184E                     __ptext17:
  5344                           	opt stack 0
  5345  01184E                     _MXK_Init:
  5346                           	opt stack 14
  5347                           
  5348                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5349                           
  5350                           ;incstack = 0
  5351  01184E  0E01               	movlw	1
  5352  011850  6E4B               	movwf	_Bus_State,c
  5353                           
  5354                           ;MXK.c: 36: lQueue = (Function)0;
  5355  011852  0E00               	movlw	0
  5356  011854  0100               	movlb	0	; () banked
  5357  011856  6F63               	movwf	_lQueue& (0+255),b	;volatile
  5358  011858  0E00               	movlw	0
  5359  01185A  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
  5360  01185C  0E00               	movlw	0
  5361  01185E  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5365  011860  0EA4               	movlw	low _PortA
  5366  011862  0101               	movlb	1	; () banked
  5367  011864  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5368  011866  0E01               	movlw	high _PortA
  5369  011868  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5370  01186A  0E00               	movlw	0
  5371  01186C  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5372  01186E  EC03  F088         	call	_Port_Init	;wreg free
  5373                           
  5374                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5375  011872  0E9A               	movlw	low _PortB
  5376  011874  0101               	movlb	1	; () banked
  5377  011876  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5378  011878  0E01               	movlw	high _PortB
  5379  01187A  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5380  01187C  0E01               	movlw	1
  5381  01187E  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5382  011880  EC03  F088         	call	_Port_Init	;wreg free
  5383                           
  5384                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5385  011884  0EA5               	movlw	low _PortC
  5386  011886  0101               	movlb	1	; () banked
  5387  011888  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5388  01188A  0E00               	movlw	high _PortC
  5389  01188C  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5390  01188E  0E02               	movlw	2
  5391  011890  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5392  011892  EC03  F088         	call	_Port_Init	;wreg free
  5393                           
  5394                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5395  011896  0E9B               	movlw	low _PortD
  5396  011898  0101               	movlb	1	; () banked
  5397  01189A  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5398  01189C  0E00               	movlw	high _PortD
  5399  01189E  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5400  0118A0  0E03               	movlw	3
  5401  0118A2  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5402  0118A4  EC03  F088         	call	_Port_Init	;wreg free
  5403                           
  5404                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5405  0118A8  0E91               	movlw	low _PortE
  5406  0118AA  0101               	movlb	1	; () banked
  5407  0118AC  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5408  0118AE  0E00               	movlw	high _PortE
  5409  0118B0  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5410  0118B2  0E04               	movlw	4
  5411  0118B4  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5412  0118B6  EC03  F088         	call	_Port_Init	;wreg free
  5413                           
  5414                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5415  0118BA  0EAE               	movlw	low _PortF
  5416  0118BC  0101               	movlb	1	; () banked
  5417  0118BE  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5418  0118C0  0E01               	movlw	high _PortF
  5419  0118C2  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5420  0118C4  0E05               	movlw	5
  5421  0118C6  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5422  0118C8  EC03  F088         	call	_Port_Init	;wreg free
  5423                           
  5424                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5425  0118CC  0E90               	movlw	low _PortG
  5426  0118CE  0101               	movlb	1	; () banked
  5427  0118D0  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5428  0118D2  0E01               	movlw	high _PortG
  5429  0118D4  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5430  0118D6  0E06               	movlw	6
  5431  0118D8  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5432  0118DA  EC03  F088         	call	_Port_Init	;wreg free
  5433                           
  5434                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5435  0118DE  0EAE               	movlw	low _PortF
  5436  0118E0  0100               	movlb	0	; () banked
  5437  0118E2  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  5438  0118E4  0E01               	movlw	high _PortF
  5439  0118E6  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5440  0118E8  0E05               	movlw	5
  5441  0118EA  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  5442  0118EC  0E00               	movlw	0
  5443  0118EE  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5444  0118F0  EC34  F087         	call	_Port_SetPinType	;wreg free
  5445                           
  5446                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5447  0118F4  0E9A               	movlw	low _PortB
  5448  0118F6  0100               	movlb	0	; () banked
  5449  0118F8  6FE9               	movwf	Port_SetQuadType@pInput& (0+255),b
  5450  0118FA  0E01               	movlw	high _PortB
  5451  0118FC  6FEA               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5452  0118FE  0E00               	movlw	0
  5453  011900  6FEB               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5454  011902  0E00               	movlw	0
  5455  011904  6FEC               	movwf	Port_SetQuadType@pType& (0+255),b
  5456  011906  EC69  F084         	call	_Port_SetQuadType	;wreg free
  5457                           
  5458                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5459  01190A  0EAE               	movlw	low _PortF
  5460  01190C  0100               	movlb	0	; () banked
  5461  01190E  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  5462  011910  0E01               	movlw	high _PortF
  5463  011912  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5464  011914  0E06               	movlw	6
  5465  011916  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  5466  011918  0E03               	movlw	3
  5467  01191A  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5468  01191C  EC34  F087         	call	_Port_SetPinType	;wreg free
  5469                           
  5470                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5471  011920  0E90               	movlw	low _PortG
  5472  011922  0100               	movlb	0	; () banked
  5473  011924  6FED               	movwf	Port_SetType@pInput& (0+255),b
  5474  011926  0E01               	movlw	high _PortG
  5475  011928  6FEE               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5476  01192A  0E03               	movlw	3
  5477  01192C  6FEF               	movwf	Port_SetType@pType& (0+255),b
  5478  01192E  EC72  F085         	call	_Port_SetType	;wreg free
  5479                           
  5480                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5481  011932  0E90               	movlw	low _PortG
  5482  011934  0100               	movlb	0	; () banked
  5483  011936  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  5484  011938  0E01               	movlw	high _PortG
  5485  01193A  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5486  01193C  0E04               	movlw	4
  5487  01193E  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  5488  011940  0E00               	movlw	0
  5489  011942  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  5490  011944  EC61  F08F         	call	_Port_SetPin	;wreg free
  5491                           
  5492                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5493  011948  0EAE               	movlw	low _PortF
  5494  01194A  0100               	movlb	0	; () banked
  5495  01194C  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  5496  01194E  0E01               	movlw	high _PortF
  5497  011950  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5498  011952  0E06               	movlw	6
  5499  011954  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  5500  011956  0E01               	movlw	1
  5501  011958  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  5502  01195A  EC61  F08F         	call	_Port_SetPin	;wreg free
  5503                           
  5504                           ;MXK.c: 55: LED_Init(eLED1);
  5505  01195E  0E00               	movlw	0
  5506  011960  EC9F  F097         	call	_LED_Init
  5507                           
  5508                           ;MXK.c: 56: LED_Init(eLED2);
  5509  011964  0E01               	movlw	1
  5510  011966  EC9F  F097         	call	_LED_Init
  5511                           
  5512                           ;MXK.c: 58: PIR1 = 0;
  5513  01196A  0E00               	movlw	0
  5514  01196C  6E9E               	movwf	3998,c	;volatile
  5515                           
  5516                           ;MXK.c: 59: PIR2 = 0;
  5517  01196E  0E00               	movlw	0
  5518  011970  6EA1               	movwf	4001,c	;volatile
  5519                           
  5520                           ;MXK.c: 60: PIR3 = 0;
  5521  011972  0E00               	movlw	0
  5522  011974  6EA4               	movwf	4004,c	;volatile
  5523                           
  5524                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5525  011976  8E9B               	bsf	3995,7,c	;volatile
  5526                           
  5527                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5528  011978  8C9B               	bsf	3995,6,c	;volatile
  5529                           
  5530                           ;MXK.c: 66: delay_ms(100);
  5531  01197A  0E00               	movlw	0
  5532  01197C  0100               	movlb	0	; () banked
  5533  01197E  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  5534  011980  0E64               	movlw	100
  5535  011982  6FB3               	movwf	delay_ms@ms& (0+255),b
  5536  011984  EC47  F097         	call	_delay_ms	;wreg free
  5537                           
  5538                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5539  011988  8ED0               	bsf	4048,7,c	;volatile
  5540  01198A  0012               	return		;funcret
  5541  01198C                     __end_of_MXK_Init:
  5542                           	opt stack 0
  5543                           tosu	equ	0xFFF
  5544                           tosh	equ	0xFFE
  5545                           tosl	equ	0xFFD
  5546                           pclath	equ	0xFFA
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           postdec1	equ	0xFE5
  5556                           fsr1h	equ	0xFE2
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function _Port_Init *****************
  5566 ;; Defined at:
  5567 ;;		line 150 in file "Library/Port.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  pInput          2    0[BANK1 ] const PTR struct Port
  5570 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5571 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5572 ;;  pPort           1    2[BANK1 ] enum E6786
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  i               1    5[BANK1 ] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5584 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;Total ram usage:        6 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:   15
  5591 ;; This function calls:
  5592 ;;		_GetPortPORT
  5593 ;;		_GetPortProperties
  5594 ;;		_GetPortTRIS
  5595 ;;		_Port_Set
  5596 ;;		_Port_SetPinType
  5597 ;;		_Port_SetType
  5598 ;;		_Word_GetPair
  5599 ;; This function is called by:
  5600 ;;		_MXK_Init
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text18
  5605  011006                     __ptext18:
  5606                           	opt stack 0
  5607  011006                     _Port_Init:
  5608                           	opt stack 14
  5609                           
  5610                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5611                           
  5612                           ;incstack = 0
  5613  011006  0101               	movlb	1	; () banked
  5614  011008  51D9               	movf	Port_Init@pPort& (0+255),w,b
  5615  01100A  ECCB  F092         	call	_GetPortProperties
  5616  01100E  C1D7  FFD9         	movff	Port_Init@pInput,fsr2l
  5617  011012  C1D8  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5618  011016  0100               	movlb	0	; () banked
  5619  011018  C0B3  FFDE         	movff	?_GetPortProperties,postinc2
  5620  01101C  C0B4  FFDD         	movff	?_GetPortProperties+1,postdec2
  5621                           
  5622                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5623  011020  0101               	movlb	1	; () banked
  5624  011022  51D9               	movf	Port_Init@pPort& (0+255),w,b
  5625  011024  EC0F  F093         	call	_GetPortPORT
  5626  011028  0101               	movlb	1	; () banked
  5627  01102A  EE20 F006          	lfsr	2,6
  5628  01102E  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5629  011030  26D9               	addwf	fsr2l,f,c
  5630  011032  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5631  011034  22DA               	addwfc	fsr2h,f,c
  5632  011036  0100               	movlb	0	; () banked
  5633  011038  C0B3  FFDE         	movff	?_GetPortPORT,postinc2
  5634  01103C  C0B4  FFDD         	movff	?_GetPortPORT+1,postdec2
  5635                           
  5636                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5637  011040  0101               	movlb	1	; () banked
  5638  011042  51D9               	movf	Port_Init@pPort& (0+255),w,b
  5639  011044  EC0F  F093         	call	_GetPortPORT
  5640  011048  0101               	movlb	1	; () banked
  5641  01104A  EE20 F004          	lfsr	2,4
  5642  01104E  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5643  011050  26D9               	addwf	fsr2l,f,c
  5644  011052  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5645  011054  22DA               	addwfc	fsr2h,f,c
  5646  011056  0100               	movlb	0	; () banked
  5647  011058  C0B3  FFDE         	movff	?_GetPortPORT,postinc2
  5648  01105C  C0B4  FFDD         	movff	?_GetPortPORT+1,postdec2
  5649                           
  5650                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  5651  011060  0101               	movlb	1	; () banked
  5652  011062  51D9               	movf	Port_Init@pPort& (0+255),w,b
  5653  011064  EC87  F092         	call	_GetPortTRIS
  5654  011068  0101               	movlb	1	; () banked
  5655  01106A  EE20 F002          	lfsr	2,2
  5656  01106E  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5657  011070  26D9               	addwf	fsr2l,f,c
  5658  011072  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5659  011074  22DA               	addwfc	fsr2h,f,c
  5660  011076  0100               	movlb	0	; () banked
  5661  011078  C0B3  FFDE         	movff	?_GetPortTRIS,postinc2
  5662  01107C  C0B4  FFDD         	movff	?_GetPortTRIS+1,postdec2
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  5666  011080  0101               	movlb	1	; () banked
  5667  011082  EE20 F004          	lfsr	2,4
  5668  011086  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5669  011088  26D9               	addwf	fsr2l,f,c
  5670  01108A  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5671  01108C  22DA               	addwfc	fsr2h,f,c
  5672  01108E  CFDE F1DA          	movff	postinc2,??_Port_Init
  5673  011092  CFDD F1DB          	movff	postdec2,??_Port_Init+1
  5674  011096  C1DA  FFD9         	movff	??_Port_Init,fsr2l
  5675  01109A  C1DB  FFDA         	movff	??_Port_Init+1,fsr2h
  5676  01109E  0E00               	movlw	0
  5677  0110A0  6EDF               	movwf	indf2,c
  5678                           
  5679                           ; BSR set to: 1
  5680                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  5681  0110A2  EE20 F002          	lfsr	2,2
  5682  0110A6  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5683  0110A8  26D9               	addwf	fsr2l,f,c
  5684  0110AA  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5685  0110AC  22DA               	addwfc	fsr2h,f,c
  5686  0110AE  CFDE F1DA          	movff	postinc2,??_Port_Init
  5687  0110B2  CFDD F1DB          	movff	postdec2,??_Port_Init+1
  5688  0110B6  C1DA  FFD9         	movff	??_Port_Init,fsr2l
  5689  0110BA  C1DB  FFDA         	movff	??_Port_Init+1,fsr2h
  5690  0110BE  0EFF               	movlw	255
  5691  0110C0  6EDF               	movwf	indf2,c
  5692                           
  5693                           ; BSR set to: 1
  5694                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  5695  0110C2  C1D7  F0ED         	movff	Port_Init@pInput,Port_SetType@pInput
  5696  0110C6  C1D8  F0EE         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  5697  0110CA  0E00               	movlw	0
  5698  0110CC  0100               	movlb	0	; () banked
  5699  0110CE  6FEF               	movwf	Port_SetType@pType& (0+255),b
  5700  0110D0  EC72  F085         	call	_Port_SetType	;wreg free
  5701                           
  5702                           ;Port.c: 166: UINT8 i;
  5703                           ;Port.c: 167: for (i=0; i<8; i++)
  5704  0110D4  0E00               	movlw	0
  5705  0110D6  0101               	movlb	1	; () banked
  5706  0110D8  6FDC               	movwf	Port_Init@i& (0+255),b
  5707  0110DA                     l12792:
  5708                           
  5709                           ; BSR set to: 1
  5710  0110DA  0E07               	movlw	7
  5711  0110DC  65DC               	cpfsgt	Port_Init@i& (0+255),b
  5712  0110DE  D031               	goto	l403
  5713  0110E0  D04B               	goto	u8910
  5714  0110E2                     
  5715                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  5716                           
  5717                           ; BSR set to: 1
  5718  0110E2  C1D7  F0D9         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5719  0110E6  C1D8  F0DA         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5720  0110EA  C1DC  F0DB         	movff	Port_Init@i,Port_SetPinType@pPin
  5721  0110EE  0E03               	movlw	3
  5722  0110F0  0100               	movlb	0	; () banked
  5723  0110F2  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5724  0110F4  EC34  F087         	call	_Port_SetPinType	;wreg free
  5725                           
  5726                           ;Port.c: 173: break;
  5727  0110F8  D03C               	goto	l405
  5728  0110FA                     
  5729                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  5730  0110FA  C1D7  F0D9         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5731  0110FE  C1D8  F0DA         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5732  011102  C1DC  F0DB         	movff	Port_Init@i,Port_SetPinType@pPin
  5733  011106  0E02               	movlw	2
  5734  011108  0100               	movlb	0	; () banked
  5735  01110A  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5736  01110C  EC34  F087         	call	_Port_SetPinType	;wreg free
  5737                           
  5738                           ;Port.c: 176: break;
  5739  011110  D030               	goto	l405
  5740  011112                     
  5741                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  5742  011112  C1D7  F0D9         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5743  011116  C1D8  F0DA         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5744  01111A  C1DC  F0DB         	movff	Port_Init@i,Port_SetPinType@pPin
  5745  01111E  0E01               	movlw	1
  5746  011120  0100               	movlb	0	; () banked
  5747  011122  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5748  011124  EC34  F087         	call	_Port_SetPinType	;wreg free
  5749                           
  5750                           ;Port.c: 179: break;
  5751  011128  D024               	goto	l405
  5752  01112A                     
  5753                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  5754  01112A  C1D7  F0D9         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5755  01112E  C1D8  F0DA         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5756  011132  C1DC  F0DB         	movff	Port_Init@i,Port_SetPinType@pPin
  5757  011136  0E00               	movlw	0
  5758  011138  0100               	movlb	0	; () banked
  5759  01113A  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5760  01113C  EC34  F087         	call	_Port_SetPinType	;wreg free
  5761                           
  5762                           ;Port.c: 183: }
  5763                           
  5764                           ;Port.c: 182: break;
  5765  011140  D018               	goto	l405
  5766  011142                     l403:
  5767  011142  C1D7  FFD9         	movff	Port_Init@pInput,fsr2l
  5768  011146  C1D8  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5769  01114A  CFDE F0BF          	movff	postinc2,Word_GetPair@pInput
  5770  01114E  CFDD F0C0          	movff	postdec2,Word_GetPair@pInput+1
  5771  011152  C1DC  F0C1         	movff	Port_Init@i,Word_GetPair@pPair
  5772  011156  EC19  F09B         	call	_Word_GetPair	;wreg free
  5773                           
  5774                           ; Switch size 1, requested type "space"
  5775                           ; Number of cases is 4, Range of values is 0 to 3
  5776                           ; switch strategies available:
  5777                           ; Name         Instructions Cycles
  5778                           ; simple_byte           13     7 (average)
  5779                           ;	Chosen strategy is simple_byte
  5780  01115A  0A00               	xorlw	0	; case 0
  5781  01115C  B4D8               	btfsc	status,2,c
  5782  01115E  D7C1               	goto	l404
  5783  011160  0A01               	xorlw	1	; case 1
  5784  011162  B4D8               	btfsc	status,2,c
  5785  011164  D7D6               	goto	l407
  5786  011166  0A03               	xorlw	3	; case 2
  5787  011168  B4D8               	btfsc	status,2,c
  5788  01116A  D7C7               	goto	l406
  5789  01116C  0A01               	xorlw	1	; case 3
  5790  01116E  B4D8               	btfsc	status,2,c
  5791  011170  D7DC               	goto	l408
  5792  011172                     l405:
  5793  011172  0101               	movlb	1	; () banked
  5794  011174  2BDC               	incf	Port_Init@i& (0+255),f,b
  5795  011176  D7B1               	goto	l12792
  5796  011178                     u8910:
  5797                           
  5798                           ; BSR set to: 1
  5799                           ;Port.c: 184: }
  5800                           ;Port.c: 185: Port_Set(pInput, 0x00);
  5801                           
  5802                           ; BSR set to: 1
  5803  011178  C1D7  F0C2         	movff	Port_Init@pInput,Port_Set@pInput
  5804  01117C  C1D8  F0C3         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  5805  011180  0E00               	movlw	0
  5806  011182  0100               	movlb	0	; () banked
  5807  011184  6FC4               	movwf	Port_Set@pValue& (0+255),b
  5808  011186  ECD2  F081         	call	_Port_Set	;wreg free
  5809  01118A  0012               	return		;funcret
  5810  01118C                     __end_of_Port_Init:
  5811                           	opt stack 0
  5812                           tosu	equ	0xFFF
  5813                           tosh	equ	0xFFE
  5814                           tosl	equ	0xFFD
  5815                           pclath	equ	0xFFA
  5816                           tblptru	equ	0xFF8
  5817                           tblptrh	equ	0xFF7
  5818                           tblptrl	equ	0xFF6
  5819                           tablat	equ	0xFF5
  5820                           prodh	equ	0xFF4
  5821                           prodl	equ	0xFF3
  5822                           postinc0	equ	0xFEE
  5823                           wreg	equ	0xFE8
  5824                           postdec1	equ	0xFE5
  5825                           fsr1h	equ	0xFE2
  5826                           fsr1l	equ	0xFE1
  5827                           indf2	equ	0xFDF
  5828                           postinc2	equ	0xFDE
  5829                           postdec2	equ	0xFDD
  5830                           fsr2h	equ	0xFDA
  5831                           fsr2l	equ	0xFD9
  5832                           status	equ	0xFD8
  5833                           
  5834 ;; *************** function _Port_SetType *****************
  5835 ;; Defined at:
  5836 ;;		line 513 in file "Library/Port.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  5839 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5840 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5841 ;;  pType           1   60[BANK0 ] enum E6795
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;  Output          1   63[BANK0 ] enum E6475
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      enum E6475
  5846 ;; Registers used:
  5847 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5853 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;Total ram usage:        6 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:   14
  5860 ;; This function calls:
  5861 ;;		_Port_CheckPortType
  5862 ;;		_Word_SetPair
  5863 ;; This function is called by:
  5864 ;;		_Port_Init
  5865 ;;		_MXK_Init
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text19
  5870  010AE4                     __ptext19:
  5871                           	opt stack 0
  5872  010AE4                     _Port_SetType:
  5873                           	opt stack 15
  5874                           
  5875                           ;Port.c: 515: ePinError Output = ePinErrorState;
  5876                           
  5877                           ;incstack = 0
  5878  010AE4  0E05               	movlw	5
  5879  010AE6  0100               	movlb	0	; () banked
  5880  010AE8  6FF2               	movwf	Port_SetType@Output& (0+255),b
  5881                           
  5882                           ;Port.c: 517: switch (pType)
  5883  010AEA  D06E               	goto	l509
  5884  010AEC                     
  5885                           ; BSR set to: 0
  5886                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  5887                           
  5888                           ; BSR set to: 0
  5889  010AEC  EE20 F002          	lfsr	2,2
  5890  010AF0  51ED               	movf	Port_SetType@pInput& (0+255),w,b
  5891  010AF2  26D9               	addwf	fsr2l,f,c
  5892  010AF4  51EE               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5893  010AF6  22DA               	addwfc	fsr2h,f,c
  5894  010AF8  CFDE F0F0          	movff	postinc2,??_Port_SetType
  5895  010AFC  CFDD F0F1          	movff	postdec2,??_Port_SetType+1
  5896  010B00  C0F0  FFD9         	movff	??_Port_SetType,fsr2l
  5897  010B04  C0F1  FFDA         	movff	??_Port_SetType+1,fsr2h
  5898  010B08  0EFF               	movlw	255
  5899  010B0A  D05C               	goto	L3
  5900  010B0C                     
  5901                           ; BSR set to: 0
  5902                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  5903                           
  5904                           ; BSR set to: 0
  5905  010B0C  C0ED  F0E9         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5906  010B10  C0EE  F0EA         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5907  010B14  0E01               	movlw	1
  5908  010B16  6FEB               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5909  010B18  ECBD  F099         	call	_Port_CheckPortType	;wreg free
  5910  010B1C  0100               	movlb	0	; () banked
  5911  010B1E  6FF2               	movwf	Port_SetType@Output& (0+255),b
  5912  010B20  51F2               	movf	Port_SetType@Output& (0+255),w,b
  5913  010B22  A4D8               	btfss	status,2,c
  5914  010B24  0012               	return	
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;Port.c: 527: {
  5918                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  5919  010B26  EE20 F002          	lfsr	2,2
  5920  010B2A  51ED               	movf	Port_SetType@pInput& (0+255),w,b
  5921  010B2C  26D9               	addwf	fsr2l,f,c
  5922  010B2E  51EE               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5923  010B30  22DA               	addwfc	fsr2h,f,c
  5924  010B32  CFDE F0F0          	movff	postinc2,??_Port_SetType
  5925  010B36  CFDD F0F1          	movff	postdec2,??_Port_SetType+1
  5926  010B3A  C0F0  FFD9         	movff	??_Port_SetType,fsr2l
  5927  010B3E  C0F1  FFDA         	movff	??_Port_SetType+1,fsr2h
  5928  010B42  0E00               	movlw	0
  5929  010B44  6EDF               	movwf	indf2,c
  5930                           
  5931                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  5932  010B46  EE20 F004          	lfsr	2,4
  5933  010B4A  D02F               	goto	L10
  5934  010B4C                     
  5935                           ; BSR set to: 0
  5936                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  5937                           
  5938                           ; BSR set to: 0
  5939  010B4C  C0ED  F0E9         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5940  010B50  C0EE  F0EA         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5941  010B54  0E02               	movlw	2
  5942  010B56  6FEB               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5943  010B58  ECBD  F099         	call	_Port_CheckPortType	;wreg free
  5944  010B5C  0100               	movlb	0	; () banked
  5945  010B5E  6FF2               	movwf	Port_SetType@Output& (0+255),b
  5946  010B60  51F2               	movf	Port_SetType@Output& (0+255),w,b
  5947  010B62  A4D8               	btfss	status,2,c
  5948  010B64  0012               	return	
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;Port.c: 538: {
  5952                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  5953  010B66  EE20 F002          	lfsr	2,2
  5954  010B6A  51ED               	movf	Port_SetType@pInput& (0+255),w,b
  5955  010B6C  26D9               	addwf	fsr2l,f,c
  5956  010B6E  51EE               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5957  010B70  22DA               	addwfc	fsr2h,f,c
  5958  010B72  CFDE F0F0          	movff	postinc2,??_Port_SetType
  5959  010B76  CFDD F0F1          	movff	postdec2,??_Port_SetType+1
  5960  010B7A  C0F0  FFD9         	movff	??_Port_SetType,fsr2l
  5961  010B7E  C0F1  FFDA         	movff	??_Port_SetType+1,fsr2h
  5962  010B82  0EFF               	movlw	255
  5963  010B84  6EDF               	movwf	indf2,c
  5964                           
  5965                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  5966  010B86  EE20 F004          	lfsr	2,4
  5967  010B8A  D7B2               	goto	L4
  5968  010B8C                     
  5969                           ; BSR set to: 0
  5970                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  5971                           
  5972                           ; BSR set to: 0
  5973  010B8C  C0ED  F0E9         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5974  010B90  C0EE  F0EA         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5975  010B94  0E00               	movlw	0
  5976  010B96  6FEB               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5977  010B98  ECBD  F099         	call	_Port_CheckPortType	;wreg free
  5978  010B9C  0100               	movlb	0	; () banked
  5979  010B9E  6FF2               	movwf	Port_SetType@Output& (0+255),b
  5980  010BA0  51F2               	movf	Port_SetType@Output& (0+255),w,b
  5981  010BA2  A4D8               	btfss	status,2,c
  5982  010BA4  0012               	return	
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;Port.c: 549: {
  5986                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  5987  010BA6  EE20 F002          	lfsr	2,2
  5988  010BAA                     L10:
  5989  010BAA  51ED               	movf	Port_SetType@pInput& (0+255),w,b
  5990  010BAC  26D9               	addwf	fsr2l,f,c
  5991  010BAE  51EE               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5992  010BB0  22DA               	addwfc	fsr2h,f,c
  5993  010BB2  CFDE F0F0          	movff	postinc2,??_Port_SetType
  5994  010BB6  CFDD F0F1          	movff	postdec2,??_Port_SetType+1
  5995  010BBA  C0F0  FFD9         	movff	??_Port_SetType,fsr2l
  5996  010BBE  C0F1  FFDA         	movff	??_Port_SetType+1,fsr2h
  5997  010BC2  0E00               	movlw	0
  5998  010BC4                     L3:
  5999  010BC4  6EDF               	movwf	indf2,c
  6000                           
  6001                           ;Port.c: 552: }
  6002  010BC6  D00D               	goto	l511
  6003  010BC8                     l509:
  6004                           
  6005                           ; BSR set to: 0
  6006                           
  6007                           ; BSR set to: 0
  6008  010BC8  51EF               	movf	Port_SetType@pType& (0+255),w,b
  6009                           
  6010                           ; Switch size 1, requested type "space"
  6011                           ; Number of cases is 4, Range of values is 0 to 3
  6012                           ; switch strategies available:
  6013                           ; Name         Instructions Cycles
  6014                           ; simple_byte           13     7 (average)
  6015                           ;	Chosen strategy is simple_byte
  6016  010BCA  0A00               	xorlw	0	; case 0
  6017  010BCC  B4D8               	btfsc	status,2,c
  6018  010BCE  D78E               	goto	l510
  6019  010BD0  0A01               	xorlw	1	; case 1
  6020  010BD2  B4D8               	btfsc	status,2,c
  6021  010BD4  D79B               	goto	l512
  6022  010BD6  0A03               	xorlw	3	; case 2
  6023  010BD8  B4D8               	btfsc	status,2,c
  6024  010BDA  D7B8               	goto	l516
  6025  010BDC  0A01               	xorlw	1	; case 3
  6026  010BDE  B4D8               	btfsc	status,2,c
  6027  010BE0  D7D5               	goto	l519
  6028  010BE2                     l511:
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  6032                           
  6033                           ; BSR set to: 0
  6034  010BE2  0E08               	movlw	8
  6035  010BE4  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6036  010BE6  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6037  010BE8  0E00               	movlw	0
  6038  010BEA  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6039  010BEC  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6040  010BEE  0E00               	movlw	0
  6041  010BF0  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6042  010BF2  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6043  010BF6  EC76  F09A         	call	_Word_SetPair	;wreg free
  6044                           
  6045                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  6046  010BFA  0E08               	movlw	8
  6047  010BFC  0100               	movlb	0	; () banked
  6048  010BFE  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6049  010C00  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6050  010C02  0E00               	movlw	0
  6051  010C04  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6052  010C06  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6053  010C08  0E01               	movlw	1
  6054  010C0A  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6055  010C0C  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6056  010C10  EC76  F09A         	call	_Word_SetPair	;wreg free
  6057                           
  6058                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  6059  010C14  0E08               	movlw	8
  6060  010C16  0100               	movlb	0	; () banked
  6061  010C18  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6062  010C1A  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6063  010C1C  0E00               	movlw	0
  6064  010C1E  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6065  010C20  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6066  010C22  0E02               	movlw	2
  6067  010C24  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6068  010C26  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6069  010C2A  EC76  F09A         	call	_Word_SetPair	;wreg free
  6070                           
  6071                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  6072  010C2E  0E08               	movlw	8
  6073  010C30  0100               	movlb	0	; () banked
  6074  010C32  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6075  010C34  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6076  010C36  0E00               	movlw	0
  6077  010C38  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6078  010C3A  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6079  010C3C  0E03               	movlw	3
  6080  010C3E  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6081  010C40  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6082  010C44  EC76  F09A         	call	_Word_SetPair	;wreg free
  6083                           
  6084                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  6085  010C48  0E08               	movlw	8
  6086  010C4A  0100               	movlb	0	; () banked
  6087  010C4C  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6088  010C4E  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6089  010C50  0E00               	movlw	0
  6090  010C52  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6091  010C54  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6092  010C56  0E04               	movlw	4
  6093  010C58  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6094  010C5A  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6095  010C5E  EC76  F09A         	call	_Word_SetPair	;wreg free
  6096                           
  6097                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  6098  010C62  0E08               	movlw	8
  6099  010C64  0100               	movlb	0	; () banked
  6100  010C66  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6101  010C68  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6102  010C6A  0E00               	movlw	0
  6103  010C6C  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6104  010C6E  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6105  010C70  0E05               	movlw	5
  6106  010C72  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6107  010C74  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6108  010C78  EC76  F09A         	call	_Word_SetPair	;wreg free
  6109                           
  6110                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  6111  010C7C  0E08               	movlw	8
  6112  010C7E  0100               	movlb	0	; () banked
  6113  010C80  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6114  010C82  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6115  010C84  0E00               	movlw	0
  6116  010C86  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6117  010C88  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6118  010C8A  0E06               	movlw	6
  6119  010C8C  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6120  010C8E  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6121  010C92  EC76  F09A         	call	_Word_SetPair	;wreg free
  6122                           
  6123                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  6124  010C96  0E08               	movlw	8
  6125  010C98  0100               	movlb	0	; () banked
  6126  010C9A  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6127  010C9C  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6128  010C9E  0E00               	movlw	0
  6129  010CA0  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6130  010CA2  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6131  010CA4  0E07               	movlw	7
  6132  010CA6  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6133  010CA8  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6134  010CAC  EC76  F09A         	call	_Word_SetPair	;wreg free
  6135  010CB0  0012               	return	
  6136  010CB2                     __end_of_Port_SetType:
  6137                           	opt stack 0
  6138                           tosu	equ	0xFFF
  6139                           tosh	equ	0xFFE
  6140                           tosl	equ	0xFFD
  6141                           pclath	equ	0xFFA
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           postdec1	equ	0xFE5
  6151                           fsr1h	equ	0xFE2
  6152                           fsr1l	equ	0xFE1
  6153                           indf2	equ	0xFDF
  6154                           postinc2	equ	0xFDE
  6155                           postdec2	equ	0xFDD
  6156                           fsr2h	equ	0xFDA
  6157                           fsr2l	equ	0xFD9
  6158                           status	equ	0xFD8
  6159                           
  6160 ;; *************** function _Port_CheckPortType *****************
  6161 ;; Defined at:
  6162 ;;		line 138 in file "Library/Port.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  6165 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6166 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6167 ;;  pDrive          1   56[BANK0 ] enum E6469
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;  Output          1   57[BANK0 ] enum E6475
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      enum E6475
  6172 ;; Registers used:
  6173 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6179 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;Total ram usage:        4 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:   13
  6186 ;; This function calls:
  6187 ;;		_Port_CheckQuadType
  6188 ;; This function is called by:
  6189 ;;		_Port_SetType
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text20
  6194  01337A                     __ptext20:
  6195                           	opt stack 0
  6196  01337A                     _Port_CheckPortType:
  6197                           	opt stack 15
  6198                           
  6199                           ;Port.c: 140: ePinError Output = ePinErrorState;
  6200                           
  6201                           ;incstack = 0
  6202  01337A  0E05               	movlw	5
  6203  01337C  0100               	movlb	0	; () banked
  6204  01337E  6FEC               	movwf	Port_CheckPortType@Output& (0+255),b
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  6208  013380  C0E9  F0E2         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6209  013384  C0EA  F0E3         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6210  013388  0E00               	movlw	0
  6211  01338A  6FE4               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6212  01338C  C0EB  F0E5         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6213  013390  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
  6214  013394  0100               	movlb	0	; () banked
  6215  013396  6FEC               	movwf	Port_CheckPortType@Output& (0+255),b
  6216  013398  51EC               	movf	Port_CheckPortType@Output& (0+255),w,b
  6217  01339A  A4D8               	btfss	status,2,c
  6218  01339C  D00C               	goto	l397
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6222  01339E  C0E9  F0E2         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6223  0133A2  C0EA  F0E3         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6224  0133A6  0E01               	movlw	1
  6225  0133A8  6FE4               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6226  0133AA  C0EB  F0E5         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6227  0133AE  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
  6228  0133B2  0100               	movlb	0	; () banked
  6229  0133B4  6FEC               	movwf	Port_CheckPortType@Output& (0+255),b
  6230  0133B6                     l397:
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;Port.c: 146: return Output;
  6234                           
  6235                           ; BSR set to: 0
  6236  0133B6  51EC               	movf	Port_CheckPortType@Output& (0+255),w,b
  6237  0133B8  0012               	return	
  6238  0133BA                     __end_of_Port_CheckPortType:
  6239                           	opt stack 0
  6240                           tosu	equ	0xFFF
  6241                           tosh	equ	0xFFE
  6242                           tosl	equ	0xFFD
  6243                           pclath	equ	0xFFA
  6244                           tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           prodh	equ	0xFF4
  6249                           prodl	equ	0xFF3
  6250                           postinc0	equ	0xFEE
  6251                           wreg	equ	0xFE8
  6252                           postdec1	equ	0xFE5
  6253                           fsr1h	equ	0xFE2
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _Port_Set *****************
  6263 ;; Defined at:
  6264 ;;		line 570 in file "Library/Port.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6267 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6268 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6269 ;;  pValue          1   17[BANK0 ] unsigned char 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6272 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6273 ;;  Type            1   38[BANK0 ] enum E6795
  6274 ;; Return value:  Size  Location     Type
  6275 ;;                  1    wreg      void 
  6276 ;; Registers used:
  6277 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6283 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;Total ram usage:       24 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:   10
  6290 ;; This function calls:
  6291 ;;		_Byte_SetByte
  6292 ;;		_Word_GetPair
  6293 ;; This function is called by:
  6294 ;;		_Port_Init
  6295 ;;		_Port_Toggle
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text21
  6300  0103A4                     __ptext21:
  6301                           	opt stack 0
  6302  0103A4                     _Port_Set:
  6303                           	opt stack 18
  6304                           
  6305                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;incstack = 0
  6309  0103A4  0E08               	movlw	8
  6310  0103A6  0100               	movlb	0	; () banked
  6311  0103A8  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6312  0103AA  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6313  0103AC  0E00               	movlw	0
  6314  0103AE  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6315  0103B0  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6316  0103B2  0E00               	movlw	0
  6317  0103B4  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6318  0103B6  EC19  F09B         	call	_Word_GetPair	;wreg free
  6319  0103BA  0100               	movlb	0	; () banked
  6320  0103BC  6FD9               	movwf	Port_Set@Type& (0+255),b
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6324  0103BE  51D9               	movf	Port_Set@Type& (0+255),w,b
  6325  0103C0  6FC5               	movwf	??_Port_Set& (0+255),b
  6326  0103C2  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6327  0103C4  0E0E               	movlw	14
  6328  0103C6                     u8505:
  6329  0103C6  90D8               	bcf	status,0,c
  6330  0103C8  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6331  0103CA  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6332  0103CC  2EE8               	decfsz	wreg,f,c
  6333  0103CE  D7FB               	goto	u8505
  6334  0103D0  51D9               	movf	Port_Set@Type& (0+255),w,b
  6335  0103D2  6FC7               	movwf	(??_Port_Set+2)& (0+255),b
  6336  0103D4  6BC8               	clrf	(??_Port_Set+3)& (0+255),b
  6337  0103D6  0E0C               	movlw	12
  6338  0103D8                     u8515:
  6339  0103D8  90D8               	bcf	status,0,c
  6340  0103DA  37C7               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6341  0103DC  37C8               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6342  0103DE  2EE8               	decfsz	wreg,f,c
  6343  0103E0  D7FB               	goto	u8515
  6344  0103E2  51D9               	movf	Port_Set@Type& (0+255),w,b
  6345  0103E4  6FC9               	movwf	(??_Port_Set+4)& (0+255),b
  6346  0103E6  6BCA               	clrf	(??_Port_Set+5)& (0+255),b
  6347  0103E8  0E0A               	movlw	10
  6348  0103EA                     u8525:
  6349  0103EA  90D8               	bcf	status,0,c
  6350  0103EC  37C9               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6351  0103EE  37CA               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6352  0103F0  2EE8               	decfsz	wreg,f,c
  6353  0103F2  D7FB               	goto	u8525
  6354  0103F4  51D9               	movf	Port_Set@Type& (0+255),w,b
  6355  0103F6  6FCC               	movwf	(??_Port_Set+7)& (0+255),b
  6356  0103F8  6BCB               	clrf	(??_Port_Set+6)& (0+255),b
  6357  0103FA  51D9               	movf	Port_Set@Type& (0+255),w,b
  6358  0103FC  6FCD               	movwf	(??_Port_Set+8)& (0+255),b
  6359  0103FE  6BCE               	clrf	(??_Port_Set+9)& (0+255),b
  6360  010400  0E06               	movlw	6
  6361  010402                     u8535:
  6362  010402  90D8               	bcf	status,0,c
  6363  010404  37CD               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6364  010406  37CE               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6365  010408  2EE8               	decfsz	wreg,f,c
  6366  01040A  D7FB               	goto	u8535
  6367  01040C  51D9               	movf	Port_Set@Type& (0+255),w,b
  6368  01040E  6FCF               	movwf	(??_Port_Set+10)& (0+255),b
  6369  010410  6BD0               	clrf	(??_Port_Set+11)& (0+255),b
  6370  010412  3BCF               	swapf	(??_Port_Set+10)& (0+255),f,b
  6371  010414  3BD0               	swapf	(??_Port_Set+11)& (0+255),f,b
  6372  010416  0EF0               	movlw	240
  6373  010418  17D0               	andwf	(??_Port_Set+11)& (0+255),f,b
  6374  01041A  51CF               	movf	(??_Port_Set+10)& (0+255),w,b
  6375  01041C  0B0F               	andlw	15
  6376  01041E  13D0               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6377  010420  0EF0               	movlw	240
  6378  010422  17CF               	andwf	(??_Port_Set+10)& (0+255),f,b
  6379  010424  51D9               	movf	Port_Set@Type& (0+255),w,b
  6380  010426  6FD1               	movwf	(??_Port_Set+12)& (0+255),b
  6381  010428  6BD2               	clrf	(??_Port_Set+13)& (0+255),b
  6382  01042A  90D8               	bcf	status,0,c
  6383  01042C  37D1               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6384  01042E  37D2               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6385  010430  90D8               	bcf	status,0,c
  6386  010432  37D1               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6387  010434  37D2               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6388  010436  51D9               	movf	Port_Set@Type& (0+255),w,b
  6389  010438  6FD3               	movwf	(??_Port_Set+14)& (0+255),b
  6390  01043A  6BD4               	clrf	(??_Port_Set+15)& (0+255),b
  6391  01043C  51D1               	movf	(??_Port_Set+12)& (0+255),w,b
  6392  01043E  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6393  010440  51D2               	movf	(??_Port_Set+13)& (0+255),w,b
  6394  010442  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6395  010444  51CF               	movf	(??_Port_Set+10)& (0+255),w,b
  6396  010446  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6397  010448  51D0               	movf	(??_Port_Set+11)& (0+255),w,b
  6398  01044A  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6399  01044C  51CD               	movf	(??_Port_Set+8)& (0+255),w,b
  6400  01044E  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6401  010450  51CE               	movf	(??_Port_Set+9)& (0+255),w,b
  6402  010452  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6403  010454  51CB               	movf	(??_Port_Set+6)& (0+255),w,b
  6404  010456  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6405  010458  51CC               	movf	(??_Port_Set+7)& (0+255),w,b
  6406  01045A  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6407  01045C  51C9               	movf	(??_Port_Set+4)& (0+255),w,b
  6408  01045E  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6409  010460  51CA               	movf	(??_Port_Set+5)& (0+255),w,b
  6410  010462  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6411  010464  51C7               	movf	(??_Port_Set+2)& (0+255),w,b
  6412  010466  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6413  010468  51C8               	movf	(??_Port_Set+3)& (0+255),w,b
  6414  01046A  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6415  01046C  51C5               	movf	??_Port_Set& (0+255),w,b
  6416  01046E  11D3               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6417  010470  6FD5               	movwf	Port_Set@TypeRequired& (0+255),b
  6418  010472  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6419  010474  11D4               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6420  010476  6FD6               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;Port.c: 574: UINT16 TypeActual = Type;
  6424  010478  C0D9  F0D7         	movff	Port_Set@Type,Port_Set@TypeActual
  6425  01047C  6BD8               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6429  01047E  0E08               	movlw	8
  6430  010480  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6431  010482  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6432  010484  0E00               	movlw	0
  6433  010486  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6434  010488  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6435  01048A  0E01               	movlw	1
  6436  01048C  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6437  01048E  EC19  F09B         	call	_Word_GetPair	;wreg free
  6438  010492  0100               	movlb	0	; () banked
  6439  010494  6FC5               	movwf	??_Port_Set& (0+255),b
  6440  010496  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6441  010498  90D8               	bcf	status,0,c
  6442  01049A  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6443  01049C  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6444  01049E  90D8               	bcf	status,0,c
  6445  0104A0  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6446  0104A2  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6447  0104A4  51C5               	movf	??_Port_Set& (0+255),w,b
  6448  0104A6  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6449  0104A8  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6450  0104AA  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6454  0104AC  0E08               	movlw	8
  6455  0104AE  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6456  0104B0  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6457  0104B2  0E00               	movlw	0
  6458  0104B4  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6459  0104B6  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6460  0104B8  0E02               	movlw	2
  6461  0104BA  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6462  0104BC  EC19  F09B         	call	_Word_GetPair	;wreg free
  6463  0104C0  0100               	movlb	0	; () banked
  6464  0104C2  6FC5               	movwf	??_Port_Set& (0+255),b
  6465  0104C4  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6466  0104C6  3BC5               	swapf	??_Port_Set& (0+255),f,b
  6467  0104C8  3BC6               	swapf	(??_Port_Set+1)& (0+255),f,b
  6468  0104CA  0EF0               	movlw	240
  6469  0104CC  17C6               	andwf	(??_Port_Set+1)& (0+255),f,b
  6470  0104CE  51C5               	movf	??_Port_Set& (0+255),w,b
  6471  0104D0  0B0F               	andlw	15
  6472  0104D2  13C6               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6473  0104D4  0EF0               	movlw	240
  6474  0104D6  17C5               	andwf	??_Port_Set& (0+255),f,b
  6475  0104D8  51C5               	movf	??_Port_Set& (0+255),w,b
  6476  0104DA  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6477  0104DC  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6478  0104DE  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6482  0104E0  0E08               	movlw	8
  6483  0104E2  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6484  0104E4  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6485  0104E6  0E00               	movlw	0
  6486  0104E8  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6487  0104EA  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6488  0104EC  0E03               	movlw	3
  6489  0104EE  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6490  0104F0  EC19  F09B         	call	_Word_GetPair	;wreg free
  6491  0104F4  0100               	movlb	0	; () banked
  6492  0104F6  6FC5               	movwf	??_Port_Set& (0+255),b
  6493  0104F8  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6494  0104FA  0E06               	movlw	6
  6495  0104FC                     u8545:
  6496  0104FC  90D8               	bcf	status,0,c
  6497  0104FE  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6498  010500  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6499  010502  2EE8               	decfsz	wreg,f,c
  6500  010504  D7FB               	goto	u8545
  6501  010506  51C5               	movf	??_Port_Set& (0+255),w,b
  6502  010508  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6503  01050A  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6504  01050C  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6508  01050E  0E08               	movlw	8
  6509  010510  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6510  010512  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6511  010514  0E00               	movlw	0
  6512  010516  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6513  010518  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6514  01051A  0E04               	movlw	4
  6515  01051C  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6516  01051E  EC19  F09B         	call	_Word_GetPair	;wreg free
  6517  010522  0100               	movlb	0	; () banked
  6518  010524  6FC5               	movwf	??_Port_Set& (0+255),b
  6519  010526  51C5               	movf	??_Port_Set& (0+255),w,b
  6520  010528  6FC7               	movwf	(??_Port_Set+2)& (0+255),b
  6521  01052A  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6522  01052C  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6523  01052E  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6524  010530  51C7               	movf	(??_Port_Set+2)& (0+255),w,b
  6525  010532  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  6529  010534  0E08               	movlw	8
  6530  010536  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6531  010538  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6532  01053A  0E00               	movlw	0
  6533  01053C  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6534  01053E  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6535  010540  0E05               	movlw	5
  6536  010542  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6537  010544  EC19  F09B         	call	_Word_GetPair	;wreg free
  6538  010548  0100               	movlb	0	; () banked
  6539  01054A  6FC5               	movwf	??_Port_Set& (0+255),b
  6540  01054C  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6541  01054E  0E0A               	movlw	10
  6542  010550                     u8555:
  6543  010550  90D8               	bcf	status,0,c
  6544  010552  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6545  010554  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6546  010556  2EE8               	decfsz	wreg,f,c
  6547  010558  D7FB               	goto	u8555
  6548  01055A  51C5               	movf	??_Port_Set& (0+255),w,b
  6549  01055C  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6550  01055E  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6551  010560  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  6555  010562  0E08               	movlw	8
  6556  010564  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6557  010566  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6558  010568  0E00               	movlw	0
  6559  01056A  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6560  01056C  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6561  01056E  0E06               	movlw	6
  6562  010570  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6563  010572  EC19  F09B         	call	_Word_GetPair	;wreg free
  6564  010576  0100               	movlb	0	; () banked
  6565  010578  6FC5               	movwf	??_Port_Set& (0+255),b
  6566  01057A  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6567  01057C  0E0C               	movlw	12
  6568  01057E                     u8565:
  6569  01057E  90D8               	bcf	status,0,c
  6570  010580  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6571  010582  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6572  010584  2EE8               	decfsz	wreg,f,c
  6573  010586  D7FB               	goto	u8565
  6574  010588  51C5               	movf	??_Port_Set& (0+255),w,b
  6575  01058A  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6576  01058C  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6577  01058E  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  6581  010590  0E08               	movlw	8
  6582  010592  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6583  010594  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6584  010596  0E00               	movlw	0
  6585  010598  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6586  01059A  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6587  01059C  0E07               	movlw	7
  6588  01059E  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6589  0105A0  EC19  F09B         	call	_Word_GetPair	;wreg free
  6590  0105A4  0100               	movlb	0	; () banked
  6591  0105A6  6FC5               	movwf	??_Port_Set& (0+255),b
  6592  0105A8  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6593  0105AA  0E0E               	movlw	14
  6594  0105AC                     u8575:
  6595  0105AC  90D8               	bcf	status,0,c
  6596  0105AE  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6597  0105B0  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6598  0105B2  2EE8               	decfsz	wreg,f,c
  6599  0105B4  D7FB               	goto	u8575
  6600  0105B6  51C5               	movf	??_Port_Set& (0+255),w,b
  6601  0105B8  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6602  0105BA  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6603  0105BC  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6604                           
  6605                           ;Port.c: 584: if (TypeRequired == TypeActual)
  6606  0105BE  51D7               	movf	Port_Set@TypeActual& (0+255),w,b
  6607  0105C0  19D5               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  6608  0105C2  E144               	bnz	l528
  6609  0105C4  51D8               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  6610  0105C6  19D6               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  6611  0105C8  A4D8               	btfss	status,2,c
  6612  0105CA  0012               	return	
  6613  0105CC  D030               	goto	l526
  6614  0105CE                     
  6615                           ; BSR set to: 0
  6616                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  6617                           
  6618                           ; BSR set to: 0
  6619  0105CE  EE20 F002          	lfsr	2,2
  6620  0105D2  51C2               	movf	Port_Set@pInput& (0+255),w,b
  6621  0105D4  26D9               	addwf	fsr2l,f,c
  6622  0105D6  51C3               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6623  0105D8  22DA               	addwfc	fsr2h,f,c
  6624  0105DA  CFDE F0B3          	movff	postinc2,Byte_SetByte@pInput
  6625  0105DE  CFDD F0B4          	movff	postdec2,Byte_SetByte@pInput+1
  6626  0105E2  C0C4  F0B5         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6627  0105E6  EC55  F09D         	call	_Byte_SetByte	;wreg free
  6628                           
  6629                           ;Port.c: 594: break;
  6630  0105EA  0012               	return	
  6631  0105EC                     
  6632                           ;Port.c: 597: pValue = ~pValue;
  6633  0105EC  0100               	movlb	0	; () banked
  6634  0105EE  1FC4               	comf	Port_Set@pValue& (0+255),f,b
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  6638  0105F0  EE20 F002          	lfsr	2,2
  6639  0105F4  51C2               	movf	Port_Set@pInput& (0+255),w,b
  6640  0105F6  26D9               	addwf	fsr2l,f,c
  6641  0105F8  51C3               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6642  0105FA  22DA               	addwfc	fsr2h,f,c
  6643  0105FC  CFDE F0B3          	movff	postinc2,Byte_SetByte@pInput
  6644  010600  CFDD F0B4          	movff	postdec2,Byte_SetByte@pInput+1
  6645  010604  C0C4  F0B5         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6646  010608  EC55  F09D         	call	_Byte_SetByte	;wreg free
  6647                           
  6648                           ;Port.c: 599: break;
  6649  01060C  0012               	return	
  6650  01060E                     
  6651                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  6652  01060E  0100               	movlb	0	; () banked
  6653  010610  EE20 F004          	lfsr	2,4
  6654  010614  51C2               	movf	Port_Set@pInput& (0+255),w,b
  6655  010616  26D9               	addwf	fsr2l,f,c
  6656  010618  51C3               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6657  01061A  22DA               	addwfc	fsr2h,f,c
  6658  01061C  CFDE F0B3          	movff	postinc2,Byte_SetByte@pInput
  6659  010620  CFDD F0B4          	movff	postdec2,Byte_SetByte@pInput+1
  6660  010624  C0C4  F0B5         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6661  010628  EC55  F09D         	call	_Byte_SetByte	;wreg free
  6662                           
  6663                           ;Port.c: 606: }
  6664                           
  6665                           ;Port.c: 605: break;
  6666                           
  6667                           ;Port.c: 604: default:
  6668                           
  6669                           ;Port.c: 603: break;
  6670  01062C  0012               	return	
  6671  01062E                     l526:
  6672  01062E  0100               	movlb	0	; () banked
  6673  010630  51D9               	movf	Port_Set@Type& (0+255),w,b
  6674                           
  6675                           ; Switch size 1, requested type "space"
  6676                           ; Number of cases is 4, Range of values is 0 to 3
  6677                           ; switch strategies available:
  6678                           ; Name         Instructions Cycles
  6679                           ; simple_byte           13     7 (average)
  6680                           ;	Chosen strategy is simple_byte
  6681  010632  0A00               	xorlw	0	; case 0
  6682  010634  B4D8               	btfsc	status,2,c
  6683  010636  0012               	return	
  6684  010638  0A01               	xorlw	1	; case 1
  6685  01063A  B4D8               	btfsc	status,2,c
  6686  01063C  D7C8               	goto	l529
  6687  01063E  0A03               	xorlw	3	; case 2
  6688  010640  B4D8               	btfsc	status,2,c
  6689  010642  D7D4               	goto	l531
  6690  010644  0A01               	xorlw	1	; case 3
  6691  010646  A4D8               	btfss	status,2,c
  6692                           
  6693                           ; BSR set to: 0
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;Port.c: 607: }
  6697  010648  0012               	return	
  6698  01064A  D7E1               	goto	l532
  6699  01064C                     l528:
  6700  01064C  0012               	return		;funcret
  6701  01064E                     __end_of_Port_Set:
  6702                           	opt stack 0
  6703                           tosu	equ	0xFFF
  6704                           tosh	equ	0xFFE
  6705                           tosl	equ	0xFFD
  6706                           pclath	equ	0xFFA
  6707                           tblptru	equ	0xFF8
  6708                           tblptrh	equ	0xFF7
  6709                           tblptrl	equ	0xFF6
  6710                           tablat	equ	0xFF5
  6711                           prodh	equ	0xFF4
  6712                           prodl	equ	0xFF3
  6713                           postinc0	equ	0xFEE
  6714                           wreg	equ	0xFE8
  6715                           postdec1	equ	0xFE5
  6716                           fsr1h	equ	0xFE2
  6717                           fsr1l	equ	0xFE1
  6718                           indf2	equ	0xFDF
  6719                           postinc2	equ	0xFDE
  6720                           postdec2	equ	0xFDD
  6721                           fsr2h	equ	0xFDA
  6722                           fsr2l	equ	0xFD9
  6723                           status	equ	0xFD8
  6724                           
  6725 ;; *************** function _Byte_SetByte *****************
  6726 ;; Defined at:
  6727 ;;		line 110 in file "Library/Types.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  6730 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  6731 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  6732 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  6733 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  6734 ;;		 -> NULL(0), 
  6735 ;;  pValue          1    2[BANK0 ] unsigned char 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		fsr2l, fsr2h
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6747 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;Total ram usage:        3 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    7
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_Port_Set
  6758 ;;		_I2C_Init
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           	psect	text22
  6763  013AAA                     __ptext22:
  6764                           	opt stack 0
  6765  013AAA                     _Byte_SetByte:
  6766                           	opt stack 20
  6767                           
  6768                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  6769                           
  6770                           ;incstack = 0
  6771  013AAA  C0B3  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  6772  013AAE  C0B4  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  6773  013AB2  C0B5  FFDF         	movff	Byte_SetByte@pValue,indf2
  6774  013AB6  0012               	return		;funcret
  6775  013AB8                     __end_of_Byte_SetByte:
  6776                           	opt stack 0
  6777                           tosu	equ	0xFFF
  6778                           tosh	equ	0xFFE
  6779                           tosl	equ	0xFFD
  6780                           pclath	equ	0xFFA
  6781                           tblptru	equ	0xFF8
  6782                           tblptrh	equ	0xFF7
  6783                           tblptrl	equ	0xFF6
  6784                           tablat	equ	0xFF5
  6785                           prodh	equ	0xFF4
  6786                           prodl	equ	0xFF3
  6787                           postinc0	equ	0xFEE
  6788                           wreg	equ	0xFE8
  6789                           postdec1	equ	0xFE5
  6790                           fsr1h	equ	0xFE2
  6791                           fsr1l	equ	0xFE1
  6792                           indf2	equ	0xFDF
  6793                           postinc2	equ	0xFDE
  6794                           postdec2	equ	0xFDD
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8
  6798                           
  6799 ;; *************** function _GetPortTRIS *****************
  6800 ;; Defined at:
  6801 ;;		line 67 in file "Library/Port.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  pInput          1    wreg     enum E6786
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;  pInput          1    2[BANK0 ] enum E6786
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  2    0[BANK0 ] PTR struct Byte
  6808 ;; Registers used:
  6809 ;;		wreg, status,2, status,0
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6815 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;Total ram usage:        3 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    7
  6822 ;; This function calls:
  6823 ;;		Nothing
  6824 ;; This function is called by:
  6825 ;;		_Port_Init
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text23
  6830  01250E                     __ptext23:
  6831                           	opt stack 0
  6832  01250E                     _GetPortTRIS:
  6833                           	opt stack 21
  6834                           
  6835                           ;incstack = 0
  6836                           ;GetPortTRIS@pInput stored from wreg
  6837  01250E  0100               	movlb	0	; () banked
  6838  012510  6FB5               	movwf	GetPortTRIS@pInput& (0+255),b
  6839                           
  6840                           ;Port.c: 69: switch (pInput)
  6841  012512  D029               	goto	l363
  6842  012514                     
  6843                           ;Port.c: 72: return (BytePtr)&TRISA;
  6844  012514  0E92               	movlw	146
  6845  012516  0100               	movlb	0	; () banked
  6846  012518  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6847  01251A  0E0F               	movlw	15
  6848  01251C  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6849                           
  6850                           ; BSR set to: 0
  6851  01251E  0012               	return	
  6852  012520                     
  6853                           ; BSR set to: 0
  6854                           ;Port.c: 74: return (BytePtr)&TRISB;
  6855                           
  6856                           ; BSR set to: 0
  6857  012520  0E93               	movlw	147
  6858  012522  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6859  012524  0E0F               	movlw	15
  6860  012526  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6861                           
  6862                           ; BSR set to: 0
  6863  012528  0012               	return	
  6864  01252A                     
  6865                           ; BSR set to: 0
  6866                           ;Port.c: 76: return (BytePtr)&TRISC;
  6867                           
  6868                           ; BSR set to: 0
  6869  01252A  0E94               	movlw	148
  6870  01252C  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6871  01252E  0E0F               	movlw	15
  6872  012530  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6873                           
  6874                           ; BSR set to: 0
  6875  012532  0012               	return	
  6876  012534                     
  6877                           ; BSR set to: 0
  6878                           ;Port.c: 78: return (BytePtr)&TRISD;
  6879                           
  6880                           ; BSR set to: 0
  6881  012534  0E95               	movlw	149
  6882  012536  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6883  012538  0E0F               	movlw	15
  6884  01253A  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6885                           
  6886                           ; BSR set to: 0
  6887  01253C  0012               	return	
  6888  01253E                     
  6889                           ; BSR set to: 0
  6890                           ;Port.c: 80: return (BytePtr)&TRISE;
  6891                           
  6892                           ; BSR set to: 0
  6893  01253E  0E96               	movlw	150
  6894  012540  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6895  012542  0E0F               	movlw	15
  6896  012544  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6897                           
  6898                           ; BSR set to: 0
  6899  012546  0012               	return	
  6900  012548                     
  6901                           ; BSR set to: 0
  6902                           ;Port.c: 82: return (BytePtr)&TRISF;
  6903                           
  6904                           ; BSR set to: 0
  6905  012548  0E97               	movlw	151
  6906  01254A  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6907  01254C  0E0F               	movlw	15
  6908  01254E  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6909                           
  6910                           ; BSR set to: 0
  6911  012550  0012               	return	
  6912  012552                     
  6913                           ; BSR set to: 0
  6914                           ;Port.c: 84: return (BytePtr)&TRISG;
  6915                           
  6916                           ; BSR set to: 0
  6917  012552  0E98               	movlw	152
  6918  012554  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6919  012556  0E0F               	movlw	15
  6920  012558  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6921                           
  6922                           ; BSR set to: 0
  6923  01255A  0012               	return	
  6924  01255C                     
  6925                           ; BSR set to: 0
  6926                           ;Port.c: 86: return (void*)0;
  6927                           
  6928                           ; BSR set to: 0
  6929  01255C  0E00               	movlw	0
  6930  01255E  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6931  012560  0E00               	movlw	0
  6932  012562  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;Port.c: 87: }
  6936                           
  6937                           ; BSR set to: 0
  6938  012564  0012               	return	
  6939  012566                     l363:
  6940                           
  6941                           ; BSR set to: 0
  6942  012566  0100               	movlb	0	; () banked
  6943  012568  51B5               	movf	GetPortTRIS@pInput& (0+255),w,b
  6944                           
  6945                           ; Switch size 1, requested type "space"
  6946                           ; Number of cases is 7, Range of values is 0 to 6
  6947                           ; switch strategies available:
  6948                           ; Name         Instructions Cycles
  6949                           ; simple_byte           22    12 (average)
  6950                           ;	Chosen strategy is simple_byte
  6951  01256A  0A00               	xorlw	0	; case 0
  6952  01256C  B4D8               	btfsc	status,2,c
  6953  01256E  D7D2               	goto	l364
  6954  012570  0A01               	xorlw	1	; case 1
  6955  012572  B4D8               	btfsc	status,2,c
  6956  012574  D7D5               	goto	l366
  6957  012576  0A03               	xorlw	3	; case 2
  6958  012578  B4D8               	btfsc	status,2,c
  6959  01257A  D7D7               	goto	l367
  6960  01257C  0A01               	xorlw	1	; case 3
  6961  01257E  B4D8               	btfsc	status,2,c
  6962  012580  D7D9               	goto	l368
  6963  012582  0A07               	xorlw	7	; case 4
  6964  012584  B4D8               	btfsc	status,2,c
  6965  012586  D7DB               	goto	l369
  6966  012588  0A01               	xorlw	1	; case 5
  6967  01258A  B4D8               	btfsc	status,2,c
  6968  01258C  D7DD               	goto	l370
  6969  01258E  0A03               	xorlw	3	; case 6
  6970  012590  B4D8               	btfsc	status,2,c
  6971  012592  D7DF               	goto	l371
  6972  012594  D7E3               	goto	l372
  6973  012596                     __end_of_GetPortTRIS:
  6974                           	opt stack 0
  6975                           tosu	equ	0xFFF
  6976                           tosh	equ	0xFFE
  6977                           tosl	equ	0xFFD
  6978                           pclath	equ	0xFFA
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           postinc0	equ	0xFEE
  6986                           wreg	equ	0xFE8
  6987                           postdec1	equ	0xFE5
  6988                           fsr1h	equ	0xFE2
  6989                           fsr1l	equ	0xFE1
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _GetPortProperties *****************
  6998 ;; Defined at:
  6999 ;;		line 21 in file "Library/Port.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  pInput          1    wreg     enum E6786
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  pInput          1    2[BANK0 ] enum E6786
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  2    0[BANK0 ] PTR struct PortProperty
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7013 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;Total ram usage:        3 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    7
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_Port_Init
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text24
  7028  012596                     __ptext24:
  7029                           	opt stack 0
  7030  012596                     _GetPortProperties:
  7031                           	opt stack 21
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;incstack = 0
  7035                           ;GetPortProperties@pInput stored from wreg
  7036  012596  0100               	movlb	0	; () banked
  7037  012598  6FB5               	movwf	GetPortProperties@pInput& (0+255),b
  7038                           
  7039                           ;Port.c: 23: switch (pInput)
  7040  01259A  D029               	goto	l337
  7041  01259C                     
  7042                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  7043  01259C  0E0F               	movlw	low _PortA_Property
  7044  01259E  0100               	movlb	0	; () banked
  7045  0125A0  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7046  0125A2  0EFF               	movlw	high _PortA_Property
  7047  0125A4  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7048                           
  7049                           ; BSR set to: 0
  7050  0125A6  0012               	return	
  7051  0125A8                     
  7052                           ; BSR set to: 0
  7053                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  7054                           
  7055                           ; BSR set to: 0
  7056  0125A8  0E0D               	movlw	low _PortB_Property
  7057  0125AA  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7058  0125AC  0EFF               	movlw	high _PortB_Property
  7059  0125AE  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7060                           
  7061                           ; BSR set to: 0
  7062  0125B0  0012               	return	
  7063  0125B2                     
  7064                           ; BSR set to: 0
  7065                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  7066                           
  7067                           ; BSR set to: 0
  7068  0125B2  0E0B               	movlw	low _PortC_Property
  7069  0125B4  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7070  0125B6  0EFF               	movlw	high _PortC_Property
  7071  0125B8  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7072                           
  7073                           ; BSR set to: 0
  7074  0125BA  0012               	return	
  7075  0125BC                     
  7076                           ; BSR set to: 0
  7077                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  7078                           
  7079                           ; BSR set to: 0
  7080  0125BC  0E09               	movlw	low _PortD_Property
  7081  0125BE  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7082  0125C0  0EFF               	movlw	high _PortD_Property
  7083  0125C2  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7084                           
  7085                           ; BSR set to: 0
  7086  0125C4  0012               	return	
  7087  0125C6                     
  7088                           ; BSR set to: 0
  7089                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  7090                           
  7091                           ; BSR set to: 0
  7092  0125C6  0E07               	movlw	low _PortE_Property
  7093  0125C8  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7094  0125CA  0EFF               	movlw	high _PortE_Property
  7095  0125CC  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7096                           
  7097                           ; BSR set to: 0
  7098  0125CE  0012               	return	
  7099  0125D0                     
  7100                           ; BSR set to: 0
  7101                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  7102                           
  7103                           ; BSR set to: 0
  7104  0125D0  0E05               	movlw	low _PortF_Property
  7105  0125D2  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7106  0125D4  0EFF               	movlw	high _PortF_Property
  7107  0125D6  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7108                           
  7109                           ; BSR set to: 0
  7110  0125D8  0012               	return	
  7111  0125DA                     
  7112                           ; BSR set to: 0
  7113                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  7114                           
  7115                           ; BSR set to: 0
  7116  0125DA  0E03               	movlw	low _PortG_Property
  7117  0125DC  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7118  0125DE  0EFF               	movlw	high _PortG_Property
  7119  0125E0  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7120                           
  7121                           ; BSR set to: 0
  7122  0125E2  0012               	return	
  7123  0125E4                     
  7124                           ; BSR set to: 0
  7125                           ;Port.c: 40: return (void*)0;
  7126                           
  7127                           ; BSR set to: 0
  7128  0125E4  0E00               	movlw	0
  7129  0125E6  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7130  0125E8  0E00               	movlw	0
  7131  0125EA  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;Port.c: 41: }
  7135                           
  7136                           ; BSR set to: 0
  7137  0125EC  0012               	return	
  7138  0125EE                     l337:
  7139                           
  7140                           ; BSR set to: 0
  7141  0125EE  0100               	movlb	0	; () banked
  7142  0125F0  51B5               	movf	GetPortProperties@pInput& (0+255),w,b
  7143                           
  7144                           ; Switch size 1, requested type "space"
  7145                           ; Number of cases is 7, Range of values is 0 to 6
  7146                           ; switch strategies available:
  7147                           ; Name         Instructions Cycles
  7148                           ; simple_byte           22    12 (average)
  7149                           ;	Chosen strategy is simple_byte
  7150  0125F2  0A00               	xorlw	0	; case 0
  7151  0125F4  B4D8               	btfsc	status,2,c
  7152  0125F6  D7D2               	goto	l338
  7153  0125F8  0A01               	xorlw	1	; case 1
  7154  0125FA  B4D8               	btfsc	status,2,c
  7155  0125FC  D7D5               	goto	l340
  7156  0125FE  0A03               	xorlw	3	; case 2
  7157  012600  B4D8               	btfsc	status,2,c
  7158  012602  D7D7               	goto	l341
  7159  012604  0A01               	xorlw	1	; case 3
  7160  012606  B4D8               	btfsc	status,2,c
  7161  012608  D7D9               	goto	l342
  7162  01260A  0A07               	xorlw	7	; case 4
  7163  01260C  B4D8               	btfsc	status,2,c
  7164  01260E  D7DB               	goto	l343
  7165  012610  0A01               	xorlw	1	; case 5
  7166  012612  B4D8               	btfsc	status,2,c
  7167  012614  D7DD               	goto	l344
  7168  012616  0A03               	xorlw	3	; case 6
  7169  012618  B4D8               	btfsc	status,2,c
  7170  01261A  D7DF               	goto	l345
  7171  01261C  D7E3               	goto	l346
  7172  01261E                     __end_of_GetPortProperties:
  7173                           	opt stack 0
  7174                           tosu	equ	0xFFF
  7175                           tosh	equ	0xFFE
  7176                           tosl	equ	0xFFD
  7177                           pclath	equ	0xFFA
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           postinc0	equ	0xFEE
  7185                           wreg	equ	0xFE8
  7186                           postdec1	equ	0xFE5
  7187                           fsr1h	equ	0xFE2
  7188                           fsr1l	equ	0xFE1
  7189                           indf2	equ	0xFDF
  7190                           postinc2	equ	0xFDE
  7191                           postdec2	equ	0xFDD
  7192                           fsr2h	equ	0xFDA
  7193                           fsr2l	equ	0xFD9
  7194                           status	equ	0xFD8
  7195                           
  7196 ;; *************** function _GetPortPORT *****************
  7197 ;; Defined at:
  7198 ;;		line 44 in file "Library/Port.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  pInput          1    wreg     enum E6786
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;  pInput          1    2[BANK0 ] enum E6786
  7203 ;; Return value:  Size  Location     Type
  7204 ;;                  2    0[BANK0 ] PTR struct Byte
  7205 ;; Registers used:
  7206 ;;		wreg, status,2, status,0
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7212 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;Total ram usage:        3 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; Hardware stack levels required when called:    7
  7219 ;; This function calls:
  7220 ;;		Nothing
  7221 ;; This function is called by:
  7222 ;;		_Port_Init
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           	psect	text25
  7227  01261E                     __ptext25:
  7228                           	opt stack 0
  7229  01261E                     _GetPortPORT:
  7230                           	opt stack 21
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;incstack = 0
  7234                           ;GetPortPORT@pInput stored from wreg
  7235  01261E  0100               	movlb	0	; () banked
  7236  012620  6FB5               	movwf	GetPortPORT@pInput& (0+255),b
  7237                           
  7238                           ;Port.c: 46: switch (pInput)
  7239  012622  D029               	goto	l350
  7240  012624                     
  7241                           ;Port.c: 49: return (BytePtr)&PORTA;
  7242  012624  0E80               	movlw	128
  7243  012626  0100               	movlb	0	; () banked
  7244  012628  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7245  01262A  0E0F               	movlw	15
  7246  01262C  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7247                           
  7248                           ; BSR set to: 0
  7249  01262E  0012               	return	
  7250  012630                     
  7251                           ; BSR set to: 0
  7252                           ;Port.c: 51: return (BytePtr)&PORTB;
  7253                           
  7254                           ; BSR set to: 0
  7255  012630  0E81               	movlw	129
  7256  012632  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7257  012634  0E0F               	movlw	15
  7258  012636  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7259                           
  7260                           ; BSR set to: 0
  7261  012638  0012               	return	
  7262  01263A                     
  7263                           ; BSR set to: 0
  7264                           ;Port.c: 53: return (BytePtr)&PORTC;
  7265                           
  7266                           ; BSR set to: 0
  7267  01263A  0E82               	movlw	130
  7268  01263C  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7269  01263E  0E0F               	movlw	15
  7270  012640  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7271                           
  7272                           ; BSR set to: 0
  7273  012642  0012               	return	
  7274  012644                     
  7275                           ; BSR set to: 0
  7276                           ;Port.c: 55: return (BytePtr)&PORTD;
  7277                           
  7278                           ; BSR set to: 0
  7279  012644  0E83               	movlw	131
  7280  012646  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7281  012648  0E0F               	movlw	15
  7282  01264A  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7283                           
  7284                           ; BSR set to: 0
  7285  01264C  0012               	return	
  7286  01264E                     
  7287                           ; BSR set to: 0
  7288                           ;Port.c: 57: return (BytePtr)&PORTE;
  7289                           
  7290                           ; BSR set to: 0
  7291  01264E  0E84               	movlw	132
  7292  012650  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7293  012652  0E0F               	movlw	15
  7294  012654  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7295                           
  7296                           ; BSR set to: 0
  7297  012656  0012               	return	
  7298  012658                     
  7299                           ; BSR set to: 0
  7300                           ;Port.c: 59: return (BytePtr)&PORTF;
  7301                           
  7302                           ; BSR set to: 0
  7303  012658  0E85               	movlw	133
  7304  01265A  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7305  01265C  0E0F               	movlw	15
  7306  01265E  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7307                           
  7308                           ; BSR set to: 0
  7309  012660  0012               	return	
  7310  012662                     
  7311                           ; BSR set to: 0
  7312                           ;Port.c: 61: return (BytePtr)&PORTG;
  7313                           
  7314                           ; BSR set to: 0
  7315  012662  0E86               	movlw	134
  7316  012664  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7317  012666  0E0F               	movlw	15
  7318  012668  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7319                           
  7320                           ; BSR set to: 0
  7321  01266A  0012               	return	
  7322  01266C                     
  7323                           ; BSR set to: 0
  7324                           ;Port.c: 63: return (void*)0;
  7325                           
  7326                           ; BSR set to: 0
  7327  01266C  0E00               	movlw	0
  7328  01266E  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7329  012670  0E00               	movlw	0
  7330  012672  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;Port.c: 64: }
  7334                           
  7335                           ; BSR set to: 0
  7336  012674  0012               	return	
  7337  012676                     l350:
  7338                           
  7339                           ; BSR set to: 0
  7340  012676  0100               	movlb	0	; () banked
  7341  012678  51B5               	movf	GetPortPORT@pInput& (0+255),w,b
  7342                           
  7343                           ; Switch size 1, requested type "space"
  7344                           ; Number of cases is 7, Range of values is 0 to 6
  7345                           ; switch strategies available:
  7346                           ; Name         Instructions Cycles
  7347                           ; simple_byte           22    12 (average)
  7348                           ;	Chosen strategy is simple_byte
  7349  01267A  0A00               	xorlw	0	; case 0
  7350  01267C  B4D8               	btfsc	status,2,c
  7351  01267E  D7D2               	goto	l351
  7352  012680  0A01               	xorlw	1	; case 1
  7353  012682  B4D8               	btfsc	status,2,c
  7354  012684  D7D5               	goto	l353
  7355  012686  0A03               	xorlw	3	; case 2
  7356  012688  B4D8               	btfsc	status,2,c
  7357  01268A  D7D7               	goto	l354
  7358  01268C  0A01               	xorlw	1	; case 3
  7359  01268E  B4D8               	btfsc	status,2,c
  7360  012690  D7D9               	goto	l355
  7361  012692  0A07               	xorlw	7	; case 4
  7362  012694  B4D8               	btfsc	status,2,c
  7363  012696  D7DB               	goto	l356
  7364  012698  0A01               	xorlw	1	; case 5
  7365  01269A  B4D8               	btfsc	status,2,c
  7366  01269C  D7DD               	goto	l357
  7367  01269E  0A03               	xorlw	3	; case 6
  7368  0126A0  B4D8               	btfsc	status,2,c
  7369  0126A2  D7DF               	goto	l358
  7370  0126A4  D7E3               	goto	l359
  7371  0126A6                     __end_of_GetPortPORT:
  7372                           	opt stack 0
  7373                           tosu	equ	0xFFF
  7374                           tosh	equ	0xFFE
  7375                           tosl	equ	0xFFD
  7376                           pclath	equ	0xFFA
  7377                           tblptru	equ	0xFF8
  7378                           tblptrh	equ	0xFF7
  7379                           tblptrl	equ	0xFF6
  7380                           tablat	equ	0xFF5
  7381                           prodh	equ	0xFF4
  7382                           prodl	equ	0xFF3
  7383                           postinc0	equ	0xFEE
  7384                           wreg	equ	0xFE8
  7385                           postdec1	equ	0xFE5
  7386                           fsr1h	equ	0xFE2
  7387                           fsr1l	equ	0xFE1
  7388                           indf2	equ	0xFDF
  7389                           postinc2	equ	0xFDE
  7390                           postdec2	equ	0xFDD
  7391                           fsr2h	equ	0xFDA
  7392                           fsr2l	equ	0xFD9
  7393                           status	equ	0xFD8
  7394                           
  7395 ;; *************** function _LED_Init *****************
  7396 ;; Defined at:
  7397 ;;		line 15 in file "Library/LED.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;  pLED            1    wreg     enum E6739
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;  pLED            1   45[BANK0 ] enum E6739
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  1    wreg      void 
  7404 ;; Registers used:
  7405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;Total ram usage:        1 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:   12
  7418 ;; This function calls:
  7419 ;;		_LED_Set
  7420 ;;		_Port_SetPinType
  7421 ;; This function is called by:
  7422 ;;		_MXK_Init
  7423 ;;		_main
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text26
  7428  012F3E                     __ptext26:
  7429                           	opt stack 0
  7430  012F3E                     _LED_Init:
  7431                           	opt stack 17
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;incstack = 0
  7435                           ;LED_Init@pLED stored from wreg
  7436  012F3E  0100               	movlb	0	; () banked
  7437  012F40  6FE0               	movwf	LED_Init@pLED& (0+255),b
  7438                           
  7439                           ;LED.c: 17: switch (pLED)
  7440  012F42  D018               	goto	l220
  7441  012F44                     
  7442                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  7443  012F44  0EA5               	movlw	low _PortC
  7444  012F46  0100               	movlb	0	; () banked
  7445  012F48  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  7446  012F4A  0E00               	movlw	high _PortC
  7447  012F4C  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7448  012F4E  0E00               	movlw	0
  7449  012F50  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  7450  012F52  0E03               	movlw	3
  7451  012F54  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  7452  012F56  EC34  F087         	call	_Port_SetPinType	;wreg free
  7453                           
  7454                           ;LED.c: 21: break;
  7455  012F5A  D014               	goto	l222
  7456  012F5C                     
  7457                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  7458  012F5C  0EA5               	movlw	low _PortC
  7459  012F5E  0100               	movlb	0	; () banked
  7460  012F60  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  7461  012F62  0E00               	movlw	high _PortC
  7462  012F64  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7463  012F66  0E01               	movlw	1
  7464  012F68  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  7465  012F6A  0E03               	movlw	3
  7466  012F6C  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  7467  012F6E  EC34  F087         	call	_Port_SetPinType	;wreg free
  7468                           
  7469                           ;LED.c: 25: }
  7470                           
  7471                           ;LED.c: 24: break;
  7472  012F72  D008               	goto	l222
  7473  012F74                     l220:
  7474  012F74  0100               	movlb	0	; () banked
  7475  012F76  51E0               	movf	LED_Init@pLED& (0+255),w,b
  7476                           
  7477                           ; Switch size 1, requested type "space"
  7478                           ; Number of cases is 2, Range of values is 0 to 1
  7479                           ; switch strategies available:
  7480                           ; Name         Instructions Cycles
  7481                           ; simple_byte            7     4 (average)
  7482                           ;	Chosen strategy is simple_byte
  7483  012F78  0A00               	xorlw	0	; case 0
  7484  012F7A  B4D8               	btfsc	status,2,c
  7485  012F7C  D7E3               	goto	l221
  7486  012F7E  0A01               	xorlw	1	; case 1
  7487  012F80  B4D8               	btfsc	status,2,c
  7488  012F82  D7EC               	goto	l223
  7489  012F84                     l222:
  7490                           
  7491                           ;LED.c: 26: LED_Set(pLED, 0);
  7492                           
  7493                           ; BSR set to: 0
  7494  012F84  0E00               	movlw	0
  7495  012F86  0100               	movlb	0	; () banked
  7496  012F88  6FC7               	movwf	LED_Set@pValue& (0+255),b
  7497  012F8A  51E0               	movf	LED_Init@pLED& (0+255),w,b
  7498  012F8C  EC0E  F099         	call	_LED_Set
  7499  012F90  0012               	return		;funcret
  7500  012F92                     __end_of_LED_Init:
  7501                           	opt stack 0
  7502                           tosu	equ	0xFFF
  7503                           tosh	equ	0xFFE
  7504                           tosl	equ	0xFFD
  7505                           pclath	equ	0xFFA
  7506                           tblptru	equ	0xFF8
  7507                           tblptrh	equ	0xFF7
  7508                           tblptrl	equ	0xFF6
  7509                           tablat	equ	0xFF5
  7510                           prodh	equ	0xFF4
  7511                           prodl	equ	0xFF3
  7512                           postinc0	equ	0xFEE
  7513                           wreg	equ	0xFE8
  7514                           postdec1	equ	0xFE5
  7515                           fsr1h	equ	0xFE2
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function _LED_Set *****************
  7525 ;; Defined at:
  7526 ;;		line 33 in file "Library/LED.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  pLED            1    wreg     enum E6739
  7529 ;;  pValue          1   20[BANK0 ] unsigned char 
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  pLED            1   21[BANK0 ] enum E6739
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      void 
  7534 ;; Registers used:
  7535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7541 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;Total ram usage:        2 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:   11
  7548 ;; This function calls:
  7549 ;;		_Port_SetPin
  7550 ;; This function is called by:
  7551 ;;		_LED_Init
  7552 ;;		_SYSTEM_Initialize
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text27
  7557  01321C                     __ptext27:
  7558                           	opt stack 0
  7559  01321C                     _LED_Set:
  7560                           	opt stack 17
  7561                           
  7562                           ;incstack = 0
  7563                           ;LED_Set@pLED stored from wreg
  7564  01321C  0100               	movlb	0	; () banked
  7565  01321E  6FC8               	movwf	LED_Set@pLED& (0+255),b
  7566                           
  7567                           ;LED.c: 35: switch (pLED)
  7568  013220  D018               	goto	l227
  7569  013222                     
  7570                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  7571  013222  0EA5               	movlw	low _PortC
  7572  013224  0100               	movlb	0	; () banked
  7573  013226  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7574  013228  0E00               	movlw	high _PortC
  7575  01322A  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7576  01322C  0E00               	movlw	0
  7577  01322E  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7578  013230  C0C7  F0C5         	movff	LED_Set@pValue,Port_SetPin@pValue
  7579  013234  EC61  F08F         	call	_Port_SetPin	;wreg free
  7580                           
  7581                           ;LED.c: 39: break;
  7582  013238  0012               	return	
  7583  01323A                     
  7584                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  7585  01323A  0EA5               	movlw	low _PortC
  7586  01323C  0100               	movlb	0	; () banked
  7587  01323E  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7588  013240  0E00               	movlw	high _PortC
  7589  013242  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7590  013244  0E01               	movlw	1
  7591  013246  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7592  013248  C0C7  F0C5         	movff	LED_Set@pValue,Port_SetPin@pValue
  7593  01324C  EC61  F08F         	call	_Port_SetPin	;wreg free
  7594                           
  7595                           ;LED.c: 43: }
  7596                           
  7597                           ;LED.c: 42: break;
  7598  013250  0012               	return	
  7599  013252                     l227:
  7600  013252  0100               	movlb	0	; () banked
  7601  013254  51C8               	movf	LED_Set@pLED& (0+255),w,b
  7602                           
  7603                           ; Switch size 1, requested type "space"
  7604                           ; Number of cases is 2, Range of values is 0 to 1
  7605                           ; switch strategies available:
  7606                           ; Name         Instructions Cycles
  7607                           ; simple_byte            7     4 (average)
  7608                           ;	Chosen strategy is simple_byte
  7609  013256  0A00               	xorlw	0	; case 0
  7610  013258  B4D8               	btfsc	status,2,c
  7611  01325A  D7E3               	goto	l228
  7612  01325C  0A01               	xorlw	1	; case 1
  7613  01325E  A4D8               	btfss	status,2,c
  7614  013260  0012               	return	
  7615  013262  D7EB               	goto	l230
  7616  013264                     __end_of_LED_Set:
  7617                           	opt stack 0
  7618                           tosu	equ	0xFFF
  7619                           tosh	equ	0xFFE
  7620                           tosl	equ	0xFFD
  7621                           pclath	equ	0xFFA
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           postinc0	equ	0xFEE
  7629                           wreg	equ	0xFE8
  7630                           postdec1	equ	0xFE5
  7631                           fsr1h	equ	0xFE2
  7632                           fsr1l	equ	0xFE1
  7633                           indf2	equ	0xFDF
  7634                           postinc2	equ	0xFDE
  7635                           postdec2	equ	0xFDD
  7636                           fsr2h	equ	0xFDA
  7637                           fsr2l	equ	0xFD9
  7638                           status	equ	0xFD8
  7639                           
  7640 ;; *************** function _MXK_Dequeue *****************
  7641 ;; Defined at:
  7642 ;;		line 153 in file "Library/MXK.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;		None
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;		None
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      void 
  7649 ;; Registers used:
  7650 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;Total ram usage:        0 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:   12
  7663 ;; This function calls:
  7664 ;;		Absolute function
  7665 ;;		_Motor_Step
  7666 ;; This function is called by:
  7667 ;;		_main
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           	psect	text28
  7672  0135CA                     __ptext28:
  7673                           	opt stack 0
  7674  0135CA                     _MXK_Dequeue:
  7675                           	opt stack 18
  7676                           
  7677                           ;MXK.c: 155: if (lQueue)
  7678                           
  7679                           ;incstack = 0
  7680  0135CA  0100               	movlb	0	; () banked
  7681  0135CC  5163               	movf	_lQueue& (0+255),w,b	;volatile
  7682  0135CE  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  7683  0135D0  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  7684  0135D2  B4D8               	btfsc	status,2,c
  7685  0135D4  D00C               	goto	u10519
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;MXK.c: 156: lQueue();
  7689  0135D6  D801               	call	u10518
  7690  0135D8  D00A               	goto	u10519
  7691  0135DA                     u10518:
  7692  0135DA  0005               	push	
  7693  0135DC  6EFA               	movwf	pclath,c
  7694  0135DE  5163               	movf	_lQueue& (0+255),w,b	;volatile
  7695  0135E0  6EFD               	movwf	tosl,c
  7696  0135E2  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  7697  0135E4  6EFE               	movwf	tosh,c
  7698  0135E6  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  7699  0135E8  6EFF               	movwf	tosu,c
  7700  0135EA  50FA               	movf	pclath,w,c
  7701  0135EC  0012               	return		;indir
  7702  0135EE                     u10519:
  7703                           
  7704                           ;MXK.c: 157: lQueue = 0;
  7705  0135EE  0E00               	movlw	0
  7706  0135F0  0100               	movlb	0	; () banked
  7707  0135F2  6F63               	movwf	_lQueue& (0+255),b	;volatile
  7708  0135F4  0E00               	movlw	0
  7709  0135F6  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7710  0135F8  0E00               	movlw	0
  7711  0135FA  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7712                           
  7713                           ; BSR set to: 0
  7714  0135FC  0012               	return		;funcret
  7715  0135FE                     __end_of_MXK_Dequeue:
  7716                           	opt stack 0
  7717                           tosu	equ	0xFFF
  7718                           tosh	equ	0xFFE
  7719                           tosl	equ	0xFFD
  7720                           pclath	equ	0xFFA
  7721                           tblptru	equ	0xFF8
  7722                           tblptrh	equ	0xFF7
  7723                           tblptrl	equ	0xFF6
  7724                           tablat	equ	0xFF5
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           postinc0	equ	0xFEE
  7728                           wreg	equ	0xFE8
  7729                           postdec1	equ	0xFE5
  7730                           fsr1h	equ	0xFE2
  7731                           fsr1l	equ	0xFE1
  7732                           indf2	equ	0xFDF
  7733                           postinc2	equ	0xFDE
  7734                           postdec2	equ	0xFDD
  7735                           fsr2h	equ	0xFDA
  7736                           fsr2l	equ	0xFD9
  7737                           status	equ	0xFD8
  7738                           
  7739 ;; *************** function _Motor_Step *****************
  7740 ;; Defined at:
  7741 ;;		line 75 in file "Library/Motor.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;		None
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;		None
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      void 
  7748 ;; Registers used:
  7749 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;Total ram usage:        2 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:   11
  7762 ;; This function calls:
  7763 ;;		_MXK_Queue
  7764 ;;		_MXK_Release
  7765 ;;		_MXK_SwitchTo
  7766 ;;		_Port_SetPin
  7767 ;;		_Timer0_Restart
  7768 ;;		_Timer0_Stop
  7769 ;; This function is called by:
  7770 ;;		_Motor_Init
  7771 ;;		_Timer0_ISR
  7772 ;;		_MXK_Dequeue
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           	psect	text29
  7777  011BF6                     __ptext29:
  7778                           	opt stack 0
  7779  011BF6                     _Motor_Step:
  7780                           	opt stack 0
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;Skip over the trampoline to the duplicate function for level 2
  7784  011BF6  B251               	btfsc	btemp,1,c
  7785  011BF8  EF82  F08E         	goto	i2_Motor_Step
  7786  011BFC                     _Motor_Step$intlevel0:
  7787                           	opt stack 18
  7788                           
  7789                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  7790                           
  7791                           ;incstack = 0
  7792  011BFC  0100               	movlb	0	; () banked
  7793  011BFE  EE20 F004          	lfsr	2,4
  7794  011C02  517B               	movf	_lMotor& (0+255),w,b
  7795  011C04  26D9               	addwf	fsr2l,f,c
  7796  011C06  517C               	movf	(_lMotor+1)& (0+255),w,b
  7797  011C08  22DA               	addwfc	fsr2h,f,c
  7798  011C0A  50DF               	movf	indf2,w,c
  7799  011C0C  EC3C  F09A         	call	_MXK_SwitchTo
  7800  011C10  0900               	iorlw	0
  7801  011C12  B4D8               	btfsc	status,2,c
  7802  011C14  D06E               	goto	l1627
  7803                           
  7804                           ;Motor.c: 78: {
  7805                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  7806  011C16  C07B  FFD9         	movff	_lMotor,fsr2l
  7807  011C1A  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7808  011C1E  50DE               	movf	postinc2,w,c
  7809  011C20  10DE               	iorwf	postinc2,w,c
  7810  011C22  B4D8               	btfsc	status,2,c
  7811  011C24  D061               	goto	l1628
  7812                           
  7813                           ;Motor.c: 80: {
  7814                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  7815  011C26  C07B  FFD9         	movff	_lMotor,fsr2l
  7816  011C2A  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7817  011C2E  0E01               	movlw	1
  7818  011C30  BEDB               	btfsc	plusw2,7,c
  7819  011C32  D023               	goto	l1629
  7820  011C34  0E01               	movlw	1
  7821  011C36  50DB               	movf	plusw2,w,c
  7822  011C38  E103               	bnz	u9030
  7823  011C3A  04DE               	decf	postinc2,w,c
  7824  011C3C  A0D8               	btfss	status,0,c
  7825  011C3E  D01D               	goto	l1629
  7826  011C40                     u9030:
  7827                           
  7828                           ;Motor.c: 83: {
  7829                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  7830  011C40  C07B  FFD9         	movff	_lMotor,fsr2l
  7831  011C44  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7832  011C48  28DE               	incf	postinc2,w,c
  7833  011C4A  E104               	bnz	u9040
  7834  011C4C  0E7F               	movlw	127
  7835  011C4E  18DE               	xorwf	postinc2,w,c
  7836  011C50  B4D8               	btfsc	status,2,c
  7837  011C52  D007               	goto	l1630
  7838  011C54                     u9040:
  7839                           
  7840                           ;Motor.c: 85: lMotor->mDelta --;
  7841  011C54  C07B  FFD9         	movff	_lMotor,fsr2l
  7842  011C58  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7843  011C5C  06DE               	decf	postinc2,f,c
  7844  011C5E  0E00               	movlw	0
  7845  011C60  5ADD               	subwfb	postdec2,f,c
  7846  011C62                     l1630:
  7847                           
  7848                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  7849  011C62  0E91               	movlw	low _PortE
  7850  011C64  0100               	movlb	0	; () banked
  7851  011C66  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7852  011C68  0E00               	movlw	high _PortE
  7853  011C6A  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7854  011C6C  0E00               	movlw	0
  7855  011C6E  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7856  011C70  0E01               	movlw	1
  7857  011C72  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  7858  011C74  EC61  F08F         	call	_Port_SetPin	;wreg free
  7859                           
  7860                           ;Motor.c: 88: }
  7861  011C78  D01C               	goto	l1631
  7862  011C7A                     l1629:
  7863                           
  7864                           ;Motor.c: 89: else
  7865                           ;Motor.c: 90: {
  7866                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  7867  011C7A  C07B  FFD9         	movff	_lMotor,fsr2l
  7868  011C7E  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7869  011C82  04DE               	decf	postinc2,w,c
  7870  011C84  E104               	bnz	u9050
  7871  011C86  0E80               	movlw	128
  7872  011C88  18DE               	xorwf	postinc2,w,c
  7873  011C8A  B4D8               	btfsc	status,2,c
  7874  011C8C  D007               	goto	l1632
  7875  011C8E                     u9050:
  7876                           
  7877                           ;Motor.c: 92: lMotor->mDelta ++;
  7878  011C8E  C07B  FFD9         	movff	_lMotor,fsr2l
  7879  011C92  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7880  011C96  2ADE               	incf	postinc2,f,c
  7881  011C98  0E00               	movlw	0
  7882  011C9A  22DD               	addwfc	postdec2,f,c
  7883  011C9C                     l1632:
  7884                           
  7885                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  7886  011C9C  0E91               	movlw	low _PortE
  7887  011C9E  0100               	movlb	0	; () banked
  7888  011CA0  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7889  011CA2  0E00               	movlw	high _PortE
  7890  011CA4  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7891  011CA6  0E00               	movlw	0
  7892  011CA8  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7893  011CAA  0E00               	movlw	0
  7894  011CAC  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  7895  011CAE  EC61  F08F         	call	_Port_SetPin	;wreg free
  7896  011CB2                     l1631:
  7897                           
  7898                           ;Motor.c: 95: }
  7899                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  7900  011CB2  0E91               	movlw	low _PortE
  7901  011CB4  0100               	movlb	0	; () banked
  7902  011CB6  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7903  011CB8  0E00               	movlw	high _PortE
  7904  011CBA  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7905  011CBC  0E01               	movlw	1
  7906  011CBE  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7907  011CC0  0E01               	movlw	1
  7908  011CC2  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  7909  011CC4  EC61  F08F         	call	_Port_SetPin	;wreg free
  7910                           
  7911                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  7912  011CC8  0E91               	movlw	low _PortE
  7913  011CCA  0100               	movlb	0	; () banked
  7914  011CCC  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7915  011CCE  0E00               	movlw	high _PortE
  7916  011CD0  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7917  011CD2  0E01               	movlw	1
  7918  011CD4  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7919  011CD6  0E00               	movlw	0
  7920  011CD8  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  7921  011CDA  EC61  F08F         	call	_Port_SetPin	;wreg free
  7922                           
  7923                           ;Motor.c: 101: MXK_Release();
  7924  011CDE  EC9E  F09C         	call	_MXK_Release	;wreg free
  7925                           
  7926                           ;Motor.c: 102: Timer0_Restart();
  7927  011CE2  EC77  F09D         	call	_Timer0_Restart	;wreg free
  7928                           
  7929                           ;Motor.c: 103: return;
  7930  011CE6  0012               	return	
  7931  011CE8                     l1628:
  7932                           
  7933                           ;Motor.c: 104: }
  7934                           ;Motor.c: 105: MXK_Release();
  7935  011CE8  EC9E  F09C         	call	_MXK_Release	;wreg free
  7936                           
  7937                           ;Motor.c: 106: Timer0_Stop();
  7938  011CEC  EC95  F09D         	call	_Timer0_Stop	;wreg free
  7939                           
  7940                           ;Motor.c: 107: return;
  7941  011CF0  0012               	return	
  7942  011CF2                     l1627:
  7943                           
  7944                           ;Motor.c: 108: }
  7945                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  7946  011CF2  C066  F0B3         	movff	_lStepFunction,MXK_Queue@pCallback
  7947  011CF6  C067  F0B4         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  7948  011CFA  C068  F0B5         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  7949  011CFE  EC5C  F09D         	call	_MXK_Queue	;wreg free
  7950  011D02  0012               	return		;funcret
  7951  011D04                     __end_of_Motor_Step:
  7952                           	opt stack 0
  7953                           tosu	equ	0xFFF
  7954                           tosh	equ	0xFFE
  7955                           tosl	equ	0xFFD
  7956                           pclath	equ	0xFFA
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           postinc0	equ	0xFEE
  7964                           wreg	equ	0xFE8
  7965                           postdec1	equ	0xFE5
  7966                           fsr1h	equ	0xFE2
  7967                           fsr1l	equ	0xFE1
  7968                           indf2	equ	0xFDF
  7969                           postinc2	equ	0xFDE
  7970                           postdec2	equ	0xFDD
  7971                           plusw2	equ	0xFDB
  7972                           fsr2h	equ	0xFDA
  7973                           fsr2l	equ	0xFD9
  7974                           status	equ	0xFD8
  7975                           
  7976 ;; *************** function _Timer0_Stop *****************
  7977 ;; Defined at:
  7978 ;;		line 89 in file "Library/Timer0.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;		None
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;		None
  7983 ;; Return value:  Size  Location     Type
  7984 ;;                  1    wreg      void 
  7985 ;; Registers used:
  7986 ;;		None
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;Total ram usage:        0 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    7
  7999 ;; This function calls:
  8000 ;;		Nothing
  8001 ;; This function is called by:
  8002 ;;		_Motor_Step
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text30
  8007  013B2A                     __ptext30:
  8008                           	opt stack 0
  8009  013B2A                     _Timer0_Stop:
  8010                           	opt stack 21
  8011                           
  8012                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  8013                           
  8014                           ;incstack = 0
  8015  013B2A  9AF2               	bcf	intcon,5,c	;volatile
  8016                           
  8017                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  8018  013B2C  94F2               	bcf	intcon,2,c	;volatile
  8019  013B2E  0012               	return		;funcret
  8020  013B30                     __end_of_Timer0_Stop:
  8021                           	opt stack 0
  8022                           tosu	equ	0xFFF
  8023                           tosh	equ	0xFFE
  8024                           tosl	equ	0xFFD
  8025                           pclath	equ	0xFFA
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           intcon	equ	0xFF2
  8033                           postinc0	equ	0xFEE
  8034                           wreg	equ	0xFE8
  8035                           postdec1	equ	0xFE5
  8036                           fsr1h	equ	0xFE2
  8037                           fsr1l	equ	0xFE1
  8038                           indf2	equ	0xFDF
  8039                           postinc2	equ	0xFDE
  8040                           postdec2	equ	0xFDD
  8041                           plusw2	equ	0xFDB
  8042                           fsr2h	equ	0xFDA
  8043                           fsr2l	equ	0xFD9
  8044                           status	equ	0xFD8
  8045                           
  8046 ;; *************** function _Timer0_Restart *****************
  8047 ;; Defined at:
  8048 ;;		line 83 in file "Library/Timer0.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;		None
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;		None
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      void 
  8055 ;; Registers used:
  8056 ;;		None
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;Total ram usage:        0 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    7
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_Motor_Step
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	text31
  8077  013AEE                     __ptext31:
  8078                           	opt stack 0
  8079  013AEE                     _Timer0_Restart:
  8080                           	opt stack 21
  8081                           
  8082                           ;Timer0.c: 85: TMR0 = COUNTER;
  8083                           
  8084                           ;incstack = 0
  8085  013AEE  C02F  FFD6         	movff	_COUNTER,4054	;volatile
  8086  013AF2  C030  FFD7         	movff	_COUNTER+1,4055	;volatile
  8087                           
  8088                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  8089  013AF6  8AF2               	bsf	intcon,5,c	;volatile
  8090  013AF8  0012               	return		;funcret
  8091  013AFA                     __end_of_Timer0_Restart:
  8092                           	opt stack 0
  8093                           tosu	equ	0xFFF
  8094                           tosh	equ	0xFFE
  8095                           tosl	equ	0xFFD
  8096                           pclath	equ	0xFFA
  8097                           tblptru	equ	0xFF8
  8098                           tblptrh	equ	0xFF7
  8099                           tblptrl	equ	0xFF6
  8100                           tablat	equ	0xFF5
  8101                           prodh	equ	0xFF4
  8102                           prodl	equ	0xFF3
  8103                           intcon	equ	0xFF2
  8104                           postinc0	equ	0xFEE
  8105                           wreg	equ	0xFE8
  8106                           postdec1	equ	0xFE5
  8107                           fsr1h	equ	0xFE2
  8108                           fsr1l	equ	0xFE1
  8109                           indf2	equ	0xFDF
  8110                           postinc2	equ	0xFDE
  8111                           postdec2	equ	0xFDD
  8112                           plusw2	equ	0xFDB
  8113                           fsr2h	equ	0xFDA
  8114                           fsr2l	equ	0xFD9
  8115                           status	equ	0xFD8
  8116                           
  8117 ;; *************** function _MXK_SwitchTo *****************
  8118 ;; Defined at:
  8119 ;;		line 105 in file "Library/MXK.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  pModule         1    wreg     enum E6927
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;  pModule         1    7[BANK0 ] enum E6927
  8124 ;;  CUR             1    6[BANK0 ] unsigned char 
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  1    wreg      unsigned char 
  8127 ;; Registers used:
  8128 ;;		wreg, status,2, status,0, cstack
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8135 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;Total ram usage:        2 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    8
  8141 ;; This function calls:
  8142 ;;		_delay_us
  8143 ;; This function is called by:
  8144 ;;		_Motor_Step
  8145 ;; This function uses a non-reentrant model
  8146 ;;
  8147                           
  8148                           	psect	text32
  8149  013478                     __ptext32:
  8150                           	opt stack 0
  8151  013478                     _MXK_SwitchTo:
  8152                           	opt stack 20
  8153                           
  8154                           ;incstack = 0
  8155                           ;MXK_SwitchTo@pModule stored from wreg
  8156  013478  0100               	movlb	0	; () banked
  8157  01347A  6FBA               	movwf	MXK_SwitchTo@pModule& (0+255),b
  8158                           
  8159                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  8160  01347C  5086               	movf	3974,w,c	;volatile
  8161  01347E  0B0F               	andlw	15
  8162  013480  0100               	movlb	0	; () banked
  8163  013482  6FB9               	movwf	MXK_SwitchTo@CUR& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  8167  013484  504B               	movf	_Bus_State,w,c
  8168  013486  A4D8               	btfss	status,2,c
  8169  013488  D002               	goto	l1730
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;MXK.c: 110: return 0;
  8173  01348A  0E00               	movlw	0
  8174                           
  8175                           ; BSR set to: 0
  8176  01348C  0012               	return	
  8177  01348E                     l1730:
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  8181                           
  8182                           ; BSR set to: 0
  8183  01348E  0E00               	movlw	0
  8184  013490  6E4B               	movwf	_Bus_State,c
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;MXK.c: 114: if (CUR != pModule)
  8188  013492  51BA               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8189  013494  19B9               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  8190  013496  B4D8               	btfsc	status,2,c
  8191  013498  D00A               	goto	l1732
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;MXK.c: 115: {
  8195                           ;MXK.c: 116: PORTG &= ~(0xF);
  8196  01349A  0EF0               	movlw	240
  8197  01349C  1686               	andwf	3974,f,c	;volatile
  8198                           
  8199                           ;MXK.c: 117: PORTG |= pModule;
  8200  01349E  51BA               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8201  0134A0  1286               	iorwf	3974,f,c	;volatile
  8202                           
  8203                           ; BSR set to: 0
  8204                           ;MXK.c: 120: delay_us(10);
  8205  0134A2  0E00               	movlw	0
  8206  0134A4  6FB4               	movwf	(delay_us@us+1)& (0+255),b
  8207  0134A6  0E0A               	movlw	10
  8208  0134A8  6FB3               	movwf	delay_us@us& (0+255),b
  8209  0134AA  EC56  F099         	call	_delay_us	;wreg free
  8210  0134AE                     l1732:
  8211                           
  8212                           ;MXK.c: 121: }
  8213                           ;MXK.c: 122: return 1;
  8214  0134AE  0E01               	movlw	1
  8215  0134B0  0012               	return	
  8216  0134B2                     __end_of_MXK_SwitchTo:
  8217                           	opt stack 0
  8218                           tosu	equ	0xFFF
  8219                           tosh	equ	0xFFE
  8220                           tosl	equ	0xFFD
  8221                           pclath	equ	0xFFA
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           postinc0	equ	0xFEE
  8230                           wreg	equ	0xFE8
  8231                           postdec1	equ	0xFE5
  8232                           fsr1h	equ	0xFE2
  8233                           fsr1l	equ	0xFE1
  8234                           indf2	equ	0xFDF
  8235                           postinc2	equ	0xFDE
  8236                           postdec2	equ	0xFDD
  8237                           plusw2	equ	0xFDB
  8238                           fsr2h	equ	0xFDA
  8239                           fsr2l	equ	0xFD9
  8240                           status	equ	0xFD8
  8241                           
  8242 ;; *************** function _MXK_Release *****************
  8243 ;; Defined at:
  8244 ;;		line 130 in file "Library/MXK.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;		None
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;		None
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  1    wreg      unsigned char 
  8251 ;; Registers used:
  8252 ;;		wreg, status,2, status,0
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;Total ram usage:        0 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    7
  8265 ;; This function calls:
  8266 ;;		Nothing
  8267 ;; This function is called by:
  8268 ;;		_Motor_Step
  8269 ;;		_main
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text33
  8274  01393C                     __ptext33:
  8275                           	opt stack 0
  8276  01393C                     _MXK_Release:
  8277                           	opt stack 23
  8278                           
  8279                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8280                           
  8281                           ;incstack = 0
  8282  01393C  0E01               	movlw	1
  8283  01393E  6E4B               	movwf	_Bus_State,c
  8284                           
  8285                           ;MXK.c: 134: if (lQueue != 0)
  8286  013940  0100               	movlb	0	; () banked
  8287  013942  5163               	movf	_lQueue& (0+255),w,b	;volatile
  8288  013944  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  8289  013946  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  8290  013948  B4D8               	btfsc	status,2,c
  8291  01394A  D002               	goto	l1735
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;MXK.c: 135: return 1;
  8295  01394C  0E01               	movlw	1
  8296                           
  8297                           ; BSR set to: 0
  8298  01394E  0012               	return	
  8299  013950                     l1735:
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;MXK.c: 137: return 0;
  8303                           
  8304                           ; BSR set to: 0
  8305  013950  0E00               	movlw	0
  8306  013952  0012               	return	
  8307  013954                     __end_of_MXK_Release:
  8308                           	opt stack 0
  8309                           tosu	equ	0xFFF
  8310                           tosh	equ	0xFFE
  8311                           tosl	equ	0xFFD
  8312                           pclath	equ	0xFFA
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           intcon	equ	0xFF2
  8320                           postinc0	equ	0xFEE
  8321                           wreg	equ	0xFE8
  8322                           postdec1	equ	0xFE5
  8323                           fsr1h	equ	0xFE2
  8324                           fsr1l	equ	0xFE1
  8325                           indf2	equ	0xFDF
  8326                           postinc2	equ	0xFDE
  8327                           postdec2	equ	0xFDD
  8328                           plusw2	equ	0xFDB
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function _MXK_Queue *****************
  8334 ;; Defined at:
  8335 ;;		line 144 in file "Library/MXK.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8338 ;;		 -> Absolute function(1), Motor_Step(1), 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;		None
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  1    wreg      void 
  8343 ;; Registers used:
  8344 ;;		wreg, status,2, status,0
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8350 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;Total ram usage:        3 bytes
  8355 ;; Hardware stack levels used:    1
  8356 ;; Hardware stack levels required when called:    7
  8357 ;; This function calls:
  8358 ;;		Nothing
  8359 ;; This function is called by:
  8360 ;;		_Motor_Step
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text34
  8365  013AB8                     __ptext34:
  8366                           	opt stack 0
  8367  013AB8                     _MXK_Queue:
  8368                           	opt stack 21
  8369                           
  8370                           ;MXK.c: 146: lQueue = pCallback;
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;incstack = 0
  8374  013AB8  C0B3  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8375  013ABC  C0B4  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8376  013AC0  C0B5  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8377  013AC4  0012               	return		;funcret
  8378  013AC6                     __end_of_MXK_Queue:
  8379                           	opt stack 0
  8380                           tosu	equ	0xFFF
  8381                           tosh	equ	0xFFE
  8382                           tosl	equ	0xFFD
  8383                           pclath	equ	0xFFA
  8384                           tblptru	equ	0xFF8
  8385                           tblptrh	equ	0xFF7
  8386                           tblptrl	equ	0xFF6
  8387                           tablat	equ	0xFF5
  8388                           prodh	equ	0xFF4
  8389                           prodl	equ	0xFF3
  8390                           intcon	equ	0xFF2
  8391                           postinc0	equ	0xFEE
  8392                           wreg	equ	0xFE8
  8393                           postdec1	equ	0xFE5
  8394                           fsr1h	equ	0xFE2
  8395                           fsr1l	equ	0xFE1
  8396                           indf2	equ	0xFDF
  8397                           postinc2	equ	0xFDE
  8398                           postdec2	equ	0xFDD
  8399                           plusw2	equ	0xFDB
  8400                           fsr2h	equ	0xFDA
  8401                           fsr2l	equ	0xFD9
  8402                           status	equ	0xFD8
  8403                           
  8404 ;; *************** function _MXK_BlockSwitchTo *****************
  8405 ;; Defined at:
  8406 ;;		line 82 in file "Library/MXK.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;  pModule         1    wreg     enum E6927
  8409 ;; Auto vars:     Size  Location     Type
  8410 ;;  pModule         1    7[BANK0 ] enum E6927
  8411 ;;  CUR             1    6[BANK0 ] unsigned char 
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  1    wreg      unsigned char 
  8414 ;; Registers used:
  8415 ;;		wreg, status,2, status,0, cstack
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;Total ram usage:        2 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    8
  8428 ;; This function calls:
  8429 ;;		_delay_us
  8430 ;; This function is called by:
  8431 ;;		_main
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           	psect	text35
  8436  013526                     __ptext35:
  8437                           	opt stack 0
  8438  013526                     _MXK_BlockSwitchTo:
  8439                           	opt stack 22
  8440                           
  8441                           ;incstack = 0
  8442                           ;MXK_BlockSwitchTo@pModule stored from wreg
  8443  013526  0100               	movlb	0	; () banked
  8444  013528  6FBA               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  8445                           
  8446                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  8447  01352A  5086               	movf	3974,w,c	;volatile
  8448  01352C  0B0F               	andlw	15
  8449  01352E  0100               	movlb	0	; () banked
  8450  013530  6FB9               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  8451  013532                     
  8452                           ; BSR set to: 0
  8453                           
  8454                           ; BSR set to: 0
  8455  013532  504B               	movf	_Bus_State,w,c
  8456  013534  B4D8               	btfsc	status,2,c
  8457  013536  D7FD               	goto	l1724
  8458                           
  8459                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  8460  013538  0E00               	movlw	0
  8461  01353A  6E4B               	movwf	_Bus_State,c
  8462                           
  8463                           ;MXK.c: 90: if (CUR != pModule)
  8464  01353C  0100               	movlb	0	; () banked
  8465  01353E  51BA               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8466  013540  19B9               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  8467  013542  B4D8               	btfsc	status,2,c
  8468  013544  D00A               	goto	l1726
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;MXK.c: 91: {
  8472                           ;MXK.c: 92: PORTG &= ~(0xF);
  8473  013546  0EF0               	movlw	240
  8474  013548  1686               	andwf	3974,f,c	;volatile
  8475                           
  8476                           ;MXK.c: 93: PORTG |= pModule;
  8477  01354A  51BA               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8478  01354C  1286               	iorwf	3974,f,c	;volatile
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;MXK.c: 96: delay_us(10);
  8482  01354E  0E00               	movlw	0
  8483  013550  6FB4               	movwf	(delay_us@us+1)& (0+255),b
  8484  013552  0E0A               	movlw	10
  8485  013554  6FB3               	movwf	delay_us@us& (0+255),b
  8486  013556  EC56  F099         	call	_delay_us	;wreg free
  8487  01355A                     l1726:
  8488                           
  8489                           ;MXK.c: 97: }
  8490                           ;MXK.c: 98: return 1;
  8491  01355A  0E01               	movlw	1
  8492  01355C  0012               	return	
  8493  01355E                     __end_of_MXK_BlockSwitchTo:
  8494                           	opt stack 0
  8495                           tosu	equ	0xFFF
  8496                           tosh	equ	0xFFE
  8497                           tosl	equ	0xFFD
  8498                           pclath	equ	0xFFA
  8499                           tblptru	equ	0xFF8
  8500                           tblptrh	equ	0xFF7
  8501                           tblptrl	equ	0xFF6
  8502                           tablat	equ	0xFF5
  8503                           prodh	equ	0xFF4
  8504                           prodl	equ	0xFF3
  8505                           intcon	equ	0xFF2
  8506                           postinc0	equ	0xFEE
  8507                           wreg	equ	0xFE8
  8508                           postdec1	equ	0xFE5
  8509                           fsr1h	equ	0xFE2
  8510                           fsr1l	equ	0xFE1
  8511                           indf2	equ	0xFDF
  8512                           postinc2	equ	0xFDE
  8513                           postdec2	equ	0xFDD
  8514                           plusw2	equ	0xFDB
  8515                           fsr2h	equ	0xFDA
  8516                           fsr2l	equ	0xFD9
  8517                           status	equ	0xFD8
  8518                           
  8519 ;; *************** function _delay_us *****************
  8520 ;; Defined at:
  8521 ;;		line 255 in file "Library/Types.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;  us              2    0[BANK0 ] unsigned short 
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;  u               4    2[BANK0 ] unsigned long 
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      void 
  8528 ;; Registers used:
  8529 ;;		wreg, status,2, status,0
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8535 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8536 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;Total ram usage:        6 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    7
  8542 ;; This function calls:
  8543 ;;		Nothing
  8544 ;; This function is called by:
  8545 ;;		_MXK_BlockSwitchTo
  8546 ;;		_MXK_SwitchTo
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           	psect	text36
  8551  0132AC                     __ptext36:
  8552                           	opt stack 0
  8553  0132AC                     _delay_us:
  8554                           	opt stack 20
  8555                           
  8556                           ;Types.c: 256: unsigned long u;
  8557                           ;Types.c: 257: while (us--) {
  8558                           
  8559                           ;incstack = 0
  8560  0132AC  D018               	goto	u8410
  8561  0132AE                     l12082:
  8562                           
  8563                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  8564  0132AE  0E00               	movlw	0
  8565  0132B0  0100               	movlb	0	; () banked
  8566  0132B2  6FB5               	movwf	delay_us@u& (0+255),b
  8567  0132B4  0E00               	movlw	0
  8568  0132B6  6FB6               	movwf	(delay_us@u+1)& (0+255),b
  8569  0132B8  0E00               	movlw	0
  8570  0132BA  6FB7               	movwf	(delay_us@u+2)& (0+255),b
  8571  0132BC  0E00               	movlw	0
  8572  0132BE  6FB8               	movwf	(delay_us@u+3)& (0+255),b
  8573  0132C0                     l12084:
  8574                           
  8575                           ; BSR set to: 0
  8576  0132C0  51B5               	movf	delay_us@u& (0+255),w,b
  8577  0132C2  11B6               	iorwf	(delay_us@u+1)& (0+255),w,b
  8578  0132C4  11B7               	iorwf	(delay_us@u+2)& (0+255),w,b
  8579  0132C6  11B8               	iorwf	(delay_us@u+3)& (0+255),w,b
  8580  0132C8  A4D8               	btfss	status,2,c
  8581  0132CA  D009               	goto	u8410
  8582                           
  8583                           ; BSR set to: 0
  8584                           
  8585                           ; BSR set to: 0
  8586  0132CC  F000               	nop		; ;# 
  8587  0132CE  0E01               	movlw	1
  8588  0132D0  0100               	movlb	0	; () banked
  8589  0132D2  27B5               	addwf	delay_us@u& (0+255),f,b
  8590  0132D4  0E00               	movlw	0
  8591  0132D6  23B6               	addwfc	(delay_us@u+1)& (0+255),f,b
  8592  0132D8  23B7               	addwfc	(delay_us@u+2)& (0+255),f,b
  8593  0132DA  23B8               	addwfc	(delay_us@u+3)& (0+255),f,b
  8594  0132DC  D7F1               	goto	l12084
  8595  0132DE                     u8410:
  8596                           
  8597                           ; BSR set to: 0
  8598                           
  8599                           ; BSR set to: 0
  8600  0132DE  0100               	movlb	0	; () banked
  8601  0132E0  07B3               	decf	delay_us@us& (0+255),f,b
  8602  0132E2  A0D8               	btfss	status,0,c
  8603  0132E4  07B4               	decf	(delay_us@us+1)& (0+255),f,b
  8604  0132E6  29B3               	incf	delay_us@us& (0+255),w,b
  8605  0132E8  E1E2               	bnz	l12082
  8606  0132EA  29B4               	incf	(delay_us@us+1)& (0+255),w,b
  8607  0132EC  B4D8               	btfsc	status,2,c
  8608  0132EE  0012               	return	
  8609  0132F0  D7DE               	goto	l832
  8610  0132F2                     __end_of_delay_us:
  8611                           	opt stack 0
  8612                           tosu	equ	0xFFF
  8613                           tosh	equ	0xFFE
  8614                           tosl	equ	0xFFD
  8615                           pclath	equ	0xFFA
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           intcon	equ	0xFF2
  8623                           postinc0	equ	0xFEE
  8624                           wreg	equ	0xFE8
  8625                           postdec1	equ	0xFE5
  8626                           fsr1h	equ	0xFE2
  8627                           fsr1l	equ	0xFE1
  8628                           indf2	equ	0xFDF
  8629                           postinc2	equ	0xFDE
  8630                           postdec2	equ	0xFDD
  8631                           plusw2	equ	0xFDB
  8632                           fsr2h	equ	0xFDA
  8633                           fsr2l	equ	0xFD9
  8634                           status	equ	0xFD8
  8635                           
  8636 ;; *************** function _LCD_Init *****************
  8637 ;; Defined at:
  8638 ;;		line 172 in file "Library/LCD.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;  i               2   55[BANK0 ] unsigned short 
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;Total ram usage:        4 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:   15
  8659 ;; This function calls:
  8660 ;;		_Configure_GPIOs
  8661 ;;		_LCD_Fill
  8662 ;;		_LCD_Write
  8663 ;;		_Set_Rotation
  8664 ;;		_delay_ms
  8665 ;; This function is called by:
  8666 ;;		_main
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	text37
  8671  0115C0                     __ptext37:
  8672                           	opt stack 0
  8673  0115C0                     _LCD_Init:
  8674                           	opt stack 15
  8675                           
  8676                           ;LCD.c: 174: UINT16 i;
  8677                           ;LCD.c: 175: Configure_GPIOs();
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;incstack = 0
  8681  0115C0  EC18  F097         	call	_Configure_GPIOs	;wreg free
  8682                           
  8683                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  8684  0115C4  0E00               	movlw	0
  8685  0115C6  0100               	movlb	0	; () banked
  8686  0115C8  6FEB               	movwf	(LCD_Init@i+1)& (0+255),b
  8687  0115CA  0E00               	movlw	0
  8688  0115CC  6FEA               	movwf	LCD_Init@i& (0+255),b
  8689                           
  8690                           ; BSR set to: 0
  8691  0115CE  51EB               	movf	(LCD_Init@i+1)& (0+255),w,b
  8692  0115D0  E17D               	bnz	u9100
  8693  0115D2  0E59               	movlw	89
  8694  0115D4  5DEA               	subwf	LCD_Init@i& (0+255),w,b
  8695  0115D6  B0D8               	btfsc	status,0,c
  8696  0115D8  D079               	goto	u9100
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;LCD.c: 178: {
  8700                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  8701                           
  8702                           ; BSR set to: 0
  8703                           
  8704                           ; BSR set to: 0
  8705  0115DA  90D8               	bcf	status,0,c
  8706  0115DC  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8707  0115DE  6EF6               	movwf	tblptrl,c
  8708  0115E0  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8709  0115E2  6EF7               	movwf	tblptrh,c
  8710  0115E4  0EEB               	movlw	low _InitList
  8711  0115E6  26F6               	addwf	tblptrl,f,c
  8712  0115E8  0EFB               	movlw	high _InitList
  8713  0115EA  22F7               	addwfc	tblptrh,f,c
  8714  0115EC                     	if	1	;There are 3 active tblptr bytes
  8715  0115EC  6AF8               	clrf	tblptru,c
  8716  0115EE  0E00               	movlw	low (__mediumconst shr (0+16))
  8717  0115F0  22F8               	addwfc	tblptru,f,c
  8718  0115F2                     	endif
  8719  0115F2  0009               	tblrd		*+
  8720  0115F4  0E80               	movlw	128
  8721  0115F6  18F5               	xorwf	tablat,w,c
  8722  0115F8  0009               	tblrd		*+
  8723  0115FA  10F5               	iorwf	tablat,w,c
  8724  0115FC  A4D8               	btfss	status,2,c
  8725  0115FE  D01D               	goto	l87
  8726                           
  8727                           ; BSR set to: 0
  8728  011600  51EB               	movf	(LCD_Init@i+1)& (0+255),w,b
  8729  011602  E11B               	bnz	l12940
  8730  011604  0E58               	movlw	88
  8731  011606  5DEA               	subwf	LCD_Init@i& (0+255),w,b
  8732  011608  B0D8               	btfsc	status,0,c
  8733  01160A  D017               	goto	l87
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;LCD.c: 180: delay_ms(InitList[++i]);
  8737  01160C  4BEA               	infsnz	LCD_Init@i& (0+255),f,b
  8738  01160E  2BEB               	incf	(LCD_Init@i+1)& (0+255),f,b
  8739  011610  90D8               	bcf	status,0,c
  8740  011612  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8741  011614  6EF6               	movwf	tblptrl,c
  8742  011616  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8743  011618  6EF7               	movwf	tblptrh,c
  8744  01161A  0EEB               	movlw	low _InitList
  8745  01161C  26F6               	addwf	tblptrl,f,c
  8746  01161E  0EFB               	movlw	high _InitList
  8747  011620  22F7               	addwfc	tblptrh,f,c
  8748  011622                     	if	1	;There are 3 active tblptr bytes
  8749  011622  6AF8               	clrf	tblptru,c
  8750  011624  0E00               	movlw	low (__mediumconst shr (0+16))
  8751  011626  22F8               	addwfc	tblptru,f,c
  8752  011628                     	endif
  8753  011628  0009               	tblrd		*+
  8754  01162A  CFF5 F0B3          	movff	tablat,delay_ms@ms
  8755  01162E  000A               	tblrd		*-
  8756  011630  CFF5 F0B4          	movff	tablat,delay_ms@ms+1
  8757  011634  EC47  F097         	call	_delay_ms	;wreg free
  8758  011638  D043               	goto	l90
  8759  01163A                     l87:
  8760  01163A                     l12940:
  8761                           
  8762                           ;LCD.c: 181: else
  8763                           ;LCD.c: 182: {
  8764                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  8765  01163A  90D8               	bcf	status,0,c
  8766  01163C  0100               	movlb	0	; () banked
  8767  01163E  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8768  011640  6EF6               	movwf	tblptrl,c
  8769  011642  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8770  011644  6EF7               	movwf	tblptrh,c
  8771  011646  0EEB               	movlw	low _InitList
  8772  011648  26F6               	addwf	tblptrl,f,c
  8773  01164A  0EFB               	movlw	high _InitList
  8774  01164C  22F7               	addwfc	tblptrh,f,c
  8775  01164E                     	if	1	;There are 3 active tblptr bytes
  8776  01164E  6AF8               	clrf	tblptru,c
  8777  011650  0E00               	movlw	low (__mediumconst shr (0+16))
  8778  011652  22F8               	addwfc	tblptru,f,c
  8779  011654                     	endif
  8780  011654  0009               	tblrd		*+
  8781  011656  0E00               	movlw	0
  8782  011658  5EF5               	subwf	tablat,f,c
  8783  01165A  0009               	tblrd		*+
  8784  01165C  0E01               	movlw	1
  8785  01165E  5AF5               	subwfb	tablat,f,c
  8786  011660  A0D8               	btfss	status,0,c
  8787  011662  D01B               	goto	l89
  8788                           
  8789                           ; BSR set to: 0
  8790  011664  0E00               	movlw	0
  8791  011666  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8792  011668  90D8               	bcf	status,0,c
  8793  01166A  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8794  01166C  6EF6               	movwf	tblptrl,c
  8795  01166E  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8796  011670  6EF7               	movwf	tblptrh,c
  8797  011672  0EEB               	movlw	low _InitList
  8798  011674  26F6               	addwf	tblptrl,f,c
  8799  011676  0EFB               	movlw	high _InitList
  8800  011678  22F7               	addwfc	tblptrh,f,c
  8801  01167A                     	if	1	;There are 3 active tblptr bytes
  8802  01167A  6AF8               	clrf	tblptru,c
  8803  01167C  0E00               	movlw	low (__mediumconst shr (0+16))
  8804  01167E  22F8               	addwfc	tblptru,f,c
  8805  011680                     	endif
  8806  011680  0009               	tblrd		*+
  8807  011682  CFF5 F0E8          	movff	tablat,??_LCD_Init
  8808  011686  0009               	tblrd		*+
  8809  011688  CFF5 F0E9          	movff	tablat,??_LCD_Init+1
  8810  01168C  C0E9  F0E8         	movff	??_LCD_Init+1,??_LCD_Init
  8811  011690  6BE9               	clrf	(??_LCD_Init+1)& (0+255),b
  8812  011692  51E8               	movf	??_LCD_Init& (0+255),w,b
  8813  011694  EC49  F09C         	call	_LCD_Write
  8814  011698  D013               	goto	l90
  8815  01169A                     l89:
  8816                           
  8817                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  8818  01169A  0E01               	movlw	1
  8819  01169C  0100               	movlb	0	; () banked
  8820  01169E  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8821  0116A0  90D8               	bcf	status,0,c
  8822  0116A2  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8823  0116A4  6EF6               	movwf	tblptrl,c
  8824  0116A6  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8825  0116A8  6EF7               	movwf	tblptrh,c
  8826  0116AA  0EEB               	movlw	low _InitList
  8827  0116AC  26F6               	addwf	tblptrl,f,c
  8828  0116AE  0EFB               	movlw	high _InitList
  8829  0116B0  22F7               	addwfc	tblptrh,f,c
  8830  0116B2                     	if	1	;There are 3 active tblptr bytes
  8831  0116B2  6AF8               	clrf	tblptru,c
  8832  0116B4  0E00               	movlw	low (__mediumconst shr (0+16))
  8833  0116B6  22F8               	addwfc	tblptru,f,c
  8834  0116B8                     	endif
  8835  0116B8  0008               	tblrd		*
  8836  0116BA  50F5               	movf	tablat,w,c
  8837  0116BC  EC49  F09C         	call	_LCD_Write
  8838  0116C0                     l90:
  8839  0116C0  0100               	movlb	0	; () banked
  8840  0116C2  4BEA               	infsnz	LCD_Init@i& (0+255),f,b
  8841  0116C4  2BEB               	incf	(LCD_Init@i+1)& (0+255),f,b
  8842                           
  8843                           ; BSR set to: 0
  8844  0116C6  51EB               	movf	(LCD_Init@i+1)& (0+255),w,b
  8845  0116C8  E101               	bnz	l12950
  8846  0116CA  D783               	goto	L5
  8847  0116CC                     u9100:
  8848  0116CC                     l12950:
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;LCD.c: 185: }
  8852                           ;LCD.c: 186: }
  8853                           ;LCD.c: 187: delay_ms(100);
  8854  0116CC  0E00               	movlw	0
  8855  0116CE  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  8856  0116D0  0E64               	movlw	100
  8857  0116D2  6FB3               	movwf	delay_ms@ms& (0+255),b
  8858  0116D4  EC47  F097         	call	_delay_ms	;wreg free
  8859                           
  8860                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  8861  0116D8  0E00               	movlw	0
  8862  0116DA  0100               	movlb	0	; () banked
  8863  0116DC  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8864  0116DE  0E29               	movlw	41
  8865  0116E0  EC49  F09C         	call	_LCD_Write
  8866                           
  8867                           ;LCD.c: 189: Set_Rotation(1);
  8868  0116E4  0E01               	movlw	1
  8869  0116E6  ECF7  F091         	call	_Set_Rotation
  8870                           
  8871                           ;LCD.c: 191: delay_ms(100);
  8872  0116EA  0E00               	movlw	0
  8873  0116EC  0100               	movlb	0	; () banked
  8874  0116EE  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  8875  0116F0  0E64               	movlw	100
  8876  0116F2  6FB3               	movwf	delay_ms@ms& (0+255),b
  8877  0116F4  EC47  F097         	call	_delay_ms	;wreg free
  8878                           
  8879                           ;LCD.c: 192: LCD_Fill(0x0000);
  8880  0116F8  0E00               	movlw	0
  8881  0116FA  0100               	movlb	0	; () banked
  8882  0116FC  6FBD               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  8883  0116FE  0E00               	movlw	0
  8884  011700  6FBC               	movwf	LCD_Fill@pColour& (0+255),b
  8885  011702  EC32  F099         	call	_LCD_Fill	;wreg free
  8886  011706  0012               	return		;funcret
  8887  011708                     __end_of_LCD_Init:
  8888                           	opt stack 0
  8889                           tosu	equ	0xFFF
  8890                           tosh	equ	0xFFE
  8891                           tosl	equ	0xFFD
  8892                           pclath	equ	0xFFA
  8893                           tblptru	equ	0xFF8
  8894                           tblptrh	equ	0xFF7
  8895                           tblptrl	equ	0xFF6
  8896                           tablat	equ	0xFF5
  8897                           prodh	equ	0xFF4
  8898                           prodl	equ	0xFF3
  8899                           intcon	equ	0xFF2
  8900                           postinc0	equ	0xFEE
  8901                           wreg	equ	0xFE8
  8902                           postdec1	equ	0xFE5
  8903                           fsr1h	equ	0xFE2
  8904                           fsr1l	equ	0xFE1
  8905                           indf2	equ	0xFDF
  8906                           postinc2	equ	0xFDE
  8907                           postdec2	equ	0xFDD
  8908                           plusw2	equ	0xFDB
  8909                           fsr2h	equ	0xFDA
  8910                           fsr2l	equ	0xFD9
  8911                           status	equ	0xFD8
  8912                           
  8913 ;; *************** function _Set_Rotation *****************
  8914 ;; Defined at:
  8915 ;;		line 248 in file "Library/LCD.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;  m               1    wreg     unsigned char 
  8918 ;; Auto vars:     Size  Location     Type
  8919 ;;  m               1    5[BANK0 ] unsigned char 
  8920 ;;  rotation        1    6[BANK0 ] unsigned char 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;Total ram usage:        2 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:    9
  8937 ;; This function calls:
  8938 ;;		_LCD_Write
  8939 ;; This function is called by:
  8940 ;;		_LCD_Init
  8941 ;; This function uses a non-reentrant model
  8942 ;;
  8943                           
  8944                           	psect	text38
  8945  0123EE                     __ptext38:
  8946                           	opt stack 0
  8947  0123EE                     _Set_Rotation:
  8948                           	opt stack 20
  8949                           
  8950                           ;incstack = 0
  8951                           ;Set_Rotation@m stored from wreg
  8952  0123EE  0100               	movlb	0	; () banked
  8953  0123F0  6FB8               	movwf	Set_Rotation@m& (0+255),b
  8954                           
  8955                           ;LCD.c: 250: UINT8 rotation = 0x00;
  8956  0123F2  0E00               	movlw	0
  8957  0123F4  0100               	movlb	0	; () banked
  8958  0123F6  6FB9               	movwf	Set_Rotation@rotation& (0+255),b
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  8962  0123F8  0E00               	movlw	0
  8963  0123FA  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8964  0123FC  0E36               	movlw	54
  8965  0123FE  EC49  F09C         	call	_LCD_Write
  8966                           
  8967                           ;LCD.c: 253: rotation = (m % 4);
  8968  012402  0100               	movlb	0	; () banked
  8969  012404  51B8               	movf	Set_Rotation@m& (0+255),w,b
  8970  012406  0B03               	andlw	3
  8971  012408  6FB9               	movwf	Set_Rotation@rotation& (0+255),b
  8972                           
  8973                           ;LCD.c: 255: switch(rotation)
  8974  01240A  D02B               	goto	l117
  8975  01240C                     
  8976                           ; BSR set to: 0
  8977                           ;LCD.c: 258: {
  8978                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  8979                           
  8980                           ; BSR set to: 0
  8981  01240C  0E01               	movlw	1
  8982  01240E  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8983  012410  0EC8               	movlw	200
  8984  012412  EC49  F09C         	call	_LCD_Write
  8985                           
  8986                           ;LCD.c: 260: w = 128;
  8987  012416  0E80               	movlw	128
  8988  012418  6E50               	movwf	_w,c
  8989                           
  8990                           ;LCD.c: 261: l = 128;
  8991  01241A  0E80               	movlw	128
  8992  01241C  6E4F               	movwf	_l,c
  8993                           
  8994                           ;LCD.c: 262: break;
  8995  01241E  0012               	return	
  8996  012420                     
  8997                           ;LCD.c: 265: {
  8998                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  8999  012420  0E01               	movlw	1
  9000  012422  0100               	movlb	0	; () banked
  9001  012424  6FB6               	movwf	LCD_Write@mode& (0+255),b
  9002  012426  0EA8               	movlw	168
  9003  012428  EC49  F09C         	call	_LCD_Write
  9004                           
  9005                           ;LCD.c: 267: w = 128;
  9006  01242C  0E80               	movlw	128
  9007  01242E  6E50               	movwf	_w,c
  9008                           
  9009                           ;LCD.c: 268: l = 128;
  9010  012430  0E80               	movlw	128
  9011  012432  6E4F               	movwf	_l,c
  9012                           
  9013                           ;LCD.c: 269: break;
  9014  012434  0012               	return	
  9015  012436                     
  9016                           ;LCD.c: 272: {
  9017                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  9018  012436  0E01               	movlw	1
  9019  012438  0100               	movlb	0	; () banked
  9020  01243A  6FB6               	movwf	LCD_Write@mode& (0+255),b
  9021  01243C  0E08               	movlw	8
  9022  01243E  EC49  F09C         	call	_LCD_Write
  9023                           
  9024                           ;LCD.c: 274: w = 128;
  9025  012442  0E80               	movlw	128
  9026  012444  6E50               	movwf	_w,c
  9027                           
  9028                           ;LCD.c: 275: l = 128;
  9029  012446  0E80               	movlw	128
  9030  012448  6E4F               	movwf	_l,c
  9031                           
  9032                           ;LCD.c: 276: break;
  9033  01244A  0012               	return	
  9034  01244C                     
  9035                           ;LCD.c: 279: {
  9036                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  9037  01244C  0E01               	movlw	1
  9038  01244E  0100               	movlb	0	; () banked
  9039  012450  6FB6               	movwf	LCD_Write@mode& (0+255),b
  9040  012452  0E68               	movlw	104
  9041  012454  EC49  F09C         	call	_LCD_Write
  9042                           
  9043                           ;LCD.c: 281: w = 128;
  9044  012458  0E80               	movlw	128
  9045  01245A  6E50               	movwf	_w,c
  9046                           
  9047                           ;LCD.c: 282: l = 128;
  9048  01245C  0E80               	movlw	128
  9049  01245E  6E4F               	movwf	_l,c
  9050                           
  9051                           ;LCD.c: 284: }
  9052                           ;LCD.c: 285: }
  9053                           
  9054                           ;LCD.c: 283: break;
  9055  012460  0012               	return	
  9056  012462                     l117:
  9057  012462  0100               	movlb	0	; () banked
  9058  012464  51B9               	movf	Set_Rotation@rotation& (0+255),w,b
  9059                           
  9060                           ; Switch size 1, requested type "space"
  9061                           ; Number of cases is 4, Range of values is 0 to 3
  9062                           ; switch strategies available:
  9063                           ; Name         Instructions Cycles
  9064                           ; simple_byte           13     7 (average)
  9065                           ;	Chosen strategy is simple_byte
  9066  012466  0A00               	xorlw	0	; case 0
  9067  012468  B4D8               	btfsc	status,2,c
  9068  01246A  D7D0               	goto	l118
  9069  01246C  0A01               	xorlw	1	; case 1
  9070  01246E  B4D8               	btfsc	status,2,c
  9071  012470  D7D7               	goto	l120
  9072  012472  0A03               	xorlw	3	; case 2
  9073  012474  B4D8               	btfsc	status,2,c
  9074  012476  D7DF               	goto	l121
  9075  012478  0A01               	xorlw	1	; case 3
  9076  01247A  A4D8               	btfss	status,2,c
  9077  01247C  0012               	return	
  9078  01247E  D7E6               	goto	l122
  9079  012480                     __end_of_Set_Rotation:
  9080                           	opt stack 0
  9081                           tosu	equ	0xFFF
  9082                           tosh	equ	0xFFE
  9083                           tosl	equ	0xFFD
  9084                           pclath	equ	0xFFA
  9085                           tblptru	equ	0xFF8
  9086                           tblptrh	equ	0xFF7
  9087                           tblptrl	equ	0xFF6
  9088                           tablat	equ	0xFF5
  9089                           prodh	equ	0xFF4
  9090                           prodl	equ	0xFF3
  9091                           intcon	equ	0xFF2
  9092                           postinc0	equ	0xFEE
  9093                           wreg	equ	0xFE8
  9094                           postdec1	equ	0xFE5
  9095                           fsr1h	equ	0xFE2
  9096                           fsr1l	equ	0xFE1
  9097                           indf2	equ	0xFDF
  9098                           postinc2	equ	0xFDE
  9099                           postdec2	equ	0xFDD
  9100                           plusw2	equ	0xFDB
  9101                           fsr2h	equ	0xFDA
  9102                           fsr2l	equ	0xFD9
  9103                           status	equ	0xFD8
  9104                           
  9105 ;; *************** function _LCD_Fill *****************
  9106 ;; Defined at:
  9107 ;;		line 287 in file "Library/LCD.c"
  9108 ;; Parameters:    Size  Location     Type
  9109 ;;  pColour         2    9[BANK0 ] unsigned short 
  9110 ;; Auto vars:     Size  Location     Type
  9111 ;;  j               1   12[BANK0 ] unsigned char 
  9112 ;;  i               1   11[BANK0 ] unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9122 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;Total ram usage:        4 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:   10
  9129 ;; This function calls:
  9130 ;;		_LCD_Word_Write
  9131 ;;		_Set_Addr_Window
  9132 ;; This function is called by:
  9133 ;;		_LCD_Init
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text39
  9138  013264                     __ptext39:
  9139                           	opt stack 0
  9140  013264                     _LCD_Fill:
  9141                           	opt stack 19
  9142                           
  9143                           ;LCD.c: 296: UINT8 i = 0x00;
  9144                           
  9145                           ;incstack = 0
  9146  013264  0E00               	movlw	0
  9147  013266  0100               	movlb	0	; () banked
  9148  013268  6FBE               	movwf	LCD_Fill@i& (0+255),b
  9149                           
  9150                           ;LCD.c: 297: UINT8 j = 0x00;
  9151  01326A  0E00               	movlw	0
  9152  01326C  6FBF               	movwf	LCD_Fill@j& (0+255),b
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  9156  01326E  0E00               	movlw	0
  9157  013270  6FB8               	movwf	Set_Addr_Window@ys& (0+255),b
  9158  013272  0450               	decf	_w,w,c
  9159  013274  6FB9               	movwf	Set_Addr_Window@xe& (0+255),b
  9160  013276  044F               	decf	_l,w,c
  9161  013278  6FBA               	movwf	Set_Addr_Window@ye& (0+255),b
  9162  01327A  0E00               	movlw	0
  9163  01327C  EC60  F091         	call	_Set_Addr_Window
  9164                           
  9165                           ;LCD.c: 299: for (j = l; j > 0; j--)
  9166  013280  C04F  F0BF         	movff	_l,LCD_Fill@j
  9167  013284  0100               	movlb	0	; () banked
  9168  013286  51BF               	movf	LCD_Fill@j& (0+255),w,b
  9169  013288  B4D8               	btfsc	status,2,c
  9170  01328A  0012               	return	
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;LCD.c: 300: for (i = w; i > 0; i--)
  9174                           
  9175                           ; BSR set to: 0
  9176  01328C  C050  F0BE         	movff	_w,LCD_Fill@i
  9177  013290                     l12712:
  9178                           
  9179                           ; BSR set to: 0
  9180  013290  51BE               	movf	LCD_Fill@i& (0+255),w,b
  9181  013292  B4D8               	btfsc	status,2,c
  9182  013294  D009               	goto	u8830
  9183                           
  9184                           ; BSR set to: 0
  9185                           ;LCD.c: 301: LCD_Word_Write(pColour);
  9186                           
  9187                           ; BSR set to: 0
  9188                           
  9189                           ; BSR set to: 0
  9190  013296  C0BC  F0B8         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  9191  01329A  C0BD  F0B9         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  9192  01329E  EC84  F09C         	call	_LCD_Word_Write	;wreg free
  9193  0132A2  0100               	movlb	0	; () banked
  9194  0132A4  07BE               	decf	LCD_Fill@i& (0+255),f,b
  9195  0132A6  D7F4               	goto	l12712
  9196  0132A8                     u8830:
  9197                           
  9198                           ; BSR set to: 0
  9199                           
  9200                           ; BSR set to: 0
  9201  0132A8  07BF               	decf	LCD_Fill@j& (0+255),f,b
  9202  0132AA  D7ED               	goto	L6
  9203  0132AC                     __end_of_LCD_Fill:
  9204                           	opt stack 0
  9205                           tosu	equ	0xFFF
  9206                           tosh	equ	0xFFE
  9207                           tosl	equ	0xFFD
  9208                           pclath	equ	0xFFA
  9209                           tblptru	equ	0xFF8
  9210                           tblptrh	equ	0xFF7
  9211                           tblptrl	equ	0xFF6
  9212                           tablat	equ	0xFF5
  9213                           prodh	equ	0xFF4
  9214                           prodl	equ	0xFF3
  9215                           intcon	equ	0xFF2
  9216                           postinc0	equ	0xFEE
  9217                           wreg	equ	0xFE8
  9218                           postdec1	equ	0xFE5
  9219                           fsr1h	equ	0xFE2
  9220                           fsr1l	equ	0xFE1
  9221                           indf2	equ	0xFDF
  9222                           postinc2	equ	0xFDE
  9223                           postdec2	equ	0xFDD
  9224                           plusw2	equ	0xFDB
  9225                           fsr2h	equ	0xFDA
  9226                           fsr2l	equ	0xFD9
  9227                           status	equ	0xFD8
  9228                           
  9229 ;; *************** function _Configure_GPIOs *****************
  9230 ;; Defined at:
  9231 ;;		line 46 in file "Library/LCD.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;		None
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;		None
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  1    wreg      void 
  9238 ;; Registers used:
  9239 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;Total ram usage:        0 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:   14
  9252 ;; This function calls:
  9253 ;;		_LCD_Reset
  9254 ;;		_Port_SetPinType
  9255 ;;		_SPI_Init
  9256 ;;		_SPI_MaxSpeed
  9257 ;; This function is called by:
  9258 ;;		_LCD_Init
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           	psect	text40
  9263  012E30                     __ptext40:
  9264                           	opt stack 0
  9265  012E30                     _Configure_GPIOs:
  9266                           	opt stack 15
  9267                           
  9268                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;incstack = 0
  9272  012E30  0EAE               	movlw	low _PortF
  9273  012E32  0100               	movlb	0	; () banked
  9274  012E34  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  9275  012E36  0E01               	movlw	high _PortF
  9276  012E38  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9277  012E3A  0E07               	movlw	7
  9278  012E3C  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  9279  012E3E  0E03               	movlw	3
  9280  012E40  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  9281  012E42  EC34  F087         	call	_Port_SetPinType	;wreg free
  9282                           
  9283                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9284  012E46  0EAE               	movlw	low _PortF
  9285  012E48  0100               	movlb	0	; () banked
  9286  012E4A  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  9287  012E4C  0E01               	movlw	high _PortF
  9288  012E4E  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9289  012E50  0E06               	movlw	6
  9290  012E52  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  9291  012E54  0E03               	movlw	3
  9292  012E56  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  9293  012E58  EC34  F087         	call	_Port_SetPinType	;wreg free
  9294                           
  9295                           ;LCD.c: 55: LCD_Reset();
  9296  012E5C  EC98  F098         	call	_LCD_Reset	;wreg free
  9297                           
  9298                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9299  012E60  0EC0               	movlw	192
  9300  012E62  0100               	movlb	0	; () banked
  9301  012E64  6FE0               	movwf	SPI_Init@pClock& (0+255),b
  9302  012E66  0EC6               	movlw	198
  9303  012E68  6FE1               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9304  012E6A  0E2D               	movlw	45
  9305  012E6C  6FE2               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9306  012E6E  0E00               	movlw	0
  9307  012E70  6FE3               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9308  012E72  0E01               	movlw	1
  9309  012E74  6FE4               	movwf	SPI_Init@pChannel& (0+255),b
  9310  012E76  0E01               	movlw	1
  9311  012E78  6FE5               	movwf	SPI_Init@pMode& (0+255),b
  9312  012E7A  EC00  F080         	call	_SPI_Init	;wreg free
  9313                           
  9314                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9315  012E7E  0E71               	movlw	low _SPI2
  9316  012E80  0100               	movlb	0	; () banked
  9317  012E82  6FC2               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9318  012E84  0E01               	movlw	high _SPI2
  9319  012E86  6FC3               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9320  012E88  EC1C  F096         	call	_SPI_MaxSpeed	;wreg free
  9321  012E8C  0012               	return		;funcret
  9322  012E8E                     __end_of_Configure_GPIOs:
  9323                           	opt stack 0
  9324                           tosu	equ	0xFFF
  9325                           tosh	equ	0xFFE
  9326                           tosl	equ	0xFFD
  9327                           pclath	equ	0xFFA
  9328                           tblptru	equ	0xFF8
  9329                           tblptrh	equ	0xFF7
  9330                           tblptrl	equ	0xFF6
  9331                           tablat	equ	0xFF5
  9332                           prodh	equ	0xFF4
  9333                           prodl	equ	0xFF3
  9334                           intcon	equ	0xFF2
  9335                           postinc0	equ	0xFEE
  9336                           wreg	equ	0xFE8
  9337                           postdec1	equ	0xFE5
  9338                           fsr1h	equ	0xFE2
  9339                           fsr1l	equ	0xFE1
  9340                           indf2	equ	0xFDF
  9341                           postinc2	equ	0xFDE
  9342                           postdec2	equ	0xFDD
  9343                           plusw2	equ	0xFDB
  9344                           fsr2h	equ	0xFDA
  9345                           fsr2l	equ	0xFD9
  9346                           status	equ	0xFD8
  9347                           
  9348 ;; *************** function _SPI_MaxSpeed *****************
  9349 ;; Defined at:
  9350 ;;		line 201 in file "Library/SPI.c"
  9351 ;; Parameters:    Size  Location     Type
  9352 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9353 ;;		 -> SPI2(11), 
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;		None
  9356 ;; Return value:  Size  Location     Type
  9357 ;;                  1    wreg      void 
  9358 ;; Registers used:
  9359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9365 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;Total ram usage:        2 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; Hardware stack levels required when called:    9
  9372 ;; This function calls:
  9373 ;;		_Byte_SetBit
  9374 ;;		_Byte_SetQuad
  9375 ;; This function is called by:
  9376 ;;		_Configure_GPIOs
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           	psect	text41
  9381  012C38                     __ptext41:
  9382                           	opt stack 0
  9383  012C38                     _SPI_MaxSpeed:
  9384                           	opt stack 19
  9385                           
  9386                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9387                           
  9388                           ;incstack = 0
  9389  012C38  0100               	movlb	0	; () banked
  9390  012C3A  EE20 F006          	lfsr	2,6
  9391  012C3E  51C2               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9392  012C40  26D9               	addwf	fsr2l,f,c
  9393  012C42  51C3               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9394  012C44  22DA               	addwfc	fsr2h,f,c
  9395  012C46  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
  9396  012C4A  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
  9397  012C4E  0E05               	movlw	5
  9398  012C50  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
  9399  012C52  0E00               	movlw	0
  9400  012C54  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
  9401  012C56  EC47  F098         	call	_Byte_SetBit	;wreg free
  9402                           
  9403                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  9404  012C5A  0100               	movlb	0	; () banked
  9405  012C5C  EE20 F006          	lfsr	2,6
  9406  012C60  51C2               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9407  012C62  26D9               	addwf	fsr2l,f,c
  9408  012C64  51C3               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9409  012C66  22DA               	addwfc	fsr2h,f,c
  9410  012C68  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
  9411  012C6C  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
  9412  012C70  0E00               	movlw	0
  9413  012C72  6FC0               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9414  012C74  0E00               	movlw	0
  9415  012C76  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
  9416  012C78  EC39  F09C         	call	_Byte_SetQuad	;wreg free
  9417                           
  9418                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9419  012C7C  0100               	movlb	0	; () banked
  9420  012C7E  EE20 F006          	lfsr	2,6
  9421  012C82  51C2               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9422  012C84  26D9               	addwf	fsr2l,f,c
  9423  012C86  51C3               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9424  012C88  22DA               	addwfc	fsr2h,f,c
  9425  012C8A  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
  9426  012C8E  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
  9427  012C92  0E05               	movlw	5
  9428  012C94  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
  9429  012C96  0E01               	movlw	1
  9430  012C98  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
  9431  012C9A  EC47  F098         	call	_Byte_SetBit	;wreg free
  9432  012C9E  0012               	return		;funcret
  9433  012CA0                     __end_of_SPI_MaxSpeed:
  9434                           	opt stack 0
  9435                           tosu	equ	0xFFF
  9436                           tosh	equ	0xFFE
  9437                           tosl	equ	0xFFD
  9438                           pclath	equ	0xFFA
  9439                           tblptru	equ	0xFF8
  9440                           tblptrh	equ	0xFF7
  9441                           tblptrl	equ	0xFF6
  9442                           tablat	equ	0xFF5
  9443                           prodh	equ	0xFF4
  9444                           prodl	equ	0xFF3
  9445                           intcon	equ	0xFF2
  9446                           postinc0	equ	0xFEE
  9447                           wreg	equ	0xFE8
  9448                           postdec1	equ	0xFE5
  9449                           fsr1h	equ	0xFE2
  9450                           fsr1l	equ	0xFE1
  9451                           indf2	equ	0xFDF
  9452                           postinc2	equ	0xFDE
  9453                           postdec2	equ	0xFDD
  9454                           plusw2	equ	0xFDB
  9455                           fsr2h	equ	0xFDA
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function _LCD_Reset *****************
  9460 ;; Defined at:
  9461 ;;		line 95 in file "Library/LCD.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;Total ram usage:        0 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:   13
  9482 ;; This function calls:
  9483 ;;		_LED_Toggle
  9484 ;;		_Reset_High
  9485 ;;		_Reset_Low
  9486 ;;		_delay_ms
  9487 ;; This function is called by:
  9488 ;;		_Configure_GPIOs
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           	psect	text42
  9493  013130                     __ptext42:
  9494                           	opt stack 0
  9495  013130                     _LCD_Reset:
  9496                           	opt stack 15
  9497                           
  9498                           ;LCD.c: 97: Reset_High();
  9499                           
  9500                           ;incstack = 0
  9501  013130  ECB6  F09C         	call	_Reset_High	;wreg free
  9502                           
  9503                           ;LCD.c: 98: LED_Toggle(eLED2);
  9504  013134  0E01               	movlw	1
  9505  013136  ECDD  F099         	call	_LED_Toggle
  9506                           
  9507                           ;LCD.c: 99: delay_ms(0x80);
  9508  01313A  0E00               	movlw	0
  9509  01313C  0100               	movlb	0	; () banked
  9510  01313E  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  9511  013140  0E80               	movlw	128
  9512  013142  6FB3               	movwf	delay_ms@ms& (0+255),b
  9513  013144  EC47  F097         	call	_delay_ms	;wreg free
  9514                           
  9515                           ;LCD.c: 100: LED_Toggle(eLED2);
  9516  013148  0E01               	movlw	1
  9517  01314A  ECDD  F099         	call	_LED_Toggle
  9518                           
  9519                           ;LCD.c: 101: Reset_Low();
  9520  01314E  ECAA  F09C         	call	_Reset_Low	;wreg free
  9521                           
  9522                           ;LCD.c: 102: delay_ms(0x80);
  9523  013152  0E00               	movlw	0
  9524  013154  0100               	movlb	0	; () banked
  9525  013156  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  9526  013158  0E80               	movlw	128
  9527  01315A  6FB3               	movwf	delay_ms@ms& (0+255),b
  9528  01315C  EC47  F097         	call	_delay_ms	;wreg free
  9529                           
  9530                           ;LCD.c: 103: LED_Toggle(eLED2);
  9531  013160  0E01               	movlw	1
  9532  013162  ECDD  F099         	call	_LED_Toggle
  9533                           
  9534                           ;LCD.c: 104: Reset_High();
  9535  013166  ECB6  F09C         	call	_Reset_High	;wreg free
  9536                           
  9537                           ;LCD.c: 105: delay_ms(0x80);
  9538  01316A  0E00               	movlw	0
  9539  01316C  0100               	movlb	0	; () banked
  9540  01316E  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  9541  013170  0E80               	movlw	128
  9542  013172  6FB3               	movwf	delay_ms@ms& (0+255),b
  9543  013174  EC47  F097         	call	_delay_ms	;wreg free
  9544                           
  9545                           ;LCD.c: 106: LED_Toggle(eLED2);
  9546  013178  0E01               	movlw	1
  9547  01317A  ECDD  F099         	call	_LED_Toggle
  9548  01317E  0012               	return		;funcret
  9549  013180                     __end_of_LCD_Reset:
  9550                           	opt stack 0
  9551                           tosu	equ	0xFFF
  9552                           tosh	equ	0xFFE
  9553                           tosl	equ	0xFFD
  9554                           pclath	equ	0xFFA
  9555                           tblptru	equ	0xFF8
  9556                           tblptrh	equ	0xFF7
  9557                           tblptrl	equ	0xFF6
  9558                           tablat	equ	0xFF5
  9559                           prodh	equ	0xFF4
  9560                           prodl	equ	0xFF3
  9561                           intcon	equ	0xFF2
  9562                           postinc0	equ	0xFEE
  9563                           wreg	equ	0xFE8
  9564                           postdec1	equ	0xFE5
  9565                           fsr1h	equ	0xFE2
  9566                           fsr1l	equ	0xFE1
  9567                           indf2	equ	0xFDF
  9568                           postinc2	equ	0xFDE
  9569                           postdec2	equ	0xFDD
  9570                           plusw2	equ	0xFDB
  9571                           fsr2h	equ	0xFDA
  9572                           fsr2l	equ	0xFD9
  9573                           status	equ	0xFD8
  9574                           
  9575 ;; *************** function _delay_ms *****************
  9576 ;; Defined at:
  9577 ;;		line 240 in file "Library/Types.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;  ms              2    0[BANK0 ] unsigned short 
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;  u               4    2[BANK0 ] volatile unsigned long 
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  1    wreg      void 
  9584 ;; Registers used:
  9585 ;;		wreg, status,2, status,0
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9591 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9592 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;Total ram usage:        6 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; Hardware stack levels required when called:    7
  9598 ;; This function calls:
  9599 ;;		Nothing
  9600 ;; This function is called by:
  9601 ;;		_LCD_Reset
  9602 ;;		_LCD_Init
  9603 ;;		_MXK_Init
  9604 ;;		_SteppingCCW
  9605 ;;		_SteppingCW
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           	psect	text43
  9610  012E8E                     __ptext43:
  9611                           	opt stack 0
  9612  012E8E                     _delay_ms:
  9613                           	opt stack 22
  9614                           
  9615                           ;Types.c: 242: volatile unsigned long u;
  9616                           ;Types.c: 243: while (ms--)
  9617                           
  9618                           ;incstack = 0
  9619  012E8E  D01B               	goto	u8290
  9620  012E90                     l11978:
  9621                           
  9622                           ;Types.c: 244: {
  9623                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
  9624  012E90  0E00               	movlw	0
  9625  012E92  0100               	movlb	0	; () banked
  9626  012E94  6FB5               	movwf	delay_ms@u& (0+255),b	;volatile
  9627  012E96  0E00               	movlw	0
  9628  012E98  6FB6               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  9629  012E9A  0E00               	movlw	0
  9630  012E9C  6FB7               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  9631  012E9E  0E00               	movlw	0
  9632  012EA0  6FB8               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  9633  012EA2                     l11980:
  9634                           
  9635                           ; BSR set to: 0
  9636  012EA2  51B8               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
  9637  012EA4  11B7               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
  9638  012EA6  E10F               	bnz	l11986
  9639  012EA8  0EB0               	movlw	176
  9640  012EAA  5DB5               	subwf	delay_ms@u& (0+255),w,b	;volatile
  9641  012EAC  0E04               	movlw	4
  9642  012EAE  59B6               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
  9643  012EB0  B0D8               	btfsc	status,0,c
  9644  012EB2  D009               	goto	u8290
  9645                           
  9646                           ; BSR set to: 0
  9647                           
  9648                           ; BSR set to: 0
  9649  012EB4  F000               	nop		; ;# 
  9650  012EB6  0E01               	movlw	1
  9651  012EB8  0100               	movlb	0	; () banked
  9652  012EBA  27B5               	addwf	delay_ms@u& (0+255),f,b	;volatile
  9653  012EBC  0E00               	movlw	0
  9654  012EBE  23B6               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
  9655  012EC0  23B7               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
  9656  012EC2  23B8               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
  9657  012EC4  D7EE               	goto	l11980
  9658  012EC6                     u8290:
  9659  012EC6                     l11986:
  9660  012EC6  0100               	movlb	0	; () banked
  9661  012EC8  07B3               	decf	delay_ms@ms& (0+255),f,b
  9662  012ECA  A0D8               	btfss	status,0,c
  9663  012ECC  07B4               	decf	(delay_ms@ms+1)& (0+255),f,b
  9664  012ECE  29B3               	incf	delay_ms@ms& (0+255),w,b
  9665  012ED0  E1DF               	bnz	l11978
  9666  012ED2  29B4               	incf	(delay_ms@ms+1)& (0+255),w,b
  9667  012ED4  A4D8               	btfss	status,2,c
  9668  012ED6  D7DC               	goto	l824
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;Types.c: 251: }
  9672                           ;Types.c: 252: }
  9673                           ;Types.c: 253: u = 0x8008;
  9674                           
  9675                           ; BSR set to: 0
  9676  012ED8  0E08               	movlw	8
  9677  012EDA  6FB5               	movwf	delay_ms@u& (0+255),b	;volatile
  9678  012EDC  0E80               	movlw	128
  9679  012EDE  6FB6               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  9680  012EE0  0E00               	movlw	0
  9681  012EE2  6FB7               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  9682  012EE4  0E00               	movlw	0
  9683  012EE6  6FB8               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  9684                           
  9685                           ; BSR set to: 0
  9686  012EE8  0012               	return		;funcret
  9687  012EEA                     __end_of_delay_ms:
  9688                           	opt stack 0
  9689                           tosu	equ	0xFFF
  9690                           tosh	equ	0xFFE
  9691                           tosl	equ	0xFFD
  9692                           pclath	equ	0xFFA
  9693                           tblptru	equ	0xFF8
  9694                           tblptrh	equ	0xFF7
  9695                           tblptrl	equ	0xFF6
  9696                           tablat	equ	0xFF5
  9697                           prodh	equ	0xFF4
  9698                           prodl	equ	0xFF3
  9699                           intcon	equ	0xFF2
  9700                           postinc0	equ	0xFEE
  9701                           wreg	equ	0xFE8
  9702                           postdec1	equ	0xFE5
  9703                           fsr1h	equ	0xFE2
  9704                           fsr1l	equ	0xFE1
  9705                           indf2	equ	0xFDF
  9706                           postinc2	equ	0xFDE
  9707                           postdec2	equ	0xFDD
  9708                           plusw2	equ	0xFDB
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function _Reset_Low *****************
  9714 ;; Defined at:
  9715 ;;		line 32 in file "Library/LCD.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      void 
  9722 ;; Registers used:
  9723 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;Total ram usage:        0 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:   11
  9736 ;; This function calls:
  9737 ;;		_Port_SetPin
  9738 ;; This function is called by:
  9739 ;;		_LCD_Reset
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           	psect	text44
  9744  013954                     __ptext44:
  9745                           	opt stack 0
  9746  013954                     _Reset_Low:
  9747                           	opt stack 16
  9748                           
  9749                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;incstack = 0
  9753  013954  0EAE               	movlw	low _PortF
  9754  013956  0100               	movlb	0	; () banked
  9755  013958  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  9756  01395A  0E01               	movlw	high _PortF
  9757  01395C  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9758  01395E  0E06               	movlw	6
  9759  013960  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  9760  013962  0E01               	movlw	1
  9761  013964  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  9762  013966  EC61  F08F         	call	_Port_SetPin	;wreg free
  9763  01396A  0012               	return		;funcret
  9764  01396C                     __end_of_Reset_Low:
  9765                           	opt stack 0
  9766                           tosu	equ	0xFFF
  9767                           tosh	equ	0xFFE
  9768                           tosl	equ	0xFFD
  9769                           pclath	equ	0xFFA
  9770                           tblptru	equ	0xFF8
  9771                           tblptrh	equ	0xFF7
  9772                           tblptrl	equ	0xFF6
  9773                           tablat	equ	0xFF5
  9774                           prodh	equ	0xFF4
  9775                           prodl	equ	0xFF3
  9776                           intcon	equ	0xFF2
  9777                           postinc0	equ	0xFEE
  9778                           wreg	equ	0xFE8
  9779                           postdec1	equ	0xFE5
  9780                           fsr1h	equ	0xFE2
  9781                           fsr1l	equ	0xFE1
  9782                           indf2	equ	0xFDF
  9783                           postinc2	equ	0xFDE
  9784                           postdec2	equ	0xFDD
  9785                           plusw2	equ	0xFDB
  9786                           fsr2h	equ	0xFDA
  9787                           fsr2l	equ	0xFD9
  9788                           status	equ	0xFD8
  9789                           
  9790 ;; *************** function _Reset_High *****************
  9791 ;; Defined at:
  9792 ;;		line 36 in file "Library/LCD.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;		None
  9795 ;; Auto vars:     Size  Location     Type
  9796 ;;		None
  9797 ;; Return value:  Size  Location     Type
  9798 ;;                  1    wreg      void 
  9799 ;; Registers used:
  9800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9801 ;; Tracked objects:
  9802 ;;		On entry : 0/0
  9803 ;;		On exit  : 0/0
  9804 ;;		Unchanged: 0/0
  9805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9810 ;;Total ram usage:        0 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; Hardware stack levels required when called:   11
  9813 ;; This function calls:
  9814 ;;		_Port_SetPin
  9815 ;; This function is called by:
  9816 ;;		_LCD_Reset
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           	psect	text45
  9821  01396C                     __ptext45:
  9822                           	opt stack 0
  9823  01396C                     _Reset_High:
  9824                           	opt stack 16
  9825                           
  9826                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
  9827                           
  9828                           ;incstack = 0
  9829  01396C  0EAE               	movlw	low _PortF
  9830  01396E  0100               	movlb	0	; () banked
  9831  013970  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  9832  013972  0E01               	movlw	high _PortF
  9833  013974  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9834  013976  0E06               	movlw	6
  9835  013978  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  9836  01397A  0E00               	movlw	0
  9837  01397C  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  9838  01397E  EC61  F08F         	call	_Port_SetPin	;wreg free
  9839  013982  0012               	return		;funcret
  9840  013984                     __end_of_Reset_High:
  9841                           	opt stack 0
  9842                           tosu	equ	0xFFF
  9843                           tosh	equ	0xFFE
  9844                           tosl	equ	0xFFD
  9845                           pclath	equ	0xFFA
  9846                           tblptru	equ	0xFF8
  9847                           tblptrh	equ	0xFF7
  9848                           tblptrl	equ	0xFF6
  9849                           tablat	equ	0xFF5
  9850                           prodh	equ	0xFF4
  9851                           prodl	equ	0xFF3
  9852                           intcon	equ	0xFF2
  9853                           postinc0	equ	0xFEE
  9854                           wreg	equ	0xFE8
  9855                           postdec1	equ	0xFE5
  9856                           fsr1h	equ	0xFE2
  9857                           fsr1l	equ	0xFE1
  9858                           indf2	equ	0xFDF
  9859                           postinc2	equ	0xFDE
  9860                           postdec2	equ	0xFDD
  9861                           plusw2	equ	0xFDB
  9862                           fsr2h	equ	0xFDA
  9863                           fsr2l	equ	0xFD9
  9864                           status	equ	0xFD8
  9865                           
  9866 ;; *************** function _Init_Timer0 *****************
  9867 ;; Defined at:
  9868 ;;		line 77 in file "main.c"
  9869 ;; Parameters:    Size  Location     Type
  9870 ;;		None
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;		None
  9873 ;; Return value:  Size  Location     Type
  9874 ;;                  2  2120[None  ] int 
  9875 ;; Registers used:
  9876 ;;		None
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;Total ram usage:        0 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    7
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		_main
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           	psect	text46
  9897  013984                     __ptext46:
  9898                           	opt stack 0
  9899  013984                     _Init_Timer0:
  9900                           	opt stack 23
  9901                           
  9902                           ;main.c: 78: T0CONbits.TMR0ON = 1;
  9903                           
  9904                           ;incstack = 0
  9905  013984  8ED5               	bsf	4053,7,c	;volatile
  9906                           
  9907                           ;main.c: 79: T0CONbits.T08BIT = 1;
  9908  013986  8CD5               	bsf	4053,6,c	;volatile
  9909                           
  9910                           ;main.c: 80: T0CONbits.T0CS = 0;
  9911  013988  9AD5               	bcf	4053,5,c	;volatile
  9912                           
  9913                           ;main.c: 81: T0CONbits.T0SE = 0;
  9914  01398A  98D5               	bcf	4053,4,c	;volatile
  9915                           
  9916                           ;main.c: 82: T0CONbits.PSA = 0;
  9917  01398C  96D5               	bcf	4053,3,c	;volatile
  9918                           
  9919                           ;main.c: 83: T0CONbits.T0PS2 = 1;
  9920  01398E  84D5               	bsf	4053,2,c	;volatile
  9921                           
  9922                           ;main.c: 84: T0CONbits.T0PS1 = 1;
  9923  013990  82D5               	bsf	4053,1,c	;volatile
  9924                           
  9925                           ;main.c: 85: T0CONbits.T0PS0 = 1;
  9926  013992  80D5               	bsf	4053,0,c	;volatile
  9927                           
  9928                           ;main.c: 86: INTCONbits.TMR0IE = 1;
  9929  013994  8AF2               	bsf	intcon,5,c	;volatile
  9930                           
  9931                           ;main.c: 87: INTCONbits.PEIE = 1;
  9932  013996  8CF2               	bsf	intcon,6,c	;volatile
  9933                           
  9934                           ;main.c: 88: INTCONbits.GIE = 1;
  9935  013998  8EF2               	bsf	intcon,7,c	;volatile
  9936  01399A  0012               	return		;funcret
  9937  01399C                     __end_of_Init_Timer0:
  9938                           	opt stack 0
  9939                           tosu	equ	0xFFF
  9940                           tosh	equ	0xFFE
  9941                           tosl	equ	0xFFD
  9942                           pclath	equ	0xFFA
  9943                           tblptru	equ	0xFF8
  9944                           tblptrh	equ	0xFF7
  9945                           tblptrl	equ	0xFF6
  9946                           tablat	equ	0xFF5
  9947                           prodh	equ	0xFF4
  9948                           prodl	equ	0xFF3
  9949                           intcon	equ	0xFF2
  9950                           postinc0	equ	0xFEE
  9951                           wreg	equ	0xFE8
  9952                           postdec1	equ	0xFE5
  9953                           fsr1h	equ	0xFE2
  9954                           fsr1l	equ	0xFE1
  9955                           indf2	equ	0xFDF
  9956                           postinc2	equ	0xFDE
  9957                           postdec2	equ	0xFDD
  9958                           plusw2	equ	0xFDB
  9959                           fsr2h	equ	0xFDA
  9960                           fsr2l	equ	0xFD9
  9961                           status	equ	0xFD8
  9962                           
  9963 ;; *************** function _InitSerialCommunication *****************
  9964 ;; Defined at:
  9965 ;;		line 136 in file "main.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;		None
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;		None
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      void 
  9972 ;; Registers used:
  9973 ;;		wreg, status,2
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9983 ;;Total ram usage:        0 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    7
  9986 ;; This function calls:
  9987 ;;		Nothing
  9988 ;; This function is called by:
  9989 ;;		_main
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           	psect	text47
  9994  0138B2                     __ptext47:
  9995                           	opt stack 0
  9996  0138B2                     _InitSerialCommunication:
  9997                           	opt stack 23
  9998                           
  9999                           ;main.c: 138: TRISCbits.TRISC6 = 0;
 10000                           
 10001                           ;incstack = 0
 10002  0138B2  9C94               	bcf	3988,6,c	;volatile
 10003                           
 10004                           ;main.c: 139: TRISCbits.TRISC7 = 1;
 10005  0138B4  8E94               	bsf	3988,7,c	;volatile
 10006                           
 10007                           ;main.c: 140: TXSTA1 = 0b00100100;
 10008  0138B6  0E24               	movlw	36
 10009  0138B8  6EAD               	movwf	4013,c	;volatile
 10010                           
 10011                           ;main.c: 141: RCSTA1 = 0b10010000;
 10012  0138BA  0E90               	movlw	144
 10013  0138BC  6EAC               	movwf	4012,c	;volatile
 10014                           
 10015                           ;main.c: 142: BAUDCON1bits.DTRXP = 0;
 10016  0138BE  9A7E               	bcf	3966,5,c	;volatile
 10017                           
 10018                           ;main.c: 143: BAUDCON1bits.SCKP = 0;
 10019  0138C0  987E               	bcf	3966,4,c	;volatile
 10020                           
 10021                           ;main.c: 144: BAUDCON1bits.WUE = 0;
 10022  0138C2  927E               	bcf	3966,1,c	;volatile
 10023                           
 10024                           ;main.c: 145: BAUDCON1bits.ABDEN = 0;
 10025  0138C4  907E               	bcf	3966,0,c	;volatile
 10026                           
 10027                           ;main.c: 147: TXSTA1bits.BRGH = 1;
 10028  0138C6  84AD               	bsf	4013,2,c	;volatile
 10029                           
 10030                           ;main.c: 148: BAUDCON1bits.BRG16 = 0;
 10031  0138C8  967E               	bcf	3966,3,c	;volatile
 10032                           
 10033                           ;main.c: 149: SPBRG1 = 51;
 10034  0138CA  0E33               	movlw	51
 10035  0138CC  6EB0               	movwf	4016,c	;volatile
 10036  0138CE  0012               	return		;funcret
 10037  0138D0                     __end_of_InitSerialCommunication:
 10038                           	opt stack 0
 10039                           tosu	equ	0xFFF
 10040                           tosh	equ	0xFFE
 10041                           tosl	equ	0xFFD
 10042                           pclath	equ	0xFFA
 10043                           tblptru	equ	0xFF8
 10044                           tblptrh	equ	0xFF7
 10045                           tblptrl	equ	0xFF6
 10046                           tablat	equ	0xFF5
 10047                           prodh	equ	0xFF4
 10048                           prodl	equ	0xFF3
 10049                           intcon	equ	0xFF2
 10050                           postinc0	equ	0xFEE
 10051                           wreg	equ	0xFE8
 10052                           postdec1	equ	0xFE5
 10053                           fsr1h	equ	0xFE2
 10054                           fsr1l	equ	0xFE1
 10055                           indf2	equ	0xFDF
 10056                           postinc2	equ	0xFDE
 10057                           postdec2	equ	0xFDD
 10058                           plusw2	equ	0xFDB
 10059                           fsr2h	equ	0xFDA
 10060                           fsr2l	equ	0xFD9
 10061                           status	equ	0xFD8
 10062                           
 10063 ;; *************** function _InitADC *****************
 10064 ;; Defined at:
 10065 ;;		line 91 in file "main.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;                  1    wreg      void 
 10072 ;; Registers used:
 10073 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;Total ram usage:        1 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    7
 10086 ;; This function calls:
 10087 ;;		Nothing
 10088 ;; This function is called by:
 10089 ;;		_main
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           	psect	text48
 10094  0132F2                     __ptext48:
 10095                           	opt stack 0
 10096  0132F2                     _InitADC:
 10097                           	opt stack 23
 10098                           
 10099                           ;main.c: 93: ADCON1 = 0b10101101;
 10100                           
 10101                           ;incstack = 0
 10102  0132F2  0EAD               	movlw	173
 10103  0132F4  6EC1               	movwf	4033,c	;volatile
 10104                           
 10105                           ;main.c: 94: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 10106  0132F6  0E00               	movlw	0
 10107  0132F8  0100               	movlb	0	; () banked
 10108  0132FA  6F6C               	movwf	(_thisReading+1)& (0+255),b
 10109  0132FC  0E00               	movlw	0
 10110  0132FE  6F6B               	movwf	_thisReading& (0+255),b
 10111  013300  D00F               	goto	l2124
 10112  013302                     
 10113                           ; BSR set to: 0
 10114                           ;main.c: 95: readings[thisReading] = 0;
 10115                           
 10116                           ; BSR set to: 0
 10117  013302  90D8               	bcf	status,0,c
 10118  013304  356B               	rlcf	_thisReading& (0+255),w,b
 10119  013306  6ED9               	movwf	fsr2l,c
 10120  013308  356C               	rlcf	(_thisReading+1)& (0+255),w,b
 10121  01330A  6EDA               	movwf	fsr2h,c
 10122  01330C  0E00               	movlw	low _readings
 10123  01330E  26D9               	addwf	fsr2l,f,c
 10124  013310  0E02               	movlw	high _readings
 10125  013312  22DA               	addwfc	fsr2h,f,c
 10126  013314  0E00               	movlw	0
 10127  013316  6EDE               	movwf	postinc2,c
 10128  013318  0E00               	movlw	0
 10129  01331A  6EDD               	movwf	postdec2,c
 10130                           
 10131                           ; BSR set to: 0
 10132  01331C  4B6B               	infsnz	_thisReading& (0+255),f,b
 10133  01331E  2B6C               	incf	(_thisReading+1)& (0+255),f,b
 10134  013320                     l2124:
 10135                           
 10136                           ; BSR set to: 0
 10137                           
 10138                           ; BSR set to: 0
 10139  013320  5047               	movf	_numReadings,w,c
 10140  013322  5D6B               	subwf	_thisReading& (0+255),w,b
 10141  013324  516C               	movf	(_thisReading+1)& (0+255),w,b
 10142  013326  0A80               	xorlw	128
 10143  013328  6FB3               	movwf	??_InitADC& (0+255),b
 10144  01332A  5048               	movf	_numReadings+1,w,c
 10145  01332C  0A80               	xorlw	128
 10146  01332E  59B3               	subwfb	??_InitADC& (0+255),w,b
 10147  013330  B0D8               	btfsc	status,0,c
 10148  013332  0012               	return	
 10149  013334  D7E6               	goto	l2125
 10150  013336                     __end_of_InitADC:
 10151                           	opt stack 0
 10152                           tosu	equ	0xFFF
 10153                           tosh	equ	0xFFE
 10154                           tosl	equ	0xFFD
 10155                           pclath	equ	0xFFA
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           postinc0	equ	0xFEE
 10164                           wreg	equ	0xFE8
 10165                           postdec1	equ	0xFE5
 10166                           fsr1h	equ	0xFE2
 10167                           fsr1l	equ	0xFE1
 10168                           indf2	equ	0xFDF
 10169                           postinc2	equ	0xFDE
 10170                           postdec2	equ	0xFDD
 10171                           plusw2	equ	0xFDB
 10172                           fsr2h	equ	0xFDA
 10173                           fsr2l	equ	0xFD9
 10174                           status	equ	0xFD8
 10175                           
 10176 ;; *************** function _ISR_Enable *****************
 10177 ;; Defined at:
 10178 ;;		line 27 in file "Library/ISR.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;		None
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;		None
 10183 ;; Return value:  Size  Location     Type
 10184 ;;                  1    wreg      void 
 10185 ;; Registers used:
 10186 ;;		None
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;Total ram usage:        0 bytes
 10197 ;; Hardware stack levels used:    1
 10198 ;; Hardware stack levels required when called:    7
 10199 ;; This function calls:
 10200 ;;		Nothing
 10201 ;; This function is called by:
 10202 ;;		_main
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206                           	psect	text49
 10207  013B06                     __ptext49:
 10208                           	opt stack 0
 10209  013B06                     _ISR_Enable:
 10210                           	opt stack 23
 10211                           
 10212                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 10213                           
 10214                           ; BSR set to: 0
 10215                           ;incstack = 0
 10216  013B06  8CF2               	bsf	intcon,6,c	;volatile
 10217                           
 10218                           ;ISR.c: 30: INTCONbits.GIE = 1;
 10219  013B08  8EF2               	bsf	intcon,7,c	;volatile
 10220                           
 10221                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 10222  013B0A  88F2               	bsf	intcon,4,c	;volatile
 10223                           
 10224                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 10225  013B0C  92F2               	bcf	intcon,1,c	;volatile
 10226  013B0E  0012               	return		;funcret
 10227  013B10                     __end_of_ISR_Enable:
 10228                           	opt stack 0
 10229                           tosu	equ	0xFFF
 10230                           tosh	equ	0xFFE
 10231                           tosl	equ	0xFFD
 10232                           pclath	equ	0xFFA
 10233                           tblptru	equ	0xFF8
 10234                           tblptrh	equ	0xFF7
 10235                           tblptrl	equ	0xFF6
 10236                           tablat	equ	0xFF5
 10237                           prodh	equ	0xFF4
 10238                           prodl	equ	0xFF3
 10239                           intcon	equ	0xFF2
 10240                           postinc0	equ	0xFEE
 10241                           wreg	equ	0xFE8
 10242                           postdec1	equ	0xFE5
 10243                           fsr1h	equ	0xFE2
 10244                           fsr1l	equ	0xFE1
 10245                           indf2	equ	0xFDF
 10246                           postinc2	equ	0xFDE
 10247                           postdec2	equ	0xFDD
 10248                           plusw2	equ	0xFDB
 10249                           fsr2h	equ	0xFDA
 10250                           fsr2l	equ	0xFD9
 10251                           status	equ	0xFD8
 10252                           
 10253 ;; *************** function _HMI_Render *****************
 10254 ;; Defined at:
 10255 ;;		line 138 in file "HMI.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;		None
 10258 ;; Auto vars:     Size  Location     Type
 10259 ;;  a               2    8[BANK0 ] unsigned short 
 10260 ;; Return value:  Size  Location     Type
 10261 ;;                  1    wreg      void 
 10262 ;; Registers used:
 10263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10273 ;;Total ram usage:        2 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    9
 10276 ;; This function calls:
 10277 ;;		_OutSeg
 10278 ;; This function is called by:
 10279 ;;		_main
 10280 ;;		_ADCAverage
 10281 ;; This function uses a non-reentrant model
 10282 ;;
 10283                           
 10284                           	psect	text50
 10285  01355E                     __ptext50:
 10286                           	opt stack 0
 10287  01355E                     _HMI_Render:
 10288                           	opt stack 21
 10289                           
 10290                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 10291                           
 10292                           ;incstack = 0
 10293  01355E  0E00               	movlw	0
 10294  013560  0100               	movlb	0	; () banked
 10295  013562  6FBC               	movwf	(HMI_Render@a+1)& (0+255),b
 10296  013564  0E00               	movlw	0
 10297  013566  6FBB               	movwf	HMI_Render@a& (0+255),b
 10298  013568                     l13184:
 10299                           
 10300                           ; BSR set to: 0
 10301  013568  51BC               	movf	(HMI_Render@a+1)& (0+255),w,b
 10302  01356A  E113               	bnz	l1158
 10303  01356C  0E08               	movlw	8
 10304  01356E  5DBB               	subwf	HMI_Render@a& (0+255),w,b
 10305  013570  B0D8               	btfsc	status,0,c
 10306  013572  0012               	return	
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 10310                           
 10311                           ; BSR set to: 0
 10312                           
 10313                           ; BSR set to: 0
 10314  013574  C0BB  F0B6         	movff	HMI_Render@a,OutSeg@pSegment
 10315  013578  0E2C               	movlw	low _HMIBoard
 10316  01357A  25BB               	addwf	HMI_Render@a& (0+255),w,b
 10317  01357C  6ED9               	movwf	fsr2l,c
 10318  01357E  0E01               	movlw	high _HMIBoard
 10319  013580  21BC               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 10320  013582  6EDA               	movwf	fsr2h,c
 10321  013584  50DF               	movf	indf2,w,c
 10322  013586  EC45  F095         	call	_OutSeg
 10323  01358A  0100               	movlb	0	; () banked
 10324  01358C  4BBB               	infsnz	HMI_Render@a& (0+255),f,b
 10325  01358E  2BBC               	incf	(HMI_Render@a+1)& (0+255),f,b
 10326  013590  D7EB               	goto	l13184
 10327  013592                     l1158:
 10328                           
 10329                           ; BSR set to: 0
 10330  013592  0012               	return		;funcret
 10331  013594                     __end_of_HMI_Render:
 10332                           	opt stack 0
 10333                           tosu	equ	0xFFF
 10334                           tosh	equ	0xFFE
 10335                           tosl	equ	0xFFD
 10336                           pclath	equ	0xFFA
 10337                           tblptru	equ	0xFF8
 10338                           tblptrh	equ	0xFF7
 10339                           tblptrl	equ	0xFF6
 10340                           tablat	equ	0xFF5
 10341                           prodh	equ	0xFF4
 10342                           prodl	equ	0xFF3
 10343                           intcon	equ	0xFF2
 10344                           postinc0	equ	0xFEE
 10345                           wreg	equ	0xFE8
 10346                           postdec1	equ	0xFE5
 10347                           fsr1h	equ	0xFE2
 10348                           fsr1l	equ	0xFE1
 10349                           indf2	equ	0xFDF
 10350                           postinc2	equ	0xFDE
 10351                           postdec2	equ	0xFDD
 10352                           plusw2	equ	0xFDB
 10353                           fsr2h	equ	0xFDA
 10354                           fsr2l	equ	0xFD9
 10355                           status	equ	0xFD8
 10356                           
 10357 ;; *************** function _OutSeg *****************
 10358 ;; Defined at:
 10359 ;;		line 54 in file "HMI.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;  pInput          1    wreg     unsigned char 
 10362 ;;  pSegment        1    3[BANK0 ] unsigned char 
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;  pInput          1    6[BANK0 ] unsigned char 
 10365 ;;  out             1    7[BANK0 ] volatile unsigned char 
 10366 ;; Return value:  Size  Location     Type
 10367 ;;                  1    wreg      void 
 10368 ;; Registers used:
 10369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10370 ;; Tracked objects:
 10371 ;;		On entry : 0/0
 10372 ;;		On exit  : 0/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10375 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10379 ;;Total ram usage:        5 bytes
 10380 ;; Hardware stack levels used:    1
 10381 ;; Hardware stack levels required when called:    8
 10382 ;; This function calls:
 10383 ;;		_SPI_Send
 10384 ;; This function is called by:
 10385 ;;		_HMI_Render
 10386 ;;		_HMI_GRender
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           	psect	text51
 10391  012A8A                     __ptext51:
 10392                           	opt stack 0
 10393  012A8A                     _OutSeg:
 10394                           	opt stack 21
 10395                           
 10396                           ; BSR set to: 0
 10397                           ;incstack = 0
 10398                           ;OutSeg@pInput stored from wreg
 10399  012A8A  0100               	movlb	0	; () banked
 10400  012A8C  6FB9               	movwf	OutSeg@pInput& (0+255),b
 10401                           
 10402                           ;HMI.c: 58: static UINT8 cur;
 10403                           ;HMI.c: 59: volatile UINT8 out;
 10404                           ;HMI.c: 60: static UINT8 segset;
 10405                           ;HMI.c: 61: static UINT8 a;
 10406                           ;HMI.c: 83: if (pSegment <= 8)
 10407  012A8E  0E09               	movlw	9
 10408  012A90  0100               	movlb	0	; () banked
 10409  012A92  61B6               	cpfslt	OutSeg@pSegment& (0+255),b
 10410  012A94  0012               	return	
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;HMI.c: 84: {
 10414                           ;HMI.c: 85: cur = pInput;
 10415  012A96  C0B9  F03B         	movff	OutSeg@pInput,OutSeg@cur
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 10419  012A9A  0E00               	movlw	0
 10420  012A9C  6E39               	movwf	OutSeg@a,c
 10421  012A9E                     l12864:
 10422                           
 10423                           ; BSR set to: 0
 10424  012A9E  0E07               	movlw	7
 10425  012AA0  6439               	cpfsgt	OutSeg@a,c
 10426  012AA2  D001               	goto	l1146
 10427  012AA4  D01F               	goto	u9000
 10428  012AA6                     l1146:
 10429                           
 10430                           ;HMI.c: 87: {
 10431                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 10432                           
 10433                           ; BSR set to: 0
 10434  012AA6  C03B  F0B7         	movff	OutSeg@cur,??_OutSeg
 10435  012AAA  0E01               	movlw	1
 10436  012AAC  0100               	movlb	0	; () banked
 10437  012AAE  17B7               	andwf	??_OutSeg& (0+255),f,b
 10438  012AB0  0E06               	movlw	6
 10439  012AB2  6FB8               	movwf	(??_OutSeg+1)& (0+255),b
 10440  012AB4                     u8995:
 10441  012AB4  90D8               	bcf	status,0,c
 10442  012AB6  37B7               	rlcf	??_OutSeg& (0+255),f,b
 10443  012AB8  2FB8               	decfsz	(??_OutSeg+1)& (0+255),f,b
 10444  012ABA  D7FC               	goto	u8995
 10445  012ABC  51B7               	movf	??_OutSeg& (0+255),w,b
 10446  012ABE  6E3A               	movwf	OutSeg@segset,c
 10447                           
 10448                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 10449  012AC0  39B6               	swapf	OutSeg@pSegment& (0+255),w,b
 10450  012AC2  42E8               	rrncf	wreg,f,c
 10451  012AC4  0BF8               	andlw	248
 10452  012AC6  1039               	iorwf	OutSeg@a,w,c
 10453  012AC8  103A               	iorwf	OutSeg@segset,w,c
 10454  012ACA  6FBA               	movwf	OutSeg@out& (0+255),b	;volatile
 10455                           
 10456                           ;HMI.c: 90: cur >>= 1;
 10457  012ACC  90D8               	bcf	status,0,c
 10458  012ACE  323B               	rrcf	OutSeg@cur,f,c
 10459                           
 10460                           ; BSR set to: 0
 10461                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 10462  012AD0  0E66               	movlw	low _SPI1
 10463  012AD2  6FB3               	movwf	SPI_Send@pInput& (0+255),b
 10464  012AD4  0E01               	movlw	high _SPI1
 10465  012AD6  6FB4               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10466  012AD8  C0BA  F0B5         	movff	OutSeg@out,SPI_Send@pData	;volatile
 10467  012ADC  ECB2  F095         	call	_SPI_Send	;wreg free
 10468  012AE0  2A39               	incf	OutSeg@a,f,c
 10469  012AE2  D7DD               	goto	l12864
 10470  012AE4                     u9000:
 10471                           
 10472                           ;HMI.c: 96: }
 10473                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 10474  012AE4  0E66               	movlw	low _SPI1
 10475  012AE6  0100               	movlb	0	; () banked
 10476  012AE8  6FB3               	movwf	SPI_Send@pInput& (0+255),b
 10477  012AEA  0E01               	movlw	high _SPI1
 10478  012AEC  6FB4               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10479  012AEE  0E00               	movlw	0
 10480  012AF0  6FB5               	movwf	SPI_Send@pData& (0+255),b
 10481  012AF2  ECB2  F095         	call	_SPI_Send	;wreg free
 10482  012AF6  0012               	return	
 10483  012AF8                     __end_of_OutSeg:
 10484                           	opt stack 0
 10485                           tosu	equ	0xFFF
 10486                           tosh	equ	0xFFE
 10487                           tosl	equ	0xFFD
 10488                           pclath	equ	0xFFA
 10489                           tblptru	equ	0xFF8
 10490                           tblptrh	equ	0xFF7
 10491                           tblptrl	equ	0xFF6
 10492                           tablat	equ	0xFF5
 10493                           prodh	equ	0xFF4
 10494                           prodl	equ	0xFF3
 10495                           intcon	equ	0xFF2
 10496                           postinc0	equ	0xFEE
 10497                           wreg	equ	0xFE8
 10498                           postdec1	equ	0xFE5
 10499                           fsr1h	equ	0xFE2
 10500                           fsr1l	equ	0xFE1
 10501                           indf2	equ	0xFDF
 10502                           postinc2	equ	0xFDE
 10503                           postdec2	equ	0xFDD
 10504                           plusw2	equ	0xFDB
 10505                           fsr2h	equ	0xFDA
 10506                           fsr2l	equ	0xFD9
 10507                           status	equ	0xFD8
 10508                           
 10509 ;; *************** function _HMI_Poll *****************
 10510 ;; Defined at:
 10511 ;;		line 252 in file "HMI.c"
 10512 ;; Parameters:    Size  Location     Type
 10513 ;;		None
 10514 ;; Auto vars:     Size  Location     Type
 10515 ;;		None
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  1    wreg      void 
 10518 ;; Registers used:
 10519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10529 ;;Total ram usage:        0 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; Hardware stack levels required when called:   15
 10532 ;; This function calls:
 10533 ;;		_Button_Poll
 10534 ;; This function is called by:
 10535 ;;		_main
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           	psect	text52
 10540  012D70                     __ptext52:
 10541                           	opt stack 0
 10542  012D70                     _HMI_Poll:
 10543                           	opt stack 15
 10544                           
 10545                           ;HMI.c: 254: TRISE = 0xFC;
 10546                           
 10547                           ;incstack = 0
 10548  012D70  0EFC               	movlw	252
 10549  012D72  6E96               	movwf	3990,c	;volatile
 10550                           
 10551                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 10552  012D74  0E5C               	movlw	low (_HMIBoard+48)
 10553  012D76  0100               	movlb	0	; () banked
 10554  012D78  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10555  012D7A  0E01               	movlw	high (_HMIBoard+48)
 10556  012D7C  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10557  012D7E  0E01               	movlw	1
 10558  012D80  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10559  012D82  EC64  F08D         	call	_Button_Poll	;wreg free
 10560                           
 10561                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 10562  012D86  0E3E               	movlw	low (_HMIBoard+18)
 10563  012D88  0100               	movlb	0	; () banked
 10564  012D8A  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10565  012D8C  0E01               	movlw	high (_HMIBoard+18)
 10566  012D8E  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10567  012D90  0E01               	movlw	1
 10568  012D92  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10569  012D94  EC64  F08D         	call	_Button_Poll	;wreg free
 10570                           
 10571                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 10572  012D98  0E34               	movlw	low (_HMIBoard+8)
 10573  012D9A  0100               	movlb	0	; () banked
 10574  012D9C  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10575  012D9E  0E01               	movlw	high (_HMIBoard+8)
 10576  012DA0  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10577  012DA2  0E01               	movlw	1
 10578  012DA4  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10579  012DA6  EC64  F08D         	call	_Button_Poll	;wreg free
 10580                           
 10581                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 10582  012DAA  0E48               	movlw	low (_HMIBoard+28)
 10583  012DAC  0100               	movlb	0	; () banked
 10584  012DAE  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10585  012DB0  0E01               	movlw	high (_HMIBoard+28)
 10586  012DB2  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10587  012DB4  0E01               	movlw	1
 10588  012DB6  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10589  012DB8  EC64  F08D         	call	_Button_Poll	;wreg free
 10590                           
 10591                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 10592  012DBC  0E52               	movlw	low (_HMIBoard+38)
 10593  012DBE  0100               	movlb	0	; () banked
 10594  012DC0  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10595  012DC2  0E01               	movlw	high (_HMIBoard+38)
 10596  012DC4  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10597  012DC6  0E01               	movlw	1
 10598  012DC8  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10599  012DCA  EC64  F08D         	call	_Button_Poll	;wreg free
 10600  012DCE  0012               	return		;funcret
 10601  012DD0                     __end_of_HMI_Poll:
 10602                           	opt stack 0
 10603                           tosu	equ	0xFFF
 10604                           tosh	equ	0xFFE
 10605                           tosl	equ	0xFFD
 10606                           pclath	equ	0xFFA
 10607                           tblptru	equ	0xFF8
 10608                           tblptrh	equ	0xFF7
 10609                           tblptrl	equ	0xFF6
 10610                           tablat	equ	0xFF5
 10611                           prodh	equ	0xFF4
 10612                           prodl	equ	0xFF3
 10613                           intcon	equ	0xFF2
 10614                           postinc0	equ	0xFEE
 10615                           wreg	equ	0xFE8
 10616                           postdec1	equ	0xFE5
 10617                           fsr1h	equ	0xFE2
 10618                           fsr1l	equ	0xFE1
 10619                           indf2	equ	0xFDF
 10620                           postinc2	equ	0xFDE
 10621                           postdec2	equ	0xFDD
 10622                           plusw2	equ	0xFDB
 10623                           fsr2h	equ	0xFDA
 10624                           fsr2l	equ	0xFD9
 10625                           status	equ	0xFD8
 10626                           
 10627 ;; *************** function _Button_Poll *****************
 10628 ;; Defined at:
 10629 ;;		line 57 in file "Library/Button.c"
 10630 ;; Parameters:    Size  Location     Type
 10631 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 10632 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 10633 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;  Pin             1   35[BANK0 ] unsigned char 
 10636 ;; Return value:  Size  Location     Type
 10637 ;;                  1    wreg      unsigned char 
 10638 ;; Registers used:
 10639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10645 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;Total ram usage:        9 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:   14
 10652 ;; This function calls:
 10653 ;;		_Event_DIPSwitch
 10654 ;;		_Event_NULL
 10655 ;;		_Event_TestButton
 10656 ;;		_HMI_DIPSwitch
 10657 ;;		_HMI_DownSwitch
 10658 ;;		_HMI_LeftSwitch
 10659 ;;		_HMI_RightSwitch
 10660 ;;		_HMI_UpSwitch
 10661 ;;		_MXK_DIPSwitch
 10662 ;;		_MXK_TestButton
 10663 ;; This function is called by:
 10664 ;;		_HMI_Poll
 10665 ;;		_MXK_Poll
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text53
 10670  011AC8                     __ptext53:
 10671                           	opt stack 0
 10672  011AC8                     _Button_Poll:
 10673                           	opt stack 15
 10674                           
 10675                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 10676                           
 10677                           ;incstack = 0
 10678  011AC8  0100               	movlb	0	; () banked
 10679  011ACA  EE20 F007          	lfsr	2,7
 10680  011ACE  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10681  011AD0  26D9               	addwf	fsr2l,f,c
 10682  011AD2  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10683  011AD4  22DA               	addwfc	fsr2h,f,c
 10684  011AD6  D801               	call	u8758
 10685  011AD8  D00A               	goto	u8759
 10686  011ADA                     u8758:
 10687  011ADA  0005               	push	
 10688  011ADC  6EFA               	movwf	pclath,c
 10689  011ADE  50DE               	movf	postinc2,w,c
 10690  011AE0  6EFD               	movwf	tosl,c
 10691  011AE2  50DE               	movf	postinc2,w,c
 10692  011AE4  6EFE               	movwf	tosh,c
 10693  011AE6  50DE               	movf	postinc2,w,c
 10694  011AE8  6EFF               	movwf	tosu,c
 10695  011AEA  50FA               	movf	pclath,w,c
 10696  011AEC  0012               	return		;indir
 10697  011AEE                     u8759:
 10698  011AEE  0100               	movlb	0	; () banked
 10699  011AF0  6FD6               	movwf	Button_Poll@Pin& (0+255),b
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;Button.c: 61: if (pButton->mState == Pin)
 10703  011AF2  C0CE  FFD9         	movff	Button_Poll@pButton,fsr2l
 10704  011AF6  C0CF  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10705  011AFA  51D6               	movf	Button_Poll@Pin& (0+255),w,b
 10706  011AFC  18DE               	xorwf	postinc2,w,c
 10707  011AFE  A4D8               	btfss	status,2,c
 10708  011B00  D01C               	goto	l11
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;Button.c: 62: {
 10712                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10713  011B02  EE20 F001          	lfsr	2,1
 10714  011B06  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10715  011B08  26D9               	addwf	fsr2l,f,c
 10716  011B0A  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10717  011B0C  22DA               	addwfc	fsr2h,f,c
 10718  011B0E  51D0               	movf	Button_Poll@pIncrement& (0+255),w,b
 10719  011B10  5CDE               	subwf	postinc2,w,c
 10720  011B12  B0D8               	btfsc	status,0,c
 10721  011B14  D009               	goto	l12
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;Button.c: 66: pButton->mCount = 0;
 10725  011B16  EE20 F001          	lfsr	2,1
 10726  011B1A  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10727  011B1C  26D9               	addwf	fsr2l,f,c
 10728  011B1E  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10729  011B20  22DA               	addwfc	fsr2h,f,c
 10730  011B22  0E00               	movlw	0
 10731  011B24  6EDF               	movwf	indf2,c
 10732  011B26  0012               	return	
 10733  011B28                     l12:
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;Button.c: 67: else
 10737                           ;Button.c: 68: pButton->mCount -= pIncrement;
 10738                           
 10739                           ; BSR set to: 0
 10740  011B28  EE20 F001          	lfsr	2,1
 10741  011B2C  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10742  011B2E  26D9               	addwf	fsr2l,f,c
 10743  011B30  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10744  011B32  22DA               	addwfc	fsr2h,f,c
 10745  011B34  51D0               	movf	Button_Poll@pIncrement& (0+255),w,b
 10746  011B36  5EDF               	subwf	indf2,f,c
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;Button.c: 69: }
 10750  011B38  0012               	return	
 10751  011B3A                     l11:
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 10755                           
 10756                           ; BSR set to: 0
 10757  011B3A  EE20 F001          	lfsr	2,1
 10758  011B3E  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10759  011B40  26D9               	addwf	fsr2l,f,c
 10760  011B42  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10761  011B44  22DA               	addwfc	fsr2h,f,c
 10762  011B46  50DF               	movf	indf2,w,c
 10763  011B48  6FD1               	movwf	??_Button_Poll& (0+255),b
 10764  011B4A  6BD2               	clrf	(??_Button_Poll+1)& (0+255),b
 10765  011B4C  51D0               	movf	Button_Poll@pIncrement& (0+255),w,b
 10766  011B4E  27D1               	addwf	??_Button_Poll& (0+255),f,b
 10767  011B50  0E00               	movlw	0
 10768  011B52  23D2               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 10769  011B54  EE20 F001          	lfsr	2,1
 10770  011B58  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10771  011B5A  26D9               	addwf	fsr2l,f,c
 10772  011B5C  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10773  011B5E  22DA               	addwfc	fsr2h,f,c
 10774  011B60  50DF               	movf	indf2,w,c
 10775  011B62  6FD3               	movwf	(??_Button_Poll+2)& (0+255),b
 10776  011B64  6BD4               	clrf	(??_Button_Poll+3)& (0+255),b
 10777  011B66  51D1               	movf	??_Button_Poll& (0+255),w,b
 10778  011B68  5DD3               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10779  011B6A  51D4               	movf	(??_Button_Poll+3)& (0+255),w,b
 10780  011B6C  0A80               	xorlw	128
 10781  011B6E  6FD5               	movwf	(??_Button_Poll+4)& (0+255),b
 10782  011B70  51D2               	movf	(??_Button_Poll+1)& (0+255),w,b
 10783  011B72  0A80               	xorlw	128
 10784  011B74  59D5               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 10785  011B76  B0D8               	btfsc	status,0,c
 10786  011B78  0012               	return	
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;Button.c: 73: {
 10790                           ;Button.c: 75: pButton->mCount += pIncrement;
 10791  011B7A  EE20 F001          	lfsr	2,1
 10792  011B7E  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10793  011B80  26D9               	addwf	fsr2l,f,c
 10794  011B82  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10795  011B84  22DA               	addwfc	fsr2h,f,c
 10796  011B86  51D0               	movf	Button_Poll@pIncrement& (0+255),w,b
 10797  011B88  26DF               	addwf	indf2,f,c
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 10801  011B8A  EE20 F002          	lfsr	2,2
 10802  011B8E  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10803  011B90  26D9               	addwf	fsr2l,f,c
 10804  011B92  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10805  011B94  22DA               	addwfc	fsr2h,f,c
 10806  011B96  EE10 F001          	lfsr	1,1
 10807  011B9A  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10808  011B9C  26E1               	addwf	fsr1l,f,c
 10809  011B9E  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10810  011BA0  22E2               	addwfc	fsr1h,f,c
 10811  011BA2  50E7               	movf	indf1,w,c
 10812  011BA4  6FD3               	movwf	(??_Button_Poll+2)& (0+255),b
 10813  011BA6  6BD4               	clrf	(??_Button_Poll+3)& (0+255),b
 10814  011BA8  50DE               	movf	postinc2,w,c
 10815  011BAA  5DD3               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10816  011BAC  50DE               	movf	postinc2,w,c
 10817  011BAE  59D4               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 10818  011BB0  A0D8               	btfss	status,0,c
 10819  011BB2  0012               	return	
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;Button.c: 77: {
 10823                           ;Button.c: 79: pButton->mState = Pin;
 10824  011BB4  C0CE  FFD9         	movff	Button_Poll@pButton,fsr2l
 10825  011BB8  C0CF  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10826  011BBC  C0D6  FFDF         	movff	Button_Poll@Pin,indf2
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;Button.c: 80: pButton->mCount = 0;
 10830  011BC0  EE20 F001          	lfsr	2,1
 10831  011BC4  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10832  011BC6  26D9               	addwf	fsr2l,f,c
 10833  011BC8  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10834  011BCA  22DA               	addwfc	fsr2h,f,c
 10835  011BCC  0E00               	movlw	0
 10836  011BCE  6EDF               	movwf	indf2,c
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;Button.c: 83: pButton->mFunction(Pin);
 10840  011BD0  EE20 F004          	lfsr	2,4
 10841  011BD4  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10842  011BD6  26D9               	addwf	fsr2l,f,c
 10843  011BD8  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10844  011BDA  22DA               	addwfc	fsr2h,f,c
 10845  011BDC  D801               	call	u8808
 10846  011BDE  0012               	return	
 10847  011BE0                     u8808:
 10848  011BE0  0005               	push	
 10849  011BE2  6EFA               	movwf	pclath,c
 10850  011BE4  50DE               	movf	postinc2,w,c
 10851  011BE6  6EFD               	movwf	tosl,c
 10852  011BE8  50DE               	movf	postinc2,w,c
 10853  011BEA  6EFE               	movwf	tosh,c
 10854  011BEC  50DE               	movf	postinc2,w,c
 10855  011BEE  6EFF               	movwf	tosu,c
 10856  011BF0  50FA               	movf	pclath,w,c
 10857  011BF2  51D6               	movf	Button_Poll@Pin& (0+255),w,b
 10858  011BF4  0012               	return		;indir
 10859  011BF6                     __end_of_Button_Poll:
 10860                           	opt stack 0
 10861                           tosu	equ	0xFFF
 10862                           tosh	equ	0xFFE
 10863                           tosl	equ	0xFFD
 10864                           pclath	equ	0xFFA
 10865                           tblptru	equ	0xFF8
 10866                           tblptrh	equ	0xFF7
 10867                           tblptrl	equ	0xFF6
 10868                           tablat	equ	0xFF5
 10869                           prodh	equ	0xFF4
 10870                           prodl	equ	0xFF3
 10871                           intcon	equ	0xFF2
 10872                           postinc0	equ	0xFEE
 10873                           wreg	equ	0xFE8
 10874                           indf1	equ	0xFE7
 10875                           postdec1	equ	0xFE5
 10876                           fsr1h	equ	0xFE2
 10877                           fsr1l	equ	0xFE1
 10878                           indf2	equ	0xFDF
 10879                           postinc2	equ	0xFDE
 10880                           postdec2	equ	0xFDD
 10881                           plusw2	equ	0xFDB
 10882                           fsr2h	equ	0xFDA
 10883                           fsr2l	equ	0xFD9
 10884                           status	equ	0xFD8
 10885                           
 10886 ;; *************** function _MXK_DIPSwitch *****************
 10887 ;; Defined at:
 10888 ;;		line 24 in file "Library/MXK.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;		None
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;		None
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  1    wreg      unsigned char 
 10895 ;; Registers used:
 10896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;Total ram usage:        0 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    8
 10909 ;; This function calls:
 10910 ;;		_Port_GetQuad
 10911 ;; This function is called by:
 10912 ;;		_FunctInitButton
 10913 ;;		_Button_Poll
 10914 ;;		_main
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           	psect	text54
 10919  0139E2                     __ptext54:
 10920                           	opt stack 0
 10921  0139E2                     _MXK_DIPSwitch:
 10922                           	opt stack 22
 10923                           
 10924                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 10925                           
 10926                           ;incstack = 0
 10927  0139E2  0E9B               	movlw	low _PortD
 10928  0139E4  0100               	movlb	0	; () banked
 10929  0139E6  6FB3               	movwf	Port_GetQuad@pInput& (0+255),b
 10930  0139E8  0E00               	movlw	high _PortD
 10931  0139EA  6FB4               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10932  0139EC  0E00               	movlw	0
 10933  0139EE  6FB5               	movwf	Port_GetQuad@pQuad& (0+255),b
 10934  0139F0  EC1D  F09A         	call	_Port_GetQuad
 10935  0139F4  0012               	return	
 10936  0139F6                     __end_of_MXK_DIPSwitch:
 10937                           	opt stack 0
 10938                           tosu	equ	0xFFF
 10939                           tosh	equ	0xFFE
 10940                           tosl	equ	0xFFD
 10941                           pclath	equ	0xFFA
 10942                           tblptru	equ	0xFF8
 10943                           tblptrh	equ	0xFF7
 10944                           tblptrl	equ	0xFF6
 10945                           tablat	equ	0xFF5
 10946                           prodh	equ	0xFF4
 10947                           prodl	equ	0xFF3
 10948                           intcon	equ	0xFF2
 10949                           postinc0	equ	0xFEE
 10950                           wreg	equ	0xFE8
 10951                           indf1	equ	0xFE7
 10952                           postdec1	equ	0xFE5
 10953                           fsr1h	equ	0xFE2
 10954                           fsr1l	equ	0xFE1
 10955                           indf2	equ	0xFDF
 10956                           postinc2	equ	0xFDE
 10957                           postdec2	equ	0xFDD
 10958                           plusw2	equ	0xFDB
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function _HMI_DIPSwitch *****************
 10964 ;; Defined at:
 10965 ;;		line 47 in file "HMI.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;		None
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;		None
 10970 ;; Return value:  Size  Location     Type
 10971 ;;                  1    wreg      unsigned char 
 10972 ;; Registers used:
 10973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;Total ram usage:        0 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; Hardware stack levels required when called:    8
 10986 ;; This function calls:
 10987 ;;		_Port_GetQuad
 10988 ;; This function is called by:
 10989 ;;		_HMI_Init
 10990 ;;		_Button_Poll
 10991 ;;		_main
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           	psect	text55
 10996  0139F6                     __ptext55:
 10997                           	opt stack 0
 10998  0139F6                     _HMI_DIPSwitch:
 10999                           	opt stack 20
 11000                           
 11001                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 11002                           
 11003                           ;incstack = 0
 11004  0139F6  0E91               	movlw	low _PortE
 11005  0139F8  0100               	movlb	0	; () banked
 11006  0139FA  6FB3               	movwf	Port_GetQuad@pInput& (0+255),b
 11007  0139FC  0E00               	movlw	high _PortE
 11008  0139FE  6FB4               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 11009  013A00  0E00               	movlw	0
 11010  013A02  6FB5               	movwf	Port_GetQuad@pQuad& (0+255),b
 11011  013A04  EC1D  F09A         	call	_Port_GetQuad	;wreg free
 11012  013A08  0012               	return	
 11013  013A0A                     __end_of_HMI_DIPSwitch:
 11014                           	opt stack 0
 11015                           tosu	equ	0xFFF
 11016                           tosh	equ	0xFFE
 11017                           tosl	equ	0xFFD
 11018                           pclath	equ	0xFFA
 11019                           tblptru	equ	0xFF8
 11020                           tblptrh	equ	0xFF7
 11021                           tblptrl	equ	0xFF6
 11022                           tablat	equ	0xFF5
 11023                           prodh	equ	0xFF4
 11024                           prodl	equ	0xFF3
 11025                           intcon	equ	0xFF2
 11026                           postinc0	equ	0xFEE
 11027                           wreg	equ	0xFE8
 11028                           indf1	equ	0xFE7
 11029                           postdec1	equ	0xFE5
 11030                           fsr1h	equ	0xFE2
 11031                           fsr1l	equ	0xFE1
 11032                           indf2	equ	0xFDF
 11033                           postinc2	equ	0xFDE
 11034                           postdec2	equ	0xFDD
 11035                           plusw2	equ	0xFDB
 11036                           fsr2h	equ	0xFDA
 11037                           fsr2l	equ	0xFD9
 11038                           status	equ	0xFD8
 11039                           
 11040 ;; *************** function _HMI_DownSwitch *****************
 11041 ;; Defined at:
 11042 ;;		line 42 in file "HMI.c"
 11043 ;; Parameters:    Size  Location     Type
 11044 ;;		None
 11045 ;; Auto vars:     Size  Location     Type
 11046 ;;		None
 11047 ;; Return value:  Size  Location     Type
 11048 ;;                  1    wreg      unsigned char 
 11049 ;; Registers used:
 11050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11051 ;; Tracked objects:
 11052 ;;		On entry : 0/0
 11053 ;;		On exit  : 0/0
 11054 ;;		Unchanged: 0/0
 11055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11060 ;;Total ram usage:        0 bytes
 11061 ;; Hardware stack levels used:    1
 11062 ;; Hardware stack levels required when called:    8
 11063 ;; This function calls:
 11064 ;;		_Port_GetPin
 11065 ;; This function is called by:
 11066 ;;		_HMI_Init
 11067 ;;		_Button_Poll
 11068 ;;		_main
 11069 ;; This function uses a non-reentrant model
 11070 ;;
 11071                           
 11072                           	psect	text56
 11073  013A0A                     __ptext56:
 11074                           	opt stack 0
 11075  013A0A                     _HMI_DownSwitch:
 11076                           	opt stack 20
 11077                           
 11078                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 11079                           
 11080                           ;incstack = 0
 11081  013A0A  0E91               	movlw	low _PortE
 11082  013A0C  0100               	movlb	0	; () banked
 11083  013A0E  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11084  013A10  0E00               	movlw	high _PortE
 11085  013A12  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11086  013A14  0E06               	movlw	6
 11087  013A16  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11088  013A18  EC59  F09A         	call	_Port_GetPin	;wreg free
 11089  013A1C  0012               	return	
 11090  013A1E                     __end_of_HMI_DownSwitch:
 11091                           	opt stack 0
 11092                           tosu	equ	0xFFF
 11093                           tosh	equ	0xFFE
 11094                           tosl	equ	0xFFD
 11095                           pclath	equ	0xFFA
 11096                           tblptru	equ	0xFF8
 11097                           tblptrh	equ	0xFF7
 11098                           tblptrl	equ	0xFF6
 11099                           tablat	equ	0xFF5
 11100                           prodh	equ	0xFF4
 11101                           prodl	equ	0xFF3
 11102                           intcon	equ	0xFF2
 11103                           postinc0	equ	0xFEE
 11104                           wreg	equ	0xFE8
 11105                           indf1	equ	0xFE7
 11106                           postdec1	equ	0xFE5
 11107                           fsr1h	equ	0xFE2
 11108                           fsr1l	equ	0xFE1
 11109                           indf2	equ	0xFDF
 11110                           postinc2	equ	0xFDE
 11111                           postdec2	equ	0xFDD
 11112                           plusw2	equ	0xFDB
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8
 11116                           
 11117 ;; *************** function _HMI_UpSwitch *****************
 11118 ;; Defined at:
 11119 ;;		line 37 in file "HMI.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;		None
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;		None
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      unsigned char 
 11126 ;; Registers used:
 11127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;Total ram usage:        0 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    8
 11140 ;; This function calls:
 11141 ;;		_Port_GetPin
 11142 ;; This function is called by:
 11143 ;;		_HMI_Init
 11144 ;;		_Button_Poll
 11145 ;;		_main
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           	psect	text57
 11150  013A1E                     __ptext57:
 11151                           	opt stack 0
 11152  013A1E                     _HMI_UpSwitch:
 11153                           	opt stack 22
 11154                           
 11155                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 11156                           
 11157                           ;incstack = 0
 11158  013A1E  0E91               	movlw	low _PortE
 11159  013A20  0100               	movlb	0	; () banked
 11160  013A22  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11161  013A24  0E00               	movlw	high _PortE
 11162  013A26  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11163  013A28  0E07               	movlw	7
 11164  013A2A  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11165  013A2C  EC59  F09A         	call	_Port_GetPin	;wreg free
 11166  013A30  0012               	return	
 11167  013A32                     __end_of_HMI_UpSwitch:
 11168                           	opt stack 0
 11169                           tosu	equ	0xFFF
 11170                           tosh	equ	0xFFE
 11171                           tosl	equ	0xFFD
 11172                           pclath	equ	0xFFA
 11173                           tblptru	equ	0xFF8
 11174                           tblptrh	equ	0xFF7
 11175                           tblptrl	equ	0xFF6
 11176                           tablat	equ	0xFF5
 11177                           prodh	equ	0xFF4
 11178                           prodl	equ	0xFF3
 11179                           intcon	equ	0xFF2
 11180                           postinc0	equ	0xFEE
 11181                           wreg	equ	0xFE8
 11182                           indf1	equ	0xFE7
 11183                           postdec1	equ	0xFE5
 11184                           fsr1h	equ	0xFE2
 11185                           fsr1l	equ	0xFE1
 11186                           indf2	equ	0xFDF
 11187                           postinc2	equ	0xFDE
 11188                           postdec2	equ	0xFDD
 11189                           plusw2	equ	0xFDB
 11190                           fsr2h	equ	0xFDA
 11191                           fsr2l	equ	0xFD9
 11192                           status	equ	0xFD8
 11193                           
 11194 ;; *************** function _HMI_RightSwitch *****************
 11195 ;; Defined at:
 11196 ;;		line 32 in file "HMI.c"
 11197 ;; Parameters:    Size  Location     Type
 11198 ;;		None
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;		None
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  1    wreg      unsigned char 
 11203 ;; Registers used:
 11204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;Total ram usage:        0 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; Hardware stack levels required when called:    8
 11217 ;; This function calls:
 11218 ;;		_Port_GetPin
 11219 ;; This function is called by:
 11220 ;;		_HMI_Init
 11221 ;;		_Button_Poll
 11222 ;;		_main
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           	psect	text58
 11227  013A32                     __ptext58:
 11228                           	opt stack 0
 11229  013A32                     _HMI_RightSwitch:
 11230                           	opt stack 22
 11231                           
 11232                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 11233                           
 11234                           ;incstack = 0
 11235  013A32  0E91               	movlw	low _PortE
 11236  013A34  0100               	movlb	0	; () banked
 11237  013A36  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11238  013A38  0E00               	movlw	high _PortE
 11239  013A3A  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11240  013A3C  0E04               	movlw	4
 11241  013A3E  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11242  013A40  EC59  F09A         	call	_Port_GetPin	;wreg free
 11243  013A44  0012               	return	
 11244  013A46                     __end_of_HMI_RightSwitch:
 11245                           	opt stack 0
 11246                           tosu	equ	0xFFF
 11247                           tosh	equ	0xFFE
 11248                           tosl	equ	0xFFD
 11249                           pclath	equ	0xFFA
 11250                           tblptru	equ	0xFF8
 11251                           tblptrh	equ	0xFF7
 11252                           tblptrl	equ	0xFF6
 11253                           tablat	equ	0xFF5
 11254                           prodh	equ	0xFF4
 11255                           prodl	equ	0xFF3
 11256                           intcon	equ	0xFF2
 11257                           postinc0	equ	0xFEE
 11258                           wreg	equ	0xFE8
 11259                           indf1	equ	0xFE7
 11260                           postdec1	equ	0xFE5
 11261                           fsr1h	equ	0xFE2
 11262                           fsr1l	equ	0xFE1
 11263                           indf2	equ	0xFDF
 11264                           postinc2	equ	0xFDE
 11265                           postdec2	equ	0xFDD
 11266                           plusw2	equ	0xFDB
 11267                           fsr2h	equ	0xFDA
 11268                           fsr2l	equ	0xFD9
 11269                           status	equ	0xFD8
 11270                           
 11271 ;; *************** function _HMI_LeftSwitch *****************
 11272 ;; Defined at:
 11273 ;;		line 27 in file "HMI.c"
 11274 ;; Parameters:    Size  Location     Type
 11275 ;;		None
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;		None
 11278 ;; Return value:  Size  Location     Type
 11279 ;;                  1    wreg      unsigned char 
 11280 ;; Registers used:
 11281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11282 ;; Tracked objects:
 11283 ;;		On entry : 0/0
 11284 ;;		On exit  : 0/0
 11285 ;;		Unchanged: 0/0
 11286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;Total ram usage:        0 bytes
 11292 ;; Hardware stack levels used:    1
 11293 ;; Hardware stack levels required when called:    8
 11294 ;; This function calls:
 11295 ;;		_Port_GetPin
 11296 ;; This function is called by:
 11297 ;;		_HMI_Init
 11298 ;;		_Button_Poll
 11299 ;;		_main
 11300 ;; This function uses a non-reentrant model
 11301 ;;
 11302                           
 11303                           	psect	text59
 11304  013A46                     __ptext59:
 11305                           	opt stack 0
 11306  013A46                     _HMI_LeftSwitch:
 11307                           	opt stack 20
 11308                           
 11309                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 11310                           
 11311                           ;incstack = 0
 11312  013A46  0E91               	movlw	low _PortE
 11313  013A48  0100               	movlb	0	; () banked
 11314  013A4A  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11315  013A4C  0E00               	movlw	high _PortE
 11316  013A4E  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11317  013A50  0E05               	movlw	5
 11318  013A52  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11319  013A54  EC59  F09A         	call	_Port_GetPin	;wreg free
 11320  013A58  0012               	return	
 11321  013A5A                     __end_of_HMI_LeftSwitch:
 11322                           	opt stack 0
 11323                           tosu	equ	0xFFF
 11324                           tosh	equ	0xFFE
 11325                           tosl	equ	0xFFD
 11326                           pclath	equ	0xFFA
 11327                           tblptru	equ	0xFF8
 11328                           tblptrh	equ	0xFF7
 11329                           tblptrl	equ	0xFF6
 11330                           tablat	equ	0xFF5
 11331                           prodh	equ	0xFF4
 11332                           prodl	equ	0xFF3
 11333                           intcon	equ	0xFF2
 11334                           postinc0	equ	0xFEE
 11335                           wreg	equ	0xFE8
 11336                           indf1	equ	0xFE7
 11337                           postdec1	equ	0xFE5
 11338                           fsr1h	equ	0xFE2
 11339                           fsr1l	equ	0xFE1
 11340                           indf2	equ	0xFDF
 11341                           postinc2	equ	0xFDE
 11342                           postdec2	equ	0xFDD
 11343                           plusw2	equ	0xFDB
 11344                           fsr2h	equ	0xFDA
 11345                           fsr2l	equ	0xFD9
 11346                           status	equ	0xFD8
 11347                           
 11348 ;; *************** function _MXK_TestButton *****************
 11349 ;; Defined at:
 11350 ;;		line 14 in file "Library/MXK.c"
 11351 ;; Parameters:    Size  Location     Type
 11352 ;;		None
 11353 ;; Auto vars:     Size  Location     Type
 11354 ;;		None
 11355 ;; Return value:  Size  Location     Type
 11356 ;;                  1    wreg      unsigned char 
 11357 ;; Registers used:
 11358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11359 ;; Tracked objects:
 11360 ;;		On entry : 0/0
 11361 ;;		On exit  : 0/0
 11362 ;;		Unchanged: 0/0
 11363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11368 ;;Total ram usage:        0 bytes
 11369 ;; Hardware stack levels used:    1
 11370 ;; Hardware stack levels required when called:    8
 11371 ;; This function calls:
 11372 ;;		_Port_GetPin
 11373 ;; This function is called by:
 11374 ;;		_FunctInitButton
 11375 ;;		_Button_Poll
 11376 ;;		_main
 11377 ;; This function uses a non-reentrant model
 11378 ;;
 11379                           
 11380                           	psect	text60
 11381  013A5A                     __ptext60:
 11382                           	opt stack 0
 11383  013A5A                     _MXK_TestButton:
 11384                           	opt stack 22
 11385                           
 11386                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 11387                           
 11388                           ;incstack = 0
 11389  013A5A  0E9A               	movlw	low _PortB
 11390  013A5C  0100               	movlb	0	; () banked
 11391  013A5E  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11392  013A60  0E01               	movlw	high _PortB
 11393  013A62  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11394  013A64  0E04               	movlw	4
 11395  013A66  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11396  013A68  EC59  F09A         	call	_Port_GetPin	;wreg free
 11397  013A6C  0012               	return	
 11398  013A6E                     __end_of_MXK_TestButton:
 11399                           	opt stack 0
 11400                           tosu	equ	0xFFF
 11401                           tosh	equ	0xFFE
 11402                           tosl	equ	0xFFD
 11403                           pclath	equ	0xFFA
 11404                           tblptru	equ	0xFF8
 11405                           tblptrh	equ	0xFF7
 11406                           tblptrl	equ	0xFF6
 11407                           tablat	equ	0xFF5
 11408                           prodh	equ	0xFF4
 11409                           prodl	equ	0xFF3
 11410                           intcon	equ	0xFF2
 11411                           postinc0	equ	0xFEE
 11412                           wreg	equ	0xFE8
 11413                           indf1	equ	0xFE7
 11414                           postdec1	equ	0xFE5
 11415                           fsr1h	equ	0xFE2
 11416                           fsr1l	equ	0xFE1
 11417                           indf2	equ	0xFDF
 11418                           postinc2	equ	0xFDE
 11419                           postdec2	equ	0xFDD
 11420                           plusw2	equ	0xFDB
 11421                           fsr2h	equ	0xFDA
 11422                           fsr2l	equ	0xFD9
 11423                           status	equ	0xFD8
 11424                           
 11425 ;; *************** function _Port_GetQuad *****************
 11426 ;; Defined at:
 11427 ;;		line 498 in file "Library/Port.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11430 ;;		 -> PortE(10), PortD(10), 
 11431 ;;  pQuad           1    2[BANK0 ] enum E6776
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  Output          1    5[BANK0 ] unsigned char 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      unsigned char 
 11436 ;; Registers used:
 11437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11443 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;Total ram usage:        6 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    7
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_HMI_DIPSwitch
 11454 ;;		_MXK_DIPSwitch
 11455 ;;		_Port_ToggleQuad
 11456 ;; This function uses a non-reentrant model
 11457 ;;
 11458                           
 11459                           	psect	text61
 11460  01343A                     __ptext61:
 11461                           	opt stack 0
 11462  01343A                     _Port_GetQuad:
 11463                           	opt stack 22
 11464                           
 11465                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 11466                           
 11467                           ;incstack = 0
 11468  01343A  0100               	movlb	0	; () banked
 11469  01343C  EE20 F006          	lfsr	2,6
 11470  013440  51B3               	movf	Port_GetQuad@pInput& (0+255),w,b
 11471  013442  26D9               	addwf	fsr2l,f,c
 11472  013444  51B4               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 11473  013446  22DA               	addwfc	fsr2h,f,c
 11474  013448  CFDE F0B6          	movff	postinc2,??_Port_GetQuad
 11475  01344C  CFDD F0B7          	movff	postdec2,??_Port_GetQuad+1
 11476  013450  C0B6  FFD9         	movff	??_Port_GetQuad,fsr2l
 11477  013454  C0B7  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 11478  013458  50DF               	movf	indf2,w,c
 11479  01345A  6FB8               	movwf	Port_GetQuad@Output& (0+255),b
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 11483  01345C  51B5               	movf	Port_GetQuad@pQuad& (0+255),w,b
 11484  01345E  0D04               	mullw	4
 11485  013460  28F3               	incf	prodl,w,c
 11486  013462  6FB6               	movwf	??_Port_GetQuad& (0+255),b
 11487  013464  D002               	goto	u8350
 11488  013466                     u8355:
 11489  013466  90D8               	bcf	status,0,c
 11490  013468  33B8               	rrcf	Port_GetQuad@Output& (0+255),f,b
 11491  01346A                     u8350:
 11492  01346A  2FB6               	decfsz	??_Port_GetQuad& (0+255),f,b
 11493  01346C  D7FC               	goto	u8355
 11494                           
 11495                           ;Port.c: 502: Output &= 0xF;
 11496  01346E  0E0F               	movlw	15
 11497  013470  0100               	movlb	0	; () banked
 11498  013472  17B8               	andwf	Port_GetQuad@Output& (0+255),f,b
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;Port.c: 503: return Output;
 11502  013474  51B8               	movf	Port_GetQuad@Output& (0+255),w,b
 11503  013476  0012               	return	
 11504  013478                     __end_of_Port_GetQuad:
 11505                           	opt stack 0
 11506                           tosu	equ	0xFFF
 11507                           tosh	equ	0xFFE
 11508                           tosl	equ	0xFFD
 11509                           pclath	equ	0xFFA
 11510                           tblptru	equ	0xFF8
 11511                           tblptrh	equ	0xFF7
 11512                           tblptrl	equ	0xFF6
 11513                           tablat	equ	0xFF5
 11514                           prodh	equ	0xFF4
 11515                           prodl	equ	0xFF3
 11516                           intcon	equ	0xFF2
 11517                           postinc0	equ	0xFEE
 11518                           wreg	equ	0xFE8
 11519                           indf1	equ	0xFE7
 11520                           postdec1	equ	0xFE5
 11521                           fsr1h	equ	0xFE2
 11522                           fsr1l	equ	0xFE1
 11523                           indf2	equ	0xFDF
 11524                           postinc2	equ	0xFDE
 11525                           postdec2	equ	0xFDD
 11526                           plusw2	equ	0xFDB
 11527                           fsr2h	equ	0xFDA
 11528                           fsr2l	equ	0xFD9
 11529                           status	equ	0xFD8
 11530                           
 11531 ;; *************** function _Event_DIPSwitch *****************
 11532 ;; Defined at:
 11533 ;;		line 22 in file "Events.c"
 11534 ;; Parameters:    Size  Location     Type
 11535 ;;  pState          1    wreg     unsigned char 
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;  pState          1   25[BANK0 ] unsigned char 
 11538 ;;  Bar             1   26[BANK0 ] unsigned char 
 11539 ;; Return value:  Size  Location     Type
 11540 ;;                  1    wreg      void 
 11541 ;; Registers used:
 11542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11543 ;; Tracked objects:
 11544 ;;		On entry : 0/0
 11545 ;;		On exit  : 0/0
 11546 ;;		Unchanged: 0/0
 11547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;Total ram usage:        2 bytes
 11553 ;; Hardware stack levels used:    1
 11554 ;; Hardware stack levels required when called:   13
 11555 ;; This function calls:
 11556 ;;		_HMI_GetBar
 11557 ;;		_HMI_SetBar
 11558 ;;		_LED_Toggle
 11559 ;; This function is called by:
 11560 ;;		_FunctInitButton
 11561 ;;		_Button_Poll
 11562 ;; This function uses a non-reentrant model
 11563 ;;
 11564                           
 11565                           	psect	text62
 11566  0137C2                     __ptext62:
 11567                           	opt stack 0
 11568  0137C2                     _Event_DIPSwitch:
 11569                           	opt stack 15
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;incstack = 0
 11573                           ;Event_DIPSwitch@pState stored from wreg
 11574  0137C2  0100               	movlb	0	; () banked
 11575  0137C4  6FCC               	movwf	Event_DIPSwitch@pState& (0+255),b
 11576                           
 11577                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 11578  0137C6  EC98  F09D         	call	_HMI_GetBar	;wreg free
 11579  0137CA  0100               	movlb	0	; () banked
 11580  0137CC  6FCD               	movwf	Event_DIPSwitch@Bar& (0+255),b
 11581                           
 11582                           ; BSR set to: 0
 11583                           ;Events.c: 25: Bar &= 0x0F;
 11584  0137CE  0E0F               	movlw	15
 11585  0137D0  17CD               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;Events.c: 26: pState <<= 4;
 11589  0137D2  3BCC               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 11590  0137D4  0EF0               	movlw	240
 11591  0137D6  17CC               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 11595  0137D8  51CC               	movf	Event_DIPSwitch@pState& (0+255),w,b
 11596  0137DA  11CD               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 11597  0137DC  EC88  F09D         	call	_HMI_SetBar
 11598                           
 11599                           ;Events.c: 32: LED_Toggle(eLED1);
 11600  0137E0  0E00               	movlw	0
 11601  0137E2  ECDD  F099         	call	_LED_Toggle
 11602  0137E6  0012               	return		;funcret
 11603  0137E8                     __end_of_Event_DIPSwitch:
 11604                           	opt stack 0
 11605                           tosu	equ	0xFFF
 11606                           tosh	equ	0xFFE
 11607                           tosl	equ	0xFFD
 11608                           pclath	equ	0xFFA
 11609                           tblptru	equ	0xFF8
 11610                           tblptrh	equ	0xFF7
 11611                           tblptrl	equ	0xFF6
 11612                           tablat	equ	0xFF5
 11613                           prodh	equ	0xFF4
 11614                           prodl	equ	0xFF3
 11615                           intcon	equ	0xFF2
 11616                           postinc0	equ	0xFEE
 11617                           wreg	equ	0xFE8
 11618                           indf1	equ	0xFE7
 11619                           postdec1	equ	0xFE5
 11620                           fsr1h	equ	0xFE2
 11621                           fsr1l	equ	0xFE1
 11622                           indf2	equ	0xFDF
 11623                           postinc2	equ	0xFDE
 11624                           postdec2	equ	0xFDD
 11625                           plusw2	equ	0xFDB
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function _Event_NULL *****************
 11631 ;; Defined at:
 11632 ;;		line 9 in file "Events.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  pState          1    wreg     unsigned char 
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  pState          1    0[COMRAM] unsigned char 
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      void 
 11639 ;; Registers used:
 11640 ;;		wreg
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;Total ram usage:        0 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    7
 11653 ;; This function calls:
 11654 ;;		Nothing
 11655 ;; This function is called by:
 11656 ;;		_HMI_Init
 11657 ;;		_Button_Poll
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           	psect	text63
 11662  001404                     __ptext63:
 11663                           	opt stack 0
 11664  001404                     _Event_NULL:
 11665                           	opt stack 21
 11666                           
 11667                           ;incstack = 0
 11668  001404  0012               	return		;funcret
 11669  001406                     __end_of_Event_NULL:
 11670                           	opt stack 0
 11671                           tosu	equ	0xFFF
 11672                           tosh	equ	0xFFE
 11673                           tosl	equ	0xFFD
 11674                           pclath	equ	0xFFA
 11675                           tblptru	equ	0xFF8
 11676                           tblptrh	equ	0xFF7
 11677                           tblptrl	equ	0xFF6
 11678                           tablat	equ	0xFF5
 11679                           prodh	equ	0xFF4
 11680                           prodl	equ	0xFF3
 11681                           intcon	equ	0xFF2
 11682                           postinc0	equ	0xFEE
 11683                           wreg	equ	0xFE8
 11684                           indf1	equ	0xFE7
 11685                           postdec1	equ	0xFE5
 11686                           fsr1h	equ	0xFE2
 11687                           fsr1l	equ	0xFE1
 11688                           indf2	equ	0xFDF
 11689                           postinc2	equ	0xFDE
 11690                           postdec2	equ	0xFDD
 11691                           plusw2	equ	0xFDB
 11692                           fsr2h	equ	0xFDA
 11693                           fsr2l	equ	0xFD9
 11694                           status	equ	0xFD8
 11695                           
 11696 ;; *************** function _Event_TestButton *****************
 11697 ;; Defined at:
 11698 ;;		line 52 in file "Events.c"
 11699 ;; Parameters:    Size  Location     Type
 11700 ;;  pState          1    wreg     unsigned char 
 11701 ;; Auto vars:     Size  Location     Type
 11702 ;;  pState          1   25[BANK0 ] unsigned char 
 11703 ;; Return value:  Size  Location     Type
 11704 ;;                  1    wreg      void 
 11705 ;; Registers used:
 11706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11707 ;; Tracked objects:
 11708 ;;		On entry : 0/0
 11709 ;;		On exit  : 0/0
 11710 ;;		Unchanged: 0/0
 11711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11715 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11716 ;;Total ram usage:        1 bytes
 11717 ;; Hardware stack levels used:    1
 11718 ;; Hardware stack levels required when called:   13
 11719 ;; This function calls:
 11720 ;;		_HMI_SetButton
 11721 ;;		_HMI_SetNumber
 11722 ;;		_LED_Toggle
 11723 ;; This function is called by:
 11724 ;;		_FunctInitButton
 11725 ;;		_Button_Poll
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           	psect	text64
 11730  0135FE                     __ptext64:
 11731                           	opt stack 0
 11732  0135FE                     _Event_TestButton:
 11733                           	opt stack 15
 11734                           
 11735                           ;incstack = 0
 11736                           ;Event_TestButton@pState stored from wreg
 11737  0135FE  0100               	movlb	0	; () banked
 11738  013600  6FCC               	movwf	Event_TestButton@pState& (0+255),b
 11739                           
 11740                           ;Events.c: 56: static UINT8 j = 0;
 11741                           ;Events.c: 60: if (pState == 0)
 11742  013602  0100               	movlb	0	; () banked
 11743  013604  51CC               	movf	Event_TestButton@pState& (0+255),w,b
 11744  013606  A4D8               	btfss	status,2,c
 11745  013608  D010               	goto	l1873
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;Events.c: 61: {
 11749                           ;Events.c: 62: j++;
 11750  01360A  2B89               	incf	Event_TestButton@j& (0+255),f,b
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;Events.c: 63: val += j;
 11754  01360C  5189               	movf	Event_TestButton@j& (0+255),w,b
 11755  01360E  2779               	addwf	_val& (0+255),f,b
 11756  013610  0E00               	movlw	0
 11757  013612  237A               	addwfc	(_val+1)& (0+255),f,b
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;Events.c: 64: HMI_SetNumber( val );
 11761  013614  C079  F0C9         	movff	_val,HMI_SetNumber@pInput
 11762  013618  C07A  F0CA         	movff	_val+1,HMI_SetNumber@pInput+1
 11763  01361C  ECF4  F09B         	call	_HMI_SetNumber	;wreg free
 11764                           
 11765                           ;Events.c: 67: HMI_SetButton( j & 3 );
 11766  013620  0100               	movlb	0	; () banked
 11767  013622  5189               	movf	Event_TestButton@j& (0+255),w,b
 11768  013624  0B03               	andlw	3
 11769  013626  EC55  F094         	call	_HMI_SetButton
 11770  01362A                     l1873:
 11771                           
 11772                           ;Events.c: 68: }
 11773                           ;Events.c: 72: LED_Toggle(eLED1);
 11774  01362A  0E00               	movlw	0
 11775  01362C  ECDD  F099         	call	_LED_Toggle
 11776  013630  0012               	return		;funcret
 11777  013632                     __end_of_Event_TestButton:
 11778                           	opt stack 0
 11779                           tosu	equ	0xFFF
 11780                           tosh	equ	0xFFE
 11781                           tosl	equ	0xFFD
 11782                           pclath	equ	0xFFA
 11783                           tblptru	equ	0xFF8
 11784                           tblptrh	equ	0xFF7
 11785                           tblptrl	equ	0xFF6
 11786                           tablat	equ	0xFF5
 11787                           prodh	equ	0xFF4
 11788                           prodl	equ	0xFF3
 11789                           intcon	equ	0xFF2
 11790                           postinc0	equ	0xFEE
 11791                           wreg	equ	0xFE8
 11792                           indf1	equ	0xFE7
 11793                           postdec1	equ	0xFE5
 11794                           fsr1h	equ	0xFE2
 11795                           fsr1l	equ	0xFE1
 11796                           indf2	equ	0xFDF
 11797                           postinc2	equ	0xFDE
 11798                           postdec2	equ	0xFDD
 11799                           plusw2	equ	0xFDB
 11800                           fsr2h	equ	0xFDA
 11801                           fsr2l	equ	0xFD9
 11802                           status	equ	0xFD8
 11803                           
 11804 ;; *************** function _HMI_SetNumber *****************
 11805 ;; Defined at:
 11806 ;;		line 221 in file "HMI.c"
 11807 ;; Parameters:    Size  Location     Type
 11808 ;;  pInput          2   22[BANK0 ] int 
 11809 ;; Auto vars:     Size  Location     Type
 11810 ;;		None
 11811 ;; Return value:  Size  Location     Type
 11812 ;;                  1    wreg      void 
 11813 ;; Registers used:
 11814 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11815 ;; Tracked objects:
 11816 ;;		On entry : 0/0
 11817 ;;		On exit  : 0/0
 11818 ;;		Unchanged: 0/0
 11819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11820 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;Total ram usage:        2 bytes
 11825 ;; Hardware stack levels used:    1
 11826 ;; Hardware stack levels required when called:    9
 11827 ;; This function calls:
 11828 ;;		_HMI_SetSegments
 11829 ;;		_itos
 11830 ;; This function is called by:
 11831 ;;		_Event_TestButton
 11832 ;;		_main
 11833 ;;		_Event_HMI_UpButton
 11834 ;;		_Event_HMI_DownButton
 11835 ;;		_ADCAverage
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           	psect	text65
 11840  0137E8                     __ptext65:
 11841                           	opt stack 0
 11842  0137E8                     _HMI_SetNumber:
 11843                           	opt stack 21
 11844                           
 11845                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 11846                           
 11847                           ;incstack = 0
 11848  0137E8  C0C9  F0BF         	movff	HMI_SetNumber@pInput,itos@input
 11849  0137EC  C0CA  F0C0         	movff	HMI_SetNumber@pInput+1,itos@input+1
 11850  0137F0  0E2C               	movlw	low _HMIBoard
 11851  0137F2  0100               	movlb	0	; () banked
 11852  0137F4  6FC1               	movwf	itos@destination& (0+255),b
 11853  0137F6  0E01               	movlw	high _HMIBoard
 11854  0137F8  6FC2               	movwf	(itos@destination+1)& (0+255),b
 11855  0137FA  EC02  F08F         	call	_itos	;wreg free
 11856                           
 11857                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 11858  0137FE  0E2C               	movlw	low _HMIBoard
 11859  013800  0100               	movlb	0	; () banked
 11860  013802  6FB4               	movwf	HMI_SetSegments@pString& (0+255),b
 11861  013804  0E01               	movlw	high _HMIBoard
 11862  013806  6FB5               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 11863  013808  EC12  F091         	call	_HMI_SetSegments	;wreg free
 11864  01380C  0012               	return		;funcret
 11865  01380E                     __end_of_HMI_SetNumber:
 11866                           	opt stack 0
 11867                           tosu	equ	0xFFF
 11868                           tosh	equ	0xFFE
 11869                           tosl	equ	0xFFD
 11870                           pclath	equ	0xFFA
 11871                           tblptru	equ	0xFF8
 11872                           tblptrh	equ	0xFF7
 11873                           tblptrl	equ	0xFF6
 11874                           tablat	equ	0xFF5
 11875                           prodh	equ	0xFF4
 11876                           prodl	equ	0xFF3
 11877                           intcon	equ	0xFF2
 11878                           postinc0	equ	0xFEE
 11879                           wreg	equ	0xFE8
 11880                           indf1	equ	0xFE7
 11881                           postdec1	equ	0xFE5
 11882                           fsr1h	equ	0xFE2
 11883                           fsr1l	equ	0xFE1
 11884                           indf2	equ	0xFDF
 11885                           postinc2	equ	0xFDE
 11886                           postdec2	equ	0xFDD
 11887                           plusw2	equ	0xFDB
 11888                           fsr2h	equ	0xFDA
 11889                           fsr2l	equ	0xFD9
 11890                           status	equ	0xFD8
 11891                           
 11892 ;; *************** function _itos *****************
 11893 ;; Defined at:
 11894 ;;		line 369 in file "Library/Types.c"
 11895 ;; Parameters:    Size  Location     Type
 11896 ;;  input           2   12[BANK0 ] unsigned short 
 11897 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 11898 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;  Out             2   20[BANK0 ] unsigned short 
 11901 ;;  Length          2   18[BANK0 ] unsigned short 
 11902 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 11903 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 11904 ;; Return value:  Size  Location     Type
 11905 ;;                  1    wreg      void 
 11906 ;; Registers used:
 11907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11908 ;; Tracked objects:
 11909 ;;		On entry : 0/0
 11910 ;;		On exit  : 0/0
 11911 ;;		Unchanged: 0/0
 11912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11913 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11914 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11916 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11917 ;;Total ram usage:       10 bytes
 11918 ;; Hardware stack levels used:    1
 11919 ;; Hardware stack levels required when called:    8
 11920 ;; This function calls:
 11921 ;;		___lwdiv
 11922 ;;		___lwmod
 11923 ;;		_reverse
 11924 ;; This function is called by:
 11925 ;;		_HMI_SetNumber
 11926 ;; This function uses a non-reentrant model
 11927 ;;
 11928                           
 11929                           	psect	text66
 11930  011E04                     __ptext66:
 11931                           	opt stack 0
 11932  011E04                     _itos:
 11933                           	opt stack 21
 11934                           
 11935                           ;Types.c: 371: UINT16 Out = input;
 11936                           
 11937                           ;incstack = 0
 11938  011E04  C0BF  F0C7         	movff	itos@input,itos@Out
 11939  011E08  C0C0  F0C8         	movff	itos@input+1,itos@Out+1
 11940                           
 11941                           ;Types.c: 372: UINT16 Length = 0;
 11942  011E0C  0E00               	movlw	0
 11943  011E0E  0100               	movlb	0	; () banked
 11944  011E10  6FC6               	movwf	(itos@Length+1)& (0+255),b
 11945  011E12  0E00               	movlw	0
 11946  011E14  6FC5               	movwf	itos@Length& (0+255),b
 11947                           
 11948                           ; BSR set to: 0
 11949                           ;Types.c: 373: char *Data = destination;
 11950  011E16  C0C1  F0C3         	movff	itos@destination,itos@Data
 11951  011E1A  C0C2  F0C4         	movff	itos@destination+1,itos@Data+1
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;Types.c: 374: if(Out == 0)
 11955  011E1E  51C7               	movf	itos@Out& (0+255),w,b
 11956  011E20  11C8               	iorwf	(itos@Out+1)& (0+255),w,b
 11957  011E22  A4D8               	btfss	status,2,c
 11958  011E24  D030               	goto	l929
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;Types.c: 375: {
 11962                           ;Types.c: 376: Data[0] = (UINT16)'0';
 11963  011E26  C0C3  FFD9         	movff	itos@Data,fsr2l
 11964  011E2A  C0C4  FFDA         	movff	itos@Data+1,fsr2h
 11965  011E2E  0E30               	movlw	48
 11966  011E30  6EDF               	movwf	indf2,c
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;Types.c: 377: Length = 1;
 11970  011E32  0E00               	movlw	0
 11971  011E34  6FC6               	movwf	(itos@Length+1)& (0+255),b
 11972  011E36  0E01               	movlw	1
 11973  011E38  6FC5               	movwf	itos@Length& (0+255),b
 11974                           
 11975                           ;Types.c: 378: }
 11976  011E3A  D039               	goto	l928
 11977  011E3C                     
 11978                           ; BSR set to: 0
 11979                           ;Types.c: 382: {
 11980                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 11981                           
 11982                           ; BSR set to: 0
 11983  011E3C  C0C7  F0BA         	movff	itos@Out,___lwmod@dividend
 11984  011E40  C0C8  F0BB         	movff	itos@Out+1,___lwmod@dividend+1
 11985  011E44  0E00               	movlw	0
 11986  011E46  6FBD               	movwf	(___lwmod@divisor+1)& (0+255),b
 11987  011E48  0E0A               	movlw	10
 11988  011E4A  6FBC               	movwf	___lwmod@divisor& (0+255),b
 11989  011E4C  EC9B  F099         	call	___lwmod	;wreg free
 11990  011E50  0100               	movlb	0	; () banked
 11991  011E52  51BA               	movf	?___lwmod& (0+255),w,b
 11992  011E54  0F30               	addlw	48
 11993  011E56  C0C3  FFD9         	movff	itos@Data,fsr2l
 11994  011E5A  C0C4  FFDA         	movff	itos@Data+1,fsr2h
 11995  011E5E  6EDF               	movwf	indf2,c
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;Types.c: 384: Out /= 10;
 11999  011E60  C0C7  F0B3         	movff	itos@Out,___lwdiv@dividend
 12000  011E64  C0C8  F0B4         	movff	itos@Out+1,___lwdiv@dividend+1
 12001  011E68  0E00               	movlw	0
 12002  011E6A  6FB6               	movwf	(___lwdiv@divisor+1)& (0+255),b
 12003  011E6C  0E0A               	movlw	10
 12004  011E6E  6FB5               	movwf	___lwdiv@divisor& (0+255),b
 12005  011E70  ECF3  F097         	call	___lwdiv	;wreg free
 12006  011E74  C0B3  F0C7         	movff	?___lwdiv,itos@Out
 12007  011E78  C0B4  F0C8         	movff	?___lwdiv+1,itos@Out+1
 12008                           
 12009                           ;Types.c: 385: Length ++;
 12010  011E7C  0100               	movlb	0	; () banked
 12011  011E7E  4BC5               	infsnz	itos@Length& (0+255),f,b
 12012  011E80  2BC6               	incf	(itos@Length+1)& (0+255),f,b
 12013                           
 12014                           ; BSR set to: 0
 12015                           ;Types.c: 386: Data++;
 12016  011E82  4BC3               	infsnz	itos@Data& (0+255),f,b
 12017  011E84  2BC4               	incf	(itos@Data+1)& (0+255),f,b
 12018  011E86                     l929:
 12019                           
 12020                           ; BSR set to: 0
 12021                           
 12022                           ; BSR set to: 0
 12023  011E86  51C7               	movf	itos@Out& (0+255),w,b
 12024  011E88  11C8               	iorwf	(itos@Out+1)& (0+255),w,b
 12025  011E8A  B4D8               	btfsc	status,2,c
 12026  011E8C  D006               	goto	u8090
 12027                           
 12028                           ; BSR set to: 0
 12029  011E8E  51C6               	movf	(itos@Length+1)& (0+255),w,b
 12030  011E90  E104               	bnz	l11806
 12031  011E92  0E06               	movlw	6
 12032  011E94  5DC5               	subwf	itos@Length& (0+255),w,b
 12033  011E96  A0D8               	btfss	status,0,c
 12034  011E98  D7D1               	goto	l930
 12035  011E9A                     u8090:
 12036  011E9A                     l11806:
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;Types.c: 387: }
 12040                           ;Types.c: 388: reverse(destination, Length);
 12041  011E9A  C0C1  F0B3         	movff	itos@destination,reverse@input
 12042  011E9E  C0C2  F0B4         	movff	itos@destination+1,reverse@input+1
 12043  011EA2  C0C5  F0B5         	movff	itos@Length,reverse@length
 12044  011EA6  C0C6  F0B6         	movff	itos@Length+1,reverse@length+1
 12045  011EAA  ECC9  F097         	call	_reverse	;wreg free
 12046  011EAE                     l928:
 12047                           
 12048                           ;Types.c: 389: }
 12049                           ;Types.c: 390: destination[Length] = '\0';
 12050  011EAE  0100               	movlb	0	; () banked
 12051  011EB0  51C5               	movf	itos@Length& (0+255),w,b
 12052  011EB2  25C1               	addwf	itos@destination& (0+255),w,b
 12053  011EB4  6ED9               	movwf	fsr2l,c
 12054  011EB6  51C6               	movf	(itos@Length+1)& (0+255),w,b
 12055  011EB8  21C2               	addwfc	(itos@destination+1)& (0+255),w,b
 12056  011EBA  6EDA               	movwf	fsr2h,c
 12057  011EBC  0E00               	movlw	0
 12058  011EBE  6EDF               	movwf	indf2,c
 12059                           
 12060                           ; BSR set to: 0
 12061  011EC0  0012               	return		;funcret
 12062  011EC2                     __end_of_itos:
 12063                           	opt stack 0
 12064                           tosu	equ	0xFFF
 12065                           tosh	equ	0xFFE
 12066                           tosl	equ	0xFFD
 12067                           pclath	equ	0xFFA
 12068                           tblptru	equ	0xFF8
 12069                           tblptrh	equ	0xFF7
 12070                           tblptrl	equ	0xFF6
 12071                           tablat	equ	0xFF5
 12072                           prodh	equ	0xFF4
 12073                           prodl	equ	0xFF3
 12074                           intcon	equ	0xFF2
 12075                           postinc0	equ	0xFEE
 12076                           wreg	equ	0xFE8
 12077                           indf1	equ	0xFE7
 12078                           postdec1	equ	0xFE5
 12079                           fsr1h	equ	0xFE2
 12080                           fsr1l	equ	0xFE1
 12081                           indf2	equ	0xFDF
 12082                           postinc2	equ	0xFDE
 12083                           postdec2	equ	0xFDD
 12084                           plusw2	equ	0xFDB
 12085                           fsr2h	equ	0xFDA
 12086                           fsr2l	equ	0xFD9
 12087                           status	equ	0xFD8
 12088                           
 12089 ;; *************** function _reverse *****************
 12090 ;; Defined at:
 12091 ;;		line 357 in file "Library/Types.c"
 12092 ;; Parameters:    Size  Location     Type
 12093 ;;  input           2    0[BANK0 ] PTR unsigned char 
 12094 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 12095 ;;  length          2    2[BANK0 ] unsigned short 
 12096 ;; Auto vars:     Size  Location     Type
 12097 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 12098 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 12099 ;;  tempVar         1    4[BANK0 ] unsigned char 
 12100 ;; Return value:  Size  Location     Type
 12101 ;;                  1    wreg      void 
 12102 ;; Registers used:
 12103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12104 ;; Tracked objects:
 12105 ;;		On entry : 0/0
 12106 ;;		On exit  : 0/0
 12107 ;;		Unchanged: 0/0
 12108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12109 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12110 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12112 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12113 ;;Total ram usage:        7 bytes
 12114 ;; Hardware stack levels used:    1
 12115 ;; Hardware stack levels required when called:    7
 12116 ;; This function calls:
 12117 ;;		Nothing
 12118 ;; This function is called by:
 12119 ;;		_itos
 12120 ;; This function uses a non-reentrant model
 12121 ;;
 12122                           
 12123                           	psect	text67
 12124  012F92                     __ptext67:
 12125                           	opt stack 0
 12126  012F92                     _reverse:
 12127                           	opt stack 21
 12128                           
 12129                           ;Types.c: 359: char tempVar,
 12130                           ;Types.c: 360: *iterator = input + length;
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;incstack = 0
 12134  012F92  0100               	movlb	0	; () banked
 12135  012F94  51B5               	movf	reverse@length& (0+255),w,b
 12136  012F96  25B3               	addwf	reverse@input& (0+255),w,b
 12137  012F98  6FB8               	movwf	reverse@iterator& (0+255),b
 12138  012F9A  51B6               	movf	(reverse@length+1)& (0+255),w,b
 12139  012F9C  21B4               	addwfc	(reverse@input+1)& (0+255),w,b
 12140  012F9E  6FB9               	movwf	(reverse@iterator+1)& (0+255),b
 12141                           
 12142                           ;Types.c: 362: while ( --iterator > input )
 12143  012FA0  D018               	goto	l921
 12144  012FA2                     
 12145                           ; BSR set to: 0
 12146                           ;Types.c: 363: {
 12147                           ;Types.c: 364: tempVar = *input;
 12148                           
 12149                           ; BSR set to: 0
 12150  012FA2  C0B3  FFD9         	movff	reverse@input,fsr2l
 12151  012FA6  C0B4  FFDA         	movff	reverse@input+1,fsr2h
 12152  012FAA  50DF               	movf	indf2,w,c
 12153  012FAC  6FB7               	movwf	reverse@tempVar& (0+255),b
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;Types.c: 365: *input++=*iterator;
 12157  012FAE  C0B8  FFD9         	movff	reverse@iterator,fsr2l
 12158  012FB2  C0B9  FFDA         	movff	reverse@iterator+1,fsr2h
 12159  012FB6  C0B3  FFE1         	movff	reverse@input,fsr1l
 12160  012FBA  C0B4  FFE2         	movff	reverse@input+1,fsr1h
 12161  012FBE  CFDF FFE7          	movff	indf2,indf1
 12162                           
 12163                           ; BSR set to: 0
 12164  012FC2  4BB3               	infsnz	reverse@input& (0+255),f,b
 12165  012FC4  2BB4               	incf	(reverse@input+1)& (0+255),f,b
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;Types.c: 366: *iterator=tempVar;
 12169  012FC6  C0B8  FFD9         	movff	reverse@iterator,fsr2l
 12170  012FCA  C0B9  FFDA         	movff	reverse@iterator+1,fsr2h
 12171  012FCE  C0B7  FFDF         	movff	reverse@tempVar,indf2
 12172  012FD2                     l921:
 12173                           
 12174                           ; BSR set to: 0
 12175                           
 12176                           ; BSR set to: 0
 12177  012FD2  07B8               	decf	reverse@iterator& (0+255),f,b
 12178  012FD4  A0D8               	btfss	status,0,c
 12179  012FD6  07B9               	decf	(reverse@iterator+1)& (0+255),f,b
 12180  012FD8  51B8               	movf	reverse@iterator& (0+255),w,b
 12181  012FDA  5DB3               	subwf	reverse@input& (0+255),w,b
 12182  012FDC  51B9               	movf	(reverse@iterator+1)& (0+255),w,b
 12183  012FDE  59B4               	subwfb	(reverse@input+1)& (0+255),w,b
 12184  012FE0  B0D8               	btfsc	status,0,c
 12185  012FE2  0012               	return	
 12186  012FE4  D7DE               	goto	l922
 12187  012FE6                     __end_of_reverse:
 12188                           	opt stack 0
 12189                           tosu	equ	0xFFF
 12190                           tosh	equ	0xFFE
 12191                           tosl	equ	0xFFD
 12192                           pclath	equ	0xFFA
 12193                           tblptru	equ	0xFF8
 12194                           tblptrh	equ	0xFF7
 12195                           tblptrl	equ	0xFF6
 12196                           tablat	equ	0xFF5
 12197                           prodh	equ	0xFF4
 12198                           prodl	equ	0xFF3
 12199                           intcon	equ	0xFF2
 12200                           postinc0	equ	0xFEE
 12201                           wreg	equ	0xFE8
 12202                           indf1	equ	0xFE7
 12203                           postdec1	equ	0xFE5
 12204                           fsr1h	equ	0xFE2
 12205                           fsr1l	equ	0xFE1
 12206                           indf2	equ	0xFDF
 12207                           postinc2	equ	0xFDE
 12208                           postdec2	equ	0xFDD
 12209                           plusw2	equ	0xFDB
 12210                           fsr2h	equ	0xFDA
 12211                           fsr2l	equ	0xFD9
 12212                           status	equ	0xFD8
 12213                           
 12214 ;; *************** function ___lwmod *****************
 12215 ;; Defined at:
 12216 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;  dividend        2    7[BANK0 ] unsigned int 
 12219 ;;  divisor         2    9[BANK0 ] unsigned int 
 12220 ;; Auto vars:     Size  Location     Type
 12221 ;;  counter         1   11[BANK0 ] unsigned char 
 12222 ;; Return value:  Size  Location     Type
 12223 ;;                  2    7[BANK0 ] unsigned int 
 12224 ;; Registers used:
 12225 ;;		wreg, status,2, status,0
 12226 ;; Tracked objects:
 12227 ;;		On entry : 0/0
 12228 ;;		On exit  : 0/0
 12229 ;;		Unchanged: 0/0
 12230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12231 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12234 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12235 ;;Total ram usage:        5 bytes
 12236 ;; Hardware stack levels used:    1
 12237 ;; Hardware stack levels required when called:    7
 12238 ;; This function calls:
 12239 ;;		Nothing
 12240 ;; This function is called by:
 12241 ;;		_itos
 12242 ;;		_printf
 12243 ;; This function uses a non-reentrant model
 12244 ;;
 12245                           
 12246                           	psect	text68
 12247  013336                     __ptext68:
 12248                           	opt stack 0
 12249  013336                     ___lwmod:
 12250                           	opt stack 22
 12251                           
 12252                           ; BSR set to: 0
 12253                           ;incstack = 0
 12254  013336  0100               	movlb	0	; () banked
 12255  013338  51BC               	movf	___lwmod@divisor& (0+255),w,b
 12256  01333A  11BD               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 12257  01333C  B4D8               	btfsc	status,2,c
 12258  01333E  D018               	goto	l2748
 12259                           
 12260                           ; BSR set to: 0
 12261  013340  0E01               	movlw	1
 12262  013342  6FBE               	movwf	___lwmod@counter& (0+255),b
 12263  013344  D004               	goto	l2743
 12264  013346                     
 12265                           ; BSR set to: 0
 12266                           
 12267                           ; BSR set to: 0
 12268  013346  90D8               	bcf	status,0,c
 12269  013348  37BC               	rlcf	___lwmod@divisor& (0+255),f,b
 12270  01334A  37BD               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 12271  01334C  2BBE               	incf	___lwmod@counter& (0+255),f,b
 12272  01334E                     l2743:
 12273                           
 12274                           ; BSR set to: 0
 12275                           
 12276                           ; BSR set to: 0
 12277  01334E  AFBD               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 12278  013350  D7FA               	goto	l2744
 12279  013352                     u8000:
 12280                           
 12281                           ; BSR set to: 0
 12282                           
 12283                           ; BSR set to: 0
 12284                           
 12285                           ; BSR set to: 0
 12286  013352  51BC               	movf	___lwmod@divisor& (0+255),w,b
 12287  013354  5DBA               	subwf	___lwmod@dividend& (0+255),w,b
 12288  013356  51BD               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12289  013358  59BB               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 12290  01335A  A0D8               	btfss	status,0,c
 12291  01335C  D004               	goto	l2747
 12292                           
 12293                           ; BSR set to: 0
 12294  01335E  51BC               	movf	___lwmod@divisor& (0+255),w,b
 12295  013360  5FBA               	subwf	___lwmod@dividend& (0+255),f,b
 12296  013362  51BD               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12297  013364  5BBB               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 12298  013366                     l2747:
 12299                           
 12300                           ; BSR set to: 0
 12301                           
 12302                           ; BSR set to: 0
 12303  013366  90D8               	bcf	status,0,c
 12304  013368  33BD               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 12305  01336A  33BC               	rrcf	___lwmod@divisor& (0+255),f,b
 12306                           
 12307                           ; BSR set to: 0
 12308  01336C  2FBE               	decfsz	___lwmod@counter& (0+255),f,b
 12309  01336E  D7F1               	goto	u8000
 12310  013370                     l2748:
 12311                           
 12312                           ; BSR set to: 0
 12313                           
 12314                           ; BSR set to: 0
 12315  013370  C0BA  F0BA         	movff	___lwmod@dividend,?___lwmod
 12316  013374  C0BB  F0BB         	movff	___lwmod@dividend+1,?___lwmod+1
 12317                           
 12318                           ; BSR set to: 0
 12319  013378  0012               	return		;funcret
 12320  01337A                     __end_of___lwmod:
 12321                           	opt stack 0
 12322                           tosu	equ	0xFFF
 12323                           tosh	equ	0xFFE
 12324                           tosl	equ	0xFFD
 12325                           pclath	equ	0xFFA
 12326                           tblptru	equ	0xFF8
 12327                           tblptrh	equ	0xFF7
 12328                           tblptrl	equ	0xFF6
 12329                           tablat	equ	0xFF5
 12330                           prodh	equ	0xFF4
 12331                           prodl	equ	0xFF3
 12332                           intcon	equ	0xFF2
 12333                           postinc0	equ	0xFEE
 12334                           wreg	equ	0xFE8
 12335                           indf1	equ	0xFE7
 12336                           postdec1	equ	0xFE5
 12337                           fsr1h	equ	0xFE2
 12338                           fsr1l	equ	0xFE1
 12339                           indf2	equ	0xFDF
 12340                           postinc2	equ	0xFDE
 12341                           postdec2	equ	0xFDD
 12342                           plusw2	equ	0xFDB
 12343                           fsr2h	equ	0xFDA
 12344                           fsr2l	equ	0xFD9
 12345                           status	equ	0xFD8
 12346                           
 12347 ;; *************** function ___lwdiv *****************
 12348 ;; Defined at:
 12349 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 12350 ;; Parameters:    Size  Location     Type
 12351 ;;  dividend        2    0[BANK0 ] unsigned int 
 12352 ;;  divisor         2    2[BANK0 ] unsigned int 
 12353 ;; Auto vars:     Size  Location     Type
 12354 ;;  quotient        2    5[BANK0 ] unsigned int 
 12355 ;;  counter         1    4[BANK0 ] unsigned char 
 12356 ;; Return value:  Size  Location     Type
 12357 ;;                  2    0[BANK0 ] unsigned int 
 12358 ;; Registers used:
 12359 ;;		wreg, status,2, status,0
 12360 ;; Tracked objects:
 12361 ;;		On entry : 0/0
 12362 ;;		On exit  : 0/0
 12363 ;;		Unchanged: 0/0
 12364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12365 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12366 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;Total ram usage:        7 bytes
 12370 ;; Hardware stack levels used:    1
 12371 ;; Hardware stack levels required when called:    7
 12372 ;; This function calls:
 12373 ;;		Nothing
 12374 ;; This function is called by:
 12375 ;;		_itos
 12376 ;;		_printf
 12377 ;; This function uses a non-reentrant model
 12378 ;;
 12379                           
 12380                           	psect	text69
 12381  012FE6                     __ptext69:
 12382                           	opt stack 0
 12383  012FE6                     ___lwdiv:
 12384                           	opt stack 22
 12385                           
 12386                           ; BSR set to: 0
 12387                           ;incstack = 0
 12388  012FE6  0E00               	movlw	0
 12389  012FE8  0100               	movlb	0	; () banked
 12390  012FEA  6FB9               	movwf	(___lwdiv@quotient+1)& (0+255),b
 12391  012FEC  0E00               	movlw	0
 12392  012FEE  6FB8               	movwf	___lwdiv@quotient& (0+255),b
 12393                           
 12394                           ; BSR set to: 0
 12395  012FF0  51B5               	movf	___lwdiv@divisor& (0+255),w,b
 12396  012FF2  11B6               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 12397  012FF4  B4D8               	btfsc	status,2,c
 12398  012FF6  D01C               	goto	l2738
 12399                           
 12400                           ; BSR set to: 0
 12401  012FF8  0E01               	movlw	1
 12402  012FFA  6FB7               	movwf	___lwdiv@counter& (0+255),b
 12403  012FFC  D004               	goto	l2733
 12404  012FFE                     
 12405                           ; BSR set to: 0
 12406                           
 12407                           ; BSR set to: 0
 12408  012FFE  90D8               	bcf	status,0,c
 12409  013000  37B5               	rlcf	___lwdiv@divisor& (0+255),f,b
 12410  013002  37B6               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 12411  013004  2BB7               	incf	___lwdiv@counter& (0+255),f,b
 12412  013006                     l2733:
 12413                           
 12414                           ; BSR set to: 0
 12415                           
 12416                           ; BSR set to: 0
 12417  013006  AFB6               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 12418  013008  D7FA               	goto	l2734
 12419  01300A                     u7970:
 12420                           
 12421                           ; BSR set to: 0
 12422                           
 12423                           ; BSR set to: 0
 12424                           
 12425                           ; BSR set to: 0
 12426  01300A  90D8               	bcf	status,0,c
 12427  01300C  37B8               	rlcf	___lwdiv@quotient& (0+255),f,b
 12428  01300E  37B9               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 12429                           
 12430                           ; BSR set to: 0
 12431  013010  51B5               	movf	___lwdiv@divisor& (0+255),w,b
 12432  013012  5DB3               	subwf	___lwdiv@dividend& (0+255),w,b
 12433  013014  51B6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12434  013016  59B4               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 12435  013018  A0D8               	btfss	status,0,c
 12436  01301A  D005               	goto	l2737
 12437                           
 12438                           ; BSR set to: 0
 12439  01301C  51B5               	movf	___lwdiv@divisor& (0+255),w,b
 12440  01301E  5FB3               	subwf	___lwdiv@dividend& (0+255),f,b
 12441  013020  51B6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12442  013022  5BB4               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 12443                           
 12444                           ; BSR set to: 0
 12445  013024  81B8               	bsf	___lwdiv@quotient& (0+255),0,b
 12446  013026                     l2737:
 12447                           
 12448                           ; BSR set to: 0
 12449                           
 12450                           ; BSR set to: 0
 12451  013026  90D8               	bcf	status,0,c
 12452  013028  33B6               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 12453  01302A  33B5               	rrcf	___lwdiv@divisor& (0+255),f,b
 12454                           
 12455                           ; BSR set to: 0
 12456  01302C  2FB7               	decfsz	___lwdiv@counter& (0+255),f,b
 12457  01302E  D7ED               	goto	u7970
 12458  013030                     l2738:
 12459                           
 12460                           ; BSR set to: 0
 12461                           
 12462                           ; BSR set to: 0
 12463  013030  C0B8  F0B3         	movff	___lwdiv@quotient,?___lwdiv
 12464  013034  C0B9  F0B4         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12465                           
 12466                           ; BSR set to: 0
 12467  013038  0012               	return		;funcret
 12468  01303A                     __end_of___lwdiv:
 12469                           	opt stack 0
 12470                           tosu	equ	0xFFF
 12471                           tosh	equ	0xFFE
 12472                           tosl	equ	0xFFD
 12473                           pclath	equ	0xFFA
 12474                           tblptru	equ	0xFF8
 12475                           tblptrh	equ	0xFF7
 12476                           tblptrl	equ	0xFF6
 12477                           tablat	equ	0xFF5
 12478                           prodh	equ	0xFF4
 12479                           prodl	equ	0xFF3
 12480                           intcon	equ	0xFF2
 12481                           postinc0	equ	0xFEE
 12482                           wreg	equ	0xFE8
 12483                           indf1	equ	0xFE7
 12484                           postdec1	equ	0xFE5
 12485                           fsr1h	equ	0xFE2
 12486                           fsr1l	equ	0xFE1
 12487                           indf2	equ	0xFDF
 12488                           postinc2	equ	0xFDE
 12489                           postdec2	equ	0xFDD
 12490                           plusw2	equ	0xFDB
 12491                           fsr2h	equ	0xFDA
 12492                           fsr2l	equ	0xFD9
 12493                           status	equ	0xFD8
 12494                           
 12495 ;; *************** function _HMI_SetSegments *****************
 12496 ;; Defined at:
 12497 ;;		line 226 in file "HMI.c"
 12498 ;; Parameters:    Size  Location     Type
 12499 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 12500 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 12501 ;; Auto vars:     Size  Location     Type
 12502 ;;  in              2    4[BANK0 ] unsigned short 
 12503 ;; Return value:  Size  Location     Type
 12504 ;;                  1    wreg      void 
 12505 ;; Registers used:
 12506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12512 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12513 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12515 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12516 ;;Total ram usage:        5 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:    8
 12519 ;; This function calls:
 12520 ;;		_ToSegment
 12521 ;; This function is called by:
 12522 ;;		_HMI_SetNumber
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           	psect	text70
 12527  012224                     __ptext70:
 12528                           	opt stack 0
 12529  012224                     _HMI_SetSegments:
 12530                           	opt stack 21
 12531                           
 12532                           ;HMI.c: 228: UINT16 in=0;
 12533                           
 12534                           ; BSR set to: 0
 12535                           ;incstack = 0
 12536  012224  0E00               	movlw	0
 12537  012226  0100               	movlb	0	; () banked
 12538  012228  6FB8               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 12539  01222A  0E00               	movlw	0
 12540  01222C  6FB7               	movwf	HMI_SetSegments@in& (0+255),b
 12541                           
 12542                           ;HMI.c: 229: while(*pString)
 12543  01222E  D02E               	goto	l1202
 12544  012230                     
 12545                           ; BSR set to: 0
 12546                           ;HMI.c: 230: {
 12547                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 12548                           
 12549                           ; BSR set to: 0
 12550  012230  0E2C               	movlw	low _HMIBoard
 12551  012232  25B7               	addwf	HMI_SetSegments@in& (0+255),w,b
 12552  012234  6ED9               	movwf	fsr2l,c
 12553  012236  0E01               	movlw	high _HMIBoard
 12554  012238  21B8               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 12555  01223A  6EDA               	movwf	fsr2h,c
 12556  01223C  C0B4  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 12557  012240  C0B5  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 12558  012244  50E7               	movf	indf1,w,c
 12559  012246  EC27  F083         	call	_ToSegment
 12560  01224A  6EDF               	movwf	indf2,c
 12561                           
 12562                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 12563  01224C  0E2C               	movlw	low _HMIBoard
 12564  01224E  0100               	movlb	0	; () banked
 12565  012250  25B7               	addwf	HMI_SetSegments@in& (0+255),w,b
 12566  012252  6ED9               	movwf	fsr2l,c
 12567  012254  0E01               	movlw	high _HMIBoard
 12568  012256  21B8               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 12569  012258  6EDA               	movwf	fsr2h,c
 12570  01225A  0E80               	movlw	128
 12571  01225C  18DE               	xorwf	postinc2,w,c
 12572  01225E  A4D8               	btfss	status,2,c
 12573  012260  D00B               	goto	l1201
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;HMI.c: 234: {
 12577                           ;HMI.c: 235: in--;
 12578  012262  07B7               	decf	HMI_SetSegments@in& (0+255),f,b
 12579  012264  A0D8               	btfss	status,0,c
 12580  012266  07B8               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 12584  012268  0E2C               	movlw	low _HMIBoard
 12585  01226A  25B7               	addwf	HMI_SetSegments@in& (0+255),w,b
 12586  01226C  6ED9               	movwf	fsr2l,c
 12587  01226E  0E01               	movlw	high _HMIBoard
 12588  012270  21B8               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 12589  012272  6EDA               	movwf	fsr2h,c
 12590  012274  0E00               	movlw	0
 12591  012276  8EDB               	bsf	plusw2,7,c
 12592  012278                     l1201:
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;HMI.c: 237: }
 12596                           ;HMI.c: 239: pString++;
 12597                           
 12598                           ; BSR set to: 0
 12599  012278  4BB4               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 12600  01227A  2BB5               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 12601                           
 12602                           ; BSR set to: 0
 12603                           ;HMI.c: 240: in++;
 12604  01227C  4BB7               	infsnz	HMI_SetSegments@in& (0+255),f,b
 12605  01227E  2BB8               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;HMI.c: 241: if (in>=6)
 12609  012280  51B8               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 12610  012282  E116               	bnz	l11858
 12611  012284  0E06               	movlw	6
 12612  012286  5DB7               	subwf	HMI_SetSegments@in& (0+255),w,b
 12613  012288  B0D8               	btfsc	status,0,c
 12614  01228A  D012               	goto	l1204
 12615  01228C                     l1202:
 12616                           
 12617                           ; BSR set to: 0
 12618                           
 12619                           ; BSR set to: 0
 12620                           
 12621                           ; BSR set to: 0
 12622  01228C  C0B4  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 12623  012290  C0B5  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 12624  012294  50DF               	movf	indf2,w,c
 12625  012296  B4D8               	btfsc	status,2,c
 12626  012298  D00B               	goto	l1204
 12627  01229A  D7CA               	goto	l1200
 12628  01229C                     
 12629                           ; BSR set to: 0
 12630                           ;HMI.c: 245: {
 12631                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 12632                           
 12633                           ; BSR set to: 0
 12634  01229C  0E2C               	movlw	low _HMIBoard
 12635  01229E  25B7               	addwf	HMI_SetSegments@in& (0+255),w,b
 12636  0122A0  6ED9               	movwf	fsr2l,c
 12637  0122A2  0E01               	movlw	high _HMIBoard
 12638  0122A4  21B8               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 12639  0122A6  6EDA               	movwf	fsr2h,c
 12640  0122A8  0E00               	movlw	0
 12641  0122AA  6EDF               	movwf	indf2,c
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;HMI.c: 247: in++;
 12645  0122AC  4BB7               	infsnz	HMI_SetSegments@in& (0+255),f,b
 12646  0122AE  2BB8               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 12647  0122B0                     l1204:
 12648  0122B0                     l11858:
 12649                           
 12650                           ; BSR set to: 0
 12651  0122B0  51B8               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 12652  0122B2  E105               	bnz	l1207
 12653  0122B4  0E06               	movlw	6
 12654  0122B6  5DB7               	subwf	HMI_SetSegments@in& (0+255),w,b
 12655  0122B8  B0D8               	btfsc	status,0,c
 12656  0122BA  0012               	return	
 12657  0122BC  D7EF               	goto	l1205
 12658  0122BE                     l1207:
 12659                           
 12660                           ; BSR set to: 0
 12661  0122BE  0012               	return		;funcret
 12662  0122C0                     __end_of_HMI_SetSegments:
 12663                           	opt stack 0
 12664                           tosu	equ	0xFFF
 12665                           tosh	equ	0xFFE
 12666                           tosl	equ	0xFFD
 12667                           pclath	equ	0xFFA
 12668                           tblptru	equ	0xFF8
 12669                           tblptrh	equ	0xFF7
 12670                           tblptrl	equ	0xFF6
 12671                           tablat	equ	0xFF5
 12672                           prodh	equ	0xFF4
 12673                           prodl	equ	0xFF3
 12674                           intcon	equ	0xFF2
 12675                           postinc0	equ	0xFEE
 12676                           wreg	equ	0xFE8
 12677                           indf1	equ	0xFE7
 12678                           postdec1	equ	0xFE5
 12679                           fsr1h	equ	0xFE2
 12680                           fsr1l	equ	0xFE1
 12681                           indf2	equ	0xFDF
 12682                           postinc2	equ	0xFDE
 12683                           postdec2	equ	0xFDD
 12684                           plusw2	equ	0xFDB
 12685                           fsr2h	equ	0xFDA
 12686                           fsr2l	equ	0xFD9
 12687                           status	equ	0xFD8
 12688                           
 12689 ;; *************** function _ToSegment *****************
 12690 ;; Defined at:
 12691 ;;		line 284 in file "Library/Types.c"
 12692 ;; Parameters:    Size  Location     Type
 12693 ;;  pCHR            1    wreg     unsigned char 
 12694 ;; Auto vars:     Size  Location     Type
 12695 ;;  pCHR            1    0[BANK0 ] unsigned char 
 12696 ;; Return value:  Size  Location     Type
 12697 ;;                  1    wreg      unsigned char 
 12698 ;; Registers used:
 12699 ;;		wreg, status,2, status,0
 12700 ;; Tracked objects:
 12701 ;;		On entry : 0/0
 12702 ;;		On exit  : 0/0
 12703 ;;		Unchanged: 0/0
 12704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12709 ;;Total ram usage:        1 bytes
 12710 ;; Hardware stack levels used:    1
 12711 ;; Hardware stack levels required when called:    7
 12712 ;; This function calls:
 12713 ;;		Nothing
 12714 ;; This function is called by:
 12715 ;;		_HMI_SetSegments
 12716 ;; This function uses a non-reentrant model
 12717 ;;
 12718                           
 12719                           	psect	text71
 12720  01064E                     __ptext71:
 12721                           	opt stack 0
 12722  01064E                     _ToSegment:
 12723                           	opt stack 21
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;incstack = 0
 12727                           ;ToSegment@pCHR stored from wreg
 12728  01064E  0100               	movlb	0	; () banked
 12729  010650  6FB3               	movwf	ToSegment@pCHR& (0+255),b
 12730                           
 12731                           ;Types.c: 286: switch(pCHR)
 12732  010652  D07E               	goto	l853
 12733  010654  0E3F               	movlw	63
 12734  010656  0012               	return	
 12735  010658  0E06               	movlw	6
 12736  01065A  0012               	return	
 12737  01065C  0E5B               	movlw	91
 12738  01065E  0012               	return	
 12739  010660  0E4F               	movlw	79
 12740  010662  0012               	return	
 12741  010664  0E66               	movlw	102
 12742  010666  0012               	return	
 12743  010668  0E6D               	movlw	109
 12744  01066A  0012               	return	
 12745  01066C  0E7D               	movlw	125
 12746  01066E  0012               	return	
 12747  010670  0E07               	movlw	7
 12748  010672  0012               	return	
 12749  010674  0E7F               	movlw	127
 12750  010676  0012               	return	
 12751  010678  0E6F               	movlw	111
 12752  01067A  0012               	return	
 12753  01067C  0E5F               	movlw	95
 12754  01067E  0012               	return	
 12755  010680  0E7C               	movlw	124
 12756  010682  0012               	return	
 12757  010684  0E58               	movlw	88
 12758  010686  0012               	return	
 12759  010688  0E5E               	movlw	94
 12760  01068A  0012               	return	
 12761  01068C  0E7B               	movlw	123
 12762  01068E  0012               	return	
 12763  010690  0E71               	movlw	113
 12764  010692  0012               	return	
 12765  010694  0E6F               	movlw	111
 12766  010696  0012               	return	
 12767  010698  0E74               	movlw	116
 12768  01069A  0012               	return	
 12769  01069C  0E04               	movlw	4
 12770  01069E  0012               	return	
 12771  0106A0  0E0E               	movlw	14
 12772  0106A2  0012               	return	
 12773  0106A4  0E7A               	movlw	122
 12774  0106A6  0012               	return	
 12775  0106A8  0E06               	movlw	6
 12776  0106AA  0012               	return	
 12777  0106AC  0E14               	movlw	20
 12778  0106AE  0012               	return	
 12779  0106B0  0E54               	movlw	84
 12780  0106B2  0012               	return	
 12781  0106B4  0E5C               	movlw	92
 12782  0106B6  0012               	return	
 12783  0106B8  0E73               	movlw	115
 12784  0106BA  0012               	return	
 12785  0106BC  0E67               	movlw	103
 12786  0106BE  0012               	return	
 12787  0106C0  0E50               	movlw	80
 12788  0106C2  0012               	return	
 12789  0106C4  0E6D               	movlw	109
 12790  0106C6  0012               	return	
 12791  0106C8  0E78               	movlw	120
 12792  0106CA  0012               	return	
 12793  0106CC  0E1C               	movlw	28
 12794  0106CE  0012               	return	
 12795  0106D0  0E62               	movlw	98
 12796  0106D2  0012               	return	
 12797  0106D4  0E2A               	movlw	42
 12798  0106D6  0012               	return	
 12799  0106D8  0E64               	movlw	100
 12800  0106DA  0012               	return	
 12801  0106DC  0E6E               	movlw	110
 12802  0106DE  0012               	return	
 12803  0106E0  0E5B               	movlw	91
 12804  0106E2  0012               	return	
 12805  0106E4  0E77               	movlw	119
 12806  0106E6  0012               	return	
 12807  0106E8  0E7F               	movlw	127
 12808  0106EA  0012               	return	
 12809  0106EC  0E39               	movlw	57
 12810  0106EE  0012               	return	
 12811  0106F0  0E3F               	movlw	63
 12812  0106F2  0012               	return	
 12813  0106F4  0E79               	movlw	121
 12814  0106F6  0012               	return	
 12815  0106F8  0E71               	movlw	113
 12816  0106FA  0012               	return	
 12817  0106FC  0E3D               	movlw	61
 12818  0106FE  0012               	return	
 12819  010700  0E76               	movlw	118
 12820  010702  0012               	return	
 12821  010704  0E06               	movlw	6
 12822  010706  0012               	return	
 12823  010708  0E1E               	movlw	30
 12824  01070A  0012               	return	
 12825  01070C  0E57               	movlw	87
 12826  01070E  0012               	return	
 12827  010710  0E38               	movlw	56
 12828  010712  0012               	return	
 12829  010714  0E76               	movlw	118
 12830  010716  0012               	return	
 12831  010718  0E76               	movlw	118
 12832  01071A  0012               	return	
 12833  01071C  0E3F               	movlw	63
 12834  01071E  0012               	return	
 12835  010720  0E73               	movlw	115
 12836  010722  0012               	return	
 12837  010724  0E3F               	movlw	63
 12838  010726  0012               	return	
 12839  010728  0E77               	movlw	119
 12840  01072A  0012               	return	
 12841  01072C  0E6D               	movlw	109
 12842  01072E  0012               	return	
 12843  010730  0E31               	movlw	49
 12844  010732  0012               	return	
 12845  010734  0E3E               	movlw	62
 12846  010736  0012               	return	
 12847  010738  0E3E               	movlw	62
 12848  01073A  0012               	return	
 12849  01073C  0E7E               	movlw	126
 12850  01073E  0012               	return	
 12851  010740  0E76               	movlw	118
 12852  010742  0012               	return	
 12853  010744  0E66               	movlw	102
 12854  010746  0012               	return	
 12855  010748  0E5B               	movlw	91
 12856  01074A  0012               	return	
 12857  01074C  0E80               	movlw	128
 12858  01074E  0012               	return	
 12859  010750                     l853:
 12860  010750  0100               	movlb	0	; () banked
 12861  010752  51B3               	movf	ToSegment@pCHR& (0+255),w,b
 12862                           
 12863                           ; Switch size 1, requested type "space"
 12864                           ; Number of cases is 63, Range of values is 46 to 122
 12865                           ; switch strategies available:
 12866                           ; Name         Instructions Cycles
 12867                           ; simple_byte          190    96 (average)
 12868                           ;	Chosen strategy is simple_byte
 12869  010754  0A2E               	xorlw	46	; case 46
 12870  010756  B4D8               	btfsc	status,2,c
 12871  010758  D7F9               	goto	l917
 12872  01075A  0A1E               	xorlw	30	; case 48
 12873  01075C  B4D8               	btfsc	status,2,c
 12874  01075E  D77A               	goto	l854
 12875  010760  0A01               	xorlw	1	; case 49
 12876  010762  B4D8               	btfsc	status,2,c
 12877  010764  D779               	goto	l856
 12878  010766  0A03               	xorlw	3	; case 50
 12879  010768  B4D8               	btfsc	status,2,c
 12880  01076A  D778               	goto	l857
 12881  01076C  0A01               	xorlw	1	; case 51
 12882  01076E  B4D8               	btfsc	status,2,c
 12883  010770  D777               	goto	l858
 12884  010772  0A07               	xorlw	7	; case 52
 12885  010774  B4D8               	btfsc	status,2,c
 12886  010776  D776               	goto	l859
 12887  010778  0A01               	xorlw	1	; case 53
 12888  01077A  B4D8               	btfsc	status,2,c
 12889  01077C  D775               	goto	l860
 12890  01077E  0A03               	xorlw	3	; case 54
 12891  010780  B4D8               	btfsc	status,2,c
 12892  010782  D774               	goto	l861
 12893  010784  0A01               	xorlw	1	; case 55
 12894  010786  B4D8               	btfsc	status,2,c
 12895  010788  D773               	goto	l862
 12896  01078A  0A0F               	xorlw	15	; case 56
 12897  01078C  B4D8               	btfsc	status,2,c
 12898  01078E  D772               	goto	l863
 12899  010790  0A01               	xorlw	1	; case 57
 12900  010792  B4D8               	btfsc	status,2,c
 12901  010794  D771               	goto	l864
 12902  010796  0A78               	xorlw	120	; case 65
 12903  010798  B4D8               	btfsc	status,2,c
 12904  01079A  D7A4               	goto	l891
 12905  01079C  0A03               	xorlw	3	; case 66
 12906  01079E  B4D8               	btfsc	status,2,c
 12907  0107A0  D7A3               	goto	l892
 12908  0107A2  0A01               	xorlw	1	; case 67
 12909  0107A4  B4D8               	btfsc	status,2,c
 12910  0107A6  D7A2               	goto	l893
 12911  0107A8  0A07               	xorlw	7	; case 68
 12912  0107AA  B4D8               	btfsc	status,2,c
 12913  0107AC  D7A1               	goto	l894
 12914  0107AE  0A01               	xorlw	1	; case 69
 12915  0107B0  B4D8               	btfsc	status,2,c
 12916  0107B2  D7A0               	goto	l895
 12917  0107B4  0A03               	xorlw	3	; case 70
 12918  0107B6  B4D8               	btfsc	status,2,c
 12919  0107B8  D79F               	goto	l896
 12920  0107BA  0A01               	xorlw	1	; case 71
 12921  0107BC  B4D8               	btfsc	status,2,c
 12922  0107BE  D79E               	goto	l897
 12923  0107C0  0A0F               	xorlw	15	; case 72
 12924  0107C2  B4D8               	btfsc	status,2,c
 12925  0107C4  D79D               	goto	l898
 12926  0107C6  0A01               	xorlw	1	; case 73
 12927  0107C8  B4D8               	btfsc	status,2,c
 12928  0107CA  D79C               	goto	l899
 12929  0107CC  0A03               	xorlw	3	; case 74
 12930  0107CE  B4D8               	btfsc	status,2,c
 12931  0107D0  D79B               	goto	l900
 12932  0107D2  0A01               	xorlw	1	; case 75
 12933  0107D4  B4D8               	btfsc	status,2,c
 12934  0107D6  D79A               	goto	l901
 12935  0107D8  0A07               	xorlw	7	; case 76
 12936  0107DA  B4D8               	btfsc	status,2,c
 12937  0107DC  D799               	goto	l902
 12938  0107DE  0A01               	xorlw	1	; case 77
 12939  0107E0  B4D8               	btfsc	status,2,c
 12940  0107E2  D798               	goto	l903
 12941  0107E4  0A03               	xorlw	3	; case 78
 12942  0107E6  B4D8               	btfsc	status,2,c
 12943  0107E8  D797               	goto	l904
 12944  0107EA  0A01               	xorlw	1	; case 79
 12945  0107EC  B4D8               	btfsc	status,2,c
 12946  0107EE  D796               	goto	l905
 12947  0107F0  0A1F               	xorlw	31	; case 80
 12948  0107F2  B4D8               	btfsc	status,2,c
 12949  0107F4  D795               	goto	l906
 12950  0107F6  0A01               	xorlw	1	; case 81
 12951  0107F8  B4D8               	btfsc	status,2,c
 12952  0107FA  D794               	goto	l907
 12953  0107FC  0A03               	xorlw	3	; case 82
 12954  0107FE  B4D8               	btfsc	status,2,c
 12955  010800  D793               	goto	l908
 12956  010802  0A01               	xorlw	1	; case 83
 12957  010804  B4D8               	btfsc	status,2,c
 12958  010806  D792               	goto	l909
 12959  010808  0A07               	xorlw	7	; case 84
 12960  01080A  B4D8               	btfsc	status,2,c
 12961  01080C  D791               	goto	l910
 12962  01080E  0A01               	xorlw	1	; case 85
 12963  010810  B4D8               	btfsc	status,2,c
 12964  010812  D790               	goto	l911
 12965  010814  0A03               	xorlw	3	; case 86
 12966  010816  B4D8               	btfsc	status,2,c
 12967  010818  D78F               	goto	l912
 12968  01081A  0A01               	xorlw	1	; case 87
 12969  01081C  B4D8               	btfsc	status,2,c
 12970  01081E  D78E               	goto	l913
 12971  010820  0A0F               	xorlw	15	; case 88
 12972  010822  B4D8               	btfsc	status,2,c
 12973  010824  D78D               	goto	l914
 12974  010826  0A01               	xorlw	1	; case 89
 12975  010828  B4D8               	btfsc	status,2,c
 12976  01082A  D78C               	goto	l915
 12977  01082C  0A03               	xorlw	3	; case 90
 12978  01082E  B4D8               	btfsc	status,2,c
 12979  010830  D78B               	goto	l916
 12980  010832  0A3B               	xorlw	59	; case 97
 12981  010834  B4D8               	btfsc	status,2,c
 12982  010836  D722               	goto	l865
 12983  010838  0A03               	xorlw	3	; case 98
 12984  01083A  B4D8               	btfsc	status,2,c
 12985  01083C  D721               	goto	l866
 12986  01083E  0A01               	xorlw	1	; case 99
 12987  010840  B4D8               	btfsc	status,2,c
 12988  010842  D720               	goto	l867
 12989  010844  0A07               	xorlw	7	; case 100
 12990  010846  B4D8               	btfsc	status,2,c
 12991  010848  D71F               	goto	l868
 12992  01084A  0A01               	xorlw	1	; case 101
 12993  01084C  B4D8               	btfsc	status,2,c
 12994  01084E  D71E               	goto	l869
 12995  010850  0A03               	xorlw	3	; case 102
 12996  010852  B4D8               	btfsc	status,2,c
 12997  010854  D71D               	goto	l870
 12998  010856  0A01               	xorlw	1	; case 103
 12999  010858  B4D8               	btfsc	status,2,c
 13000  01085A  D71C               	goto	l871
 13001  01085C  0A0F               	xorlw	15	; case 104
 13002  01085E  B4D8               	btfsc	status,2,c
 13003  010860  D71B               	goto	l872
 13004  010862  0A01               	xorlw	1	; case 105
 13005  010864  B4D8               	btfsc	status,2,c
 13006  010866  D71A               	goto	l873
 13007  010868  0A03               	xorlw	3	; case 106
 13008  01086A  B4D8               	btfsc	status,2,c
 13009  01086C  D719               	goto	l874
 13010  01086E  0A01               	xorlw	1	; case 107
 13011  010870  B4D8               	btfsc	status,2,c
 13012  010872  D718               	goto	l875
 13013  010874  0A07               	xorlw	7	; case 108
 13014  010876  B4D8               	btfsc	status,2,c
 13015  010878  D717               	goto	l876
 13016  01087A  0A01               	xorlw	1	; case 109
 13017  01087C  B4D8               	btfsc	status,2,c
 13018  01087E  D716               	goto	l877
 13019  010880  0A03               	xorlw	3	; case 110
 13020  010882  B4D8               	btfsc	status,2,c
 13021  010884  D715               	goto	l878
 13022  010886  0A01               	xorlw	1	; case 111
 13023  010888  B4D8               	btfsc	status,2,c
 13024  01088A  D714               	goto	l879
 13025  01088C  0A1F               	xorlw	31	; case 112
 13026  01088E  B4D8               	btfsc	status,2,c
 13027  010890  D713               	goto	l880
 13028  010892  0A01               	xorlw	1	; case 113
 13029  010894  B4D8               	btfsc	status,2,c
 13030  010896  D712               	goto	l881
 13031  010898  0A03               	xorlw	3	; case 114
 13032  01089A  B4D8               	btfsc	status,2,c
 13033  01089C  D711               	goto	l882
 13034  01089E  0A01               	xorlw	1	; case 115
 13035  0108A0  B4D8               	btfsc	status,2,c
 13036  0108A2  D710               	goto	l883
 13037  0108A4  0A07               	xorlw	7	; case 116
 13038  0108A6  B4D8               	btfsc	status,2,c
 13039  0108A8  D70F               	goto	l884
 13040  0108AA  0A01               	xorlw	1	; case 117
 13041  0108AC  B4D8               	btfsc	status,2,c
 13042  0108AE  D70E               	goto	l885
 13043  0108B0  0A03               	xorlw	3	; case 118
 13044  0108B2  B4D8               	btfsc	status,2,c
 13045  0108B4  D70D               	goto	l886
 13046  0108B6  0A01               	xorlw	1	; case 119
 13047  0108B8  B4D8               	btfsc	status,2,c
 13048  0108BA  D70C               	goto	l887
 13049  0108BC  0A0F               	xorlw	15	; case 120
 13050  0108BE  B4D8               	btfsc	status,2,c
 13051  0108C0  D70B               	goto	l888
 13052  0108C2  0A01               	xorlw	1	; case 121
 13053  0108C4  B4D8               	btfsc	status,2,c
 13054  0108C6  D70A               	goto	l889
 13055  0108C8  0A03               	xorlw	3	; case 122
 13056  0108CA  B4D8               	btfsc	status,2,c
 13057  0108CC  D709               	goto	l890
 13058                           
 13059                           ;Types.c: 354: return 0;
 13060                           
 13061                           ; BSR set to: 0
 13062  0108CE  0E00               	movlw	0
 13063  0108D0  0012               	return	
 13064  0108D2                     __end_of_ToSegment:
 13065                           	opt stack 0
 13066                           tosu	equ	0xFFF
 13067                           tosh	equ	0xFFE
 13068                           tosl	equ	0xFFD
 13069                           pclath	equ	0xFFA
 13070                           tblptru	equ	0xFF8
 13071                           tblptrh	equ	0xFF7
 13072                           tblptrl	equ	0xFF6
 13073                           tablat	equ	0xFF5
 13074                           prodh	equ	0xFF4
 13075                           prodl	equ	0xFF3
 13076                           intcon	equ	0xFF2
 13077                           postinc0	equ	0xFEE
 13078                           wreg	equ	0xFE8
 13079                           indf1	equ	0xFE7
 13080                           postdec1	equ	0xFE5
 13081                           fsr1h	equ	0xFE2
 13082                           fsr1l	equ	0xFE1
 13083                           indf2	equ	0xFDF
 13084                           postinc2	equ	0xFDE
 13085                           postdec2	equ	0xFDD
 13086                           plusw2	equ	0xFDB
 13087                           fsr2h	equ	0xFDA
 13088                           fsr2l	equ	0xFD9
 13089                           status	equ	0xFD8
 13090                           
 13091 ;; *************** function _HMI_SetButton *****************
 13092 ;; Defined at:
 13093 ;;		line 186 in file "HMI.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;  pValue          1    wreg     unsigned char 
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;  pValue          1    6[BANK0 ] unsigned char 
 13098 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 13099 ;;  v               1    7[BANK0 ] unsigned char 
 13100 ;; Return value:  Size  Location     Type
 13101 ;;                  1    wreg      void 
 13102 ;; Registers used:
 13103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13104 ;; Tracked objects:
 13105 ;;		On entry : 0/0
 13106 ;;		On exit  : 0/0
 13107 ;;		Unchanged: 0/0
 13108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13110 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13111 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13112 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13113 ;;Total ram usage:        8 bytes
 13114 ;; Hardware stack levels used:    1
 13115 ;; Hardware stack levels required when called:    7
 13116 ;; This function calls:
 13117 ;;		Nothing
 13118 ;; This function is called by:
 13119 ;;		_Event_TestButton
 13120 ;; This function uses a non-reentrant model
 13121 ;;
 13122                           
 13123                           	psect	text72
 13124  0128AA                     __ptext72:
 13125                           	opt stack 0
 13126  0128AA                     _HMI_SetButton:
 13127                           	opt stack 20
 13128                           
 13129                           ;incstack = 0
 13130                           ;HMI_SetButton@pValue stored from wreg
 13131  0128AA  0100               	movlb	0	; () banked
 13132  0128AC  6FB9               	movwf	HMI_SetButton@pValue& (0+255),b
 13133                           
 13134                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 13135  0128AE  0ED0               	movlw	low HMI_SetButton@F7213
 13136  0128B0  6EF6               	movwf	tblptrl,c
 13137  0128B2                     	if	1	;There is more than 1 active tblptr byte
 13138  0128B2  0EFC               	movlw	high HMI_SetButton@F7213
 13139  0128B4  6EF7               	movwf	tblptrh,c
 13140  0128B6                     	endif
 13141  0128B6                     	if	1	;There are 3 active tblptr bytes
 13142  0128B6  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 13143  0128B8  6EF8               	movwf	tblptru,c
 13144  0128BA                     	endif
 13145  0128BA  0009               	tblrd		*+
 13146  0128BC  CFF5 F0B5          	movff	tablat,HMI_SetButton@reindex
 13147  0128C0  0009               	tblrd		*+
 13148  0128C2  CFF5 F0B6          	movff	tablat,HMI_SetButton@reindex+1
 13149  0128C6  0009               	tblrd		*+
 13150  0128C8  CFF5 F0B7          	movff	tablat,HMI_SetButton@reindex+2
 13151  0128CC  000A               	tblrd		*-
 13152  0128CE  CFF5 F0B8          	movff	tablat,HMI_SetButton@reindex+3
 13153                           
 13154                           ;HMI.c: 189: UINT8 v = 0b00010001;
 13155  0128D2  0E11               	movlw	17
 13156  0128D4  0100               	movlb	0	; () banked
 13157  0128D6  6FBA               	movwf	HMI_SetButton@v& (0+255),b
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;HMI.c: 190: pValue &= 3;
 13161  0128D8  0E03               	movlw	3
 13162  0128DA  17B9               	andwf	HMI_SetButton@pValue& (0+255),f,b
 13163                           
 13164                           ; BSR set to: 0
 13165                           ;HMI.c: 191: v = v << reindex[pValue];
 13166  0128DC  51B9               	movf	HMI_SetButton@pValue& (0+255),w,b
 13167  0128DE  0D01               	mullw	1
 13168  0128E0  0EB5               	movlw	low HMI_SetButton@reindex
 13169  0128E2  24F3               	addwf	prodl,w,c
 13170  0128E4  6ED9               	movwf	fsr2l,c
 13171  0128E6  0E00               	movlw	high HMI_SetButton@reindex
 13172  0128E8  20F4               	addwfc	prodh,w,c
 13173  0128EA  6EDA               	movwf	fsr2h,c
 13174  0128EC  50DF               	movf	indf2,w,c
 13175  0128EE  6FB3               	movwf	??_HMI_SetButton& (0+255),b
 13176  0128F0  C0BA  F0B4         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 13177  0128F4  2BB3               	incf	??_HMI_SetButton& (0+255),f,b
 13178  0128F6  D002               	goto	u8464
 13179  0128F8                     u8465:
 13180  0128F8  90D8               	bcf	status,0,c
 13181  0128FA  37B4               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 13182  0128FC                     u8464:
 13183  0128FC  2FB3               	decfsz	??_HMI_SetButton& (0+255),f,b
 13184  0128FE  D7FC               	goto	u8465
 13185  012900  0100               	movlb	0	; () banked
 13186  012902  51B4               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 13187  012904  6FBA               	movwf	HMI_SetButton@v& (0+255),b
 13188                           
 13189                           ; BSR set to: 0
 13190                           ;HMI.c: 192: v = v >> 4;
 13191  012906  39BA               	swapf	HMI_SetButton@v& (0+255),w,b
 13192  012908  0B0F               	andlw	15
 13193  01290A  6FBA               	movwf	HMI_SetButton@v& (0+255),b
 13194                           
 13195                           ; BSR set to: 0
 13196                           ;HMI.c: 193: v = v & 0x0F;
 13197  01290C  51BA               	movf	HMI_SetButton@v& (0+255),w,b
 13198  01290E  0B0F               	andlw	15
 13199  012910  6FBA               	movwf	HMI_SetButton@v& (0+255),b
 13200                           
 13201                           ; BSR set to: 0
 13202                           ;HMI.c: 194: HMIBoard.pButton = v;
 13203  012912  0101               	movlb	1	; () banked
 13204  012914  5132               	movf	(_HMIBoard+6)& (0+255),w,b
 13205  012916  0100               	movlb	0	; () banked
 13206  012918  19BA               	xorwf	HMI_SetButton@v& (0+255),w,b
 13207  01291A  0BF0               	andlw	-16
 13208  01291C  19BA               	xorwf	HMI_SetButton@v& (0+255),w,b
 13209  01291E  0101               	movlb	1	; () banked
 13210  012920  6F32               	movwf	(_HMIBoard+6)& (0+255),b
 13211                           
 13212                           ; BSR set to: 1
 13213  012922  0012               	return		;funcret
 13214  012924                     __end_of_HMI_SetButton:
 13215                           	opt stack 0
 13216                           tosu	equ	0xFFF
 13217                           tosh	equ	0xFFE
 13218                           tosl	equ	0xFFD
 13219                           pclath	equ	0xFFA
 13220                           tblptru	equ	0xFF8
 13221                           tblptrh	equ	0xFF7
 13222                           tblptrl	equ	0xFF6
 13223                           tablat	equ	0xFF5
 13224                           prodh	equ	0xFF4
 13225                           prodl	equ	0xFF3
 13226                           intcon	equ	0xFF2
 13227                           postinc0	equ	0xFEE
 13228                           wreg	equ	0xFE8
 13229                           indf1	equ	0xFE7
 13230                           postdec1	equ	0xFE5
 13231                           fsr1h	equ	0xFE2
 13232                           fsr1l	equ	0xFE1
 13233                           indf2	equ	0xFDF
 13234                           postinc2	equ	0xFDE
 13235                           postdec2	equ	0xFDD
 13236                           plusw2	equ	0xFDB
 13237                           fsr2h	equ	0xFDA
 13238                           fsr2l	equ	0xFD9
 13239                           status	equ	0xFD8
 13240                           
 13241 ;; *************** function _LED_Toggle *****************
 13242 ;; Defined at:
 13243 ;;		line 50 in file "Library/LED.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;  pLED            1    wreg     enum E6739
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;  pLED            1   24[BANK0 ] enum E6739
 13248 ;; Return value:  Size  Location     Type
 13249 ;;                  1    wreg      void 
 13250 ;; Registers used:
 13251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13252 ;; Tracked objects:
 13253 ;;		On entry : 0/0
 13254 ;;		On exit  : 0/0
 13255 ;;		Unchanged: 0/0
 13256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13260 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13261 ;;Total ram usage:        1 bytes
 13262 ;; Hardware stack levels used:    1
 13263 ;; Hardware stack levels required when called:   12
 13264 ;; This function calls:
 13265 ;;		_Port_TogglePin
 13266 ;; This function is called by:
 13267 ;;		_LCD_Reset
 13268 ;;		_Event_DIPSwitch
 13269 ;;		_Event_TestButton
 13270 ;;		_Event_ADCSequenceComplete
 13271 ;;		_Event_HMI_DIPSwitch
 13272 ;;		_Event_HMI_LeftButton
 13273 ;;		_Event_HMI_RightButton
 13274 ;;		_Event_HMI_UpButton
 13275 ;;		_Event_HMI_DownButton
 13276 ;; This function uses a non-reentrant model
 13277 ;;
 13278                           
 13279                           	psect	text73
 13280  0133BA                     __ptext73:
 13281                           	opt stack 0
 13282  0133BA                     _LED_Toggle:
 13283                           	opt stack 15
 13284                           
 13285                           ; BSR set to: 1
 13286                           ;incstack = 0
 13287                           ;LED_Toggle@pLED stored from wreg
 13288  0133BA  0100               	movlb	0	; () banked
 13289  0133BC  6FCB               	movwf	LED_Toggle@pLED& (0+255),b
 13290                           
 13291                           ;LED.c: 52: switch (pLED)
 13292  0133BE  D014               	goto	l234
 13293  0133C0                     
 13294                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 13295  0133C0  0EA5               	movlw	low _PortC
 13296  0133C2  0100               	movlb	0	; () banked
 13297  0133C4  6FC7               	movwf	Port_TogglePin@pInput& (0+255),b
 13298  0133C6  0E00               	movlw	high _PortC
 13299  0133C8  6FC8               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 13300  0133CA  0E00               	movlw	0
 13301  0133CC  6FC9               	movwf	Port_TogglePin@pPin& (0+255),b
 13302  0133CE  EC62  F09B         	call	_Port_TogglePin	;wreg free
 13303                           
 13304                           ;LED.c: 56: break;
 13305  0133D2  0012               	return	
 13306  0133D4                     
 13307                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 13308  0133D4  0EA5               	movlw	low _PortC
 13309  0133D6  0100               	movlb	0	; () banked
 13310  0133D8  6FC7               	movwf	Port_TogglePin@pInput& (0+255),b
 13311  0133DA  0E00               	movlw	high _PortC
 13312  0133DC  6FC8               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 13313  0133DE  0E01               	movlw	1
 13314  0133E0  6FC9               	movwf	Port_TogglePin@pPin& (0+255),b
 13315  0133E2  EC62  F09B         	call	_Port_TogglePin	;wreg free
 13316                           
 13317                           ;LED.c: 60: }
 13318                           
 13319                           ;LED.c: 59: break;
 13320  0133E6  0012               	return	
 13321  0133E8                     l234:
 13322  0133E8  0100               	movlb	0	; () banked
 13323  0133EA  51CB               	movf	LED_Toggle@pLED& (0+255),w,b
 13324                           
 13325                           ; Switch size 1, requested type "space"
 13326                           ; Number of cases is 2, Range of values is 0 to 1
 13327                           ; switch strategies available:
 13328                           ; Name         Instructions Cycles
 13329                           ; simple_byte            7     4 (average)
 13330                           ;	Chosen strategy is simple_byte
 13331  0133EC  0A00               	xorlw	0	; case 0
 13332  0133EE  B4D8               	btfsc	status,2,c
 13333  0133F0  D7E7               	goto	l235
 13334  0133F2  0A01               	xorlw	1	; case 1
 13335  0133F4  A4D8               	btfss	status,2,c
 13336  0133F6  0012               	return	
 13337  0133F8  D7ED               	goto	l237
 13338  0133FA                     __end_of_LED_Toggle:
 13339                           	opt stack 0
 13340                           tosu	equ	0xFFF
 13341                           tosh	equ	0xFFE
 13342                           tosl	equ	0xFFD
 13343                           pclath	equ	0xFFA
 13344                           tblptru	equ	0xFF8
 13345                           tblptrh	equ	0xFF7
 13346                           tblptrl	equ	0xFF6
 13347                           tablat	equ	0xFF5
 13348                           prodh	equ	0xFF4
 13349                           prodl	equ	0xFF3
 13350                           intcon	equ	0xFF2
 13351                           postinc0	equ	0xFEE
 13352                           wreg	equ	0xFE8
 13353                           indf1	equ	0xFE7
 13354                           postdec1	equ	0xFE5
 13355                           fsr1h	equ	0xFE2
 13356                           fsr1l	equ	0xFE1
 13357                           indf2	equ	0xFDF
 13358                           postinc2	equ	0xFDE
 13359                           postdec2	equ	0xFDD
 13360                           plusw2	equ	0xFDB
 13361                           fsr2h	equ	0xFDA
 13362                           fsr2l	equ	0xFD9
 13363                           status	equ	0xFD8
 13364                           
 13365 ;; *************** function _Port_TogglePin *****************
 13366 ;; Defined at:
 13367 ;;		line 278 in file "Library/Port.c"
 13368 ;; Parameters:    Size  Location     Type
 13369 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 13370 ;;		 -> PortC(10), 
 13371 ;;  pPin            1   22[BANK0 ] enum E6750
 13372 ;; Auto vars:     Size  Location     Type
 13373 ;;  Value           1   23[BANK0 ] unsigned char 
 13374 ;; Return value:  Size  Location     Type
 13375 ;;                  1    wreg      void 
 13376 ;; Registers used:
 13377 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13378 ;; Tracked objects:
 13379 ;;		On entry : 0/0
 13380 ;;		On exit  : 0/0
 13381 ;;		Unchanged: 0/0
 13382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13383 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13386 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13387 ;;Total ram usage:        4 bytes
 13388 ;; Hardware stack levels used:    1
 13389 ;; Hardware stack levels required when called:   11
 13390 ;; This function calls:
 13391 ;;		_Port_GetPin
 13392 ;;		_Port_SetPin
 13393 ;; This function is called by:
 13394 ;;		_LED_Toggle
 13395 ;; This function uses a non-reentrant model
 13396 ;;
 13397                           
 13398                           	psect	text74
 13399  0136C4                     __ptext74:
 13400                           	opt stack 0
 13401  0136C4                     _Port_TogglePin:
 13402                           	opt stack 15
 13403                           
 13404                           ;Port.c: 280: UINT8 Value;
 13405                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 13406                           
 13407                           ;incstack = 0
 13408  0136C4  C0C7  F0B3         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 13409  0136C8  C0C8  F0B4         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 13410  0136CC  C0C9  F0B5         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 13411  0136D0  EC59  F09A         	call	_Port_GetPin	;wreg free
 13412  0136D4  0100               	movlb	0	; () banked
 13413  0136D6  6FCA               	movwf	Port_TogglePin@Value& (0+255),b
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;Port.c: 282: Value ^= 0x01;
 13417  0136D8  0E01               	movlw	1
 13418  0136DA  1BCA               	xorwf	Port_TogglePin@Value& (0+255),f,b
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 13422  0136DC  C0C7  F0C2         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 13423  0136E0  C0C8  F0C3         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 13424  0136E4  C0C9  F0C4         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 13425  0136E8  C0CA  F0C5         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 13426  0136EC  EC61  F08F         	call	_Port_SetPin	;wreg free
 13427  0136F0  0012               	return		;funcret
 13428  0136F2                     __end_of_Port_TogglePin:
 13429                           	opt stack 0
 13430                           tosu	equ	0xFFF
 13431                           tosh	equ	0xFFE
 13432                           tosl	equ	0xFFD
 13433                           pclath	equ	0xFFA
 13434                           tblptru	equ	0xFF8
 13435                           tblptrh	equ	0xFF7
 13436                           tblptrl	equ	0xFF6
 13437                           tablat	equ	0xFF5
 13438                           prodh	equ	0xFF4
 13439                           prodl	equ	0xFF3
 13440                           intcon	equ	0xFF2
 13441                           postinc0	equ	0xFEE
 13442                           wreg	equ	0xFE8
 13443                           indf1	equ	0xFE7
 13444                           postdec1	equ	0xFE5
 13445                           fsr1h	equ	0xFE2
 13446                           fsr1l	equ	0xFE1
 13447                           indf2	equ	0xFDF
 13448                           postinc2	equ	0xFDE
 13449                           postdec2	equ	0xFDD
 13450                           plusw2	equ	0xFDB
 13451                           fsr2h	equ	0xFDA
 13452                           fsr2l	equ	0xFD9
 13453                           status	equ	0xFD8
 13454                           
 13455 ;; *************** function _Port_SetPin *****************
 13456 ;; Defined at:
 13457 ;;		line 247 in file "Library/Port.c"
 13458 ;; Parameters:    Size  Location     Type
 13459 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 13460 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 13461 ;;  pPin            1   17[BANK0 ] enum E6750
 13462 ;;  pValue          1   18[BANK0 ] unsigned char 
 13463 ;; Auto vars:     Size  Location     Type
 13464 ;;  Type            1   19[BANK0 ] enum E6795
 13465 ;; Return value:  Size  Location     Type
 13466 ;;                  1    wreg      void 
 13467 ;; Registers used:
 13468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13469 ;; Tracked objects:
 13470 ;;		On entry : 0/0
 13471 ;;		On exit  : 0/0
 13472 ;;		Unchanged: 0/0
 13473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13474 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13477 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13478 ;;Total ram usage:        5 bytes
 13479 ;; Hardware stack levels used:    1
 13480 ;; Hardware stack levels required when called:   10
 13481 ;; This function calls:
 13482 ;;		_Byte_SetBit
 13483 ;;		_Word_GetPair
 13484 ;; This function is called by:
 13485 ;;		_Reset_Low
 13486 ;;		_Reset_High
 13487 ;;		_LED_Set
 13488 ;;		_Port_TogglePin
 13489 ;;		_Motor_Step
 13490 ;;		_MXK_Init
 13491 ;;		_Motor_Init
 13492 ;; This function uses a non-reentrant model
 13493 ;;
 13494                           
 13495                           	psect	text75
 13496  011EC2                     __ptext75:
 13497                           	opt stack 0
 13498  011EC2                     _Port_SetPin:
 13499                           	opt stack 19
 13500                           
 13501                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 13502                           
 13503                           ;incstack = 0
 13504  011EC2  0E08               	movlw	8
 13505  011EC4  0100               	movlb	0	; () banked
 13506  011EC6  25C2               	addwf	Port_SetPin@pInput& (0+255),w,b
 13507  011EC8  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
 13508  011ECA  0E00               	movlw	0
 13509  011ECC  21C3               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 13510  011ECE  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13511  011ED0  C0C4  F0C1         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 13512  011ED4  EC19  F09B         	call	_Word_GetPair	;wreg free
 13513  011ED8  0100               	movlb	0	; () banked
 13514  011EDA  6FC6               	movwf	Port_SetPin@Type& (0+255),b
 13515                           
 13516                           ;Port.c: 250: switch (Type)
 13517  011EDC  D03D               	goto	l427
 13518  011EDE                     
 13519                           ; BSR set to: 0
 13520                           ;Port.c: 256: pValue &= 1;
 13521                           
 13522                           ; BSR set to: 0
 13523  011EDE  0E01               	movlw	1
 13524  011EE0  17C5               	andwf	Port_SetPin@pValue& (0+255),f,b
 13525                           
 13526                           ; BSR set to: 0
 13527                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 13528  011EE2  EE20 F002          	lfsr	2,2
 13529  011EE6  51C2               	movf	Port_SetPin@pInput& (0+255),w,b
 13530  011EE8  26D9               	addwf	fsr2l,f,c
 13531  011EEA  51C3               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 13532  011EEC  22DA               	addwfc	fsr2h,f,c
 13533  011EEE  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 13534  011EF2  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 13535  011EF6  C0C4  F0B5         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 13536  011EFA  C0C5  F0B6         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 13537  011EFE  EC47  F098         	call	_Byte_SetBit	;wreg free
 13538                           
 13539                           ;Port.c: 258: break;
 13540  011F02  0012               	return	
 13541  011F04                     
 13542                           ;Port.c: 261: pValue &= 1;
 13543  011F04  0E01               	movlw	1
 13544  011F06  0100               	movlb	0	; () banked
 13545  011F08  17C5               	andwf	Port_SetPin@pValue& (0+255),f,b
 13546                           
 13547                           ;Port.c: 262: pValue ^= 1;
 13548  011F0A  0E01               	movlw	1
 13549  011F0C  1BC5               	xorwf	Port_SetPin@pValue& (0+255),f,b
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 13553  011F0E  EE20 F002          	lfsr	2,2
 13554  011F12  51C2               	movf	Port_SetPin@pInput& (0+255),w,b
 13555  011F14  26D9               	addwf	fsr2l,f,c
 13556  011F16  51C3               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 13557  011F18  22DA               	addwfc	fsr2h,f,c
 13558  011F1A  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 13559  011F1E  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 13560  011F22  C0C4  F0B5         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 13561  011F26  C0C5  F0B6         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 13562  011F2A  EC47  F098         	call	_Byte_SetBit	;wreg free
 13563                           
 13564                           ;Port.c: 264: break;
 13565  011F2E  0012               	return	
 13566  011F30                     
 13567                           ;Port.c: 266: pValue &= 1;
 13568  011F30  0E01               	movlw	1
 13569  011F32  0100               	movlb	0	; () banked
 13570  011F34  17C5               	andwf	Port_SetPin@pValue& (0+255),f,b
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 13574  011F36  EE20 F004          	lfsr	2,4
 13575  011F3A  51C2               	movf	Port_SetPin@pInput& (0+255),w,b
 13576  011F3C  26D9               	addwf	fsr2l,f,c
 13577  011F3E  51C3               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 13578  011F40  22DA               	addwfc	fsr2h,f,c
 13579  011F42  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 13580  011F46  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 13581  011F4A  C0C4  F0B5         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 13582  011F4E  C0C5  F0B6         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 13583  011F52  EC47  F098         	call	_Byte_SetBit	;wreg free
 13584                           
 13585                           ;Port.c: 269: }
 13586                           
 13587                           ;Port.c: 268: break;
 13588  011F56  0012               	return	
 13589  011F58                     l427:
 13590  011F58  0100               	movlb	0	; () banked
 13591  011F5A  51C6               	movf	Port_SetPin@Type& (0+255),w,b
 13592                           
 13593                           ; Switch size 1, requested type "space"
 13594                           ; Number of cases is 4, Range of values is 0 to 3
 13595                           ; switch strategies available:
 13596                           ; Name         Instructions Cycles
 13597                           ; simple_byte           13     7 (average)
 13598                           ;	Chosen strategy is simple_byte
 13599  011F5C  0A00               	xorlw	0	; case 0
 13600  011F5E  B4D8               	btfsc	status,2,c
 13601  011F60  0012               	return	
 13602  011F62  0A01               	xorlw	1	; case 1
 13603  011F64  B4D8               	btfsc	status,2,c
 13604  011F66  D7BB               	goto	l430
 13605  011F68  0A03               	xorlw	3	; case 2
 13606  011F6A  B4D8               	btfsc	status,2,c
 13607  011F6C  D7CB               	goto	l432
 13608  011F6E  0A01               	xorlw	1	; case 3
 13609  011F70  A4D8               	btfss	status,2,c
 13610  011F72  0012               	return	
 13611  011F74  D7DD               	goto	l433
 13612  011F76                     __end_of_Port_SetPin:
 13613                           	opt stack 0
 13614                           tosu	equ	0xFFF
 13615                           tosh	equ	0xFFE
 13616                           tosl	equ	0xFFD
 13617                           pclath	equ	0xFFA
 13618                           tblptru	equ	0xFF8
 13619                           tblptrh	equ	0xFF7
 13620                           tblptrl	equ	0xFF6
 13621                           tablat	equ	0xFF5
 13622                           prodh	equ	0xFF4
 13623                           prodl	equ	0xFF3
 13624                           intcon	equ	0xFF2
 13625                           postinc0	equ	0xFEE
 13626                           wreg	equ	0xFE8
 13627                           indf1	equ	0xFE7
 13628                           postdec1	equ	0xFE5
 13629                           fsr1h	equ	0xFE2
 13630                           fsr1l	equ	0xFE1
 13631                           indf2	equ	0xFDF
 13632                           postinc2	equ	0xFDE
 13633                           postdec2	equ	0xFDD
 13634                           plusw2	equ	0xFDB
 13635                           fsr2h	equ	0xFDA
 13636                           fsr2l	equ	0xFD9
 13637                           status	equ	0xFD8
 13638                           
 13639 ;; *************** function _Port_GetPin *****************
 13640 ;; Defined at:
 13641 ;;		line 271 in file "Library/Port.c"
 13642 ;; Parameters:    Size  Location     Type
 13643 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 13644 ;;		 -> PortB(10), PortE(10), PortC(10), 
 13645 ;;  pPin            1    2[BANK0 ] enum E6750
 13646 ;; Auto vars:     Size  Location     Type
 13647 ;;  Output          1    5[BANK0 ] unsigned char 
 13648 ;; Return value:  Size  Location     Type
 13649 ;;                  1    wreg      unsigned char 
 13650 ;; Registers used:
 13651 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13652 ;; Tracked objects:
 13653 ;;		On entry : 0/0
 13654 ;;		On exit  : 0/0
 13655 ;;		Unchanged: 0/0
 13656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13657 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13661 ;;Total ram usage:        6 bytes
 13662 ;; Hardware stack levels used:    1
 13663 ;; Hardware stack levels required when called:    7
 13664 ;; This function calls:
 13665 ;;		Nothing
 13666 ;; This function is called by:
 13667 ;;		_Port_TogglePin
 13668 ;;		_HMI_LeftSwitch
 13669 ;;		_HMI_RightSwitch
 13670 ;;		_HMI_UpSwitch
 13671 ;;		_HMI_DownSwitch
 13672 ;;		_MXK_TestButton
 13673 ;; This function uses a non-reentrant model
 13674 ;;
 13675                           
 13676                           	psect	text76
 13677  0134B2                     __ptext76:
 13678                           	opt stack 0
 13679  0134B2                     _Port_GetPin:
 13680                           	opt stack 22
 13681                           
 13682                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 13683                           
 13684                           ;incstack = 0
 13685  0134B2  0100               	movlb	0	; () banked
 13686  0134B4  EE20 F006          	lfsr	2,6
 13687  0134B8  51B3               	movf	Port_GetPin@pInput& (0+255),w,b
 13688  0134BA  26D9               	addwf	fsr2l,f,c
 13689  0134BC  51B4               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 13690  0134BE  22DA               	addwfc	fsr2h,f,c
 13691  0134C0  CFDE F0B6          	movff	postinc2,??_Port_GetPin
 13692  0134C4  CFDD F0B7          	movff	postdec2,??_Port_GetPin+1
 13693  0134C8  C0B6  FFD9         	movff	??_Port_GetPin,fsr2l
 13694  0134CC  C0B7  FFDA         	movff	??_Port_GetPin+1,fsr2h
 13695  0134D0  50DF               	movf	indf2,w,c
 13696  0134D2  6FB8               	movwf	Port_GetPin@Output& (0+255),b
 13697                           
 13698                           ; BSR set to: 0
 13699                           ;Port.c: 274: Output >>= (UINT8)pPin;
 13700  0134D4  29B5               	incf	Port_GetPin@pPin& (0+255),w,b
 13701  0134D6  6FB6               	movwf	??_Port_GetPin& (0+255),b
 13702  0134D8  D002               	goto	u7880
 13703  0134DA                     u7885:
 13704  0134DA  90D8               	bcf	status,0,c
 13705  0134DC  33B8               	rrcf	Port_GetPin@Output& (0+255),f,b
 13706  0134DE                     u7880:
 13707  0134DE  2FB6               	decfsz	??_Port_GetPin& (0+255),f,b
 13708  0134E0  D7FC               	goto	u7885
 13709                           
 13710                           ;Port.c: 275: Output &= 1;
 13711  0134E2  0E01               	movlw	1
 13712  0134E4  0100               	movlb	0	; () banked
 13713  0134E6  17B8               	andwf	Port_GetPin@Output& (0+255),f,b
 13714                           
 13715                           ; BSR set to: 0
 13716                           ;Port.c: 276: return Output;
 13717  0134E8  51B8               	movf	Port_GetPin@Output& (0+255),w,b
 13718  0134EA  0012               	return	
 13719  0134EC                     __end_of_Port_GetPin:
 13720                           	opt stack 0
 13721                           tosu	equ	0xFFF
 13722                           tosh	equ	0xFFE
 13723                           tosl	equ	0xFFD
 13724                           pclath	equ	0xFFA
 13725                           tblptru	equ	0xFF8
 13726                           tblptrh	equ	0xFF7
 13727                           tblptrl	equ	0xFF6
 13728                           tablat	equ	0xFF5
 13729                           prodh	equ	0xFF4
 13730                           prodl	equ	0xFF3
 13731                           intcon	equ	0xFF2
 13732                           postinc0	equ	0xFEE
 13733                           wreg	equ	0xFE8
 13734                           indf1	equ	0xFE7
 13735                           postdec1	equ	0xFE5
 13736                           fsr1h	equ	0xFE2
 13737                           fsr1l	equ	0xFE1
 13738                           indf2	equ	0xFDF
 13739                           postinc2	equ	0xFDE
 13740                           postdec2	equ	0xFDD
 13741                           plusw2	equ	0xFDB
 13742                           fsr2h	equ	0xFDA
 13743                           fsr2l	equ	0xFD9
 13744                           status	equ	0xFD8
 13745                           
 13746 ;; *************** function _HMI_SetBar *****************
 13747 ;; Defined at:
 13748 ;;		line 205 in file "HMI.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;  pValue          1    wreg     unsigned char 
 13751 ;; Auto vars:     Size  Location     Type
 13752 ;;  pValue          1    0[BANK0 ] unsigned char 
 13753 ;; Return value:  Size  Location     Type
 13754 ;;                  1    wreg      void 
 13755 ;; Registers used:
 13756 ;;		wreg
 13757 ;; Tracked objects:
 13758 ;;		On entry : 0/0
 13759 ;;		On exit  : 0/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13766 ;;Total ram usage:        1 bytes
 13767 ;; Hardware stack levels used:    1
 13768 ;; Hardware stack levels required when called:    7
 13769 ;; This function calls:
 13770 ;;		Nothing
 13771 ;; This function is called by:
 13772 ;;		_Event_DIPSwitch
 13773 ;;		_Event_HMI_DIPSwitch
 13774 ;;		_Event_HMI_LeftButton
 13775 ;;		_Event_HMI_RightButton
 13776 ;; This function uses a non-reentrant model
 13777 ;;
 13778                           
 13779                           	psect	text77
 13780  013B10                     __ptext77:
 13781                           	opt stack 0
 13782  013B10                     _HMI_SetBar:
 13783                           	opt stack 20
 13784                           
 13785                           ; BSR set to: 0
 13786                           ;incstack = 0
 13787                           ;HMI_SetBar@pValue stored from wreg
 13788  013B10  0100               	movlb	0	; () banked
 13789  013B12  6FB3               	movwf	HMI_SetBar@pValue& (0+255),b
 13790                           
 13791                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 13792  013B14  C0B3  F133         	movff	HMI_SetBar@pValue,_HMIBoard+7
 13793  013B18  0012               	return		;funcret
 13794  013B1A                     __end_of_HMI_SetBar:
 13795                           	opt stack 0
 13796                           tosu	equ	0xFFF
 13797                           tosh	equ	0xFFE
 13798                           tosl	equ	0xFFD
 13799                           pclath	equ	0xFFA
 13800                           tblptru	equ	0xFF8
 13801                           tblptrh	equ	0xFF7
 13802                           tblptrl	equ	0xFF6
 13803                           tablat	equ	0xFF5
 13804                           prodh	equ	0xFF4
 13805                           prodl	equ	0xFF3
 13806                           intcon	equ	0xFF2
 13807                           postinc0	equ	0xFEE
 13808                           wreg	equ	0xFE8
 13809                           indf1	equ	0xFE7
 13810                           postdec1	equ	0xFE5
 13811                           fsr1h	equ	0xFE2
 13812                           fsr1l	equ	0xFE1
 13813                           indf2	equ	0xFDF
 13814                           postinc2	equ	0xFDE
 13815                           postdec2	equ	0xFDD
 13816                           plusw2	equ	0xFDB
 13817                           fsr2h	equ	0xFDA
 13818                           fsr2l	equ	0xFD9
 13819                           status	equ	0xFD8
 13820                           
 13821 ;; *************** function _HMI_GetBar *****************
 13822 ;; Defined at:
 13823 ;;		line 209 in file "HMI.c"
 13824 ;; Parameters:    Size  Location     Type
 13825 ;;		None
 13826 ;; Auto vars:     Size  Location     Type
 13827 ;;		None
 13828 ;; Return value:  Size  Location     Type
 13829 ;;                  1    wreg      unsigned char 
 13830 ;; Registers used:
 13831 ;;		wreg, status,2
 13832 ;; Tracked objects:
 13833 ;;		On entry : 0/0
 13834 ;;		On exit  : 0/0
 13835 ;;		Unchanged: 0/0
 13836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13841 ;;Total ram usage:        0 bytes
 13842 ;; Hardware stack levels used:    1
 13843 ;; Hardware stack levels required when called:    7
 13844 ;; This function calls:
 13845 ;;		Nothing
 13846 ;; This function is called by:
 13847 ;;		_Event_DIPSwitch
 13848 ;;		_Event_HMI_DIPSwitch
 13849 ;; This function uses a non-reentrant model
 13850 ;;
 13851                           
 13852                           	psect	text78
 13853  013B30                     __ptext78:
 13854                           	opt stack 0
 13855  013B30                     _HMI_GetBar:
 13856                           	opt stack 20
 13857                           
 13858                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 13859                           
 13860                           ;incstack = 0
 13861  013B30  0101               	movlb	1	; () banked
 13862  013B32  5133               	movf	(_HMIBoard+7)& (0+255),w,b
 13863  013B34  0012               	return	
 13864  013B36                     __end_of_HMI_GetBar:
 13865                           	opt stack 0
 13866                           tosu	equ	0xFFF
 13867                           tosh	equ	0xFFE
 13868                           tosl	equ	0xFFD
 13869                           pclath	equ	0xFFA
 13870                           tblptru	equ	0xFF8
 13871                           tblptrh	equ	0xFF7
 13872                           tblptrl	equ	0xFF6
 13873                           tablat	equ	0xFF5
 13874                           prodh	equ	0xFF4
 13875                           prodl	equ	0xFF3
 13876                           intcon	equ	0xFF2
 13877                           postinc0	equ	0xFEE
 13878                           wreg	equ	0xFE8
 13879                           indf1	equ	0xFE7
 13880                           postdec1	equ	0xFE5
 13881                           fsr1h	equ	0xFE2
 13882                           fsr1l	equ	0xFE1
 13883                           indf2	equ	0xFDF
 13884                           postinc2	equ	0xFDE
 13885                           postdec2	equ	0xFDD
 13886                           plusw2	equ	0xFDB
 13887                           fsr2h	equ	0xFDA
 13888                           fsr2l	equ	0xFD9
 13889                           status	equ	0xFD8
 13890                           
 13891 ;; *************** function _HMI_Init *****************
 13892 ;; Defined at:
 13893 ;;		line 104 in file "HMI.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;		None
 13896 ;; Auto vars:     Size  Location     Type
 13897 ;;  in              2   59[BANK0 ] unsigned short 
 13898 ;; Return value:  Size  Location     Type
 13899 ;;                  1    wreg      void 
 13900 ;; Registers used:
 13901 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13902 ;; Tracked objects:
 13903 ;;		On entry : 0/0
 13904 ;;		On exit  : 0/0
 13905 ;;		Unchanged: 0/0
 13906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13908 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13910 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13911 ;;Total ram usage:        2 bytes
 13912 ;; Hardware stack levels used:    1
 13913 ;; Hardware stack levels required when called:   16
 13914 ;; This function calls:
 13915 ;;		_Button_Init
 13916 ;;		_SPI_Init
 13917 ;;		_SPI_MinSpeed
 13918 ;; This function is called by:
 13919 ;;		_main
 13920 ;; This function uses a non-reentrant model
 13921 ;;
 13922                           
 13923                           	psect	text79
 13924  01118C                     __ptext79:
 13925                           	opt stack 0
 13926  01118C                     _HMI_Init:
 13927                           	opt stack 14
 13928                           
 13929                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 13930                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 13931                           
 13932                           ; BSR set to: 1
 13933                           ;incstack = 0
 13934  01118C  0E5C               	movlw	low (_HMIBoard+48)
 13935  01118E  0101               	movlb	1	; () banked
 13936  011190  6FD7               	movwf	Button_Init@pInput& (0+255),b
 13937  011192  0E01               	movlw	high (_HMIBoard+48)
 13938  011194  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 13939  011196  0E00               	movlw	0
 13940  011198  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13941  01119A  0E02               	movlw	2
 13942  01119C  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 13943  01119E  0E36               	movlw	low _HMI_InitButtons
 13944  0111A0  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 13945  0111A2  0E3B               	movlw	high _HMI_InitButtons
 13946  0111A4  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 13947  0111A6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 13948  0111A8  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 13949  0111AA  0EF6               	movlw	low _HMI_DIPSwitch
 13950  0111AC  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 13951  0111AE  0E39               	movlw	high _HMI_DIPSwitch
 13952  0111B0  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 13953  0111B2  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 13954  0111B4  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 13955  0111B6  0E04               	movlw	low _Event_NULL
 13956  0111B8  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 13957  0111BA  0E14               	movlw	high _Event_NULL
 13958  0111BC  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13959  0111BE  0E00               	movlw	low (_Event_NULL shr (0+16))
 13960  0111C0  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13961  0111C2  ECBB  F08F         	call	_Button_Init	;wreg free
 13962                           
 13963                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 13964                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 13965  0111C6  0E3E               	movlw	low (_HMIBoard+18)
 13966  0111C8  0101               	movlb	1	; () banked
 13967  0111CA  6FD7               	movwf	Button_Init@pInput& (0+255),b
 13968  0111CC  0E01               	movlw	high (_HMIBoard+18)
 13969  0111CE  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 13970  0111D0  0E00               	movlw	0
 13971  0111D2  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13972  0111D4  0E02               	movlw	2
 13973  0111D6  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 13974  0111D8  0E36               	movlw	low _HMI_InitButtons
 13975  0111DA  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 13976  0111DC  0E3B               	movlw	high _HMI_InitButtons
 13977  0111DE  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 13978  0111E0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 13979  0111E2  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 13980  0111E4  0E46               	movlw	low _HMI_LeftSwitch
 13981  0111E6  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 13982  0111E8  0E3A               	movlw	high _HMI_LeftSwitch
 13983  0111EA  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 13984  0111EC  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 13985  0111EE  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 13986  0111F0  0E04               	movlw	low _Event_NULL
 13987  0111F2  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 13988  0111F4  0E14               	movlw	high _Event_NULL
 13989  0111F6  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13990  0111F8  0E00               	movlw	low (_Event_NULL shr (0+16))
 13991  0111FA  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13992  0111FC  ECBB  F08F         	call	_Button_Init	;wreg free
 13993                           
 13994                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 13995                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 13996  011200  0E34               	movlw	low (_HMIBoard+8)
 13997  011202  0101               	movlb	1	; () banked
 13998  011204  6FD7               	movwf	Button_Init@pInput& (0+255),b
 13999  011206  0E01               	movlw	high (_HMIBoard+8)
 14000  011208  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 14001  01120A  0E00               	movlw	0
 14002  01120C  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14003  01120E  0E02               	movlw	2
 14004  011210  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 14005  011212  0E36               	movlw	low _HMI_InitButtons
 14006  011214  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 14007  011216  0E3B               	movlw	high _HMI_InitButtons
 14008  011218  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14009  01121A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14010  01121C  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14011  01121E  0E32               	movlw	low _HMI_RightSwitch
 14012  011220  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 14013  011222  0E3A               	movlw	high _HMI_RightSwitch
 14014  011224  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14015  011226  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 14016  011228  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14017  01122A  0E04               	movlw	low _Event_NULL
 14018  01122C  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 14019  01122E  0E14               	movlw	high _Event_NULL
 14020  011230  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14021  011232  0E00               	movlw	low (_Event_NULL shr (0+16))
 14022  011234  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14023  011236  ECBB  F08F         	call	_Button_Init	;wreg free
 14024                           
 14025                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 14026                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 14027  01123A  0E48               	movlw	low (_HMIBoard+28)
 14028  01123C  0101               	movlb	1	; () banked
 14029  01123E  6FD7               	movwf	Button_Init@pInput& (0+255),b
 14030  011240  0E01               	movlw	high (_HMIBoard+28)
 14031  011242  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 14032  011244  0E00               	movlw	0
 14033  011246  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14034  011248  0E02               	movlw	2
 14035  01124A  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 14036  01124C  0E36               	movlw	low _HMI_InitButtons
 14037  01124E  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 14038  011250  0E3B               	movlw	high _HMI_InitButtons
 14039  011252  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14040  011254  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14041  011256  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14042  011258  0E1E               	movlw	low _HMI_UpSwitch
 14043  01125A  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 14044  01125C  0E3A               	movlw	high _HMI_UpSwitch
 14045  01125E  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14046  011260  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 14047  011262  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14048  011264  0E04               	movlw	low _Event_NULL
 14049  011266  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 14050  011268  0E14               	movlw	high _Event_NULL
 14051  01126A  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14052  01126C  0E00               	movlw	low (_Event_NULL shr (0+16))
 14053  01126E  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14054  011270  ECBB  F08F         	call	_Button_Init	;wreg free
 14055                           
 14056                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 14057                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 14058  011274  0E52               	movlw	low (_HMIBoard+38)
 14059  011276  0101               	movlb	1	; () banked
 14060  011278  6FD7               	movwf	Button_Init@pInput& (0+255),b
 14061  01127A  0E01               	movlw	high (_HMIBoard+38)
 14062  01127C  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 14063  01127E  0E00               	movlw	0
 14064  011280  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14065  011282  0E02               	movlw	2
 14066  011284  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 14067  011286  0E36               	movlw	low _HMI_InitButtons
 14068  011288  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 14069  01128A  0E3B               	movlw	high _HMI_InitButtons
 14070  01128C  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14071  01128E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14072  011290  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14073  011292  0E0A               	movlw	low _HMI_DownSwitch
 14074  011294  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 14075  011296  0E3A               	movlw	high _HMI_DownSwitch
 14076  011298  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14077  01129A  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 14078  01129C  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14079  01129E  0E04               	movlw	low _Event_NULL
 14080  0112A0  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 14081  0112A2  0E14               	movlw	high _Event_NULL
 14082  0112A4  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14083  0112A6  0E00               	movlw	low (_Event_NULL shr (0+16))
 14084  0112A8  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14085  0112AA  ECBB  F08F         	call	_Button_Init	;wreg free
 14086                           
 14087                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 14088  0112AE  0EA0               	movlw	160
 14089  0112B0  0100               	movlb	0	; () banked
 14090  0112B2  6FE0               	movwf	SPI_Init@pClock& (0+255),b
 14091  0112B4  0E86               	movlw	134
 14092  0112B6  6FE1               	movwf	(SPI_Init@pClock+1)& (0+255),b
 14093  0112B8  0E01               	movlw	1
 14094  0112BA  6FE2               	movwf	(SPI_Init@pClock+2)& (0+255),b
 14095  0112BC  0E00               	movlw	0
 14096  0112BE  6FE3               	movwf	(SPI_Init@pClock+3)& (0+255),b
 14097  0112C0  0E00               	movlw	0
 14098  0112C2  6FE4               	movwf	SPI_Init@pChannel& (0+255),b
 14099  0112C4  0E02               	movlw	2
 14100  0112C6  6FE5               	movwf	SPI_Init@pMode& (0+255),b
 14101  0112C8  EC00  F080         	call	_SPI_Init	;wreg free
 14102                           
 14103                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 14104  0112CC  0E66               	movlw	low _SPI1
 14105  0112CE  0100               	movlb	0	; () banked
 14106  0112D0  6FC2               	movwf	SPI_MinSpeed@pInput& (0+255),b
 14107  0112D2  0E01               	movlw	high _SPI1
 14108  0112D4  6FC3               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 14109  0112D6  EC50  F096         	call	_SPI_MinSpeed	;wreg free
 14110                           
 14111                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 14112  0112DA  0E00               	movlw	0
 14113  0112DC  0100               	movlb	0	; () banked
 14114  0112DE  6FEF               	movwf	(HMI_Init@in+1)& (0+255),b
 14115  0112E0  0E00               	movlw	0
 14116  0112E2  6FEE               	movwf	HMI_Init@in& (0+255),b
 14117  0112E4                     l13172:
 14118                           
 14119                           ; BSR set to: 0
 14120  0112E4  51EF               	movf	(HMI_Init@in+1)& (0+255),w,b
 14121  0112E6  E10F               	bnz	l1153
 14122  0112E8  0E08               	movlw	8
 14123  0112EA  5DEE               	subwf	HMI_Init@in& (0+255),w,b
 14124  0112EC  B0D8               	btfsc	status,0,c
 14125  0112EE  0012               	return	
 14126                           
 14127                           ; BSR set to: 0
 14128                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 14129                           
 14130                           ; BSR set to: 0
 14131                           
 14132                           ; BSR set to: 0
 14133  0112F0  0E2C               	movlw	low _HMIBoard
 14134  0112F2  25EE               	addwf	HMI_Init@in& (0+255),w,b
 14135  0112F4  6ED9               	movwf	fsr2l,c
 14136  0112F6  0E01               	movlw	high _HMIBoard
 14137  0112F8  21EF               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 14138  0112FA  6EDA               	movwf	fsr2h,c
 14139  0112FC  0E00               	movlw	0
 14140  0112FE  6EDF               	movwf	indf2,c
 14141                           
 14142                           ; BSR set to: 0
 14143  011300  4BEE               	infsnz	HMI_Init@in& (0+255),f,b
 14144  011302  2BEF               	incf	(HMI_Init@in+1)& (0+255),f,b
 14145  011304  D7EF               	goto	l13172
 14146  011306                     l1153:
 14147                           
 14148                           ; BSR set to: 0
 14149  011306  0012               	return		;funcret
 14150  011308                     __end_of_HMI_Init:
 14151                           	opt stack 0
 14152                           tosu	equ	0xFFF
 14153                           tosh	equ	0xFFE
 14154                           tosl	equ	0xFFD
 14155                           pclath	equ	0xFFA
 14156                           tblptru	equ	0xFF8
 14157                           tblptrh	equ	0xFF7
 14158                           tblptrl	equ	0xFF6
 14159                           tablat	equ	0xFF5
 14160                           prodh	equ	0xFF4
 14161                           prodl	equ	0xFF3
 14162                           intcon	equ	0xFF2
 14163                           postinc0	equ	0xFEE
 14164                           wreg	equ	0xFE8
 14165                           indf1	equ	0xFE7
 14166                           postdec1	equ	0xFE5
 14167                           fsr1h	equ	0xFE2
 14168                           fsr1l	equ	0xFE1
 14169                           indf2	equ	0xFDF
 14170                           postinc2	equ	0xFDE
 14171                           postdec2	equ	0xFDD
 14172                           plusw2	equ	0xFDB
 14173                           fsr2h	equ	0xFDA
 14174                           fsr2l	equ	0xFD9
 14175                           status	equ	0xFD8
 14176                           
 14177 ;; *************** function _SPI_MinSpeed *****************
 14178 ;; Defined at:
 14179 ;;		line 190 in file "Library/SPI.c"
 14180 ;; Parameters:    Size  Location     Type
 14181 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 14182 ;;		 -> SPI1(11), 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;		None
 14185 ;; Return value:  Size  Location     Type
 14186 ;;                  1    wreg      void 
 14187 ;; Registers used:
 14188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14189 ;; Tracked objects:
 14190 ;;		On entry : 0/0
 14191 ;;		On exit  : 0/0
 14192 ;;		Unchanged: 0/0
 14193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14194 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;Total ram usage:        2 bytes
 14199 ;; Hardware stack levels used:    1
 14200 ;; Hardware stack levels required when called:    9
 14201 ;; This function calls:
 14202 ;;		_Byte_SetBit
 14203 ;;		_Byte_SetQuad
 14204 ;; This function is called by:
 14205 ;;		_HMI_Init
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           	psect	text80
 14210  012CA0                     __ptext80:
 14211                           	opt stack 0
 14212  012CA0                     _SPI_MinSpeed:
 14213                           	opt stack 20
 14214                           
 14215                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;incstack = 0
 14219  012CA0  0100               	movlb	0	; () banked
 14220  012CA2  EE20 F006          	lfsr	2,6
 14221  012CA6  51C2               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14222  012CA8  26D9               	addwf	fsr2l,f,c
 14223  012CAA  51C3               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14224  012CAC  22DA               	addwfc	fsr2h,f,c
 14225  012CAE  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14226  012CB2  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14227  012CB6  0E05               	movlw	5
 14228  012CB8  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14229  012CBA  0E00               	movlw	0
 14230  012CBC  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14231  012CBE  EC47  F098         	call	_Byte_SetBit	;wreg free
 14232                           
 14233                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 14234  012CC2  0100               	movlb	0	; () banked
 14235  012CC4  EE20 F006          	lfsr	2,6
 14236  012CC8  51C2               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14237  012CCA  26D9               	addwf	fsr2l,f,c
 14238  012CCC  51C3               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14239  012CCE  22DA               	addwfc	fsr2h,f,c
 14240  012CD0  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 14241  012CD4  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 14242  012CD8  0E00               	movlw	0
 14243  012CDA  6FC0               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14244  012CDC  0E02               	movlw	2
 14245  012CDE  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 14246  012CE0  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 14247                           
 14248                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14249  012CE4  0100               	movlb	0	; () banked
 14250  012CE6  EE20 F006          	lfsr	2,6
 14251  012CEA  51C2               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14252  012CEC  26D9               	addwf	fsr2l,f,c
 14253  012CEE  51C3               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14254  012CF0  22DA               	addwfc	fsr2h,f,c
 14255  012CF2  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14256  012CF6  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14257  012CFA  0E05               	movlw	5
 14258  012CFC  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14259  012CFE  0E01               	movlw	1
 14260  012D00  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14261  012D02  EC47  F098         	call	_Byte_SetBit	;wreg free
 14262  012D06  0012               	return		;funcret
 14263  012D08                     __end_of_SPI_MinSpeed:
 14264                           	opt stack 0
 14265                           tosu	equ	0xFFF
 14266                           tosh	equ	0xFFE
 14267                           tosl	equ	0xFFD
 14268                           pclath	equ	0xFFA
 14269                           tblptru	equ	0xFF8
 14270                           tblptrh	equ	0xFF7
 14271                           tblptrl	equ	0xFF6
 14272                           tablat	equ	0xFF5
 14273                           prodh	equ	0xFF4
 14274                           prodl	equ	0xFF3
 14275                           intcon	equ	0xFF2
 14276                           postinc0	equ	0xFEE
 14277                           wreg	equ	0xFE8
 14278                           indf1	equ	0xFE7
 14279                           postdec1	equ	0xFE5
 14280                           fsr1h	equ	0xFE2
 14281                           fsr1l	equ	0xFE1
 14282                           indf2	equ	0xFDF
 14283                           postinc2	equ	0xFDE
 14284                           postdec2	equ	0xFDD
 14285                           plusw2	equ	0xFDB
 14286                           fsr2h	equ	0xFDA
 14287                           fsr2l	equ	0xFD9
 14288                           status	equ	0xFD8
 14289                           
 14290 ;; *************** function _SPI_Init *****************
 14291 ;; Defined at:
 14292 ;;		line 12 in file "Library/SPI.c"
 14293 ;; Parameters:    Size  Location     Type
 14294 ;;  pClock          4   45[BANK0 ] unsigned long 
 14295 ;;  pChannel        1   49[BANK0 ] enum E6744
 14296 ;;  pMode           1   50[BANK0 ] enum E6748
 14297 ;; Auto vars:     Size  Location     Type
 14298 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 14299 ;;		 -> SPI1(11), SPI2(11), 
 14300 ;; Return value:  Size  Location     Type
 14301 ;;                  1    wreg      void 
 14302 ;; Registers used:
 14303 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14309 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14310 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14312 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14313 ;;Total ram usage:        8 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; Hardware stack levels required when called:   12
 14316 ;; This function calls:
 14317 ;;		_Byte_SetBit
 14318 ;;		_Byte_SetQuad
 14319 ;;		_Port_SetPinType
 14320 ;;		_SPI_DCS
 14321 ;;		_SPI_DisableISR
 14322 ;;		_Timer2_Init
 14323 ;; This function is called by:
 14324 ;;		_Configure_GPIOs
 14325 ;;		_HMI_Init
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           	psect	text81
 14330  010000                     __ptext81:
 14331                           	opt stack 0
 14332  010000                     _SPI_Init:
 14333                           	opt stack 16
 14334                           
 14335                           ;SPI.c: 14: SPIPtr pInput;
 14336                           ;SPI.c: 16: switch (pChannel)
 14337                           
 14338                           ;incstack = 0
 14339  010000  D00A               	goto	l597
 14340  010002                     
 14341                           ;SPI.c: 19: pInput = &SPI1;
 14342  010002  0E66               	movlw	low _SPI1
 14343  010004  0100               	movlb	0	; () banked
 14344  010006  6FE6               	movwf	SPI_Init@pInput& (0+255),b
 14345  010008  0E01               	movlw	high _SPI1
 14346  01000A  D003               	goto	L7
 14347  01000C                     
 14348                           ; BSR set to: 0
 14349                           ;SPI.c: 22: pInput = &SPI2;
 14350                           
 14351                           ; BSR set to: 0
 14352  01000C  0E71               	movlw	low _SPI2
 14353  01000E  6FE6               	movwf	SPI_Init@pInput& (0+255),b
 14354  010010  0E01               	movlw	high _SPI2
 14355  010012                     L7:
 14356  010012  6FE7               	movwf	(SPI_Init@pInput+1)& (0+255),b
 14357                           
 14358                           ; BSR set to: 0
 14359                           ;SPI.c: 24: };
 14360                           
 14361                           ;SPI.c: 23: break;
 14362  010014  D008               	goto	l599
 14363  010016                     l597:
 14364                           
 14365                           ; BSR set to: 0
 14366  010016  0100               	movlb	0	; () banked
 14367  010018  51E4               	movf	SPI_Init@pChannel& (0+255),w,b
 14368                           
 14369                           ; Switch size 1, requested type "space"
 14370                           ; Number of cases is 2, Range of values is 0 to 1
 14371                           ; switch strategies available:
 14372                           ; Name         Instructions Cycles
 14373                           ; simple_byte            7     4 (average)
 14374                           ;	Chosen strategy is simple_byte
 14375  01001A  0A00               	xorlw	0	; case 0
 14376  01001C  B4D8               	btfsc	status,2,c
 14377  01001E  D7F1               	goto	l598
 14378  010020  0A01               	xorlw	1	; case 1
 14379  010022  B4D8               	btfsc	status,2,c
 14380  010024  D7F3               	goto	l600
 14381  010026                     l599:
 14382                           
 14383                           ; BSR set to: 0
 14384                           ;SPI.c: 26: pInput->mChannel = pChannel;
 14385                           
 14386                           ; BSR set to: 0
 14387  010026  EE20 F002          	lfsr	2,2
 14388  01002A  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14389  01002C  26D9               	addwf	fsr2l,f,c
 14390  01002E  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14391  010030  22DA               	addwfc	fsr2h,f,c
 14392  010032  C0E4  FFDF         	movff	SPI_Init@pChannel,indf2
 14393                           
 14394                           ;SPI.c: 35: switch (pChannel)
 14395  010036  D093               	goto	l601
 14396  010038                     
 14397                           ; BSR set to: 0
 14398                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 14399                           
 14400                           ; BSR set to: 0
 14401  010038  0EA5               	movlw	low _PortC
 14402  01003A  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14403  01003C  0E00               	movlw	high _PortC
 14404  01003E  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14405  010040  0E02               	movlw	2
 14406  010042  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14407  010044  0E03               	movlw	3
 14408  010046  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14409  010048  EC34  F087         	call	_Port_SetPinType	;wreg free
 14410                           
 14411                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 14412  01004C  0EA5               	movlw	low _PortC
 14413  01004E  0100               	movlb	0	; () banked
 14414  010050  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14415  010052  0E00               	movlw	high _PortC
 14416  010054  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14417  010056  0E03               	movlw	3
 14418  010058  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14419  01005A  0E03               	movlw	3
 14420  01005C  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14421  01005E  EC34  F087         	call	_Port_SetPinType	;wreg free
 14422                           
 14423                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 14424  010062  0EA5               	movlw	low _PortC
 14425  010064  0100               	movlb	0	; () banked
 14426  010066  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14427  010068  0E00               	movlw	high _PortC
 14428  01006A  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14429  01006C  0E05               	movlw	5
 14430  01006E  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14431  010070  0E03               	movlw	3
 14432  010072  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14433  010074  EC34  F087         	call	_Port_SetPinType	;wreg free
 14434                           
 14435                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 14436  010078  0EA5               	movlw	low _PortC
 14437  01007A  0100               	movlb	0	; () banked
 14438  01007C  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14439  01007E  0E00               	movlw	high _PortC
 14440  010080  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14441  010082  0E04               	movlw	4
 14442  010084  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14443  010086  0E00               	movlw	0
 14444  010088  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14445  01008A  EC34  F087         	call	_Port_SetPinType	;wreg free
 14446                           
 14447                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 14448  01008E  0100               	movlb	0	; () banked
 14449  010090  EE20 F003          	lfsr	2,3
 14450  010094  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14451  010096  26D9               	addwf	fsr2l,f,c
 14452  010098  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14453  01009A  22DA               	addwfc	fsr2h,f,c
 14454  01009C  0EC7               	movlw	199
 14455  01009E  6EDE               	movwf	postinc2,c
 14456  0100A0  0E0F               	movlw	15
 14457  0100A2  6EDD               	movwf	postdec2,c
 14458                           
 14459                           ; BSR set to: 0
 14460                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 14461  0100A4  EE20 F006          	lfsr	2,6
 14462  0100A8  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14463  0100AA  26D9               	addwf	fsr2l,f,c
 14464  0100AC  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14465  0100AE  22DA               	addwfc	fsr2h,f,c
 14466  0100B0  0EC6               	movlw	198
 14467  0100B2  6EDE               	movwf	postinc2,c
 14468  0100B4  0E0F               	movlw	15
 14469  0100B6  6EDD               	movwf	postdec2,c
 14470                           
 14471                           ; BSR set to: 0
 14472                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 14473  0100B8  EE20 F009          	lfsr	2,9
 14474  0100BC  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14475  0100BE  26D9               	addwf	fsr2l,f,c
 14476  0100C0  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14477  0100C2  22DA               	addwfc	fsr2h,f,c
 14478  0100C4  0EC9               	movlw	201
 14479  0100C6  D047               	goto	L8
 14480  0100C8                     
 14481                           ; BSR set to: 0
 14482                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 14483                           
 14484                           ; BSR set to: 0
 14485  0100C8  0E9B               	movlw	low _PortD
 14486  0100CA  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14487  0100CC  0E00               	movlw	high _PortD
 14488  0100CE  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14489  0100D0  0E07               	movlw	7
 14490  0100D2  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14491  0100D4  0E03               	movlw	3
 14492  0100D6  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14493  0100D8  EC34  F087         	call	_Port_SetPinType	;wreg free
 14494                           
 14495                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 14496  0100DC  0E9B               	movlw	low _PortD
 14497  0100DE  0100               	movlb	0	; () banked
 14498  0100E0  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14499  0100E2  0E00               	movlw	high _PortD
 14500  0100E4  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14501  0100E6  0E06               	movlw	6
 14502  0100E8  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14503  0100EA  0E03               	movlw	3
 14504  0100EC  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14505  0100EE  EC34  F087         	call	_Port_SetPinType	;wreg free
 14506                           
 14507                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 14508  0100F2  0E9B               	movlw	low _PortD
 14509  0100F4  0100               	movlb	0	; () banked
 14510  0100F6  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14511  0100F8  0E00               	movlw	high _PortD
 14512  0100FA  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14513  0100FC  0E04               	movlw	4
 14514  0100FE  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14515  010100  0E03               	movlw	3
 14516  010102  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14517  010104  EC34  F087         	call	_Port_SetPinType	;wreg free
 14518                           
 14519                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 14520  010108  0E9B               	movlw	low _PortD
 14521  01010A  0100               	movlb	0	; () banked
 14522  01010C  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14523  01010E  0E00               	movlw	high _PortD
 14524  010110  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14525  010112  0E05               	movlw	5
 14526  010114  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14527  010116  0E00               	movlw	0
 14528  010118  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14529  01011A  EC34  F087         	call	_Port_SetPinType	;wreg free
 14530                           
 14531                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 14532  01011E  0100               	movlb	0	; () banked
 14533  010120  EE20 F003          	lfsr	2,3
 14534  010124  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14535  010126  26D9               	addwf	fsr2l,f,c
 14536  010128  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14537  01012A  22DA               	addwfc	fsr2h,f,c
 14538  01012C  0E6D               	movlw	109
 14539  01012E  6EDE               	movwf	postinc2,c
 14540  010130  0E0F               	movlw	15
 14541  010132  6EDD               	movwf	postdec2,c
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 14545  010134  EE20 F006          	lfsr	2,6
 14546  010138  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14547  01013A  26D9               	addwf	fsr2l,f,c
 14548  01013C  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14549  01013E  22DA               	addwfc	fsr2h,f,c
 14550  010140  0E6C               	movlw	108
 14551  010142  6EDE               	movwf	postinc2,c
 14552  010144  0E0F               	movlw	15
 14553  010146  6EDD               	movwf	postdec2,c
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 14557  010148  EE20 F009          	lfsr	2,9
 14558  01014C  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14559  01014E  26D9               	addwf	fsr2l,f,c
 14560  010150  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14561  010152  22DA               	addwfc	fsr2h,f,c
 14562  010154  0E6F               	movlw	111
 14563  010156                     L8:
 14564  010156  6EDE               	movwf	postinc2,c
 14565  010158  0E0F               	movlw	15
 14566  01015A  6EDD               	movwf	postdec2,c
 14567                           
 14568                           ;SPI.c: 68: break;
 14569  01015C  D008               	goto	l603
 14570  01015E                     l601:
 14571                           
 14572                           ; BSR set to: 0
 14573                           
 14574                           ; BSR set to: 0
 14575  01015E  51E4               	movf	SPI_Init@pChannel& (0+255),w,b
 14576                           
 14577                           ; Switch size 1, requested type "space"
 14578                           ; Number of cases is 2, Range of values is 0 to 1
 14579                           ; switch strategies available:
 14580                           ; Name         Instructions Cycles
 14581                           ; simple_byte            7     4 (average)
 14582                           ;	Chosen strategy is simple_byte
 14583  010160  0A00               	xorlw	0	; case 0
 14584  010162  B4D8               	btfsc	status,2,c
 14585  010164  D769               	goto	l602
 14586  010166  0A01               	xorlw	1	; case 1
 14587  010168  A4D8               	btfss	status,2,c
 14588  01016A  0012               	return	
 14589  01016C  D7AD               	goto	l604
 14590  01016E                     l603:
 14591                           
 14592                           ; BSR set to: 0
 14593                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 14594                           
 14595                           ; BSR set to: 0
 14596  01016E  EE20 F006          	lfsr	2,6
 14597  010172  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14598  010174  26D9               	addwf	fsr2l,f,c
 14599  010176  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14600  010178  22DA               	addwfc	fsr2h,f,c
 14601  01017A  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14602  01017E  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14603  010182  0E05               	movlw	5
 14604  010184  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14605  010186  0E00               	movlw	0
 14606  010188  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14607  01018A  EC47  F098         	call	_Byte_SetBit	;wreg free
 14608                           
 14609                           ;SPI.c: 77: switch(pMode)
 14610  01018E  D08C               	goto	l607
 14611  010190                     
 14612                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 14613  010190  0100               	movlb	0	; () banked
 14614  010192  EE20 F006          	lfsr	2,6
 14615  010196  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14616  010198  26D9               	addwf	fsr2l,f,c
 14617  01019A  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14618  01019C  22DA               	addwfc	fsr2h,f,c
 14619  01019E  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14620  0101A2  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14621  0101A6  0E04               	movlw	4
 14622  0101A8  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14623  0101AA  0E00               	movlw	0
 14624  0101AC  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14625  0101AE  EC47  F098         	call	_Byte_SetBit	;wreg free
 14626                           
 14627                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 14628  0101B2  0100               	movlb	0	; () banked
 14629  0101B4  EE20 F003          	lfsr	2,3
 14630  0101B8  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14631  0101BA  26D9               	addwf	fsr2l,f,c
 14632  0101BC  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14633  0101BE  22DA               	addwfc	fsr2h,f,c
 14634  0101C0  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14635  0101C4  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14636  0101C8  0E06               	movlw	6
 14637  0101CA  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14638  0101CC  0E00               	movlw	0
 14639  0101CE  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14640  0101D0  EC47  F098         	call	_Byte_SetBit	;wreg free
 14641                           
 14642                           ;SPI.c: 82: break;
 14643  0101D4  D078               	goto	l609
 14644  0101D6                     
 14645                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 14646  0101D6  0100               	movlb	0	; () banked
 14647  0101D8  EE20 F006          	lfsr	2,6
 14648  0101DC  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14649  0101DE  26D9               	addwf	fsr2l,f,c
 14650  0101E0  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14651  0101E2  22DA               	addwfc	fsr2h,f,c
 14652  0101E4  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14653  0101E8  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14654  0101EC  0E04               	movlw	4
 14655  0101EE  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14656  0101F0  0E00               	movlw	0
 14657  0101F2  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14658  0101F4  EC47  F098         	call	_Byte_SetBit	;wreg free
 14659                           
 14660                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 14661  0101F8  0100               	movlb	0	; () banked
 14662  0101FA  EE20 F003          	lfsr	2,3
 14663  0101FE  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14664  010200  26D9               	addwf	fsr2l,f,c
 14665  010202  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14666  010204  22DA               	addwfc	fsr2h,f,c
 14667  010206  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14668  01020A  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14669  01020E  0E06               	movlw	6
 14670  010210  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14671  010212  0E01               	movlw	1
 14672  010214  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14673  010216  EC47  F098         	call	_Byte_SetBit	;wreg free
 14674                           
 14675                           ;SPI.c: 86: break;
 14676  01021A  D055               	goto	l609
 14677  01021C                     
 14678                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 14679  01021C  0100               	movlb	0	; () banked
 14680  01021E  EE20 F006          	lfsr	2,6
 14681  010222  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14682  010224  26D9               	addwf	fsr2l,f,c
 14683  010226  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14684  010228  22DA               	addwfc	fsr2h,f,c
 14685  01022A  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14686  01022E  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14687  010232  0E04               	movlw	4
 14688  010234  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14689  010236  0E01               	movlw	1
 14690  010238  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14691  01023A  EC47  F098         	call	_Byte_SetBit	;wreg free
 14692                           
 14693                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 14694  01023E  0100               	movlb	0	; () banked
 14695  010240  EE20 F003          	lfsr	2,3
 14696  010244  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14697  010246  26D9               	addwf	fsr2l,f,c
 14698  010248  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14699  01024A  22DA               	addwfc	fsr2h,f,c
 14700  01024C  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14701  010250  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14702  010254  0E06               	movlw	6
 14703  010256  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14704  010258  0E00               	movlw	0
 14705  01025A  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14706  01025C  EC47  F098         	call	_Byte_SetBit	;wreg free
 14707                           
 14708                           ;SPI.c: 90: break;
 14709  010260  D032               	goto	l609
 14710  010262                     
 14711                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 14712  010262  0100               	movlb	0	; () banked
 14713  010264  EE20 F006          	lfsr	2,6
 14714  010268  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14715  01026A  26D9               	addwf	fsr2l,f,c
 14716  01026C  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14717  01026E  22DA               	addwfc	fsr2h,f,c
 14718  010270  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14719  010274  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14720  010278  0E04               	movlw	4
 14721  01027A  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14722  01027C  0E01               	movlw	1
 14723  01027E  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14724  010280  EC47  F098         	call	_Byte_SetBit	;wreg free
 14725                           
 14726                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 14727  010284  0100               	movlb	0	; () banked
 14728  010286  EE20 F003          	lfsr	2,3
 14729  01028A  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14730  01028C  26D9               	addwf	fsr2l,f,c
 14731  01028E  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14732  010290  22DA               	addwfc	fsr2h,f,c
 14733  010292  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14734  010296  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14735  01029A  0E06               	movlw	6
 14736  01029C  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14737  01029E  0E01               	movlw	1
 14738  0102A0  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14739  0102A2  EC47  F098         	call	_Byte_SetBit	;wreg free
 14740                           
 14741                           ;SPI.c: 94: break;
 14742  0102A6  D00F               	goto	l609
 14743  0102A8                     l607:
 14744  0102A8  0100               	movlb	0	; () banked
 14745  0102AA  51E5               	movf	SPI_Init@pMode& (0+255),w,b
 14746                           
 14747                           ; Switch size 1, requested type "space"
 14748                           ; Number of cases is 4, Range of values is 0 to 3
 14749                           ; switch strategies available:
 14750                           ; Name         Instructions Cycles
 14751                           ; simple_byte           13     7 (average)
 14752                           ;	Chosen strategy is simple_byte
 14753  0102AC  0A00               	xorlw	0	; case 0
 14754  0102AE  B4D8               	btfsc	status,2,c
 14755  0102B0  D76F               	goto	l608
 14756  0102B2  0A01               	xorlw	1	; case 1
 14757  0102B4  B4D8               	btfsc	status,2,c
 14758  0102B6  D78F               	goto	l610
 14759  0102B8  0A03               	xorlw	3	; case 2
 14760  0102BA  B4D8               	btfsc	status,2,c
 14761  0102BC  D7AF               	goto	l611
 14762  0102BE  0A01               	xorlw	1	; case 3
 14763  0102C0  A4D8               	btfss	status,2,c
 14764  0102C2  0012               	return	
 14765  0102C4  D7CE               	goto	l612
 14766  0102C6                     l609:
 14767                           
 14768                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 14769                           
 14770                           ; BSR set to: 0
 14771  0102C6  0100               	movlb	0	; () banked
 14772  0102C8  EE20 F006          	lfsr	2,6
 14773  0102CC  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14774  0102CE  26D9               	addwf	fsr2l,f,c
 14775  0102D0  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14776  0102D2  22DA               	addwfc	fsr2h,f,c
 14777  0102D4  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14778  0102D8  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14779  0102DC  0E07               	movlw	7
 14780  0102DE  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14781  0102E0  0E00               	movlw	0
 14782  0102E2  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14783  0102E4  EC47  F098         	call	_Byte_SetBit	;wreg free
 14784                           
 14785                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 14786  0102E8  0100               	movlb	0	; () banked
 14787  0102EA  EE20 F006          	lfsr	2,6
 14788  0102EE  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14789  0102F0  26D9               	addwf	fsr2l,f,c
 14790  0102F2  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14791  0102F4  22DA               	addwfc	fsr2h,f,c
 14792  0102F6  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14793  0102FA  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14794  0102FE  0E06               	movlw	6
 14795  010300  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14796  010302  0E00               	movlw	0
 14797  010304  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14798  010306  EC47  F098         	call	_Byte_SetBit	;wreg free
 14799                           
 14800                           ;SPI.c: 106: Timer2_Init(pClock);
 14801  01030A  C0E0  F0C0         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 14802  01030E  C0E1  F0C1         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 14803  010312  C0E2  F0C2         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 14804  010316  C0E3  F0C3         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 14805  01031A  EC84  F08B         	call	_Timer2_Init	;wreg free
 14806                           
 14807                           ;SPI.c: 112: SPI_DisableISR(pInput);
 14808  01031E  C0E6  F0B3         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 14809  010322  C0E7  F0B4         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 14810  010326  ECA5  F09B         	call	_SPI_DisableISR	;wreg free
 14811                           
 14812                           ;SPI.c: 116: switch (pChannel)
 14813  01032A  D004               	goto	l614
 14814  01032C                     l615:
 14815                           
 14816                           ; BSR set to: 0
 14817  01032C  869F               	bsf	3999,3,c	;volatile
 14818  01032E  D00B               	goto	l616
 14819  010330                     l617:
 14820                           
 14821                           ; BSR set to: 0
 14822  010330  8EA5               	bsf	4005,7,c	;volatile
 14823  010332  D009               	goto	l616
 14824  010334                     l614:
 14825                           
 14826                           ; BSR set to: 0
 14827  010334  0100               	movlb	0	; () banked
 14828  010336  51E4               	movf	SPI_Init@pChannel& (0+255),w,b
 14829                           
 14830                           ; Switch size 1, requested type "space"
 14831                           ; Number of cases is 2, Range of values is 0 to 1
 14832                           ; switch strategies available:
 14833                           ; Name         Instructions Cycles
 14834                           ; simple_byte            7     4 (average)
 14835                           ;	Chosen strategy is simple_byte
 14836  010338  0A00               	xorlw	0	; case 0
 14837  01033A  B4D8               	btfsc	status,2,c
 14838  01033C  D7F7               	goto	l615
 14839  01033E  0A01               	xorlw	1	; case 1
 14840  010340  A4D8               	btfss	status,2,c
 14841  010342  0012               	return	
 14842  010344  D7F5               	goto	l617
 14843  010346                     l616:
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;SPI.c: 124: SPI_DCS(pInput);
 14847                           
 14848                           ; BSR set to: 0
 14849  010346  C0E6  F0B3         	movff	SPI_Init@pInput,SPI_DCS@pInput
 14850  01034A  C0E7  F0B4         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 14851  01034E  EC79  F09B         	call	_SPI_DCS	;wreg free
 14852                           
 14853                           ;SPI.c: 126: pInput->mBusy = 0;
 14854  010352  C0E6  FFD9         	movff	SPI_Init@pInput,fsr2l
 14855  010356  C0E7  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 14856  01035A  0E00               	movlw	0
 14857  01035C  6EDF               	movwf	indf2,c
 14858                           
 14859                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 14860  01035E  0100               	movlb	0	; () banked
 14861  010360  EE20 F006          	lfsr	2,6
 14862  010364  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14863  010366  26D9               	addwf	fsr2l,f,c
 14864  010368  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14865  01036A  22DA               	addwfc	fsr2h,f,c
 14866  01036C  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 14867  010370  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 14868  010374  0E00               	movlw	0
 14869  010376  6FC0               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14870  010378  0E03               	movlw	3
 14871  01037A  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 14872  01037C  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 14873                           
 14874                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14875  010380  0100               	movlb	0	; () banked
 14876  010382  EE20 F006          	lfsr	2,6
 14877  010386  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14878  010388  26D9               	addwf	fsr2l,f,c
 14879  01038A  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14880  01038C  22DA               	addwfc	fsr2h,f,c
 14881  01038E  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14882  010392  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14883  010396  0E05               	movlw	5
 14884  010398  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14885  01039A  0E01               	movlw	1
 14886  01039C  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14887  01039E  EC47  F098         	call	_Byte_SetBit	;wreg free
 14888  0103A2  0012               	return		;funcret
 14889  0103A4                     __end_of_SPI_Init:
 14890                           	opt stack 0
 14891                           tosu	equ	0xFFF
 14892                           tosh	equ	0xFFE
 14893                           tosl	equ	0xFFD
 14894                           pclath	equ	0xFFA
 14895                           tblptru	equ	0xFF8
 14896                           tblptrh	equ	0xFF7
 14897                           tblptrl	equ	0xFF6
 14898                           tablat	equ	0xFF5
 14899                           prodh	equ	0xFF4
 14900                           prodl	equ	0xFF3
 14901                           intcon	equ	0xFF2
 14902                           postinc0	equ	0xFEE
 14903                           wreg	equ	0xFE8
 14904                           indf1	equ	0xFE7
 14905                           postdec1	equ	0xFE5
 14906                           fsr1h	equ	0xFE2
 14907                           fsr1l	equ	0xFE1
 14908                           indf2	equ	0xFDF
 14909                           postinc2	equ	0xFDE
 14910                           postdec2	equ	0xFDD
 14911                           plusw2	equ	0xFDB
 14912                           fsr2h	equ	0xFDA
 14913                           fsr2l	equ	0xFD9
 14914                           status	equ	0xFD8
 14915                           
 14916 ;; *************** function _Timer2_Init *****************
 14917 ;; Defined at:
 14918 ;;		line 10 in file "Library/Timer2.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 14923 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 14924 ;;  RDIV            4   18[BANK0 ] unsigned long 
 14925 ;; Return value:  Size  Location     Type
 14926 ;;                  1    wreg      void 
 14927 ;; Registers used:
 14928 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14929 ;; Tracked objects:
 14930 ;;		On entry : 0/0
 14931 ;;		On exit  : 0/0
 14932 ;;		Unchanged: 0/0
 14933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14934 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14935 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14937 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14938 ;;Total ram usage:       17 bytes
 14939 ;; Hardware stack levels used:    1
 14940 ;; Hardware stack levels required when called:    8
 14941 ;; This function calls:
 14942 ;;		_Timer2_Clear
 14943 ;;		___lldiv
 14944 ;; This function is called by:
 14945 ;;		_SPI_Init
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           	psect	text82
 14950  011708                     __ptext82:
 14951                           	opt stack 0
 14952  011708                     _Timer2_Init:
 14953                           	opt stack 19
 14954                           
 14955                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 14956                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 14957                           ;Timer2.c: 14: static UINT8 PRE = 0;
 14958                           ;Timer2.c: 15: static UINT32 DIV = 0;
 14959                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 14960                           
 14961                           ;incstack = 0
 14962  011708  0E00               	movlw	0
 14963  01170A  0100               	movlb	0	; () banked
 14964  01170C  6FC9               	movwf	Timer2_Init@pCPUClock& (0+255),b
 14965  01170E  0E6C               	movlw	108
 14966  011710  6FCA               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 14967  011712  0EDC               	movlw	220
 14968  011714  6FCB               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 14969  011716  0E02               	movlw	2
 14970  011718  6FCC               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 14971                           
 14972                           ; BSR set to: 0
 14973                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 14974                           ;Timer2.c: 20: pFrequency *= 2;
 14975  01171A  90D8               	bcf	status,0,c
 14976  01171C  37C0               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 14977  01171E  37C1               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 14978  011720  37C2               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 14979  011722  37C3               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 14980                           
 14981                           ; BSR set to: 0
 14982                           ;Timer2.c: 23: pCPUClock /= 4;
 14983  011724  0E02               	movlw	2
 14984  011726  6FC4               	movwf	??_Timer2_Init& (0+255),b
 14985  011728                     u8365:
 14986  011728  90D8               	bcf	status,0,c
 14987  01172A  33CC               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 14988  01172C  33CB               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 14989  01172E  33CA               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 14990  011730  33C9               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 14991  011732  2FC4               	decfsz	??_Timer2_Init& (0+255),f,b
 14992  011734  D7F9               	goto	u8365
 14993                           
 14994                           ; BSR set to: 0
 14995                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 14996  011736  C0C9  F0B3         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 14997  01173A  C0CA  F0B4         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 14998  01173E  C0CB  F0B5         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 14999  011742  C0CC  F0B6         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 15000  011746  C0C0  F0B7         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 15001  01174A  C0C1  F0B8         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 15002  01174E  C0C2  F0B9         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 15003  011752  C0C3  F0BA         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 15004  011756  EC96  F093         	call	___lldiv	;wreg free
 15005  01175A  C0B3  F0CD         	movff	?___lldiv,Timer2_Init@DIVIDE
 15006  01175E  C0B4  F0CE         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 15007  011762  C0B5  F0CF         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 15008  011766  C0B6  F0D0         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 15009                           
 15010                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 15011  01176A  D00E               	goto	l1828
 15012  01176C                     l12044:
 15013                           
 15014                           ;Timer2.c: 28: {
 15015                           ;Timer2.c: 29: RDIV = 0;
 15016  01176C  0E00               	movlw	0
 15017  01176E  0100               	movlb	0	; () banked
 15018  011770  6FC5               	movwf	Timer2_Init@RDIV& (0+255),b
 15019  011772  0E00               	movlw	0
 15020  011774  6FC6               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 15021  011776  0E00               	movlw	0
 15022  011778  6FC7               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 15023  01177A  0E00               	movlw	0
 15024  01177C  6FC8               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 15025                           
 15026                           ; BSR set to: 0
 15027                           ;Timer2.c: 30: INDEX ++;
 15028  01177E  2B8D               	incf	Timer2_Init@INDEX& (0+255),f,b
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;Timer2.c: 31: if (INDEX >= 3)
 15032  011780  0E02               	movlw	2
 15033  011782  658D               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 15034  011784  D001               	goto	l1828
 15035  011786  D023               	goto	u8380
 15036  011788                     l1828:
 15037                           
 15038                           ; BSR set to: 0
 15039                           
 15040                           ; BSR set to: 0
 15041  011788  C0CD  F0B3         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 15042  01178C  C0CE  F0B4         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 15043  011790  C0CF  F0B5         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 15044  011794  C0D0  F0B6         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 15045  011798  0100               	movlb	0	; () banked
 15046  01179A  518D               	movf	Timer2_Init@INDEX& (0+255),w,b
 15047  01179C  0D01               	mullw	1
 15048  01179E  0ED4               	movlw	low Timer2_Init@PRESCALE
 15049  0117A0  24F3               	addwf	prodl,w,c
 15050  0117A2  6EF6               	movwf	tblptrl,c
 15051  0117A4  0EFC               	movlw	high Timer2_Init@PRESCALE
 15052  0117A6  20F4               	addwfc	prodh,w,c
 15053  0117A8  6EF7               	movwf	tblptrh,c
 15054  0117AA                     	if	1	;There are 3 active tblptr bytes
 15055  0117AA  6AF8               	clrf	tblptru,c
 15056  0117AC  0E00               	movlw	low (__mediumconst shr (0+16))
 15057  0117AE  22F8               	addwfc	tblptru,f,c
 15058  0117B0                     	endif
 15059  0117B0  0008               	tblrd		*
 15060  0117B2  50F5               	movf	tablat,w,c
 15061  0117B4  6FB7               	movwf	___lldiv@divisor& (0+255),b
 15062  0117B6  6BB8               	clrf	(___lldiv@divisor+1)& (0+255),b
 15063  0117B8  6BB9               	clrf	(___lldiv@divisor+2)& (0+255),b
 15064  0117BA  6BBA               	clrf	(___lldiv@divisor+3)& (0+255),b
 15065  0117BC  EC96  F093         	call	___lldiv	;wreg free
 15066  0117C0  0100               	movlb	0	; () banked
 15067  0117C2  51B6               	movf	(?___lldiv+3)& (0+255),w,b
 15068  0117C4  11B5               	iorwf	(?___lldiv+2)& (0+255),w,b
 15069  0117C6  E1D2               	bnz	l12044
 15070  0117C8  05B4               	decf	(?___lldiv+1)& (0+255),w,b
 15071  0117CA  B0D8               	btfsc	status,0,c
 15072  0117CC  D7CF               	goto	l1827
 15073  0117CE                     u8380:
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;Timer2.c: 33: }
 15077                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 15078                           
 15079                           ; BSR set to: 0
 15080  0117CE  50CA               	movf	4042,w,c	;volatile
 15081  0117D0  198D               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 15082  0117D2  0BFC               	andlw	-4
 15083  0117D4  198D               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 15084  0117D6  6ECA               	movwf	4042,c	;volatile
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 15088  0117D8  84CA               	bsf	4042,2,c	;volatile
 15089                           
 15090                           ; BSR set to: 0
 15091                           ;Timer2.c: 44: Timer2_Clear();
 15092  0117DA  EC91  F09D         	call	_Timer2_Clear	;wreg free
 15093                           
 15094                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 15095  0117DE  0100               	movlb	0	; () banked
 15096  0117E0  518D               	movf	Timer2_Init@INDEX& (0+255),w,b
 15097  0117E2  0D01               	mullw	1
 15098  0117E4  0ED4               	movlw	low Timer2_Init@PRESCALE
 15099  0117E6  24F3               	addwf	prodl,w,c
 15100  0117E8  6EF6               	movwf	tblptrl,c
 15101  0117EA  0EFC               	movlw	high Timer2_Init@PRESCALE
 15102  0117EC  20F4               	addwfc	prodh,w,c
 15103  0117EE  6EF7               	movwf	tblptrh,c
 15104  0117F0                     	if	1	;There are 3 active tblptr bytes
 15105  0117F0  6AF8               	clrf	tblptru,c
 15106  0117F2  0E00               	movlw	low (__mediumconst shr (0+16))
 15107  0117F4  22F8               	addwfc	tblptru,f,c
 15108  0117F6                     	endif
 15109  0117F6  0008               	tblrd		*
 15110  0117F8  CFF5 F08C          	movff	tablat,Timer2_Init@PRE
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 15114  0117FC  0EFF               	movlw	255
 15115  0117FE  25CD               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 15116  011800  0101               	movlb	1	; () banked
 15117  011802  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 15118  011804  0EFF               	movlw	255
 15119  011806  0100               	movlb	0	; () banked
 15120  011808  21CE               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 15121  01180A  0101               	movlb	1	; () banked
 15122  01180C  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 15123  01180E  0EFF               	movlw	255
 15124  011810  0100               	movlb	0	; () banked
 15125  011812  21CF               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 15126  011814  0101               	movlb	1	; () banked
 15127  011816  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 15128  011818  0EFF               	movlw	255
 15129  01181A  0100               	movlb	0	; () banked
 15130  01181C  21D0               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 15131  01181E  0101               	movlb	1	; () banked
 15132  011820  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 15133                           
 15134                           ; BSR set to: 1
 15135                           ;Timer2.c: 48: INDEX = DIV/PRE;
 15136  011822  C100  F0B3         	movff	Timer2_Init@DIV,___lldiv@dividend
 15137  011826  C101  F0B4         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 15138  01182A  C102  F0B5         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 15139  01182E  C103  F0B6         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 15140  011832  0100               	movlb	0	; () banked
 15141  011834  518C               	movf	Timer2_Init@PRE& (0+255),w,b
 15142  011836  6FB7               	movwf	___lldiv@divisor& (0+255),b
 15143  011838  6BB8               	clrf	(___lldiv@divisor+1)& (0+255),b
 15144  01183A  6BB9               	clrf	(___lldiv@divisor+2)& (0+255),b
 15145  01183C  6BBA               	clrf	(___lldiv@divisor+3)& (0+255),b
 15146  01183E  EC96  F093         	call	___lldiv	;wreg free
 15147  011842  0100               	movlb	0	; () banked
 15148  011844  51B3               	movf	?___lldiv& (0+255),w,b
 15149  011846  6F8D               	movwf	Timer2_Init@INDEX& (0+255),b
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;Timer2.c: 49: PR2 = INDEX;
 15153  011848  C08D  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 15154                           
 15155                           ; BSR set to: 0
 15156  01184C  0012               	return		;funcret
 15157  01184E                     __end_of_Timer2_Init:
 15158                           	opt stack 0
 15159                           tosu	equ	0xFFF
 15160                           tosh	equ	0xFFE
 15161                           tosl	equ	0xFFD
 15162                           pclath	equ	0xFFA
 15163                           tblptru	equ	0xFF8
 15164                           tblptrh	equ	0xFF7
 15165                           tblptrl	equ	0xFF6
 15166                           tablat	equ	0xFF5
 15167                           prodh	equ	0xFF4
 15168                           prodl	equ	0xFF3
 15169                           intcon	equ	0xFF2
 15170                           postinc0	equ	0xFEE
 15171                           wreg	equ	0xFE8
 15172                           indf1	equ	0xFE7
 15173                           postdec1	equ	0xFE5
 15174                           fsr1h	equ	0xFE2
 15175                           fsr1l	equ	0xFE1
 15176                           indf2	equ	0xFDF
 15177                           postinc2	equ	0xFDE
 15178                           postdec2	equ	0xFDD
 15179                           plusw2	equ	0xFDB
 15180                           fsr2h	equ	0xFDA
 15181                           fsr2l	equ	0xFD9
 15182                           status	equ	0xFD8
 15183                           
 15184 ;; *************** function ___lldiv *****************
 15185 ;; Defined at:
 15186 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 15187 ;; Parameters:    Size  Location     Type
 15188 ;;  dividend        4    0[BANK0 ] unsigned long 
 15189 ;;  divisor         4    4[BANK0 ] unsigned long 
 15190 ;; Auto vars:     Size  Location     Type
 15191 ;;  quotient        4    8[BANK0 ] unsigned long 
 15192 ;;  counter         1   12[BANK0 ] unsigned char 
 15193 ;; Return value:  Size  Location     Type
 15194 ;;                  4    0[BANK0 ] unsigned long 
 15195 ;; Registers used:
 15196 ;;		wreg, status,2, status,0
 15197 ;; Tracked objects:
 15198 ;;		On entry : 0/0
 15199 ;;		On exit  : 0/0
 15200 ;;		Unchanged: 0/0
 15201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15202 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15203 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15205 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15206 ;;Total ram usage:       13 bytes
 15207 ;; Hardware stack levels used:    1
 15208 ;; Hardware stack levels required when called:    7
 15209 ;; This function calls:
 15210 ;;		Nothing
 15211 ;; This function is called by:
 15212 ;;		_Timer2_Init
 15213 ;;		_rand_between
 15214 ;;		_I2C_Init
 15215 ;;		_Timer0_Init
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           	psect	text83
 15220  01272C                     __ptext83:
 15221                           	opt stack 0
 15222  01272C                     ___lldiv:
 15223                           	opt stack 19
 15224                           
 15225                           ; BSR set to: 0
 15226                           ;incstack = 0
 15227  01272C  0E00               	movlw	0
 15228  01272E  0100               	movlb	0	; () banked
 15229  012730  6FBB               	movwf	___lldiv@quotient& (0+255),b
 15230  012732  0E00               	movlw	0
 15231  012734  6FBC               	movwf	(___lldiv@quotient+1)& (0+255),b
 15232  012736  0E00               	movlw	0
 15233  012738  6FBD               	movwf	(___lldiv@quotient+2)& (0+255),b
 15234  01273A  0E00               	movlw	0
 15235  01273C  6FBE               	movwf	(___lldiv@quotient+3)& (0+255),b
 15236                           
 15237                           ; BSR set to: 0
 15238  01273E  51B7               	movf	___lldiv@divisor& (0+255),w,b
 15239  012740  11B8               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 15240  012742  11B9               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 15241  012744  11BA               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 15242  012746  B4D8               	btfsc	status,2,c
 15243  012748  D02A               	goto	l2685
 15244                           
 15245                           ; BSR set to: 0
 15246  01274A  0E01               	movlw	1
 15247  01274C  6FBF               	movwf	___lldiv@counter& (0+255),b
 15248  01274E  D006               	goto	l2680
 15249  012750                     
 15250                           ; BSR set to: 0
 15251                           
 15252                           ; BSR set to: 0
 15253  012750  90D8               	bcf	status,0,c
 15254  012752  37B7               	rlcf	___lldiv@divisor& (0+255),f,b
 15255  012754  37B8               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 15256  012756  37B9               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 15257  012758  37BA               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 15258  01275A  2BBF               	incf	___lldiv@counter& (0+255),f,b
 15259  01275C                     l2680:
 15260                           
 15261                           ; BSR set to: 0
 15262                           
 15263                           ; BSR set to: 0
 15264  01275C  AFBA               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 15265  01275E  D7F8               	goto	l2681
 15266  012760                     u8230:
 15267                           
 15268                           ; BSR set to: 0
 15269                           
 15270                           ; BSR set to: 0
 15271                           
 15272                           ; BSR set to: 0
 15273  012760  90D8               	bcf	status,0,c
 15274  012762  37BB               	rlcf	___lldiv@quotient& (0+255),f,b
 15275  012764  37BC               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 15276  012766  37BD               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 15277  012768  37BE               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 15278                           
 15279                           ; BSR set to: 0
 15280  01276A  51B7               	movf	___lldiv@divisor& (0+255),w,b
 15281  01276C  5DB3               	subwf	___lldiv@dividend& (0+255),w,b
 15282  01276E  51B8               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15283  012770  59B4               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 15284  012772  51B9               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15285  012774  59B5               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 15286  012776  51BA               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15287  012778  59B6               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 15288  01277A  A0D8               	btfss	status,0,c
 15289  01277C  D009               	goto	l2684
 15290                           
 15291                           ; BSR set to: 0
 15292  01277E  51B7               	movf	___lldiv@divisor& (0+255),w,b
 15293  012780  5FB3               	subwf	___lldiv@dividend& (0+255),f,b
 15294  012782  51B8               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15295  012784  5BB4               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 15296  012786  51B9               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15297  012788  5BB5               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 15298  01278A  51BA               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15299  01278C  5BB6               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 15300                           
 15301                           ; BSR set to: 0
 15302  01278E  81BB               	bsf	___lldiv@quotient& (0+255),0,b
 15303  012790                     l2684:
 15304                           
 15305                           ; BSR set to: 0
 15306                           
 15307                           ; BSR set to: 0
 15308  012790  90D8               	bcf	status,0,c
 15309  012792  33BA               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 15310  012794  33B9               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 15311  012796  33B8               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 15312  012798  33B7               	rrcf	___lldiv@divisor& (0+255),f,b
 15313                           
 15314                           ; BSR set to: 0
 15315  01279A  2FBF               	decfsz	___lldiv@counter& (0+255),f,b
 15316  01279C  D7E1               	goto	u8230
 15317  01279E                     l2685:
 15318                           
 15319                           ; BSR set to: 0
 15320                           
 15321                           ; BSR set to: 0
 15322  01279E  C0BB  F0B3         	movff	___lldiv@quotient,?___lldiv
 15323  0127A2  C0BC  F0B4         	movff	___lldiv@quotient+1,?___lldiv+1
 15324  0127A6  C0BD  F0B5         	movff	___lldiv@quotient+2,?___lldiv+2
 15325  0127AA  C0BE  F0B6         	movff	___lldiv@quotient+3,?___lldiv+3
 15326                           
 15327                           ; BSR set to: 0
 15328  0127AE  0012               	return		;funcret
 15329  0127B0                     __end_of___lldiv:
 15330                           	opt stack 0
 15331                           tosu	equ	0xFFF
 15332                           tosh	equ	0xFFE
 15333                           tosl	equ	0xFFD
 15334                           pclath	equ	0xFFA
 15335                           tblptru	equ	0xFF8
 15336                           tblptrh	equ	0xFF7
 15337                           tblptrl	equ	0xFF6
 15338                           tablat	equ	0xFF5
 15339                           prodh	equ	0xFF4
 15340                           prodl	equ	0xFF3
 15341                           intcon	equ	0xFF2
 15342                           postinc0	equ	0xFEE
 15343                           wreg	equ	0xFE8
 15344                           indf1	equ	0xFE7
 15345                           postdec1	equ	0xFE5
 15346                           fsr1h	equ	0xFE2
 15347                           fsr1l	equ	0xFE1
 15348                           indf2	equ	0xFDF
 15349                           postinc2	equ	0xFDE
 15350                           postdec2	equ	0xFDD
 15351                           plusw2	equ	0xFDB
 15352                           fsr2h	equ	0xFDA
 15353                           fsr2l	equ	0xFD9
 15354                           status	equ	0xFD8
 15355                           
 15356 ;; *************** function _Timer2_Clear *****************
 15357 ;; Defined at:
 15358 ;;		line 3 in file "Library/Timer2.c"
 15359 ;; Parameters:    Size  Location     Type
 15360 ;;		None
 15361 ;; Auto vars:     Size  Location     Type
 15362 ;;		None
 15363 ;; Return value:  Size  Location     Type
 15364 ;;                  1    wreg      void 
 15365 ;; Registers used:
 15366 ;;		None
 15367 ;; Tracked objects:
 15368 ;;		On entry : 0/0
 15369 ;;		On exit  : 0/0
 15370 ;;		Unchanged: 0/0
 15371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15376 ;;Total ram usage:        0 bytes
 15377 ;; Hardware stack levels used:    1
 15378 ;; Hardware stack levels required when called:    7
 15379 ;; This function calls:
 15380 ;;		Nothing
 15381 ;; This function is called by:
 15382 ;;		_Timer2_Init
 15383 ;; This function uses a non-reentrant model
 15384 ;;
 15385                           
 15386                           	psect	text84
 15387  013B22                     __ptext84:
 15388                           	opt stack 0
 15389  013B22                     _Timer2_Clear:
 15390                           	opt stack 19
 15391                           
 15392                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 15393                           
 15394                           ; BSR set to: 0
 15395                           ;incstack = 0
 15396  013B22  929E               	bcf	3998,1,c	;volatile
 15397                           
 15398                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 15399  013B24  929D               	bcf	3997,1,c	;volatile
 15400                           
 15401                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 15402  013B26  929F               	bcf	3999,1,c	;volatile
 15403  013B28  0012               	return		;funcret
 15404  013B2A                     __end_of_Timer2_Clear:
 15405                           	opt stack 0
 15406                           tosu	equ	0xFFF
 15407                           tosh	equ	0xFFE
 15408                           tosl	equ	0xFFD
 15409                           pclath	equ	0xFFA
 15410                           tblptru	equ	0xFF8
 15411                           tblptrh	equ	0xFF7
 15412                           tblptrl	equ	0xFF6
 15413                           tablat	equ	0xFF5
 15414                           prodh	equ	0xFF4
 15415                           prodl	equ	0xFF3
 15416                           intcon	equ	0xFF2
 15417                           postinc0	equ	0xFEE
 15418                           wreg	equ	0xFE8
 15419                           indf1	equ	0xFE7
 15420                           postdec1	equ	0xFE5
 15421                           fsr1h	equ	0xFE2
 15422                           fsr1l	equ	0xFE1
 15423                           indf2	equ	0xFDF
 15424                           postinc2	equ	0xFDE
 15425                           postdec2	equ	0xFDD
 15426                           plusw2	equ	0xFDB
 15427                           fsr2h	equ	0xFDA
 15428                           fsr2l	equ	0xFD9
 15429                           status	equ	0xFD8
 15430                           
 15431 ;; *************** function _SPI_DisableISR *****************
 15432 ;; Defined at:
 15433 ;;		line 181 in file "Library/SPI.c"
 15434 ;; Parameters:    Size  Location     Type
 15435 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 15436 ;;		 -> SPI1(11), SPI2(11), 
 15437 ;; Auto vars:     Size  Location     Type
 15438 ;;		None
 15439 ;; Return value:  Size  Location     Type
 15440 ;;                  1    wreg      void 
 15441 ;; Registers used:
 15442 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15443 ;; Tracked objects:
 15444 ;;		On entry : 0/0
 15445 ;;		On exit  : 0/0
 15446 ;;		Unchanged: 0/0
 15447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15448 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15451 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15452 ;;Total ram usage:        2 bytes
 15453 ;; Hardware stack levels used:    1
 15454 ;; Hardware stack levels required when called:    7
 15455 ;; This function calls:
 15456 ;;		Nothing
 15457 ;; This function is called by:
 15458 ;;		_SPI_Init
 15459 ;; This function uses a non-reentrant model
 15460 ;;
 15461                           
 15462                           	psect	text85
 15463  01374A                     __ptext85:
 15464                           	opt stack 0
 15465  01374A                     _SPI_DisableISR:
 15466                           	opt stack 20
 15467                           
 15468                           ;SPI.c: 183: switch (pInput->mChannel)
 15469                           
 15470                           ;incstack = 0
 15471  01374A  D004               	goto	l654
 15472  01374C                     l655:
 15473                           
 15474                           ; BSR set to: 0
 15475  01374C  969D               	bcf	3997,3,c	;volatile
 15476  01374E  0012               	return	
 15477  013750                     l657:
 15478                           
 15479                           ; BSR set to: 0
 15480  013750  9EA3               	bcf	4003,7,c	;volatile
 15481                           
 15482                           ; BSR set to: 0
 15483                           ;SPI.c: 188: };
 15484                           
 15485                           ; BSR set to: 0
 15486                           
 15487                           ;SPI.c: 187: default: return;
 15488  013752  0012               	return	
 15489  013754                     l654:
 15490                           
 15491                           ; BSR set to: 0
 15492  013754  0100               	movlb	0	; () banked
 15493  013756  EE20 F002          	lfsr	2,2
 15494  01375A  51B3               	movf	SPI_DisableISR@pInput& (0+255),w,b
 15495  01375C  26D9               	addwf	fsr2l,f,c
 15496  01375E  51B4               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 15497  013760  22DA               	addwfc	fsr2h,f,c
 15498  013762  50DF               	movf	indf2,w,c
 15499                           
 15500                           ; Switch size 1, requested type "space"
 15501                           ; Number of cases is 2, Range of values is 0 to 1
 15502                           ; switch strategies available:
 15503                           ; Name         Instructions Cycles
 15504                           ; simple_byte            7     4 (average)
 15505                           ;	Chosen strategy is simple_byte
 15506  013764  0A00               	xorlw	0	; case 0
 15507  013766  B4D8               	btfsc	status,2,c
 15508  013768  D7F1               	goto	l655
 15509  01376A  0A01               	xorlw	1	; case 1
 15510  01376C  A4D8               	btfss	status,2,c
 15511  01376E  0012               	return	
 15512  013770  D7EF               	goto	l657
 15513  013772                     __end_of_SPI_DisableISR:
 15514                           	opt stack 0
 15515                           tosu	equ	0xFFF
 15516                           tosh	equ	0xFFE
 15517                           tosl	equ	0xFFD
 15518                           pclath	equ	0xFFA
 15519                           tblptru	equ	0xFF8
 15520                           tblptrh	equ	0xFF7
 15521                           tblptrl	equ	0xFF6
 15522                           tablat	equ	0xFF5
 15523                           prodh	equ	0xFF4
 15524                           prodl	equ	0xFF3
 15525                           intcon	equ	0xFF2
 15526                           postinc0	equ	0xFEE
 15527                           wreg	equ	0xFE8
 15528                           indf1	equ	0xFE7
 15529                           postdec1	equ	0xFE5
 15530                           fsr1h	equ	0xFE2
 15531                           fsr1l	equ	0xFE1
 15532                           indf2	equ	0xFDF
 15533                           postinc2	equ	0xFDE
 15534                           postdec2	equ	0xFDD
 15535                           plusw2	equ	0xFDB
 15536                           fsr2h	equ	0xFDA
 15537                           fsr2l	equ	0xFD9
 15538                           status	equ	0xFD8
 15539                           
 15540 ;; *************** function _SPI_DCS *****************
 15541 ;; Defined at:
 15542 ;;		line 219 in file "Library/SPI.c"
 15543 ;; Parameters:    Size  Location     Type
 15544 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 15545 ;;		 -> SPI1(11), SPI2(11), 
 15546 ;; Auto vars:     Size  Location     Type
 15547 ;;		None
 15548 ;; Return value:  Size  Location     Type
 15549 ;;                  1    wreg      void 
 15550 ;; Registers used:
 15551 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15552 ;; Tracked objects:
 15553 ;;		On entry : 0/0
 15554 ;;		On exit  : 0/0
 15555 ;;		Unchanged: 0/0
 15556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15561 ;;Total ram usage:        2 bytes
 15562 ;; Hardware stack levels used:    1
 15563 ;; Hardware stack levels required when called:    7
 15564 ;; This function calls:
 15565 ;;		Nothing
 15566 ;; This function is called by:
 15567 ;;		_SPI_Init
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text86
 15572  0136F2                     __ptext86:
 15573                           	opt stack 0
 15574  0136F2                     _SPI_DCS:
 15575                           	opt stack 20
 15576                           
 15577                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 15578                           
 15579                           ; BSR set to: 0
 15580                           ;incstack = 0
 15581  0136F2  0100               	movlb	0	; () banked
 15582  0136F4  EE20 F002          	lfsr	2,2
 15583  0136F8  51B3               	movf	SPI_DCS@pInput& (0+255),w,b
 15584  0136FA  26D9               	addwf	fsr2l,f,c
 15585  0136FC  51B4               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 15586  0136FE  22DA               	addwfc	fsr2h,f,c
 15587  013700  50DF               	movf	indf2,w,c
 15588  013702  A4D8               	btfss	status,2,c
 15589  013704  D006               	goto	l673
 15590                           
 15591                           ; BSR set to: 0
 15592                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 15593  013706  C0A9  FFD9         	movff	_PortC+4,fsr2l
 15594  01370A  C0AA  FFDA         	movff	_PortC+5,fsr2h
 15595  01370E  84DF               	bsf	indf2,2,c
 15596  013710  0012               	return	
 15597  013712                     l673:
 15598                           
 15599                           ; BSR set to: 0
 15600                           ;SPI.c: 223: else
 15601                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 15602                           
 15603                           ; BSR set to: 0
 15604  013712  C09F  FFD9         	movff	_PortD+4,fsr2l
 15605  013716  C0A0  FFDA         	movff	_PortD+5,fsr2h
 15606  01371A  8EDF               	bsf	indf2,7,c
 15607  01371C  0012               	return	
 15608  01371E                     __end_of_SPI_DCS:
 15609                           	opt stack 0
 15610                           tosu	equ	0xFFF
 15611                           tosh	equ	0xFFE
 15612                           tosl	equ	0xFFD
 15613                           pclath	equ	0xFFA
 15614                           tblptru	equ	0xFF8
 15615                           tblptrh	equ	0xFF7
 15616                           tblptrl	equ	0xFF6
 15617                           tablat	equ	0xFF5
 15618                           prodh	equ	0xFF4
 15619                           prodl	equ	0xFF3
 15620                           intcon	equ	0xFF2
 15621                           postinc0	equ	0xFEE
 15622                           wreg	equ	0xFE8
 15623                           indf1	equ	0xFE7
 15624                           postdec1	equ	0xFE5
 15625                           fsr1h	equ	0xFE2
 15626                           fsr1l	equ	0xFE1
 15627                           indf2	equ	0xFDF
 15628                           postinc2	equ	0xFDE
 15629                           postdec2	equ	0xFDD
 15630                           plusw2	equ	0xFDB
 15631                           fsr2h	equ	0xFDA
 15632                           fsr2l	equ	0xFD9
 15633                           status	equ	0xFD8
 15634                           
 15635 ;; *************** function _FunctInitButton *****************
 15636 ;; Defined at:
 15637 ;;		line 16 in file "Functions.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;		None
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;		None
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  1    wreg      void 
 15644 ;; Registers used:
 15645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15655 ;;Total ram usage:        0 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; Hardware stack levels required when called:   16
 15658 ;; This function calls:
 15659 ;;		_Button_Init
 15660 ;; This function is called by:
 15661 ;;		_main
 15662 ;; This function uses a non-reentrant model
 15663 ;;
 15664                           
 15665                           	psect	text87
 15666  01299E                     __ptext87:
 15667                           	opt stack 0
 15668  01299E                     _FunctInitButton:
 15669                           	opt stack 14
 15670                           
 15671                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 15672                           
 15673                           ; BSR set to: 0
 15674                           ;incstack = 0
 15675  01299E  0E86               	movlw	low _TestButton
 15676  0129A0  0101               	movlb	1	; () banked
 15677  0129A2  6FD7               	movwf	Button_Init@pInput& (0+255),b
 15678  0129A4  0E01               	movlw	high _TestButton
 15679  0129A6  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 15680  0129A8  0E00               	movlw	0
 15681  0129AA  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15682  0129AC  0E02               	movlw	2
 15683  0129AE  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 15684  0129B0  0EB4               	movlw	low _MXK_InitTestButton
 15685  0129B2  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 15686  0129B4  0E39               	movlw	high _MXK_InitTestButton
 15687  0129B6  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15688  0129B8  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 15689  0129BA  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15690  0129BC  0E5A               	movlw	low _MXK_TestButton
 15691  0129BE  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 15692  0129C0  0E3A               	movlw	high _MXK_TestButton
 15693  0129C2  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15694  0129C4  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 15695  0129C6  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15696  0129C8  0EFE               	movlw	low _Event_TestButton
 15697  0129CA  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 15698  0129CC  0E35               	movlw	high _Event_TestButton
 15699  0129CE  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15700  0129D0  0E01               	movlw	low (_Event_TestButton shr (0+16))
 15701  0129D2  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15702  0129D4  ECBB  F08F         	call	_Button_Init	;wreg free
 15703                           
 15704                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 15705  0129D8  0E7C               	movlw	low _DIPSwitch
 15706  0129DA  0101               	movlb	1	; () banked
 15707  0129DC  6FD7               	movwf	Button_Init@pInput& (0+255),b
 15708  0129DE  0E01               	movlw	high _DIPSwitch
 15709  0129E0  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 15710  0129E2  0E00               	movlw	0
 15711  0129E4  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15712  0129E6  0E02               	movlw	2
 15713  0129E8  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 15714  0129EA  0E9C               	movlw	low _MXK_InitDIPSwitch
 15715  0129EC  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 15716  0129EE  0E39               	movlw	high _MXK_InitDIPSwitch
 15717  0129F0  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15718  0129F2  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 15719  0129F4  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15720  0129F6  0EE2               	movlw	low _MXK_DIPSwitch
 15721  0129F8  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 15722  0129FA  0E39               	movlw	high _MXK_DIPSwitch
 15723  0129FC  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15724  0129FE  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 15725  012A00  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15726  012A02  0EC2               	movlw	low _Event_DIPSwitch
 15727  012A04  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 15728  012A06  0E37               	movlw	high _Event_DIPSwitch
 15729  012A08  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15730  012A0A  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 15731  012A0C  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15732  012A0E  ECBB  F08F         	call	_Button_Init	;wreg free
 15733  012A12  0012               	return		;funcret
 15734  012A14                     __end_of_FunctInitButton:
 15735                           	opt stack 0
 15736                           tosu	equ	0xFFF
 15737                           tosh	equ	0xFFE
 15738                           tosl	equ	0xFFD
 15739                           pclath	equ	0xFFA
 15740                           tblptru	equ	0xFF8
 15741                           tblptrh	equ	0xFF7
 15742                           tblptrl	equ	0xFF6
 15743                           tablat	equ	0xFF5
 15744                           prodh	equ	0xFF4
 15745                           prodl	equ	0xFF3
 15746                           intcon	equ	0xFF2
 15747                           postinc0	equ	0xFEE
 15748                           wreg	equ	0xFE8
 15749                           indf1	equ	0xFE7
 15750                           postdec1	equ	0xFE5
 15751                           fsr1h	equ	0xFE2
 15752                           fsr1l	equ	0xFE1
 15753                           indf2	equ	0xFDF
 15754                           postinc2	equ	0xFDE
 15755                           postdec2	equ	0xFDD
 15756                           plusw2	equ	0xFDB
 15757                           fsr2h	equ	0xFDA
 15758                           fsr2l	equ	0xFD9
 15759                           status	equ	0xFD8
 15760                           
 15761 ;; *************** function _Button_Init *****************
 15762 ;; Defined at:
 15763 ;;		line 18 in file "Library/Button.c"
 15764 ;; Parameters:    Size  Location     Type
 15765 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 15766 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 15767 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 15768 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 15769 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 15770 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 15771 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 15772 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 15773 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 15774 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 15775 ;; Auto vars:     Size  Location     Type
 15776 ;;		None
 15777 ;; Return value:  Size  Location     Type
 15778 ;;                  1    wreg      void 
 15779 ;; Registers used:
 15780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15781 ;; Tracked objects:
 15782 ;;		On entry : 0/0
 15783 ;;		On exit  : 0/0
 15784 ;;		Unchanged: 0/0
 15785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15786 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15789 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15790 ;;Total ram usage:       13 bytes
 15791 ;; Hardware stack levels used:    1
 15792 ;; Hardware stack levels required when called:   15
 15793 ;; This function calls:
 15794 ;;		_HMI_InitButtons
 15795 ;;		_MXK_InitDIPSwitch
 15796 ;;		_MXK_InitTestButton
 15797 ;; This function is called by:
 15798 ;;		_HMI_Init
 15799 ;;		_FunctInitButton
 15800 ;; This function uses a non-reentrant model
 15801 ;;
 15802                           
 15803                           	psect	text88
 15804  011F76                     __ptext88:
 15805                           	opt stack 0
 15806  011F76                     _Button_Init:
 15807                           	opt stack 14
 15808                           
 15809                           ;Button.c: 21: if(pInput==(void*)0)
 15810                           
 15811                           ;incstack = 0
 15812  011F76  0101               	movlb	1	; () banked
 15813  011F78  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15814  011F7A  11D8               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 15815  011F7C  B4D8               	btfsc	status,2,c
 15816  011F7E  0012               	return	
 15817                           
 15818                           ; BSR set to: 1
 15819                           ;Button.c: 23: if(pInitIO==(void*)0)
 15820                           
 15821                           ; BSR set to: 1
 15822                           
 15823                           ; BSR set to: 1
 15824                           ;Button.c: 22: return;
 15825  011F80  51DB               	movf	Button_Init@pInitIO& (0+255),w,b
 15826  011F82  11DC               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 15827  011F84  11DD               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 15828  011F86  B4D8               	btfsc	status,2,c
 15829  011F88  0012               	return	
 15830                           
 15831                           ; BSR set to: 1
 15832                           ;Button.c: 25: if(pGetState==(void*)0)
 15833                           
 15834                           ; BSR set to: 1
 15835                           
 15836                           ; BSR set to: 1
 15837                           ;Button.c: 24: return;
 15838  011F8A  51DE               	movf	Button_Init@pGetState& (0+255),w,b
 15839  011F8C  11DF               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 15840  011F8E  11E0               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 15841  011F90  B4D8               	btfsc	status,2,c
 15842  011F92  0012               	return	
 15843                           
 15844                           ; BSR set to: 1
 15845                           ;Button.c: 27: if(pFunction==(void*)0)
 15846                           
 15847                           ; BSR set to: 1
 15848                           
 15849                           ; BSR set to: 1
 15850                           ;Button.c: 26: return;
 15851  011F94  51E1               	movf	Button_Init@pFunction& (0+255),w,b
 15852  011F96  11E2               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 15853  011F98  11E3               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 15854  011F9A  B4D8               	btfsc	status,2,c
 15855  011F9C  0012               	return	
 15856                           
 15857                           ; BSR set to: 1
 15858                           ;Button.c: 30: if(pThreshold == 0)
 15859                           
 15860                           ; BSR set to: 1
 15861                           
 15862                           ; BSR set to: 1
 15863                           ;Button.c: 28: return;
 15864  011F9E  51D9               	movf	Button_Init@pThreshold& (0+255),w,b
 15865  011FA0  11DA               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 15866  011FA2  A4D8               	btfss	status,2,c
 15867  011FA4  D004               	goto	l8
 15868                           
 15869                           ; BSR set to: 1
 15870                           ;Button.c: 31: pThreshold = 1;
 15871  011FA6  0E00               	movlw	0
 15872  011FA8  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15873  011FAA  0E01               	movlw	1
 15874  011FAC  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 15875  011FAE                     l8:
 15876                           
 15877                           ; BSR set to: 1
 15878                           ;Button.c: 34: pInput->mState = 0;
 15879                           
 15880                           ; BSR set to: 1
 15881  011FAE  C1D7  FFD9         	movff	Button_Init@pInput,fsr2l
 15882  011FB2  C1D8  FFDA         	movff	Button_Init@pInput+1,fsr2h
 15883  011FB6  0E00               	movlw	0
 15884  011FB8  6EDF               	movwf	indf2,c
 15885                           
 15886                           ; BSR set to: 1
 15887                           ;Button.c: 35: pInput->mCount = 0;
 15888  011FBA  EE20 F001          	lfsr	2,1
 15889  011FBE  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15890  011FC0  26D9               	addwf	fsr2l,f,c
 15891  011FC2  51D8               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15892  011FC4  22DA               	addwfc	fsr2h,f,c
 15893  011FC6  0E00               	movlw	0
 15894  011FC8  6EDF               	movwf	indf2,c
 15895                           
 15896                           ; BSR set to: 1
 15897                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 15898  011FCA  EE20 F002          	lfsr	2,2
 15899  011FCE  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15900  011FD0  26D9               	addwf	fsr2l,f,c
 15901  011FD2  51D8               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15902  011FD4  22DA               	addwfc	fsr2h,f,c
 15903  011FD6  C1D9  FFDE         	movff	Button_Init@pThreshold,postinc2
 15904  011FDA  C1DA  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 15905                           
 15906                           ; BSR set to: 1
 15907                           ;Button.c: 37: pInput->mFunction = pFunction;
 15908  011FDE  EE20 F004          	lfsr	2,4
 15909  011FE2  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15910  011FE4  26D9               	addwf	fsr2l,f,c
 15911  011FE6  51D8               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15912  011FE8  22DA               	addwfc	fsr2h,f,c
 15913  011FEA  C1E1  FFDE         	movff	Button_Init@pFunction,postinc2
 15914  011FEE  C1E2  FFDE         	movff	Button_Init@pFunction+1,postinc2
 15915  011FF2  C1E3  FFDE         	movff	Button_Init@pFunction+2,postinc2
 15916                           
 15917                           ; BSR set to: 1
 15918                           ;Button.c: 38: pInput->mGetState = pGetState;
 15919  011FF6  EE20 F007          	lfsr	2,7
 15920  011FFA  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15921  011FFC  26D9               	addwf	fsr2l,f,c
 15922  011FFE  51D8               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15923  012000  22DA               	addwfc	fsr2h,f,c
 15924  012002  C1DE  FFDE         	movff	Button_Init@pGetState,postinc2
 15925  012006  C1DF  FFDE         	movff	Button_Init@pGetState+1,postinc2
 15926  01200A  C1E0  FFDE         	movff	Button_Init@pGetState+2,postinc2
 15927                           
 15928                           ; BSR set to: 1
 15929                           ;Button.c: 41: pInitIO();
 15930  01200E  D801               	call	u8748
 15931  012010  0012               	return	
 15932  012012                     u8748:
 15933  012012  0005               	push	
 15934  012014  6EFA               	movwf	pclath,c
 15935  012016  51DB               	movf	Button_Init@pInitIO& (0+255),w,b
 15936  012018  6EFD               	movwf	tosl,c
 15937  01201A  51DC               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 15938  01201C  6EFE               	movwf	tosh,c
 15939  01201E  51DD               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 15940  012020  6EFF               	movwf	tosu,c
 15941  012022  50FA               	movf	pclath,w,c
 15942  012024  0012               	return		;indir
 15943  012026                     __end_of_Button_Init:
 15944                           	opt stack 0
 15945                           tosu	equ	0xFFF
 15946                           tosh	equ	0xFFE
 15947                           tosl	equ	0xFFD
 15948                           pclath	equ	0xFFA
 15949                           tblptru	equ	0xFF8
 15950                           tblptrh	equ	0xFF7
 15951                           tblptrl	equ	0xFF6
 15952                           tablat	equ	0xFF5
 15953                           prodh	equ	0xFF4
 15954                           prodl	equ	0xFF3
 15955                           intcon	equ	0xFF2
 15956                           postinc0	equ	0xFEE
 15957                           wreg	equ	0xFE8
 15958                           indf1	equ	0xFE7
 15959                           postdec1	equ	0xFE5
 15960                           fsr1h	equ	0xFE2
 15961                           fsr1l	equ	0xFE1
 15962                           indf2	equ	0xFDF
 15963                           postinc2	equ	0xFDE
 15964                           postdec2	equ	0xFDD
 15965                           plusw2	equ	0xFDB
 15966                           fsr2h	equ	0xFDA
 15967                           fsr2l	equ	0xFD9
 15968                           status	equ	0xFD8
 15969                           
 15970 ;; *************** function _MXK_InitDIPSwitch *****************
 15971 ;; Defined at:
 15972 ;;		line 20 in file "Library/MXK.c"
 15973 ;; Parameters:    Size  Location     Type
 15974 ;;		None
 15975 ;; Auto vars:     Size  Location     Type
 15976 ;;		None
 15977 ;; Return value:  Size  Location     Type
 15978 ;;                  1    wreg      void 
 15979 ;; Registers used:
 15980 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15981 ;; Tracked objects:
 15982 ;;		On entry : 0/0
 15983 ;;		On exit  : 0/0
 15984 ;;		Unchanged: 0/0
 15985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15990 ;;Total ram usage:        0 bytes
 15991 ;; Hardware stack levels used:    1
 15992 ;; Hardware stack levels required when called:   14
 15993 ;; This function calls:
 15994 ;;		_Port_SetQuadType
 15995 ;; This function is called by:
 15996 ;;		_FunctInitButton
 15997 ;;		_Button_Init
 15998 ;; This function uses a non-reentrant model
 15999 ;;
 16000                           
 16001                           	psect	text89
 16002  01399C                     __ptext89:
 16003                           	opt stack 0
 16004  01399C                     _MXK_InitDIPSwitch:
 16005                           	opt stack 14
 16006                           
 16007                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 16008                           
 16009                           ;incstack = 0
 16010  01399C  0E9B               	movlw	low _PortD
 16011  01399E  0100               	movlb	0	; () banked
 16012  0139A0  6FE9               	movwf	Port_SetQuadType@pInput& (0+255),b
 16013  0139A2  0E00               	movlw	high _PortD
 16014  0139A4  6FEA               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16015  0139A6  0E00               	movlw	0
 16016  0139A8  6FEB               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16017  0139AA  0E00               	movlw	0
 16018  0139AC  6FEC               	movwf	Port_SetQuadType@pType& (0+255),b
 16019  0139AE  EC69  F084         	call	_Port_SetQuadType	;wreg free
 16020  0139B2  0012               	return		;funcret
 16021  0139B4                     __end_of_MXK_InitDIPSwitch:
 16022                           	opt stack 0
 16023                           tosu	equ	0xFFF
 16024                           tosh	equ	0xFFE
 16025                           tosl	equ	0xFFD
 16026                           pclath	equ	0xFFA
 16027                           tblptru	equ	0xFF8
 16028                           tblptrh	equ	0xFF7
 16029                           tblptrl	equ	0xFF6
 16030                           tablat	equ	0xFF5
 16031                           prodh	equ	0xFF4
 16032                           prodl	equ	0xFF3
 16033                           intcon	equ	0xFF2
 16034                           postinc0	equ	0xFEE
 16035                           wreg	equ	0xFE8
 16036                           indf1	equ	0xFE7
 16037                           postdec1	equ	0xFE5
 16038                           fsr1h	equ	0xFE2
 16039                           fsr1l	equ	0xFE1
 16040                           indf2	equ	0xFDF
 16041                           postinc2	equ	0xFDE
 16042                           postdec2	equ	0xFDD
 16043                           plusw2	equ	0xFDB
 16044                           fsr2h	equ	0xFDA
 16045                           fsr2l	equ	0xFD9
 16046                           status	equ	0xFD8
 16047                           
 16048 ;; *************** function _HMI_InitButtons *****************
 16049 ;; Defined at:
 16050 ;;		line 21 in file "HMI.c"
 16051 ;; Parameters:    Size  Location     Type
 16052 ;;		None
 16053 ;; Auto vars:     Size  Location     Type
 16054 ;;		None
 16055 ;; Return value:  Size  Location     Type
 16056 ;;                  1    wreg      void 
 16057 ;; Registers used:
 16058 ;;		wreg, status,2
 16059 ;; Tracked objects:
 16060 ;;		On entry : 0/0
 16061 ;;		On exit  : 0/0
 16062 ;;		Unchanged: 0/0
 16063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16068 ;;Total ram usage:        0 bytes
 16069 ;; Hardware stack levels used:    1
 16070 ;; Hardware stack levels required when called:    7
 16071 ;; This function calls:
 16072 ;;		Nothing
 16073 ;; This function is called by:
 16074 ;;		_HMI_Init
 16075 ;;		_Button_Init
 16076 ;; This function uses a non-reentrant model
 16077 ;;
 16078                           
 16079                           	psect	text90
 16080  013B36                     __ptext90:
 16081                           	opt stack 0
 16082  013B36                     _HMI_InitButtons:
 16083                           	opt stack 21
 16084                           
 16085                           ;HMI.c: 23: TRISE = 0xFC;
 16086                           
 16087                           ;incstack = 0
 16088  013B36  0EFC               	movlw	252
 16089  013B38  6E96               	movwf	3990,c	;volatile
 16090  013B3A  0012               	return		;funcret
 16091  013B3C                     __end_of_HMI_InitButtons:
 16092                           	opt stack 0
 16093                           tosu	equ	0xFFF
 16094                           tosh	equ	0xFFE
 16095                           tosl	equ	0xFFD
 16096                           pclath	equ	0xFFA
 16097                           tblptru	equ	0xFF8
 16098                           tblptrh	equ	0xFF7
 16099                           tblptrl	equ	0xFF6
 16100                           tablat	equ	0xFF5
 16101                           prodh	equ	0xFF4
 16102                           prodl	equ	0xFF3
 16103                           intcon	equ	0xFF2
 16104                           postinc0	equ	0xFEE
 16105                           wreg	equ	0xFE8
 16106                           indf1	equ	0xFE7
 16107                           postdec1	equ	0xFE5
 16108                           fsr1h	equ	0xFE2
 16109                           fsr1l	equ	0xFE1
 16110                           indf2	equ	0xFDF
 16111                           postinc2	equ	0xFDE
 16112                           postdec2	equ	0xFDD
 16113                           plusw2	equ	0xFDB
 16114                           fsr2h	equ	0xFDA
 16115                           fsr2l	equ	0xFD9
 16116                           status	equ	0xFD8
 16117                           
 16118 ;; *************** function _MXK_InitTestButton *****************
 16119 ;; Defined at:
 16120 ;;		line 10 in file "Library/MXK.c"
 16121 ;; Parameters:    Size  Location     Type
 16122 ;;		None
 16123 ;; Auto vars:     Size  Location     Type
 16124 ;;		None
 16125 ;; Return value:  Size  Location     Type
 16126 ;;                  1    wreg      void 
 16127 ;; Registers used:
 16128 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16129 ;; Tracked objects:
 16130 ;;		On entry : 0/0
 16131 ;;		On exit  : 0/0
 16132 ;;		Unchanged: 0/0
 16133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16138 ;;Total ram usage:        0 bytes
 16139 ;; Hardware stack levels used:    1
 16140 ;; Hardware stack levels required when called:   12
 16141 ;; This function calls:
 16142 ;;		_Port_SetPinType
 16143 ;; This function is called by:
 16144 ;;		_FunctInitButton
 16145 ;;		_Button_Init
 16146 ;; This function uses a non-reentrant model
 16147 ;;
 16148                           
 16149                           	psect	text91
 16150  0139B4                     __ptext91:
 16151                           	opt stack 0
 16152  0139B4                     _MXK_InitTestButton:
 16153                           	opt stack 16
 16154                           
 16155                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 16156                           
 16157                           ;incstack = 0
 16158  0139B4  0E9A               	movlw	low _PortB
 16159  0139B6  0100               	movlb	0	; () banked
 16160  0139B8  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 16161  0139BA  0E01               	movlw	high _PortB
 16162  0139BC  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16163  0139BE  0E04               	movlw	4
 16164  0139C0  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 16165  0139C2  0E00               	movlw	0
 16166  0139C4  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 16167  0139C6  EC34  F087         	call	_Port_SetPinType	;wreg free
 16168  0139CA  0012               	return		;funcret
 16169  0139CC                     __end_of_MXK_InitTestButton:
 16170                           	opt stack 0
 16171                           tosu	equ	0xFFF
 16172                           tosh	equ	0xFFE
 16173                           tosl	equ	0xFFD
 16174                           pclath	equ	0xFFA
 16175                           tblptru	equ	0xFF8
 16176                           tblptrh	equ	0xFF7
 16177                           tblptrl	equ	0xFF6
 16178                           tablat	equ	0xFF5
 16179                           prodh	equ	0xFF4
 16180                           prodl	equ	0xFF3
 16181                           intcon	equ	0xFF2
 16182                           postinc0	equ	0xFEE
 16183                           wreg	equ	0xFE8
 16184                           indf1	equ	0xFE7
 16185                           postdec1	equ	0xFE5
 16186                           fsr1h	equ	0xFE2
 16187                           fsr1l	equ	0xFE1
 16188                           indf2	equ	0xFDF
 16189                           postinc2	equ	0xFDE
 16190                           postdec2	equ	0xFDD
 16191                           plusw2	equ	0xFDB
 16192                           fsr2h	equ	0xFDA
 16193                           fsr2l	equ	0xFD9
 16194                           status	equ	0xFD8
 16195                           
 16196 ;; *************** function _Port_SetPinType *****************
 16197 ;; Defined at:
 16198 ;;		line 189 in file "Library/Port.c"
 16199 ;; Parameters:    Size  Location     Type
 16200 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16201 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16202 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16203 ;;  pPin            1   40[BANK0 ] enum E6750
 16204 ;;  pType           1   41[BANK0 ] enum E6795
 16205 ;; Auto vars:     Size  Location     Type
 16206 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 16207 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 16208 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 16209 ;;  Output          1   42[BANK0 ] enum E6475
 16210 ;; Return value:  Size  Location     Type
 16211 ;;                  1    wreg      enum E6475
 16212 ;; Registers used:
 16213 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16214 ;; Tracked objects:
 16215 ;;		On entry : 0/0
 16216 ;;		On exit  : 0/0
 16217 ;;		Unchanged: 0/0
 16218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16219 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16220 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16222 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16223 ;;Total ram usage:        7 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; Hardware stack levels required when called:   11
 16226 ;; This function calls:
 16227 ;;		_Byte_SetBit
 16228 ;;		_PortProperty_Valid
 16229 ;;		_Word_SetPair
 16230 ;; This function is called by:
 16231 ;;		_Configure_GPIOs
 16232 ;;		_LED_Init
 16233 ;;		_Port_Init
 16234 ;;		_SPI_Init
 16235 ;;		_MXK_InitTestButton
 16236 ;;		_MXK_Init
 16237 ;;		_I2C_Init
 16238 ;;		_Motor_Init
 16239 ;; This function uses a non-reentrant model
 16240 ;;
 16241                           
 16242                           	psect	text92
 16243  010E68                     __ptext92:
 16244                           	opt stack 0
 16245  010E68                     _Port_SetPinType:
 16246                           	opt stack 18
 16247                           
 16248                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 16249                           
 16250                           ;incstack = 0
 16251  010E68  C0D9  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 16252  010E6C  C0DA  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 16253  010E70  CFDE F0DE          	movff	postinc2,Port_SetPinType@Props
 16254  010E74  CFDD F0DF          	movff	postdec2,Port_SetPinType@Props+1
 16255                           
 16256                           ;Port.c: 192: ePinError Output = ePinErrorState;
 16257  010E78  0E05               	movlw	5
 16258  010E7A  0100               	movlb	0	; () banked
 16259  010E7C  6FDD               	movwf	Port_SetPinType@Output& (0+255),b
 16260                           
 16261                           ;Port.c: 193: switch (pType)
 16262  010E7E  D0A7               	goto	l412
 16263  010E80                     
 16264                           ; BSR set to: 0
 16265                           ;Port.c: 197: {
 16266                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 16267                           
 16268                           ; BSR set to: 0
 16269  010E80  EE20 F002          	lfsr	2,2
 16270  010E84  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16271  010E86  26D9               	addwf	fsr2l,f,c
 16272  010E88  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16273  010E8A  22DA               	addwfc	fsr2h,f,c
 16274  010E8C  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16275  010E90  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16276  010E94  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16277  010E98  0E01               	movlw	1
 16278  010E9A  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16279  010E9C  EC47  F098         	call	_Byte_SetBit	;wreg free
 16280                           
 16281                           ;Port.c: 203: break;
 16282  010EA0  D0A4               	goto	l414
 16283  010EA2                     
 16284                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 16285  010EA2  C0DE  F0C2         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16286  010EA6  C0DF  F0C3         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16287  010EAA  0E01               	movlw	1
 16288  010EAC  0100               	movlb	0	; () banked
 16289  010EAE  6FC4               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16290  010EB0  C0DB  F0C5         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16291  010EB4  EC84  F096         	call	_PortProperty_Valid	;wreg free
 16292  010EB8  0100               	movlb	0	; () banked
 16293  010EBA  6FDD               	movwf	Port_SetPinType@Output& (0+255),b
 16294  010EBC  51DD               	movf	Port_SetPinType@Output& (0+255),w,b
 16295  010EBE  A4D8               	btfss	status,2,c
 16296  010EC0  0012               	return	
 16297                           
 16298                           ; BSR set to: 0
 16299                           ;Port.c: 208: {
 16300                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 16301  010EC2  EE20 F002          	lfsr	2,2
 16302  010EC6  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16303  010EC8  26D9               	addwf	fsr2l,f,c
 16304  010ECA  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16305  010ECC  22DA               	addwfc	fsr2h,f,c
 16306  010ECE  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16307  010ED2  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16308  010ED6  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16309  010EDA  0E00               	movlw	0
 16310  010EDC  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16311  010EDE  EC47  F098         	call	_Byte_SetBit	;wreg free
 16312                           
 16313                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 16314  010EE2  0100               	movlb	0	; () banked
 16315  010EE4  EE20 F004          	lfsr	2,4
 16316  010EE8  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16317  010EEA  26D9               	addwf	fsr2l,f,c
 16318  010EEC  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16319  010EEE  22DA               	addwfc	fsr2h,f,c
 16320  010EF0  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16321  010EF4  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16322  010EF8  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16323  010EFC  0E00               	movlw	0
 16324  010EFE  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16325  010F00  EC47  F098         	call	_Byte_SetBit	;wreg free
 16326                           
 16327                           ;Port.c: 214: break;
 16328  010F04  D072               	goto	l414
 16329  010F06                     
 16330                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 16331                           
 16332                           ;Port.c: 218: case eTypeOutputOpenSource:
 16333  010F06  C0DE  F0C2         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16334  010F0A  C0DF  F0C3         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16335  010F0E  0E02               	movlw	2
 16336  010F10  0100               	movlb	0	; () banked
 16337  010F12  6FC4               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16338  010F14  C0DB  F0C5         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16339  010F18  EC84  F096         	call	_PortProperty_Valid	;wreg free
 16340  010F1C  0100               	movlb	0	; () banked
 16341  010F1E  6FDD               	movwf	Port_SetPinType@Output& (0+255),b
 16342  010F20  51DD               	movf	Port_SetPinType@Output& (0+255),w,b
 16343  010F22  A4D8               	btfss	status,2,c
 16344  010F24  0012               	return	
 16345                           
 16346                           ; BSR set to: 0
 16347                           ;Port.c: 220: {
 16348                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 16349  010F26  EE20 F002          	lfsr	2,2
 16350  010F2A  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16351  010F2C  26D9               	addwf	fsr2l,f,c
 16352  010F2E  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16353  010F30  22DA               	addwfc	fsr2h,f,c
 16354  010F32  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16355  010F36  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16356  010F3A  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16357  010F3E  0E01               	movlw	1
 16358  010F40  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16359  010F42  EC47  F098         	call	_Byte_SetBit	;wreg free
 16360                           
 16361                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 16362  010F46  0100               	movlb	0	; () banked
 16363  010F48  EE20 F004          	lfsr	2,4
 16364  010F4C  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16365  010F4E  26D9               	addwf	fsr2l,f,c
 16366  010F50  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16367  010F52  22DA               	addwfc	fsr2h,f,c
 16368  010F54  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16369  010F58  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16370  010F5C  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16371  010F60  0E01               	movlw	1
 16372  010F62  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16373  010F64  EC47  F098         	call	_Byte_SetBit	;wreg free
 16374                           
 16375                           ;Port.c: 226: break;
 16376  010F68  D040               	goto	l414
 16377  010F6A                     
 16378                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 16379                           
 16380                           ;Port.c: 230: case eTypeOutputPushPull:
 16381  010F6A  C0DE  F0C2         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16382  010F6E  C0DF  F0C3         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16383  010F72  0E00               	movlw	0
 16384  010F74  0100               	movlb	0	; () banked
 16385  010F76  6FC4               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16386  010F78  C0DB  F0C5         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16387  010F7C  EC84  F096         	call	_PortProperty_Valid	;wreg free
 16388  010F80  0100               	movlb	0	; () banked
 16389  010F82  6FDD               	movwf	Port_SetPinType@Output& (0+255),b
 16390  010F84  51DD               	movf	Port_SetPinType@Output& (0+255),w,b
 16391  010F86  A4D8               	btfss	status,2,c
 16392  010F88  0012               	return	
 16393                           
 16394                           ; BSR set to: 0
 16395                           ;Port.c: 232: {
 16396                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 16397  010F8A  EE20 F002          	lfsr	2,2
 16398  010F8E  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16399  010F90  26D9               	addwf	fsr2l,f,c
 16400  010F92  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16401  010F94  22DA               	addwfc	fsr2h,f,c
 16402  010F96  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16403  010F9A  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16404  010F9E  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16405  010FA2  0E00               	movlw	0
 16406  010FA4  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16407  010FA6  EC47  F098         	call	_Byte_SetBit	;wreg free
 16408                           
 16409                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 16410  010FAA  0100               	movlb	0	; () banked
 16411  010FAC  EE20 F004          	lfsr	2,4
 16412  010FB0  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16413  010FB2  26D9               	addwf	fsr2l,f,c
 16414  010FB4  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16415  010FB6  22DA               	addwfc	fsr2h,f,c
 16416  010FB8  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16417  010FBC  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16418  010FC0  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16419  010FC4  0E00               	movlw	0
 16420  010FC6  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16421  010FC8  EC47  F098         	call	_Byte_SetBit	;wreg free
 16422                           
 16423                           ;Port.c: 239: }
 16424                           
 16425                           ;Port.c: 238: break;
 16426  010FCC  D00E               	goto	l414
 16427  010FCE                     l412:
 16428  010FCE  0100               	movlb	0	; () banked
 16429  010FD0  51DC               	movf	Port_SetPinType@pType& (0+255),w,b
 16430                           
 16431                           ; Switch size 1, requested type "space"
 16432                           ; Number of cases is 4, Range of values is 0 to 3
 16433                           ; switch strategies available:
 16434                           ; Name         Instructions Cycles
 16435                           ; simple_byte           13     7 (average)
 16436                           ;	Chosen strategy is simple_byte
 16437  010FD2  0A00               	xorlw	0	; case 0
 16438  010FD4  B4D8               	btfsc	status,2,c
 16439  010FD6  D754               	goto	l413
 16440  010FD8  0A01               	xorlw	1	; case 1
 16441  010FDA  B4D8               	btfsc	status,2,c
 16442  010FDC  D762               	goto	l415
 16443  010FDE  0A03               	xorlw	3	; case 2
 16444  010FE0  B4D8               	btfsc	status,2,c
 16445  010FE2  D791               	goto	l417
 16446  010FE4  0A01               	xorlw	1	; case 3
 16447  010FE6  B4D8               	btfsc	status,2,c
 16448  010FE8  D7C0               	goto	l421
 16449  010FEA                     l414:
 16450                           
 16451                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 16452                           
 16453                           ; BSR set to: 0
 16454  010FEA  0E08               	movlw	8
 16455  010FEC  0100               	movlb	0	; () banked
 16456  010FEE  25D9               	addwf	Port_SetPinType@pInput& (0+255),w,b
 16457  010FF0  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16458  010FF2  0E00               	movlw	0
 16459  010FF4  21DA               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 16460  010FF6  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16461  010FF8  C0DB  F0C4         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 16462  010FFC  C0DC  F0C5         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 16463  011000  EC76  F09A         	call	_Word_SetPair	;wreg free
 16464  011004  0012               	return	
 16465  011006                     __end_of_Port_SetPinType:
 16466                           	opt stack 0
 16467                           tosu	equ	0xFFF
 16468                           tosh	equ	0xFFE
 16469                           tosl	equ	0xFFD
 16470                           pclath	equ	0xFFA
 16471                           tblptru	equ	0xFF8
 16472                           tblptrh	equ	0xFF7
 16473                           tblptrl	equ	0xFF6
 16474                           tablat	equ	0xFF5
 16475                           prodh	equ	0xFF4
 16476                           prodl	equ	0xFF3
 16477                           intcon	equ	0xFF2
 16478                           postinc0	equ	0xFEE
 16479                           wreg	equ	0xFE8
 16480                           indf1	equ	0xFE7
 16481                           postdec1	equ	0xFE5
 16482                           fsr1h	equ	0xFE2
 16483                           fsr1l	equ	0xFE1
 16484                           indf2	equ	0xFDF
 16485                           postinc2	equ	0xFDE
 16486                           postdec2	equ	0xFDD
 16487                           plusw2	equ	0xFDB
 16488                           fsr2h	equ	0xFDA
 16489                           fsr2l	equ	0xFD9
 16490                           status	equ	0xFD8
 16491                           
 16492 ;; *************** function _Byte_SetBit *****************
 16493 ;; Defined at:
 16494 ;;		line 32 in file "Library/Types.c"
 16495 ;; Parameters:    Size  Location     Type
 16496 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16497 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 16498 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 16499 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16500 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16501 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16502 ;;		 -> NULL(0), 
 16503 ;;  pBit            1    2[BANK0 ] unsigned char 
 16504 ;;  pValue          1    3[BANK0 ] unsigned char 
 16505 ;; Auto vars:     Size  Location     Type
 16506 ;;		None
 16507 ;; Return value:  Size  Location     Type
 16508 ;;                  1    wreg      void 
 16509 ;; Registers used:
 16510 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16511 ;; Tracked objects:
 16512 ;;		On entry : 0/0
 16513 ;;		On exit  : 0/0
 16514 ;;		Unchanged: 0/0
 16515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16516 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16518 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16519 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16520 ;;Total ram usage:        7 bytes
 16521 ;; Hardware stack levels used:    1
 16522 ;; Hardware stack levels required when called:    7
 16523 ;; This function calls:
 16524 ;;		Nothing
 16525 ;; This function is called by:
 16526 ;;		_Port_SetPinType
 16527 ;;		_Port_SetPin
 16528 ;;		_SPI_Init
 16529 ;;		_SPI_MinSpeed
 16530 ;;		_SPI_MaxSpeed
 16531 ;;		_Word_SetBit
 16532 ;;		_I2C_Init
 16533 ;; This function uses a non-reentrant model
 16534 ;;
 16535                           
 16536                           	psect	text93
 16537  01308E                     __ptext93:
 16538                           	opt stack 0
 16539  01308E                     _Byte_SetBit:
 16540                           	opt stack 21
 16541                           
 16542                           ;Types.c: 34: pValue &= 1;
 16543                           
 16544                           ;incstack = 0
 16545  01308E  0E01               	movlw	1
 16546  013090  0100               	movlb	0	; () banked
 16547  013092  17B6               	andwf	Byte_SetBit@pValue& (0+255),f,b
 16548                           
 16549                           ; BSR set to: 0
 16550                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 16551  013094  C0B5  F0B7         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 16552  013098  0E01               	movlw	1
 16553  01309A  6FB8               	movwf	(??_Byte_SetBit+1)& (0+255),b
 16554  01309C  2BB7               	incf	??_Byte_SetBit& (0+255),f,b
 16555  01309E  D002               	goto	u7824
 16556  0130A0                     u7825:
 16557  0130A0  90D8               	bcf	status,0,c
 16558  0130A2  37B8               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 16559  0130A4                     u7824:
 16560  0130A4  2FB7               	decfsz	??_Byte_SetBit& (0+255),f,b
 16561  0130A6  D7FC               	goto	u7825
 16562  0130A8  0100               	movlb	0	; () banked
 16563  0130AA  51B8               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 16564  0130AC  0AFF               	xorlw	255
 16565  0130AE  6FB9               	movwf	(??_Byte_SetBit+2)& (0+255),b
 16566  0130B0  C0B3  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 16567  0130B4  C0B4  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 16568  0130B8  51B9               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 16569  0130BA  16DF               	andwf	indf2,f,c
 16570                           
 16571                           ; BSR set to: 0
 16572                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 16573  0130BC  C0B5  F0B7         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 16574  0130C0  C0B6  F0B8         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 16575  0130C4  2BB7               	incf	??_Byte_SetBit& (0+255),f,b
 16576  0130C6  D002               	goto	u7834
 16577  0130C8                     u7835:
 16578  0130C8  90D8               	bcf	status,0,c
 16579  0130CA  37B8               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 16580  0130CC                     u7834:
 16581  0130CC  2FB7               	decfsz	??_Byte_SetBit& (0+255),f,b
 16582  0130CE  D7FC               	goto	u7835
 16583  0130D0  C0B3  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 16584  0130D4  C0B4  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 16585  0130D8  0100               	movlb	0	; () banked
 16586  0130DA  51B8               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 16587  0130DC  12DF               	iorwf	indf2,f,c
 16588                           
 16589                           ; BSR set to: 0
 16590  0130DE  0012               	return		;funcret
 16591  0130E0                     __end_of_Byte_SetBit:
 16592                           	opt stack 0
 16593                           tosu	equ	0xFFF
 16594                           tosh	equ	0xFFE
 16595                           tosl	equ	0xFFD
 16596                           pclath	equ	0xFFA
 16597                           tblptru	equ	0xFF8
 16598                           tblptrh	equ	0xFF7
 16599                           tblptrl	equ	0xFF6
 16600                           tablat	equ	0xFF5
 16601                           prodh	equ	0xFF4
 16602                           prodl	equ	0xFF3
 16603                           intcon	equ	0xFF2
 16604                           postinc0	equ	0xFEE
 16605                           wreg	equ	0xFE8
 16606                           indf1	equ	0xFE7
 16607                           postdec1	equ	0xFE5
 16608                           fsr1h	equ	0xFE2
 16609                           fsr1l	equ	0xFE1
 16610                           indf2	equ	0xFDF
 16611                           postinc2	equ	0xFDE
 16612                           postdec2	equ	0xFDD
 16613                           plusw2	equ	0xFDB
 16614                           fsr2h	equ	0xFDA
 16615                           fsr2l	equ	0xFD9
 16616                           status	equ	0xFD8
 16617                           
 16618 ;; *************** function _Port_SetQuadType *****************
 16619 ;; Defined at:
 16620 ;;		line 399 in file "Library/Port.c"
 16621 ;; Parameters:    Size  Location     Type
 16622 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 16623 ;;		 -> PortB(10), PortD(10), 
 16624 ;;  pQuad           1   56[BANK0 ] enum E6776
 16625 ;;  pType           1   57[BANK0 ] enum E6795
 16626 ;; Auto vars:     Size  Location     Type
 16627 ;;  Output          1   58[BANK0 ] enum E6475
 16628 ;; Return value:  Size  Location     Type
 16629 ;;                  1    wreg      enum E6475
 16630 ;; Registers used:
 16631 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16632 ;; Tracked objects:
 16633 ;;		On entry : 0/0
 16634 ;;		On exit  : 0/0
 16635 ;;		Unchanged: 0/0
 16636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16637 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16640 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16641 ;;Total ram usage:        5 bytes
 16642 ;; Hardware stack levels used:    1
 16643 ;; Hardware stack levels required when called:   13
 16644 ;; This function calls:
 16645 ;;		_Byte_SetQuad
 16646 ;;		_Port_CheckQuadType
 16647 ;;		_Word_SetPair
 16648 ;; This function is called by:
 16649 ;;		_MXK_InitDIPSwitch
 16650 ;;		_MXK_Init
 16651 ;; This function uses a non-reentrant model
 16652 ;;
 16653                           
 16654                           	psect	text94
 16655  0108D2                     __ptext94:
 16656                           	opt stack 0
 16657  0108D2                     _Port_SetQuadType:
 16658                           	opt stack 16
 16659                           
 16660                           ;Port.c: 401: ePinError Output = ePinErrorState;
 16661                           
 16662                           ; BSR set to: 0
 16663                           ;incstack = 0
 16664  0108D2  0E05               	movlw	5
 16665  0108D4  0100               	movlb	0	; () banked
 16666  0108D6  6FED               	movwf	Port_SetQuadType@Output& (0+255),b
 16667                           
 16668                           ;Port.c: 403: switch (pType)
 16669  0108D8  D0B8               	goto	l476
 16670  0108DA                     
 16671                           ; BSR set to: 0
 16672                           ;Port.c: 407: {
 16673                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 16674                           
 16675                           ; BSR set to: 0
 16676  0108DA  EE20 F002          	lfsr	2,2
 16677  0108DE  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16678  0108E0  26D9               	addwf	fsr2l,f,c
 16679  0108E2  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16680  0108E4  22DA               	addwfc	fsr2h,f,c
 16681  0108E6  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16682  0108EA  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16683  0108EE  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16684  0108F2  0E0F               	movlw	15
 16685  0108F4  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16686  0108F6  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16687                           
 16688                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 16689  0108FA  0100               	movlb	0	; () banked
 16690  0108FC  EE20 F004          	lfsr	2,4
 16691  010900  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16692  010902  26D9               	addwf	fsr2l,f,c
 16693  010904  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16694  010906  22DA               	addwfc	fsr2h,f,c
 16695  010908  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16696  01090C  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16697  010910  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16698  010914  0E00               	movlw	0
 16699  010916  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16700  010918  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16701                           
 16702                           ;Port.c: 413: }
 16703                           ;Port.c: 415: break;
 16704  01091C  D0A4               	goto	l478
 16705  01091E                     
 16706                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 16707  01091E  C0E9  F0E2         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 16708  010922  C0EA  F0E3         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 16709  010926  C0EB  F0E4         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 16710  01092A  0E03               	movlw	3
 16711  01092C  0100               	movlb	0	; () banked
 16712  01092E  6FE5               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 16713  010930  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
 16714  010934  0100               	movlb	0	; () banked
 16715  010936  6FED               	movwf	Port_SetQuadType@Output& (0+255),b
 16716  010938  51ED               	movf	Port_SetQuadType@Output& (0+255),w,b
 16717  01093A  A4D8               	btfss	status,2,c
 16718  01093C  0012               	return	
 16719                           
 16720                           ; BSR set to: 0
 16721                           ;Port.c: 418: {
 16722                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 16723  01093E  EE20 F002          	lfsr	2,2
 16724  010942  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16725  010944  26D9               	addwf	fsr2l,f,c
 16726  010946  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16727  010948  22DA               	addwfc	fsr2h,f,c
 16728  01094A  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16729  01094E  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16730  010952  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16731  010956  0E00               	movlw	0
 16732  010958  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16733  01095A  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16734                           
 16735                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 16736  01095E  0100               	movlb	0	; () banked
 16737  010960  EE20 F004          	lfsr	2,4
 16738  010964  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16739  010966  26D9               	addwf	fsr2l,f,c
 16740  010968  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16741  01096A  22DA               	addwfc	fsr2h,f,c
 16742  01096C  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16743  010970  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16744  010974  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16745  010978  0E00               	movlw	0
 16746  01097A  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16747  01097C  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16748                           
 16749                           ;Port.c: 424: }
 16750  010980  D072               	goto	l478
 16751  010982                     
 16752                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 16753  010982  C0E9  F0E2         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 16754  010986  C0EA  F0E3         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 16755  01098A  C0EB  F0E4         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 16756  01098E  0E03               	movlw	3
 16757  010990  0100               	movlb	0	; () banked
 16758  010992  6FE5               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 16759  010994  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
 16760  010998  0100               	movlb	0	; () banked
 16761  01099A  6FED               	movwf	Port_SetQuadType@Output& (0+255),b
 16762  01099C  51ED               	movf	Port_SetQuadType@Output& (0+255),w,b
 16763  01099E  A4D8               	btfss	status,2,c
 16764  0109A0  0012               	return	
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;Port.c: 429: {
 16768                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 16769  0109A2  EE20 F002          	lfsr	2,2
 16770  0109A6  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16771  0109A8  26D9               	addwf	fsr2l,f,c
 16772  0109AA  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16773  0109AC  22DA               	addwfc	fsr2h,f,c
 16774  0109AE  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16775  0109B2  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16776  0109B6  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16777  0109BA  0E0F               	movlw	15
 16778  0109BC  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16779  0109BE  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16780                           
 16781                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 16782  0109C2  0100               	movlb	0	; () banked
 16783  0109C4  EE20 F004          	lfsr	2,4
 16784  0109C8  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16785  0109CA  26D9               	addwf	fsr2l,f,c
 16786  0109CC  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16787  0109CE  22DA               	addwfc	fsr2h,f,c
 16788  0109D0  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16789  0109D4  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16790  0109D8  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16791  0109DC  0E0F               	movlw	15
 16792  0109DE  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16793  0109E0  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16794                           
 16795                           ;Port.c: 435: }
 16796  0109E4  D040               	goto	l478
 16797  0109E6                     
 16798                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 16799  0109E6  C0E9  F0E2         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 16800  0109EA  C0EA  F0E3         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 16801  0109EE  C0EB  F0E4         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 16802  0109F2  0E03               	movlw	3
 16803  0109F4  0100               	movlb	0	; () banked
 16804  0109F6  6FE5               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 16805  0109F8  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
 16806  0109FC  0100               	movlb	0	; () banked
 16807  0109FE  6FED               	movwf	Port_SetQuadType@Output& (0+255),b
 16808  010A00  51ED               	movf	Port_SetQuadType@Output& (0+255),w,b
 16809  010A02  A4D8               	btfss	status,2,c
 16810  010A04  0012               	return	
 16811                           
 16812                           ; BSR set to: 0
 16813                           ;Port.c: 440: {
 16814                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 16815  010A06  EE20 F002          	lfsr	2,2
 16816  010A0A  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16817  010A0C  26D9               	addwf	fsr2l,f,c
 16818  010A0E  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16819  010A10  22DA               	addwfc	fsr2h,f,c
 16820  010A12  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16821  010A16  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16822  010A1A  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16823  010A1E  0E00               	movlw	0
 16824  010A20  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16825  010A22  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16826                           
 16827                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 16828  010A26  0100               	movlb	0	; () banked
 16829  010A28  EE20 F004          	lfsr	2,4
 16830  010A2C  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16831  010A2E  26D9               	addwf	fsr2l,f,c
 16832  010A30  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16833  010A32  22DA               	addwfc	fsr2h,f,c
 16834  010A34  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16835  010A38  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16836  010A3C  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16837  010A40  0E00               	movlw	0
 16838  010A42  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16839  010A44  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16840                           
 16841                           ;Port.c: 446: }
 16842  010A48  D00E               	goto	l478
 16843  010A4A                     l476:
 16844  010A4A  0100               	movlb	0	; () banked
 16845  010A4C  51EC               	movf	Port_SetQuadType@pType& (0+255),w,b
 16846                           
 16847                           ; Switch size 1, requested type "space"
 16848                           ; Number of cases is 4, Range of values is 0 to 3
 16849                           ; switch strategies available:
 16850                           ; Name         Instructions Cycles
 16851                           ; simple_byte           13     7 (average)
 16852                           ;	Chosen strategy is simple_byte
 16853  010A4E  0A00               	xorlw	0	; case 0
 16854  010A50  B4D8               	btfsc	status,2,c
 16855  010A52  D743               	goto	l477
 16856  010A54  0A01               	xorlw	1	; case 1
 16857  010A56  B4D8               	btfsc	status,2,c
 16858  010A58  D762               	goto	l479
 16859  010A5A  0A03               	xorlw	3	; case 2
 16860  010A5C  B4D8               	btfsc	status,2,c
 16861  010A5E  D791               	goto	l483
 16862  010A60  0A01               	xorlw	1	; case 3
 16863  010A62  B4D8               	btfsc	status,2,c
 16864  010A64  D7C0               	goto	l486
 16865  010A66                     l478:
 16866                           
 16867                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 16868                           
 16869                           ; BSR set to: 0
 16870  010A66  0E08               	movlw	8
 16871  010A68  0100               	movlb	0	; () banked
 16872  010A6A  25E9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16873  010A6C  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16874  010A6E  0E00               	movlw	0
 16875  010A70  21EA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16876  010A72  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16877  010A74  51EB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16878  010A76  0D04               	mullw	4
 16879  010A78  CFF3 F0C4          	movff	prodl,Word_SetPair@pPair
 16880  010A7C  C0EC  F0C5         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16881  010A80  EC76  F09A         	call	_Word_SetPair	;wreg free
 16882                           
 16883                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 16884  010A84  0E08               	movlw	8
 16885  010A86  0100               	movlb	0	; () banked
 16886  010A88  25E9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16887  010A8A  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16888  010A8C  0E00               	movlw	0
 16889  010A8E  21EA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16890  010A90  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16891  010A92  51EB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16892  010A94  0D04               	mullw	4
 16893  010A96  28F3               	incf	prodl,w,c
 16894  010A98  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
 16895  010A9A  C0EC  F0C5         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16896  010A9E  EC76  F09A         	call	_Word_SetPair	;wreg free
 16897                           
 16898                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 16899  010AA2  0E08               	movlw	8
 16900  010AA4  0100               	movlb	0	; () banked
 16901  010AA6  25E9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16902  010AA8  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16903  010AAA  0E00               	movlw	0
 16904  010AAC  21EA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16905  010AAE  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16906  010AB0  51EB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16907  010AB2  0D04               	mullw	4
 16908  010AB4  50F3               	movf	prodl,w,c
 16909  010AB6  0F02               	addlw	2
 16910  010AB8  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
 16911  010ABA  C0EC  F0C5         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16912  010ABE  EC76  F09A         	call	_Word_SetPair	;wreg free
 16913                           
 16914                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 16915  010AC2  0E08               	movlw	8
 16916  010AC4  0100               	movlb	0	; () banked
 16917  010AC6  25E9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16918  010AC8  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16919  010ACA  0E00               	movlw	0
 16920  010ACC  21EA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16921  010ACE  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16922  010AD0  51EB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16923  010AD2  0D04               	mullw	4
 16924  010AD4  50F3               	movf	prodl,w,c
 16925  010AD6  0F03               	addlw	3
 16926  010AD8  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
 16927  010ADA  C0EC  F0C5         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16928  010ADE  EC76  F09A         	call	_Word_SetPair	;wreg free
 16929  010AE2  0012               	return	
 16930  010AE4                     __end_of_Port_SetQuadType:
 16931                           	opt stack 0
 16932                           tosu	equ	0xFFF
 16933                           tosh	equ	0xFFE
 16934                           tosl	equ	0xFFD
 16935                           pclath	equ	0xFFA
 16936                           tblptru	equ	0xFF8
 16937                           tblptrh	equ	0xFF7
 16938                           tblptrl	equ	0xFF6
 16939                           tablat	equ	0xFF5
 16940                           prodh	equ	0xFF4
 16941                           prodl	equ	0xFF3
 16942                           intcon	equ	0xFF2
 16943                           postinc0	equ	0xFEE
 16944                           wreg	equ	0xFE8
 16945                           indf1	equ	0xFE7
 16946                           postdec1	equ	0xFE5
 16947                           fsr1h	equ	0xFE2
 16948                           fsr1l	equ	0xFE1
 16949                           indf2	equ	0xFDF
 16950                           postinc2	equ	0xFDE
 16951                           postdec2	equ	0xFDD
 16952                           plusw2	equ	0xFDB
 16953                           fsr2h	equ	0xFDA
 16954                           fsr2l	equ	0xFD9
 16955                           status	equ	0xFD8
 16956                           
 16957 ;; *************** function _Word_SetPair *****************
 16958 ;; Defined at:
 16959 ;;		line 149 in file "Library/Types.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;  pInput          2   15[BANK0 ] PTR struct Word
 16962 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16963 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16964 ;;  pPair           1   17[BANK0 ] unsigned char 
 16965 ;;  pValue          1   18[BANK0 ] unsigned char 
 16966 ;; Auto vars:     Size  Location     Type
 16967 ;;		None
 16968 ;; Return value:  Size  Location     Type
 16969 ;;                  1    wreg      void 
 16970 ;; Registers used:
 16971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16972 ;; Tracked objects:
 16973 ;;		On entry : 0/0
 16974 ;;		On exit  : 0/0
 16975 ;;		Unchanged: 0/0
 16976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16977 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16980 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16981 ;;Total ram usage:        4 bytes
 16982 ;; Hardware stack levels used:    1
 16983 ;; Hardware stack levels required when called:    9
 16984 ;; This function calls:
 16985 ;;		_Byte_SetPair
 16986 ;; This function is called by:
 16987 ;;		_Port_SetPinType
 16988 ;;		_Port_SetQuadType
 16989 ;;		_Port_SetType
 16990 ;;		_Port_SetPairType
 16991 ;;		_PortProperty_Init
 16992 ;; This function uses a non-reentrant model
 16993 ;;
 16994                           
 16995                           	psect	text95
 16996  0134EC                     __ptext95:
 16997                           	opt stack 0
 16998  0134EC                     _Word_SetPair:
 16999                           	opt stack 19
 17000                           
 17001                           ;Types.c: 151: if (pPair >= 4)
 17002                           
 17003                           ;incstack = 0
 17004  0134EC  0E03               	movlw	3
 17005  0134EE  0100               	movlb	0	; () banked
 17006  0134F0  65C4               	cpfsgt	Word_SetPair@pPair& (0+255),b
 17007  0134F2  D00E               	goto	l776
 17008                           
 17009                           ; BSR set to: 0
 17010                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 17011  0134F4  0E01               	movlw	1
 17012  0134F6  25C2               	addwf	Word_SetPair@pInput& (0+255),w,b
 17013  0134F8  6FBE               	movwf	Byte_SetPair@pInput& (0+255),b
 17014  0134FA  0E00               	movlw	0
 17015  0134FC  21C3               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 17016  0134FE  6FBF               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 17017  013500  51C4               	movf	Word_SetPair@pPair& (0+255),w,b
 17018  013502  0FFC               	addlw	252
 17019  013504  6FC0               	movwf	Byte_SetPair@pPair& (0+255),b
 17020  013506  C0C5  F0C1         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17021  01350A  EC29  F09C         	call	_Byte_SetPair	;wreg free
 17022  01350E  0012               	return	
 17023  013510                     l776:
 17024                           
 17025                           ;Types.c: 153: else
 17026                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 17027  013510  C0C2  F0BE         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 17028  013514  C0C3  F0BF         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 17029  013518  C0C4  F0C0         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 17030  01351C  C0C5  F0C1         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17031  013520  EC29  F09C         	call	_Byte_SetPair	;wreg free
 17032  013524  0012               	return	
 17033  013526                     __end_of_Word_SetPair:
 17034                           	opt stack 0
 17035                           tosu	equ	0xFFF
 17036                           tosh	equ	0xFFE
 17037                           tosl	equ	0xFFD
 17038                           pclath	equ	0xFFA
 17039                           tblptru	equ	0xFF8
 17040                           tblptrh	equ	0xFF7
 17041                           tblptrl	equ	0xFF6
 17042                           tablat	equ	0xFF5
 17043                           prodh	equ	0xFF4
 17044                           prodl	equ	0xFF3
 17045                           intcon	equ	0xFF2
 17046                           postinc0	equ	0xFEE
 17047                           wreg	equ	0xFE8
 17048                           indf1	equ	0xFE7
 17049                           postdec1	equ	0xFE5
 17050                           fsr1h	equ	0xFE2
 17051                           fsr1l	equ	0xFE1
 17052                           indf2	equ	0xFDF
 17053                           postinc2	equ	0xFDE
 17054                           postdec2	equ	0xFDD
 17055                           plusw2	equ	0xFDB
 17056                           fsr2h	equ	0xFDA
 17057                           fsr2l	equ	0xFD9
 17058                           status	equ	0xFD8
 17059                           
 17060 ;; *************** function _Byte_SetPair *****************
 17061 ;; Defined at:
 17062 ;;		line 83 in file "Library/Types.c"
 17063 ;; Parameters:    Size  Location     Type
 17064 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17065 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 17066 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 17067 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 17068 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 17069 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 17070 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 17071 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 17072 ;;		 -> NULL(0), 
 17073 ;;  pPair           1   13[BANK0 ] unsigned char 
 17074 ;;  pValue          1   14[BANK0 ] unsigned char 
 17075 ;; Auto vars:     Size  Location     Type
 17076 ;;		None
 17077 ;; Return value:  Size  Location     Type
 17078 ;;                  1    wreg      void 
 17079 ;; Registers used:
 17080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17081 ;; Tracked objects:
 17082 ;;		On entry : 0/0
 17083 ;;		On exit  : 0/0
 17084 ;;		Unchanged: 0/0
 17085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17086 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17089 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17090 ;;Total ram usage:        4 bytes
 17091 ;; Hardware stack levels used:    1
 17092 ;; Hardware stack levels required when called:    8
 17093 ;; This function calls:
 17094 ;;		_Byte_SetZone
 17095 ;; This function is called by:
 17096 ;;		_Word_SetPair
 17097 ;;		_Port_SetPairType
 17098 ;;		_Port_SetPair
 17099 ;; This function uses a non-reentrant model
 17100 ;;
 17101                           
 17102                           	psect	text96
 17103  013852                     __ptext96:
 17104                           	opt stack 0
 17105  013852                     _Byte_SetPair:
 17106                           	opt stack 19
 17107                           
 17108                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 17109                           
 17110                           ;incstack = 0
 17111  013852  C0BE  F0B3         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 17112  013856  C0BF  F0B4         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 17113  01385A  0E04               	movlw	4
 17114  01385C  0100               	movlb	0	; () banked
 17115  01385E  6FB5               	movwf	Byte_SetZone@pMax& (0+255),b
 17116  013860  C0C0  F0B6         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 17117  013864  0E02               	movlw	2
 17118  013866  6FB7               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17119  013868  C0C1  F0B8         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 17120  01386C  EC40  F092         	call	_Byte_SetZone	;wreg free
 17121  013870  0012               	return		;funcret
 17122  013872                     __end_of_Byte_SetPair:
 17123                           	opt stack 0
 17124                           tosu	equ	0xFFF
 17125                           tosh	equ	0xFFE
 17126                           tosl	equ	0xFFD
 17127                           pclath	equ	0xFFA
 17128                           tblptru	equ	0xFF8
 17129                           tblptrh	equ	0xFF7
 17130                           tblptrl	equ	0xFF6
 17131                           tablat	equ	0xFF5
 17132                           prodh	equ	0xFF4
 17133                           prodl	equ	0xFF3
 17134                           intcon	equ	0xFF2
 17135                           postinc0	equ	0xFEE
 17136                           wreg	equ	0xFE8
 17137                           indf1	equ	0xFE7
 17138                           postdec1	equ	0xFE5
 17139                           fsr1h	equ	0xFE2
 17140                           fsr1l	equ	0xFE1
 17141                           indf2	equ	0xFDF
 17142                           postinc2	equ	0xFDE
 17143                           postdec2	equ	0xFDD
 17144                           plusw2	equ	0xFDB
 17145                           fsr2h	equ	0xFDA
 17146                           fsr2l	equ	0xFD9
 17147                           status	equ	0xFD8
 17148                           
 17149 ;; *************** function _Port_CheckQuadType *****************
 17150 ;; Defined at:
 17151 ;;		line 126 in file "Library/Port.c"
 17152 ;; Parameters:    Size  Location     Type
 17153 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 17154 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17155 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17156 ;;  pQuad           1   49[BANK0 ] enum E6776
 17157 ;;  pDrive          1   50[BANK0 ] enum E6469
 17158 ;; Auto vars:     Size  Location     Type
 17159 ;;  Output          1   53[BANK0 ] enum E6475
 17160 ;;  Pair2           1   52[BANK0 ] enum E6760
 17161 ;;  Pair1           1   51[BANK0 ] enum E6760
 17162 ;; Return value:  Size  Location     Type
 17163 ;;                  1    wreg      enum E6475
 17164 ;; Registers used:
 17165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17166 ;; Tracked objects:
 17167 ;;		On entry : 0/0
 17168 ;;		On exit  : 0/0
 17169 ;;		Unchanged: 0/0
 17170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17171 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17172 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17174 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17175 ;;Total ram usage:        7 bytes
 17176 ;; Hardware stack levels used:    1
 17177 ;; Hardware stack levels required when called:   12
 17178 ;; This function calls:
 17179 ;;		_Port_CheckPairType
 17180 ;; This function is called by:
 17181 ;;		_Port_CheckPortType
 17182 ;;		_Port_SetQuadType
 17183 ;; This function uses a non-reentrant model
 17184 ;;
 17185                           
 17186                           	psect	text97
 17187  013180                     __ptext97:
 17188                           	opt stack 0
 17189  013180                     _Port_CheckQuadType:
 17190                           	opt stack 15
 17191                           
 17192                           ;Port.c: 128: ePinError Output = ePinErrorState;
 17193                           
 17194                           ;incstack = 0
 17195  013180  0E05               	movlw	5
 17196  013182  0100               	movlb	0	; () banked
 17197  013184  6FE8               	movwf	Port_CheckQuadType@Output& (0+255),b
 17198                           
 17199                           ; BSR set to: 0
 17200                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 17201  013186  51E4               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17202  013188  0D02               	mullw	2
 17203  01318A  CFF3 F0E6          	movff	prodl,Port_CheckQuadType@Pair1
 17204                           
 17205                           ; BSR set to: 0
 17206                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 17207  01318E  51E4               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17208  013190  0D02               	mullw	2
 17209  013192  28F3               	incf	prodl,w,c
 17210  013194  6FE7               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 17211                           
 17212                           ; BSR set to: 0
 17213                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 17214  013196  C0E2  F0D9         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17215  01319A  C0E3  F0DA         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17216  01319E  C0E6  F0DB         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 17217  0131A2  C0E5  F0DC         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 17218  0131A6  ECE8  F096         	call	_Port_CheckPairType	;wreg free
 17219  0131AA  0100               	movlb	0	; () banked
 17220  0131AC  6FE8               	movwf	Port_CheckQuadType@Output& (0+255),b
 17221  0131AE  51E8               	movf	Port_CheckQuadType@Output& (0+255),w,b
 17222  0131B0  A4D8               	btfss	status,2,c
 17223  0131B2  D00C               	goto	l393
 17224                           
 17225                           ; BSR set to: 0
 17226                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 17227  0131B4  C0E2  F0D9         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17228  0131B8  C0E3  F0DA         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17229  0131BC  C0E7  F0DB         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 17230  0131C0  C0E5  F0DC         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 17231  0131C4  ECE8  F096         	call	_Port_CheckPairType	;wreg free
 17232  0131C8  0100               	movlb	0	; () banked
 17233  0131CA  6FE8               	movwf	Port_CheckQuadType@Output& (0+255),b
 17234  0131CC                     l393:
 17235                           
 17236                           ; BSR set to: 0
 17237                           ;Port.c: 136: return Output;
 17238                           
 17239                           ; BSR set to: 0
 17240  0131CC  51E8               	movf	Port_CheckQuadType@Output& (0+255),w,b
 17241  0131CE  0012               	return	
 17242  0131D0                     __end_of_Port_CheckQuadType:
 17243                           	opt stack 0
 17244                           tosu	equ	0xFFF
 17245                           tosh	equ	0xFFE
 17246                           tosl	equ	0xFFD
 17247                           pclath	equ	0xFFA
 17248                           tblptru	equ	0xFF8
 17249                           tblptrh	equ	0xFF7
 17250                           tblptrl	equ	0xFF6
 17251                           tablat	equ	0xFF5
 17252                           prodh	equ	0xFF4
 17253                           prodl	equ	0xFF3
 17254                           intcon	equ	0xFF2
 17255                           postinc0	equ	0xFEE
 17256                           wreg	equ	0xFE8
 17257                           indf1	equ	0xFE7
 17258                           postdec1	equ	0xFE5
 17259                           fsr1h	equ	0xFE2
 17260                           fsr1l	equ	0xFE1
 17261                           indf2	equ	0xFDF
 17262                           postinc2	equ	0xFDE
 17263                           postdec2	equ	0xFDD
 17264                           plusw2	equ	0xFDB
 17265                           fsr2h	equ	0xFDA
 17266                           fsr2l	equ	0xFD9
 17267                           status	equ	0xFD8
 17268                           
 17269 ;; *************** function _Port_CheckPairType *****************
 17270 ;; Defined at:
 17271 ;;		line 112 in file "Library/Port.c"
 17272 ;; Parameters:    Size  Location     Type
 17273 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 17274 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17275 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17276 ;;  pPair           1   40[BANK0 ] enum E6760
 17277 ;;  pDrive          1   41[BANK0 ] enum E6469
 17278 ;; Auto vars:     Size  Location     Type
 17279 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 17280 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17281 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17282 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17283 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17284 ;;  Output          1   44[BANK0 ] enum E6475
 17285 ;;  Pin2            1   43[BANK0 ] enum E6750
 17286 ;;  Pin1            1   42[BANK0 ] enum E6750
 17287 ;; Return value:  Size  Location     Type
 17288 ;;                  1    wreg      enum E6475
 17289 ;; Registers used:
 17290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17291 ;; Tracked objects:
 17292 ;;		On entry : 0/0
 17293 ;;		On exit  : 0/0
 17294 ;;		Unchanged: 0/0
 17295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17296 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17297 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17299 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17300 ;;Total ram usage:        9 bytes
 17301 ;; Hardware stack levels used:    1
 17302 ;; Hardware stack levels required when called:   11
 17303 ;; This function calls:
 17304 ;;		_PortProperty_Valid
 17305 ;; This function is called by:
 17306 ;;		_Port_CheckQuadType
 17307 ;;		_Port_SetPairType
 17308 ;; This function uses a non-reentrant model
 17309 ;;
 17310                           
 17311                           	psect	text98
 17312  012DD0                     __ptext98:
 17313                           	opt stack 0
 17314  012DD0                     _Port_CheckPairType:
 17315                           	opt stack 15
 17316                           
 17317                           ;Port.c: 114: ePinError Output = ePinErrorState;
 17318                           
 17319                           ; BSR set to: 0
 17320                           ;incstack = 0
 17321  012DD0  0E05               	movlw	5
 17322  012DD2  0100               	movlb	0	; () banked
 17323  012DD4  6FDF               	movwf	Port_CheckPairType@Output& (0+255),b
 17324                           
 17325                           ; BSR set to: 0
 17326                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 17327  012DD6  C0D9  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 17328  012DDA  C0DA  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 17329  012DDE  CFDE F0E0          	movff	postinc2,Port_CheckPairType@Props
 17330  012DE2  CFDD F0E1          	movff	postdec2,Port_CheckPairType@Props+1
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 17334  012DE6  51DB               	movf	Port_CheckPairType@pPair& (0+255),w,b
 17335  012DE8  0D02               	mullw	2
 17336  012DEA  CFF3 F0DD          	movff	prodl,Port_CheckPairType@Pin1
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 17340  012DEE  51DB               	movf	Port_CheckPairType@pPair& (0+255),w,b
 17341  012DF0  0D02               	mullw	2
 17342  012DF2  28F3               	incf	prodl,w,c
 17343  012DF4  6FDE               	movwf	Port_CheckPairType@Pin2& (0+255),b
 17344                           
 17345                           ; BSR set to: 0
 17346                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 17347  012DF6  C0E0  F0C2         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 17348  012DFA  C0E1  F0C3         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 17349  012DFE  C0DC  F0C4         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 17350  012E02  C0DD  F0C5         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 17351  012E06  EC84  F096         	call	_PortProperty_Valid	;wreg free
 17352  012E0A  0100               	movlb	0	; () banked
 17353  012E0C  6FDF               	movwf	Port_CheckPairType@Output& (0+255),b
 17354  012E0E  51DF               	movf	Port_CheckPairType@Output& (0+255),w,b
 17355  012E10  A4D8               	btfss	status,2,c
 17356  012E12  D00C               	goto	l389
 17357                           
 17358                           ; BSR set to: 0
 17359                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 17360  012E14  C0E0  F0C2         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 17361  012E18  C0E1  F0C3         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 17362  012E1C  C0DC  F0C4         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 17363  012E20  C0DE  F0C5         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 17364  012E24  EC84  F096         	call	_PortProperty_Valid	;wreg free
 17365  012E28  0100               	movlb	0	; () banked
 17366  012E2A  6FDF               	movwf	Port_CheckPairType@Output& (0+255),b
 17367  012E2C                     l389:
 17368                           
 17369                           ; BSR set to: 0
 17370                           ;Port.c: 124: return Output;
 17371                           
 17372                           ; BSR set to: 0
 17373  012E2C  51DF               	movf	Port_CheckPairType@Output& (0+255),w,b
 17374  012E2E  0012               	return	
 17375  012E30                     __end_of_Port_CheckPairType:
 17376                           	opt stack 0
 17377                           tosu	equ	0xFFF
 17378                           tosh	equ	0xFFE
 17379                           tosl	equ	0xFFD
 17380                           pclath	equ	0xFFA
 17381                           tblptru	equ	0xFF8
 17382                           tblptrh	equ	0xFF7
 17383                           tblptrl	equ	0xFF6
 17384                           tablat	equ	0xFF5
 17385                           prodh	equ	0xFF4
 17386                           prodl	equ	0xFF3
 17387                           intcon	equ	0xFF2
 17388                           postinc0	equ	0xFEE
 17389                           wreg	equ	0xFE8
 17390                           indf1	equ	0xFE7
 17391                           postdec1	equ	0xFE5
 17392                           fsr1h	equ	0xFE2
 17393                           fsr1l	equ	0xFE1
 17394                           indf2	equ	0xFDF
 17395                           postinc2	equ	0xFDE
 17396                           postdec2	equ	0xFDD
 17397                           plusw2	equ	0xFDB
 17398                           fsr2h	equ	0xFDA
 17399                           fsr2l	equ	0xFD9
 17400                           status	equ	0xFD8
 17401                           
 17402 ;; *************** function _PortProperty_Valid *****************
 17403 ;; Defined at:
 17404 ;;		line 220 in file "Library/Types.c"
 17405 ;; Parameters:    Size  Location     Type
 17406 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 17407 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17408 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17409 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17410 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17411 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 17412 ;;  pPin            1   18[BANK0 ] unsigned char 
 17413 ;; Auto vars:     Size  Location     Type
 17414 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 17415 ;;  Pair            1   37[BANK0 ] enum E6469
 17416 ;; Return value:  Size  Location     Type
 17417 ;;                  1    wreg      enum E6475
 17418 ;; Registers used:
 17419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17420 ;; Tracked objects:
 17421 ;;		On entry : 0/0
 17422 ;;		On exit  : 0/0
 17423 ;;		Unchanged: 0/0
 17424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17425 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17426 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17428 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17429 ;;Total ram usage:       23 bytes
 17430 ;; Hardware stack levels used:    1
 17431 ;; Hardware stack levels required when called:   10
 17432 ;; This function calls:
 17433 ;;		_Word_GetPair
 17434 ;; This function is called by:
 17435 ;;		_Port_CheckPairType
 17436 ;;		_Port_SetPinType
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           	psect	text99
 17441  012D08                     __ptext99:
 17442                           	opt stack 0
 17443  012D08                     _PortProperty_Valid:
 17444                           	opt stack 15
 17445                           
 17446                           ;Types.c: 222: ePinDrive Pair;
 17447                           ;Types.c: 223: const ePinError Errors[4][4] =
 17448                           ;Types.c: 224: {
 17449                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 17450                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 17451                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 17452                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 17453                           ;Types.c: 230: };
 17454                           
 17455                           ; BSR set to: 0
 17456                           ;incstack = 0
 17457  012D08  0EAD               	movlw	low PortProperty_Valid@F6830
 17458  012D0A  6EF6               	movwf	tblptrl,c
 17459  012D0C                     	if	1	;There is more than 1 active tblptr byte
 17460  012D0C  0EFC               	movlw	high PortProperty_Valid@F6830
 17461  012D0E  6EF7               	movwf	tblptrh,c
 17462  012D10                     	endif
 17463  012D10                     	if	1	;There are 3 active tblptr bytes
 17464  012D10  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 17465  012D12  6EF8               	movwf	tblptru,c
 17466  012D14                     	endif
 17467  012D14  EE20  F0C8         	lfsr	2,PortProperty_Valid@Errors
 17468  012D18  0E0F               	movlw	15
 17469  012D1A                     u7790:
 17470  012D1A  0009               	tblrd		*+
 17471  012D1C  CFF5 FFDE          	movff	tablat,postinc2
 17472  012D20  06E8               	decf	wreg,f,c
 17473  012D22  E2FB               	bc	u7790
 17474                           
 17475                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 17476  012D24  C0C2  F0BF         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 17477  012D28  C0C3  F0C0         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 17478  012D2C  C0C5  F0C1         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 17479  012D30  EC19  F09B         	call	_Word_GetPair	;wreg free
 17480  012D34  0100               	movlb	0	; () banked
 17481  012D36  6FD8               	movwf	PortProperty_Valid@Pair& (0+255),b
 17482                           
 17483                           ; BSR set to: 0
 17484                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 17485  012D38  0E04               	movlw	4
 17486  012D3A  61C4               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 17487  012D3C  D017               	goto	l819
 17488                           
 17489                           ; BSR set to: 0
 17490  012D3E  0E04               	movlw	4
 17491  012D40  61D8               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 17492  012D42  D014               	goto	l819
 17493                           
 17494                           ; BSR set to: 0
 17495                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 17496  012D44  51C4               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 17497  012D46  0D04               	mullw	4
 17498  012D48  0EC8               	movlw	low PortProperty_Valid@Errors
 17499  012D4A  6FC6               	movwf	??_PortProperty_Valid& (0+255),b
 17500  012D4C  0E00               	movlw	high PortProperty_Valid@Errors
 17501  012D4E  6FC7               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 17502  012D50  50F3               	movf	prodl,w,c
 17503  012D52  27C6               	addwf	??_PortProperty_Valid& (0+255),f,b
 17504  012D54  50F4               	movf	prodh,w,c
 17505  012D56  23C7               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 17506  012D58  51D8               	movf	PortProperty_Valid@Pair& (0+255),w,b
 17507  012D5A  0D01               	mullw	1
 17508  012D5C  50F3               	movf	prodl,w,c
 17509  012D5E  25C6               	addwf	??_PortProperty_Valid& (0+255),w,b
 17510  012D60  6ED9               	movwf	fsr2l,c
 17511  012D62  50F4               	movf	prodh,w,c
 17512  012D64  21C7               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 17513  012D66  6EDA               	movwf	fsr2h,c
 17514  012D68  50DF               	movf	indf2,w,c
 17515                           
 17516                           ; BSR set to: 0
 17517  012D6A  0012               	return	
 17518  012D6C                     l819:
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;Types.c: 237: return ePinErrorState;
 17522                           
 17523                           ; BSR set to: 0
 17524  012D6C  0E05               	movlw	5
 17525  012D6E  0012               	return	
 17526  012D70                     __end_of_PortProperty_Valid:
 17527                           	opt stack 0
 17528                           tosu	equ	0xFFF
 17529                           tosh	equ	0xFFE
 17530                           tosl	equ	0xFFD
 17531                           pclath	equ	0xFFA
 17532                           tblptru	equ	0xFF8
 17533                           tblptrh	equ	0xFF7
 17534                           tblptrl	equ	0xFF6
 17535                           tablat	equ	0xFF5
 17536                           prodh	equ	0xFF4
 17537                           prodl	equ	0xFF3
 17538                           intcon	equ	0xFF2
 17539                           postinc0	equ	0xFEE
 17540                           wreg	equ	0xFE8
 17541                           indf1	equ	0xFE7
 17542                           postdec1	equ	0xFE5
 17543                           fsr1h	equ	0xFE2
 17544                           fsr1l	equ	0xFE1
 17545                           indf2	equ	0xFDF
 17546                           postinc2	equ	0xFDE
 17547                           postdec2	equ	0xFDD
 17548                           plusw2	equ	0xFDB
 17549                           fsr2h	equ	0xFDA
 17550                           fsr2l	equ	0xFD9
 17551                           status	equ	0xFD8
 17552                           
 17553 ;; *************** function _Word_GetPair *****************
 17554 ;; Defined at:
 17555 ;;		line 156 in file "Library/Types.c"
 17556 ;; Parameters:    Size  Location     Type
 17557 ;;  pInput          2   12[BANK0 ] PTR struct Word
 17558 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17559 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17560 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17561 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17562 ;;  pPair           1   14[BANK0 ] unsigned char 
 17563 ;; Auto vars:     Size  Location     Type
 17564 ;;		None
 17565 ;; Return value:  Size  Location     Type
 17566 ;;                  1    wreg      unsigned char 
 17567 ;; Registers used:
 17568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17569 ;; Tracked objects:
 17570 ;;		On entry : 0/0
 17571 ;;		On exit  : 0/0
 17572 ;;		Unchanged: 0/0
 17573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17577 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17578 ;;Total ram usage:        3 bytes
 17579 ;; Hardware stack levels used:    1
 17580 ;; Hardware stack levels required when called:    9
 17581 ;; This function calls:
 17582 ;;		_Byte_GetPair
 17583 ;; This function is called by:
 17584 ;;		_Port_Init
 17585 ;;		_Port_SetPin
 17586 ;;		_Port_Set
 17587 ;;		_PortProperty_Valid
 17588 ;;		_Port_SetPair
 17589 ;;		_Port_SetQuad
 17590 ;; This function uses a non-reentrant model
 17591 ;;
 17592                           
 17593                           	psect	text100
 17594  013632                     __ptext100:
 17595                           	opt stack 0
 17596  013632                     _Word_GetPair:
 17597                           	opt stack 15
 17598                           
 17599                           ;Types.c: 158: if (pPair >= 4)
 17600                           
 17601                           ; BSR set to: 0
 17602                           ;incstack = 0
 17603  013632  0E03               	movlw	3
 17604  013634  0100               	movlb	0	; () banked
 17605  013636  65C1               	cpfsgt	Word_GetPair@pPair& (0+255),b
 17606  013638  D00C               	goto	l781
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 17610  01363A  0E01               	movlw	1
 17611  01363C  25BF               	addwf	Word_GetPair@pInput& (0+255),w,b
 17612  01363E  6FBC               	movwf	Byte_GetPair@pInput& (0+255),b
 17613  013640  0E00               	movlw	0
 17614  013642  21C0               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 17615  013644  6FBD               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 17616  013646  51C1               	movf	Word_GetPair@pPair& (0+255),w,b
 17617  013648  0FFC               	addlw	252
 17618  01364A  6FBE               	movwf	Byte_GetPair@pPair& (0+255),b
 17619  01364C  EC76  F09C         	call	_Byte_GetPair	;wreg free
 17620  013650  0012               	return	
 17621  013652                     l781:
 17622                           
 17623                           ;Types.c: 160: else
 17624                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 17625  013652  C0BF  F0BC         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 17626  013656  C0C0  F0BD         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 17627  01365A  C0C1  F0BE         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 17628  01365E  EC76  F09C         	call	_Byte_GetPair	;wreg free
 17629  013662  0012               	return	
 17630  013664                     __end_of_Word_GetPair:
 17631                           	opt stack 0
 17632                           tosu	equ	0xFFF
 17633                           tosh	equ	0xFFE
 17634                           tosl	equ	0xFFD
 17635                           pclath	equ	0xFFA
 17636                           tblptru	equ	0xFF8
 17637                           tblptrh	equ	0xFF7
 17638                           tblptrl	equ	0xFF6
 17639                           tablat	equ	0xFF5
 17640                           prodh	equ	0xFF4
 17641                           prodl	equ	0xFF3
 17642                           intcon	equ	0xFF2
 17643                           postinc0	equ	0xFEE
 17644                           wreg	equ	0xFE8
 17645                           indf1	equ	0xFE7
 17646                           postdec1	equ	0xFE5
 17647                           fsr1h	equ	0xFE2
 17648                           fsr1l	equ	0xFE1
 17649                           indf2	equ	0xFDF
 17650                           postinc2	equ	0xFDE
 17651                           postdec2	equ	0xFDD
 17652                           plusw2	equ	0xFDB
 17653                           fsr2h	equ	0xFDA
 17654                           fsr2l	equ	0xFD9
 17655                           status	equ	0xFD8
 17656                           
 17657 ;; *************** function _Byte_GetPair *****************
 17658 ;; Defined at:
 17659 ;;		line 87 in file "Library/Types.c"
 17660 ;; Parameters:    Size  Location     Type
 17661 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 17662 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 17663 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 17664 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 17665 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 17666 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 17667 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 17668 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 17669 ;;		 -> NULL(0), 
 17670 ;;  pPair           1   11[BANK0 ] unsigned char 
 17671 ;; Auto vars:     Size  Location     Type
 17672 ;;		None
 17673 ;; Return value:  Size  Location     Type
 17674 ;;                  1    wreg      unsigned char 
 17675 ;; Registers used:
 17676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17677 ;; Tracked objects:
 17678 ;;		On entry : 0/0
 17679 ;;		On exit  : 0/0
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17682 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17685 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17686 ;;Total ram usage:        3 bytes
 17687 ;; Hardware stack levels used:    1
 17688 ;; Hardware stack levels required when called:    8
 17689 ;; This function calls:
 17690 ;;		_Byte_GetZone
 17691 ;; This function is called by:
 17692 ;;		_Word_GetPair
 17693 ;; This function uses a non-reentrant model
 17694 ;;
 17695                           
 17696                           	psect	text101
 17697  0138EC                     __ptext101:
 17698                           	opt stack 0
 17699  0138EC                     _Byte_GetPair:
 17700                           	opt stack 15
 17701                           
 17702                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 17703                           
 17704                           ;incstack = 0
 17705  0138EC  C0BC  F0B3         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 17706  0138F0  C0BD  F0B4         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 17707  0138F4  0E04               	movlw	4
 17708  0138F6  0100               	movlb	0	; () banked
 17709  0138F8  6FB5               	movwf	Byte_GetZone@pMax& (0+255),b
 17710  0138FA  C0BE  F0B6         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 17711  0138FE  0E02               	movlw	2
 17712  013900  6FB7               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 17713  013902  EC92  F094         	call	_Byte_GetZone	;wreg free
 17714  013906  0012               	return	
 17715  013908                     __end_of_Byte_GetPair:
 17716                           	opt stack 0
 17717                           tosu	equ	0xFFF
 17718                           tosh	equ	0xFFE
 17719                           tosl	equ	0xFFD
 17720                           pclath	equ	0xFFA
 17721                           tblptru	equ	0xFF8
 17722                           tblptrh	equ	0xFF7
 17723                           tblptrl	equ	0xFF6
 17724                           tablat	equ	0xFF5
 17725                           prodh	equ	0xFF4
 17726                           prodl	equ	0xFF3
 17727                           intcon	equ	0xFF2
 17728                           postinc0	equ	0xFEE
 17729                           wreg	equ	0xFE8
 17730                           indf1	equ	0xFE7
 17731                           postdec1	equ	0xFE5
 17732                           fsr1h	equ	0xFE2
 17733                           fsr1l	equ	0xFE1
 17734                           indf2	equ	0xFDF
 17735                           postinc2	equ	0xFDE
 17736                           postdec2	equ	0xFDD
 17737                           plusw2	equ	0xFDB
 17738                           fsr2h	equ	0xFDA
 17739                           fsr2l	equ	0xFD9
 17740                           status	equ	0xFD8
 17741                           
 17742 ;; *************** function _Byte_GetZone *****************
 17743 ;; Defined at:
 17744 ;;		line 64 in file "Library/Types.c"
 17745 ;; Parameters:    Size  Location     Type
 17746 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17747 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 17748 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 17749 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 17750 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 17751 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 17752 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 17753 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 17754 ;;		 -> NULL(0), 
 17755 ;;  pMax            1    2[BANK0 ] unsigned char 
 17756 ;;  pChunk          1    3[BANK0 ] unsigned char 
 17757 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 17758 ;; Auto vars:     Size  Location     Type
 17759 ;;  Output          1    8[BANK0 ] unsigned char 
 17760 ;;  Offset          1    7[BANK0 ] unsigned char 
 17761 ;;  MASK            1    6[BANK0 ] unsigned char 
 17762 ;; Return value:  Size  Location     Type
 17763 ;;                  1    wreg      unsigned char 
 17764 ;; Registers used:
 17765 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 17766 ;; Tracked objects:
 17767 ;;		On entry : 0/0
 17768 ;;		On exit  : 0/0
 17769 ;;		Unchanged: 0/0
 17770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17771 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17772 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17774 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17775 ;;Total ram usage:        9 bytes
 17776 ;; Hardware stack levels used:    1
 17777 ;; Hardware stack levels required when called:    7
 17778 ;; This function calls:
 17779 ;;		Nothing
 17780 ;; This function is called by:
 17781 ;;		_Byte_GetPair
 17782 ;;		_Byte_GetTriple
 17783 ;;		_Byte_GetQuad
 17784 ;; This function uses a non-reentrant model
 17785 ;;
 17786                           
 17787                           	psect	text102
 17788  012924                     __ptext102:
 17789                           	opt stack 0
 17790  012924                     _Byte_GetZone:
 17791                           	opt stack 15
 17792                           
 17793                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 17794                           
 17795                           ;incstack = 0
 17796  012924  C0B3  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 17797  012928  C0B4  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 17798  01292C  0E00               	movlw	low (__mediumconst shr (0+16))
 17799  01292E  6EF8               	movwf	tblptru,c
 17800  012930  0E0F               	movlw	(high __ramtop+-1)
 17801  012932  64F7               	cpfsgt	tblptrh,c
 17802  012934  D003               	bra	u7757
 17803  012936  0008               	tblrd		*
 17804  012938  50F5               	movf	tablat,w,c
 17805  01293A  D005               	bra	u7750
 17806  01293C                     u7757:
 17807  01293C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17808  012940  CFF7 FFEA          	movff	tblptrh,fsr0h
 17809  012944  50EF               	movf	indf0,w,c
 17810  012946                     u7750:
 17811  012946  0100               	movlb	0	; () banked
 17812  012948  6FBB               	movwf	Byte_GetZone@Output& (0+255),b
 17813                           
 17814                           ; BSR set to: 0
 17815                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 17816  01294A  51B7               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 17817  01294C  0D01               	mullw	1
 17818  01294E  0EC7               	movlw	low _MASKS
 17819  012950  24F3               	addwf	prodl,w,c
 17820  012952  6EF6               	movwf	tblptrl,c
 17821  012954  0EFC               	movlw	high _MASKS
 17822  012956  20F4               	addwfc	prodh,w,c
 17823  012958  6EF7               	movwf	tblptrh,c
 17824  01295A                     	if	1	;There are 3 active tblptr bytes
 17825  01295A  6AF8               	clrf	tblptru,c
 17826  01295C  0E00               	movlw	low (__mediumconst shr (0+16))
 17827  01295E  22F8               	addwfc	tblptru,f,c
 17828  012960                     	endif
 17829  012960  0008               	tblrd		*
 17830  012962  CFF5 F0B9          	movff	tablat,Byte_GetZone@MASK
 17831                           
 17832                           ; BSR set to: 0
 17833                           ;Types.c: 68: UINT8 Offset = 0;
 17834  012966  0E00               	movlw	0
 17835  012968  6FBA               	movwf	Byte_GetZone@Offset& (0+255),b
 17836                           
 17837                           ;Types.c: 70: while (pChunk >= pMax)
 17838  01296A  D003               	goto	l732
 17839  01296C                     
 17840                           ; BSR set to: 0
 17841                           ;Types.c: 71: {
 17842                           ;Types.c: 72: pChunk -= pMax;
 17843                           
 17844                           ; BSR set to: 0
 17845  01296C  51B5               	movf	Byte_GetZone@pMax& (0+255),w,b
 17846  01296E  5FB6               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 17847                           
 17848                           ; BSR set to: 0
 17849                           ;Types.c: 73: Offset += 1;
 17850  012970  2BBA               	incf	Byte_GetZone@Offset& (0+255),f,b
 17851  012972                     l732:
 17852                           
 17853                           ; BSR set to: 0
 17854                           
 17855                           ; BSR set to: 0
 17856  012972  51B5               	movf	Byte_GetZone@pMax& (0+255),w,b
 17857  012974  5DB6               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 17858  012976  B0D8               	btfsc	status,0,c
 17859  012978  D7F9               	goto	l733
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;Types.c: 74: }
 17863                           ;Types.c: 75: pChunk *= pChunkSize;
 17864                           
 17865                           ; BSR set to: 0
 17866  01297A  51B7               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 17867  01297C  03B6               	mulwf	Byte_GetZone@pChunk& (0+255),b
 17868  01297E  50F3               	movf	prodl,w,c
 17869  012980  6FB6               	movwf	Byte_GetZone@pChunk& (0+255),b
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;Types.c: 76: pChunk += Offset;
 17873  012982  51BA               	movf	Byte_GetZone@Offset& (0+255),w,b
 17874  012984  27B6               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 17875                           
 17876                           ; BSR set to: 0
 17877                           ;Types.c: 78: Output >>= pChunk;
 17878  012986  29B6               	incf	Byte_GetZone@pChunk& (0+255),w,b
 17879  012988  6FB8               	movwf	??_Byte_GetZone& (0+255),b
 17880  01298A  D002               	goto	u7770
 17881  01298C                     u7775:
 17882  01298C  90D8               	bcf	status,0,c
 17883  01298E  33BB               	rrcf	Byte_GetZone@Output& (0+255),f,b
 17884  012990                     u7770:
 17885  012990  2FB8               	decfsz	??_Byte_GetZone& (0+255),f,b
 17886  012992  D7FC               	goto	u7775
 17887                           
 17888                           ;Types.c: 79: Output &= MASK;
 17889  012994  0100               	movlb	0	; () banked
 17890  012996  51B9               	movf	Byte_GetZone@MASK& (0+255),w,b
 17891  012998  17BB               	andwf	Byte_GetZone@Output& (0+255),f,b
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;Types.c: 80: return Output;
 17895  01299A  51BB               	movf	Byte_GetZone@Output& (0+255),w,b
 17896  01299C  0012               	return	
 17897  01299E                     __end_of_Byte_GetZone:
 17898                           	opt stack 0
 17899                           tosu	equ	0xFFF
 17900                           tosh	equ	0xFFE
 17901                           tosl	equ	0xFFD
 17902                           pclath	equ	0xFFA
 17903                           tblptru	equ	0xFF8
 17904                           tblptrh	equ	0xFF7
 17905                           tblptrl	equ	0xFF6
 17906                           tablat	equ	0xFF5
 17907                           prodh	equ	0xFF4
 17908                           prodl	equ	0xFF3
 17909                           intcon	equ	0xFF2
 17910                           indf0	equ	0xFEF
 17911                           postinc0	equ	0xFEE
 17912                           fsr0h	equ	0xFEA
 17913                           fsr0l	equ	0xFE9
 17914                           wreg	equ	0xFE8
 17915                           indf1	equ	0xFE7
 17916                           postdec1	equ	0xFE5
 17917                           fsr1h	equ	0xFE2
 17918                           fsr1l	equ	0xFE1
 17919                           indf2	equ	0xFDF
 17920                           postinc2	equ	0xFDE
 17921                           postdec2	equ	0xFDD
 17922                           plusw2	equ	0xFDB
 17923                           fsr2h	equ	0xFDA
 17924                           fsr2l	equ	0xFD9
 17925                           status	equ	0xFD8
 17926                           
 17927 ;; *************** function _Byte_SetQuad *****************
 17928 ;; Defined at:
 17929 ;;		line 101 in file "Library/Types.c"
 17930 ;; Parameters:    Size  Location     Type
 17931 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17932 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 17933 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17934 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17935 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17936 ;;		 -> NULL(0), 
 17937 ;;  pQuad           1   13[BANK0 ] unsigned char 
 17938 ;;  pValue          1   14[BANK0 ] unsigned char 
 17939 ;; Auto vars:     Size  Location     Type
 17940 ;;		None
 17941 ;; Return value:  Size  Location     Type
 17942 ;;                  1    wreg      void 
 17943 ;; Registers used:
 17944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17945 ;; Tracked objects:
 17946 ;;		On entry : 0/0
 17947 ;;		On exit  : 0/0
 17948 ;;		Unchanged: 0/0
 17949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17953 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;Total ram usage:        4 bytes
 17955 ;; Hardware stack levels used:    1
 17956 ;; Hardware stack levels required when called:    8
 17957 ;; This function calls:
 17958 ;;		_Byte_SetZone
 17959 ;; This function is called by:
 17960 ;;		_Port_SetQuadType
 17961 ;;		_SPI_Init
 17962 ;;		_SPI_MinSpeed
 17963 ;;		_SPI_MaxSpeed
 17964 ;;		_Port_SetQuad
 17965 ;;		_Word_SetQuad
 17966 ;;		_I2C_Init
 17967 ;; This function uses a non-reentrant model
 17968 ;;
 17969                           
 17970                           	psect	text103
 17971  013872                     __ptext103:
 17972                           	opt stack 0
 17973  013872                     _Byte_SetQuad:
 17974                           	opt stack 20
 17975                           
 17976                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 17977                           
 17978                           ; BSR set to: 0
 17979                           ;incstack = 0
 17980  013872  C0BE  F0B3         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 17981  013876  C0BF  F0B4         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 17982  01387A  0E02               	movlw	2
 17983  01387C  0100               	movlb	0	; () banked
 17984  01387E  6FB5               	movwf	Byte_SetZone@pMax& (0+255),b
 17985  013880  C0C0  F0B6         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 17986  013884  0E04               	movlw	4
 17987  013886  6FB7               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17988  013888  C0C1  F0B8         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 17989  01388C  EC40  F092         	call	_Byte_SetZone	;wreg free
 17990  013890  0012               	return		;funcret
 17991  013892                     __end_of_Byte_SetQuad:
 17992                           	opt stack 0
 17993                           tosu	equ	0xFFF
 17994                           tosh	equ	0xFFE
 17995                           tosl	equ	0xFFD
 17996                           pclath	equ	0xFFA
 17997                           tblptru	equ	0xFF8
 17998                           tblptrh	equ	0xFF7
 17999                           tblptrl	equ	0xFF6
 18000                           tablat	equ	0xFF5
 18001                           prodh	equ	0xFF4
 18002                           prodl	equ	0xFF3
 18003                           intcon	equ	0xFF2
 18004                           indf0	equ	0xFEF
 18005                           postinc0	equ	0xFEE
 18006                           fsr0h	equ	0xFEA
 18007                           fsr0l	equ	0xFE9
 18008                           wreg	equ	0xFE8
 18009                           indf1	equ	0xFE7
 18010                           postdec1	equ	0xFE5
 18011                           fsr1h	equ	0xFE2
 18012                           fsr1l	equ	0xFE1
 18013                           indf2	equ	0xFDF
 18014                           postinc2	equ	0xFDE
 18015                           postdec2	equ	0xFDD
 18016                           plusw2	equ	0xFDB
 18017                           fsr2h	equ	0xFDA
 18018                           fsr2l	equ	0xFD9
 18019                           status	equ	0xFD8
 18020                           
 18021 ;; *************** function _Byte_SetZone *****************
 18022 ;; Defined at:
 18023 ;;		line 47 in file "Library/Types.c"
 18024 ;; Parameters:    Size  Location     Type
 18025 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18026 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18027 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18028 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 18029 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 18030 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18031 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18032 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18033 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18034 ;;  pMax            1    2[BANK0 ] unsigned char 
 18035 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18036 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18037 ;;  pValue          1    5[BANK0 ] unsigned char 
 18038 ;; Auto vars:     Size  Location     Type
 18039 ;;  MASK            1   10[BANK0 ] unsigned char 
 18040 ;;  Offset          1    9[BANK0 ] unsigned char 
 18041 ;; Return value:  Size  Location     Type
 18042 ;;                  1    wreg      void 
 18043 ;; Registers used:
 18044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18045 ;; Tracked objects:
 18046 ;;		On entry : 0/0
 18047 ;;		On exit  : 0/0
 18048 ;;		Unchanged: 0/0
 18049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18050 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18052 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18053 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18054 ;;Total ram usage:       11 bytes
 18055 ;; Hardware stack levels used:    1
 18056 ;; Hardware stack levels required when called:    7
 18057 ;; This function calls:
 18058 ;;		Nothing
 18059 ;; This function is called by:
 18060 ;;		_Byte_SetPair
 18061 ;;		_Byte_SetQuad
 18062 ;;		_Byte_SetTriple
 18063 ;; This function uses a non-reentrant model
 18064 ;;
 18065                           
 18066                           	psect	text104
 18067  012480                     __ptext104:
 18068                           	opt stack 0
 18069  012480                     _Byte_SetZone:
 18070                           	opt stack 19
 18071                           
 18072                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 18073                           
 18074                           ;incstack = 0
 18075  012480  0100               	movlb	0	; () banked
 18076  012482  51B7               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18077  012484  0D01               	mullw	1
 18078  012486  0EC7               	movlw	low _MASKS
 18079  012488  24F3               	addwf	prodl,w,c
 18080  01248A  6EF6               	movwf	tblptrl,c
 18081  01248C  0EFC               	movlw	high _MASKS
 18082  01248E  20F4               	addwfc	prodh,w,c
 18083  012490  6EF7               	movwf	tblptrh,c
 18084  012492                     	if	1	;There are 3 active tblptr bytes
 18085  012492  6AF8               	clrf	tblptru,c
 18086  012494  0E00               	movlw	low (__mediumconst shr (0+16))
 18087  012496  22F8               	addwfc	tblptru,f,c
 18088  012498                     	endif
 18089  012498  0008               	tblrd		*
 18090  01249A  CFF5 F0BD          	movff	tablat,Byte_SetZone@MASK
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;Types.c: 50: UINT8 Offset = 0;
 18094  01249E  0E00               	movlw	0
 18095  0124A0  6FBC               	movwf	Byte_SetZone@Offset& (0+255),b
 18096                           
 18097                           ;Types.c: 52: while (pChunk >= pMax)
 18098  0124A2  D003               	goto	l726
 18099  0124A4                     
 18100                           ; BSR set to: 0
 18101                           ;Types.c: 53: {
 18102                           ;Types.c: 54: pChunk -= pMax;
 18103                           
 18104                           ; BSR set to: 0
 18105  0124A4  51B5               	movf	Byte_SetZone@pMax& (0+255),w,b
 18106  0124A6  5FB6               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;Types.c: 55: Offset += 1;
 18110  0124A8  2BBC               	incf	Byte_SetZone@Offset& (0+255),f,b
 18111  0124AA                     l726:
 18112                           
 18113                           ; BSR set to: 0
 18114                           
 18115                           ; BSR set to: 0
 18116  0124AA  51B5               	movf	Byte_SetZone@pMax& (0+255),w,b
 18117  0124AC  5DB6               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 18118  0124AE  B0D8               	btfsc	status,0,c
 18119  0124B0  D7F9               	goto	l727
 18120                           
 18121                           ; BSR set to: 0
 18122                           ;Types.c: 56: }
 18123                           ;Types.c: 57: pChunk *= pChunkSize;
 18124                           
 18125                           ; BSR set to: 0
 18126  0124B2  51B7               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18127  0124B4  03B6               	mulwf	Byte_SetZone@pChunk& (0+255),b
 18128  0124B6  50F3               	movf	prodl,w,c
 18129  0124B8  6FB6               	movwf	Byte_SetZone@pChunk& (0+255),b
 18130                           
 18131                           ; BSR set to: 0
 18132                           ;Types.c: 58: pChunk += Offset;
 18133  0124BA  51BC               	movf	Byte_SetZone@Offset& (0+255),w,b
 18134  0124BC  27B6               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 18135                           
 18136                           ; BSR set to: 0
 18137                           ;Types.c: 60: pValue &= MASK;
 18138  0124BE  51BD               	movf	Byte_SetZone@MASK& (0+255),w,b
 18139  0124C0  17B8               	andwf	Byte_SetZone@pValue& (0+255),f,b
 18140                           
 18141                           ; BSR set to: 0
 18142                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 18143  0124C2  C0B6  F0B9         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18144  0124C6  C0BD  F0BA         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 18145  0124CA  2BB9               	incf	??_Byte_SetZone& (0+255),f,b
 18146  0124CC  D002               	goto	u7854
 18147  0124CE                     u7855:
 18148  0124CE  90D8               	bcf	status,0,c
 18149  0124D0  37BA               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18150  0124D2                     u7854:
 18151  0124D2  2FB9               	decfsz	??_Byte_SetZone& (0+255),f,b
 18152  0124D4  D7FC               	goto	u7855
 18153  0124D6  0100               	movlb	0	; () banked
 18154  0124D8  51BA               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18155  0124DA  0AFF               	xorlw	255
 18156  0124DC  6FBB               	movwf	(??_Byte_SetZone+2)& (0+255),b
 18157  0124DE  C0B3  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18158  0124E2  C0B4  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18159  0124E6  51BB               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 18160  0124E8  16DF               	andwf	indf2,f,c
 18161                           
 18162                           ; BSR set to: 0
 18163                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 18164  0124EA  C0B6  F0B9         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18165  0124EE  C0B8  F0BA         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 18166  0124F2  2BB9               	incf	??_Byte_SetZone& (0+255),f,b
 18167  0124F4  D002               	goto	u7864
 18168  0124F6                     u7865:
 18169  0124F6  90D8               	bcf	status,0,c
 18170  0124F8  37BA               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18171  0124FA                     u7864:
 18172  0124FA  2FB9               	decfsz	??_Byte_SetZone& (0+255),f,b
 18173  0124FC  D7FC               	goto	u7865
 18174  0124FE  C0B3  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18175  012502  C0B4  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18176  012506  0100               	movlb	0	; () banked
 18177  012508  51BA               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18178  01250A  12DF               	iorwf	indf2,f,c
 18179                           
 18180                           ; BSR set to: 0
 18181  01250C  0012               	return		;funcret
 18182  01250E                     __end_of_Byte_SetZone:
 18183                           	opt stack 0
 18184                           tosu	equ	0xFFF
 18185                           tosh	equ	0xFFE
 18186                           tosl	equ	0xFFD
 18187                           pclath	equ	0xFFA
 18188                           tblptru	equ	0xFF8
 18189                           tblptrh	equ	0xFF7
 18190                           tblptrl	equ	0xFF6
 18191                           tablat	equ	0xFF5
 18192                           prodh	equ	0xFF4
 18193                           prodl	equ	0xFF3
 18194                           intcon	equ	0xFF2
 18195                           indf0	equ	0xFEF
 18196                           postinc0	equ	0xFEE
 18197                           fsr0h	equ	0xFEA
 18198                           fsr0l	equ	0xFE9
 18199                           wreg	equ	0xFE8
 18200                           indf1	equ	0xFE7
 18201                           postdec1	equ	0xFE5
 18202                           fsr1h	equ	0xFE2
 18203                           fsr1l	equ	0xFE1
 18204                           indf2	equ	0xFDF
 18205                           postinc2	equ	0xFDE
 18206                           postdec2	equ	0xFDD
 18207                           plusw2	equ	0xFDB
 18208                           fsr2h	equ	0xFDA
 18209                           fsr2l	equ	0xFD9
 18210                           status	equ	0xFD8
 18211                           
 18212 ;; *************** function _Console_Render *****************
 18213 ;; Defined at:
 18214 ;;		line 377 in file "Library/Console.c"
 18215 ;; Parameters:    Size  Location     Type
 18216 ;;		None
 18217 ;; Auto vars:     Size  Location     Type
 18218 ;;  lCursor         4   38[BANK0 ] struct Point
 18219 ;;  y               1   43[BANK0 ] unsigned char 
 18220 ;;  x               1   42[BANK0 ] unsigned char 
 18221 ;;  temp            1   37[BANK0 ] unsigned char 
 18222 ;;  Temp            2    0        unsigned short 
 18223 ;; Return value:  Size  Location     Type
 18224 ;;                  1    wreg      void 
 18225 ;; Registers used:
 18226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18227 ;; Tracked objects:
 18228 ;;		On entry : 0/0
 18229 ;;		On exit  : 0/0
 18230 ;;		Unchanged: 0/0
 18231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18233 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18235 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18236 ;;Total ram usage:        9 bytes
 18237 ;; Hardware stack levels used:    1
 18238 ;; Hardware stack levels required when called:   11
 18239 ;; This function calls:
 18240 ;;		_Console_MakeField
 18241 ;;		_LCD_DrawField
 18242 ;;		_LCD_FillRectangle
 18243 ;; This function is called by:
 18244 ;;		_main
 18245 ;;		_Sensor_Observe2
 18246 ;;		_Closest_Object2
 18247 ;;		_Sensor_Observe
 18248 ;;		_Closest_Object
 18249 ;; This function uses a non-reentrant model
 18250 ;;
 18251                           
 18252                           	psect	text105
 18253  010CB2                     __ptext105:
 18254                           	opt stack 0
 18255  010CB2                     _Console_Render:
 18256                           	opt stack 19
 18257                           
 18258                           ;Console.c: 379: Colour Temp;
 18259                           ;Console.c: 380: if (change)
 18260                           
 18261                           ; BSR set to: 0
 18262                           ;incstack = 0
 18263  010CB2  0100               	movlb	0	; () banked
 18264  010CB4  51FF               	movf	_change& (0+255),w,b
 18265  010CB6  B4D8               	btfsc	status,2,c
 18266  010CB8  0012               	return	
 18267                           
 18268                           ; BSR set to: 0
 18269                           ;Console.c: 381: {
 18270                           ;Console.c: 382: UINT8 x, y, temp;
 18271                           ;Console.c: 383: Point lCursor = {6,6};
 18272  010CBA  C1E8  F0D9         	movff	Console_Render@F6956,Console_Render@lCursor
 18273  010CBE  C1E9  F0DA         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 18274  010CC2  C1EA  F0DB         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 18275  010CC6  C1EB  F0DC         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 18276                           
 18277                           ; BSR set to: 0
 18278                           ;Console.c: 385: if (clearall)
 18279  010CCA  5190               	movf	_clearall& (0+255),w,b
 18280  010CCC  B4D8               	btfsc	status,2,c
 18281  010CCE  D004               	goto	l1056
 18282                           
 18283                           ; BSR set to: 0
 18284                           ;Console.c: 386: {
 18285                           ;Console.c: 389: temp = lBufferY;
 18286  010CD0  C08E  F0D8         	movff	_lBufferY,Console_Render@temp
 18287                           
 18288                           ; BSR set to: 0
 18289                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 18290  010CD4  0E0F               	movlw	15
 18291  010CD6  6F8E               	movwf	_lBufferY& (0+255),b
 18292  010CD8                     l1056:
 18293                           
 18294                           ; BSR set to: 0
 18295                           ;Console.c: 391: }
 18296                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 18297  010CD8  0E00               	movlw	0
 18298  010CDA  6FDE               	movwf	Console_Render@y& (0+255),b
 18299  010CDC  D0B9               	goto	l1057
 18300  010CDE                     
 18301                           ; BSR set to: 0
 18302                           ;Console.c: 394: {
 18303                           ;Console.c: 395: gForecolour = lCBuffer[y];
 18304                           
 18305                           ; BSR set to: 0
 18306  010CDE  51DE               	movf	Console_Render@y& (0+255),w,b
 18307  010CE0  0D02               	mullw	2
 18308  010CE2  0E8C               	movlw	low _lCBuffer
 18309  010CE4  24F3               	addwf	prodl,w,c
 18310  010CE6  6ED9               	movwf	fsr2l,c
 18311  010CE8  0E02               	movlw	high _lCBuffer
 18312  010CEA  20F4               	addwfc	prodh,w,c
 18313  010CEC  6EDA               	movwf	fsr2h,c
 18314  010CEE  CFDE F0FD          	movff	postinc2,_gForecolour
 18315  010CF2  CFDD F0FE          	movff	postdec2,_gForecolour+1
 18316                           
 18317                           ; BSR set to: 0
 18318                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 18319  010CF6  0E00               	movlw	0
 18320  010CF8  6FDD               	movwf	Console_Render@x& (0+255),b
 18321  010CFA                     l13130:
 18322                           
 18323                           ; BSR set to: 0
 18324  010CFA  0E13               	movlw	19
 18325  010CFC  65DD               	cpfsgt	Console_Render@x& (0+255),b
 18326  010CFE  D001               	goto	l1059
 18327  010D00  D09E               	goto	u9390
 18328  010D02                     l1059:
 18329                           
 18330                           ; BSR set to: 0
 18331                           ;Console.c: 397: {
 18332                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 18333                           
 18334                           ; BSR set to: 0
 18335  010D02  51DE               	movf	Console_Render@y& (0+255),w,b
 18336  010D04  0D14               	mullw	20
 18337  010D06  0EF0               	movlw	low _lBuffer
 18338  010D08  6FD6               	movwf	??_Console_Render& (0+255),b
 18339  010D0A  0E02               	movlw	high _lBuffer
 18340  010D0C  6FD7               	movwf	(??_Console_Render+1)& (0+255),b
 18341  010D0E  50F3               	movf	prodl,w,c
 18342  010D10  27D6               	addwf	??_Console_Render& (0+255),f,b
 18343  010D12  50F4               	movf	prodh,w,c
 18344  010D14  23D7               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18345  010D16  51DD               	movf	Console_Render@x& (0+255),w,b
 18346  010D18  0D01               	mullw	1
 18347  010D1A  50F3               	movf	prodl,w,c
 18348  010D1C  25D6               	addwf	??_Console_Render& (0+255),w,b
 18349  010D1E  6ED9               	movwf	fsr2l,c
 18350  010D20  50F4               	movf	prodh,w,c
 18351  010D22  21D7               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18352  010D24  6EDA               	movwf	fsr2h,c
 18353  010D26  AEDF               	btfss	indf2,7,c
 18354  010D28  D083               	goto	l1063
 18355                           
 18356                           ; BSR set to: 0
 18357                           ;Console.c: 399: {
 18358                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 18359  010D2A  51DE               	movf	Console_Render@y& (0+255),w,b
 18360  010D2C  0D14               	mullw	20
 18361  010D2E  0EF0               	movlw	low _lBuffer
 18362  010D30  6FD6               	movwf	??_Console_Render& (0+255),b
 18363  010D32  0E02               	movlw	high _lBuffer
 18364  010D34  6FD7               	movwf	(??_Console_Render+1)& (0+255),b
 18365  010D36  50F3               	movf	prodl,w,c
 18366  010D38  27D6               	addwf	??_Console_Render& (0+255),f,b
 18367  010D3A  50F4               	movf	prodh,w,c
 18368  010D3C  23D7               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18369  010D3E  51DD               	movf	Console_Render@x& (0+255),w,b
 18370  010D40  0D01               	mullw	1
 18371  010D42  50F3               	movf	prodl,w,c
 18372  010D44  25D6               	addwf	??_Console_Render& (0+255),w,b
 18373  010D46  6ED9               	movwf	fsr2l,c
 18374  010D48  50F4               	movf	prodh,w,c
 18375  010D4A  21D7               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18376  010D4C  6EDA               	movwf	fsr2h,c
 18377  010D4E  0E7F               	movlw	127
 18378  010D50  16DF               	andwf	indf2,f,c
 18379                           
 18380                           ;Console.c: 401: if (lBuffer[y][x])
 18381  010D52  51DE               	movf	Console_Render@y& (0+255),w,b
 18382  010D54  0D14               	mullw	20
 18383  010D56  0EF0               	movlw	low _lBuffer
 18384  010D58  6FD6               	movwf	??_Console_Render& (0+255),b
 18385  010D5A  0E02               	movlw	high _lBuffer
 18386  010D5C  6FD7               	movwf	(??_Console_Render+1)& (0+255),b
 18387  010D5E  50F3               	movf	prodl,w,c
 18388  010D60  27D6               	addwf	??_Console_Render& (0+255),f,b
 18389  010D62  50F4               	movf	prodh,w,c
 18390  010D64  23D7               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18391  010D66  51DD               	movf	Console_Render@x& (0+255),w,b
 18392  010D68  0D01               	mullw	1
 18393  010D6A  50F3               	movf	prodl,w,c
 18394  010D6C  25D6               	addwf	??_Console_Render& (0+255),w,b
 18395  010D6E  6ED9               	movwf	fsr2l,c
 18396  010D70  50F4               	movf	prodh,w,c
 18397  010D72  21D7               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18398  010D74  6EDA               	movwf	fsr2h,c
 18399  010D76  50DF               	movf	indf2,w,c
 18400  010D78  B4D8               	btfsc	status,2,c
 18401  010D7A  D043               	goto	l1062
 18402                           
 18403                           ; BSR set to: 0
 18404                           ;Console.c: 402: {
 18405                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 18406  010D7C  C07F  F0BC         	movff	_gBackcolour,LCD_FillRectangle@pColour
 18407  010D80  C080  F0BD         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 18408  010D84  C0D9  F0BE         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 18409  010D88  C0DA  F0BF         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 18410  010D8C  C0DB  F0C0         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 18411  010D90  C0DC  F0C1         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 18412  010D94  C1F0  F0C2         	movff	_gCharSize,LCD_FillRectangle@pSize
 18413  010D98  C1F1  F0C3         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 18414  010D9C  C1F2  F0C4         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 18415  010DA0  C1F3  F0C5         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 18416  010DA4  EC1D  F098         	call	_LCD_FillRectangle	;wreg free
 18417                           
 18418                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 18419  010DA8  0100               	movlb	0	; () banked
 18420  010DAA  51DE               	movf	Console_Render@y& (0+255),w,b
 18421  010DAC  0D14               	mullw	20
 18422  010DAE  0EF0               	movlw	low _lBuffer
 18423  010DB0  6FD6               	movwf	??_Console_Render& (0+255),b
 18424  010DB2  0E02               	movlw	high _lBuffer
 18425  010DB4  6FD7               	movwf	(??_Console_Render+1)& (0+255),b
 18426  010DB6  50F3               	movf	prodl,w,c
 18427  010DB8  27D6               	addwf	??_Console_Render& (0+255),f,b
 18428  010DBA  50F4               	movf	prodh,w,c
 18429  010DBC  23D7               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18430  010DBE  51DD               	movf	Console_Render@x& (0+255),w,b
 18431  010DC0  0D01               	mullw	1
 18432  010DC2  50F3               	movf	prodl,w,c
 18433  010DC4  25D6               	addwf	??_Console_Render& (0+255),w,b
 18434  010DC6  6ED9               	movwf	fsr2l,c
 18435  010DC8  50F4               	movf	prodh,w,c
 18436  010DCA  21D7               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18437  010DCC  6EDA               	movwf	fsr2h,c
 18438  010DCE  50DF               	movf	indf2,w,c
 18439  010DD0  ECBF  F090         	call	_Console_MakeField
 18440  010DD4  C0B8  F0C5         	movff	?_Console_MakeField,LCD_DrawField@pField
 18441  010DD8  C0B9  F0C6         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 18442  010DDC  C0D9  F0C7         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 18443  010DE0  C0DA  F0C8         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 18444  010DE4  C0DB  F0C9         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 18445  010DE8  C0DC  F0CA         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 18446  010DEC  C1F0  F0CB         	movff	_gCharSize,LCD_DrawField@pSize
 18447  010DF0  C1F1  F0CC         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 18448  010DF4  C1F2  F0CD         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 18449  010DF8  C1F3  F0CE         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 18450  010DFC  ECD8  F093         	call	_LCD_DrawField	;wreg free
 18451                           
 18452                           ;Console.c: 405: }
 18453  010E00  D017               	goto	l1063
 18454  010E02                     l1062:
 18455                           
 18456                           ;Console.c: 406: else
 18457                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 18458  010E02  0E00               	movlw	0
 18459  010E04  0100               	movlb	0	; () banked
 18460  010E06  6FBD               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 18461  010E08  0E00               	movlw	0
 18462  010E0A  6FBC               	movwf	LCD_FillRectangle@pColour& (0+255),b
 18463  010E0C  C0D9  F0BE         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 18464  010E10  C0DA  F0BF         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 18465  010E14  C0DB  F0C0         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 18466  010E18  C0DC  F0C1         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 18467  010E1C  C1F0  F0C2         	movff	_gCharSize,LCD_FillRectangle@pSize
 18468  010E20  C1F1  F0C3         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 18469  010E24  C1F2  F0C4         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 18470  010E28  C1F3  F0C5         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 18471  010E2C  EC1D  F098         	call	_LCD_FillRectangle	;wreg free
 18472  010E30                     l1063:
 18473                           
 18474                           ;Console.c: 408: }
 18475                           ;Console.c: 409: lCursor.x += (5 + 1);
 18476  010E30  0E06               	movlw	6
 18477  010E32  0100               	movlb	0	; () banked
 18478  010E34  27D9               	addwf	Console_Render@lCursor& (0+255),f,b
 18479  010E36  0E00               	movlw	0
 18480  010E38  23DA               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 18481                           
 18482                           ; BSR set to: 0
 18483  010E3A  2BDD               	incf	Console_Render@x& (0+255),f,b
 18484  010E3C  D75E               	goto	l13130
 18485  010E3E                     u9390:
 18486                           
 18487                           ; BSR set to: 0
 18488                           ;Console.c: 410: }
 18489                           ;Console.c: 411: lCursor.y += (7 + 1);
 18490                           
 18491                           ; BSR set to: 0
 18492  010E3E  0E08               	movlw	8
 18493  010E40  27DB               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 18494  010E42  0E00               	movlw	0
 18495  010E44  23DC               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 18496                           
 18497                           ; BSR set to: 0
 18498                           ;Console.c: 412: lCursor.x = 6;
 18499  010E46  0E00               	movlw	0
 18500  010E48  6FDA               	movwf	(Console_Render@lCursor+1)& (0+255),b
 18501  010E4A  0E06               	movlw	6
 18502  010E4C  6FD9               	movwf	Console_Render@lCursor& (0+255),b
 18503                           
 18504                           ; BSR set to: 0
 18505  010E4E  2BDE               	incf	Console_Render@y& (0+255),f,b
 18506  010E50                     l1057:
 18507                           
 18508                           ; BSR set to: 0
 18509                           
 18510                           ; BSR set to: 0
 18511  010E50  51DE               	movf	Console_Render@y& (0+255),w,b
 18512  010E52  5D8E               	subwf	_lBufferY& (0+255),w,b
 18513  010E54  B0D8               	btfsc	status,0,c
 18514  010E56  D743               	goto	l1058
 18515                           
 18516                           ; BSR set to: 0
 18517                           ;Console.c: 413: }
 18518                           ;Console.c: 415: if (clearall)
 18519                           
 18520                           ; BSR set to: 0
 18521  010E58  5190               	movf	_clearall& (0+255),w,b
 18522  010E5A  B4D8               	btfsc	status,2,c
 18523  010E5C  0012               	return	
 18524                           
 18525                           ; BSR set to: 0
 18526                           ;Console.c: 416: {
 18527                           ;Console.c: 417: clearall = 0;
 18528  010E5E  0E00               	movlw	0
 18529  010E60  6F90               	movwf	_clearall& (0+255),b
 18530                           
 18531                           ; BSR set to: 0
 18532                           ;Console.c: 418: lBufferY = temp;
 18533  010E62  C0D8  F08E         	movff	Console_Render@temp,_lBufferY
 18534                           
 18535                           ; BSR set to: 0
 18536  010E66  0012               	return	
 18537  010E68                     __end_of_Console_Render:
 18538                           	opt stack 0
 18539                           tosu	equ	0xFFF
 18540                           tosh	equ	0xFFE
 18541                           tosl	equ	0xFFD
 18542                           pclath	equ	0xFFA
 18543                           tblptru	equ	0xFF8
 18544                           tblptrh	equ	0xFF7
 18545                           tblptrl	equ	0xFF6
 18546                           tablat	equ	0xFF5
 18547                           prodh	equ	0xFF4
 18548                           prodl	equ	0xFF3
 18549                           intcon	equ	0xFF2
 18550                           indf0	equ	0xFEF
 18551                           postinc0	equ	0xFEE
 18552                           fsr0h	equ	0xFEA
 18553                           fsr0l	equ	0xFE9
 18554                           wreg	equ	0xFE8
 18555                           indf1	equ	0xFE7
 18556                           postdec1	equ	0xFE5
 18557                           fsr1h	equ	0xFE2
 18558                           fsr1l	equ	0xFE1
 18559                           indf2	equ	0xFDF
 18560                           postinc2	equ	0xFDE
 18561                           postdec2	equ	0xFDD
 18562                           plusw2	equ	0xFDB
 18563                           fsr2h	equ	0xFDA
 18564                           fsr2l	equ	0xFD9
 18565                           status	equ	0xFD8
 18566                           
 18567 ;; *************** function _LCD_FillRectangle *****************
 18568 ;; Defined at:
 18569 ;;		line 318 in file "Library/LCD.c"
 18570 ;; Parameters:    Size  Location     Type
 18571 ;;  pColour         2    9[BANK0 ] unsigned short 
 18572 ;;  pPoint          4   11[BANK0 ] struct Point
 18573 ;;  pSize           4   15[BANK0 ] struct Point
 18574 ;; Auto vars:     Size  Location     Type
 18575 ;;  j               1   22[BANK0 ] unsigned char 
 18576 ;;  i               1   21[BANK0 ] unsigned char 
 18577 ;; Return value:  Size  Location     Type
 18578 ;;                  1    wreg      void 
 18579 ;; Registers used:
 18580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18581 ;; Tracked objects:
 18582 ;;		On entry : 0/0
 18583 ;;		On exit  : 0/0
 18584 ;;		Unchanged: 0/0
 18585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18586 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18590 ;;Total ram usage:       14 bytes
 18591 ;; Hardware stack levels used:    1
 18592 ;; Hardware stack levels required when called:   10
 18593 ;; This function calls:
 18594 ;;		_LCD_Word_Write
 18595 ;;		_Set_Addr_Window
 18596 ;; This function is called by:
 18597 ;;		_Console_Render
 18598 ;;		_Console_ClearLine
 18599 ;; This function uses a non-reentrant model
 18600 ;;
 18601                           
 18602                           	psect	text106
 18603  01303A                     __ptext106:
 18604                           	opt stack 0
 18605  01303A                     _LCD_FillRectangle:
 18606                           	opt stack 19
 18607                           
 18608                           ;LCD.c: 320: UINT8 i = 0x00;
 18609                           
 18610                           ; BSR set to: 0
 18611                           ;incstack = 0
 18612  01303A  0E00               	movlw	0
 18613  01303C  0100               	movlb	0	; () banked
 18614  01303E  6FC8               	movwf	LCD_FillRectangle@i& (0+255),b
 18615                           
 18616                           ;LCD.c: 321: UINT8 j = 0x00;
 18617  013040  0E00               	movlw	0
 18618  013042  6FC9               	movwf	LCD_FillRectangle@j& (0+255),b
 18619                           
 18620                           ; BSR set to: 0
 18621                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 18622  013044  C0C0  F0B8         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 18623  013048  51BE               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 18624  01304A  25C2               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 18625  01304C  6FC6               	movwf	??_LCD_FillRectangle& (0+255),b
 18626  01304E  05C6               	decf	??_LCD_FillRectangle& (0+255),w,b
 18627  013050  6FB9               	movwf	Set_Addr_Window@xe& (0+255),b
 18628  013052  51C0               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 18629  013054  25C4               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 18630  013056  6FC7               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 18631  013058  05C7               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 18632  01305A  6FBA               	movwf	Set_Addr_Window@ye& (0+255),b
 18633  01305C  51BE               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 18634  01305E  EC60  F091         	call	_Set_Addr_Window
 18635                           
 18636                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 18637  013062  C0C4  F0C9         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 18638  013066  0100               	movlb	0	; () banked
 18639  013068  51C9               	movf	LCD_FillRectangle@j& (0+255),w,b
 18640  01306A  B4D8               	btfsc	status,2,c
 18641  01306C  0012               	return	
 18642                           
 18643                           ; BSR set to: 0
 18644                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 18645                           
 18646                           ; BSR set to: 0
 18647  01306E  C0C2  F0C8         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 18648  013072                     l12736:
 18649                           
 18650                           ; BSR set to: 0
 18651  013072  51C8               	movf	LCD_FillRectangle@i& (0+255),w,b
 18652  013074  B4D8               	btfsc	status,2,c
 18653  013076  D009               	goto	u8870
 18654                           
 18655                           ; BSR set to: 0
 18656                           ;LCD.c: 333: LCD_Word_Write(pColour);
 18657                           
 18658                           ; BSR set to: 0
 18659                           
 18660                           ; BSR set to: 0
 18661  013078  C0BC  F0B8         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 18662  01307C  C0BD  F0B9         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 18663  013080  EC84  F09C         	call	_LCD_Word_Write	;wreg free
 18664  013084  0100               	movlb	0	; () banked
 18665  013086  07C8               	decf	LCD_FillRectangle@i& (0+255),f,b
 18666  013088  D7F4               	goto	l12736
 18667  01308A                     u8870:
 18668                           
 18669                           ; BSR set to: 0
 18670                           
 18671                           ; BSR set to: 0
 18672  01308A  07C9               	decf	LCD_FillRectangle@j& (0+255),f,b
 18673  01308C  D7ED               	goto	L9
 18674  01308E                     __end_of_LCD_FillRectangle:
 18675                           	opt stack 0
 18676                           tosu	equ	0xFFF
 18677                           tosh	equ	0xFFE
 18678                           tosl	equ	0xFFD
 18679                           pclath	equ	0xFFA
 18680                           tblptru	equ	0xFF8
 18681                           tblptrh	equ	0xFF7
 18682                           tblptrl	equ	0xFF6
 18683                           tablat	equ	0xFF5
 18684                           prodh	equ	0xFF4
 18685                           prodl	equ	0xFF3
 18686                           intcon	equ	0xFF2
 18687                           indf0	equ	0xFEF
 18688                           postinc0	equ	0xFEE
 18689                           fsr0h	equ	0xFEA
 18690                           fsr0l	equ	0xFE9
 18691                           wreg	equ	0xFE8
 18692                           indf1	equ	0xFE7
 18693                           postdec1	equ	0xFE5
 18694                           fsr1h	equ	0xFE2
 18695                           fsr1l	equ	0xFE1
 18696                           indf2	equ	0xFDF
 18697                           postinc2	equ	0xFDE
 18698                           postdec2	equ	0xFDD
 18699                           plusw2	equ	0xFDB
 18700                           fsr2h	equ	0xFDA
 18701                           fsr2l	equ	0xFD9
 18702                           status	equ	0xFD8
 18703                           
 18704 ;; *************** function _LCD_DrawField *****************
 18705 ;; Defined at:
 18706 ;;		line 393 in file "Library/LCD.c"
 18707 ;; Parameters:    Size  Location     Type
 18708 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 18709 ;;		 -> Console_MakeField@Fill(70), 
 18710 ;;  pPoint          4   20[BANK0 ] struct Point
 18711 ;;  pSize           4   24[BANK0 ] struct Point
 18712 ;; Auto vars:     Size  Location     Type
 18713 ;;  count           2   30[BANK0 ] unsigned short 
 18714 ;;  i               1   34[BANK0 ] unsigned char 
 18715 ;;  ymax            1   33[BANK0 ] unsigned char 
 18716 ;;  xmax            1   32[BANK0 ] unsigned char 
 18717 ;; Return value:  Size  Location     Type
 18718 ;;                  1    wreg      void 
 18719 ;; Registers used:
 18720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18721 ;; Tracked objects:
 18722 ;;		On entry : 0/0
 18723 ;;		On exit  : 0/0
 18724 ;;		Unchanged: 0/0
 18725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18726 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18727 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18729 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18730 ;;Total ram usage:       17 bytes
 18731 ;; Hardware stack levels used:    1
 18732 ;; Hardware stack levels required when called:   10
 18733 ;; This function calls:
 18734 ;;		_LCD_Word_Write
 18735 ;;		_Set_Addr_Window
 18736 ;;		___wmul
 18737 ;; This function is called by:
 18738 ;;		_Console_Render
 18739 ;; This function uses a non-reentrant model
 18740 ;;
 18741                           
 18742                           	psect	text107
 18743  0127B0                     __ptext107:
 18744                           	opt stack 0
 18745  0127B0                     _LCD_DrawField:
 18746                           	opt stack 19
 18747                           
 18748                           ;LCD.c: 396: UINT8 i = 0x00;
 18749                           
 18750                           ; BSR set to: 0
 18751                           ;incstack = 0
 18752  0127B0  0E00               	movlw	0
 18753  0127B2  0100               	movlb	0	; () banked
 18754  0127B4  6FD5               	movwf	LCD_DrawField@i& (0+255),b
 18755                           
 18756                           ; BSR set to: 0
 18757                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 18758  0127B6  51C7               	movf	LCD_DrawField@pPoint& (0+255),w,b
 18759  0127B8  25CB               	addwf	LCD_DrawField@pSize& (0+255),w,b
 18760  0127BA  6FD3               	movwf	LCD_DrawField@xmax& (0+255),b
 18761                           
 18762                           ; BSR set to: 0
 18763                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 18764  0127BC  51C9               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 18765  0127BE  25CD               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 18766  0127C0  6FD4               	movwf	LCD_DrawField@ymax& (0+255),b
 18767                           
 18768                           ; BSR set to: 0
 18769                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 18770  0127C2  C0CD  F0B3         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 18771  0127C6  C0CE  F0B4         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 18772  0127CA  C0CB  F0B5         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 18773  0127CE  C0CC  F0B6         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 18774  0127D2  ECB9  F09B         	call	___wmul	;wreg free
 18775  0127D6  C0B3  F0D1         	movff	?___wmul,LCD_DrawField@count
 18776  0127DA  C0B4  F0D2         	movff	?___wmul+1,LCD_DrawField@count+1
 18777                           
 18778                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 18779  0127DE  C0C9  F0B8         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 18780  0127E2  0100               	movlb	0	; () banked
 18781  0127E4  05D3               	decf	LCD_DrawField@xmax& (0+255),w,b
 18782  0127E6  6FB9               	movwf	Set_Addr_Window@xe& (0+255),b
 18783  0127E8  05D4               	decf	LCD_DrawField@ymax& (0+255),w,b
 18784  0127EA  6FBA               	movwf	Set_Addr_Window@ye& (0+255),b
 18785  0127EC  51C7               	movf	LCD_DrawField@pPoint& (0+255),w,b
 18786  0127EE  EC60  F091         	call	_Set_Addr_Window
 18787                           
 18788                           ;LCD.c: 403: for(i = 0; i < count; i++)
 18789  0127F2  0E00               	movlw	0
 18790  0127F4  0100               	movlb	0	; () banked
 18791  0127F6  6FD5               	movwf	LCD_DrawField@i& (0+255),b
 18792  0127F8  D010               	goto	l183
 18793  0127FA                     
 18794                           ; BSR set to: 0
 18795                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 18796                           
 18797                           ; BSR set to: 0
 18798  0127FA  51D5               	movf	LCD_DrawField@i& (0+255),w,b
 18799  0127FC  0D02               	mullw	2
 18800  0127FE  50F3               	movf	prodl,w,c
 18801  012800  25C5               	addwf	LCD_DrawField@pField& (0+255),w,b
 18802  012802  6ED9               	movwf	fsr2l,c
 18803  012804  50F4               	movf	prodh,w,c
 18804  012806  21C6               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 18805  012808  6EDA               	movwf	fsr2h,c
 18806  01280A  CFDE F0B8          	movff	postinc2,LCD_Word_Write@value
 18807  01280E  CFDD F0B9          	movff	postdec2,LCD_Word_Write@value+1
 18808  012812  EC84  F09C         	call	_LCD_Word_Write	;wreg free
 18809  012816  0100               	movlb	0	; () banked
 18810  012818  2BD5               	incf	LCD_DrawField@i& (0+255),f,b
 18811  01281A                     l183:
 18812                           
 18813                           ; BSR set to: 0
 18814                           
 18815                           ; BSR set to: 0
 18816  01281A  51D5               	movf	LCD_DrawField@i& (0+255),w,b
 18817  01281C  6FCF               	movwf	??_LCD_DrawField& (0+255),b
 18818  01281E  6BD0               	clrf	(??_LCD_DrawField+1)& (0+255),b
 18819  012820  51D1               	movf	LCD_DrawField@count& (0+255),w,b
 18820  012822  5DCF               	subwf	??_LCD_DrawField& (0+255),w,b
 18821  012824  51D2               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 18822  012826  59D0               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 18823  012828  B0D8               	btfsc	status,0,c
 18824  01282A  0012               	return	
 18825  01282C  D7E6               	goto	l184
 18826  01282E                     __end_of_LCD_DrawField:
 18827                           	opt stack 0
 18828                           tosu	equ	0xFFF
 18829                           tosh	equ	0xFFE
 18830                           tosl	equ	0xFFD
 18831                           pclath	equ	0xFFA
 18832                           tblptru	equ	0xFF8
 18833                           tblptrh	equ	0xFF7
 18834                           tblptrl	equ	0xFF6
 18835                           tablat	equ	0xFF5
 18836                           prodh	equ	0xFF4
 18837                           prodl	equ	0xFF3
 18838                           intcon	equ	0xFF2
 18839                           indf0	equ	0xFEF
 18840                           postinc0	equ	0xFEE
 18841                           fsr0h	equ	0xFEA
 18842                           fsr0l	equ	0xFE9
 18843                           wreg	equ	0xFE8
 18844                           indf1	equ	0xFE7
 18845                           postdec1	equ	0xFE5
 18846                           fsr1h	equ	0xFE2
 18847                           fsr1l	equ	0xFE1
 18848                           indf2	equ	0xFDF
 18849                           postinc2	equ	0xFDE
 18850                           postdec2	equ	0xFDD
 18851                           plusw2	equ	0xFDB
 18852                           fsr2h	equ	0xFDA
 18853                           fsr2l	equ	0xFD9
 18854                           status	equ	0xFD8
 18855                           
 18856 ;; *************** function ___wmul *****************
 18857 ;; Defined at:
 18858 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 18859 ;; Parameters:    Size  Location     Type
 18860 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18861 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18862 ;; Auto vars:     Size  Location     Type
 18863 ;;  product         2    4[BANK0 ] unsigned int 
 18864 ;; Return value:  Size  Location     Type
 18865 ;;                  2    0[BANK0 ] unsigned int 
 18866 ;; Registers used:
 18867 ;;		wreg, status,2, status,0, prodl, prodh
 18868 ;; Tracked objects:
 18869 ;;		On entry : 0/0
 18870 ;;		On exit  : 0/0
 18871 ;;		Unchanged: 0/0
 18872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18873 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18876 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18877 ;;Total ram usage:        6 bytes
 18878 ;; Hardware stack levels used:    1
 18879 ;; Hardware stack levels required when called:    7
 18880 ;; This function calls:
 18881 ;;		Nothing
 18882 ;; This function is called by:
 18883 ;;		_LCD_DrawField
 18884 ;;		_ADCAverage
 18885 ;; This function uses a non-reentrant model
 18886 ;;
 18887                           
 18888                           	psect	text108
 18889  013772                     __ptext108:
 18890                           	opt stack 0
 18891  013772                     ___wmul:
 18892                           	opt stack 21
 18893                           
 18894                           ; BSR set to: 0
 18895                           ;incstack = 0
 18896  013772  0100               	movlb	0	; () banked
 18897  013774  51B3               	movf	___wmul@multiplier& (0+255),w,b
 18898  013776  03B5               	mulwf	___wmul@multiplicand& (0+255),b
 18899  013778  CFF3 F0B7          	movff	prodl,___wmul@product
 18900  01377C  CFF4 F0B8          	movff	prodh,___wmul@product+1
 18901  013780  51B3               	movf	___wmul@multiplier& (0+255),w,b
 18902  013782  03B6               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18903  013784  50F3               	movf	prodl,w,c
 18904  013786  27B8               	addwf	(___wmul@product+1)& (0+255),f,b
 18905  013788  51B4               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18906  01378A  03B5               	mulwf	___wmul@multiplicand& (0+255),b
 18907  01378C  50F3               	movf	prodl,w,c
 18908  01378E  27B8               	addwf	(___wmul@product+1)& (0+255),f,b
 18909                           
 18910                           ; BSR set to: 0
 18911  013790  C0B7  F0B3         	movff	___wmul@product,?___wmul
 18912  013794  C0B8  F0B4         	movff	___wmul@product+1,?___wmul+1
 18913  013798  0012               	return	
 18914  01379A                     __end_of___wmul:
 18915                           	opt stack 0
 18916                           tosu	equ	0xFFF
 18917                           tosh	equ	0xFFE
 18918                           tosl	equ	0xFFD
 18919                           pclath	equ	0xFFA
 18920                           tblptru	equ	0xFF8
 18921                           tblptrh	equ	0xFF7
 18922                           tblptrl	equ	0xFF6
 18923                           tablat	equ	0xFF5
 18924                           prodh	equ	0xFF4
 18925                           prodl	equ	0xFF3
 18926                           intcon	equ	0xFF2
 18927                           indf0	equ	0xFEF
 18928                           postinc0	equ	0xFEE
 18929                           fsr0h	equ	0xFEA
 18930                           fsr0l	equ	0xFE9
 18931                           wreg	equ	0xFE8
 18932                           indf1	equ	0xFE7
 18933                           postdec1	equ	0xFE5
 18934                           fsr1h	equ	0xFE2
 18935                           fsr1l	equ	0xFE1
 18936                           indf2	equ	0xFDF
 18937                           postinc2	equ	0xFDE
 18938                           postdec2	equ	0xFDD
 18939                           plusw2	equ	0xFDB
 18940                           fsr2h	equ	0xFDA
 18941                           fsr2l	equ	0xFD9
 18942                           status	equ	0xFD8
 18943                           
 18944 ;; *************** function _Set_Addr_Window *****************
 18945 ;; Defined at:
 18946 ;;		line 214 in file "Library/LCD.c"
 18947 ;; Parameters:    Size  Location     Type
 18948 ;;  xs              1    wreg     unsigned char 
 18949 ;;  ys              1    5[BANK0 ] unsigned char 
 18950 ;;  xe              1    6[BANK0 ] unsigned char 
 18951 ;;  ye              1    7[BANK0 ] unsigned char 
 18952 ;; Auto vars:     Size  Location     Type
 18953 ;;  xs              1    8[BANK0 ] unsigned char 
 18954 ;; Return value:  Size  Location     Type
 18955 ;;                  1    wreg      void 
 18956 ;; Registers used:
 18957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18958 ;; Tracked objects:
 18959 ;;		On entry : 0/0
 18960 ;;		On exit  : 0/0
 18961 ;;		Unchanged: 0/0
 18962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18963 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18966 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18967 ;;Total ram usage:        4 bytes
 18968 ;; Hardware stack levels used:    1
 18969 ;; Hardware stack levels required when called:    9
 18970 ;; This function calls:
 18971 ;;		_LCD_Write
 18972 ;; This function is called by:
 18973 ;;		_LCD_Fill
 18974 ;;		_LCD_FillRectangle
 18975 ;;		_LCD_DrawField
 18976 ;;		_RAM_Address_Set
 18977 ;;		_LCD_DrawPixel
 18978 ;; This function uses a non-reentrant model
 18979 ;;
 18980                           
 18981                           	psect	text109
 18982  0122C0                     __ptext109:
 18983                           	opt stack 0
 18984  0122C0                     _Set_Addr_Window:
 18985                           	opt stack 19
 18986                           
 18987                           ; BSR set to: 0
 18988                           ;incstack = 0
 18989                           ;Set_Addr_Window@xs stored from wreg
 18990  0122C0  0100               	movlb	0	; () banked
 18991  0122C2  6FBB               	movwf	Set_Addr_Window@xs& (0+255),b
 18992                           
 18993                           ;LCD.c: 216: ys+=2;
 18994  0122C4  0E02               	movlw	2
 18995  0122C6  0100               	movlb	0	; () banked
 18996  0122C8  27B8               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18997                           
 18998                           ;LCD.c: 217: ye+=2;
 18999  0122CA  0E02               	movlw	2
 19000  0122CC  27BA               	addwf	Set_Addr_Window@ye& (0+255),f,b
 19001                           
 19002                           ;LCD.c: 218: xs+=3;
 19003  0122CE  0E03               	movlw	3
 19004  0122D0  27BB               	addwf	Set_Addr_Window@xs& (0+255),f,b
 19005                           
 19006                           ;LCD.c: 219: xe+=3;
 19007  0122D2  0E03               	movlw	3
 19008  0122D4  27B9               	addwf	Set_Addr_Window@xe& (0+255),f,b
 19009                           
 19010                           ; BSR set to: 0
 19011                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 19012  0122D6  0E00               	movlw	0
 19013  0122D8  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19014  0122DA  0E2A               	movlw	42
 19015  0122DC  EC49  F09C         	call	_LCD_Write
 19016                           
 19017                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 19018  0122E0  0E01               	movlw	1
 19019  0122E2  0100               	movlb	0	; () banked
 19020  0122E4  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19021  0122E6  0E00               	movlw	0
 19022  0122E8  EC49  F09C         	call	_LCD_Write
 19023                           
 19024                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 19025  0122EC  0E01               	movlw	1
 19026  0122EE  0100               	movlb	0	; () banked
 19027  0122F0  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19028  0122F2  51BB               	movf	Set_Addr_Window@xs& (0+255),w,b
 19029  0122F4  EC49  F09C         	call	_LCD_Write
 19030                           
 19031                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 19032  0122F8  0E01               	movlw	1
 19033  0122FA  0100               	movlb	0	; () banked
 19034  0122FC  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19035  0122FE  0E00               	movlw	0
 19036  012300  EC49  F09C         	call	_LCD_Write
 19037                           
 19038                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 19039  012304  0E01               	movlw	1
 19040  012306  0100               	movlb	0	; () banked
 19041  012308  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19042  01230A  51B9               	movf	Set_Addr_Window@xe& (0+255),w,b
 19043  01230C  EC49  F09C         	call	_LCD_Write
 19044                           
 19045                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 19046  012310  0E00               	movlw	0
 19047  012312  0100               	movlb	0	; () banked
 19048  012314  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19049  012316  0E2B               	movlw	43
 19050  012318  EC49  F09C         	call	_LCD_Write
 19051                           
 19052                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 19053  01231C  0E01               	movlw	1
 19054  01231E  0100               	movlb	0	; () banked
 19055  012320  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19056  012322  0E00               	movlw	0
 19057  012324  EC49  F09C         	call	_LCD_Write
 19058                           
 19059                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 19060  012328  0E01               	movlw	1
 19061  01232A  0100               	movlb	0	; () banked
 19062  01232C  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19063  01232E  51B8               	movf	Set_Addr_Window@ys& (0+255),w,b
 19064  012330  EC49  F09C         	call	_LCD_Write
 19065                           
 19066                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 19067  012334  0E01               	movlw	1
 19068  012336  0100               	movlb	0	; () banked
 19069  012338  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19070  01233A  0E00               	movlw	0
 19071  01233C  EC49  F09C         	call	_LCD_Write
 19072                           
 19073                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 19074  012340  0E01               	movlw	1
 19075  012342  0100               	movlb	0	; () banked
 19076  012344  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19077  012346  51BA               	movf	Set_Addr_Window@ye& (0+255),w,b
 19078  012348  EC49  F09C         	call	_LCD_Write
 19079                           
 19080                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 19081  01234C  0E00               	movlw	0
 19082  01234E  0100               	movlb	0	; () banked
 19083  012350  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19084  012352  0E2C               	movlw	44
 19085  012354  EC49  F09C         	call	_LCD_Write
 19086  012358  0012               	return		;funcret
 19087  01235A                     __end_of_Set_Addr_Window:
 19088                           	opt stack 0
 19089                           tosu	equ	0xFFF
 19090                           tosh	equ	0xFFE
 19091                           tosl	equ	0xFFD
 19092                           pclath	equ	0xFFA
 19093                           tblptru	equ	0xFF8
 19094                           tblptrh	equ	0xFF7
 19095                           tblptrl	equ	0xFF6
 19096                           tablat	equ	0xFF5
 19097                           prodh	equ	0xFF4
 19098                           prodl	equ	0xFF3
 19099                           intcon	equ	0xFF2
 19100                           indf0	equ	0xFEF
 19101                           postinc0	equ	0xFEE
 19102                           fsr0h	equ	0xFEA
 19103                           fsr0l	equ	0xFE9
 19104                           wreg	equ	0xFE8
 19105                           indf1	equ	0xFE7
 19106                           postdec1	equ	0xFE5
 19107                           fsr1h	equ	0xFE2
 19108                           fsr1l	equ	0xFE1
 19109                           indf2	equ	0xFDF
 19110                           postinc2	equ	0xFDE
 19111                           postdec2	equ	0xFDD
 19112                           plusw2	equ	0xFDB
 19113                           fsr2h	equ	0xFDA
 19114                           fsr2l	equ	0xFD9
 19115                           status	equ	0xFD8
 19116                           
 19117 ;; *************** function _LCD_Word_Write *****************
 19118 ;; Defined at:
 19119 ;;		line 198 in file "Library/LCD.c"
 19120 ;; Parameters:    Size  Location     Type
 19121 ;;  value           2    5[BANK0 ] unsigned short 
 19122 ;; Auto vars:     Size  Location     Type
 19123 ;;		None
 19124 ;; Return value:  Size  Location     Type
 19125 ;;                  1    wreg      void 
 19126 ;; Registers used:
 19127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19128 ;; Tracked objects:
 19129 ;;		On entry : 0/0
 19130 ;;		On exit  : 0/0
 19131 ;;		Unchanged: 0/0
 19132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19133 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19137 ;;Total ram usage:        2 bytes
 19138 ;; Hardware stack levels used:    1
 19139 ;; Hardware stack levels required when called:    9
 19140 ;; This function calls:
 19141 ;;		_LCD_Write
 19142 ;; This function is called by:
 19143 ;;		_LCD_Fill
 19144 ;;		_LCD_FillRectangle
 19145 ;;		_LCD_DrawField
 19146 ;;		_LCD_DrawPixel
 19147 ;; This function uses a non-reentrant model
 19148 ;;
 19149                           
 19150                           	psect	text110
 19151  013908                     __ptext110:
 19152                           	opt stack 0
 19153  013908                     _LCD_Word_Write:
 19154                           	opt stack 19
 19155                           
 19156                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 19157                           
 19158                           ;incstack = 0
 19159  013908  0E01               	movlw	1
 19160  01390A  0100               	movlb	0	; () banked
 19161  01390C  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19162  01390E  51B9               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 19163  013910  EC49  F09C         	call	_LCD_Write
 19164                           
 19165                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 19166  013914  0E01               	movlw	1
 19167  013916  0100               	movlb	0	; () banked
 19168  013918  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19169  01391A  51B8               	movf	LCD_Word_Write@value& (0+255),w,b
 19170  01391C  EC49  F09C         	call	_LCD_Write
 19171  013920  0012               	return		;funcret
 19172  013922                     __end_of_LCD_Word_Write:
 19173                           	opt stack 0
 19174                           tosu	equ	0xFFF
 19175                           tosh	equ	0xFFE
 19176                           tosl	equ	0xFFD
 19177                           pclath	equ	0xFFA
 19178                           tblptru	equ	0xFF8
 19179                           tblptrh	equ	0xFF7
 19180                           tblptrl	equ	0xFF6
 19181                           tablat	equ	0xFF5
 19182                           prodh	equ	0xFF4
 19183                           prodl	equ	0xFF3
 19184                           intcon	equ	0xFF2
 19185                           indf0	equ	0xFEF
 19186                           postinc0	equ	0xFEE
 19187                           fsr0h	equ	0xFEA
 19188                           fsr0l	equ	0xFE9
 19189                           wreg	equ	0xFE8
 19190                           indf1	equ	0xFE7
 19191                           postdec1	equ	0xFE5
 19192                           fsr1h	equ	0xFE2
 19193                           fsr1l	equ	0xFE1
 19194                           indf2	equ	0xFDF
 19195                           postinc2	equ	0xFDE
 19196                           postdec2	equ	0xFDD
 19197                           plusw2	equ	0xFDB
 19198                           fsr2h	equ	0xFDA
 19199                           fsr2l	equ	0xFD9
 19200                           status	equ	0xFD8
 19201                           
 19202 ;; *************** function _LCD_Write *****************
 19203 ;; Defined at:
 19204 ;;		line 67 in file "Library/LCD.c"
 19205 ;; Parameters:    Size  Location     Type
 19206 ;;  value           1    wreg     unsigned char 
 19207 ;;  mode            1    3[BANK0 ] enum E6761
 19208 ;; Auto vars:     Size  Location     Type
 19209 ;;  value           1    4[BANK0 ] unsigned char 
 19210 ;; Return value:  Size  Location     Type
 19211 ;;                  1    wreg      void 
 19212 ;; Registers used:
 19213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19214 ;; Tracked objects:
 19215 ;;		On entry : 0/0
 19216 ;;		On exit  : 0/0
 19217 ;;		Unchanged: 0/0
 19218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19219 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19223 ;;Total ram usage:        2 bytes
 19224 ;; Hardware stack levels used:    1
 19225 ;; Hardware stack levels required when called:    8
 19226 ;; This function calls:
 19227 ;;		_Mode_Set
 19228 ;;		_SPI_Send
 19229 ;; This function is called by:
 19230 ;;		_LCD_Init
 19231 ;;		_LCD_Word_Write
 19232 ;;		_Set_Addr_Window
 19233 ;;		_Set_Rotation
 19234 ;;		_LCD_WriteCMD
 19235 ;;		_LCD_WriteData
 19236 ;;		_LCD_Data_Write
 19237 ;;		_LCD_Data_Write_4k
 19238 ;;		_Invert_Display
 19239 ;; This function uses a non-reentrant model
 19240 ;;
 19241                           
 19242                           	psect	text111
 19243  013892                     __ptext111:
 19244                           	opt stack 0
 19245  013892                     _LCD_Write:
 19246                           	opt stack 20
 19247                           
 19248                           ;incstack = 0
 19249                           ;LCD_Write@value stored from wreg
 19250  013892  0100               	movlb	0	; () banked
 19251  013894  6FB7               	movwf	LCD_Write@value& (0+255),b
 19252                           
 19253                           ;LCD.c: 89: Mode_Set(mode);
 19254  013896  0100               	movlb	0	; () banked
 19255  013898  51B6               	movf	LCD_Write@mode& (0+255),w,b
 19256  01389A  EC37  F09D         	call	_Mode_Set
 19257                           
 19258                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 19259  01389E  0E71               	movlw	low _SPI2
 19260  0138A0  0100               	movlb	0	; () banked
 19261  0138A2  6FB3               	movwf	SPI_Send@pInput& (0+255),b
 19262  0138A4  0E01               	movlw	high _SPI2
 19263  0138A6  6FB4               	movwf	(SPI_Send@pInput+1)& (0+255),b
 19264  0138A8  C0B7  F0B5         	movff	LCD_Write@value,SPI_Send@pData
 19265  0138AC  ECB2  F095         	call	_SPI_Send	;wreg free
 19266  0138B0  0012               	return		;funcret
 19267  0138B2                     __end_of_LCD_Write:
 19268                           	opt stack 0
 19269                           tosu	equ	0xFFF
 19270                           tosh	equ	0xFFE
 19271                           tosl	equ	0xFFD
 19272                           pclath	equ	0xFFA
 19273                           tblptru	equ	0xFF8
 19274                           tblptrh	equ	0xFF7
 19275                           tblptrl	equ	0xFF6
 19276                           tablat	equ	0xFF5
 19277                           prodh	equ	0xFF4
 19278                           prodl	equ	0xFF3
 19279                           intcon	equ	0xFF2
 19280                           indf0	equ	0xFEF
 19281                           postinc0	equ	0xFEE
 19282                           fsr0h	equ	0xFEA
 19283                           fsr0l	equ	0xFE9
 19284                           wreg	equ	0xFE8
 19285                           indf1	equ	0xFE7
 19286                           postdec1	equ	0xFE5
 19287                           fsr1h	equ	0xFE2
 19288                           fsr1l	equ	0xFE1
 19289                           indf2	equ	0xFDF
 19290                           postinc2	equ	0xFDE
 19291                           postdec2	equ	0xFDD
 19292                           plusw2	equ	0xFDB
 19293                           fsr2h	equ	0xFDA
 19294                           fsr2l	equ	0xFD9
 19295                           status	equ	0xFD8
 19296                           
 19297 ;; *************** function _SPI_Send *****************
 19298 ;; Defined at:
 19299 ;;		line 226 in file "Library/SPI.c"
 19300 ;; Parameters:    Size  Location     Type
 19301 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19302 ;;		 -> SPI1(11), SPI2(11), 
 19303 ;;  pData           1    2[BANK0 ] unsigned char 
 19304 ;; Auto vars:     Size  Location     Type
 19305 ;;		None
 19306 ;; Return value:  Size  Location     Type
 19307 ;;                  1    wreg      unsigned char 
 19308 ;; Registers used:
 19309 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19310 ;; Tracked objects:
 19311 ;;		On entry : 0/0
 19312 ;;		On exit  : 0/0
 19313 ;;		Unchanged: 0/0
 19314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19315 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19318 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19319 ;;Total ram usage:        3 bytes
 19320 ;; Hardware stack levels used:    1
 19321 ;; Hardware stack levels required when called:    7
 19322 ;; This function calls:
 19323 ;;		Nothing
 19324 ;; This function is called by:
 19325 ;;		_LCD_Write
 19326 ;;		_OutSeg
 19327 ;; This function uses a non-reentrant model
 19328 ;;
 19329                           
 19330                           	psect	text112
 19331  012B64                     __ptext112:
 19332                           	opt stack 0
 19333  012B64                     _SPI_Send:
 19334                           	opt stack 20
 19335                           
 19336                           ;SPI.c: 253: switch (pInput->mChannel)
 19337                           
 19338                           ;incstack = 0
 19339  012B64  D025               	goto	l678
 19340  012B66                     
 19341                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 19342  012B66  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19343  012B6A  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19344  012B6E  0100               	movlb	0	; () banked
 19345  012B70  94DF               	bcf	indf2,2,c
 19346                           
 19347                           ; BSR set to: 0
 19348                           ;SPI.c: 257: SSP1BUF = pData;
 19349  012B72  C0B5  FFC9         	movff	SPI_Send@pData,4041	;volatile
 19350  012B76                     
 19351                           ; BSR set to: 0
 19352  012B76  A0C7               	btfss	4039,0,c	;volatile
 19353  012B78  D7FE               	goto	l681
 19354                           
 19355                           ;SPI.c: 259: pData = SSP1BUF;
 19356  012B7A  CFC9 F0B5          	movff	4041,SPI_Send@pData	;volatile
 19357                           
 19358                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 19359  012B7E  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19360  012B82  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19361  012B86  0100               	movlb	0	; () banked
 19362  012B88  84DF               	bsf	indf2,2,c
 19363                           
 19364                           ; BSR set to: 0
 19365                           ;SPI.c: 261: return pData;
 19366                           ;	Return value of _SPI_Send is never used
 19367  012B8A  0012               	return	
 19368  012B8C                     
 19369                           ; BSR set to: 0
 19370                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 19371                           
 19372                           ; BSR set to: 0
 19373  012B8C  C09F  FFD9         	movff	_PortD+4,fsr2l
 19374  012B90  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19375  012B94  9EDF               	bcf	indf2,7,c
 19376                           
 19377                           ; BSR set to: 0
 19378                           ;SPI.c: 264: SSP2BUF = pData;
 19379  012B96  C0B5  FF6F         	movff	SPI_Send@pData,3951	;volatile
 19380  012B9A                     
 19381                           ; BSR set to: 0
 19382  012B9A  A06D               	btfss	3949,0,c	;volatile
 19383  012B9C  D7FE               	goto	l686
 19384                           
 19385                           ;SPI.c: 266: pData = SSP2BUF;
 19386  012B9E  CF6F F0B5          	movff	3951,SPI_Send@pData	;volatile
 19387                           
 19388                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 19389  012BA2  C09F  FFD9         	movff	_PortD+4,fsr2l
 19390  012BA6  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19391  012BAA  0100               	movlb	0	; () banked
 19392  012BAC  8EDF               	bsf	indf2,7,c
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;SPI.c: 269: };
 19396                           
 19397                           ; BSR set to: 0
 19398                           ;SPI.c: 268: return pData;
 19399                           ;	Return value of _SPI_Send is never used
 19400  012BAE  0012               	return	
 19401  012BB0                     l678:
 19402                           
 19403                           ; BSR set to: 0
 19404  012BB0  0100               	movlb	0	; () banked
 19405  012BB2  EE20 F002          	lfsr	2,2
 19406  012BB6  51B3               	movf	SPI_Send@pInput& (0+255),w,b
 19407  012BB8  26D9               	addwf	fsr2l,f,c
 19408  012BBA  51B4               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 19409  012BBC  22DA               	addwfc	fsr2h,f,c
 19410  012BBE  50DF               	movf	indf2,w,c
 19411                           
 19412                           ; Switch size 1, requested type "space"
 19413                           ; Number of cases is 2, Range of values is 0 to 1
 19414                           ; switch strategies available:
 19415                           ; Name         Instructions Cycles
 19416                           ; simple_byte            7     4 (average)
 19417                           ;	Chosen strategy is simple_byte
 19418  012BC0  0A00               	xorlw	0	; case 0
 19419  012BC2  B4D8               	btfsc	status,2,c
 19420  012BC4  D7D0               	goto	l679
 19421  012BC6  0A01               	xorlw	1	; case 1
 19422  012BC8  A4D8               	btfss	status,2,c
 19423  012BCA  0012               	return	
 19424  012BCC  D7DF               	goto	l684
 19425  012BCE                     __end_of_SPI_Send:
 19426                           	opt stack 0
 19427                           tosu	equ	0xFFF
 19428                           tosh	equ	0xFFE
 19429                           tosl	equ	0xFFD
 19430                           pclath	equ	0xFFA
 19431                           tblptru	equ	0xFF8
 19432                           tblptrh	equ	0xFF7
 19433                           tblptrl	equ	0xFF6
 19434                           tablat	equ	0xFF5
 19435                           prodh	equ	0xFF4
 19436                           prodl	equ	0xFF3
 19437                           intcon	equ	0xFF2
 19438                           indf0	equ	0xFEF
 19439                           postinc0	equ	0xFEE
 19440                           fsr0h	equ	0xFEA
 19441                           fsr0l	equ	0xFE9
 19442                           wreg	equ	0xFE8
 19443                           indf1	equ	0xFE7
 19444                           postdec1	equ	0xFE5
 19445                           fsr1h	equ	0xFE2
 19446                           fsr1l	equ	0xFE1
 19447                           indf2	equ	0xFDF
 19448                           postinc2	equ	0xFDE
 19449                           postdec2	equ	0xFDD
 19450                           plusw2	equ	0xFDB
 19451                           fsr2h	equ	0xFDA
 19452                           fsr2l	equ	0xFD9
 19453                           status	equ	0xFD8
 19454                           
 19455 ;; *************** function _Mode_Set *****************
 19456 ;; Defined at:
 19457 ;;		line 40 in file "Library/LCD.c"
 19458 ;; Parameters:    Size  Location     Type
 19459 ;;  pMode           1    wreg     enum E6761
 19460 ;; Auto vars:     Size  Location     Type
 19461 ;;  pMode           1    0[BANK0 ] enum E6761
 19462 ;; Return value:  Size  Location     Type
 19463 ;;                  1    wreg      void 
 19464 ;; Registers used:
 19465 ;;		wreg
 19466 ;; Tracked objects:
 19467 ;;		On entry : 0/0
 19468 ;;		On exit  : 0/0
 19469 ;;		Unchanged: 0/0
 19470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19474 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19475 ;;Total ram usage:        1 bytes
 19476 ;; Hardware stack levels used:    1
 19477 ;; Hardware stack levels required when called:    7
 19478 ;; This function calls:
 19479 ;;		Nothing
 19480 ;; This function is called by:
 19481 ;;		_LCD_Write
 19482 ;; This function uses a non-reentrant model
 19483 ;;
 19484                           
 19485                           	psect	text113
 19486  013A6E                     __ptext113:
 19487                           	opt stack 0
 19488  013A6E                     _Mode_Set:
 19489                           	opt stack 20
 19490                           
 19491                           ; BSR set to: 0
 19492                           ;incstack = 0
 19493                           ;Mode_Set@pMode stored from wreg
 19494  013A6E  0100               	movlb	0	; () banked
 19495  013A70  6FB3               	movwf	Mode_Set@pMode& (0+255),b
 19496                           
 19497                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 19498  013A72  0100               	movlb	0	; () banked
 19499  013A74  B1B3               	btfsc	Mode_Set@pMode& (0+255),0,b
 19500  013A76  D002               	bra	u8025
 19501  013A78  9E85               	bcf	3973,7,c	;volatile
 19502  013A7A  D001               	bra	u8026
 19503  013A7C                     u8025:
 19504  013A7C  8E85               	bsf	3973,7,c	;volatile
 19505  013A7E                     u8026:
 19506  013A7E  0012               	return		;funcret
 19507  013A80                     __end_of_Mode_Set:
 19508                           	opt stack 0
 19509                           tosu	equ	0xFFF
 19510                           tosh	equ	0xFFE
 19511                           tosl	equ	0xFFD
 19512                           pclath	equ	0xFFA
 19513                           tblptru	equ	0xFF8
 19514                           tblptrh	equ	0xFF7
 19515                           tblptrl	equ	0xFF6
 19516                           tablat	equ	0xFF5
 19517                           prodh	equ	0xFF4
 19518                           prodl	equ	0xFF3
 19519                           intcon	equ	0xFF2
 19520                           indf0	equ	0xFEF
 19521                           postinc0	equ	0xFEE
 19522                           fsr0h	equ	0xFEA
 19523                           fsr0l	equ	0xFE9
 19524                           wreg	equ	0xFE8
 19525                           indf1	equ	0xFE7
 19526                           postdec1	equ	0xFE5
 19527                           fsr1h	equ	0xFE2
 19528                           fsr1l	equ	0xFE1
 19529                           indf2	equ	0xFDF
 19530                           postinc2	equ	0xFDE
 19531                           postdec2	equ	0xFDD
 19532                           plusw2	equ	0xFDB
 19533                           fsr2h	equ	0xFDA
 19534                           fsr2l	equ	0xFD9
 19535                           status	equ	0xFD8
 19536                           
 19537 ;; *************** function _Console_MakeField *****************
 19538 ;; Defined at:
 19539 ;;		line 435 in file "Library/Console.c"
 19540 ;; Parameters:    Size  Location     Type
 19541 ;;  pInput          1    wreg     unsigned char 
 19542 ;; Auto vars:     Size  Location     Type
 19543 ;;  pInput          1   11[BANK0 ] unsigned char 
 19544 ;;  y               1   17[BANK0 ] unsigned char 
 19545 ;;  x               1   16[BANK0 ] unsigned char 
 19546 ;;  Column          2   12[BANK0 ] PTR struct Byte
 19547 ;;		 -> Font5x7(480), 
 19548 ;;  Index           2    9[BANK0 ] unsigned short 
 19549 ;; Return value:  Size  Location     Type
 19550 ;;                  2    5[BANK0 ] PTR unsigned short 
 19551 ;; Registers used:
 19552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19553 ;; Tracked objects:
 19554 ;;		On entry : 0/0
 19555 ;;		On exit  : 0/0
 19556 ;;		Unchanged: 0/0
 19557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19558 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19559 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19560 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19561 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19562 ;;Total ram usage:       13 bytes
 19563 ;; Hardware stack levels used:    1
 19564 ;; Hardware stack levels required when called:    8
 19565 ;; This function calls:
 19566 ;;		_Byte_GetBit
 19567 ;; This function is called by:
 19568 ;;		_Console_Render
 19569 ;; This function uses a non-reentrant model
 19570 ;;
 19571                           
 19572                           	psect	text114
 19573  01217E                     __ptext114:
 19574                           	opt stack 0
 19575  01217E                     _Console_MakeField:
 19576                           	opt stack 21
 19577                           
 19578                           ;incstack = 0
 19579                           ;Console_MakeField@pInput stored from wreg
 19580  01217E  0100               	movlb	0	; () banked
 19581  012180  6FBE               	movwf	Console_MakeField@pInput& (0+255),b
 19582                           
 19583                           ;Console.c: 437: static Colour Fill[7][5];
 19584                           ;Console.c: 438: pInput -= 32;
 19585  012182  0E20               	movlw	32
 19586  012184  0100               	movlb	0	; () banked
 19587  012186  5FBE               	subwf	Console_MakeField@pInput& (0+255),f,b
 19588                           
 19589                           ; BSR set to: 0
 19590                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 19591  012188  51BE               	movf	Console_MakeField@pInput& (0+255),w,b
 19592  01218A  0D05               	mullw	5
 19593  01218C  CFF3 F0BC          	movff	prodl,Console_MakeField@Index
 19594  012190  CFF4 F0BD          	movff	prodh,Console_MakeField@Index+1
 19595                           
 19596                           ; BSR set to: 0
 19597                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 19598  012194  0ED7               	movlw	low _Font5x7
 19599  012196  25BC               	addwf	Console_MakeField@Index& (0+255),w,b
 19600  012198  6FBF               	movwf	Console_MakeField@Column& (0+255),b
 19601  01219A  0EFC               	movlw	high _Font5x7
 19602  01219C  21BD               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 19603  01219E  6FC0               	movwf	(Console_MakeField@Column+1)& (0+255),b
 19604                           
 19605                           ; BSR set to: 0
 19606                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 19607  0121A0  0E00               	movlw	0
 19608  0121A2  6FC3               	movwf	Console_MakeField@x& (0+255),b
 19609  0121A4                     l12828:
 19610                           
 19611                           ; BSR set to: 0
 19612  0121A4  0E04               	movlw	4
 19613  0121A6  65C3               	cpfsgt	Console_MakeField@x& (0+255),b
 19614  0121A8  D001               	goto	l1077
 19615  0121AA  D037               	goto	u8960
 19616  0121AC                     l1077:
 19617                           
 19618                           ; BSR set to: 0
 19619                           ;Console.c: 444: {
 19620                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 19621                           
 19622                           ; BSR set to: 0
 19623  0121AC  0E00               	movlw	0
 19624  0121AE  6FC4               	movwf	Console_MakeField@y& (0+255),b
 19625  0121B0                     l12834:
 19626                           
 19627                           ; BSR set to: 0
 19628  0121B0  0E06               	movlw	6
 19629  0121B2  65C4               	cpfsgt	Console_MakeField@y& (0+255),b
 19630  0121B4  D001               	goto	l1079
 19631  0121B6  D02D               	goto	u8950
 19632  0121B8                     l1079:
 19633                           
 19634                           ; BSR set to: 0
 19635                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 19636                           
 19637                           ; BSR set to: 0
 19638  0121B8  C0BF  F0B3         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 19639  0121BC  C0C0  F0B4         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 19640  0121C0  C0C4  F0B5         	movff	Console_MakeField@y,Byte_GetBit@pBit
 19641  0121C4  EC8F  F09B         	call	_Byte_GetBit	;wreg free
 19642  0121C8  0900               	iorlw	0
 19643  0121CA  A4D8               	btfss	status,2,c
 19644  0121CC  D005               	goto	l1082
 19645  0121CE  C07F  F0C1         	movff	_gBackcolour,_Console_MakeField$10974
 19646  0121D2  C080  F0C2         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 19647  0121D6  D004               	goto	l1084
 19648  0121D8                     l1082:
 19649  0121D8  C0FD  F0C1         	movff	_gForecolour,_Console_MakeField$10974
 19650  0121DC  C0FE  F0C2         	movff	_gForecolour+1,_Console_MakeField$10974+1
 19651  0121E0                     l1084:
 19652  0121E0  0100               	movlb	0	; () banked
 19653  0121E2  51C4               	movf	Console_MakeField@y& (0+255),w,b
 19654  0121E4  0D0A               	mullw	10
 19655  0121E6  0EAA               	movlw	low Console_MakeField@Fill
 19656  0121E8  6FBA               	movwf	??_Console_MakeField& (0+255),b
 19657  0121EA  0E02               	movlw	high Console_MakeField@Fill
 19658  0121EC  6FBB               	movwf	(??_Console_MakeField+1)& (0+255),b
 19659  0121EE  50F3               	movf	prodl,w,c
 19660  0121F0  27BA               	addwf	??_Console_MakeField& (0+255),f,b
 19661  0121F2  50F4               	movf	prodh,w,c
 19662  0121F4  23BB               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 19663  0121F6  51C3               	movf	Console_MakeField@x& (0+255),w,b
 19664  0121F8  0D02               	mullw	2
 19665  0121FA  50F3               	movf	prodl,w,c
 19666  0121FC  25BA               	addwf	??_Console_MakeField& (0+255),w,b
 19667  0121FE  6ED9               	movwf	fsr2l,c
 19668  012200  50F4               	movf	prodh,w,c
 19669  012202  21BB               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 19670  012204  6EDA               	movwf	fsr2h,c
 19671  012206  C0C1  FFDE         	movff	_Console_MakeField$10974,postinc2
 19672  01220A  C0C2  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 19673                           
 19674                           ; BSR set to: 0
 19675  01220E  2BC4               	incf	Console_MakeField@y& (0+255),f,b
 19676  012210  D7CF               	goto	l12834
 19677  012212                     u8950:
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;Console.c: 447: Column += 1;
 19681                           
 19682                           ; BSR set to: 0
 19683  012212  4BBF               	infsnz	Console_MakeField@Column& (0+255),f,b
 19684  012214  2BC0               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 19685  012216  2BC3               	incf	Console_MakeField@x& (0+255),f,b
 19686  012218  D7C5               	goto	l12828
 19687  01221A                     u8960:
 19688                           
 19689                           ; BSR set to: 0
 19690                           ;Console.c: 448: }
 19691                           ;Console.c: 449: return (ColourPtr)Fill;
 19692                           
 19693                           ; BSR set to: 0
 19694  01221A  0EAA               	movlw	low Console_MakeField@Fill
 19695  01221C  6FB8               	movwf	?_Console_MakeField& (0+255),b
 19696  01221E  0E02               	movlw	high Console_MakeField@Fill
 19697  012220  6FB9               	movwf	(?_Console_MakeField+1)& (0+255),b
 19698  012222  0012               	return	
 19699  012224                     __end_of_Console_MakeField:
 19700                           	opt stack 0
 19701                           tosu	equ	0xFFF
 19702                           tosh	equ	0xFFE
 19703                           tosl	equ	0xFFD
 19704                           pclath	equ	0xFFA
 19705                           tblptru	equ	0xFF8
 19706                           tblptrh	equ	0xFF7
 19707                           tblptrl	equ	0xFF6
 19708                           tablat	equ	0xFF5
 19709                           prodh	equ	0xFF4
 19710                           prodl	equ	0xFF3
 19711                           intcon	equ	0xFF2
 19712                           indf0	equ	0xFEF
 19713                           postinc0	equ	0xFEE
 19714                           fsr0h	equ	0xFEA
 19715                           fsr0l	equ	0xFE9
 19716                           wreg	equ	0xFE8
 19717                           indf1	equ	0xFE7
 19718                           postdec1	equ	0xFE5
 19719                           fsr1h	equ	0xFE2
 19720                           fsr1l	equ	0xFE1
 19721                           indf2	equ	0xFDF
 19722                           postinc2	equ	0xFDE
 19723                           postdec2	equ	0xFDD
 19724                           plusw2	equ	0xFDB
 19725                           fsr2h	equ	0xFDA
 19726                           fsr2l	equ	0xFD9
 19727                           status	equ	0xFD8
 19728                           
 19729 ;; *************** function _Byte_GetBit *****************
 19730 ;; Defined at:
 19731 ;;		line 38 in file "Library/Types.c"
 19732 ;; Parameters:    Size  Location     Type
 19733 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19734 ;;		 -> Font5x7(480), 
 19735 ;;  pBit            1    2[BANK0 ] unsigned char 
 19736 ;; Auto vars:     Size  Location     Type
 19737 ;;  Output          1    4[BANK0 ] unsigned char 
 19738 ;; Return value:  Size  Location     Type
 19739 ;;                  1    wreg      unsigned char 
 19740 ;; Registers used:
 19741 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 19742 ;; Tracked objects:
 19743 ;;		On entry : 0/0
 19744 ;;		On exit  : 0/0
 19745 ;;		Unchanged: 0/0
 19746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19747 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19750 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19751 ;;Total ram usage:        5 bytes
 19752 ;; Hardware stack levels used:    1
 19753 ;; Hardware stack levels required when called:    7
 19754 ;; This function calls:
 19755 ;;		Nothing
 19756 ;; This function is called by:
 19757 ;;		_Console_MakeField
 19758 ;;		_Word_GetBit
 19759 ;; This function uses a non-reentrant model
 19760 ;;
 19761                           
 19762                           	psect	text115
 19763  01371E                     __ptext115:
 19764                           	opt stack 0
 19765  01371E                     _Byte_GetBit:
 19766                           	opt stack 21
 19767                           
 19768                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 19769                           
 19770                           ; BSR set to: 0
 19771                           ;incstack = 0
 19772  01371E  C0B3  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 19773  013722  C0B4  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 19774  013726                     	if	0	;tblptru may be non-zero
 19775  013726                     	endif
 19776  013726                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 19777  013726  0E00               	movlw	low (__mediumconst shr (0+16))
 19778  013728  6EF8               	movwf	tblptru,c
 19779  01372A                     	endif
 19780  01372A  0008               	tblrd		*
 19781  01372C  CFF5 F0B7          	movff	tablat,Byte_GetBit@Output
 19782                           
 19783                           ;Types.c: 42: Output >>= pBit;
 19784  013730  0100               	movlb	0	; () banked
 19785  013732  29B5               	incf	Byte_GetBit@pBit& (0+255),w,b
 19786  013734  6FB6               	movwf	??_Byte_GetBit& (0+255),b
 19787  013736  D002               	goto	u8590
 19788  013738                     u8595:
 19789  013738  90D8               	bcf	status,0,c
 19790  01373A  33B7               	rrcf	Byte_GetBit@Output& (0+255),f,b
 19791  01373C                     u8590:
 19792  01373C  2FB6               	decfsz	??_Byte_GetBit& (0+255),f,b
 19793  01373E  D7FC               	goto	u8595
 19794                           
 19795                           ;Types.c: 43: Output &= 1;
 19796  013740  0E01               	movlw	1
 19797  013742  0100               	movlb	0	; () banked
 19798  013744  17B7               	andwf	Byte_GetBit@Output& (0+255),f,b
 19799                           
 19800                           ; BSR set to: 0
 19801                           ;Types.c: 44: return Output;
 19802  013746  51B7               	movf	Byte_GetBit@Output& (0+255),w,b
 19803  013748  0012               	return	
 19804  01374A                     __end_of_Byte_GetBit:
 19805                           	opt stack 0
 19806                           tosu	equ	0xFFF
 19807                           tosh	equ	0xFFE
 19808                           tosl	equ	0xFFD
 19809                           pclath	equ	0xFFA
 19810                           tblptru	equ	0xFF8
 19811                           tblptrh	equ	0xFF7
 19812                           tblptrl	equ	0xFF6
 19813                           tablat	equ	0xFF5
 19814                           prodh	equ	0xFF4
 19815                           prodl	equ	0xFF3
 19816                           intcon	equ	0xFF2
 19817                           indf0	equ	0xFEF
 19818                           postinc0	equ	0xFEE
 19819                           fsr0h	equ	0xFEA
 19820                           fsr0l	equ	0xFE9
 19821                           wreg	equ	0xFE8
 19822                           indf1	equ	0xFE7
 19823                           postdec1	equ	0xFE5
 19824                           fsr1h	equ	0xFE2
 19825                           fsr1l	equ	0xFE1
 19826                           indf2	equ	0xFDF
 19827                           postinc2	equ	0xFDE
 19828                           postdec2	equ	0xFDD
 19829                           plusw2	equ	0xFDB
 19830                           fsr2h	equ	0xFDA
 19831                           fsr2l	equ	0xFD9
 19832                           status	equ	0xFD8
 19833                           
 19834 ;; *************** function _Console_Init *****************
 19835 ;; Defined at:
 19836 ;;		line 157 in file "Library/Console.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;		None
 19839 ;; Auto vars:     Size  Location     Type
 19840 ;;  y               1    3[BANK0 ] unsigned char 
 19841 ;;  x               1    2[BANK0 ] unsigned char 
 19842 ;; Return value:  Size  Location     Type
 19843 ;;                  1    wreg      void 
 19844 ;; Registers used:
 19845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19846 ;; Tracked objects:
 19847 ;;		On entry : 0/0
 19848 ;;		On exit  : 0/0
 19849 ;;		Unchanged: 0/0
 19850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19852 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19854 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19855 ;;Total ram usage:        4 bytes
 19856 ;; Hardware stack levels used:    1
 19857 ;; Hardware stack levels required when called:    7
 19858 ;; This function calls:
 19859 ;;		Nothing
 19860 ;; This function is called by:
 19861 ;;		_main
 19862 ;; This function uses a non-reentrant model
 19863 ;;
 19864                           
 19865                           	psect	text116
 19866  012BCE                     __ptext116:
 19867                           	opt stack 0
 19868  012BCE                     _Console_Init:
 19869                           	opt stack 23
 19870                           
 19871                           ;Console.c: 160: lBufferX = 0;
 19872                           
 19873                           ; BSR set to: 0
 19874                           ;incstack = 0
 19875  012BCE  0E00               	movlw	0
 19876  012BD0  0100               	movlb	0	; () banked
 19877  012BD2  6F8F               	movwf	_lBufferX& (0+255),b
 19878                           
 19879                           ;Console.c: 161: lBufferY = 0;
 19880  012BD4  0E00               	movlw	0
 19881  012BD6  6F8E               	movwf	_lBufferY& (0+255),b
 19882                           
 19883                           ;Console.c: 163: UINT8 x, y;
 19884                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 19885  012BD8  0E00               	movlw	0
 19886  012BDA  6FB5               	movwf	Console_Init@x& (0+255),b
 19887  012BDC                     l13096:
 19888                           
 19889                           ; BSR set to: 0
 19890  012BDC  0E13               	movlw	19
 19891  012BDE  65B5               	cpfsgt	Console_Init@x& (0+255),b
 19892  012BE0  D001               	goto	l976
 19893  012BE2  0012               	return	
 19894  012BE4                     l976:
 19895                           
 19896                           ; BSR set to: 0
 19897                           ;Console.c: 165: {
 19898                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 19899                           
 19900                           ; BSR set to: 0
 19901  012BE4  0E00               	movlw	0
 19902  012BE6  6FB6               	movwf	Console_Init@y& (0+255),b
 19903  012BE8                     l13102:
 19904                           
 19905                           ; BSR set to: 0
 19906  012BE8  0E0E               	movlw	14
 19907  012BEA  65B6               	cpfsgt	Console_Init@y& (0+255),b
 19908  012BEC  D001               	goto	l978
 19909  012BEE  D022               	goto	u9320
 19910  012BF0                     l978:
 19911                           
 19912                           ; BSR set to: 0
 19913                           ;Console.c: 167: {
 19914                           ;Console.c: 168: lBuffer[y][x] = '\0';
 19915                           
 19916                           ; BSR set to: 0
 19917  012BF0  51B6               	movf	Console_Init@y& (0+255),w,b
 19918  012BF2  0D14               	mullw	20
 19919  012BF4  0EF0               	movlw	low _lBuffer
 19920  012BF6  6FB3               	movwf	??_Console_Init& (0+255),b
 19921  012BF8  0E02               	movlw	high _lBuffer
 19922  012BFA  6FB4               	movwf	(??_Console_Init+1)& (0+255),b
 19923  012BFC  50F3               	movf	prodl,w,c
 19924  012BFE  27B3               	addwf	??_Console_Init& (0+255),f,b
 19925  012C00  50F4               	movf	prodh,w,c
 19926  012C02  23B4               	addwfc	(??_Console_Init+1)& (0+255),f,b
 19927  012C04  51B5               	movf	Console_Init@x& (0+255),w,b
 19928  012C06  0D01               	mullw	1
 19929  012C08  50F3               	movf	prodl,w,c
 19930  012C0A  25B3               	addwf	??_Console_Init& (0+255),w,b
 19931  012C0C  6ED9               	movwf	fsr2l,c
 19932  012C0E  50F4               	movf	prodh,w,c
 19933  012C10  21B4               	addwfc	(??_Console_Init+1)& (0+255),w,b
 19934  012C12  6EDA               	movwf	fsr2h,c
 19935  012C14  0E00               	movlw	0
 19936  012C16  6EDF               	movwf	indf2,c
 19937                           
 19938                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 19939  012C18  51B6               	movf	Console_Init@y& (0+255),w,b
 19940  012C1A  0D02               	mullw	2
 19941  012C1C  0E8C               	movlw	low _lCBuffer
 19942  012C1E  24F3               	addwf	prodl,w,c
 19943  012C20  6ED9               	movwf	fsr2l,c
 19944  012C22  0E02               	movlw	high _lCBuffer
 19945  012C24  20F4               	addwfc	prodh,w,c
 19946  012C26  6EDA               	movwf	fsr2h,c
 19947  012C28  0EFF               	movlw	255
 19948  012C2A  6EDE               	movwf	postinc2,c
 19949  012C2C  0EFF               	movlw	255
 19950  012C2E  6EDD               	movwf	postdec2,c
 19951                           
 19952                           ; BSR set to: 0
 19953  012C30  2BB6               	incf	Console_Init@y& (0+255),f,b
 19954  012C32  D7DA               	goto	l13102
 19955  012C34                     u9320:
 19956                           
 19957                           ; BSR set to: 0
 19958                           
 19959                           ; BSR set to: 0
 19960  012C34  2BB5               	incf	Console_Init@x& (0+255),f,b
 19961  012C36  D7D2               	goto	l13096
 19962  012C38                     __end_of_Console_Init:
 19963                           	opt stack 0
 19964                           tosu	equ	0xFFF
 19965                           tosh	equ	0xFFE
 19966                           tosl	equ	0xFFD
 19967                           pclath	equ	0xFFA
 19968                           tblptru	equ	0xFF8
 19969                           tblptrh	equ	0xFF7
 19970                           tblptrl	equ	0xFF6
 19971                           tablat	equ	0xFF5
 19972                           prodh	equ	0xFF4
 19973                           prodl	equ	0xFF3
 19974                           intcon	equ	0xFF2
 19975                           indf0	equ	0xFEF
 19976                           postinc0	equ	0xFEE
 19977                           fsr0h	equ	0xFEA
 19978                           fsr0l	equ	0xFE9
 19979                           wreg	equ	0xFE8
 19980                           indf1	equ	0xFE7
 19981                           postdec1	equ	0xFE5
 19982                           fsr1h	equ	0xFE2
 19983                           fsr1l	equ	0xFE1
 19984                           indf2	equ	0xFDF
 19985                           postinc2	equ	0xFDE
 19986                           postdec2	equ	0xFDD
 19987                           plusw2	equ	0xFDB
 19988                           fsr2h	equ	0xFDA
 19989                           fsr2l	equ	0xFD9
 19990                           status	equ	0xFD8
 19991                           
 19992 ;; *************** function _ISR_Function *****************
 19993 ;; Defined at:
 19994 ;;		line 38 in file "Library/ISR.c"
 19995 ;; Parameters:    Size  Location     Type
 19996 ;;		None
 19997 ;; Auto vars:     Size  Location     Type
 19998 ;;		None
 19999 ;; Return value:  Size  Location     Type
 20000 ;;                  1    wreg      void 
 20001 ;; Registers used:
 20002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20003 ;; Tracked objects:
 20004 ;;		On entry : 0/0
 20005 ;;		On exit  : 0/0
 20006 ;;		Unchanged: 0/0
 20007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20010 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20011 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20012 ;;Total ram usage:       18 bytes
 20013 ;; Hardware stack levels used:    1
 20014 ;; Hardware stack levels required when called:    6
 20015 ;; This function calls:
 20016 ;;		_Timer0_ISR
 20017 ;; This function is called by:
 20018 ;;		Interrupt level 2
 20019 ;; This function uses a non-reentrant model
 20020 ;;
 20021                           
 20022                           	psect	intcode
 20023  001408                     __pintcode:
 20024                           	opt stack 0
 20025  001408                     _ISR_Function:
 20026                           	opt stack 14
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;incstack = 0
 20030  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20031  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 20032  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 20033  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 20034  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 20035  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 20036  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 20037  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 20038  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 20039  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 20040  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 20041  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 20042  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 20043  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 20044  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 20045  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 20046  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 20047  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 20048  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 20049                           
 20050                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 20051  001452  92F2               	bcf	intcon,1,c	;volatile
 20052                           
 20053                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 20054  001454  B4F2               	btfsc	intcon,2,c	;volatile
 20055  001456  AAF2               	btfss	intcon,5,c	;volatile
 20056  001458  D002               	goto	i2l1590
 20057                           
 20058                           ;ISR.c: 68: Timer0_ISR();
 20059  00145A  ECCD  F09B         	call	_Timer0_ISR	;wreg free
 20060  00145E                     i2l1590:
 20061  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 20062  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 20063  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 20064  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 20065  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 20066  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 20067  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 20068  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 20069  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 20070  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 20071  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 20072  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 20073  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 20074  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 20075  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 20076  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 20077  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 20078  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 20079  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20080  0014A8  0011               	retfie		f
 20081  0014AA                     __end_of_ISR_Function:
 20082                           	opt stack 0
 20083                           tosu	equ	0xFFF
 20084                           tosh	equ	0xFFE
 20085                           tosl	equ	0xFFD
 20086                           pclatu	equ	0xFFB
 20087                           pclath	equ	0xFFA
 20088                           tblptru	equ	0xFF8
 20089                           tblptrh	equ	0xFF7
 20090                           tblptrl	equ	0xFF6
 20091                           tablat	equ	0xFF5
 20092                           prodh	equ	0xFF4
 20093                           prodl	equ	0xFF3
 20094                           intcon	equ	0xFF2
 20095                           indf0	equ	0xFEF
 20096                           postinc0	equ	0xFEE
 20097                           fsr0h	equ	0xFEA
 20098                           fsr0l	equ	0xFE9
 20099                           wreg	equ	0xFE8
 20100                           indf1	equ	0xFE7
 20101                           postdec1	equ	0xFE5
 20102                           fsr1h	equ	0xFE2
 20103                           fsr1l	equ	0xFE1
 20104                           indf2	equ	0xFDF
 20105                           postinc2	equ	0xFDE
 20106                           postdec2	equ	0xFDD
 20107                           plusw2	equ	0xFDB
 20108                           fsr2h	equ	0xFDA
 20109                           fsr2l	equ	0xFD9
 20110                           status	equ	0xFD8
 20111                           
 20112 ;; *************** function _Timer0_ISR *****************
 20113 ;; Defined at:
 20114 ;;		line 94 in file "Library/Timer0.c"
 20115 ;; Parameters:    Size  Location     Type
 20116 ;;		None
 20117 ;; Auto vars:     Size  Location     Type
 20118 ;;		None
 20119 ;; Return value:  Size  Location     Type
 20120 ;;                  1    wreg      void 
 20121 ;; Registers used:
 20122 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20123 ;; Tracked objects:
 20124 ;;		On entry : 0/0
 20125 ;;		On exit  : 0/0
 20126 ;;		Unchanged: 0/0
 20127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20132 ;;Total ram usage:        0 bytes
 20133 ;; Hardware stack levels used:    1
 20134 ;; Hardware stack levels required when called:    5
 20135 ;; This function calls:
 20136 ;;		Absolute function
 20137 ;;		i2_Motor_Step
 20138 ;;		i2_Timer0_Stop
 20139 ;; This function is called by:
 20140 ;;		_ISR_Function
 20141 ;; This function uses a non-reentrant model
 20142 ;;
 20143                           
 20144                           	psect	text118
 20145  01379A                     __ptext118:
 20146                           	opt stack 0
 20147  01379A                     _Timer0_ISR:
 20148                           	opt stack 14
 20149                           
 20150                           ;Timer0.c: 96: Timer0_Stop();
 20151                           
 20152                           ;incstack = 0
 20153  01379A  EC9E  F09D         	call	i2_Timer0_Stop	;wreg free
 20154                           
 20155                           ;Timer0.c: 99: if (gISR != 0)
 20156  01379E  0100               	movlb	0	; () banked
 20157  0137A0  5160               	movf	_gISR& (0+255),w,b
 20158  0137A2  1161               	iorwf	(_gISR+1)& (0+255),w,b
 20159  0137A4  1162               	iorwf	(_gISR+2)& (0+255),w,b
 20160  0137A6  B4D8               	btfsc	status,2,c
 20161  0137A8  0012               	return	
 20162                           
 20163                           ; BSR set to: 0
 20164                           ;Timer0.c: 100: gISR();
 20165  0137AA  D801               	call	i2u1049_48
 20166  0137AC  0012               	return	
 20167  0137AE                     i2u1049_48:
 20168  0137AE  0005               	push	
 20169  0137B0  6EFA               	movwf	pclath,c
 20170  0137B2  5160               	movf	_gISR& (0+255),w,b
 20171  0137B4  6EFD               	movwf	tosl,c
 20172  0137B6  5161               	movf	(_gISR+1)& (0+255),w,b
 20173  0137B8  6EFE               	movwf	tosh,c
 20174  0137BA  5162               	movf	(_gISR+2)& (0+255),w,b
 20175  0137BC  6EFF               	movwf	tosu,c
 20176  0137BE  50FA               	movf	pclath,w,c
 20177  0137C0  0012               	return		;indir
 20178  0137C2                     __end_of_Timer0_ISR:
 20179                           	opt stack 0
 20180                           tosu	equ	0xFFF
 20181                           tosh	equ	0xFFE
 20182                           tosl	equ	0xFFD
 20183                           pclatu	equ	0xFFB
 20184                           pclath	equ	0xFFA
 20185                           tblptru	equ	0xFF8
 20186                           tblptrh	equ	0xFF7
 20187                           tblptrl	equ	0xFF6
 20188                           tablat	equ	0xFF5
 20189                           prodh	equ	0xFF4
 20190                           prodl	equ	0xFF3
 20191                           intcon	equ	0xFF2
 20192                           indf0	equ	0xFEF
 20193                           postinc0	equ	0xFEE
 20194                           fsr0h	equ	0xFEA
 20195                           fsr0l	equ	0xFE9
 20196                           wreg	equ	0xFE8
 20197                           indf1	equ	0xFE7
 20198                           postdec1	equ	0xFE5
 20199                           fsr1h	equ	0xFE2
 20200                           fsr1l	equ	0xFE1
 20201                           indf2	equ	0xFDF
 20202                           postinc2	equ	0xFDE
 20203                           postdec2	equ	0xFDD
 20204                           plusw2	equ	0xFDB
 20205                           fsr2h	equ	0xFDA
 20206                           fsr2l	equ	0xFD9
 20207                           status	equ	0xFD8
 20208                           
 20209 ;; *************** function i2_Motor_Step *****************
 20210 ;; Defined at:
 20211 ;;		line 75 in file "Library/Motor.c"
 20212 ;; Parameters:    Size  Location     Type
 20213 ;;		None
 20214 ;; Auto vars:     Size  Location     Type
 20215 ;;		None
 20216 ;; Return value:  Size  Location     Type
 20217 ;;                  1    wreg      void 
 20218 ;; Registers used:
 20219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20220 ;; Tracked objects:
 20221 ;;		On entry : 0/0
 20222 ;;		On exit  : 0/0
 20223 ;;		Unchanged: 0/0
 20224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20229 ;;Total ram usage:        2 bytes
 20230 ;; Hardware stack levels used:    1
 20231 ;; Hardware stack levels required when called:    4
 20232 ;; This function calls:
 20233 ;;		i2_MXK_Queue
 20234 ;;		i2_MXK_Release
 20235 ;;		i2_MXK_SwitchTo
 20236 ;;		i2_Port_SetPin
 20237 ;;		i2_Timer0_Restart
 20238 ;;		i2_Timer0_Stop
 20239 ;; This function is called by:
 20240 ;; This function uses a non-reentrant model
 20241 ;;
 20242                           
 20243                           	psect	text119
 20244  011D04                     __ptext119:
 20245                           	opt stack 0
 20246  011D04                     i2_Motor_Step:
 20247                           	opt stack 14
 20248                           
 20249                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 20250                           
 20251                           ;incstack = 0
 20252  011D04  0100               	movlb	0	; () banked
 20253  011D06  EE20 F004          	lfsr	2,4
 20254  011D0A  517B               	movf	_lMotor& (0+255),w,b
 20255  011D0C  26D9               	addwf	fsr2l,f,c
 20256  011D0E  517C               	movf	(_lMotor+1)& (0+255),w,b
 20257  011D10  22DA               	addwfc	fsr2h,f,c
 20258  011D12  50DF               	movf	indf2,w,c
 20259  011D14  ECCA  F09A         	call	i2_MXK_SwitchTo
 20260  011D18  0900               	iorlw	0
 20261  011D1A  B4D8               	btfsc	status,2,c
 20262  011D1C  D06A               	goto	i2l1627
 20263                           
 20264                           ;Motor.c: 78: {
 20265                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 20266  011D1E  C07B  FFD9         	movff	_lMotor,fsr2l
 20267  011D22  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20268  011D26  50DE               	movf	postinc2,w,c
 20269  011D28  10DE               	iorwf	postinc2,w,c
 20270  011D2A  B4D8               	btfsc	status,2,c
 20271  011D2C  D05D               	goto	i2l1628
 20272                           
 20273                           ;Motor.c: 80: {
 20274                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 20275  011D2E  C07B  FFD9         	movff	_lMotor,fsr2l
 20276  011D32  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20277  011D36  0E01               	movlw	1
 20278  011D38  BEDB               	btfsc	plusw2,7,c
 20279  011D3A  D022               	goto	i2l1629
 20280  011D3C  0E01               	movlw	1
 20281  011D3E  50DB               	movf	plusw2,w,c
 20282  011D40  E103               	bnz	i2u494_40
 20283  011D42  04DE               	decf	postinc2,w,c
 20284  011D44  A0D8               	btfss	status,0,c
 20285  011D46  D01C               	goto	i2l1629
 20286  011D48                     i2u494_40:
 20287                           
 20288                           ;Motor.c: 83: {
 20289                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 20290  011D48  C07B  FFD9         	movff	_lMotor,fsr2l
 20291  011D4C  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20292  011D50  28DE               	incf	postinc2,w,c
 20293  011D52  E104               	bnz	i2u495_40
 20294  011D54  0E7F               	movlw	127
 20295  011D56  18DE               	xorwf	postinc2,w,c
 20296  011D58  B4D8               	btfsc	status,2,c
 20297  011D5A  D007               	goto	i2l1630
 20298  011D5C                     i2u495_40:
 20299                           
 20300                           ;Motor.c: 85: lMotor->mDelta --;
 20301  011D5C  C07B  FFD9         	movff	_lMotor,fsr2l
 20302  011D60  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20303  011D64  06DE               	decf	postinc2,f,c
 20304  011D66  0E00               	movlw	0
 20305  011D68  5ADD               	subwfb	postdec2,f,c
 20306  011D6A                     i2l1630:
 20307                           
 20308                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 20309  011D6A  0E91               	movlw	low _PortE
 20310  011D6C  6E10               	movwf	i2Port_SetPin@pInput,c
 20311  011D6E  0E00               	movlw	high _PortE
 20312  011D70  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20313  011D72  0E00               	movlw	0
 20314  011D74  6E12               	movwf	i2Port_SetPin@pPin,c
 20315  011D76  0E01               	movlw	1
 20316  011D78  6E13               	movwf	i2Port_SetPin@pValue,c
 20317  011D7A  EC6A  F090         	call	i2_Port_SetPin	;wreg free
 20318                           
 20319                           ;Motor.c: 88: }
 20320  011D7E  D01B               	goto	i2l1631
 20321  011D80                     i2l1629:
 20322                           
 20323                           ;Motor.c: 89: else
 20324                           ;Motor.c: 90: {
 20325                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 20326  011D80  C07B  FFD9         	movff	_lMotor,fsr2l
 20327  011D84  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20328  011D88  04DE               	decf	postinc2,w,c
 20329  011D8A  E104               	bnz	i2u496_40
 20330  011D8C  0E80               	movlw	128
 20331  011D8E  18DE               	xorwf	postinc2,w,c
 20332  011D90  B4D8               	btfsc	status,2,c
 20333  011D92  D007               	goto	i2l1632
 20334  011D94                     i2u496_40:
 20335                           
 20336                           ;Motor.c: 92: lMotor->mDelta ++;
 20337  011D94  C07B  FFD9         	movff	_lMotor,fsr2l
 20338  011D98  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20339  011D9C  2ADE               	incf	postinc2,f,c
 20340  011D9E  0E00               	movlw	0
 20341  011DA0  22DD               	addwfc	postdec2,f,c
 20342  011DA2                     i2l1632:
 20343                           
 20344                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 20345  011DA2  0E91               	movlw	low _PortE
 20346  011DA4  6E10               	movwf	i2Port_SetPin@pInput,c
 20347  011DA6  0E00               	movlw	high _PortE
 20348  011DA8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20349  011DAA  0E00               	movlw	0
 20350  011DAC  6E12               	movwf	i2Port_SetPin@pPin,c
 20351  011DAE  0E00               	movlw	0
 20352  011DB0  6E13               	movwf	i2Port_SetPin@pValue,c
 20353  011DB2  EC6A  F090         	call	i2_Port_SetPin	;wreg free
 20354  011DB6                     i2l1631:
 20355                           
 20356                           ;Motor.c: 95: }
 20357                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 20358  011DB6  0E91               	movlw	low _PortE
 20359  011DB8  6E10               	movwf	i2Port_SetPin@pInput,c
 20360  011DBA  0E00               	movlw	high _PortE
 20361  011DBC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20362  011DBE  0E01               	movlw	1
 20363  011DC0  6E12               	movwf	i2Port_SetPin@pPin,c
 20364  011DC2  0E01               	movlw	1
 20365  011DC4  6E13               	movwf	i2Port_SetPin@pValue,c
 20366  011DC6  EC6A  F090         	call	i2_Port_SetPin	;wreg free
 20367                           
 20368                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 20369  011DCA  0E91               	movlw	low _PortE
 20370  011DCC  6E10               	movwf	i2Port_SetPin@pInput,c
 20371  011DCE  0E00               	movlw	high _PortE
 20372  011DD0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20373  011DD2  0E01               	movlw	1
 20374  011DD4  6E12               	movwf	i2Port_SetPin@pPin,c
 20375  011DD6  0E00               	movlw	0
 20376  011DD8  6E13               	movwf	i2Port_SetPin@pValue,c
 20377  011DDA  EC6A  F090         	call	i2_Port_SetPin	;wreg free
 20378                           
 20379                           ;Motor.c: 101: MXK_Release();
 20380  011DDE  ECA1  F09D         	call	i2_MXK_Release	;wreg free
 20381                           
 20382                           ;Motor.c: 102: Timer0_Restart();
 20383  011DE2  EC7D  F09D         	call	i2_Timer0_Restart	;wreg free
 20384                           
 20385                           ;Motor.c: 103: return;
 20386  011DE6  0012               	return	
 20387  011DE8                     i2l1628:
 20388                           
 20389                           ;Motor.c: 104: }
 20390                           ;Motor.c: 105: MXK_Release();
 20391  011DE8  ECA1  F09D         	call	i2_MXK_Release	;wreg free
 20392                           
 20393                           ;Motor.c: 106: Timer0_Stop();
 20394  011DEC  EC9E  F09D         	call	i2_Timer0_Stop	;wreg free
 20395                           
 20396                           ;Motor.c: 107: return;
 20397  011DF0  0012               	return	
 20398  011DF2                     i2l1627:
 20399                           
 20400                           ;Motor.c: 108: }
 20401                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 20402  011DF2  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 20403  011DF6  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 20404  011DFA  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 20405  011DFE  EC63  F09D         	call	i2_MXK_Queue	;wreg free
 20406  011E02  0012               	return		;funcret
 20407  011E04                     __end_ofi2_Motor_Step:
 20408                           	opt stack 0
 20409                           tosu	equ	0xFFF
 20410                           tosh	equ	0xFFE
 20411                           tosl	equ	0xFFD
 20412                           pclatu	equ	0xFFB
 20413                           pclath	equ	0xFFA
 20414                           tblptru	equ	0xFF8
 20415                           tblptrh	equ	0xFF7
 20416                           tblptrl	equ	0xFF6
 20417                           tablat	equ	0xFF5
 20418                           prodh	equ	0xFF4
 20419                           prodl	equ	0xFF3
 20420                           intcon	equ	0xFF2
 20421                           indf0	equ	0xFEF
 20422                           postinc0	equ	0xFEE
 20423                           fsr0h	equ	0xFEA
 20424                           fsr0l	equ	0xFE9
 20425                           wreg	equ	0xFE8
 20426                           indf1	equ	0xFE7
 20427                           postdec1	equ	0xFE5
 20428                           fsr1h	equ	0xFE2
 20429                           fsr1l	equ	0xFE1
 20430                           indf2	equ	0xFDF
 20431                           postinc2	equ	0xFDE
 20432                           postdec2	equ	0xFDD
 20433                           plusw2	equ	0xFDB
 20434                           fsr2h	equ	0xFDA
 20435                           fsr2l	equ	0xFD9
 20436                           status	equ	0xFD8
 20437                           
 20438 ;; *************** function i2_Timer0_Stop *****************
 20439 ;; Defined at:
 20440 ;;		line 89 in file "Library/Timer0.c"
 20441 ;; Parameters:    Size  Location     Type
 20442 ;;		None
 20443 ;; Auto vars:     Size  Location     Type
 20444 ;;		None
 20445 ;; Return value:  Size  Location     Type
 20446 ;;                  1    wreg      void 
 20447 ;; Registers used:
 20448 ;;		None
 20449 ;; Tracked objects:
 20450 ;;		On entry : 0/0
 20451 ;;		On exit  : 0/0
 20452 ;;		Unchanged: 0/0
 20453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20458 ;;Total ram usage:        0 bytes
 20459 ;; Hardware stack levels used:    1
 20460 ;; This function calls:
 20461 ;;		Nothing
 20462 ;; This function is called by:
 20463 ;;		_Timer0_ISR
 20464 ;;		i2_Motor_Step
 20465 ;; This function uses a non-reentrant model
 20466 ;;
 20467                           
 20468                           	psect	text120
 20469  013B3C                     __ptext120:
 20470                           	opt stack 0
 20471  013B3C                     i2_Timer0_Stop:
 20472                           	opt stack 18
 20473                           
 20474                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 20475                           
 20476                           ;incstack = 0
 20477  013B3C  9AF2               	bcf	intcon,5,c	;volatile
 20478                           
 20479                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 20480  013B3E  94F2               	bcf	intcon,2,c	;volatile
 20481  013B40  0012               	return		;funcret
 20482  013B42                     __end_ofi2_Timer0_Stop:
 20483                           	opt stack 0
 20484                           tosu	equ	0xFFF
 20485                           tosh	equ	0xFFE
 20486                           tosl	equ	0xFFD
 20487                           pclatu	equ	0xFFB
 20488                           pclath	equ	0xFFA
 20489                           tblptru	equ	0xFF8
 20490                           tblptrh	equ	0xFF7
 20491                           tblptrl	equ	0xFF6
 20492                           tablat	equ	0xFF5
 20493                           prodh	equ	0xFF4
 20494                           prodl	equ	0xFF3
 20495                           intcon	equ	0xFF2
 20496                           indf0	equ	0xFEF
 20497                           postinc0	equ	0xFEE
 20498                           fsr0h	equ	0xFEA
 20499                           fsr0l	equ	0xFE9
 20500                           wreg	equ	0xFE8
 20501                           indf1	equ	0xFE7
 20502                           postdec1	equ	0xFE5
 20503                           fsr1h	equ	0xFE2
 20504                           fsr1l	equ	0xFE1
 20505                           indf2	equ	0xFDF
 20506                           postinc2	equ	0xFDE
 20507                           postdec2	equ	0xFDD
 20508                           plusw2	equ	0xFDB
 20509                           fsr2h	equ	0xFDA
 20510                           fsr2l	equ	0xFD9
 20511                           status	equ	0xFD8
 20512                           
 20513 ;; *************** function i2_Timer0_Restart *****************
 20514 ;; Defined at:
 20515 ;;		line 83 in file "Library/Timer0.c"
 20516 ;; Parameters:    Size  Location     Type
 20517 ;;		None
 20518 ;; Auto vars:     Size  Location     Type
 20519 ;;		None
 20520 ;; Return value:  Size  Location     Type
 20521 ;;                  1    wreg      void 
 20522 ;; Registers used:
 20523 ;;		None
 20524 ;; Tracked objects:
 20525 ;;		On entry : 0/0
 20526 ;;		On exit  : 0/0
 20527 ;;		Unchanged: 0/0
 20528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20533 ;;Total ram usage:        0 bytes
 20534 ;; Hardware stack levels used:    1
 20535 ;; This function calls:
 20536 ;;		Nothing
 20537 ;; This function is called by:
 20538 ;;		i2_Motor_Step
 20539 ;; This function uses a non-reentrant model
 20540 ;;
 20541                           
 20542                           	psect	text121
 20543  013AFA                     __ptext121:
 20544                           	opt stack 0
 20545  013AFA                     i2_Timer0_Restart:
 20546                           	opt stack 17
 20547                           
 20548                           ;Timer0.c: 85: TMR0 = COUNTER;
 20549                           
 20550                           ;incstack = 0
 20551  013AFA  C02F  FFD6         	movff	_COUNTER,4054	;volatile
 20552  013AFE  C030  FFD7         	movff	_COUNTER+1,4055	;volatile
 20553                           
 20554                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 20555  013B02  8AF2               	bsf	intcon,5,c	;volatile
 20556  013B04  0012               	return		;funcret
 20557  013B06                     __end_ofi2_Timer0_Restart:
 20558                           	opt stack 0
 20559                           tosu	equ	0xFFF
 20560                           tosh	equ	0xFFE
 20561                           tosl	equ	0xFFD
 20562                           pclatu	equ	0xFFB
 20563                           pclath	equ	0xFFA
 20564                           tblptru	equ	0xFF8
 20565                           tblptrh	equ	0xFF7
 20566                           tblptrl	equ	0xFF6
 20567                           tablat	equ	0xFF5
 20568                           prodh	equ	0xFF4
 20569                           prodl	equ	0xFF3
 20570                           intcon	equ	0xFF2
 20571                           indf0	equ	0xFEF
 20572                           postinc0	equ	0xFEE
 20573                           fsr0h	equ	0xFEA
 20574                           fsr0l	equ	0xFE9
 20575                           wreg	equ	0xFE8
 20576                           indf1	equ	0xFE7
 20577                           postdec1	equ	0xFE5
 20578                           fsr1h	equ	0xFE2
 20579                           fsr1l	equ	0xFE1
 20580                           indf2	equ	0xFDF
 20581                           postinc2	equ	0xFDE
 20582                           postdec2	equ	0xFDD
 20583                           plusw2	equ	0xFDB
 20584                           fsr2h	equ	0xFDA
 20585                           fsr2l	equ	0xFD9
 20586                           status	equ	0xFD8
 20587                           
 20588 ;; *************** function i2_Port_SetPin *****************
 20589 ;; Defined at:
 20590 ;;		line 247 in file "Library/Port.c"
 20591 ;; Parameters:    Size  Location     Type
 20592 ;;  pInput          2   15[COMRAM] const PTR struct Port
 20593 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 20594 ;;  pPin            1   17[COMRAM] enum E6750
 20595 ;;  pValue          1   18[COMRAM] unsigned char 
 20596 ;; Auto vars:     Size  Location     Type
 20597 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 20598 ;; Return value:  Size  Location     Type
 20599 ;;                  1    wreg      void 
 20600 ;; Registers used:
 20601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20602 ;; Tracked objects:
 20603 ;;		On entry : 0/0
 20604 ;;		On exit  : 0/0
 20605 ;;		Unchanged: 0/0
 20606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20608 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20610 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20611 ;;Total ram usage:        5 bytes
 20612 ;; Hardware stack levels used:    1
 20613 ;; Hardware stack levels required when called:    3
 20614 ;; This function calls:
 20615 ;;		i2_Byte_SetBit
 20616 ;;		i2_Word_GetPair
 20617 ;; This function is called by:
 20618 ;;		i2_Motor_Step
 20619 ;; This function uses a non-reentrant model
 20620 ;;
 20621                           
 20622                           	psect	text122
 20623  0120D4                     __ptext122:
 20624                           	opt stack 0
 20625  0120D4                     i2_Port_SetPin:
 20626                           	opt stack 14
 20627                           
 20628                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 20629                           
 20630                           ;incstack = 0
 20631  0120D4  0E08               	movlw	8
 20632  0120D6  2410               	addwf	i2Port_SetPin@pInput,w,c
 20633  0120D8  6E0D               	movwf	i2Word_GetPair@pInput,c
 20634  0120DA  0E00               	movlw	0
 20635  0120DC  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 20636  0120DE  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 20637  0120E0  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 20638  0120E4  EC4A  F09B         	call	i2_Word_GetPair	;wreg free
 20639  0120E8  6E14               	movwf	i2Port_SetPin@Type,c
 20640                           
 20641                           ;Port.c: 250: switch (Type)
 20642  0120EA  D03B               	goto	i2l427
 20643  0120EC                     
 20644                           ;Port.c: 256: pValue &= 1;
 20645  0120EC  0E01               	movlw	1
 20646  0120EE  1613               	andwf	i2Port_SetPin@pValue,f,c
 20647                           
 20648                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 20649  0120F0  EE20 F002          	lfsr	2,2
 20650  0120F4  5010               	movf	i2Port_SetPin@pInput,w,c
 20651  0120F6  26D9               	addwf	fsr2l,f,c
 20652  0120F8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 20653  0120FA  22DA               	addwfc	fsr2h,f,c
 20654  0120FC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 20655  012100  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 20656  012104  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 20657  012108  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 20658  01210C  ECE8  F098         	call	i2_Byte_SetBit	;wreg free
 20659                           
 20660                           ;Port.c: 258: break;
 20661  012110  0012               	return	
 20662  012112                     
 20663                           ;Port.c: 261: pValue &= 1;
 20664  012112  0E01               	movlw	1
 20665  012114  1613               	andwf	i2Port_SetPin@pValue,f,c
 20666                           
 20667                           ;Port.c: 262: pValue ^= 1;
 20668  012116  0E01               	movlw	1
 20669  012118  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 20670                           
 20671                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 20672  01211A  EE20 F002          	lfsr	2,2
 20673  01211E  5010               	movf	i2Port_SetPin@pInput,w,c
 20674  012120  26D9               	addwf	fsr2l,f,c
 20675  012122  5011               	movf	i2Port_SetPin@pInput+1,w,c
 20676  012124  22DA               	addwfc	fsr2h,f,c
 20677  012126  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 20678  01212A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 20679  01212E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 20680  012132  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 20681  012136  ECE8  F098         	call	i2_Byte_SetBit	;wreg free
 20682                           
 20683                           ;Port.c: 264: break;
 20684  01213A  0012               	return	
 20685  01213C                     
 20686                           ;Port.c: 266: pValue &= 1;
 20687  01213C  0E01               	movlw	1
 20688  01213E  1613               	andwf	i2Port_SetPin@pValue,f,c
 20689                           
 20690                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 20691  012140  EE20 F004          	lfsr	2,4
 20692  012144  5010               	movf	i2Port_SetPin@pInput,w,c
 20693  012146  26D9               	addwf	fsr2l,f,c
 20694  012148  5011               	movf	i2Port_SetPin@pInput+1,w,c
 20695  01214A  22DA               	addwfc	fsr2h,f,c
 20696  01214C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 20697  012150  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 20698  012154  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 20699  012158  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 20700  01215C  ECE8  F098         	call	i2_Byte_SetBit	;wreg free
 20701                           
 20702                           ;Port.c: 269: }
 20703                           
 20704                           ;Port.c: 268: break;
 20705  012160  0012               	return	
 20706  012162                     i2l427:
 20707  012162  5014               	movf	i2Port_SetPin@Type,w,c
 20708                           
 20709                           ; Switch size 1, requested type "space"
 20710                           ; Number of cases is 4, Range of values is 0 to 3
 20711                           ; switch strategies available:
 20712                           ; Name         Instructions Cycles
 20713                           ; simple_byte           13     7 (average)
 20714                           ;	Chosen strategy is simple_byte
 20715  012164  0A00               	xorlw	0	; case 0
 20716  012166  B4D8               	btfsc	status,2,c
 20717  012168  0012               	return	
 20718  01216A  0A01               	xorlw	1	; case 1
 20719  01216C  B4D8               	btfsc	status,2,c
 20720  01216E  D7BE               	goto	i2l430
 20721  012170  0A03               	xorlw	3	; case 2
 20722  012172  B4D8               	btfsc	status,2,c
 20723  012174  D7CE               	goto	i2l432
 20724  012176  0A01               	xorlw	1	; case 3
 20725  012178  A4D8               	btfss	status,2,c
 20726  01217A  0012               	return	
 20727  01217C  D7DF               	goto	i2l433
 20728  01217E                     __end_ofi2_Port_SetPin:
 20729                           	opt stack 0
 20730                           tosu	equ	0xFFF
 20731                           tosh	equ	0xFFE
 20732                           tosl	equ	0xFFD
 20733                           pclatu	equ	0xFFB
 20734                           pclath	equ	0xFFA
 20735                           tblptru	equ	0xFF8
 20736                           tblptrh	equ	0xFF7
 20737                           tblptrl	equ	0xFF6
 20738                           tablat	equ	0xFF5
 20739                           prodh	equ	0xFF4
 20740                           prodl	equ	0xFF3
 20741                           intcon	equ	0xFF2
 20742                           indf0	equ	0xFEF
 20743                           postinc0	equ	0xFEE
 20744                           fsr0h	equ	0xFEA
 20745                           fsr0l	equ	0xFE9
 20746                           wreg	equ	0xFE8
 20747                           indf1	equ	0xFE7
 20748                           postdec1	equ	0xFE5
 20749                           fsr1h	equ	0xFE2
 20750                           fsr1l	equ	0xFE1
 20751                           indf2	equ	0xFDF
 20752                           postinc2	equ	0xFDE
 20753                           postdec2	equ	0xFDD
 20754                           plusw2	equ	0xFDB
 20755                           fsr2h	equ	0xFDA
 20756                           fsr2l	equ	0xFD9
 20757                           status	equ	0xFD8
 20758                           
 20759 ;; *************** function i2_Word_GetPair *****************
 20760 ;; Defined at:
 20761 ;;		line 156 in file "Library/Types.c"
 20762 ;; Parameters:    Size  Location     Type
 20763 ;;  pInput          2   12[COMRAM] PTR struct Word
 20764 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20765 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 20766 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 20767 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20768 ;;  pPair           1   14[COMRAM] unsigned char 
 20769 ;; Auto vars:     Size  Location     Type
 20770 ;;		None
 20771 ;; Return value:  Size  Location     Type
 20772 ;;                  1    wreg      unsigned char 
 20773 ;; Registers used:
 20774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20775 ;; Tracked objects:
 20776 ;;		On entry : 0/0
 20777 ;;		On exit  : 0/0
 20778 ;;		Unchanged: 0/0
 20779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20780 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20783 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20784 ;;Total ram usage:        3 bytes
 20785 ;; Hardware stack levels used:    1
 20786 ;; Hardware stack levels required when called:    2
 20787 ;; This function calls:
 20788 ;;		i2_Byte_GetPair
 20789 ;; This function is called by:
 20790 ;;		i2_Port_SetPin
 20791 ;; This function uses a non-reentrant model
 20792 ;;
 20793                           
 20794                           	psect	text123
 20795  013694                     __ptext123:
 20796                           	opt stack 0
 20797  013694                     i2_Word_GetPair:
 20798                           	opt stack 14
 20799                           
 20800                           ;Types.c: 158: if (pPair >= 4)
 20801                           
 20802                           ;incstack = 0
 20803  013694  0E03               	movlw	3
 20804  013696  640F               	cpfsgt	i2Word_GetPair@pPair,c
 20805  013698  D00C               	goto	i2l781
 20806                           
 20807                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 20808  01369A  0E01               	movlw	1
 20809  01369C  240D               	addwf	i2Word_GetPair@pInput,w,c
 20810  01369E  6E0A               	movwf	i2Byte_GetPair@pInput,c
 20811  0136A0  0E00               	movlw	0
 20812  0136A2  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 20813  0136A4  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 20814  0136A6  500F               	movf	i2Word_GetPair@pPair,w,c
 20815  0136A8  0FFC               	addlw	252
 20816  0136AA  6E0C               	movwf	i2Byte_GetPair@pPair,c
 20817  0136AC  EC91  F09C         	call	i2_Byte_GetPair	;wreg free
 20818  0136B0  0012               	return	
 20819  0136B2                     i2l781:
 20820                           
 20821                           ;Types.c: 160: else
 20822                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 20823  0136B2  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 20824  0136B6  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 20825  0136BA  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 20826  0136BE  EC91  F09C         	call	i2_Byte_GetPair	;wreg free
 20827  0136C2  0012               	return	
 20828  0136C4                     __end_ofi2_Word_GetPair:
 20829                           	opt stack 0
 20830                           tosu	equ	0xFFF
 20831                           tosh	equ	0xFFE
 20832                           tosl	equ	0xFFD
 20833                           pclatu	equ	0xFFB
 20834                           pclath	equ	0xFFA
 20835                           tblptru	equ	0xFF8
 20836                           tblptrh	equ	0xFF7
 20837                           tblptrl	equ	0xFF6
 20838                           tablat	equ	0xFF5
 20839                           prodh	equ	0xFF4
 20840                           prodl	equ	0xFF3
 20841                           intcon	equ	0xFF2
 20842                           indf0	equ	0xFEF
 20843                           postinc0	equ	0xFEE
 20844                           fsr0h	equ	0xFEA
 20845                           fsr0l	equ	0xFE9
 20846                           wreg	equ	0xFE8
 20847                           indf1	equ	0xFE7
 20848                           postdec1	equ	0xFE5
 20849                           fsr1h	equ	0xFE2
 20850                           fsr1l	equ	0xFE1
 20851                           indf2	equ	0xFDF
 20852                           postinc2	equ	0xFDE
 20853                           postdec2	equ	0xFDD
 20854                           plusw2	equ	0xFDB
 20855                           fsr2h	equ	0xFDA
 20856                           fsr2l	equ	0xFD9
 20857                           status	equ	0xFD8
 20858                           
 20859 ;; *************** function i2_Byte_GetPair *****************
 20860 ;; Defined at:
 20861 ;;		line 87 in file "Library/Types.c"
 20862 ;; Parameters:    Size  Location     Type
 20863 ;;  pInput          2    9[COMRAM] PTR struct Byte
 20864 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20865 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20866 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20867 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20868 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20869 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20870 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20871 ;;		 -> NULL(0), 
 20872 ;;  pPair           1   11[COMRAM] unsigned char 
 20873 ;; Auto vars:     Size  Location     Type
 20874 ;;		None
 20875 ;; Return value:  Size  Location     Type
 20876 ;;                  1    wreg      unsigned char 
 20877 ;; Registers used:
 20878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20879 ;; Tracked objects:
 20880 ;;		On entry : 0/0
 20881 ;;		On exit  : 0/0
 20882 ;;		Unchanged: 0/0
 20883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20884 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20887 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20888 ;;Total ram usage:        3 bytes
 20889 ;; Hardware stack levels used:    1
 20890 ;; Hardware stack levels required when called:    1
 20891 ;; This function calls:
 20892 ;;		i2_Byte_GetZone
 20893 ;; This function is called by:
 20894 ;;		i2_Word_GetPair
 20895 ;; This function uses a non-reentrant model
 20896 ;;
 20897                           
 20898                           	psect	text124
 20899  013922                     __ptext124:
 20900                           	opt stack 0
 20901  013922                     i2_Byte_GetPair:
 20902                           	opt stack 14
 20903                           
 20904                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 20905                           
 20906                           ;incstack = 0
 20907  013922  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 20908  013926  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 20909  01392A  0E04               	movlw	4
 20910  01392C  6E03               	movwf	i2Byte_GetZone@pMax,c
 20911  01392E  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 20912  013932  0E02               	movlw	2
 20913  013934  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 20914  013936  EC0A  F095         	call	i2_Byte_GetZone	;wreg free
 20915  01393A  0012               	return	
 20916  01393C                     __end_ofi2_Byte_GetPair:
 20917                           	opt stack 0
 20918                           tosu	equ	0xFFF
 20919                           tosh	equ	0xFFE
 20920                           tosl	equ	0xFFD
 20921                           pclatu	equ	0xFFB
 20922                           pclath	equ	0xFFA
 20923                           tblptru	equ	0xFF8
 20924                           tblptrh	equ	0xFF7
 20925                           tblptrl	equ	0xFF6
 20926                           tablat	equ	0xFF5
 20927                           prodh	equ	0xFF4
 20928                           prodl	equ	0xFF3
 20929                           intcon	equ	0xFF2
 20930                           indf0	equ	0xFEF
 20931                           postinc0	equ	0xFEE
 20932                           fsr0h	equ	0xFEA
 20933                           fsr0l	equ	0xFE9
 20934                           wreg	equ	0xFE8
 20935                           indf1	equ	0xFE7
 20936                           postdec1	equ	0xFE5
 20937                           fsr1h	equ	0xFE2
 20938                           fsr1l	equ	0xFE1
 20939                           indf2	equ	0xFDF
 20940                           postinc2	equ	0xFDE
 20941                           postdec2	equ	0xFDD
 20942                           plusw2	equ	0xFDB
 20943                           fsr2h	equ	0xFDA
 20944                           fsr2l	equ	0xFD9
 20945                           status	equ	0xFD8
 20946                           
 20947 ;; *************** function i2_Byte_GetZone *****************
 20948 ;; Defined at:
 20949 ;;		line 64 in file "Library/Types.c"
 20950 ;; Parameters:    Size  Location     Type
 20951 ;;  pInput          2    0[COMRAM] PTR struct Byte
 20952 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20953 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20954 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20955 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20956 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20957 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20958 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20959 ;;		 -> NULL(0), 
 20960 ;;  pMax            1    2[COMRAM] unsigned char 
 20961 ;;  pChunk          1    3[COMRAM] unsigned char 
 20962 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 20963 ;; Auto vars:     Size  Location     Type
 20964 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 20965 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 20966 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 20967 ;; Return value:  Size  Location     Type
 20968 ;;                  1    wreg      unsigned char 
 20969 ;; Registers used:
 20970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20971 ;; Tracked objects:
 20972 ;;		On entry : 0/0
 20973 ;;		On exit  : 0/0
 20974 ;;		Unchanged: 0/0
 20975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20976 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20977 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20978 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20979 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20980 ;;Total ram usage:        9 bytes
 20981 ;; Hardware stack levels used:    1
 20982 ;; This function calls:
 20983 ;;		Nothing
 20984 ;; This function is called by:
 20985 ;;		i2_Byte_GetPair
 20986 ;; This function uses a non-reentrant model
 20987 ;;
 20988                           
 20989                           	psect	text125
 20990  012A14                     __ptext125:
 20991                           	opt stack 0
 20992  012A14                     i2_Byte_GetZone:
 20993                           	opt stack 14
 20994                           
 20995                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 20996                           
 20997                           ;incstack = 0
 20998  012A14  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 20999  012A18  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 21000  012A1C  0E00               	movlw	low (__mediumconst shr (0+16))
 21001  012A1E  6EF8               	movwf	tblptru,c
 21002  012A20  0E0F               	movlw	(high __ramtop+-1)
 21003  012A22  64F7               	cpfsgt	tblptrh,c
 21004  012A24  D003               	bra	i2u353_47
 21005  012A26  0008               	tblrd		*
 21006  012A28  50F5               	movf	tablat,w,c
 21007  012A2A  D005               	bra	i2u353_40
 21008  012A2C                     i2u353_47:
 21009  012A2C  CFF6 FFE9          	movff	tblptrl,fsr0l
 21010  012A30  CFF7 FFEA          	movff	tblptrh,fsr0h
 21011  012A34  50EF               	movf	indf0,w,c
 21012  012A36                     i2u353_40:
 21013  012A36  6E09               	movwf	i2Byte_GetZone@Output,c
 21014                           
 21015                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 21016  012A38  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 21017  012A3A  0D01               	mullw	1
 21018  012A3C  0EC7               	movlw	low _MASKS
 21019  012A3E  24F3               	addwf	prodl,w,c
 21020  012A40  6EF6               	movwf	tblptrl,c
 21021  012A42  0EFC               	movlw	high _MASKS
 21022  012A44  20F4               	addwfc	prodh,w,c
 21023  012A46  6EF7               	movwf	tblptrh,c
 21024  012A48                     	if	1	;There are 3 active tblptr bytes
 21025  012A48  6AF8               	clrf	tblptru,c
 21026  012A4A  0E00               	movlw	low (__mediumconst shr (0+16))
 21027  012A4C  22F8               	addwfc	tblptru,f,c
 21028  012A4E                     	endif
 21029  012A4E  0008               	tblrd		*
 21030  012A50  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 21031                           
 21032                           ;Types.c: 68: UINT8 Offset = 0;
 21033  012A54  0E00               	movlw	0
 21034  012A56  6E08               	movwf	i2Byte_GetZone@Offset,c
 21035                           
 21036                           ;Types.c: 70: while (pChunk >= pMax)
 21037  012A58  D003               	goto	i2l732
 21038  012A5A                     
 21039                           ;Types.c: 71: {
 21040                           ;Types.c: 72: pChunk -= pMax;
 21041  012A5A  5003               	movf	i2Byte_GetZone@pMax,w,c
 21042  012A5C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 21043                           
 21044                           ;Types.c: 73: Offset += 1;
 21045  012A5E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 21046  012A60                     i2l732:
 21047  012A60  5003               	movf	i2Byte_GetZone@pMax,w,c
 21048  012A62  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 21049  012A64  B0D8               	btfsc	status,0,c
 21050  012A66  D7F9               	goto	i2l733
 21051                           
 21052                           ;Types.c: 74: }
 21053                           ;Types.c: 75: pChunk *= pChunkSize;
 21054  012A68  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 21055  012A6A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 21056  012A6C  50F3               	movf	prodl,w,c
 21057  012A6E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 21058                           
 21059                           ;Types.c: 76: pChunk += Offset;
 21060  012A70  5008               	movf	i2Byte_GetZone@Offset,w,c
 21061  012A72  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 21062                           
 21063                           ;Types.c: 78: Output >>= pChunk;
 21064  012A74  2804               	incf	i2Byte_GetZone@pChunk,w,c
 21065  012A76  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 21066  012A78  D002               	goto	i2u355_40
 21067  012A7A                     i2u355_45:
 21068  012A7A  90D8               	bcf	status,0,c
 21069  012A7C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 21070  012A7E                     i2u355_40:
 21071  012A7E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 21072  012A80  D7FC               	goto	i2u355_45
 21073                           
 21074                           ;Types.c: 79: Output &= MASK;
 21075  012A82  5007               	movf	i2Byte_GetZone@MASK,w,c
 21076  012A84  1609               	andwf	i2Byte_GetZone@Output,f,c
 21077                           
 21078                           ;Types.c: 80: return Output;
 21079  012A86  5009               	movf	i2Byte_GetZone@Output,w,c
 21080  012A88  0012               	return	
 21081  012A8A                     __end_ofi2_Byte_GetZone:
 21082                           	opt stack 0
 21083                           tosu	equ	0xFFF
 21084                           tosh	equ	0xFFE
 21085                           tosl	equ	0xFFD
 21086                           pclatu	equ	0xFFB
 21087                           pclath	equ	0xFFA
 21088                           tblptru	equ	0xFF8
 21089                           tblptrh	equ	0xFF7
 21090                           tblptrl	equ	0xFF6
 21091                           tablat	equ	0xFF5
 21092                           prodh	equ	0xFF4
 21093                           prodl	equ	0xFF3
 21094                           intcon	equ	0xFF2
 21095                           indf0	equ	0xFEF
 21096                           postinc0	equ	0xFEE
 21097                           fsr0h	equ	0xFEA
 21098                           fsr0l	equ	0xFE9
 21099                           wreg	equ	0xFE8
 21100                           indf1	equ	0xFE7
 21101                           postdec1	equ	0xFE5
 21102                           fsr1h	equ	0xFE2
 21103                           fsr1l	equ	0xFE1
 21104                           indf2	equ	0xFDF
 21105                           postinc2	equ	0xFDE
 21106                           postdec2	equ	0xFDD
 21107                           plusw2	equ	0xFDB
 21108                           fsr2h	equ	0xFDA
 21109                           fsr2l	equ	0xFD9
 21110                           status	equ	0xFD8
 21111                           
 21112 ;; *************** function i2_Byte_SetBit *****************
 21113 ;; Defined at:
 21114 ;;		line 32 in file "Library/Types.c"
 21115 ;; Parameters:    Size  Location     Type
 21116 ;;  pInput          2    0[COMRAM] PTR struct Byte
 21117 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 21118 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 21119 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 21120 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 21121 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 21122 ;;		 -> NULL(0), 
 21123 ;;  pBit            1    2[COMRAM] unsigned char 
 21124 ;;  pValue          1    3[COMRAM] unsigned char 
 21125 ;; Auto vars:     Size  Location     Type
 21126 ;;		None
 21127 ;; Return value:  Size  Location     Type
 21128 ;;                  1    wreg      void 
 21129 ;; Registers used:
 21130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21131 ;; Tracked objects:
 21132 ;;		On entry : 0/0
 21133 ;;		On exit  : 0/0
 21134 ;;		Unchanged: 0/0
 21135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21138 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21139 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21140 ;;Total ram usage:        7 bytes
 21141 ;; Hardware stack levels used:    1
 21142 ;; This function calls:
 21143 ;;		Nothing
 21144 ;; This function is called by:
 21145 ;;		i2_Port_SetPin
 21146 ;; This function uses a non-reentrant model
 21147 ;;
 21148                           
 21149                           	psect	text126
 21150  0131D0                     __ptext126:
 21151                           	opt stack 0
 21152  0131D0                     i2_Byte_SetBit:
 21153                           	opt stack 16
 21154                           
 21155                           ;Types.c: 34: pValue &= 1;
 21156                           
 21157                           ;incstack = 0
 21158  0131D0  0E01               	movlw	1
 21159  0131D2  1604               	andwf	i2Byte_SetBit@pValue,f,c
 21160                           
 21161                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 21162  0131D4  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 21163  0131D8  0E01               	movlw	1
 21164  0131DA  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 21165  0131DC  2A05               	incf	??i2_Byte_SetBit,f,c
 21166  0131DE  D002               	goto	i2u401_44
 21167  0131E0                     i2u401_45:
 21168  0131E0  90D8               	bcf	status,0,c
 21169  0131E2  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 21170  0131E4                     i2u401_44:
 21171  0131E4  2E05               	decfsz	??i2_Byte_SetBit,f,c
 21172  0131E6  D7FC               	goto	i2u401_45
 21173  0131E8  5006               	movf	??i2_Byte_SetBit+1,w,c
 21174  0131EA  0AFF               	xorlw	255
 21175  0131EC  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 21176  0131EE  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 21177  0131F2  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 21178  0131F6  5007               	movf	??i2_Byte_SetBit+2,w,c
 21179  0131F8  16DF               	andwf	indf2,f,c
 21180                           
 21181                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 21182  0131FA  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 21183  0131FE  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 21184  013202  2A05               	incf	??i2_Byte_SetBit,f,c
 21185  013204  D002               	goto	i2u402_44
 21186  013206                     i2u402_45:
 21187  013206  90D8               	bcf	status,0,c
 21188  013208  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 21189  01320A                     i2u402_44:
 21190  01320A  2E05               	decfsz	??i2_Byte_SetBit,f,c
 21191  01320C  D7FC               	goto	i2u402_45
 21192  01320E  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 21193  013212  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 21194  013216  5006               	movf	??i2_Byte_SetBit+1,w,c
 21195  013218  12DF               	iorwf	indf2,f,c
 21196  01321A  0012               	return		;funcret
 21197  01321C                     __end_ofi2_Byte_SetBit:
 21198                           	opt stack 0
 21199                           tosu	equ	0xFFF
 21200                           tosh	equ	0xFFE
 21201                           tosl	equ	0xFFD
 21202                           pclatu	equ	0xFFB
 21203                           pclath	equ	0xFFA
 21204                           tblptru	equ	0xFF8
 21205                           tblptrh	equ	0xFF7
 21206                           tblptrl	equ	0xFF6
 21207                           tablat	equ	0xFF5
 21208                           prodh	equ	0xFF4
 21209                           prodl	equ	0xFF3
 21210                           intcon	equ	0xFF2
 21211                           indf0	equ	0xFEF
 21212                           postinc0	equ	0xFEE
 21213                           fsr0h	equ	0xFEA
 21214                           fsr0l	equ	0xFE9
 21215                           wreg	equ	0xFE8
 21216                           indf1	equ	0xFE7
 21217                           postdec1	equ	0xFE5
 21218                           fsr1h	equ	0xFE2
 21219                           fsr1l	equ	0xFE1
 21220                           indf2	equ	0xFDF
 21221                           postinc2	equ	0xFDE
 21222                           postdec2	equ	0xFDD
 21223                           plusw2	equ	0xFDB
 21224                           fsr2h	equ	0xFDA
 21225                           fsr2l	equ	0xFD9
 21226                           status	equ	0xFD8
 21227                           
 21228 ;; *************** function i2_MXK_SwitchTo *****************
 21229 ;; Defined at:
 21230 ;;		line 105 in file "Library/MXK.c"
 21231 ;; Parameters:    Size  Location     Type
 21232 ;;  pModule         1    wreg     enum E6927
 21233 ;; Auto vars:     Size  Location     Type
 21234 ;;  pModule         1    7[COMRAM] enum E6927
 21235 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 21236 ;; Return value:  Size  Location     Type
 21237 ;;                  1    wreg      unsigned char 
 21238 ;; Registers used:
 21239 ;;		wreg, status,2, status,0, cstack
 21240 ;; Tracked objects:
 21241 ;;		On entry : 0/0
 21242 ;;		On exit  : 0/0
 21243 ;;		Unchanged: 0/0
 21244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21248 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21249 ;;Total ram usage:        2 bytes
 21250 ;; Hardware stack levels used:    1
 21251 ;; Hardware stack levels required when called:    1
 21252 ;; This function calls:
 21253 ;;		i2_delay_us
 21254 ;; This function is called by:
 21255 ;;		i2_Motor_Step
 21256 ;; This function uses a non-reentrant model
 21257 ;;
 21258                           
 21259                           	psect	text127
 21260  013594                     __ptext127:
 21261                           	opt stack 0
 21262  013594                     i2_MXK_SwitchTo:
 21263                           	opt stack 16
 21264                           
 21265                           ;incstack = 0
 21266                           ;i2MXK_SwitchTo@pModule stored from wreg
 21267  013594  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 21268                           
 21269                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 21270  013596  5086               	movf	3974,w,c	;volatile
 21271  013598  0B0F               	andlw	15
 21272  01359A  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 21273                           
 21274                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 21275  01359C  504B               	movf	_Bus_State,w,c
 21276  01359E  A4D8               	btfss	status,2,c
 21277  0135A0  D002               	goto	i2l1730
 21278                           
 21279                           ;MXK.c: 110: return 0;
 21280  0135A2  0E00               	movlw	0
 21281  0135A4  0012               	return	
 21282  0135A6                     i2l1730:
 21283                           
 21284                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 21285  0135A6  0E00               	movlw	0
 21286  0135A8  6E4B               	movwf	_Bus_State,c
 21287                           
 21288                           ;MXK.c: 114: if (CUR != pModule)
 21289  0135AA  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 21290  0135AC  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 21291  0135AE  B4D8               	btfsc	status,2,c
 21292  0135B0  D00A               	goto	i2l1732
 21293                           
 21294                           ;MXK.c: 115: {
 21295                           ;MXK.c: 116: PORTG &= ~(0xF);
 21296  0135B2  0EF0               	movlw	240
 21297  0135B4  1686               	andwf	3974,f,c	;volatile
 21298                           
 21299                           ;MXK.c: 117: PORTG |= pModule;
 21300  0135B6  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 21301  0135B8  1286               	iorwf	3974,f,c	;volatile
 21302                           
 21303                           ;MXK.c: 120: delay_us(10);
 21304  0135BA  0E00               	movlw	0
 21305  0135BC  6E02               	movwf	i2delay_us@us+1,c
 21306  0135BE  0E0A               	movlw	10
 21307  0135C0  6E01               	movwf	i2delay_us@us,c
 21308  0135C2  ECFD  F099         	call	i2_delay_us	;wreg free
 21309  0135C6                     i2l1732:
 21310                           
 21311                           ;MXK.c: 121: }
 21312                           ;MXK.c: 122: return 1;
 21313  0135C6  0E01               	movlw	1
 21314  0135C8  0012               	return	
 21315  0135CA                     __end_ofi2_MXK_SwitchTo:
 21316                           	opt stack 0
 21317                           tosu	equ	0xFFF
 21318                           tosh	equ	0xFFE
 21319                           tosl	equ	0xFFD
 21320                           pclatu	equ	0xFFB
 21321                           pclath	equ	0xFFA
 21322                           tblptru	equ	0xFF8
 21323                           tblptrh	equ	0xFF7
 21324                           tblptrl	equ	0xFF6
 21325                           tablat	equ	0xFF5
 21326                           prodh	equ	0xFF4
 21327                           prodl	equ	0xFF3
 21328                           intcon	equ	0xFF2
 21329                           indf0	equ	0xFEF
 21330                           postinc0	equ	0xFEE
 21331                           fsr0h	equ	0xFEA
 21332                           fsr0l	equ	0xFE9
 21333                           wreg	equ	0xFE8
 21334                           indf1	equ	0xFE7
 21335                           postdec1	equ	0xFE5
 21336                           fsr1h	equ	0xFE2
 21337                           fsr1l	equ	0xFE1
 21338                           indf2	equ	0xFDF
 21339                           postinc2	equ	0xFDE
 21340                           postdec2	equ	0xFDD
 21341                           plusw2	equ	0xFDB
 21342                           fsr2h	equ	0xFDA
 21343                           fsr2l	equ	0xFD9
 21344                           status	equ	0xFD8
 21345                           
 21346 ;; *************** function i2_delay_us *****************
 21347 ;; Defined at:
 21348 ;;		line 255 in file "Library/Types.c"
 21349 ;; Parameters:    Size  Location     Type
 21350 ;;  us              2    0[COMRAM] unsigned short 
 21351 ;; Auto vars:     Size  Location     Type
 21352 ;;  delay_us        4    2[COMRAM] unsigned long 
 21353 ;; Return value:  Size  Location     Type
 21354 ;;                  1    wreg      void 
 21355 ;; Registers used:
 21356 ;;		wreg, status,2, status,0
 21357 ;; Tracked objects:
 21358 ;;		On entry : 0/0
 21359 ;;		On exit  : 0/0
 21360 ;;		Unchanged: 0/0
 21361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21362 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21363 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21365 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21366 ;;Total ram usage:        6 bytes
 21367 ;; Hardware stack levels used:    1
 21368 ;; This function calls:
 21369 ;;		Nothing
 21370 ;; This function is called by:
 21371 ;;		i2_MXK_SwitchTo
 21372 ;; This function uses a non-reentrant model
 21373 ;;
 21374                           
 21375                           	psect	text128
 21376  0133FA                     __ptext128:
 21377                           	opt stack 0
 21378  0133FA                     i2_delay_us:
 21379                           	opt stack 16
 21380                           
 21381                           ;Types.c: 256: unsigned long u;
 21382                           ;Types.c: 257: while (us--) {
 21383                           
 21384                           ;incstack = 0
 21385  0133FA  D016               	goto	i2u405_40
 21386  0133FC                     i2l7806:
 21387                           
 21388                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 21389  0133FC  0E00               	movlw	0
 21390  0133FE  6E03               	movwf	i2delay_us@u,c
 21391  013400  0E00               	movlw	0
 21392  013402  6E04               	movwf	i2delay_us@u+1,c
 21393  013404  0E00               	movlw	0
 21394  013406  6E05               	movwf	i2delay_us@u+2,c
 21395  013408  0E00               	movlw	0
 21396  01340A  6E06               	movwf	i2delay_us@u+3,c
 21397  01340C                     i2l7808:
 21398  01340C  5003               	movf	i2delay_us@u,w,c
 21399  01340E  1004               	iorwf	i2delay_us@u+1,w,c
 21400  013410  1005               	iorwf	i2delay_us@u+2,w,c
 21401  013412  1006               	iorwf	i2delay_us@u+3,w,c
 21402  013414  A4D8               	btfss	status,2,c
 21403  013416  D008               	goto	i2u405_40
 21404  013418  F000               	nop		; ;# 
 21405  01341A  0E01               	movlw	1
 21406  01341C  2603               	addwf	i2delay_us@u,f,c
 21407  01341E  0E00               	movlw	0
 21408  013420  2204               	addwfc	i2delay_us@u+1,f,c
 21409  013422  2205               	addwfc	i2delay_us@u+2,f,c
 21410  013424  2206               	addwfc	i2delay_us@u+3,f,c
 21411  013426  D7F2               	goto	i2l7808
 21412  013428                     i2u405_40:
 21413  013428  0601               	decf	i2delay_us@us,f,c
 21414  01342A  A0D8               	btfss	status,0,c
 21415  01342C  0602               	decf	i2delay_us@us+1,f,c
 21416  01342E  2801               	incf	i2delay_us@us,w,c
 21417  013430  E1E5               	bnz	i2l7806
 21418  013432  2802               	incf	i2delay_us@us+1,w,c
 21419  013434  B4D8               	btfsc	status,2,c
 21420  013436  0012               	return	
 21421  013438  D7E1               	goto	i2l832
 21422  01343A                     __end_ofi2_delay_us:
 21423                           	opt stack 0
 21424                           tosu	equ	0xFFF
 21425                           tosh	equ	0xFFE
 21426                           tosl	equ	0xFFD
 21427                           pclatu	equ	0xFFB
 21428                           pclath	equ	0xFFA
 21429                           tblptru	equ	0xFF8
 21430                           tblptrh	equ	0xFF7
 21431                           tblptrl	equ	0xFF6
 21432                           tablat	equ	0xFF5
 21433                           prodh	equ	0xFF4
 21434                           prodl	equ	0xFF3
 21435                           intcon	equ	0xFF2
 21436                           indf0	equ	0xFEF
 21437                           postinc0	equ	0xFEE
 21438                           fsr0h	equ	0xFEA
 21439                           fsr0l	equ	0xFE9
 21440                           wreg	equ	0xFE8
 21441                           indf1	equ	0xFE7
 21442                           postdec1	equ	0xFE5
 21443                           fsr1h	equ	0xFE2
 21444                           fsr1l	equ	0xFE1
 21445                           indf2	equ	0xFDF
 21446                           postinc2	equ	0xFDE
 21447                           postdec2	equ	0xFDD
 21448                           plusw2	equ	0xFDB
 21449                           fsr2h	equ	0xFDA
 21450                           fsr2l	equ	0xFD9
 21451                           status	equ	0xFD8
 21452                           
 21453 ;; *************** function i2_MXK_Release *****************
 21454 ;; Defined at:
 21455 ;;		line 130 in file "Library/MXK.c"
 21456 ;; Parameters:    Size  Location     Type
 21457 ;;		None
 21458 ;; Auto vars:     Size  Location     Type
 21459 ;;		None
 21460 ;; Return value:  Size  Location     Type
 21461 ;;                  1    wreg      unsigned char 
 21462 ;; Registers used:
 21463 ;;		wreg, status,2, status,0
 21464 ;; Tracked objects:
 21465 ;;		On entry : 0/0
 21466 ;;		On exit  : 0/0
 21467 ;;		Unchanged: 0/0
 21468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21473 ;;Total ram usage:        0 bytes
 21474 ;; Hardware stack levels used:    1
 21475 ;; This function calls:
 21476 ;;		Nothing
 21477 ;; This function is called by:
 21478 ;;		i2_Motor_Step
 21479 ;; This function uses a non-reentrant model
 21480 ;;
 21481                           
 21482                           	psect	text129
 21483  013B42                     __ptext129:
 21484                           	opt stack 0
 21485  013B42                     i2_MXK_Release:
 21486                           	opt stack 17
 21487                           
 21488                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 21489                           
 21490                           ;incstack = 0
 21491  013B42  0E01               	movlw	1
 21492  013B44  6E4B               	movwf	_Bus_State,c
 21493                           
 21494                           ;MXK.c: 135: return 1;
 21495                           ;	Return value of i2_MXK_Release is never used
 21496  013B46  0012               	return	
 21497  013B48                     __end_ofi2_MXK_Release:
 21498                           	opt stack 0
 21499                           tosu	equ	0xFFF
 21500                           tosh	equ	0xFFE
 21501                           tosl	equ	0xFFD
 21502                           pclatu	equ	0xFFB
 21503                           pclath	equ	0xFFA
 21504                           tblptru	equ	0xFF8
 21505                           tblptrh	equ	0xFF7
 21506                           tblptrl	equ	0xFF6
 21507                           tablat	equ	0xFF5
 21508                           prodh	equ	0xFF4
 21509                           prodl	equ	0xFF3
 21510                           intcon	equ	0xFF2
 21511                           indf0	equ	0xFEF
 21512                           postinc0	equ	0xFEE
 21513                           fsr0h	equ	0xFEA
 21514                           fsr0l	equ	0xFE9
 21515                           wreg	equ	0xFE8
 21516                           indf1	equ	0xFE7
 21517                           postdec1	equ	0xFE5
 21518                           fsr1h	equ	0xFE2
 21519                           fsr1l	equ	0xFE1
 21520                           indf2	equ	0xFDF
 21521                           postinc2	equ	0xFDE
 21522                           postdec2	equ	0xFDD
 21523                           plusw2	equ	0xFDB
 21524                           fsr2h	equ	0xFDA
 21525                           fsr2l	equ	0xFD9
 21526                           status	equ	0xFD8
 21527                           
 21528 ;; *************** function i2_MXK_Queue *****************
 21529 ;; Defined at:
 21530 ;;		line 144 in file "Library/MXK.c"
 21531 ;; Parameters:    Size  Location     Type
 21532 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 21533 ;;		 -> Absolute function(1), Motor_Step(1), 
 21534 ;; Auto vars:     Size  Location     Type
 21535 ;;		None
 21536 ;; Return value:  Size  Location     Type
 21537 ;;                  1    wreg      void 
 21538 ;; Registers used:
 21539 ;;		wreg, status,2, status,0
 21540 ;; Tracked objects:
 21541 ;;		On entry : 0/0
 21542 ;;		On exit  : 0/0
 21543 ;;		Unchanged: 0/0
 21544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21545 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21548 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21549 ;;Total ram usage:        3 bytes
 21550 ;; Hardware stack levels used:    1
 21551 ;; This function calls:
 21552 ;;		Nothing
 21553 ;; This function is called by:
 21554 ;;		i2_Motor_Step
 21555 ;; This function uses a non-reentrant model
 21556 ;;
 21557                           
 21558                           	psect	text130
 21559  013AC6                     __ptext130:
 21560                           	opt stack 0
 21561  013AC6                     i2_MXK_Queue:
 21562                           	opt stack 17
 21563                           
 21564                           ;MXK.c: 146: lQueue = pCallback;
 21565                           
 21566                           ;incstack = 0
 21567  013AC6  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 21568  013ACA  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 21569  013ACE  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 21570  013AD2  0012               	return		;funcret
 21571  013AD4                     __end_ofi2_MXK_Queue:
 21572                           	opt stack 0
 21573                           tosu	equ	0xFFF
 21574                           tosh	equ	0xFFE
 21575                           tosl	equ	0xFFD
 21576                           pclatu	equ	0xFFB
 21577                           pclath	equ	0xFFA
 21578                           tblptru	equ	0xFF8
 21579                           tblptrh	equ	0xFF7
 21580                           tblptrl	equ	0xFF6
 21581                           tablat	equ	0xFF5
 21582                           prodh	equ	0xFF4
 21583                           prodl	equ	0xFF3
 21584                           intcon	equ	0xFF2
 21585                           indf0	equ	0xFEF
 21586                           postinc0	equ	0xFEE
 21587                           fsr0h	equ	0xFEA
 21588                           fsr0l	equ	0xFE9
 21589                           wreg	equ	0xFE8
 21590                           indf1	equ	0xFE7
 21591                           postdec1	equ	0xFE5
 21592                           fsr1h	equ	0xFE2
 21593                           fsr1l	equ	0xFE1
 21594                           indf2	equ	0xFDF
 21595                           postinc2	equ	0xFDE
 21596                           postdec2	equ	0xFDD
 21597                           plusw2	equ	0xFDB
 21598                           fsr2h	equ	0xFDA
 21599                           fsr2l	equ	0xFD9
 21600                           status	equ	0xFD8
 21601                           tosu	equ	0xFFF
 21602                           tosh	equ	0xFFE
 21603                           tosl	equ	0xFFD
 21604                           pclatu	equ	0xFFB
 21605                           pclath	equ	0xFFA
 21606                           tblptru	equ	0xFF8
 21607                           tblptrh	equ	0xFF7
 21608                           tblptrl	equ	0xFF6
 21609                           tablat	equ	0xFF5
 21610                           prodh	equ	0xFF4
 21611                           prodl	equ	0xFF3
 21612                           intcon	equ	0xFF2
 21613                           indf0	equ	0xFEF
 21614                           postinc0	equ	0xFEE
 21615                           fsr0h	equ	0xFEA
 21616                           fsr0l	equ	0xFE9
 21617                           wreg	equ	0xFE8
 21618                           indf1	equ	0xFE7
 21619                           postdec1	equ	0xFE5
 21620                           fsr1h	equ	0xFE2
 21621                           fsr1l	equ	0xFE1
 21622                           indf2	equ	0xFDF
 21623                           postinc2	equ	0xFDE
 21624                           postdec2	equ	0xFDD
 21625                           plusw2	equ	0xFDB
 21626                           fsr2h	equ	0xFDA
 21627                           fsr2l	equ	0xFD9
 21628                           status	equ	0xFD8
 21629                           
 21630                           	psect	text131
 21631  000000                     __ptext131:
 21632                           	opt stack 0
 21633                           tosu	equ	0xFFF
 21634                           tosh	equ	0xFFE
 21635                           tosl	equ	0xFFD
 21636                           pclatu	equ	0xFFB
 21637                           pclath	equ	0xFFA
 21638                           tblptru	equ	0xFF8
 21639                           tblptrh	equ	0xFF7
 21640                           tblptrl	equ	0xFF6
 21641                           tablat	equ	0xFF5
 21642                           prodh	equ	0xFF4
 21643                           prodl	equ	0xFF3
 21644                           intcon	equ	0xFF2
 21645                           indf0	equ	0xFEF
 21646                           postinc0	equ	0xFEE
 21647                           fsr0h	equ	0xFEA
 21648                           fsr0l	equ	0xFE9
 21649                           wreg	equ	0xFE8
 21650                           indf1	equ	0xFE7
 21651                           postdec1	equ	0xFE5
 21652                           fsr1h	equ	0xFE2
 21653                           fsr1l	equ	0xFE1
 21654                           indf2	equ	0xFDF
 21655                           postinc2	equ	0xFDE
 21656                           postdec2	equ	0xFDD
 21657                           plusw2	equ	0xFDB
 21658                           fsr2h	equ	0xFDA
 21659                           fsr2l	equ	0xFD9
 21660                           status	equ	0xFD8
 21661                           
 21662                           	psect	rparam
 21663  0000                     tosu	equ	0xFFF
 21664                           tosh	equ	0xFFE
 21665                           tosl	equ	0xFFD
 21666                           pclatu	equ	0xFFB
 21667                           pclath	equ	0xFFA
 21668                           tblptru	equ	0xFF8
 21669                           tblptrh	equ	0xFF7
 21670                           tblptrl	equ	0xFF6
 21671                           tablat	equ	0xFF5
 21672                           prodh	equ	0xFF4
 21673                           prodl	equ	0xFF3
 21674                           intcon	equ	0xFF2
 21675                           indf0	equ	0xFEF
 21676                           postinc0	equ	0xFEE
 21677                           fsr0h	equ	0xFEA
 21678                           fsr0l	equ	0xFE9
 21679                           wreg	equ	0xFE8
 21680                           indf1	equ	0xFE7
 21681                           postdec1	equ	0xFE5
 21682                           fsr1h	equ	0xFE2
 21683                           fsr1l	equ	0xFE1
 21684                           indf2	equ	0xFDF
 21685                           postinc2	equ	0xFDE
 21686                           postdec2	equ	0xFDD
 21687                           plusw2	equ	0xFDB
 21688                           fsr2h	equ	0xFDA
 21689                           fsr2l	equ	0xFD9
 21690                           status	equ	0xFD8
 21691                           
 21692                           	psect	temp
 21693  000051                     btemp:
 21694                           	opt stack 0
 21695  000051                     	ds	1
 21696  0000                     int$flags	set	btemp
 21697  0000                     wtemp6	set	btemp+1
 21698                           tosu	equ	0xFFF
 21699                           tosh	equ	0xFFE
 21700                           tosl	equ	0xFFD
 21701                           pclatu	equ	0xFFB
 21702                           pclath	equ	0xFFA
 21703                           tblptru	equ	0xFF8
 21704                           tblptrh	equ	0xFF7
 21705                           tblptrl	equ	0xFF6
 21706                           tablat	equ	0xFF5
 21707                           prodh	equ	0xFF4
 21708                           prodl	equ	0xFF3
 21709                           intcon	equ	0xFF2
 21710                           indf0	equ	0xFEF
 21711                           postinc0	equ	0xFEE
 21712                           fsr0h	equ	0xFEA
 21713                           fsr0l	equ	0xFE9
 21714                           wreg	equ	0xFE8
 21715                           indf1	equ	0xFE7
 21716                           postdec1	equ	0xFE5
 21717                           fsr1h	equ	0xFE2
 21718                           fsr1l	equ	0xFE1
 21719                           indf2	equ	0xFDF
 21720                           postinc2	equ	0xFDE
 21721                           postdec2	equ	0xFDD
 21722                           plusw2	equ	0xFDB
 21723                           fsr2h	equ	0xFDA
 21724                           fsr2l	equ	0xFD9
 21725                           status	equ	0xFD8


Data Sizes:
    Strings     237
    Constant    806
    Data        39
    BSS         864
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     64     160
    BANK1           256     17     244
    BANK2           256      0     240
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_35(CODE[5]), STR_34(CODE[3]), STR_33(CODE[39]), STR_32(CODE[42]), 
		 -> STR_31(CODE[6]), STR_30(CODE[3]), STR_29(CODE[21]), STR_28(CODE[3]), 
		 -> STR_27(CODE[19]), STR_26(CODE[28]), STR_25(CODE[20]), STR_24(CODE[3]), 
		 -> STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[19]), STR_20(CODE[19]), 
		 -> STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), STR_16(CODE[19]), 
		 -> STR_15(CODE[3]), STR_14(CODE[19]), STR_13(CODE[28]), STR_12(CODE[20]), 
		 -> STR_11(CODE[3]), STR_10(CODE[19]), STR_9(CODE[19]), STR_8(CODE[19]), 
		 -> STR_7(CODE[19]), STR_6(CODE[19]), STR_5(CODE[19]), STR_4(CODE[19]), 
		 -> STR_3(CODE[16]), STR_2(CODE[19]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _Robot_Init->_eusartSend
    _UpdateDistance->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _MXK_Init->_Port_Init
    _HMI_Init->_Button_Init
    _FunctInitButton->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0 1244320
                                             13 BANK1      4     4      0
                       _Console_Init
                     _Console_Render
                    _FunctInitButton
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                           _LED_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                         _Robot_Init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    9916
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _UpdateDistance                                       0     0      0      31
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  363376
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                              0 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  292948
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  262877
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   95501
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    2382
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84709
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84709
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37341
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (1) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (2) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (3) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      F0       9       93.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     11      F4       7       95.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     40      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2D4      12        0.0%
DATA                 0      0     400       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed May 16 11:15:57 2018

                   i2_Timer0_Stop 3B3C                  SPI_Init@pChannel 00E4  
      __size_of_MXK_BlockSwitchTo 0038                      i2_Motor_Step 1D04  
                               _A 004C                                 l8 1FAE  
                               _a 004D                                 _i 0034  
                               _j 008B                                 _l 004F  
                               _u 008A                                 _w 0050  
                               _x 012A                                 _y 0128  
                              l11 1B3A                                l12 1B28  
                              l90 16C0                                l87 163A  
                              l89 169A                  ??_UpdateDistance 00B4  
                    ___awdiv@sign 00B8               ___wmul@multiplicand 00B5  
                   _HMI_DIPSwitch 39F6                LCD_DrawField@pSize 00CB  
              LCD_DrawField@count 00D1                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 3AFA                               l120 2420  
                             l121 2436                               l122 244C  
                             l220 2F74                               l117 2462  
                             l221 2F44                               l118 240C  
                             l230 323A                               l222 2F84  
                             l223 2F5C                       ?_LED_Toggle 0001  
                             l234 33E8                               l235 33C0  
                             l227 3252                               l403 1142  
                             l412 0FCE                               l228 3222  
                             l340 25A8                               l404 10E2  
                             l421 0F6A                               l413 0E80  
                             l237 33D4                               l341 25B2  
                             l405 1172                     ??_Console_Tab 00BB  
                             l414 0FEA                               l430 1EDE  
                             l350 2676                               l342 25BC  
                             l510 0AEC                               l406 10FA  
                             l183 281A                               l415 0EA2  
                             l351 2624                               l343 25C6  
                             l511 0BE2                               l407 1112  
                             l184 27FA                               l600 000C  
                             l432 1F04                               l344 25D0  
                             l512 0B0C                               l408 112A  
                             l417 0F06                               l601 015E  
                             l433 1F30                               l353 2630  
                             l337 25EE                               l345 25DA  
                             l610 01D6                               l602 0038  
                             l354 263A                               l346 25E4  
                             l338 259C                               l370 2548  
                             l611 021C                               l603 016E  
                             l427 1F58                               l355 2644  
                             l363 2566                               l371 2552  
                             l531 05EC                       ?_HMI_GetBar 0001  
                             l612 0262                               l604 00C8  
                             l356 264E                               l372 255C  
                             l364 2514                               l532 060E  
                             l516 0B4C                               l357 2658  
                             l509 0BC8                               l614 0334  
                             l358 2662                               l366 2520  
                             l526 062E                               l615 032C  
                             l607 02A8                               l359 266C  
                             l367 252A                               l519 0B8C  
                             l616 0346                               l608 0190  
                             l368 2534                               l528 064C  
                             l393 31CC                               l617 0330  
                             l609 02C6                               l369 253E  
                             l529 05CE                               l483 0982  
                             l732 2972                               l476 0A4A  
                             l900 0708                               l733 296C  
                             l389 2E2C                               l477 08DA  
                             l901 070C                               l397 33B6  
                             l726 24AA                               l478 0A66  
                             l486 09E6                               l654 3754  
                             l910 0730                               l902 0710  
                             l727 24A4                               l479 091E  
                             l655 374C                               l911 0734  
                             l903 0714                               l912 0738  
                             l904 0718                               l824 2E90  
                             l832 32AE                               l681 2B76  
                             l673 3712                               l657 3750  
                             l913 073C                               l905 071C  
                             l921 2FD2                               l914 0740  
                             l906 0720                               l922 2FA2  
                             l930 1E3C                               l819 2D6C  
                             l915 0744                               l907 0724  
                             l684 2B8C                               l916 0748  
                             l908 0728                               l860 0668  
                             l781 3652                               l597 0016  
                             l853 0750                               l917 074C  
                             l909 072C                               l861 066C  
                             l678 2BB0                               l686 2B9A  
                             l598 0002                               l870 0690  
                             l862 0670                               l854 0654  
                             l679 2B66                               l599 0026  
                             l871 0694                               l863 0674  
                             l776 3510                               l880 06B8  
                             l872 0698                               l864 0678  
                             l856 0658                               l928 1EAE  
                             l881 06BC                               l873 069C  
                             l865 067C                               l857 065C  
                             l929 1E86                               l890 06E0  
                             l882 06C0                               l874 06A0  
                             l866 0680                               l858 0660  
                             l891 06E4                               l883 06C4  
                             l875 06A4                               l867 0684  
                             l859 0664                               l892 06E8  
                             l884 06C8                               l876 06A8  
                             l868 0688                               l893 06EC  
                             l885 06CC                               l877 06AC  
                             l869 068C                               l894 06F0  
                             l886 06D0                               l878 06B0  
                             l990 2B0E                               l895 06F4  
                             l887 06D4                               l879 06B4  
                             l983 288A                               l976 2BE4  
                             l896 06F8                               l888 06D8  
                             l992 2B1A                               l984 2830  
                             l897 06FC                               l889 06DC  
                             l985 2888                               l978 2BF0  
                             l898 0700                               l899 0704  
                             l997 30F4                               l999 3112  
                             _RA2 007C02                               _RA3 007C03  
                             _RD5 007C1D                               _RD7 007C1F  
                             _PR2 000FCB                               _mod 0120  
                             _val 0079                               _top 0049  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 00CC  
                    _Word_GetPair 3632                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 00BA  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 00C3                Console_MakeField@y 00C4  
                      _TXSTA1bits 000FAD                      Console_Tab@c 00C2  
                    Console_Tab@i 00C1               LCD_DrawField@pField 00C5  
                    Console_Tab@t 00C0                        i2_delay_us 33FA  
            Port_Set@TypeRequired 00D5                 Console_FormFeed@x 00B5  
               Console_FormFeed@y 00B6               LCD_DrawField@pPoint 00C7  
                  ?_LCD_DrawField 00C5             Port_SetPinType@Output 00DD  
                 Port_SetPin@Type 00C6                   Port_SetPin@pPin 00C4  
                   ?_Byte_GetPair 00BC                   __end_of_LED_Set 3264  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 20D4  
                    _Word_SetPair 34EC                              l1000 312A  
                            l1010 239C                              l1004 2F14  
                   ?_Byte_GetZone 00B3                              l1005 2F3A  
                            l1200 2230                              l1040 147C  
                            l1201 2278                              l1009 23A8  
                            l1041 1482                              l1202 228C  
                            l1042 1488                              l1043 148E  
                            l1204 22B0                              l1036 158A  
                            l1044 1494                              l1205 229C  
                            l1045 149A                              l1037 1476  
                            l1062 0E02                              l1063 0E30  
                            l1207 22BE                              l1047 1518  
                            l1056 0CD8                              l1057 0E50  
                            l1153 1306                              l1082 21D8  
                            l1058 0CDE                              l1146 2AA6  
                            l1059 0D02                              l1084 21E0  
                            l2124 3320                              l1077 21AC  
                            l2125 3302                              l1158 3592  
                            l2310 1314                              l1079 21B8  
                            l2311 1324                              l2320 13A4  
                            l2312 1348                              l2242 19D2  
                            l2500 26EA                              l2324 13EC  
                            l2244 1A66                              l2501 26E2  
                            l2325 1446                              l2317 137A  
                            l1630 1C62                              l2326 13F2  
                            l2318 132C                              l2246 1AB4  
                            l1631 1CB2                              l2319 1340  
                            l1632 1C9C                              l2504 270A  
                            l2505 2714                              l1730 348E  
                            l2506 2722                              l1627 1CF2  
                            l1724 3532                              l1732 34AE  
                            l1628 1CE8                              l1629 1C7A  
                            l1726 355A                              l1735 3950  
                            l1827 176C                              l1828 1788  
                            l2733 3006                              l2734 2FFE  
                            l2743 334E                              l2680 275C  
                            l2744 3346                              l2681 2750  
                            l2737 3026                              l1873 362A  
                            l2497 26BC                              l2738 3030  
                            l2498 26CC                              l2747 3366  
                            l2684 2790                              l2748 3370  
                            l2685 279E                    ??_Console_Init 00B3  
                            _ADON 007E10             Port_SetPinType@pInput 00D9  
                            STR_1 FFFB                              STR_2 FFA7  
                            STR_3 FFE0                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 0018  
                            _LATG 000F8F               __end_of_GetPortPORT 26A6  
                            u8000 3352                              u8100 2F10  
                            u8110 2F32                              u9000 2AE4  
                            u8025 3A7C                              _PIR1 000F9E  
                            u8026 3A7E                              _PIR2 000FA1  
                            _PIR3 000FA4                              u9100 16CC  
                            u8230 2760                              u9030 1C40  
                            u9040 1C54               __end_of_GetPortTRIS 2596  
                            u8090 1E9A                              u8410 32DE  
                            u9050 1C8E                              u8350 346A  
                            u8190 26EE                              u9320 2C34  
                            u8505 03C6                              u8290 2EC6  
                            u8355 3466                              u8515 03D8  
                            u8380 17CE                              u8365 1728  
                            u8525 03EA                              u7750 2946  
                            u8535 0402                              u7824 30A4  
                            u8464 28FC                              u9600 1450  
                            u7825 30A0                              u8465 28F8  
                            u8545 04FC                              u7770 2990  
                            u7834 30CC                              u7835 30C8  
                            u8555 0550                              u7940 2B4A  
                            u7757 293C                              u8565 057E  
                            u8590 373C                              u9390 0E3E  
                            u7854 24D2                              u7790 2D1A  
                            u8830 32A8                              u8910 1178  
                            u7950 2B4E                              u7855 24CE  
                            u7775 298C                              u8575 05AC  
                            u7864 24FA                              u7880 34DE  
                            u8808 1BE0                              u7865 24F6  
                            u7970 300A                              u8595 3738  
                            _SPI1 0166                              u8748 2012  
                            u9580 13DA                              _SPI2 0171  
                            u7885 34DA                              u8950 2212  
                            u8870 308A                              u8758 1ADA  
                            u8759 1AEE                              u8960 221A  
                            _TMR0 000FD6                              u8995 2AB4  
                            _gISR 0060                Event_DIPSwitch@Bar 00CD  
                   ??_Byte_GetBit 00B6                SPI_MaxSpeed@pInput 00C2  
                   ?_Byte_SetByte 00B3                     ?_Byte_SetPair 00BE  
                 __end_of_SPI_DCS 371E                              _main 198C  
                            _mode 0075                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 00BE                              _itos 1E04  
                            _test 0116                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 00B3                              btemp 0051  
                            _zero 004E                     ??_Byte_SetBit 00B7  
              __size_of_LCD_Reset 0050                              prodh 000FF4  
                            prodl 000FF3                              start 14AA  
              __size_of_LCD_Write 0020                     __CFG_IESO$OFF 000000  
                 ?_SPI_DisableISR 00B3               HMI_SetButton@pValue 00B9  
                      _Cliff_Left 0083                     Console_Init@x 00B5  
                   Console_Init@y 00B6                    ?i2_Timer0_Stop 0001  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FEB7                   __end_of_InitADC 3336  
            Set_Rotation@rotation 00B9                     ??_Init_Timer0 00B3  
          __size_of_HMI_SetButton 007A            __size_of_HMI_SetNumber 0026  
                     ?_ISR_Enable 0001      __size_of_Console_ClearCursor 0030  
                __end_of_LCD_Fill 32AC                  __end_of_LCD_Init 1708  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 2F92                      _BAUDCON1bits 000F7E  
                   ??_Button_Init 00EE           GetPortProperties@pInput 00B5  
                   ??_Button_Poll 00D1                  __end_of_HMI_Init 1308  
                           l12044 176C                             l13102 2BE8  
                           l13130 0CFA                             l12082 32AE  
                           l12084 32C0                             l13172 12E4  
                           l13412 13A8                             l11806 1E9A  
                           l13096 2BDC                             l13184 3568  
                           l12712 3290                             l11674 2B12  
                           l11668 2B06                             l12736 3072  
                           l12592 3AA0                             l12834 21B0  
                           l11858 22B0                             l12828 21A4  
                           l11980 2EA2                             l12940 163A  
                           l12950 16CC                             l12864 2A9E  
                           l12792 10DA                             l11978 2E90  
                           l11986 2EC6                  __end_of_HMI_Poll 2DD0  
                           _I2C1T 003C                             _I2C2T 01B8  
                           ?_main 0001                   __end_of___awdiv 272C  
                           _ADRES 000FC3                             ?_itos 00BF  
                           STR_12 FF93                             STR_13 FF62  
                           STR_30 FFFB                             STR_14 FFCD  
                           STR_31 FFF0                             STR_32 FF11  
                           STR_17 FFBA                             STR_33 FF3B  
                           STR_35 FFF6                             STR_29 FF7E  
                 _Event_DIPSwitch 37C2                   __end_of___lldiv 27B0  
         __size_of_HMI_LeftSwitch 0014                   ___awdiv@divisor 00B5  
                           u10518 35DA                             u10519 35EE  
                           u10568 19DE                             u10569 19F2  
                           u10578 19FE                             u10579 1A12  
                           u10588 1A1E                             u10589 1A32  
                           u10598 1A3E                             u10599 1A52  
                           _INDEX 0036                   __end_of___lwdiv 303A  
                           _MASKS FCC7                   __end_of___lwmod 337A  
                           i2l430 20EC                             i2l432 2112  
                           i2l433 213C                             i2l427 2162  
                           i2l732 2A60                             i2l733 2A5A  
                           i2l832 33FC                             i2l781 36B2  
                 ___awdiv@counter 00B7                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0014                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                           _T_VAR 0124                  ??i2_Byte_GetPair 000D  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 00C9  
                  __CFG_FCMEN$OFF 000000                             _PortA 01A4  
                           _PortB 019A                             _PortC 00A5  
                           _PortD 009B                             _PortE 0091  
                           _PortF 01AE                             _PortG 0190  
         __end_of_Port_SetPinType 1006                   _ADC_Initialised 0038  
                  ??_Byte_GetPair 00BF                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00C8                   __end_of_dpowers FCC7  
                  ??_Byte_GetZone 00B8                             _count 011A  
                  Button_Poll@Pin 00D6                             _errno 0114  
        __size_of_Set_Addr_Window 009A               __end_of_Console_Tab 23EE  
                __end_of_MXK_Init 198C                             _stack 0264  
            i2Byte_GetPair@pInput 000A                             _putch 3A8E  
                           _total 002B                  __end_of_SPI_Init 03A4  
                __end_of_SPI_Send 2BCE                        _BumpSensor 0087  
           __end_ofi2_MXK_Release 3B48                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 2FE6  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 00B6  
                  ??_Byte_SetPair 00C2                    ??_Byte_SetQuad 00C2  
                           plusw2 000FDB                    ??_Byte_SetZone 00B9  
                           status 000FD8                             wtemp6 0052  
                 _Configure_GPIOs 2E30              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 3908  
                     _Cliff_FLeft 0085               __size_of_LED_Toggle 0040  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
                      _Event_NULL 1404       __size_of_Port_CheckPairType 0060  
                     _Cliff_Right 0084               __size_of_HMI_SetBar 000A  
                 __initialization 2026               __size_of_HMI_Render 0036  
             __end_of_Byte_GetBit 374A                     _Current_Dist1 0088  
                   _Current_Dist2 0033                      __end_of_main 1AC8  
                    __end_of_itos 1EC2              HMI_SetButton@reindex 00B5  
                    SPI_Send9@dat 0081               __end_of_Byte_SetBit 30E0  
                __end_of_InitList FC9D       __size_of_Port_CheckQuadType 0050  
                __end_of_Mode_Set 3A80       __size_of_Port_CheckPortType 0040  
                     HMI_Render@a 00BB                            ??_main 00F3  
                          ??_itos 00C3               __end_of_Init_Timer0 399C  
        __size_of_FunctInitButton 0076           _Console_MakeField$10974 00C1  
                   __activetblptr 000003                 Port_SetPin@pInput 00C2  
               __end_of_LCD_Reset 3180                 Port_SetPin@pValue 00C5  
                       ??_LED_Set 00C8                 _MXK_InitDIPSwitch 399C  
               GetPortPORT@pInput 00B5            Port_CheckPairType@Pin1 00DD  
          Port_CheckPairType@Pin2 00DE                 __end_of_LCD_Write 38B2  
                     _GetPortPORT 261E                      ?i2_MXK_Queue 0001  
                     _GetPortTRIS 250E                   ??_LCD_DrawField 00CF  
      __end_of_PortProperty_Valid 2D70                  __end_of_Port_Set 064E  
                     ?i2_delay_us 0001  __size_of_Console_IncrementCursor 0054  
             __end_of_Button_Init 2026               __end_of_Button_Poll 1BF6  
               Word_GetPair@pPair 00C1           LCD_FillRectangle@pPoint 00BE  
              ?_MXK_InitDIPSwitch 0001                     _HMI_SetButton 28AA  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                       ??_SPI_DCS 00B5                        _Low_Sensor 00F7  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                   _HMI_SetNumber 37E8            Port_SetQuadType@Output 00ED  
                          _ANCON0 000FC1                  ___awdiv@dividend 00B3  
                          ?_putch 0001                  ??_Console_Render 00D6  
                   ToSegment@pCHR 00B3                            _GODONE 007E11  
                _Console_FormFeed 2AF8            Port_SetQuadType@pInput 00E9  
                          i2l1630 1D6A                            i2l1631 1DB6  
                          i2l1632 1DA2                            i2l1730 35A6  
                          i2l1627 1DF2                            i2l1732 35C6  
                          i2l1628 1DE8                            i2l1629 1D80  
                          i2l1590 145E                    __CFG_WDTEN$OFF 000000  
             __size_of_ISR_Enable 000A                            i2l7806 33FC  
                          i2l7808 340C                            _RCREG1 000FAF  
                          _RCSTA1 000FAC            __end_of_LCD_Word_Write 3922  
                  _Timer0_Restart 3AEE                            _SPBRG1 000FB0  
             ??_MXK_InitDIPSwitch 00EE                            _TRISA2 007C92  
                          _TRISA3 007C93                            _TRISD5 007CAD  
                          _TRISD7 007CAF                            _TXREG1 000FAE  
                       ??_InitADC 00B3                    i2_MXK_SwitchTo 3594  
                          _TXSTA1 000FAD                   Byte_GetBit@pBit 00B5  
                      _Reset_High 396C                Console_Render@temp 00D8  
                  ??_HMI_UpSwitch 00B9                    OutSeg@pSegment 00B6  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00CA  
                __end_of_delay_ms 2EEA                      LED_Init@pLED 00E0  
                __end_of_delay_us 32F2                     ??_Timer2_Init 00C4  
                   ??_Timer0_Stop 00B3                        _Timer0_ISR 379A  
        __size_of_Console_NewLine 007C                 Timer2_Init@DIVIDE 00CD  
                  __CFG_XINST$OFF 000000                            _OutSeg 2A8A  
        __size_of_HMI_InitButtons 0006                        _Motor_Step 1BF6  
         __end_of_Event_DIPSwitch 37E8                            ___wmul 3772  
                 ??_HMI_DIPSwitch 00B9                         ??___awdiv 00B7  
                  __CFG_STVREN$ON 000000                        _Robot_Init 39CC  
                          _change 00FF                            _lMotor 007B  
                       ??___lldiv 00BB                            _lQueue 0063  
                      _TestButton 0186                        _Robot_Stop 3832  
                       ??___lwdiv 00B7                __size_of_ToSegment 0284  
                       ??___lwmod 00BE          __end_of_Port_SetQuadType 0AE4  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 0031  
            __end_of_Console_Init 2C38                 GetPortTRIS@pInput 00B5  
              __size_of_Reset_Low 0018                            clear_0 208E  
                          clear_1 20A0                            clear_2 20AC  
                          clear_3 20B8                            clear_4 20C4  
                ___awdiv@quotient 00B9                        Port_Init@i 01DC  
                          _x_grid 00FB                 __end_of_MXK_Queue 3AC6  
                          _y_grid 00F9        __end_ofHMI_SetButton@F7213 FCD4  
                          _printf 1308         __end_of_MXK_InitDIPSwitch 39B4  
                          main@up 01E5                    HMI_SetButton@v 00BA  
          HMI_SetSegments@pString 00B4                       _Console_Tab 235A  
             LCD_Word_Write@value 00B8                      __pdataCOMRAM 0043  
              __size_of_Port_Init 0186                     ??_Port_GetPin 00B6  
        Port_CheckPortType@Output 00EC                   ??i2_Port_SetPin 0014  
                    __mediumconst FBEA       __end_ofTimer2_Init@PRESCALE FCD7  
        Port_CheckPortType@pDrive 00EB                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001                    ?_HMI_SetButton 0001  
        Port_CheckPortType@pInput 00E9                     ??_Port_SetPin 00C6  
                       ??_reverse 00B7             Console_MakeField@Fill 02AA  
                ?_Port_SetPinType 00D9                            putch@c 00C7  
                  ?_HMI_SetNumber 00C9                    i2_Word_GetPair 3694  
         __end_of_Configure_GPIOs 2E8E                  ??_MXK_TestButton 00B9  
          __end_of_Timer0_Restart 3AFA                     Set_Rotation@m 00B8  
                    ?_MXK_Release 0001                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 35CA                  __end_ofexp@coeff FEDF  
                    i2delay_us@us 0001                  __end_oflog@coeff FF03  
                 ?_LCD_Word_Write 00B8                        __accesstop 0060  
         __end_of__initialization 20CA                         ?_LCD_Fill 00BC  
                       ?_LCD_Init 0001                      _Cliff_FRight 0086  
                   SPI_Init@pMode 00E5                       _Byte_GetBit 371E  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 3B06  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 00BB  
                       ?_HMI_Poll 0001                     ___rparam_used 000001  
                     _Byte_SetBit 308E                     __end_of_MASKS FCD0  
                  _PortA_Property FF0F                       ?_Event_NULL 0001  
                       LCD_Fill@i 00BE                         LCD_Fill@j 00BF  
                       LCD_Init@i 00EA                    __pcstackCOMRAM 0001  
                  _PortB_Property FF0D               __size_ofi2_delay_us 0040  
                    __pidataBANK0 3AD4                      __pidataBANK1 3AE1  
                     _Init_Timer0 3984               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 3908                   Console_Render@x 00DD  
                 Console_Render@y 00DE               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FC9D  
            __end_of_Byte_GetZone 299E                    _PortC_Property FF0B  
                   __end_of_putch 3A9C                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 184E               __end_of_Timer0_Stop 3B30  
                       ?_SPI_Init 00E0                         ?_SPI_Send 00B3  
                     _Button_Init 1F76                 Port_SetType@pType 00EF  
                     _Button_Poll 1AC8              __end_of_Byte_SetByte 3AB8  
            __end_of_Byte_SetPair 3872                    _HMI_LeftSwitch 3A46  
                  _PortD_Property FF09              __end_of_Byte_SetQuad 3892  
                    ??_LED_Toggle 00CB                      ??_HMI_GetBar 00B3  
            __end_of_Byte_SetZone 250E                    _HMI_DownSwitch 3A0A  
                   SPI_Send@pData 00B5             __end_of_MXK_DIPSwitch 39F6  
                    ??_HMI_SetBar 00B3                      ??_HMI_Render 00BB  
                  _PortE_Property FF07          __size_of_HMI_SetSegments 009C  
          __end_ofi2_Word_GetPair 36C4                    _PortF_Property FF05  
         Port_CheckQuadType@Pair1 00E6           Port_CheckQuadType@Pair2 00E7  
        MXK_BlockSwitchTo@pModule 00BA                 ??_FunctInitButton 00EE  
               _Console_Backspace 30E0                   ?_Timer0_Restart 0001  
                         ??_putch 00C7          __size_of_HMI_RightSwitch 0014  
             _Console_ClearCursor 3664                 __end_of_ToSegment 08D2  
                  _PortG_Property FF03                        __pbssBANK0 0060  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 34EC           Port_CheckQuadType@pQuad 00E4  
                 reverse@iterator 00B8                  ??_SPI_DisableISR 00B5  
                 ?i2_MXK_SwitchTo 0001                ?_Console_Backspace 0001  
               __end_of_Reset_Low 396C         __size_of_Event_TestButton 0034  
         __size_of_Port_TogglePin 002E                        ??_LCD_Fill 00BE  
                      ??_LCD_Init 00E8               __end_of_Port_SetPin 1F76  
          __end_of_PortA_Property FF11                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 00B3                        ??_LED_Init 00E0  
              Byte_SetByte@pValue 00B5                     ?_ISR_Function 0001  
                     ?_Reset_High 0001                        ??_HMI_Init 00EE  
                      ??_HMI_Poll 00D7                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 00E0            __end_of_PortB_Property FF0F  
              __size_of_eusartRec 0008                 __end_of_Port_Init 118C  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 00DB  
              __end_of_LED_Toggle 33FA                __end_of_HMI_GetBar 3B36  
        LCD_FillRectangle@pColour 00BC               ??_Console_Backspace 00B5  
               Set_Addr_Window@xe 00B9                 Set_Addr_Window@ye 00BA  
               Set_Addr_Window@xs 00BB                 Set_Addr_Window@ys 00B8  
                         ?_OutSeg 00B6                Byte_SetPair@pInput 00BE  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 00C1  
              __end_of_HMI_SetBar 3B1A            __end_of_PortC_Property FF0D  
              Word_GetPair@pInput 00BF                __end_of_HMI_Render 3594  
                  ??_Set_Rotation 00B8                         ?_Port_Set 00C2  
                         ?___wmul 00B3                       ?_Robot_Init 0001  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 00B8  
                    ??_ISR_Enable 00B3                       ?_Robot_Stop 0001  
    __size_of_Console_ResetCursor 001C              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 3A5A            __end_of_PortD_Property FF0B  
                         _ADC_AN0 01CE                           _ADC_AN1 01C9  
                         _ADC_AN2 01C4                           _ADC_AN3 01BF  
                      ??_MXK_Init 00F3                 Port_GetPin@pInput 00B3  
               _Console_MakeField 217E                 ??_Console_NewLine 00B3  
          __end_of_HMI_DownSwitch 3A1E                        ??_SPI_Init 00E6  
          Event_TestButton@pState 00CC                        ??_SPI_Send 00B6  
                         ?_printf 00C8                 ??_HMI_InitButtons 00B3  
      __size_of_MXK_InitDIPSwitch 0018            __end_of_PortE_Property FF09  
             Console_Render@F6956 01E8                ?_Console_MakeField 00B8  
                         _COUNTER 002F                   ??_HMI_SetButton 00B3  
            __end_of_HMI_UpSwitch 3A32                           _LED_Set 321C  
         _Console_IncrementCursor 2EEA            __end_of_PortF_Property FF07  
                     _gBackcolour 007F                   ??_HMI_SetNumber 00CB  
                       _I2C1_Done 0111                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 010E                         _I2C1_More 010B  
                       _I2C2_More 0108                         ?_delay_ms 00B3  
       __end_of_Console_Backspace 3130                         ?_delay_us 00B3  
             __size_of_Event_NULL 0002        __end_of_MXK_InitTestButton 39CC  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F            __end_of_PortG_Property FF05  
             ??_Console_MakeField 00BA                           _SPI_DCS 36F2  
            __size_ofi2_MXK_Queue 000E                  ?_Configure_GPIOs 0001  
        ?_InitSerialCommunication 0001                eusartSend@sendChar 00B3  
            i2Byte_GetZone@Offset 0008                __end_of_ISR_Enable 3B10  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
               Event_TestButton@j 0089                        ??_Mode_Set 00B3  
                  ??_Timer2_Clear 00B3                           _Font5x7 FCD7  
            i2Byte_GetZone@pChunk 0004                           _InitADC 32F2  
            i2Byte_GetZone@pInput 0001              SPI_DisableISR@pInput 00B3  
                   ?_Port_GetQuad 00B3                   Byte_SetBit@pBit 00B5  
            Port_TogglePin@pInput 00C7             __end_ofi2_Byte_SetBit 321C  
                         __Hparam 0000                 Port_GetQuad@pQuad 00B5  
                     _Timer2_Init 1708                           __Lparam 0000  
                     _Timer0_Stop 3B2A             __size_of_Console_Init 006A  
                         OutSeg@a 0039   __end_ofPortProperty_Valid@F6830 FCBD  
                   LCD_Write@mode 00B6                   __size_of_OutSeg 006E  
                     _Motor_Count 0073                        ??_Port_Set 00C5  
       __end_of_Console_MakeField 2224                 _Console_PrintChar 1470  
                   ?_Port_SetType 00ED                           _gCursor 0043  
                         ___awdiv 26A6             ??_Console_ClearCursor 00B3  
                         _lBuffer 02F0                           ___lldiv 272C  
                 __size_of___wmul 0028                           ___lwdiv 2FE6  
                         ___lwmod 3336                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 2B64                ?_Console_PrintChar 0001  
                         __pcinit 2026                   ?_HMI_DownSwitch 0001  
                         __ramtop 1000                         _CCW_Count 006F  
                         __ptext0 198C                           __ptext1 1308  
                         __ptext2 3A8E                           __ptext3 1470  
                         __ptext4 235A                           __ptext5 26A6  
                         __ptext6 2EEA                           __ptext7 282E  
                         __ptext8 2AF8                           __ptext9 38D0  
                      _eusartSend 3A9C                   __size_of_printf 0168  
                         _average 0029                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _countOn 00F5  
                         _dpowers FCBD                         _T2CONbits 000FCA  
                   LED_Set@pValue 00C7               __size_of_Reset_High 0018  
           Event_DIPSwitch@pState 00CC                      ?_GetPortPORT 00B3  
                    ?_GetPortTRIS 00B3               ??_Console_PrintChar 00C3  
               __end_of_eusartRec 3B22                       _Port_GetPin 34B2  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 00AF  
             LCD_DrawRectangle@p4 01D3                      ??i2_delay_us 0003  
                      ??_delay_ms 00B5                        ??_delay_us 00B5  
                         _reverse 2F92                         _DIPSwitch 017C  
             __size_of_Timer0_ISR 0028                       _Port_SetPin 1EC2  
         __size_of_UpdateDistance 0024                    LCD_DrawField@i 00D5  
                       _LCD_Reset 3130               __size_of_Motor_Step 010E  
                       _LCD_Write 3892              __size_of_MXK_Dequeue 0034  
                      delay_ms@ms 00B3              end_of_initialization 20CA  
             __size_of_Robot_Init 0016                        delay_us@us 00B3  
             __size_of_Robot_Stop 0020                 ??_HMI_SetSegments 00B6  
         Console_PrintChar@pInput 00C6                      _Console_Init 2BCE  
            __size_of_MXK_Release 0018        __end_of_Port_CheckPairType 2E30  
                         itos@Out 00C7                    ??_Port_GetQuad 00B6  
              _PortProperty_Valid 2D08                         i2u1049_48 37AE  
              Byte_SetQuad@pInput 00BE                SPI_MinSpeed@pInput 00C2  
              Byte_SetQuad@pValue 00C1             __size_of_Byte_GetPair 001C  
                 ___lldiv@divisor 00B7             __size_of_Byte_GetZone 007A  
               ??_HMI_RightSwitch 00B9                   ___lldiv@counter 00BF  
       __end_of_Console_PrintChar 15C0                    ??_Port_SetType 00F0  
      __end_of_Port_CheckQuadType 31D0                           printf@c 00D3  
                         printf@f 00C8                    Port_Init@pPort 01D9  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0020  
          Console_MakeField@Index 00BC                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 00C2  
           __size_of_Byte_SetQuad 0020        __end_of_Port_CheckPortType 33BA  
           __size_of_Byte_SetZone 008E                __end_ofi2_delay_us 343A  
              Button_Init@pInitIO 01DB                 ?_Port_SetQuadType 00E9  
                     _gForecolour 00FD         ??_Console_IncrementCursor 00B7  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
                      _timercount 0069                ??_Port_SetQuadType 00ED  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 00B9  
           Console_Render@lCursor 00D9   __end_of_InitSerialCommunication 38D0  
                       _MXK_Queue 3AB8                  __CFG_CPUDIV$OSC1 000000  
                Byte_GetZone@pMax 00B5        __size_of_Console_Backspace 0050  
                       _TRISCbits 000F94                       _Square_Dist 0122  
                 _Set_Addr_Window 22C0                    SPI_Init@pClock 00E0  
                ??_LCD_Word_Write 00BA             __end_of_LCD_DrawField 282E  
                  Port_Set@pInput 00C2                    SPI_Init@pInput 00E6  
            ??_PortProperty_Valid 00C6                    Port_Set@pValue 00C4  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 2480  
                      ?_LCD_Write 00B6                      _Byte_GetPair 38EC  
              HMI_SetButton@F7213 FCD0                      _Byte_GetZone 2924  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 00D3  
               LCD_DrawField@ymax 00D4                    _Port_TogglePin 36C4  
                _Event_TestButton 35FE              Port_SetPinType@Props 00DE  
                    ?_Byte_GetBit 00B3           __size_ofi2_Byte_GetPair 001A  
                    _Byte_SetByte 3AAA                      _Byte_SetPair 3852  
                    _Byte_SetQuad 3872           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 2480              Port_SetPinType@pType 00DC  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 00B3  
                   ?_SPI_MaxSpeed 00C2                 __size_of_LCD_Fill 0048  
                    ??_Event_NULL 00B3                 __size_of_LCD_Init 0148  
               __size_of_LED_Init 0054                     ?_SPI_MinSpeed 00C2  
           __end_ofi2_Timer0_Stop 3B42                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 017C                 __size_of_HMI_Poll 0060  
                   ?i2_Motor_Step 0001                      ?_Init_Timer0 0001  
      __size_of_Console_MakeField 00A6                    __end_of_OutSeg 2AF8  
           __size_of_HMI_UpSwitch 0014                         _Close_Pos 0071  
                  __end_of___wmul 379A             __end_of_HMI_DIPSwitch 3A0A  
                   __pidataCOMRAM 3A80                      ?_Button_Init 01D7  
                 _FunctInitButton 299E                      ?_Button_Poll 00CE  
                     ?_eusartSend 0001                         _Bus_State 004B  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 14AA  
               __size_of_MXK_Init 013E                         _BumpState 011E  
            __end_of_Timer2_Clear 3B2A                    __end_of_printf 1470  
               __size_of_SPI_Init 03A4                 __size_of_SPI_Send 006A  
                   ?_Word_GetPair 00BF                  ??_Timer0_Restart 00B3  
              Port_SetType@Output 00F2               start_initialization 2026  
                      ?_MXK_Queue 00B3          PortProperty_Valid@Errors 00C8  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 303A  
              Port_SetType@pInput 00ED                      _Current_Dist 0126  
                     _ADC_Reading 011C                        HMI_Init@in 00EE  
             HMI_SetNumber@pInput 00C9             __end_ofi2_Port_SetPin 217E  
              __end_of_Event_NULL 1406            __end_of_Port_TogglePin 36F2  
                   ?_Word_SetPair 00C2                 Byte_SetBit@pInput 00B3  
                  ??_MXK_SwitchTo 00B9                 Byte_SetBit@pValue 00B6  
              ?_LCD_FillRectangle 00BC               _Console_ResetCursor 38D0  
     PortProperty_Valid@pPinDrive 00C4              MXK_BlockSwitchTo@CUR 00B9  
        PortProperty_Valid@pInput 00C2                     i2_MXK_Release 3B42  
          LCD_FillRectangle@pSize 00C2                    SPI_Send@pInput 00B3  
                    ??_Reset_High 00C7          __size_of_Port_SetPinType 019E  
                  ??_SPI_MaxSpeed 00C4             Port_SetQuadType@pQuad 00EB  
                       _ToSegment 064E               ??_LCD_FillRectangle 00C6  
           Port_SetQuadType@pType 00EC                   _Console_NewLine 282E  
                  ??_SPI_MinSpeed 00C4                      _HMI_UpSwitch 3A1E  
                       _Reset_Low 3954                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 3B36                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 0150                         _gCharSize 01F0  
                Timer2_Init@INDEX 008D                         OutSeg@cur 003B  
                  ??i2_Motor_Step 0015                          ??_OutSeg 00B7  
                       OutSeg@out 00BA           __size_of_Console_Render 01B6  
                    ??_Motor_Step 00C7                Byte_SetZone@Offset 00BC  
                    ??_Robot_Init 00B4                          ??___wmul 00B7  
                    ??_Robot_Stop 00B4              ?_Console_ResetCursor 0001  
                       _Port_Init 1006                       __pdataBANK0 00F3  
                     __pdataBANK1 01E8                 __size_of_Port_Set 02AA  
              Byte_SetZone@pChunk 00B6                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 00B3                Byte_SetZone@pValue 00B8  
                   Mode_Set@pMode 00B3                          ??_printf 00CC  
         __end_of_Set_Addr_Window 235A          Port_CheckQuadType@Output 00E8  
                       _gLineSize 01EC          Port_CheckQuadType@pDrive 00E5  
                  ??_Word_GetPair 00C2          Port_CheckQuadType@pInput 00E2  
            __end_of_Port_GetQuad 3478         __end_of_LCD_FillRectangle 308E  
                     __pbssBIGRAM 02F0                          ?_LED_Set 00C7  
                     __pbssCOMRAM 0029                __end_of_Reset_High 3984  
                   __pcstackBANK0 00B3                     __pcstackBANK1 01D7  
                  _UpdateDistance 380E                        itos@Length 00C5  
                  ??_Word_SetPair 00C6                __end_of_Timer0_ISR 37C2  
            __size_of_GetPortPORT 0088                       ??_LCD_Reset 00CC  
            __size_of_GetPortTRIS 0088              __end_of_Port_SetType 0CB2  
                        ?_SPI_DCS 00B3                   ?_Port_TogglePin 00C7  
                     ??_LCD_Write 00B7                 __size_of_delay_ms 005C  
               __size_of_delay_us 0046               __CFG_CCP2MX$DEFAULT 000000  
              __end_of_Motor_Step 1D04             Timer2_Init@pFrequency 00C0  
                  ?i2_MXK_Release 0001                __end_of_Robot_Init 39E2  
              __end_of_Robot_Stop 3852                          ?_InitADC 0001  
        Port_CheckPairType@Output 00DF               __size_of_eusartSend 000E  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 00DC  
        Port_CheckPairType@pInput 00D9                    reverse@tempVar 00B7  
              _MXK_InitTestButton 39B4                        ?_Reset_Low 0001  
          __size_of_MXK_DIPSwitch 0014                      ?_Timer2_Init 00C0  
                ??_HMI_LeftSwitch 00B9                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 00B3                     _lStepFunction 0066  
         __size_of_MXK_TestButton 0014                 Byte_SetPair@pPair 00C0  
         __end_of_FunctInitButton 2A14                  ??_HMI_DownSwitch 00B9  
__size_of_InitSerialCommunication 001E                         __pintcode 1408  
                   __pmediumconst FBEA             ??_Console_ResetCursor 00B3  
                        ?___awdiv 00B3                         __ptext100 3632  
                       __ptext101 38EC                         __ptext110 3908  
                       __ptext102 2924                         __ptext111 3892  
                       __ptext103 3872                         __ptext120 3B3C  
                       __ptext112 2B64                         __ptext104 2480  
                       __ptext121 3AFA                         __ptext113 3A6E  
                       __ptext105 0CB2                         __ptext130 3AC6  
                       __ptext122 20D4                         __ptext114 217E  
                       __ptext106 303A                         __ptext131 0000  
                       __ptext123 3694                         __ptext115 371E  
                       __ptext107 27B0                         __ptext124 3922  
                       __ptext116 2BCE                         __ptext108 3772  
                       __ptext125 2A14                         __ptext109 22C0  
                       __ptext126 31D0                         __ptext118 379A  
                       __ptext127 3594                         __ptext119 1D04  
                       __ptext128 33FA                         __ptext129 3B42  
                       _pShiftVal 0077                          ?___lldiv 00B3  
                      ?_Port_Init 01D7                          ?___lwdiv 00B3  
                        ?___lwmod 00BA               ?_MXK_InitTestButton 0001  
               ?_Console_FormFeed 0001                 _GetPortProperties 2596  
     __end_ofTimer0_Init@PRESCALE FCAD                ??_Console_FormFeed 00B3  
                 _HMI_SetSegments 2224                ?_GetPortProperties 00B3  
                Event_NULL@pState 0001            __end_of_UpdateDistance 3832  
        __size_of_Event_DIPSwitch 0026             __size_of_Set_Rotation 0092  
                   ??i2_MXK_Queue 0004                       ??_MXK_Queue 00B6  
                    ?_Port_GetPin 00B3             __end_of_HMI_SetButton 2924  
            __size_of_Console_Tab 0094                          ?_reverse 00B3  
                    ?_Port_SetPin 00C2                         _readIndex 002D  
           __end_of_HMI_SetNumber 380E                  ___lwdiv@quotient 00B8  
                 _HMI_RightSwitch 3A32               ??_GetPortProperties 00B5  
         __end_of_Console_NewLine 28AA                         _eusartRec 3B1A  
            ??_MXK_InitTestButton 00E0                Byte_GetPair@pInput 00BC  
                  __size_of_putch 000E           __end_of_HMI_InitButtons 3B3C  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 3922                          _LCD_Fill 3264  
                        _LCD_Init 15C0                    ___wmul@product 00B7  
                        _HMIBoard 012C                    i2_Byte_GetZone 2A14  
                        _LED_Init 2F3E                         delay_ms@u 00B5  
              Button_Poll@pButton 00CE                         delay_us@u 00B5  
                        _HMI_Init 118C                          _HMI_Poll 2D70  
              MXK_Queue@pCallback 00B3                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 3694  
        __size_of_Configure_GPIOs 005E              __size_of_Byte_GetBit 002C  
               Byte_SetQuad@pQuad 00C0                          i2u401_44 31E4  
                        i2u401_45 31E0                          i2u402_44 320A  
                        i2u402_45 3206                          i2u405_40 3428  
                        i2u353_40 2A36                          _PIR1bits 000F9E  
                        i2u353_47 2A2C                          i2u355_40 2A7E  
                        i2u355_45 2A7A                          _PIR3bits 000FA4  
                        _CW_Count 006D                          i2u494_40 1D48  
                        i2u495_40 1D5C                          i2u496_40 1D94  
            __size_of_Byte_SetBit 0052                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                _Sensor_Observe_Fin 0118  
                __CFG_WDTPS$32768 000000                  HMI_SetBar@pValue 00B3  
               Button_Init@pInput 01D7           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 00DD  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 00A2  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 261E  
                        _SSP2STAT 000F6D                      _Set_Rotation 23EE  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 34B2  
              _Port_CheckPairType 2DD0                          _MXK_Init 184E  
            __size_of_Init_Timer0 0018                   MXK_SwitchTo@CUR 00B9  
                        _SPI_Init 0000          __end_of_Event_TestButton 3632  
                        _SPI_Send 2B64                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 00B8  
               ___wmul@multiplier 00B3                 Byte_GetBit@Output 00B7  
                      printf@flag 00CD              Timer2_Init@pCPUClock 00C9  
      __size_of_LCD_FillRectangle 0054              __size_of_Button_Init 00B0  
                 ?_UpdateDistance 0001              __end_of_SPI_MaxSpeed 2CA0  
                      printf@prec 00CE                 Byte_GetBit@pInput 00B3  
             Port_SetPinType@pPin 00DB              __size_of_Button_Poll 012E  
              _Port_CheckQuadType 3180                     _MXK_DIPSwitch 39E2  
             ?_Port_CheckPairType 00D9                         main@right 01E4  
            __end_of_SPI_MinSpeed 2D08                     ??_MXK_Dequeue 00C9  
                __size_of_LED_Set 0048            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 337A             Button_Poll@pIncrement 00D0  
         PortProperty_Valid@F6830 FCAD              __end_ofi2_Motor_Step 1E04  
                 ??i2_MXK_Release 0001                         copy_data0 203A  
                       copy_data1 205A                         copy_data2 207A  
                   ??_MXK_Release 00B3                        ?_eusartRec 0001  
          __end_ofi2_Byte_GetPair 393C         __size_of_Port_SetQuadType 0212  
                __size_of_SPI_DCS 002C               ?_Port_CheckQuadType 00E2  
          __end_ofi2_Byte_GetZone 2A8A               __end_ofi2_MXK_Queue 3AD4  
             ?_Port_CheckPortType 00E9                   itos@destination 00C1  
                        _InitList FBEB              _Motor_Step$intlevel0 1BFC  
                        _Mode_Set 3A6E                Port_GetQuad@Output 00B8  
                     ??_ToSegment 00B3                      _ISR_Function 1408  
              Port_GetQuad@pInput 00B3                      _Timer2_Clear 3B22  
                __size_of_InitADC 0044              __end_of_Word_GetPair 3664  
                        _lCBuffer 028C              ??_Port_CheckPairType 00DD  
                     ??_Reset_Low 00C7                          __Hrparam 0000  
                    OutSeg@pInput 00B9                    _Console_Render 0CB2  
                        __Lrparam 0000                   Timer2_Init@RDIV 00C5  
                ?_FunctInitButton 0001                    LCD_Write@value 00B7  
                        _Port_Set 03A4                      OutSeg@segset 003A  
                       rand@screw 0037              __end_of_Word_SetPair 3526  
                     ??_Port_Init 01DA           __end_of_HMI_SetSegments 22C0  
            ??_Port_CheckQuadType 00E6             __size_of_Port_GetQuad 003E  
                __size_of___awdiv 0086                  __size_of___lldiv 0084  
               _MXK_BlockSwitchTo 3526                  __size_of___lwdiv 0054  
            ??_Port_CheckPortType 00EC                  __size_of___lwmod 0044  
                        _lBufferX 008F                          _lBufferY 008E  
             Timer2_Init@PRESCALE FCD4                      ??_eusartSend 00B3  
                 LCD_Fill@pColour 00BC                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 007D  
         __end_of_HMI_RightSwitch 3A46            Byte_GetZone@pChunkSize 00B7  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 00B7  
           __size_of_Port_SetType 01CE                     reverse@length 00B5  
                       itos@input 00BF             i2MXK_SwitchTo@pModule 0008  
                        _delay_ms 2E8E                          _delay_us 32AC  
                        _clearall 0090                   ___lwdiv@divisor 00B5  
                 ___lwdiv@counter 00B7                   Port_GetPin@pPin 00B5  
                        __ptext10 30E0                          __ptext11 3664  
                        __ptext20 337A                          __ptext12 39CC  
                        __ptext21 03A4                          __ptext13 380E  
                        __ptext30 3B2A                          __ptext22 3AAA  
                        __ptext14 3B1A                          __ptext31 3AEE  
                        __ptext23 250E                          __ptext15 3832  
                        __ptext40 2E30                          __ptext32 3478  
                        __ptext24 2596                          __ptext16 3A9C  
                        __ptext41 2C38                          __ptext33 393C  
                        __ptext25 261E                          __ptext17 184E  
                        __ptext50 355E                          __ptext42 3130  
                        __ptext34 3AB8                          __ptext26 2F3E  
                        __ptext18 1006                          __ptext51 2A8A  
                        __ptext43 2E8E                          __ptext35 3526  
                        __ptext27 321C                          __ptext19 0AE4  
                        __ptext60 3A5A                          __ptext52 2D70  
                        __ptext44 3954                          __ptext36 32AC  
                        __ptext28 35CA                          __ptext61 343A  
                        __ptext53 1AC8                          __ptext45 396C  
                        __ptext37 15C0                          __ptext29 1BF6  
                        __ptext70 2224                          __ptext62 37C2  
                        __ptext54 39E2                          __ptext46 3984  
                        __ptext38 23EE                          __ptext71 064E  
                        __ptext63 1404                          __ptext55 39F6  
                        __ptext47 38B2                          __ptext39 3264  
             ??_MXK_BlockSwitchTo 00B9                          __ptext80 2CA0  
                        __ptext72 28AA                          __ptext64 35FE  
                        __ptext56 3A0A                          __ptext48 32F2  
                        __ptext81 0000                          __ptext73 33BA  
                        __ptext65 37E8                          __ptext57 3A1E  
                        __ptext49 3B06                          __ptext90 3B36  
                        __ptext82 1708                          __ptext74 36C4  
                        __ptext66 1E04                          __ptext58 3A32  
                        __ptext91 39B4                          __ptext83 272C  
                        __ptext75 1EC2                          __ptext67 2F92  
                        __ptext59 3A46                          __ptext92 0E68  
                        __ptext84 3B22                          __ptext76 34B2  
                        __ptext68 3336                          __ptext93 308E  
                        __ptext85 374A                          __ptext77 3B10  
                        __ptext69 2FE6                          __ptext94 08D2  
                        __ptext86 36F2                          __ptext78 3B30  
                        __ptext95 34EC                          __ptext87 299E  
                        __ptext79 118C                          __ptext96 3852  
                        __ptext88 1F76                          __ptext97 3180  
                        __ptext89 399C                          __ptext98 2DD0  
                        __ptext99 2D08                      _SSP1CON1bits 000FC6  
                __size_of_reverse 0054                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 0068                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 00CC                   ?i2_Byte_GetZone 0001  
                        _countOff 00F3                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001               __end_of_MXK_Dequeue 35FE  
               HMI_SetSegments@in 00B7             Button_Init@pThreshold 01D9  
                   __size_of_main 013C                     __size_of_itos 00BE  
               Byte_GetPair@pPair 00BE                          _readings 0200  
          __end_of_Console_Render 0E68               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                __end_of_eusartSend 3AAA  
                    _Port_GetQuad 343A               __end_of_MXK_Release 3954  
                  _MXK_TestButton 3A5A           _InitSerialCommunication 38B2  
                   i2_Byte_SetBit 31D0               i2Word_GetPair@pPair 000F  
       __end_of_MXK_BlockSwitchTo 355E          ?_Console_IncrementCursor 0001  
            __size_of_Timer2_Init 0146                          int$flags 0051  
            __size_of_Timer0_Stop 0006                      _Port_SetType 0AE4  
                    Port_Set@Type 00D9        __size_of_GetPortProperties 0088  
          __size_of_LCD_DrawField 007E                 ??_Configure_GPIOs 00E8  
                       printf@val 00D1                      _SSP1STATbits 000FC7  
                        main@left 01E6                          main@down 01E7  
                  Timer0_Init@DIV 0104                    Timer0_Init@PRE 0035  
                    _SSP2STATbits 000F6D                          exp@coeff FEB7  
                      _LED_Toggle 33BA                          log@coeff FEDF  
                      _HMI_GetBar 3B30              Button_Init@pGetState 01DE  
          PortProperty_Valid@Pair 00D8                  ??_Port_TogglePin 00CA  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 00C5                        _HMI_SetBar 3B10  
                      _HMI_Render 355E                  Byte_SetZone@MASK 00BD  
                     i2_MXK_Queue 3AC6                    Timer2_Init@DIV 0100  
                  Timer2_Init@PRE 008C                  Byte_SetZone@pMax 00B5  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 003A  
            Button_Init@pFunction 01E1                          itos@Data 00C3  
                     ??_eusartRec 00B3                LCD_FillRectangle@i 00C8  
              LCD_FillRectangle@j 00C9              __size_of_Port_SetPin 00B4  
                        intlevel2 0000                      reverse@input 00B3  
                     _numReadings 0047            __size_of_HMI_DIPSwitch 0014  
                ___lwmod@dividend 00BA                  ___lldiv@dividend 00B3  
          __end_of_MXK_TestButton 3A6E                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001A                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 003A                    _SPI_DisableISR 374A  
                 Port_Init@pInput 01D7                          printf@ap 00CF  
                     _thisReading 006B            __size_ofi2_Port_SetPin 00AA  
                      _ISR_Enable 3B06                  ?_HMI_SetSegments 00B4  
         Console_MakeField@Column 00BF             __size_of_SPI_MaxSpeed 0068  
                   SPI_DCS@pInput 00B3             __size_of_SPI_MinSpeed 0068  
                 ??_MXK_DIPSwitch 00B9             __size_ofi2_Motor_Step 0100  
         Console_MakeField@pInput 00BE                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 00BB                     ??_GetPortPORT 00B5  
                 ___lwmod@divisor 00BC                     ??_GetPortTRIS 00B5  
              Word_SetPair@pInput 00C2                   ___lwmod@counter 00BE  
              Word_SetPair@pValue 00C5                       _MXK_Dequeue 35CA  
                  LED_Toggle@pLED 00CB                     _LCD_DrawField 27B0  
                _Port_SetQuadType 08D2                       _MXK_Release 393C  
       __size_of_Console_FormFeed 006C                      _MXK_SwitchTo 3478  
           __size_of_Word_GetPair 0032                Byte_GetZone@Offset 00BA  
                   ?_Console_Init 0001                 Word_SetPair@pPair 00C4  
                 _Port_SetPinType 0E68           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 00BB         ??_InitSerialCommunication 00B3  
              Byte_GetZone@pChunk 00B6                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 38EC                Byte_GetZone@pInput 00B3  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 2F3E  
           __size_of_Word_SetPair 003A            __end_of_SPI_DisableISR 3772  
                    _SPI_MaxSpeed 2C38                      _SPI_MinSpeed 2CA0  
              Port_Set@TypeActual 00D7  
