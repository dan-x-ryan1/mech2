

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon May 21 10:02:29 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1,inline
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1,inline
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1,inline
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1
   166                           	psect	text145,global,reloc=2,class=CODE,delta=1
   167                           	psect	text146,global,reloc=2,class=CODE,delta=1,inline
   168                           	psect	text147,global,reloc=2,class=CODE,delta=1
   169                           	psect	text148,global,reloc=2,class=CODE,delta=1
   170                           	psect	text149,global,reloc=2,class=CODE,delta=1
   171                           	psect	text150,global,reloc=2,class=CODE,delta=1
   172                           	psect	text151,global,reloc=2,class=CODE,delta=1
   173                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   174                           	psect	text152,global,reloc=2,class=CODE,delta=1
   175                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   176                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   177  0000                     
   178                           ; Version 1.44
   179                           ; Generated 14/09/2017 GMT
   180                           ; 
   181                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   182                           ; All rights reserved.
   183                           ; 
   184                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   185                           ; 
   186                           ; Redistribution and use in source and binary forms, with or without modification, are
   187                           ; permitted provided that the following conditions are met:
   188                           ; 
   189                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   190                           ;        conditions and the following disclaimer.
   191                           ; 
   192                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   193                           ;        of conditions and the following disclaimer in the documentation and/or other
   194                           ;        materials provided with the distribution.
   195                           ; 
   196                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   197                           ;        software without specific prior written permission.
   198                           ; 
   199                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   200                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   201                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   202                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   203                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   204                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   205                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   206                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   207                           ; 
   208                           ; 
   209                           ; Code-generator required, PIC18F67J50 Definitions
   210                           ; 
   211                           ; SFR Addresses
   212  0000                     
   213                           	psect	idataCOMRAM
   214  015B5C                     __pidataCOMRAM:
   215                           	opt stack 0
   216                           
   217                           ;initializer for _gCursor
   218  015B5C  0006               	dw	6
   219  015B5E  0006               	dw	6
   220                           
   221                           ;initializer for _top
   222  015B60  FFFF               	dw	65535
   223                           
   224                           ;initializer for _Bus_State
   225  015B62  01                 	db	1
   226                           
   227                           ;initializer for _change
   228  015B63  01                 	db	1
   229                           
   230                           ;initializer for _l
   231  015B64  80                 	db	128
   232                           
   233                           ;initializer for _w
   234  015B65  80                 	db	128
   235                           
   236                           	psect	idataBANK1
   237  015932                     __pidataBANK1:
   238                           	opt stack 0
   239                           
   240                           ;initializer for Console_Render@F6956
   241  015932  0006               	dw	6
   242  015934  0006               	dw	6
   243                           
   244                           ;initializer for _gLineSize
   245  015936  0080               	dw	128
   246  015938  0007               	dw	7
   247                           
   248                           ;initializer for _gCharSize
   249  01593A  0005               	dw	5
   250  01593C  0007               	dw	7
   251                           
   252                           ;initializer for _countOff
   253  01593E  00F8               	dw	248
   254                           
   255                           ;initializer for _countOn
   256  015940  007C               	dw	124
   257                           
   258                           ;initializer for _Low_Sensor
   259  015942  2710               	dw	10000
   260                           
   261                           ;initializer for _Spd
   262  015944  00C8               	dw	200
   263                           
   264                           ;initializer for _numReadings
   265  015946  000A               	dw	10
   266                           
   267                           ;initializer for _Current_Direction
   268  015948  0003               	dw	3
   269                           
   270                           ;initializer for _gForecolour
   271  01594A  FFFF               	dw	65535
   272                           
   273                           ;initializer for _A
   274  01594C  41                 	db	65
   275                           
   276                           ;initializer for _a
   277  01594D  61                 	db	97
   278                           
   279                           ;initializer for _zero
   280  01594E  30                 	db	48
   281                           
   282                           	psect	mediumconst
   283  00FB1C                     __pmediumconst:
   284                           	opt stack 0
   285  00FB1C  00                 	db	0
   286  00FB1D                     _InitList:
   287                           	opt stack 0
   288  00FB1D  1100               	dw	4352
   289  00FB1F  0080               	dw	128
   290  00FB21  012C               	dw	300
   291  00FB23  B100               	dw	45312
   292  00FB25  0002               	dw	2
   293  00FB27  0035               	dw	53
   294  00FB29  0036               	dw	54
   295  00FB2B  B200               	dw	45568
   296  00FB2D  0002               	dw	2
   297  00FB2F  0035               	dw	53
   298  00FB31  0036               	dw	54
   299  00FB33  B300               	dw	45824
   300  00FB35  0002               	dw	2
   301  00FB37  0035               	dw	53
   302  00FB39  0036               	dw	54
   303  00FB3B  0002               	dw	2
   304  00FB3D  0035               	dw	53
   305  00FB3F  0036               	dw	54
   306  00FB41  B400               	dw	46080
   307  00FB43  0000               	dw	0
   308  00FB45  C000               	dw	49152
   309  00FB47  00A2               	dw	162
   310  00FB49  0002               	dw	2
   311  00FB4B  0084               	dw	132
   312  00FB4D  C100               	dw	49408
   313  00FB4F  00C5               	dw	197
   314  00FB51  C200               	dw	49664
   315  00FB53  000D               	dw	13
   316  00FB55  0000               	dw	0
   317  00FB57  C300               	dw	49920
   318  00FB59  008D               	dw	141
   319  00FB5B  002A               	dw	42
   320  00FB5D  C400               	dw	50176
   321  00FB5F  008D               	dw	141
   322  00FB61  00EE               	dw	238
   323  00FB63  C500               	dw	50432
   324  00FB65  000A               	dw	10
   325  00FB67  3600               	dw	13824
   326  00FB69  00C8               	dw	200
   327  00FB6B  E000               	dw	57344
   328  00FB6D  0012               	dw	18
   329  00FB6F  001C               	dw	28
   330  00FB71  0010               	dw	16
   331  00FB73  0018               	dw	24
   332  00FB75  0033               	dw	51
   333  00FB77  002C               	dw	44
   334  00FB79  0025               	dw	37
   335  00FB7B  0028               	dw	40
   336  00FB7D  0028               	dw	40
   337  00FB7F  0027               	dw	39
   338  00FB81  002F               	dw	47
   339  00FB83  003C               	dw	60
   340  00FB85  0000               	dw	0
   341  00FB87  0003               	dw	3
   342  00FB89  0003               	dw	3
   343  00FB8B  0010               	dw	16
   344  00FB8D  0080               	dw	128
   345  00FB8F  0078               	dw	120
   346  00FB91  E100               	dw	57600
   347  00FB93  0012               	dw	18
   348  00FB95  001C               	dw	28
   349  00FB97  0010               	dw	16
   350  00FB99  0018               	dw	24
   351  00FB9B  002D               	dw	45
   352  00FB9D  0028               	dw	40
   353  00FB9F  0023               	dw	35
   354  00FBA1  0028               	dw	40
   355  00FBA3  0028               	dw	40
   356  00FBA5  0026               	dw	38
   357  00FBA7  002F               	dw	47
   358  00FBA9  003B               	dw	59
   359  00FBAB  0000               	dw	0
   360  00FBAD  0003               	dw	3
   361  00FBAF  0003               	dw	3
   362  00FBB1  0010               	dw	16
   363  00FBB3  3A00               	dw	14848
   364  00FBB5  0005               	dw	5
   365  00FBB7  2A00               	dw	10752
   366  00FBB9  0000               	dw	0
   367  00FBBB  0002               	dw	2
   368  00FBBD  0000               	dw	0
   369  00FBBF  0081               	dw	129
   370  00FBC1  2B00               	dw	11008
   371  00FBC3  0000               	dw	0
   372  00FBC5  0003               	dw	3
   373  00FBC7  0000               	dw	0
   374  00FBC9  00A2               	dw	162
   375  00FBCB  2900               	dw	10496
   376  00FBCD  2C00               	dw	11264
   377  00FBCF                     __end_of_InitList:
   378                           	opt stack 0
   379  00FBCF                     Timer0_Init@PRESCALE:
   380                           	opt stack 0
   381  00FBCF  0002               	dw	2
   382  00FBD1  0004               	dw	4
   383  00FBD3  0008               	dw	8
   384  00FBD5  0010               	dw	16
   385  00FBD7  0020               	dw	32
   386  00FBD9  0040               	dw	64
   387  00FBDB  0080               	dw	128
   388  00FBDD  0100               	dw	256
   389  00FBDF                     __end_ofTimer0_Init@PRESCALE:
   390                           	opt stack 0
   391  00FBDF                     PortProperty_Valid@F6830:
   392                           	opt stack 0
   393  00FBDF  00                 	db	0
   394  00FBE0  01                 	db	1
   395  00FBE1  02                 	db	2
   396  00FBE2  00                 	db	0
   397  00FBE3  01                 	db	1
   398  00FBE4  00                 	db	0
   399  00FBE5  01                 	db	1
   400  00FBE6  00                 	db	0
   401  00FBE7  02                 	db	2
   402  00FBE8  02                 	db	2
   403  00FBE9  00                 	db	0
   404  00FBEA  00                 	db	0
   405  00FBEB  03                 	db	3
   406  00FBEC  03                 	db	3
   407  00FBED  03                 	db	3
   408  00FBEE  00                 	db	0
   409  00FBEF                     __end_ofPortProperty_Valid@F6830:
   410                           	opt stack 0
   411  00FBEF                     _dpowers:
   412                           	opt stack 0
   413  00FBEF  0001               	dw	1
   414  00FBF1  000A               	dw	10
   415  00FBF3  0064               	dw	100
   416  00FBF5  03E8               	dw	1000
   417  00FBF7  2710               	dw	10000
   418  00FBF9                     __end_of_dpowers:
   419                           	opt stack 0
   420  00FBF9                     _MASKS:
   421                           	opt stack 0
   422  00FBF9  00                 	db	0
   423  00FBFA  01                 	db	1
   424  00FBFB  03                 	db	3
   425  00FBFC  07                 	db	7
   426  00FBFD  0F                 	db	15
   427  00FBFE  1F                 	db	31
   428  00FBFF  3F                 	db	63
   429  00FC00  7F                 	db	127
   430  00FC01  FF                 	db	255
   431  00FC02                     __end_of_MASKS:
   432                           	opt stack 0
   433  00FC02                     HMI_SetButton@F7213:
   434                           	opt stack 0
   435  00FC02  00                 	db	0
   436  00FC03  02                 	db	2
   437  00FC04  01                 	db	1
   438  00FC05  03                 	db	3
   439  00FC06                     __end_ofHMI_SetButton@F7213:
   440                           	opt stack 0
   441  00FC06                     Timer2_Init@PRESCALE:
   442                           	opt stack 0
   443  00FC06  01                 	db	1
   444  00FC07  04                 	db	4
   445  00FC08  10                 	db	16
   446  00FC09                     __end_ofTimer2_Init@PRESCALE:
   447                           	opt stack 0
   448  00FC09                     _Font5x7:
   449                           	opt stack 0
   450  00FC09  00                 	db	0
   451  00FC0A  00                 	db	0
   452  00FC0B  00                 	db	0
   453  00FC0C  00                 	db	0
   454  00FC0D  00                 	db	0
   455  00FC0E  00                 	db	0
   456  00FC0F  00                 	db	0
   457  00FC10  5F                 	db	95
   458  00FC11  00                 	db	0
   459  00FC12  00                 	db	0
   460  00FC13  00                 	db	0
   461  00FC14  07                 	db	7
   462  00FC15  00                 	db	0
   463  00FC16  07                 	db	7
   464  00FC17  00                 	db	0
   465  00FC18  14                 	db	20
   466  00FC19  7F                 	db	127
   467  00FC1A  14                 	db	20
   468  00FC1B  7F                 	db	127
   469  00FC1C  14                 	db	20
   470  00FC1D  24                 	db	36
   471  00FC1E  2A                 	db	42
   472  00FC1F  7F                 	db	127
   473  00FC20  2A                 	db	42
   474  00FC21  12                 	db	18
   475  00FC22  23                 	db	35
   476  00FC23  13                 	db	19
   477  00FC24  08                 	db	8
   478  00FC25  64                 	db	100
   479  00FC26  62                 	db	98
   480  00FC27  36                 	db	54
   481  00FC28  49                 	db	73
   482  00FC29  55                 	db	85
   483  00FC2A  22                 	db	34
   484  00FC2B  50                 	db	80
   485  00FC2C  00                 	db	0
   486  00FC2D  05                 	db	5
   487  00FC2E  03                 	db	3
   488  00FC2F  00                 	db	0
   489  00FC30  00                 	db	0
   490  00FC31  00                 	db	0
   491  00FC32  1C                 	db	28
   492  00FC33  22                 	db	34
   493  00FC34  41                 	db	65
   494  00FC35  00                 	db	0
   495  00FC36  00                 	db	0
   496  00FC37  41                 	db	65
   497  00FC38  22                 	db	34
   498  00FC39  1C                 	db	28
   499  00FC3A  00                 	db	0
   500  00FC3B  08                 	db	8
   501  00FC3C  2A                 	db	42
   502  00FC3D  1C                 	db	28
   503  00FC3E  2A                 	db	42
   504  00FC3F  08                 	db	8
   505  00FC40  08                 	db	8
   506  00FC41  08                 	db	8
   507  00FC42  3E                 	db	62
   508  00FC43  08                 	db	8
   509  00FC44  08                 	db	8
   510  00FC45  00                 	db	0
   511  00FC46  50                 	db	80
   512  00FC47  30                 	db	48
   513  00FC48  00                 	db	0
   514  00FC49  00                 	db	0
   515  00FC4A  08                 	db	8
   516  00FC4B  08                 	db	8
   517  00FC4C  08                 	db	8
   518  00FC4D  08                 	db	8
   519  00FC4E  08                 	db	8
   520  00FC4F  00                 	db	0
   521  00FC50  60                 	db	96
   522  00FC51  60                 	db	96
   523  00FC52  00                 	db	0
   524  00FC53  00                 	db	0
   525  00FC54  20                 	db	32
   526  00FC55  10                 	db	16
   527  00FC56  08                 	db	8
   528  00FC57  04                 	db	4
   529  00FC58  02                 	db	2
   530  00FC59  3E                 	db	62
   531  00FC5A  51                 	db	81
   532  00FC5B  49                 	db	73
   533  00FC5C  45                 	db	69
   534  00FC5D  3E                 	db	62
   535  00FC5E  00                 	db	0
   536  00FC5F  42                 	db	66
   537  00FC60  7F                 	db	127
   538  00FC61  40                 	db	64
   539  00FC62  00                 	db	0
   540  00FC63  42                 	db	66
   541  00FC64  61                 	db	97
   542  00FC65  51                 	db	81
   543  00FC66  49                 	db	73
   544  00FC67  46                 	db	70
   545  00FC68  21                 	db	33
   546  00FC69  41                 	db	65
   547  00FC6A  45                 	db	69
   548  00FC6B  4B                 	db	75
   549  00FC6C  31                 	db	49
   550  00FC6D  18                 	db	24
   551  00FC6E  14                 	db	20
   552  00FC6F  12                 	db	18
   553  00FC70  7F                 	db	127
   554  00FC71  10                 	db	16
   555  00FC72  27                 	db	39
   556  00FC73  45                 	db	69
   557  00FC74  45                 	db	69
   558  00FC75  45                 	db	69
   559  00FC76  39                 	db	57
   560  00FC77  3C                 	db	60
   561  00FC78  4A                 	db	74
   562  00FC79  49                 	db	73
   563  00FC7A  49                 	db	73
   564  00FC7B  30                 	db	48
   565  00FC7C  01                 	db	1
   566  00FC7D  71                 	db	113
   567  00FC7E  09                 	db	9
   568  00FC7F  05                 	db	5
   569  00FC80  03                 	db	3
   570  00FC81  36                 	db	54
   571  00FC82  49                 	db	73
   572  00FC83  49                 	db	73
   573  00FC84  49                 	db	73
   574  00FC85  36                 	db	54
   575  00FC86  06                 	db	6
   576  00FC87  49                 	db	73
   577  00FC88  49                 	db	73
   578  00FC89  29                 	db	41
   579  00FC8A  1E                 	db	30
   580  00FC8B  00                 	db	0
   581  00FC8C  36                 	db	54
   582  00FC8D  36                 	db	54
   583  00FC8E  00                 	db	0
   584  00FC8F  00                 	db	0
   585  00FC90  00                 	db	0
   586  00FC91  56                 	db	86
   587  00FC92  36                 	db	54
   588  00FC93  00                 	db	0
   589  00FC94  00                 	db	0
   590  00FC95  00                 	db	0
   591  00FC96  08                 	db	8
   592  00FC97  14                 	db	20
   593  00FC98  22                 	db	34
   594  00FC99  41                 	db	65
   595  00FC9A  14                 	db	20
   596  00FC9B  14                 	db	20
   597  00FC9C  14                 	db	20
   598  00FC9D  14                 	db	20
   599  00FC9E  14                 	db	20
   600  00FC9F  41                 	db	65
   601  00FCA0  22                 	db	34
   602  00FCA1  14                 	db	20
   603  00FCA2  08                 	db	8
   604  00FCA3  00                 	db	0
   605  00FCA4  02                 	db	2
   606  00FCA5  01                 	db	1
   607  00FCA6  51                 	db	81
   608  00FCA7  09                 	db	9
   609  00FCA8  06                 	db	6
   610  00FCA9  32                 	db	50
   611  00FCAA  49                 	db	73
   612  00FCAB  79                 	db	121
   613  00FCAC  41                 	db	65
   614  00FCAD  3E                 	db	62
   615  00FCAE  7E                 	db	126
   616  00FCAF  11                 	db	17
   617  00FCB0  11                 	db	17
   618  00FCB1  11                 	db	17
   619  00FCB2  7E                 	db	126
   620  00FCB3  7F                 	db	127
   621  00FCB4  49                 	db	73
   622  00FCB5  49                 	db	73
   623  00FCB6  49                 	db	73
   624  00FCB7  36                 	db	54
   625  00FCB8  3E                 	db	62
   626  00FCB9  41                 	db	65
   627  00FCBA  41                 	db	65
   628  00FCBB  41                 	db	65
   629  00FCBC  22                 	db	34
   630  00FCBD  7F                 	db	127
   631  00FCBE  41                 	db	65
   632  00FCBF  41                 	db	65
   633  00FCC0  22                 	db	34
   634  00FCC1  1C                 	db	28
   635  00FCC2  7F                 	db	127
   636  00FCC3  49                 	db	73
   637  00FCC4  49                 	db	73
   638  00FCC5  49                 	db	73
   639  00FCC6  41                 	db	65
   640  00FCC7  7F                 	db	127
   641  00FCC8  09                 	db	9
   642  00FCC9  09                 	db	9
   643  00FCCA  01                 	db	1
   644  00FCCB  01                 	db	1
   645  00FCCC  3E                 	db	62
   646  00FCCD  41                 	db	65
   647  00FCCE  41                 	db	65
   648  00FCCF  51                 	db	81
   649  00FCD0  32                 	db	50
   650  00FCD1  7F                 	db	127
   651  00FCD2  08                 	db	8
   652  00FCD3  08                 	db	8
   653  00FCD4  08                 	db	8
   654  00FCD5  7F                 	db	127
   655  00FCD6  00                 	db	0
   656  00FCD7  41                 	db	65
   657  00FCD8  7F                 	db	127
   658  00FCD9  41                 	db	65
   659  00FCDA  00                 	db	0
   660  00FCDB  20                 	db	32
   661  00FCDC  40                 	db	64
   662  00FCDD  41                 	db	65
   663  00FCDE  3F                 	db	63
   664  00FCDF  01                 	db	1
   665  00FCE0  7F                 	db	127
   666  00FCE1  08                 	db	8
   667  00FCE2  14                 	db	20
   668  00FCE3  22                 	db	34
   669  00FCE4  41                 	db	65
   670  00FCE5  7F                 	db	127
   671  00FCE6  40                 	db	64
   672  00FCE7  40                 	db	64
   673  00FCE8  40                 	db	64
   674  00FCE9  40                 	db	64
   675  00FCEA  7F                 	db	127
   676  00FCEB  02                 	db	2
   677  00FCEC  04                 	db	4
   678  00FCED  02                 	db	2
   679  00FCEE  7F                 	db	127
   680  00FCEF  7F                 	db	127
   681  00FCF0  04                 	db	4
   682  00FCF1  08                 	db	8
   683  00FCF2  10                 	db	16
   684  00FCF3  7F                 	db	127
   685  00FCF4  3E                 	db	62
   686  00FCF5  41                 	db	65
   687  00FCF6  41                 	db	65
   688  00FCF7  41                 	db	65
   689  00FCF8  3E                 	db	62
   690  00FCF9  7F                 	db	127
   691  00FCFA  09                 	db	9
   692  00FCFB  09                 	db	9
   693  00FCFC  09                 	db	9
   694  00FCFD  06                 	db	6
   695  00FCFE  3E                 	db	62
   696  00FCFF  41                 	db	65
   697  00FD00  51                 	db	81
   698  00FD01  21                 	db	33
   699  00FD02  5E                 	db	94
   700  00FD03  7F                 	db	127
   701  00FD04  09                 	db	9
   702  00FD05  19                 	db	25
   703  00FD06  29                 	db	41
   704  00FD07  46                 	db	70
   705  00FD08  46                 	db	70
   706  00FD09  49                 	db	73
   707  00FD0A  49                 	db	73
   708  00FD0B  49                 	db	73
   709  00FD0C  31                 	db	49
   710  00FD0D  01                 	db	1
   711  00FD0E  01                 	db	1
   712  00FD0F  7F                 	db	127
   713  00FD10  01                 	db	1
   714  00FD11  01                 	db	1
   715  00FD12  3F                 	db	63
   716  00FD13  40                 	db	64
   717  00FD14  40                 	db	64
   718  00FD15  40                 	db	64
   719  00FD16  3F                 	db	63
   720  00FD17  1F                 	db	31
   721  00FD18  20                 	db	32
   722  00FD19  40                 	db	64
   723  00FD1A  20                 	db	32
   724  00FD1B  1F                 	db	31
   725  00FD1C  7F                 	db	127
   726  00FD1D  20                 	db	32
   727  00FD1E  18                 	db	24
   728  00FD1F  20                 	db	32
   729  00FD20  7F                 	db	127
   730  00FD21  63                 	db	99
   731  00FD22  14                 	db	20
   732  00FD23  08                 	db	8
   733  00FD24  14                 	db	20
   734  00FD25  63                 	db	99
   735  00FD26  03                 	db	3
   736  00FD27  04                 	db	4
   737  00FD28  78                 	db	120
   738  00FD29  04                 	db	4
   739  00FD2A  03                 	db	3
   740  00FD2B  61                 	db	97
   741  00FD2C  51                 	db	81
   742  00FD2D  49                 	db	73
   743  00FD2E  45                 	db	69
   744  00FD2F  43                 	db	67
   745  00FD30  00                 	db	0
   746  00FD31  00                 	db	0
   747  00FD32  7F                 	db	127
   748  00FD33  41                 	db	65
   749  00FD34  41                 	db	65
   750  00FD35  02                 	db	2
   751  00FD36  04                 	db	4
   752  00FD37  08                 	db	8
   753  00FD38  10                 	db	16
   754  00FD39  20                 	db	32
   755  00FD3A  41                 	db	65
   756  00FD3B  41                 	db	65
   757  00FD3C  7F                 	db	127
   758  00FD3D  00                 	db	0
   759  00FD3E  00                 	db	0
   760  00FD3F  04                 	db	4
   761  00FD40  02                 	db	2
   762  00FD41  01                 	db	1
   763  00FD42  02                 	db	2
   764  00FD43  04                 	db	4
   765  00FD44  40                 	db	64
   766  00FD45  40                 	db	64
   767  00FD46  40                 	db	64
   768  00FD47  40                 	db	64
   769  00FD48  40                 	db	64
   770  00FD49  00                 	db	0
   771  00FD4A  01                 	db	1
   772  00FD4B  02                 	db	2
   773  00FD4C  04                 	db	4
   774  00FD4D  00                 	db	0
   775  00FD4E  20                 	db	32
   776  00FD4F  54                 	db	84
   777  00FD50  54                 	db	84
   778  00FD51  54                 	db	84
   779  00FD52  78                 	db	120
   780  00FD53  7F                 	db	127
   781  00FD54  48                 	db	72
   782  00FD55  44                 	db	68
   783  00FD56  44                 	db	68
   784  00FD57  38                 	db	56
   785  00FD58  38                 	db	56
   786  00FD59  44                 	db	68
   787  00FD5A  44                 	db	68
   788  00FD5B  44                 	db	68
   789  00FD5C  20                 	db	32
   790  00FD5D  38                 	db	56
   791  00FD5E  44                 	db	68
   792  00FD5F  44                 	db	68
   793  00FD60  48                 	db	72
   794  00FD61  7F                 	db	127
   795  00FD62  38                 	db	56
   796  00FD63  54                 	db	84
   797  00FD64  54                 	db	84
   798  00FD65  54                 	db	84
   799  00FD66  18                 	db	24
   800  00FD67  08                 	db	8
   801  00FD68  7E                 	db	126
   802  00FD69  09                 	db	9
   803  00FD6A  01                 	db	1
   804  00FD6B  02                 	db	2
   805  00FD6C  08                 	db	8
   806  00FD6D  14                 	db	20
   807  00FD6E  54                 	db	84
   808  00FD6F  54                 	db	84
   809  00FD70  3C                 	db	60
   810  00FD71  7F                 	db	127
   811  00FD72  08                 	db	8
   812  00FD73  04                 	db	4
   813  00FD74  04                 	db	4
   814  00FD75  78                 	db	120
   815  00FD76  00                 	db	0
   816  00FD77  44                 	db	68
   817  00FD78  7D                 	db	125
   818  00FD79  40                 	db	64
   819  00FD7A  00                 	db	0
   820  00FD7B  20                 	db	32
   821  00FD7C  40                 	db	64
   822  00FD7D  44                 	db	68
   823  00FD7E  3D                 	db	61
   824  00FD7F  00                 	db	0
   825  00FD80  00                 	db	0
   826  00FD81  7F                 	db	127
   827  00FD82  10                 	db	16
   828  00FD83  28                 	db	40
   829  00FD84  44                 	db	68
   830  00FD85  00                 	db	0
   831  00FD86  41                 	db	65
   832  00FD87  7F                 	db	127
   833  00FD88  40                 	db	64
   834  00FD89  00                 	db	0
   835  00FD8A  7C                 	db	124
   836  00FD8B  04                 	db	4
   837  00FD8C  18                 	db	24
   838  00FD8D  04                 	db	4
   839  00FD8E  78                 	db	120
   840  00FD8F  7C                 	db	124
   841  00FD90  08                 	db	8
   842  00FD91  04                 	db	4
   843  00FD92  04                 	db	4
   844  00FD93  78                 	db	120
   845  00FD94  38                 	db	56
   846  00FD95  44                 	db	68
   847  00FD96  44                 	db	68
   848  00FD97  44                 	db	68
   849  00FD98  38                 	db	56
   850  00FD99  7C                 	db	124
   851  00FD9A  14                 	db	20
   852  00FD9B  14                 	db	20
   853  00FD9C  14                 	db	20
   854  00FD9D  08                 	db	8
   855  00FD9E  08                 	db	8
   856  00FD9F  14                 	db	20
   857  00FDA0  14                 	db	20
   858  00FDA1  18                 	db	24
   859  00FDA2  7C                 	db	124
   860  00FDA3  7C                 	db	124
   861  00FDA4  08                 	db	8
   862  00FDA5  04                 	db	4
   863  00FDA6  04                 	db	4
   864  00FDA7  08                 	db	8
   865  00FDA8  48                 	db	72
   866  00FDA9  54                 	db	84
   867  00FDAA  54                 	db	84
   868  00FDAB  54                 	db	84
   869  00FDAC  20                 	db	32
   870  00FDAD  04                 	db	4
   871  00FDAE  3F                 	db	63
   872  00FDAF  44                 	db	68
   873  00FDB0  40                 	db	64
   874  00FDB1  20                 	db	32
   875  00FDB2  3C                 	db	60
   876  00FDB3  40                 	db	64
   877  00FDB4  40                 	db	64
   878  00FDB5  20                 	db	32
   879  00FDB6  7C                 	db	124
   880  00FDB7  1C                 	db	28
   881  00FDB8  20                 	db	32
   882  00FDB9  40                 	db	64
   883  00FDBA  20                 	db	32
   884  00FDBB  1C                 	db	28
   885  00FDBC  3C                 	db	60
   886  00FDBD  40                 	db	64
   887  00FDBE  30                 	db	48
   888  00FDBF  40                 	db	64
   889  00FDC0  3C                 	db	60
   890  00FDC1  44                 	db	68
   891  00FDC2  28                 	db	40
   892  00FDC3  10                 	db	16
   893  00FDC4  28                 	db	40
   894  00FDC5  44                 	db	68
   895  00FDC6  0C                 	db	12
   896  00FDC7  50                 	db	80
   897  00FDC8  50                 	db	80
   898  00FDC9  50                 	db	80
   899  00FDCA  3C                 	db	60
   900  00FDCB  44                 	db	68
   901  00FDCC  64                 	db	100
   902  00FDCD  54                 	db	84
   903  00FDCE  4C                 	db	76
   904  00FDCF  44                 	db	68
   905  00FDD0  00                 	db	0
   906  00FDD1  08                 	db	8
   907  00FDD2  36                 	db	54
   908  00FDD3  41                 	db	65
   909  00FDD4  00                 	db	0
   910  00FDD5  00                 	db	0
   911  00FDD6  00                 	db	0
   912  00FDD7  7F                 	db	127
   913  00FDD8  00                 	db	0
   914  00FDD9  00                 	db	0
   915  00FDDA  00                 	db	0
   916  00FDDB  41                 	db	65
   917  00FDDC  36                 	db	54
   918  00FDDD  08                 	db	8
   919  00FDDE  00                 	db	0
   920  00FDDF  08                 	db	8
   921  00FDE0  08                 	db	8
   922  00FDE1  2A                 	db	42
   923  00FDE2  1C                 	db	28
   924  00FDE3  08                 	db	8
   925  00FDE4  08                 	db	8
   926  00FDE5  1C                 	db	28
   927  00FDE6  2A                 	db	42
   928  00FDE7  08                 	db	8
   929  00FDE8  08                 	db	8
   930  00FDE9                     __end_of_Font5x7:
   931                           	opt stack 0
   932  00FDE9                     exp@coeff:
   933                           	opt stack 0
   934  00FDE9  0000               	dw	0
   935  00FDEB  3F80               	dw	16256
   936  00FDED  7218               	dw	29208
   937  00FDEF  3F31               	dw	16177
   938  00FDF1  FDF0               	dw	65008
   939  00FDF3  3E75               	dw	15989
   940  00FDF5  5847               	dw	22599
   941  00FDF7  3D63               	dw	15715
   942  00FDF9  9558               	dw	38232
   943  00FDFB  3C1D               	dw	15389
   944  00FDFD  C482               	dw	50306
   945  00FDFF  3AAE               	dw	15022
   946  00FE01  78A8               	dw	30888
   947  00FE03  3921               	dw	14625
   948  00FE05  93EF               	dw	37871
   949  00FE07  3780               	dw	14208
   950  00FE09  92A0               	dw	37536
   951  00FE0B  35A7               	dw	13735
   952  00FE0D  5646               	dw	22086
   953  00FE0F  3415               	dw	13333
   954  00FE11                     __end_ofexp@coeff:
   955                           	opt stack 0
   956  00FE11                     log@coeff:
   957                           	opt stack 0
   958  00FE11  0000               	dw	0
   959  00FE13  0000               	dw	0
   960  00FE15  FFC4               	dw	65476
   961  00FE17  3F7F               	dw	16255
   962  00FE19  EF80               	dw	61312
   963  00FE1B  BEFF               	dw	48895
   964  00FE1D  E190               	dw	57744
   965  00FE1F  3EA9               	dw	16041
   966  00FE21  82EC               	dw	33516
   967  00FE23  BE76               	dw	48758
   968  00FE25  AD82               	dw	44418
   969  00FE27  3E2B               	dw	15915
   970  00FE29  3C0E               	dw	15374
   971  00FE2B  BDC3               	dw	48579
   972  00FE2D  D187               	dw	53639
   973  00FE2F  3D13               	dw	15635
   974  00FE31  7841               	dw	30785
   975  00FE33  BBD3               	dw	48083
   976  00FE35                     __end_oflog@coeff:
   977                           	opt stack 0
   978  00FE35                     _PortG_Property:
   979                           	opt stack 0
   980  00FE35  FC00               	dw	64512
   981  00FE37                     __end_of_PortG_Property:
   982                           	opt stack 0
   983  00FE37                     _PortF_Property:
   984                           	opt stack 0
   985  00FE37  0FFF               	dw	4095
   986  00FE39                     __end_of_PortF_Property:
   987                           	opt stack 0
   988  00FE39                     _PortE_Property:
   989                           	opt stack 0
   990  00FE39  0000               	dw	0
   991  00FE3B                     __end_of_PortE_Property:
   992                           	opt stack 0
   993  00FE3B                     _PortD_Property:
   994                           	opt stack 0
   995  00FE3B  FFFF               	dw	65535
   996  00FE3D                     __end_of_PortD_Property:
   997                           	opt stack 0
   998  00FE3D                     _PortC_Property:
   999                           	opt stack 0
  1000  00FE3D  FFF0               	dw	65520
  1001  00FE3F                     __end_of_PortC_Property:
  1002                           	opt stack 0
  1003  00FE3F                     _PortB_Property:
  1004                           	opt stack 0
  1005  00FE3F  FF00               	dw	65280
  1006  00FE41                     __end_of_PortB_Property:
  1007                           	opt stack 0
  1008  00FE41                     _PortA_Property:
  1009                           	opt stack 0
  1010  00FE41  00FF               	dw	255
  1011  00FE43                     __end_of_PortA_Property:
  1012                           	opt stack 0
  1013  0000                     _ADRES	set	4035
  1014  0000                     _TMR0	set	4054
  1015  0000                     _TXREG1	set	4014
  1016  0000                     _ADCON0	set	4034
  1017  0000                     _ADCON1	set	4033
  1018  0000                     _RCREG1	set	4015
  1019  0000                     _SPBRG1	set	4016
  1020  0000                     _TXSTA1bits	set	4013
  1021  0000                     _BAUDCON1bits	set	3966
  1022  0000                     _RCSTA1	set	4012
  1023  0000                     _TXSTA1	set	4013
  1024  0000                     _TRISCbits	set	3988
  1025  0000                     _PR2	set	4043
  1026  0000                     _T2CONbits	set	4042
  1027  0000                     _T0CONbits	set	4053
  1028  0000                     _RCONbits	set	4048
  1029  0000                     _OSCTUNEbits	set	3995
  1030  0000                     _PIR3	set	4004
  1031  0000                     _PIR2	set	4001
  1032  0000                     _PIR1	set	3998
  1033  0000                     _INTCONbits	set	4082
  1034  0000                     _SSP2CON2bits	set	3947
  1035  0000                     _SSP1CON2bits	set	4037
  1036  0000                     _SSP1ADD	set	4040
  1037  0000                     _ANCON0	set	4033
  1038  0000                     _ADRESL	set	4035
  1039  0000                     _ADRESH	set	4036
  1040  0000                     _ADCON1bits	set	4033
  1041  0000                     _ADCON0bits	set	4034
  1042  0000                     _SSP2CON1bits	set	3948
  1043  0000                     _SSP1CON1bits	set	4038
  1044  0000                     _SSP2STATbits	set	3949
  1045  0000                     _SSP1STATbits	set	4039
  1046  0000                     _PIE3bits	set	4003
  1047  0000                     _PIE1bits	set	3997
  1048  0000                     _PIR3bits	set	4004
  1049  0000                     _PIR1bits	set	3998
  1050  0000                     _IPR3bits	set	4005
  1051  0000                     _IPR1bits	set	3999
  1052  0000                     _PORTFbits	set	3973
  1053  0000                     _SSP2CON2	set	3947
  1054  0000                     _SSP1CON2	set	4037
  1055  0000                     _SSP2BUF	set	3951
  1056  0000                     _SSP2CON1	set	3948
  1057  0000                     _SSP2STAT	set	3949
  1058  0000                     _SSP1BUF	set	4041
  1059  0000                     _SSP1CON1	set	4038
  1060  0000                     _SSP1STAT	set	4039
  1061  0000                     _LATG	set	3983
  1062  0000                     _LATF	set	3982
  1063  0000                     _LATE	set	3981
  1064  0000                     _LATD	set	3980
  1065  0000                     _LATC	set	3979
  1066  0000                     _LATB	set	3978
  1067  0000                     _LATA	set	3977
  1068  0000                     _TRISG	set	3992
  1069  0000                     _TRISF	set	3991
  1070  0000                     _TRISE	set	3990
  1071  0000                     _TRISD	set	3989
  1072  0000                     _TRISC	set	3988
  1073  0000                     _TRISB	set	3987
  1074  0000                     _TRISA	set	3986
  1075  0000                     _PORTG	set	3974
  1076  0000                     _PORTF	set	3973
  1077  0000                     _PORTE	set	3972
  1078  0000                     _PORTD	set	3971
  1079  0000                     _PORTC	set	3970
  1080  0000                     _PORTB	set	3969
  1081  0000                     _PORTA	set	3968
  1082  0000                     _GODONE	set	32273
  1083  0000                     _ADON	set	32272
  1084  0000                     _RA3	set	31747
  1085  0000                     _RA2	set	31746
  1086  0000                     _RD7	set	31775
  1087  0000                     _RD5	set	31773
  1088  0000                     _TRISD7	set	31919
  1089  0000                     _TRISD5	set	31917
  1090  0000                     _TRISA3	set	31891
  1091  0000                     _TRISA2	set	31890
  1092  00FE43  43                 	db	67	;'C'
  1093  00FE44  6F                 	db	111	;'o'
  1094  00FE45  75                 	db	117	;'u'
  1095  00FE46  6C                 	db	108	;'l'
  1096  00FE47  64                 	db	100	;'d'
  1097  00FE48  20                 	db	32
  1098  00FE49  6E                 	db	110	;'n'
  1099  00FE4A  6F                 	db	111	;'o'
  1100  00FE4B  74                 	db	116	;'t'
  1101  00FE4C  20                 	db	32
  1102  00FE4D  72                 	db	114	;'r'
  1103  00FE4E  65                 	db	101	;'e'
  1104  00FE4F  74                 	db	116	;'t'
  1105  00FE50  72                 	db	114	;'r'
  1106  00FE51  69                 	db	105	;'i'
  1107  00FE52  65                 	db	101	;'e'
  1108  00FE53  76                 	db	118	;'v'
  1109  00FE54  65                 	db	101	;'e'
  1110  00FE55  20                 	db	32
  1111  00FE56  64                 	db	100	;'d'
  1112  00FE57  61                 	db	97	;'a'
  1113  00FE58  74                 	db	116	;'t'
  1114  00FE59  61                 	db	97	;'a'
  1115  00FE5A  2C                 	db	44
  1116  00FE5B  20                 	db	32
  1117  00FE5C  53                 	db	83	;'S'
  1118  00FE5D  74                 	db	116	;'t'
  1119  00FE5E  61                 	db	97	;'a'
  1120  00FE5F  63                 	db	99	;'c'
  1121  00FE60  6B                 	db	107	;'k'
  1122  00FE61  20                 	db	32
  1123  00FE62  69                 	db	105	;'i'
  1124  00FE63  73                 	db	115	;'s'
  1125  00FE64  20                 	db	32
  1126  00FE65  65                 	db	101	;'e'
  1127  00FE66  6D                 	db	109	;'m'
  1128  00FE67  70                 	db	112	;'p'
  1129  00FE68  74                 	db	116	;'t'
  1130  00FE69  79                 	db	121	;'y'
  1131  00FE6A  2E                 	db	46
  1132  00FE6B  0A                 	db	10
  1133  00FE6C  00                 	db	0
  1134  00FE6D  43                 	db	67	;'C'
  1135  00FE6E  6F                 	db	111	;'o'
  1136  00FE6F  75                 	db	117	;'u'
  1137  00FE70  6C                 	db	108	;'l'
  1138  00FE71  64                 	db	100	;'d'
  1139  00FE72  20                 	db	32
  1140  00FE73  6E                 	db	110	;'n'
  1141  00FE74  6F                 	db	111	;'o'
  1142  00FE75  74                 	db	116	;'t'
  1143  00FE76  20                 	db	32
  1144  00FE77  69                 	db	105	;'i'
  1145  00FE78  6E                 	db	110	;'n'
  1146  00FE79  73                 	db	115	;'s'
  1147  00FE7A  65                 	db	101	;'e'
  1148  00FE7B  72                 	db	114	;'r'
  1149  00FE7C  74                 	db	116	;'t'
  1150  00FE7D  20                 	db	32
  1151  00FE7E  64                 	db	100	;'d'
  1152  00FE7F  61                 	db	97	;'a'
  1153  00FE80  74                 	db	116	;'t'
  1154  00FE81  61                 	db	97	;'a'
  1155  00FE82  2C                 	db	44
  1156  00FE83  20                 	db	32
  1157  00FE84  53                 	db	83	;'S'
  1158  00FE85  74                 	db	116	;'t'
  1159  00FE86  61                 	db	97	;'a'
  1160  00FE87  63                 	db	99	;'c'
  1161  00FE88  6B                 	db	107	;'k'
  1162  00FE89  20                 	db	32
  1163  00FE8A  69                 	db	105	;'i'
  1164  00FE8B  73                 	db	115	;'s'
  1165  00FE8C  20                 	db	32
  1166  00FE8D  66                 	db	102	;'f'
  1167  00FE8E  75                 	db	117	;'u'
  1168  00FE8F  6C                 	db	108	;'l'
  1169  00FE90  6C                 	db	108	;'l'
  1170  00FE91  2E                 	db	46
  1171  00FE92  0A                 	db	10
  1172  00FE93  00                 	db	0
  1173  00FE94  0A                 	db	10
  1174  00FE95  54                 	db	84	;'T'
  1175  00FE96  68                 	db	104	;'h'
  1176  00FE97  65                 	db	101	;'e'
  1177  00FE98  20                 	db	32
  1178  00FE99  43                 	db	67	;'C'
  1179  00FE9A  6C                 	db	108	;'l'
  1180  00FE9B  6F                 	db	111	;'o'
  1181  00FE9C  73                 	db	115	;'s'
  1182  00FE9D  65                 	db	101	;'e'
  1183  00FE9E  73                 	db	115	;'s'
  1184  00FE9F  20                 	db	32
  1185  00FEA0  6F                 	db	111	;'o'
  1186  00FEA1  62                 	db	98	;'b'
  1187  00FEA2  6A                 	db	106	;'j'
  1188  00FEA3  65                 	db	101	;'e'
  1189  00FEA4  63                 	db	99	;'c'
  1190  00FEA5  74                 	db	116	;'t'
  1191  00FEA6  20                 	db	32
  1192  00FEA7  28                 	db	40
  1193  00FEA8  6D                 	db	109	;'m'
  1194  00FEA9  6D                 	db	109	;'m'
  1195  00FEAA  29                 	db	41
  1196  00FEAB  3A                 	db	58	;':'
  1197  00FEAC  20                 	db	32
  1198  00FEAD  25                 	db	37
  1199  00FEAE  64                 	db	100	;'d'
  1200  00FEAF  00                 	db	0
  1201  00FEB0  0A                 	db	10
  1202  00FEB1  53                 	db	83	;'S'
  1203  00FEB2  74                 	db	116	;'t'
  1204  00FEB3  65                 	db	101	;'e'
  1205  00FEB4  70                 	db	112	;'p'
  1206  00FEB5  73                 	db	115	;'s'
  1207  00FEB6  20                 	db	32
  1208  00FEB7  54                 	db	84	;'T'
  1209  00FEB8  72                 	db	114	;'r'
  1210  00FEB9  61                 	db	97	;'a'
  1211  00FEBA  76                 	db	118	;'v'
  1212  00FEBB  65                 	db	101	;'e'
  1213  00FEBC  6C                 	db	108	;'l'
  1214  00FEBD  6C                 	db	108	;'l'
  1215  00FEBE  65                 	db	101	;'e'
  1216  00FEBF  64                 	db	100	;'d'
  1217  00FEC0  3A                 	db	58	;':'
  1218  00FEC1  20                 	db	32
  1219  00FEC2  25                 	db	37
  1220  00FEC3  64                 	db	100	;'d'
  1221  00FEC4  20                 	db	32
  1222  00FEC5  0A                 	db	10
  1223  00FEC6  0A                 	db	10
  1224  00FEC7  00                 	db	0
  1225  00FEC8  0A                 	db	10
  1226  00FEC9  53                 	db	83	;'S'
  1227  00FECA  74                 	db	116	;'t'
  1228  00FECB  65                 	db	101	;'e'
  1229  00FECC  70                 	db	112	;'p'
  1230  00FECD  73                 	db	115	;'s'
  1231  00FECE  20                 	db	32
  1232  00FECF  54                 	db	84	;'T'
  1233  00FED0  72                 	db	114	;'r'
  1234  00FED1  61                 	db	97	;'a'
  1235  00FED2  76                 	db	118	;'v'
  1236  00FED3  65                 	db	101	;'e'
  1237  00FED4  6C                 	db	108	;'l'
  1238  00FED5  6C                 	db	108	;'l'
  1239  00FED6  65                 	db	101	;'e'
  1240  00FED7  64                 	db	100	;'d'
  1241  00FED8  3A                 	db	58	;':'
  1242  00FED9  20                 	db	32
  1243  00FEDA  25                 	db	37
  1244  00FEDB  64                 	db	100	;'d'
  1245  00FEDC  00                 	db	0
  1246  00FEDD                     STR_18:
  1247  00FEDD  48                 	db	72	;'H'
  1248  00FEDE  6F                 	db	111	;'o'
  1249  00FEDF  6D                 	db	109	;'m'
  1250  00FEE0  65                 	db	101	;'e'
  1251  00FEE1  5F                 	db	95	;'_'
  1252  00FEE2  42                 	db	66	;'B'
  1253  00FEE3  61                 	db	97	;'a'
  1254  00FEE4  73                 	db	115	;'s'
  1255  00FEE5  65                 	db	101	;'e'
  1256  00FEE6  5F                 	db	95	;'_'
  1257  00FEE7  53                 	db	83	;'S'
  1258  00FEE8  74                 	db	116	;'t'
  1259  00FEE9  61                 	db	97	;'a'
  1260  00FEEA  74                 	db	116	;'t'
  1261  00FEEB  65                 	db	101	;'e'
  1262  00FEEC  3A                 	db	58	;':'
  1263  00FEED  20                 	db	32
  1264  00FEEE  25                 	db	37
  1265  00FEEF  64                 	db	100	;'d'
  1266  00FEF0  00                 	db	0
  1267  00FEF1  53                 	db	83	;'S'
  1268  00FEF2  74                 	db	116	;'t'
  1269  00FEF3  65                 	db	101	;'e'
  1270  00FEF4  70                 	db	112	;'p'
  1271  00FEF5  70                 	db	112	;'p'
  1272  00FEF6  65                 	db	101	;'e'
  1273  00FEF7  64                 	db	100	;'d'
  1274  00FEF8  20                 	db	32
  1275  00FEF9  33                 	db	51	;'3'
  1276  00FEFA  36                 	db	54	;'6'
  1277  00FEFB  30                 	db	48	;'0'
  1278  00FEFC  20                 	db	32
  1279  00FEFD  64                 	db	100	;'d'
  1280  00FEFE  65                 	db	101	;'e'
  1281  00FEFF  67                 	db	103	;'g'
  1282  00FF00  72                 	db	114	;'r'
  1283  00FF01  65                 	db	101	;'e'
  1284  00FF02  65                 	db	101	;'e'
  1285  00FF03  73                 	db	115	;'s'
  1286  00FF04  00                 	db	0
  1287  00FF05                     STR_17:
  1288  00FF05  0A                 	db	10
  1289  00FF06  48                 	db	72	;'H'
  1290  00FF07  6F                 	db	111	;'o'
  1291  00FF08  6D                 	db	109	;'m'
  1292  00FF09  65                 	db	101	;'e'
  1293  00FF0A  20                 	db	32
  1294  00FF0B  42                 	db	66	;'B'
  1295  00FF0C  61                 	db	97	;'a'
  1296  00FF0D  73                 	db	115	;'s'
  1297  00FF0E  65                 	db	101	;'e'
  1298  00FF0F  20                 	db	32
  1299  00FF10  66                 	db	102	;'f'
  1300  00FF11  6F                 	db	111	;'o'
  1301  00FF12  75                 	db	117	;'u'
  1302  00FF13  6E                 	db	110	;'n'
  1303  00FF14  64                 	db	100	;'d'
  1304  00FF15  0A                 	db	10
  1305  00FF16  20                 	db	32
  1306  00FF17  00                 	db	0
  1307  00FF18  53                 	db	83	;'S'
  1308  00FF19  65                 	db	101	;'e'
  1309  00FF1A  6E                 	db	110	;'n'
  1310  00FF1B  73                 	db	115	;'s'
  1311  00FF1C  6F                 	db	111	;'o'
  1312  00FF1D  72                 	db	114	;'r'
  1313  00FF1E  20                 	db	32
  1314  00FF1F  4D                 	db	77	;'M'
  1315  00FF20  6F                 	db	111	;'o'
  1316  00FF21  76                 	db	118	;'v'
  1317  00FF22  69                 	db	105	;'i'
  1318  00FF23  6E                 	db	110	;'n'
  1319  00FF24  67                 	db	103	;'g'
  1320  00FF25  21                 	db	33
  1321  00FF26  20                 	db	32
  1322  00FF27  20                 	db	32
  1323  00FF28  20                 	db	32
  1324  00FF29  0A                 	db	10
  1325  00FF2A  00                 	db	0
  1326  00FF2B  0A                 	db	10
  1327  00FF2C  47                 	db	71	;'G'
  1328  00FF2D  6F                 	db	111	;'o'
  1329  00FF2E  69                 	db	105	;'i'
  1330  00FF2F  6E                 	db	110	;'n'
  1331  00FF30  67                 	db	103	;'g'
  1332  00FF31  20                 	db	32
  1333  00FF32  62                 	db	98	;'b'
  1334  00FF33  61                 	db	97	;'a'
  1335  00FF34  63                 	db	99	;'c'
  1336  00FF35  6B                 	db	107	;'k'
  1337  00FF36  20                 	db	32
  1338  00FF37  74                 	db	116	;'t'
  1339  00FF38  6F                 	db	111	;'o'
  1340  00FF39  3A                 	db	58	;':'
  1341  00FF3A  20                 	db	32
  1342  00FF3B  25                 	db	37
  1343  00FF3C  64                 	db	100	;'d'
  1344  00FF3D  00                 	db	0
  1345  00FF3E  0A                 	db	10
  1346  00FF3F  20                 	db	32
  1347  00FF40  46                 	db	70	;'F'
  1348  00FF41  6F                 	db	111	;'o'
  1349  00FF42  75                 	db	117	;'u'
  1350  00FF43  6E                 	db	110	;'n'
  1351  00FF44  64                 	db	100	;'d'
  1352  00FF45  20                 	db	32
  1353  00FF46  46                 	db	70	;'F'
  1354  00FF47  6C                 	db	108	;'l'
  1355  00FF48  61                 	db	97	;'a'
  1356  00FF49  67                 	db	103	;'g'
  1357  00FF4A  3A                 	db	58	;':'
  1358  00FF4B  20                 	db	32
  1359  00FF4C  25                 	db	37
  1360  00FF4D  64                 	db	100	;'d'
  1361  00FF4E  00                 	db	0
  1362  00FF4F                     STR_36:
  1363  00FF4F  72                 	db	114	;'r'
  1364  00FF50  65                 	db	101	;'e'
  1365  00FF51  76                 	db	118	;'v'
  1366  00FF52  3A                 	db	58	;':'
  1367  00FF53  25                 	db	37
  1368  00FF54  64                 	db	100	;'d'
  1369  00FF55  20                 	db	32
  1370  00FF56  54                 	db	84	;'T'
  1371  00FF57  61                 	db	97	;'a'
  1372  00FF58  72                 	db	114	;'r'
  1373  00FF59  3A                 	db	58	;':'
  1374  00FF5A  20                 	db	32
  1375  00FF5B  25                 	db	37
  1376  00FF5C  64                 	db	100	;'d'
  1377  00FF5D  0A                 	db	10
  1378  00FF5E  00                 	db	0
  1379  00FF5F                     STR_13:
  1380  00FF5F  52                 	db	82	;'R'
  1381  00FF60  6F                 	db	111	;'o'
  1382  00FF61  62                 	db	98	;'b'
  1383  00FF62  6F                 	db	111	;'o'
  1384  00FF63  74                 	db	116	;'t'
  1385  00FF64  20                 	db	32
  1386  00FF65  52                 	db	82	;'R'
  1387  00FF66  65                 	db	101	;'e'
  1388  00FF67  61                 	db	97	;'a'
  1389  00FF68  64                 	db	100	;'d'
  1390  00FF69  79                 	db	121	;'y'
  1391  00FF6A  21                 	db	33
  1392  00FF6B  20                 	db	32
  1393  00FF6C  0A                 	db	10
  1394  00FF6D  0A                 	db	10
  1395  00FF6E  00                 	db	0
  1396  00FF6F                     STR_31:
  1397  00FF6F  0A                 	db	10
  1398  00FF70  44                 	db	68	;'D'
  1399  00FF71  65                 	db	101	;'e'
  1400  00FF72  73                 	db	115	;'s'
  1401  00FF73  69                 	db	105	;'i'
  1402  00FF74  72                 	db	114	;'r'
  1403  00FF75  65                 	db	101	;'e'
  1404  00FF76  64                 	db	100	;'d'
  1405  00FF77  3A                 	db	58	;':'
  1406  00FF78  20                 	db	32
  1407  00FF79  25                 	db	37
  1408  00FF7A  64                 	db	100	;'d'
  1409  00FF7B  00                 	db	0
  1410  00FF7C                     STR_34:
  1411  00FF7C  57                 	db	87	;'W'
  1412  00FF7D  41                 	db	65	;'A'
  1413  00FF7E  4C                 	db	76	;'L'
  1414  00FF7F  4C                 	db	76	;'L'
  1415  00FF80  20                 	db	32
  1416  00FF81  46                 	db	70	;'F'
  1417  00FF82  4F                 	db	79	;'O'
  1418  00FF83  55                 	db	85	;'U'
  1419  00FF84  4E                 	db	78	;'N'
  1420  00FF85  44                 	db	68	;'D'
  1421  00FF86  0A                 	db	10
  1422  00FF87  00                 	db	0
  1423  00FF88  0A                 	db	10
  1424  00FF89  4E                 	db	78	;'N'
  1425  00FF8A  4F                 	db	79	;'O'
  1426  00FF8B  54                 	db	84	;'T'
  1427  00FF8C  48                 	db	72	;'H'
  1428  00FF8D  49                 	db	73	;'I'
  1429  00FF8E  4E                 	db	78	;'N'
  1430  00FF8F  47                 	db	71	;'G'
  1431  00FF90  21                 	db	33
  1432  00FF91  21                 	db	33
  1433  00FF92  21                 	db	33
  1434  00FF93  00                 	db	0
  1435  00FF94                     STR_37:
  1436  00FF94  50                 	db	80	;'P'
  1437  00FF95  6F                 	db	111	;'o'
  1438  00FF96  73                 	db	115	;'s'
  1439  00FF97  3A                 	db	58	;':'
  1440  00FF98  20                 	db	32
  1441  00FF99  25                 	db	37
  1442  00FF9A  64                 	db	100	;'d'
  1443  00FF9B  2C                 	db	44
  1444  00FF9C  20                 	db	32
  1445  00FF9D  25                 	db	37
  1446  00FF9E  64                 	db	100	;'d'
  1447  00FF9F  00                 	db	0
  1448  00FFA0  0A                 	db	10
  1449  00FFA1  41                 	db	65	;'A'
  1450  00FFA2  44                 	db	68	;'D'
  1451  00FFA3  43                 	db	67	;'C'
  1452  00FFA4  3A                 	db	58	;':'
  1453  00FFA5  20                 	db	32
  1454  00FFA6  25                 	db	37
  1455  00FFA7  64                 	db	100	;'d'
  1456  00FFA8  20                 	db	32
  1457  00FFA9  0A                 	db	10
  1458  00FFAA  0A                 	db	10
  1459  00FFAB  00                 	db	0
  1460  00FFAC                     STR_32:
  1461  00FFAC  0A                 	db	10
  1462  00FFAD  53                 	db	83	;'S'
  1463  00FFAE  70                 	db	112	;'p'
  1464  00FFAF  65                 	db	101	;'e'
  1465  00FFB0  65                 	db	101	;'e'
  1466  00FFB1  64                 	db	100	;'d'
  1467  00FFB2  3A                 	db	58	;':'
  1468  00FFB3  20                 	db	32
  1469  00FFB4  25                 	db	37
  1470  00FFB5  64                 	db	100	;'d'
  1471  00FFB6  00                 	db	0
  1472  00FFB7                     STR_33:
  1473  00FFB7  0A                 	db	10
  1474  00FFB8  45                 	db	69	;'E'
  1475  00FFB9  72                 	db	114	;'r'
  1476  00FFBA  72                 	db	114	;'r'
  1477  00FFBB  6F                 	db	111	;'o'
  1478  00FFBC  72                 	db	114	;'r'
  1479  00FFBD  3A                 	db	58	;':'
  1480  00FFBE  20                 	db	32
  1481  00FFBF  25                 	db	37
  1482  00FFC0  64                 	db	100	;'d'
  1483  00FFC1  00                 	db	0
  1484  00FFC2  0A                 	db	10
  1485  00FFC3  53                 	db	83	;'S'
  1486  00FFC4  74                 	db	116	;'t'
  1487  00FFC5  65                 	db	101	;'e'
  1488  00FFC6  70                 	db	112	;'p'
  1489  00FFC7  73                 	db	115	;'s'
  1490  00FFC8  20                 	db	32
  1491  00FFC9  25                 	db	37
  1492  00FFCA  64                 	db	100	;'d'
  1493  00FFCB  00                 	db	0
  1494  00FFCC                     STR_28:
  1495  00FFCC  0A                 	db	10
  1496  00FFCD  73                 	db	115	;'s'
  1497  00FFCE  70                 	db	112	;'p'
  1498  00FFCF  64                 	db	100	;'d'
  1499  00FFD0  31                 	db	49	;'1'
  1500  00FFD1  20                 	db	32
  1501  00FFD2  25                 	db	37
  1502  00FFD3  64                 	db	100	;'d'
  1503  00FFD4  00                 	db	0
  1504  00FFD5                     STR_29:
  1505  00FFD5  0A                 	db	10
  1506  00FFD6  73                 	db	115	;'s'
  1507  00FFD7  70                 	db	112	;'p'
  1508  00FFD8  64                 	db	100	;'d'
  1509  00FFD9  32                 	db	50	;'2'
  1510  00FFDA  20                 	db	32
  1511  00FFDB  25                 	db	37
  1512  00FFDC  64                 	db	100	;'d'
  1513  00FFDD  00                 	db	0
  1514  00FFDE  0A                 	db	10
  1515  00FFDF  46                 	db	70	;'F'
  1516  00FFE0  6C                 	db	108	;'l'
  1517  00FFE1  61                 	db	97	;'a'
  1518  00FFE2  67                 	db	103	;'g'
  1519  00FFE3  20                 	db	32
  1520  00FFE4  25                 	db	37
  1521  00FFE5  64                 	db	100	;'d'
  1522  00FFE6  00                 	db	0
  1523  00FFE7                     STR_30:
  1524  00FFE7  0A                 	db	10
  1525  00FFE8  41                 	db	65	;'A'
  1526  00FFE9  44                 	db	68	;'D'
  1527  00FFEA  43                 	db	67	;'C'
  1528  00FFEB  20                 	db	32
  1529  00FFEC  25                 	db	37
  1530  00FFED  64                 	db	100	;'d'
  1531  00FFEE  00                 	db	0
  1532  00FFEF                     STR_25:
  1533  00FFEF  64                 	db	100	;'d'
  1534  00FFF0  72                 	db	114	;'r'
  1535  00FFF1  69                 	db	105	;'i'
  1536  00FFF2  76                 	db	118	;'v'
  1537  00FFF3  69                 	db	105	;'i'
  1538  00FFF4  6E                 	db	110	;'n'
  1539  00FFF5  67                 	db	103	;'g'
  1540  00FFF6  00                 	db	0
  1541  00FFF7                     STR_27:
  1542  00FFF7  25                 	db	37
  1543  00FFF8  64                 	db	100	;'d'
  1544  00FFF9  20                 	db	32
  1545  00FFFA  0A                 	db	10
  1546  00FFFB  00                 	db	0
  1547  00FFFC                     STR_1:
  1548  00FFFC  25                 	db	37
  1549  00FFFD  63                 	db	99	;'c'
  1550  00FFFE  00                 	db	0
  1551  0000                     
  1552                           ; #config settings
  1553  00FFFF  00                 	db	0	; dummy byte at the end
  1554  0000                     
  1555                           	psect	cinit
  1556  014142                     __pcinit:
  1557                           	opt stack 0
  1558  014142                     start_initialization:
  1559                           	opt stack 0
  1560  014142                     __initialization:
  1561                           	opt stack 0
  1562                           
  1563                           ; Initialize objects allocated to BANK1 (29 bytes)
  1564                           ; load TBLPTR registers with __pidataBANK1
  1565  014142  0E32               	movlw	low __pidataBANK1
  1566  014144  6EF6               	movwf	tblptrl,c
  1567  014146  0E59               	movlw	high __pidataBANK1
  1568  014148  6EF7               	movwf	tblptrh,c
  1569  01414A  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1570  01414C  6EF8               	movwf	tblptru,c
  1571  01414E  EE01  F0DD         	lfsr	0,__pdataBANK1
  1572  014152  EE10 F01D          	lfsr	1,29
  1573  014156                     copy_data0:
  1574  014156  0009               	tblrd		*+
  1575  014158  CFF5 FFEE          	movff	tablat,postinc0
  1576  01415C  50E5               	movf	postdec1,w,c
  1577  01415E  50E1               	movf	fsr1l,w,c
  1578  014160  E1FA               	bnz	copy_data0
  1579                           
  1580                           ; Initialize objects allocated to COMRAM (10 bytes)
  1581                           ; load TBLPTR registers with __pidataCOMRAM
  1582  014162  0E5C               	movlw	low __pidataCOMRAM
  1583  014164  6EF6               	movwf	tblptrl,c
  1584  014166  0E5B               	movlw	high __pidataCOMRAM
  1585  014168  6EF7               	movwf	tblptrh,c
  1586  01416A  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1587  01416C  6EF8               	movwf	tblptru,c
  1588  01416E  EE00  F047         	lfsr	0,__pdataCOMRAM
  1589  014172  EE10 F00A          	lfsr	1,10
  1590  014176                     copy_data1:
  1591  014176  0009               	tblrd		*+
  1592  014178  CFF5 FFEE          	movff	tablat,postinc0
  1593  01417C  50E5               	movf	postdec1,w,c
  1594  01417E  50E1               	movf	fsr1l,w,c
  1595  014180  E1FA               	bnz	copy_data1
  1596                           
  1597                           ; Clear objects allocated to BIGRAM (300 bytes)
  1598  014182  EE03  F036         	lfsr	0,__pbssBIGRAM
  1599  014186  EE11 F02C          	lfsr	1,300
  1600  01418A                     clear_0:
  1601  01418A  6AEE               	clrf	postinc0,c
  1602  01418C  50E5               	movf	postdec1,w,c
  1603  01418E  50E1               	movf	fsr1l,w,c
  1604  014190  E1FC               	bnz	clear_0
  1605  014192  50E2               	movf	fsr1h,w,c
  1606  014194  E1FA               	bnz	clear_0
  1607                           
  1608                           ; Clear objects allocated to BANK3 (40 bytes)
  1609  014196  EE03  F000         	lfsr	0,__pbssBANK3
  1610  01419A  0E28               	movlw	40
  1611  01419C                     clear_1:
  1612  01419C  6AEE               	clrf	postinc0,c
  1613  01419E  06E8               	decf	wreg,f,c
  1614  0141A0  E1FD               	bnz	clear_1
  1615                           
  1616                           ; Clear objects allocated to BANK2 (248 bytes)
  1617  0141A2  EE02  F000         	lfsr	0,__pbssBANK2
  1618  0141A6  0EF8               	movlw	248
  1619  0141A8                     clear_2:
  1620  0141A8  6AEE               	clrf	postinc0,c
  1621  0141AA  06E8               	decf	wreg,f,c
  1622  0141AC  E1FD               	bnz	clear_2
  1623                           
  1624                           ; Clear objects allocated to BANK1 (221 bytes)
  1625  0141AE  EE01  F000         	lfsr	0,__pbssBANK1
  1626  0141B2  0EDD               	movlw	221
  1627  0141B4                     clear_3:
  1628  0141B4  6AEE               	clrf	postinc0,c
  1629  0141B6  06E8               	decf	wreg,f,c
  1630  0141B8  E1FD               	bnz	clear_3
  1631                           
  1632                           ; Clear objects allocated to BANK0 (3 bytes)
  1633  0141BA  0100               	movlb	0
  1634  0141BC  6BFF               	clrf	(__pbssBANK0+2)& (0+255),b
  1635  0141BE  6BFE               	clrf	(__pbssBANK0+1)& (0+255),b
  1636  0141C0  6BFD               	clrf	__pbssBANK0& (0+255),b
  1637                           
  1638                           ; Clear objects allocated to COMRAM (30 bytes)
  1639  0141C2  EE00  F029         	lfsr	0,__pbssCOMRAM
  1640  0141C6  0E1E               	movlw	30
  1641  0141C8                     clear_4:
  1642  0141C8  6AEE               	clrf	postinc0,c
  1643  0141CA  06E8               	decf	wreg,f,c
  1644  0141CC  E1FD               	bnz	clear_4
  1645  0141CE                     end_of_initialization:
  1646                           	opt stack 0
  1647  0141CE                     __end_of__initialization:
  1648                           	opt stack 0
  1649  0141CE  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1650  0141D0  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1651  0141D2  0100               	movlb	0
  1652  0141D4  EF56  F08F         	goto	_main	;jump to C main() function
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1h	equ	0xFE2
  1661                           fsr1l	equ	0xFE1
  1662                           
  1663                           	psect	bssCOMRAM
  1664  000029                     __pbssCOMRAM:
  1665                           	opt stack 0
  1666  000029                     _lQueue:
  1667                           	opt stack 0
  1668  000029                     	ds	3
  1669  00002C                     _Desired_Level:
  1670                           	opt stack 0
  1671  00002C                     	ds	2
  1672  00002E                     _Y_Pos:
  1673                           	opt stack 0
  1674  00002E                     	ds	2
  1675  000030                     _X_Pos:
  1676                           	opt stack 0
  1677  000030                     	ds	2
  1678  000032                     _readIndex:
  1679                           	opt stack 0
  1680  000032                     	ds	2
  1681  000034                     _Found_Flag:
  1682                           	opt stack 0
  1683  000034                     	ds	2
  1684  000036                     _pShiftVal:
  1685                           	opt stack 0
  1686  000036                     	ds	2
  1687  000038                     _COUNTER:
  1688                           	opt stack 0
  1689  000038                     	ds	2
  1690  00003A                     _lCurrent:
  1691                           	opt stack 0
  1692  00003A                     	ds	2
  1693  00003C                     Event_TestButton@j:
  1694                           	opt stack 0
  1695  00003C                     	ds	1
  1696  00003D                     Timer2_Init@PRE:
  1697                           	opt stack 0
  1698  00003D                     	ds	1
  1699  00003E                     Timer2_Init@INDEX:
  1700                           	opt stack 0
  1701  00003E                     	ds	1
  1702  00003F                     Timer0_Init@PRE:
  1703                           	opt stack 0
  1704  00003F                     	ds	1
  1705  000040                     _INDEX:
  1706                           	opt stack 0
  1707  000040                     	ds	1
  1708  000041                     rand@screw:
  1709                           	opt stack 0
  1710  000041                     	ds	1
  1711  000042                     OutSeg@a:
  1712                           	opt stack 0
  1713  000042                     	ds	1
  1714  000043                     OutSeg@segset:
  1715                           	opt stack 0
  1716  000043                     	ds	1
  1717  000044                     OutSeg@cur:
  1718                           	opt stack 0
  1719  000044                     	ds	1
  1720  000045                     _lBufferX:
  1721                           	opt stack 0
  1722  000045                     	ds	1
  1723  000046                     _clearall:
  1724                           	opt stack 0
  1725  000046                     	ds	1
  1726                           tblptru	equ	0xFF8
  1727                           tblptrh	equ	0xFF7
  1728                           tblptrl	equ	0xFF6
  1729                           tablat	equ	0xFF5
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           postdec1	equ	0xFE5
  1733                           fsr1h	equ	0xFE2
  1734                           fsr1l	equ	0xFE1
  1735                           
  1736                           	psect	dataCOMRAM
  1737  000047                     __pdataCOMRAM:
  1738                           	opt stack 0
  1739  000047                     _gCursor:
  1740                           	opt stack 0
  1741  000047                     	ds	4
  1742  00004B                     _top:
  1743                           	opt stack 0
  1744  00004B                     	ds	2
  1745  00004D                     _Bus_State:
  1746                           	opt stack 0
  1747  00004D                     	ds	1
  1748  00004E                     _change:
  1749                           	opt stack 0
  1750  00004E                     	ds	1
  1751  00004F                     _l:
  1752                           	opt stack 0
  1753  00004F                     	ds	1
  1754  000050                     _w:
  1755                           	opt stack 0
  1756  000050                     	ds	1
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1h	equ	0xFE2
  1765                           fsr1l	equ	0xFE1
  1766                           
  1767                           	psect	bssBANK0
  1768  0000FD                     __pbssBANK0:
  1769                           	opt stack 0
  1770  0000FD                     _lMotor:
  1771                           	opt stack 0
  1772  0000FD                     	ds	2
  1773  0000FF                     _lBufferY:
  1774                           	opt stack 0
  1775  0000FF                     	ds	1
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1h	equ	0xFE2
  1784                           fsr1l	equ	0xFE1
  1785                           
  1786                           	psect	bssBANK1
  1787  000100                     __pbssBANK1:
  1788                           	opt stack 0
  1789  000100                     Timer2_Init@DIV:
  1790                           	opt stack 0
  1791  000100                     	ds	4
  1792  000104                     Timer0_Init@DIV:
  1793                           	opt stack 0
  1794  000104                     	ds	4
  1795  000108                     _gISR:
  1796                           	opt stack 0
  1797  000108                     	ds	3
  1798  00010B                     _lStepFunction:
  1799                           	opt stack 0
  1800  00010B                     	ds	3
  1801  00010E                     _I2C2_More:
  1802                           	opt stack 0
  1803  00010E                     	ds	3
  1804  000111                     _I2C1_More:
  1805                           	opt stack 0
  1806  000111                     	ds	3
  1807  000114                     _I2C2_Done:
  1808                           	opt stack 0
  1809  000114                     	ds	3
  1810  000117                     _I2C1_Done:
  1811                           	opt stack 0
  1812  000117                     	ds	3
  1813  00011A                     _errno:
  1814                           	opt stack 0
  1815  00011A                     	ds	2
  1816  00011C                     _test:
  1817                           	opt stack 0
  1818  00011C                     	ds	2
  1819  00011E                     _timercount:
  1820                           	opt stack 0
  1821  00011E                     	ds	2
  1822  000120                     _Sensor_Observe_Fin:
  1823                           	opt stack 0
  1824  000120                     	ds	2
  1825  000122                     _CW_Count:
  1826                           	opt stack 0
  1827  000122                     	ds	2
  1828  000124                     _CCW_Count:
  1829                           	opt stack 0
  1830  000124                     	ds	2
  1831  000126                     _count:
  1832                           	opt stack 0
  1833  000126                     	ds	2
  1834  000128                     _Close_Pos:
  1835                           	opt stack 0
  1836  000128                     	ds	2
  1837  00012A                     _ADC_Reading:
  1838                           	opt stack 0
  1839  00012A                     	ds	2
  1840  00012C                     _BumpState:
  1841                           	opt stack 0
  1842  00012C                     	ds	2
  1843  00012E                     _mod:
  1844                           	opt stack 0
  1845  00012E                     	ds	2
  1846  000130                     _Square_Dist:
  1847                           	opt stack 0
  1848  000130                     	ds	2
  1849  000132                     _T_VAR:
  1850                           	opt stack 0
  1851  000132                     	ds	2
  1852  000134                     _VictimCount:
  1853                           	opt stack 0
  1854  000134                     	ds	2
  1855  000136                     _flag:
  1856                           	opt stack 0
  1857  000136                     	ds	2
  1858  000138                     _Previous_Angle:
  1859                           	opt stack 0
  1860  000138                     	ds	2
  1861  00013A                     _k:
  1862                           	opt stack 0
  1863  00013A                     	ds	2
  1864  00013C                     _x:
  1865                           	opt stack 0
  1866  00013C                     	ds	2
  1867  00013E                     _average:
  1868                           	opt stack 0
  1869  00013E                     	ds	2
  1870  000140                     _total:
  1871                           	opt stack 0
  1872  000140                     	ds	2
  1873  000142                     _thisReading:
  1874                           	opt stack 0
  1875  000142                     	ds	2
  1876  000144                     _Steps:
  1877                           	opt stack 0
  1878  000144                     	ds	2
  1879  000146                     _Motor_Count:
  1880                           	opt stack 0
  1881  000146                     	ds	2
  1882  000148                     _mode:
  1883                           	opt stack 0
  1884  000148                     	ds	2
  1885  00014A                     _Current_Dist2:
  1886                           	opt stack 0
  1887  00014A                     	ds	2
  1888  00014C                     _Current_Dist1:
  1889                           	opt stack 0
  1890  00014C                     	ds	2
  1891  00014E                     _Current_Dist:
  1892                           	opt stack 0
  1893  00014E                     	ds	2
  1894  000150                     _val:
  1895                           	opt stack 0
  1896  000150                     	ds	2
  1897  000152                     HMI_GRender@a:
  1898                           	opt stack 0
  1899  000152                     	ds	2
  1900  000154                     _gBackcolour:
  1901                           	opt stack 0
  1902  000154                     	ds	2
  1903  000156                     SPI_Send9@dat:
  1904                           	opt stack 0
  1905  000156                     	ds	2
  1906  000158                     _Cliff_Left:
  1907                           	opt stack 0
  1908  000158                     	ds	1
  1909  000159                     _Cliff_Right:
  1910                           	opt stack 0
  1911  000159                     	ds	1
  1912  00015A                     _Cliff_FLeft:
  1913                           	opt stack 0
  1914  00015A                     	ds	1
  1915  00015B                     _Cliff_FRight:
  1916                           	opt stack 0
  1917  00015B                     	ds	1
  1918  00015C                     _BumpSensor:
  1919                           	opt stack 0
  1920  00015C                     	ds	1
  1921  00015D                     _u:
  1922                           	opt stack 0
  1923  00015D                     	ds	1
  1924  00015E                     _j:
  1925                           	opt stack 0
  1926  00015E                     	ds	1
  1927  00015F                     _i:
  1928                           	opt stack 0
  1929  00015F                     	ds	1
  1930  000160                     _ADC_Initialised:
  1931                           	opt stack 0
  1932  000160                     	ds	1
  1933  000161                     _SPI1:
  1934                           	opt stack 0
  1935  000161                     	ds	11
  1936  00016C                     _SPI2:
  1937                           	opt stack 0
  1938  00016C                     	ds	11
  1939  000177                     _PortG:
  1940                           	opt stack 0
  1941  000177                     	ds	10
  1942  000181                     _PortE:
  1943                           	opt stack 0
  1944  000181                     	ds	10
  1945  00018B                     _PortD:
  1946                           	opt stack 0
  1947  00018B                     	ds	10
  1948  000195                     _PortB:
  1949                           	opt stack 0
  1950  000195                     	ds	10
  1951  00019F                     _PortC:
  1952                           	opt stack 0
  1953  00019F                     	ds	10
  1954  0001A9                     _PortF:
  1955                           	opt stack 0
  1956  0001A9                     	ds	10
  1957  0001B3                     _I2C2T:
  1958                           	opt stack 0
  1959  0001B3                     	ds	7
  1960  0001BA                     _I2C1T:
  1961                           	opt stack 0
  1962  0001BA                     	ds	7
  1963  0001C1                     _ADC_AN3:
  1964                           	opt stack 0
  1965  0001C1                     	ds	5
  1966  0001C6                     _ADC_AN2:
  1967                           	opt stack 0
  1968  0001C6                     	ds	5
  1969  0001CB                     _ADC_AN1:
  1970                           	opt stack 0
  1971  0001CB                     	ds	5
  1972  0001D0                     _ADC_AN0:
  1973                           	opt stack 0
  1974  0001D0                     	ds	5
  1975  0001D5                     LCD_DrawRectangle@p4:
  1976                           	opt stack 0
  1977  0001D5                     	ds	4
  1978  0001D9                     LCD_DrawRectangle@p2:
  1979                           	opt stack 0
  1980  0001D9                     	ds	4
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           postdec1	equ	0xFE5
  1988                           fsr1h	equ	0xFE2
  1989                           fsr1l	equ	0xFE1
  1990                           
  1991                           	psect	dataBANK1
  1992  0001DD                     __pdataBANK1:
  1993                           	opt stack 0
  1994  0001DD                     Console_Render@F6956:
  1995                           	opt stack 0
  1996  0001DD                     	ds	4
  1997  0001E1                     _gLineSize:
  1998                           	opt stack 0
  1999  0001E1                     	ds	4
  2000  0001E5                     _gCharSize:
  2001                           	opt stack 0
  2002  0001E5                     	ds	4
  2003  0001E9                     _countOff:
  2004                           	opt stack 0
  2005  0001E9                     	ds	2
  2006  0001EB                     _countOn:
  2007                           	opt stack 0
  2008  0001EB                     	ds	2
  2009  0001ED                     _Low_Sensor:
  2010                           	opt stack 0
  2011  0001ED                     	ds	2
  2012  0001EF                     _Spd:
  2013                           	opt stack 0
  2014  0001EF                     	ds	2
  2015  0001F1                     _numReadings:
  2016                           	opt stack 0
  2017  0001F1                     	ds	2
  2018  0001F3                     _Current_Direction:
  2019                           	opt stack 0
  2020  0001F3                     	ds	2
  2021  0001F5                     _gForecolour:
  2022                           	opt stack 0
  2023  0001F5                     	ds	2
  2024  0001F7                     	ds	1
  2025  0001F8                     	ds	1
  2026  0001F9                     	ds	1
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           postinc0	equ	0xFEE
  2032                           wreg	equ	0xFE8
  2033                           postdec1	equ	0xFE5
  2034                           fsr1h	equ	0xFE2
  2035                           fsr1l	equ	0xFE1
  2036                           
  2037                           	psect	bssBANK2
  2038  000200                     __pbssBANK2:
  2039                           	opt stack 0
  2040  000200                     _stack:
  2041                           	opt stack 0
  2042  000200                     	ds	40
  2043  000228                     _lCBuffer:
  2044                           	opt stack 0
  2045  000228                     	ds	30
  2046  000246                     _readings:
  2047                           	opt stack 0
  2048  000246                     	ds	20
  2049  00025A                     Console_MakeField@Fill:
  2050                           	opt stack 0
  2051  00025A                     	ds	70
  2052  0002A0                     _HMIBoard:
  2053                           	opt stack 0
  2054  0002A0                     	ds	58
  2055  0002DA                     _DIPSwitch:
  2056                           	opt stack 0
  2057  0002DA                     	ds	10
  2058  0002E4                     _TestButton:
  2059                           	opt stack 0
  2060  0002E4                     	ds	10
  2061  0002EE                     _PortA:
  2062                           	opt stack 0
  2063  0002EE                     	ds	10
  2064                           tblptru	equ	0xFF8
  2065                           tblptrh	equ	0xFF7
  2066                           tblptrl	equ	0xFF6
  2067                           tablat	equ	0xFF5
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           postdec1	equ	0xFE5
  2071                           fsr1h	equ	0xFE2
  2072                           fsr1l	equ	0xFE1
  2073                           
  2074                           	psect	bssBANK3
  2075  000300                     __pbssBANK3:
  2076                           	opt stack 0
  2077  000300                     _Pos_Stack:
  2078                           	opt stack 0
  2079  000300                     	ds	40
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           postinc0	equ	0xFEE
  2085                           wreg	equ	0xFE8
  2086                           postdec1	equ	0xFE5
  2087                           fsr1h	equ	0xFE2
  2088                           fsr1l	equ	0xFE1
  2089                           
  2090                           	psect	bssBIGRAM
  2091  000336                     __pbssBIGRAM:
  2092                           	opt stack 0
  2093  000336                     _lBuffer:
  2094                           	opt stack 0
  2095  000336                     	ds	300
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           postinc0	equ	0xFEE
  2101                           wreg	equ	0xFE8
  2102                           postdec1	equ	0xFE5
  2103                           fsr1h	equ	0xFE2
  2104                           fsr1l	equ	0xFE1
  2105                           
  2106                           	psect	cstackBANK3
  2107  000328                     __pcstackBANK3:
  2108                           	opt stack 0
  2109  000328                     Travel@Dir:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x0
  2113  000328                     	ds	2
  2114  00032A                     Travel@spd1:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x2
  2118  00032A                     	ds	2
  2119  00032C                     Travel@spd2:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x4
  2123  00032C                     	ds	2
  2124  00032E                     Travel@rev_Dist:
  2125                           	opt stack 0
  2126                           
  2127                           ; 2 bytes @ 0x6
  2128  00032E                     	ds	2
  2129  000330                     Travel@Dist_Travelled:
  2130                           	opt stack 0
  2131                           
  2132                           ; 2 bytes @ 0x8
  2133  000330                     	ds	2
  2134  000332                     Travel@Req_Dir:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0xA
  2138  000332                     	ds	2
  2139  000334                     Travel@error:
  2140                           	opt stack 0
  2141                           
  2142                           ; 2 bytes @ 0xC
  2143  000334                     	ds	2
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postdec1	equ	0xFE5
  2151                           fsr1h	equ	0xFE2
  2152                           fsr1l	equ	0xFE1
  2153                           
  2154                           	psect	cstackBANK1
  2155  0001FA                     __pcstackBANK1:
  2156                           	opt stack 0
  2157  0001FA                     main@down:
  2158                           	opt stack 0
  2159                           
  2160                           ; 1 bytes @ 0x0
  2161  0001FA                     	ds	1
  2162  0001FB                     main@right:
  2163                           	opt stack 0
  2164                           
  2165                           ; 1 bytes @ 0x1
  2166  0001FB                     	ds	1
  2167  0001FC                     main@up:
  2168                           	opt stack 0
  2169                           
  2170                           ; 1 bytes @ 0x2
  2171  0001FC                     	ds	1
  2172  0001FD                     main@left:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0x3
  2176  0001FD                     	ds	1
  2177  0001FE                     main@r:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x4
  2181  0001FE                     	ds	2
  2182                           tblptru	equ	0xFF8
  2183                           tblptrh	equ	0xFF7
  2184                           tblptrl	equ	0xFF6
  2185                           tablat	equ	0xFF5
  2186                           postinc0	equ	0xFEE
  2187                           wreg	equ	0xFE8
  2188                           postdec1	equ	0xFE5
  2189                           fsr1h	equ	0xFE2
  2190                           fsr1l	equ	0xFE1
  2191                           
  2192                           	psect	cstackBANK0
  2193  000060                     __pcstackBANK0:
  2194                           	opt stack 0
  2195  000060                     ??_Console_ClearCursor:
  2196  000060                     ??_InitADC:
  2197  000060                     ??_Console_Init:
  2198  000060                     ??_Console_NewLine:
  2199  000060                     ??_Console_FormFeed:
  2200  000060                     ??_HMI_SetButton:
  2201  000060                     ?_GetPortProperties:
  2202                           	opt stack 0
  2203  000060                     ?_GetPortPORT:
  2204                           	opt stack 0
  2205  000060                     ?_GetPortTRIS:
  2206                           	opt stack 0
  2207  000060                     ?_FunctReadADC:
  2208                           	opt stack 0
  2209  000060                     ?___wmul:
  2210                           	opt stack 0
  2211  000060                     ?___awdiv:
  2212                           	opt stack 0
  2213  000060                     ?___lwdiv:
  2214                           	opt stack 0
  2215  000060                     ?___fldiv:
  2216                           	opt stack 0
  2217  000060                     ?_frexp:
  2218                           	opt stack 0
  2219  000060                     ?___lldiv:
  2220                           	opt stack 0
  2221  000060                     ?___xxtofl:
  2222                           	opt stack 0
  2223  000060                     Mode_Set@pMode:
  2224                           	opt stack 0
  2225  000060                     ToSegment@pCHR:
  2226                           	opt stack 0
  2227  000060                     HMI_SetBar@pValue:
  2228                           	opt stack 0
  2229  000060                     eusartSend@sendChar:
  2230                           	opt stack 0
  2231  000060                     Port_GetPin@pInput:
  2232                           	opt stack 0
  2233  000060                     Port_GetQuad@pInput:
  2234                           	opt stack 0
  2235  000060                     SPI_DisableISR@pInput:
  2236                           	opt stack 0
  2237  000060                     SPI_DCS@pInput:
  2238                           	opt stack 0
  2239  000060                     SPI_Send@pInput:
  2240                           	opt stack 0
  2241  000060                     Byte_SetBit@pInput:
  2242                           	opt stack 0
  2243  000060                     Byte_GetBit@pInput:
  2244                           	opt stack 0
  2245  000060                     Byte_SetZone@pInput:
  2246                           	opt stack 0
  2247  000060                     Byte_GetZone@pInput:
  2248                           	opt stack 0
  2249  000060                     Byte_SetByte@pInput:
  2250                           	opt stack 0
  2251  000060                     delay_ms@ms:
  2252                           	opt stack 0
  2253  000060                     delay_us@us:
  2254                           	opt stack 0
  2255  000060                     reverse@input:
  2256                           	opt stack 0
  2257  000060                     FunctReadADC@channel:
  2258                           	opt stack 0
  2259  000060                     ___wmul@multiplier:
  2260                           	opt stack 0
  2261  000060                     ___awdiv@dividend:
  2262                           	opt stack 0
  2263  000060                     ___lwdiv@dividend:
  2264                           	opt stack 0
  2265  000060                     MXK_Queue@pCallback:
  2266                           	opt stack 0
  2267  000060                     ___flge@ff1:
  2268                           	opt stack 0
  2269  000060                     ___lldiv@dividend:
  2270                           	opt stack 0
  2271  000060                     ___fldiv@b:
  2272                           	opt stack 0
  2273  000060                     ___xxtofl@val:
  2274                           	opt stack 0
  2275  000060                     frexp@value:
  2276                           	opt stack 0
  2277                           
  2278                           ; 4 bytes @ 0x0
  2279  000060                     	ds	1
  2280  000061                     ?_UpdateDistance:
  2281                           	opt stack 0
  2282  000061                     ?_Get_VirtualWall_State:
  2283                           	opt stack 0
  2284  000061                     HMI_SetSegments@pString:
  2285                           	opt stack 0
  2286  000061                     Drive@SpeedL:
  2287                           	opt stack 0
  2288  000061                     Turn@Angle:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x1
  2292  000061                     	ds	1
  2293  000062                     GetPortProperties@pInput:
  2294                           	opt stack 0
  2295  000062                     GetPortPORT@pInput:
  2296                           	opt stack 0
  2297  000062                     GetPortTRIS@pInput:
  2298                           	opt stack 0
  2299  000062                     Port_GetPin@pPin:
  2300                           	opt stack 0
  2301  000062                     Port_GetQuad@pQuad:
  2302                           	opt stack 0
  2303  000062                     SPI_Send@pData:
  2304                           	opt stack 0
  2305  000062                     Byte_SetBit@pBit:
  2306                           	opt stack 0
  2307  000062                     Byte_GetBit@pBit:
  2308                           	opt stack 0
  2309  000062                     Byte_SetZone@pMax:
  2310                           	opt stack 0
  2311  000062                     Byte_GetZone@pMax:
  2312                           	opt stack 0
  2313  000062                     Byte_SetByte@pValue:
  2314                           	opt stack 0
  2315  000062                     Console_Init@x:
  2316                           	opt stack 0
  2317  000062                     Console_FormFeed@x:
  2318                           	opt stack 0
  2319  000062                     reverse@length:
  2320                           	opt stack 0
  2321  000062                     ___wmul@multiplicand:
  2322                           	opt stack 0
  2323  000062                     ___awdiv@divisor:
  2324                           	opt stack 0
  2325  000062                     ___lwdiv@divisor:
  2326                           	opt stack 0
  2327  000062                     delay_ms@u:
  2328                           	opt stack 0
  2329  000062                     delay_us@u:
  2330                           	opt stack 0
  2331  000062                     HMI_SetButton@reindex:
  2332                           	opt stack 0
  2333                           
  2334                           ; 4 bytes @ 0x2
  2335  000062                     	ds	1
  2336  000063                     ??_UpdateDistance:
  2337  000063                     ??_Port_GetPin:
  2338  000063                     ??_Port_GetQuad:
  2339  000063                     ??_Byte_GetBit:
  2340  000063                     ??_Get_VirtualWall_State:
  2341  000063                     LCD_Write@mode:
  2342                           	opt stack 0
  2343  000063                     Byte_SetBit@pValue:
  2344                           	opt stack 0
  2345  000063                     Byte_SetZone@pChunk:
  2346                           	opt stack 0
  2347  000063                     Byte_GetZone@pChunk:
  2348                           	opt stack 0
  2349  000063                     Console_Init@y:
  2350                           	opt stack 0
  2351  000063                     Console_FormFeed@y:
  2352                           	opt stack 0
  2353  000063                     OutSeg@pSegment:
  2354                           	opt stack 0
  2355  000063                     Drive@SpeedR:
  2356                           	opt stack 0
  2357  000063                     Turn@Speed:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x3
  2361  000063                     	ds	1
  2362  000064                     ??_Byte_SetBit:
  2363  000064                     ??_Console_IncrementCursor:
  2364  000064                     ??_OutSeg:
  2365  000064                     ??___xxtofl:
  2366  000064                     LCD_Write@value:
  2367                           	opt stack 0
  2368  000064                     Byte_GetBit@Output:
  2369                           	opt stack 0
  2370  000064                     Byte_SetZone@pChunkSize:
  2371                           	opt stack 0
  2372  000064                     Byte_GetZone@pChunkSize:
  2373                           	opt stack 0
  2374  000064                     reverse@tempVar:
  2375                           	opt stack 0
  2376  000064                     ___awdiv@counter:
  2377                           	opt stack 0
  2378  000064                     ___lwdiv@counter:
  2379                           	opt stack 0
  2380  000064                     HMI_SetSegments@in:
  2381                           	opt stack 0
  2382  000064                     Get_VirtualWall_State@Vitual_Wall_Sensor:
  2383                           	opt stack 0
  2384  000064                     ___wmul@product:
  2385                           	opt stack 0
  2386  000064                     frexp@eptr:
  2387                           	opt stack 0
  2388  000064                     ___flge@ff2:
  2389                           	opt stack 0
  2390  000064                     ___lldiv@divisor:
  2391                           	opt stack 0
  2392  000064                     ___fldiv@a:
  2393                           	opt stack 0
  2394                           
  2395                           ; 4 bytes @ 0x4
  2396  000064                     	ds	1
  2397  000065                     ??_Byte_GetZone:
  2398  000065                     ?_Console_MakeField:
  2399                           	opt stack 0
  2400  000065                     Set_Addr_Window@ys:
  2401                           	opt stack 0
  2402  000065                     Set_Rotation@m:
  2403                           	opt stack 0
  2404  000065                     Port_GetPin@Output:
  2405                           	opt stack 0
  2406  000065                     Port_GetQuad@Output:
  2407                           	opt stack 0
  2408  000065                     Byte_SetZone@pValue:
  2409                           	opt stack 0
  2410  000065                     ___awdiv@sign:
  2411                           	opt stack 0
  2412  000065                     LCD_Word_Write@value:
  2413                           	opt stack 0
  2414  000065                     reverse@iterator:
  2415                           	opt stack 0
  2416  000065                     Turn@Dir:
  2417                           	opt stack 0
  2418  000065                     ___lwdiv@quotient:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x5
  2422  000065                     	ds	1
  2423  000066                     ??_frexp:
  2424  000066                     ??_Byte_SetZone:
  2425  000066                     Set_Addr_Window@xe:
  2426                           	opt stack 0
  2427  000066                     Set_Rotation@rotation:
  2428                           	opt stack 0
  2429  000066                     Byte_GetZone@MASK:
  2430                           	opt stack 0
  2431  000066                     OutSeg@pInput:
  2432                           	opt stack 0
  2433  000066                     HMI_SetButton@pValue:
  2434                           	opt stack 0
  2435  000066                     MXK_BlockSwitchTo@CUR:
  2436                           	opt stack 0
  2437  000066                     MXK_SwitchTo@CUR:
  2438                           	opt stack 0
  2439  000066                     ___awdiv@quotient:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x6
  2443  000066                     	ds	1
  2444  000067                     ??_Console_MakeField:
  2445  000067                     ?___lwmod:
  2446                           	opt stack 0
  2447  000067                     Set_Addr_Window@ye:
  2448                           	opt stack 0
  2449  000067                     Byte_GetZone@Offset:
  2450                           	opt stack 0
  2451  000067                     OutSeg@out:
  2452                           	opt stack 0
  2453  000067                     HMI_SetButton@v:
  2454                           	opt stack 0
  2455  000067                     MXK_BlockSwitchTo@pModule:
  2456                           	opt stack 0
  2457  000067                     MXK_SwitchTo@pModule:
  2458                           	opt stack 0
  2459  000067                     Turn@C_Angle:
  2460                           	opt stack 0
  2461  000067                     ___lwmod@dividend:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x7
  2465  000067                     	ds	1
  2466  000068                     ??___fldiv:
  2467  000068                     ??_Console_Tab:
  2468  000068                     ??___flge:
  2469  000068                     Set_Addr_Window@xs:
  2470                           	opt stack 0
  2471  000068                     Byte_GetZone@Output:
  2472                           	opt stack 0
  2473  000068                     ___xxtofl@sign:
  2474                           	opt stack 0
  2475  000068                     HMI_Render@a:
  2476                           	opt stack 0
  2477  000068                     ___lldiv@quotient:
  2478                           	opt stack 0
  2479                           
  2480                           ; 4 bytes @ 0x8
  2481  000068                     	ds	1
  2482  000069                     Byte_SetZone@Offset:
  2483                           	opt stack 0
  2484  000069                     ___xxtofl@exp:
  2485                           	opt stack 0
  2486  000069                     LCD_Fill@pColour:
  2487                           	opt stack 0
  2488  000069                     LCD_FillRectangle@pColour:
  2489                           	opt stack 0
  2490  000069                     Byte_GetPair@pInput:
  2491                           	opt stack 0
  2492  000069                     Console_MakeField@Index:
  2493                           	opt stack 0
  2494  000069                     Turn@Rad:
  2495                           	opt stack 0
  2496  000069                     ___lwmod@divisor:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x9
  2500  000069                     	ds	1
  2501  00006A                     Byte_SetZone@MASK:
  2502                           	opt stack 0
  2503  00006A                     ___xxtofl@arg:
  2504                           	opt stack 0
  2505                           
  2506                           ; 4 bytes @ 0xA
  2507  00006A                     	ds	1
  2508  00006B                     LCD_Fill@i:
  2509                           	opt stack 0
  2510  00006B                     Byte_GetPair@pPair:
  2511                           	opt stack 0
  2512  00006B                     Console_MakeField@pInput:
  2513                           	opt stack 0
  2514  00006B                     ___lwmod@counter:
  2515                           	opt stack 0
  2516  00006B                     Byte_SetPair@pInput:
  2517                           	opt stack 0
  2518  00006B                     Byte_SetQuad@pInput:
  2519                           	opt stack 0
  2520  00006B                     LCD_FillRectangle@pPoint:
  2521                           	opt stack 0
  2522                           
  2523                           ; 4 bytes @ 0xB
  2524  00006B                     	ds	1
  2525  00006C                     LCD_Fill@j:
  2526                           	opt stack 0
  2527  00006C                     ___lldiv@counter:
  2528                           	opt stack 0
  2529  00006C                     ___fldiv@sign:
  2530                           	opt stack 0
  2531  00006C                     Word_GetPair@pInput:
  2532                           	opt stack 0
  2533  00006C                     itos@input:
  2534                           	opt stack 0
  2535  00006C                     Console_MakeField@Column:
  2536                           	opt stack 0
  2537                           
  2538                           ; 2 bytes @ 0xC
  2539  00006C                     	ds	1
  2540  00006D                     Byte_SetPair@pPair:
  2541                           	opt stack 0
  2542  00006D                     Byte_SetQuad@pQuad:
  2543                           	opt stack 0
  2544  00006D                     Console_Tab@t:
  2545                           	opt stack 0
  2546  00006D                     Timer2_Init@pFrequency:
  2547                           	opt stack 0
  2548  00006D                     ___fldiv@rem:
  2549                           	opt stack 0
  2550                           
  2551                           ; 4 bytes @ 0xD
  2552  00006D                     	ds	1
  2553  00006E                     ?___flmul:
  2554                           	opt stack 0
  2555  00006E                     Byte_SetPair@pValue:
  2556                           	opt stack 0
  2557  00006E                     Byte_SetQuad@pValue:
  2558                           	opt stack 0
  2559  00006E                     Word_GetPair@pPair:
  2560                           	opt stack 0
  2561  00006E                     Console_Tab@i:
  2562                           	opt stack 0
  2563  00006E                     itos@destination:
  2564                           	opt stack 0
  2565  00006E                     _Console_MakeField$10974:
  2566                           	opt stack 0
  2567  00006E                     ___flmul@b:
  2568                           	opt stack 0
  2569                           
  2570                           ; 4 bytes @ 0xE
  2571  00006E                     	ds	1
  2572  00006F                     Console_Tab@c:
  2573                           	opt stack 0
  2574  00006F                     Port_SetPin@pInput:
  2575                           	opt stack 0
  2576  00006F                     Port_Set@pInput:
  2577                           	opt stack 0
  2578  00006F                     SPI_MinSpeed@pInput:
  2579                           	opt stack 0
  2580  00006F                     SPI_MaxSpeed@pInput:
  2581                           	opt stack 0
  2582  00006F                     Word_SetPair@pInput:
  2583                           	opt stack 0
  2584  00006F                     PortProperty_Valid@pInput:
  2585                           	opt stack 0
  2586  00006F                     LCD_FillRectangle@pSize:
  2587                           	opt stack 0
  2588                           
  2589                           ; 4 bytes @ 0xF
  2590  00006F                     	ds	1
  2591  000070                     ??_Console_PrintChar:
  2592  000070                     Console_MakeField@x:
  2593                           	opt stack 0
  2594  000070                     itos@Data:
  2595                           	opt stack 0
  2596                           
  2597                           ; 2 bytes @ 0x10
  2598  000070                     	ds	1
  2599  000071                     ??_Timer2_Init:
  2600  000071                     Port_SetPin@pPin:
  2601                           	opt stack 0
  2602  000071                     Port_Set@pValue:
  2603                           	opt stack 0
  2604  000071                     Word_SetPair@pPair:
  2605                           	opt stack 0
  2606  000071                     PortProperty_Valid@pPinDrive:
  2607                           	opt stack 0
  2608  000071                     Console_MakeField@y:
  2609                           	opt stack 0
  2610  000071                     ___fldiv@new_exp:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x11
  2614  000071                     	ds	1
  2615  000072                     ??_Port_Set:
  2616  000072                     Port_SetPin@pValue:
  2617                           	opt stack 0
  2618  000072                     Word_SetPair@pValue:
  2619                           	opt stack 0
  2620  000072                     PortProperty_Valid@pPin:
  2621                           	opt stack 0
  2622  000072                     LCD_DrawField@pField:
  2623                           	opt stack 0
  2624  000072                     itos@Length:
  2625                           	opt stack 0
  2626  000072                     Timer2_Init@RDIV:
  2627                           	opt stack 0
  2628  000072                     ___flmul@a:
  2629                           	opt stack 0
  2630                           
  2631                           ; 4 bytes @ 0x12
  2632  000072                     	ds	1
  2633  000073                     ??_PortProperty_Valid:
  2634  000073                     ??_LCD_FillRectangle:
  2635  000073                     Port_SetPin@Type:
  2636                           	opt stack 0
  2637  000073                     Console_PrintChar@pInput:
  2638                           	opt stack 0
  2639  000073                     ___fldiv@grs:
  2640                           	opt stack 0
  2641                           
  2642                           ; 4 bytes @ 0x13
  2643  000073                     	ds	1
  2644  000074                     LED_Set@pValue:
  2645                           	opt stack 0
  2646  000074                     putch@c:
  2647                           	opt stack 0
  2648  000074                     Port_TogglePin@pInput:
  2649                           	opt stack 0
  2650  000074                     itos@Out:
  2651                           	opt stack 0
  2652  000074                     LCD_DrawField@pPoint:
  2653                           	opt stack 0
  2654                           
  2655                           ; 4 bytes @ 0x14
  2656  000074                     	ds	1
  2657  000075                     ?_printf:
  2658                           	opt stack 0
  2659  000075                     LCD_FillRectangle@i:
  2660                           	opt stack 0
  2661  000075                     LED_Set@pLED:
  2662                           	opt stack 0
  2663  000075                     printf@f:
  2664                           	opt stack 0
  2665  000075                     PortProperty_Valid@Errors:
  2666                           	opt stack 0
  2667                           
  2668                           ; 16 bytes @ 0x15
  2669  000075                     	ds	1
  2670  000076                     ??___flmul:
  2671  000076                     LCD_FillRectangle@j:
  2672                           	opt stack 0
  2673  000076                     Port_TogglePin@pPin:
  2674                           	opt stack 0
  2675  000076                     HMI_SetNumber@pInput:
  2676                           	opt stack 0
  2677  000076                     Timer2_Init@pCPUClock:
  2678                           	opt stack 0
  2679                           
  2680                           ; 4 bytes @ 0x16
  2681  000076                     	ds	1
  2682  000077                     Port_TogglePin@Value:
  2683                           	opt stack 0
  2684  000077                     ___fldiv@bexp:
  2685                           	opt stack 0
  2686                           
  2687                           ; 1 bytes @ 0x17
  2688  000077                     	ds	1
  2689  000078                     LED_Toggle@pLED:
  2690                           	opt stack 0
  2691  000078                     ___fldiv@aexp:
  2692                           	opt stack 0
  2693  000078                     LCD_DrawField@pSize:
  2694                           	opt stack 0
  2695                           
  2696                           ; 4 bytes @ 0x18
  2697  000078                     	ds	1
  2698  000079                     Event_DIPSwitch@pState:
  2699                           	opt stack 0
  2700  000079                     Event_TestButton@pState:
  2701                           	opt stack 0
  2702                           
  2703                           ; 1 bytes @ 0x19
  2704  000079                     	ds	1
  2705  00007A                     Event_DIPSwitch@Bar:
  2706                           	opt stack 0
  2707  00007A                     ___flmul@sign:
  2708                           	opt stack 0
  2709  00007A                     Timer2_Init@DIVIDE:
  2710                           	opt stack 0
  2711                           
  2712                           ; 4 bytes @ 0x1A
  2713  00007A                     	ds	1
  2714  00007B                     ??_printf:
  2715  00007B                     ___flmul@aexp:
  2716                           	opt stack 0
  2717  00007B                     Button_Poll@pButton:
  2718                           	opt stack 0
  2719                           
  2720                           ; 2 bytes @ 0x1B
  2721  00007B                     	ds	1
  2722  00007C                     ??_LCD_DrawField:
  2723  00007C                     printf@flag:
  2724                           	opt stack 0
  2725  00007C                     ___flmul@grs:
  2726                           	opt stack 0
  2727                           
  2728                           ; 4 bytes @ 0x1C
  2729  00007C                     	ds	1
  2730  00007D                     Button_Poll@pIncrement:
  2731                           	opt stack 0
  2732  00007D                     printf@prec:
  2733                           	opt stack 0
  2734                           
  2735                           ; 1 bytes @ 0x1D
  2736  00007D                     	ds	1
  2737  00007E                     ??_Button_Poll:
  2738  00007E                     LCD_DrawField@count:
  2739                           	opt stack 0
  2740  00007E                     printf@ap:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0x1E
  2744  00007E                     	ds	2
  2745  000080                     LCD_DrawField@xmax:
  2746                           	opt stack 0
  2747  000080                     ___flmul@bexp:
  2748                           	opt stack 0
  2749  000080                     printf@val:
  2750                           	opt stack 0
  2751                           
  2752                           ; 2 bytes @ 0x20
  2753  000080                     	ds	1
  2754  000081                     LCD_DrawField@ymax:
  2755                           	opt stack 0
  2756  000081                     ___flmul@prod:
  2757                           	opt stack 0
  2758                           
  2759                           ; 4 bytes @ 0x21
  2760  000081                     	ds	1
  2761  000082                     LCD_DrawField@i:
  2762                           	opt stack 0
  2763  000082                     printf@c:
  2764                           	opt stack 0
  2765  000082                     Port_Set@TypeRequired:
  2766                           	opt stack 0
  2767                           
  2768                           ; 2 bytes @ 0x22
  2769  000082                     	ds	1
  2770  000083                     ??_Console_Render:
  2771  000083                     Button_Poll@Pin:
  2772                           	opt stack 0
  2773                           
  2774                           ; 1 bytes @ 0x23
  2775  000083                     	ds	1
  2776  000084                     Port_Set@TypeActual:
  2777                           	opt stack 0
  2778                           
  2779                           ; 2 bytes @ 0x24
  2780  000084                     	ds	1
  2781  000085                     PortProperty_Valid@Pair:
  2782                           	opt stack 0
  2783  000085                     Console_Render@temp:
  2784                           	opt stack 0
  2785  000085                     ___flmul@temp:
  2786                           	opt stack 0
  2787                           
  2788                           ; 2 bytes @ 0x25
  2789  000085                     	ds	1
  2790  000086                     Port_Set@Type:
  2791                           	opt stack 0
  2792  000086                     Port_CheckPairType@pInput:
  2793                           	opt stack 0
  2794  000086                     Port_SetPinType@pInput:
  2795                           	opt stack 0
  2796  000086                     Console_Render@lCursor:
  2797                           	opt stack 0
  2798                           
  2799                           ; 4 bytes @ 0x26
  2800  000086                     	ds	1
  2801  000087                     ?___flneg:
  2802                           	opt stack 0
  2803  000087                     ___flneg@f1:
  2804                           	opt stack 0
  2805                           
  2806                           ; 4 bytes @ 0x27
  2807  000087                     	ds	1
  2808  000088                     Port_CheckPairType@pPair:
  2809                           	opt stack 0
  2810  000088                     Port_SetPinType@pPin:
  2811                           	opt stack 0
  2812                           
  2813                           ; 1 bytes @ 0x28
  2814  000088                     	ds	1
  2815  000089                     Port_CheckPairType@pDrive:
  2816                           	opt stack 0
  2817  000089                     Port_SetPinType@pType:
  2818                           	opt stack 0
  2819                           
  2820                           ; 1 bytes @ 0x29
  2821  000089                     	ds	1
  2822  00008A                     Port_CheckPairType@Pin1:
  2823                           	opt stack 0
  2824  00008A                     Port_SetPinType@Output:
  2825                           	opt stack 0
  2826  00008A                     Console_Render@x:
  2827                           	opt stack 0
  2828                           
  2829                           ; 1 bytes @ 0x2A
  2830  00008A                     	ds	1
  2831  00008B                     ?___fladd:
  2832                           	opt stack 0
  2833  00008B                     Port_CheckPairType@Pin2:
  2834                           	opt stack 0
  2835  00008B                     Console_Render@y:
  2836                           	opt stack 0
  2837  00008B                     Port_SetPinType@Props:
  2838                           	opt stack 0
  2839  00008B                     ___fladd@b:
  2840                           	opt stack 0
  2841                           
  2842                           ; 4 bytes @ 0x2B
  2843  00008B                     	ds	1
  2844  00008C                     Port_CheckPairType@Output:
  2845                           	opt stack 0
  2846                           
  2847                           ; 1 bytes @ 0x2C
  2848  00008C                     	ds	1
  2849  00008D                     LED_Init@pLED:
  2850                           	opt stack 0
  2851  00008D                     Port_CheckPairType@Props:
  2852                           	opt stack 0
  2853  00008D                     SPI_Init@pClock:
  2854                           	opt stack 0
  2855                           
  2856                           ; 4 bytes @ 0x2D
  2857  00008D                     	ds	2
  2858  00008F                     Port_CheckQuadType@pInput:
  2859                           	opt stack 0
  2860  00008F                     ___fladd@a:
  2861                           	opt stack 0
  2862                           
  2863                           ; 4 bytes @ 0x2F
  2864  00008F                     	ds	2
  2865  000091                     Port_CheckQuadType@pQuad:
  2866                           	opt stack 0
  2867  000091                     SPI_Init@pChannel:
  2868                           	opt stack 0
  2869                           
  2870                           ; 1 bytes @ 0x31
  2871  000091                     	ds	1
  2872  000092                     Port_CheckQuadType@pDrive:
  2873                           	opt stack 0
  2874  000092                     SPI_Init@pMode:
  2875                           	opt stack 0
  2876                           
  2877                           ; 1 bytes @ 0x32
  2878  000092                     	ds	1
  2879  000093                     ??___fladd:
  2880  000093                     Port_CheckQuadType@Pair1:
  2881                           	opt stack 0
  2882  000093                     SPI_Init@pInput:
  2883                           	opt stack 0
  2884                           
  2885                           ; 2 bytes @ 0x33
  2886  000093                     	ds	1
  2887  000094                     Port_CheckQuadType@Pair2:
  2888                           	opt stack 0
  2889                           
  2890                           ; 1 bytes @ 0x34
  2891  000094                     	ds	1
  2892  000095                     ??_LCD_Init:
  2893  000095                     Port_CheckQuadType@Output:
  2894                           	opt stack 0
  2895                           
  2896                           ; 1 bytes @ 0x35
  2897  000095                     	ds	1
  2898  000096                     Port_CheckPortType@pInput:
  2899                           	opt stack 0
  2900  000096                     Port_SetQuadType@pInput:
  2901                           	opt stack 0
  2902                           
  2903                           ; 2 bytes @ 0x36
  2904  000096                     	ds	1
  2905  000097                     LCD_Init@i:
  2906                           	opt stack 0
  2907                           
  2908                           ; 2 bytes @ 0x37
  2909  000097                     	ds	1
  2910  000098                     Port_CheckPortType@pDrive:
  2911                           	opt stack 0
  2912  000098                     Port_SetQuadType@pQuad:
  2913                           	opt stack 0
  2914                           
  2915                           ; 1 bytes @ 0x38
  2916  000098                     	ds	1
  2917  000099                     Port_CheckPortType@Output:
  2918                           	opt stack 0
  2919  000099                     Port_SetQuadType@pType:
  2920                           	opt stack 0
  2921                           
  2922                           ; 1 bytes @ 0x39
  2923  000099                     	ds	1
  2924  00009A                     Port_SetQuadType@Output:
  2925                           	opt stack 0
  2926  00009A                     Port_SetType@pInput:
  2927                           	opt stack 0
  2928                           
  2929                           ; 2 bytes @ 0x3A
  2930  00009A                     	ds	1
  2931  00009B                     ___fladd@signs:
  2932                           	opt stack 0
  2933  00009B                     Button_Init@pInput:
  2934                           	opt stack 0
  2935                           
  2936                           ; 2 bytes @ 0x3B
  2937  00009B                     	ds	1
  2938  00009C                     Port_SetType@pType:
  2939                           	opt stack 0
  2940  00009C                     ___fladd@aexp:
  2941                           	opt stack 0
  2942                           
  2943                           ; 1 bytes @ 0x3C
  2944  00009C                     	ds	1
  2945  00009D                     ??_Port_SetType:
  2946  00009D                     ___fladd@bexp:
  2947                           	opt stack 0
  2948  00009D                     Button_Init@pThreshold:
  2949                           	opt stack 0
  2950                           
  2951                           ; 2 bytes @ 0x3D
  2952  00009D                     	ds	1
  2953  00009E                     ___fladd@grs:
  2954                           	opt stack 0
  2955                           
  2956                           ; 1 bytes @ 0x3E
  2957  00009E                     	ds	1
  2958  00009F                     ?___flsub:
  2959                           	opt stack 0
  2960  00009F                     ?_eval_poly:
  2961                           	opt stack 0
  2962  00009F                     ?___fltol:
  2963                           	opt stack 0
  2964  00009F                     Port_SetType@Output:
  2965                           	opt stack 0
  2966  00009F                     Button_Init@pInitIO:
  2967                           	opt stack 0
  2968  00009F                     ___fltol@f1:
  2969                           	opt stack 0
  2970  00009F                     ___flsub@b:
  2971                           	opt stack 0
  2972  00009F                     eval_poly@x:
  2973                           	opt stack 0
  2974                           
  2975                           ; 4 bytes @ 0x3F
  2976  00009F                     	ds	1
  2977  0000A0                     Port_Init@pInput:
  2978                           	opt stack 0
  2979                           
  2980                           ; 2 bytes @ 0x40
  2981  0000A0                     	ds	2
  2982  0000A2                     Port_Init@pPort:
  2983                           	opt stack 0
  2984  0000A2                     Button_Init@pGetState:
  2985                           	opt stack 0
  2986                           
  2987                           ; 3 bytes @ 0x42
  2988  0000A2                     	ds	1
  2989  0000A3                     ??_Port_Init:
  2990  0000A3                     ??___fltol:
  2991  0000A3                     eval_poly@d:
  2992                           	opt stack 0
  2993  0000A3                     ___flsub@a:
  2994                           	opt stack 0
  2995                           
  2996                           ; 4 bytes @ 0x43
  2997  0000A3                     	ds	2
  2998  0000A5                     Port_Init@i:
  2999                           	opt stack 0
  3000  0000A5                     eval_poly@n:
  3001                           	opt stack 0
  3002  0000A5                     Button_Init@pFunction:
  3003                           	opt stack 0
  3004                           
  3005                           ; 3 bytes @ 0x45
  3006  0000A5                     	ds	1
  3007  0000A6                     
  3008                           ; 1 bytes @ 0x46
  3009  0000A6                     	ds	1
  3010  0000A7                     ??_eval_poly:
  3011  0000A7                     ___fltol@sign1:
  3012                           	opt stack 0
  3013                           
  3014                           ; 1 bytes @ 0x47
  3015  0000A7                     	ds	1
  3016  0000A8                     ___fltol@exp1:
  3017                           	opt stack 0
  3018  0000A8                     HMI_Init@in:
  3019                           	opt stack 0
  3020                           
  3021                           ; 2 bytes @ 0x48
  3022  0000A8                     	ds	1
  3023  0000A9                     ?_floor:
  3024                           	opt stack 0
  3025  0000A9                     floor@x:
  3026                           	opt stack 0
  3027                           
  3028                           ; 4 bytes @ 0x49
  3029  0000A9                     	ds	2
  3030  0000AB                     eval_poly@res:
  3031                           	opt stack 0
  3032                           
  3033                           ; 4 bytes @ 0x4B
  3034  0000AB                     	ds	2
  3035  0000AD                     floor@i:
  3036                           	opt stack 0
  3037                           
  3038                           ; 4 bytes @ 0x4D
  3039  0000AD                     	ds	2
  3040  0000AF                     ?_log:
  3041                           	opt stack 0
  3042  0000AF                     ?_ldexp:
  3043                           	opt stack 0
  3044  0000AF                     ldexp@value:
  3045                           	opt stack 0
  3046  0000AF                     log@x:
  3047                           	opt stack 0
  3048                           
  3049                           ; 4 bytes @ 0x4F
  3050  0000AF                     	ds	2
  3051  0000B1                     floor@expon:
  3052                           	opt stack 0
  3053                           
  3054                           ; 2 bytes @ 0x51
  3055  0000B1                     	ds	2
  3056  0000B3                     ldexp@newexp:
  3057                           	opt stack 0
  3058  0000B3                     log@exponent:
  3059                           	opt stack 0
  3060                           
  3061                           ; 2 bytes @ 0x53
  3062  0000B3                     	ds	2
  3063  0000B5                     ??_ldexp:
  3064                           
  3065                           ; 1 bytes @ 0x55
  3066  0000B5                     	ds	2
  3067  0000B7                     ?_exp:
  3068                           	opt stack 0
  3069  0000B7                     exp@x:
  3070                           	opt stack 0
  3071                           
  3072                           ; 4 bytes @ 0x57
  3073  0000B7                     	ds	4
  3074  0000BB                     _exp$15826:
  3075                           	opt stack 0
  3076                           
  3077                           ; 4 bytes @ 0x5B
  3078  0000BB                     	ds	4
  3079  0000BF                     exp@exponent:
  3080                           	opt stack 0
  3081                           
  3082                           ; 2 bytes @ 0x5F
  3083  0000BF                     	ds	2
  3084  0000C1                     exp@sign:
  3085                           	opt stack 0
  3086                           
  3087                           ; 1 bytes @ 0x61
  3088  0000C1                     	ds	1
  3089  0000C2                     ?_pow:
  3090                           	opt stack 0
  3091  0000C2                     pow@x:
  3092                           	opt stack 0
  3093                           
  3094                           ; 4 bytes @ 0x62
  3095  0000C2                     	ds	4
  3096  0000C6                     pow@y:
  3097                           	opt stack 0
  3098                           
  3099                           ; 4 bytes @ 0x66
  3100  0000C6                     	ds	4
  3101  0000CA                     _pow$15824:
  3102                           	opt stack 0
  3103                           
  3104                           ; 4 bytes @ 0x6A
  3105  0000CA                     	ds	4
  3106  0000CE                     _pow$15825:
  3107                           	opt stack 0
  3108                           
  3109                           ; 4 bytes @ 0x6E
  3110  0000CE                     	ds	4
  3111  0000D2                     pow@sign:
  3112                           	opt stack 0
  3113                           
  3114                           ; 1 bytes @ 0x72
  3115  0000D2                     	ds	1
  3116  0000D3                     pow@yi:
  3117                           	opt stack 0
  3118                           
  3119                           ; 4 bytes @ 0x73
  3120  0000D3                     	ds	4
  3121  0000D7                     ??_ADCAverage:
  3122                           
  3123                           ; 1 bytes @ 0x77
  3124  0000D7                     	ds	2
  3125  0000D9                     _ADCAverage$15818:
  3126                           	opt stack 0
  3127                           
  3128                           ; 4 bytes @ 0x79
  3129  0000D9                     	ds	4
  3130  0000DD                     _ADCAverage$15819:
  3131                           	opt stack 0
  3132                           
  3133                           ; 4 bytes @ 0x7D
  3134  0000DD                     	ds	4
  3135  0000E1                     _ADCAverage$15820:
  3136                           	opt stack 0
  3137                           
  3138                           ; 4 bytes @ 0x81
  3139  0000E1                     	ds	4
  3140  0000E5                     _ADCAverage$15821:
  3141                           	opt stack 0
  3142                           
  3143                           ; 4 bytes @ 0x85
  3144  0000E5                     	ds	4
  3145  0000E9                     _ADCAverage$15822:
  3146                           	opt stack 0
  3147                           
  3148                           ; 4 bytes @ 0x89
  3149  0000E9                     	ds	4
  3150  0000ED                     _ADCAverage$15823:
  3151                           	opt stack 0
  3152                           
  3153                           ; 4 bytes @ 0x8D
  3154  0000ED                     	ds	4
  3155  0000F1                     Travel@direction:
  3156                           	opt stack 0
  3157                           
  3158                           ; 2 bytes @ 0x91
  3159  0000F1                     	ds	2
  3160  0000F3                     Travel@Dist:
  3161                           	opt stack 0
  3162                           
  3163                           ; 2 bytes @ 0x93
  3164  0000F3                     	ds	2
  3165  0000F5                     Travel@Test_ADC:
  3166                           	opt stack 0
  3167                           
  3168                           ; 2 bytes @ 0x95
  3169  0000F5                     	ds	2
  3170  0000F7                     Travel@Spd:
  3171                           	opt stack 0
  3172                           
  3173                           ; 2 bytes @ 0x97
  3174  0000F7                     	ds	2
  3175  0000F9                     ??_Travel:
  3176                           
  3177                           ; 1 bytes @ 0x99
  3178  0000F9                     	ds	4
  3179  0000FD                     tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           postinc0	equ	0xFEE
  3184                           wreg	equ	0xFE8
  3185                           postdec1	equ	0xFE5
  3186                           fsr1h	equ	0xFE2
  3187                           fsr1l	equ	0xFE1
  3188                           
  3189                           ; 1 bytes @ 0x9D
  3190                           
  3191                           	psect	cstackCOMRAM
  3192  000001                     __pcstackCOMRAM:
  3193                           	opt stack 0
  3194  000001                     i2Byte_SetBit@pInput:
  3195                           	opt stack 0
  3196  000001                     i2Byte_GetZone@pInput:
  3197                           	opt stack 0
  3198  000001                     i2delay_us@us:
  3199                           	opt stack 0
  3200  000001                     i2MXK_Queue@pCallback:
  3201                           	opt stack 0
  3202                           
  3203                           ; 3 bytes @ 0x0
  3204  000001                     	ds	2
  3205  000003                     i2Byte_SetBit@pBit:
  3206                           	opt stack 0
  3207  000003                     i2Byte_GetZone@pMax:
  3208                           	opt stack 0
  3209  000003                     i2delay_us@u:
  3210                           	opt stack 0
  3211                           
  3212                           ; 4 bytes @ 0x2
  3213  000003                     	ds	1
  3214  000004                     i2Byte_SetBit@pValue:
  3215                           	opt stack 0
  3216  000004                     i2Byte_GetZone@pChunk:
  3217                           	opt stack 0
  3218                           
  3219                           ; 1 bytes @ 0x3
  3220  000004                     	ds	1
  3221  000005                     ??i2_Byte_SetBit:
  3222  000005                     i2Byte_GetZone@pChunkSize:
  3223                           	opt stack 0
  3224                           
  3225                           ; 1 bytes @ 0x4
  3226  000005                     	ds	1
  3227  000006                     ??i2_Byte_GetZone:
  3228                           
  3229                           ; 1 bytes @ 0x5
  3230  000006                     	ds	1
  3231  000007                     i2Byte_GetZone@MASK:
  3232                           	opt stack 0
  3233  000007                     i2MXK_SwitchTo@CUR:
  3234                           	opt stack 0
  3235                           
  3236                           ; 1 bytes @ 0x6
  3237  000007                     	ds	1
  3238  000008                     i2Byte_GetZone@Offset:
  3239                           	opt stack 0
  3240  000008                     i2MXK_SwitchTo@pModule:
  3241                           	opt stack 0
  3242                           
  3243                           ; 1 bytes @ 0x7
  3244  000008                     	ds	1
  3245  000009                     i2Byte_GetZone@Output:
  3246                           	opt stack 0
  3247                           
  3248                           ; 1 bytes @ 0x8
  3249  000009                     	ds	1
  3250  00000A                     i2Byte_GetPair@pInput:
  3251                           	opt stack 0
  3252                           
  3253                           ; 2 bytes @ 0x9
  3254  00000A                     	ds	2
  3255  00000C                     i2Byte_GetPair@pPair:
  3256                           	opt stack 0
  3257                           
  3258                           ; 1 bytes @ 0xB
  3259  00000C                     	ds	1
  3260  00000D                     i2Word_GetPair@pInput:
  3261                           	opt stack 0
  3262                           
  3263                           ; 2 bytes @ 0xC
  3264  00000D                     	ds	2
  3265  00000F                     i2Word_GetPair@pPair:
  3266                           	opt stack 0
  3267                           
  3268                           ; 1 bytes @ 0xE
  3269  00000F                     	ds	1
  3270  000010                     i2Port_SetPin@pInput:
  3271                           	opt stack 0
  3272                           
  3273                           ; 2 bytes @ 0xF
  3274  000010                     	ds	2
  3275  000012                     i2Port_SetPin@pPin:
  3276                           	opt stack 0
  3277                           
  3278                           ; 1 bytes @ 0x11
  3279  000012                     	ds	1
  3280  000013                     i2Port_SetPin@pValue:
  3281                           	opt stack 0
  3282                           
  3283                           ; 1 bytes @ 0x12
  3284  000013                     	ds	1
  3285  000014                     i2Port_SetPin@Type:
  3286                           	opt stack 0
  3287                           
  3288                           ; 1 bytes @ 0x13
  3289  000014                     	ds	1
  3290  000015                     
  3291                           ; 1 bytes @ 0x14
  3292  000015                     	ds	2
  3293  000017                     ??_ISR_Function:
  3294                           
  3295                           ; 1 bytes @ 0x16
  3296  000017                     	ds	18
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           postinc0	equ	0xFEE
  3302                           wreg	equ	0xFE8
  3303                           postdec1	equ	0xFE5
  3304                           fsr1h	equ	0xFE2
  3305                           fsr1l	equ	0xFE1
  3306                           
  3307 ;;
  3308 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3309 ;;
  3310 ;; *************** function _main *****************
  3311 ;; Defined at:
  3312 ;;		line 328 in file "main.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  r               2    4[BANK1 ] int 
  3317 ;;  left            1    3[BANK1 ] unsigned char 
  3318 ;;  up              1    2[BANK1 ] unsigned char 
  3319 ;;  right           1    1[BANK1 ] unsigned char 
  3320 ;;  down            1    0[BANK1 ] unsigned char 
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  1    wreg      void 
  3323 ;; Registers used:
  3324 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;Total ram usage:        6 bytes
  3335 ;; Hardware stack levels required when called:   17
  3336 ;; This function calls:
  3337 ;;		_ADCAverage
  3338 ;;		_Console_Init
  3339 ;;		_Console_Render
  3340 ;;		_FunctInitButton
  3341 ;;		_HMI_DIPSwitch
  3342 ;;		_HMI_DownSwitch
  3343 ;;		_HMI_Init
  3344 ;;		_HMI_LeftSwitch
  3345 ;;		_HMI_Poll
  3346 ;;		_HMI_Render
  3347 ;;		_HMI_RightSwitch
  3348 ;;		_HMI_SetNumber
  3349 ;;		_HMI_UpSwitch
  3350 ;;		_ISR_Enable
  3351 ;;		_InitADC
  3352 ;;		_InitSerialCommunication
  3353 ;;		_Init_Timer0
  3354 ;;		_LCD_Init
  3355 ;;		_LED_Init
  3356 ;;		_MXK_BlockSwitchTo
  3357 ;;		_MXK_DIPSwitch
  3358 ;;		_MXK_Dequeue
  3359 ;;		_MXK_Init
  3360 ;;		_MXK_Release
  3361 ;;		_MXK_TestButton
  3362 ;;		_Robot_Init
  3363 ;;		_Travel
  3364 ;;		_printf
  3365 ;; This function is called by:
  3366 ;;		Startup code after reset
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text0
  3371  011EAC                     __ptext0:
  3372                           	opt stack 0
  3373  011EAC                     _main:
  3374                           	opt stack 14
  3375                           
  3376                           ;main.c: 333: MXK_Init();
  3377                           
  3378                           ;incstack = 0
  3379  011EAC  EC45  F099         	call	_MXK_Init	;wreg free
  3380                           
  3381                           ;main.c: 334: Init_Timer0();
  3382  011EB0  ECF6  F0AC         	call	_Init_Timer0	;wreg free
  3383                           
  3384                           ;main.c: 335: InitSerialCommunication();
  3385  011EB4  EC8A  F0AC         	call	_InitSerialCommunication	;wreg free
  3386                           
  3387                           ;main.c: 336: Robot_Init();
  3388  011EB8  EC1A  F0AD         	call	_Robot_Init	;wreg free
  3389                           
  3390                           ;main.c: 337: ISR_Enable();
  3391  011EBC  ECB3  F0AD         	call	_ISR_Enable	;wreg free
  3392                           
  3393                           ;main.c: 338: FunctInitButton();
  3394  011EC0  EC49  F0A4         	call	_FunctInitButton	;wreg free
  3395                           
  3396                           ;main.c: 339: InitADC();
  3397  011EC4  EC96  F0A8         	call	_InitADC	;wreg free
  3398                           
  3399                           ;main.c: 340: LED_Init(eLED2);
  3400  011EC8  0E01               	movlw	1
  3401  011ECA  EC77  F0A7         	call	_LED_Init
  3402                           
  3403                           ;main.c: 346: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3404  011ECE  0E01               	movlw	1
  3405  011ED0  ECAC  F0AA         	call	_MXK_BlockSwitchTo
  3406  011ED4  0900               	iorlw	0
  3407  011ED6  B4D8               	btfsc	status,2,c
  3408  011ED8  D00C               	goto	l2206
  3409                           
  3410                           ;main.c: 347: HMI_Init();
  3411  011EDA  ECC6  F093         	call	_HMI_Init	;wreg free
  3412                           
  3413                           ;main.c: 348: LCD_Init();
  3414  011EDE  ECFE  F097         	call	_LCD_Init	;wreg free
  3415                           
  3416                           ;main.c: 349: Console_Init();
  3417  011EE2  EC62  F0A5         	call	_Console_Init	;wreg free
  3418                           
  3419                           ;main.c: 350: if (MXK_Release())
  3420  011EE6  EC25  F0AD         	call	_MXK_Release	;wreg free
  3421  011EEA  0900               	iorlw	0
  3422  011EEC  A4D8               	btfss	status,2,c
  3423                           
  3424                           ;main.c: 351: MXK_Dequeue();
  3425  011EEE  EC61  F0AB         	call	_MXK_Dequeue	;wreg free
  3426  011EF2                     l2206:
  3427                           
  3428                           ;main.c: 357: ADCAverage();
  3429                           
  3430                           ;main.c: 352: }
  3431                           ;main.c: 355: for(;;){
  3432  011EF2  ECA9  F087         	call	_ADCAverage	;wreg free
  3433                           
  3434                           ;main.c: 359: HMI_SetNumber(average);
  3435  011EF6  C13E  F076         	movff	_average,HMI_SetNumber@pInput
  3436  011EFA  C13F  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3437  011EFE  EC25  F0AC         	call	_HMI_SetNumber	;wreg free
  3438                           
  3439                           ;main.c: 361: HMI_Render();
  3440  011F02  ECC8  F0AA         	call	_HMI_Render	;wreg free
  3441                           
  3442                           ;main.c: 363: HMI_Poll();
  3443  011F06  EC66  F0A6         	call	_HMI_Poll	;wreg free
  3444                           
  3445                           ;main.c: 367: bool down = HMIBoard.mDown.mGetState();
  3446  011F0A  EE22  F0CD         	lfsr	2,_HMIBoard+45
  3447  011F0E  D801               	call	u14668
  3448  011F10  D00A               	goto	u14669
  3449  011F12                     u14668:
  3450  011F12  0005               	push	
  3451  011F14  6EFA               	movwf	pclath,c
  3452  011F16  50DE               	movf	postinc2,w,c
  3453  011F18  6EFD               	movwf	tosl,c
  3454  011F1A  50DE               	movf	postinc2,w,c
  3455  011F1C  6EFE               	movwf	tosh,c
  3456  011F1E  50DE               	movf	postinc2,w,c
  3457  011F20  6EFF               	movwf	tosu,c
  3458  011F22  50FA               	movf	pclath,w,c
  3459  011F24  0012               	return		;indir
  3460  011F26                     u14669:
  3461  011F26  0101               	movlb	1	; () banked
  3462  011F28  6FFA               	movwf	main@down& (0+255),b
  3463                           
  3464                           ; BSR set to: 1
  3465                           ;main.c: 368: bool right = HMIBoard.mRight.mGetState();
  3466  011F2A  EE22  F0AF         	lfsr	2,_HMIBoard+15
  3467  011F2E  D801               	call	u14678
  3468  011F30  D00A               	goto	u14679
  3469  011F32                     u14678:
  3470  011F32  0005               	push	
  3471  011F34  6EFA               	movwf	pclath,c
  3472  011F36  50DE               	movf	postinc2,w,c
  3473  011F38  6EFD               	movwf	tosl,c
  3474  011F3A  50DE               	movf	postinc2,w,c
  3475  011F3C  6EFE               	movwf	tosh,c
  3476  011F3E  50DE               	movf	postinc2,w,c
  3477  011F40  6EFF               	movwf	tosu,c
  3478  011F42  50FA               	movf	pclath,w,c
  3479  011F44  0012               	return		;indir
  3480  011F46                     u14679:
  3481  011F46  0101               	movlb	1	; () banked
  3482  011F48  6FFB               	movwf	main@right& (0+255),b
  3483                           
  3484                           ; BSR set to: 1
  3485                           ;main.c: 369: bool up = HMIBoard.mUp.mGetState();
  3486  011F4A  EE22  F0C3         	lfsr	2,_HMIBoard+35
  3487  011F4E  D801               	call	u14688
  3488  011F50  D00A               	goto	u14689
  3489  011F52                     u14688:
  3490  011F52  0005               	push	
  3491  011F54  6EFA               	movwf	pclath,c
  3492  011F56  50DE               	movf	postinc2,w,c
  3493  011F58  6EFD               	movwf	tosl,c
  3494  011F5A  50DE               	movf	postinc2,w,c
  3495  011F5C  6EFE               	movwf	tosh,c
  3496  011F5E  50DE               	movf	postinc2,w,c
  3497  011F60  6EFF               	movwf	tosu,c
  3498  011F62  50FA               	movf	pclath,w,c
  3499  011F64  0012               	return		;indir
  3500  011F66                     u14689:
  3501  011F66  0101               	movlb	1	; () banked
  3502  011F68  6FFC               	movwf	main@up& (0+255),b
  3503                           
  3504                           ; BSR set to: 1
  3505                           ;main.c: 370: bool left = HMIBoard.mLeft.mGetState();
  3506  011F6A  EE22  F0B9         	lfsr	2,_HMIBoard+25
  3507  011F6E  D801               	call	u14698
  3508  011F70  D00A               	goto	u14699
  3509  011F72                     u14698:
  3510  011F72  0005               	push	
  3511  011F74  6EFA               	movwf	pclath,c
  3512  011F76  50DE               	movf	postinc2,w,c
  3513  011F78  6EFD               	movwf	tosl,c
  3514  011F7A  50DE               	movf	postinc2,w,c
  3515  011F7C  6EFE               	movwf	tosh,c
  3516  011F7E  50DE               	movf	postinc2,w,c
  3517  011F80  6EFF               	movwf	tosu,c
  3518  011F82  50FA               	movf	pclath,w,c
  3519  011F84  0012               	return		;indir
  3520  011F86                     u14699:
  3521  011F86  0101               	movlb	1	; () banked
  3522  011F88  6FFD               	movwf	main@left& (0+255),b
  3523                           
  3524                           ; BSR set to: 1
  3525                           ;main.c: 371: if (down) {mode=3;}
  3526  011F8A  51FA               	movf	main@down& (0+255),w,b
  3527  011F8C  B4D8               	btfsc	status,2,c
  3528  011F8E  D004               	goto	l2208
  3529                           
  3530                           ; BSR set to: 1
  3531  011F90  0E00               	movlw	0
  3532  011F92  6F49               	movwf	(_mode+1)& (0+255),b
  3533  011F94  0E03               	movlw	3
  3534  011F96  6F48               	movwf	_mode& (0+255),b
  3535  011F98                     l2208:
  3536                           
  3537                           ; BSR set to: 1
  3538                           ;main.c: 372: if (right) {mode =1;}
  3539  011F98  51FB               	movf	main@right& (0+255),w,b
  3540  011F9A  B4D8               	btfsc	status,2,c
  3541  011F9C  D004               	goto	l2209
  3542                           
  3543                           ; BSR set to: 1
  3544  011F9E  0E00               	movlw	0
  3545  011FA0  6F49               	movwf	(_mode+1)& (0+255),b
  3546  011FA2  0E01               	movlw	1
  3547  011FA4  6F48               	movwf	_mode& (0+255),b
  3548  011FA6                     l2209:
  3549                           
  3550                           ; BSR set to: 1
  3551                           ;main.c: 373: if (up) {mode=2;}
  3552  011FA6  51FC               	movf	main@up& (0+255),w,b
  3553  011FA8  B4D8               	btfsc	status,2,c
  3554  011FAA  D004               	goto	l2210
  3555                           
  3556                           ; BSR set to: 1
  3557  011FAC  0E00               	movlw	0
  3558  011FAE  6F49               	movwf	(_mode+1)& (0+255),b
  3559  011FB0  0E02               	movlw	2
  3560  011FB2  6F48               	movwf	_mode& (0+255),b
  3561  011FB4                     l2210:
  3562                           
  3563                           ; BSR set to: 1
  3564                           ;main.c: 374: if (left) {mode=4;}
  3565  011FB4  51FD               	movf	main@left& (0+255),w,b
  3566  011FB6  B4D8               	btfsc	status,2,c
  3567  011FB8  D004               	goto	l2211
  3568                           
  3569                           ; BSR set to: 1
  3570  011FBA  0E00               	movlw	0
  3571  011FBC  6F49               	movwf	(_mode+1)& (0+255),b
  3572  011FBE  0E04               	movlw	4
  3573  011FC0  6F48               	movwf	_mode& (0+255),b
  3574  011FC2                     l2211:
  3575                           
  3576                           ; BSR set to: 1
  3577                           ;main.c: 379: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3578                           
  3579                           ; BSR set to: 1
  3580  011FC2  0E01               	movlw	1
  3581  011FC4  ECAC  F0AA         	call	_MXK_BlockSwitchTo
  3582  011FC8  0900               	iorlw	0
  3583  011FCA  B4D8               	btfsc	status,2,c
  3584  011FCC  D792               	goto	l2206
  3585                           
  3586                           ;main.c: 381: if (mode==0){
  3587  011FCE  0101               	movlb	1	; () banked
  3588  011FD0  5148               	movf	_mode& (0+255),w,b
  3589  011FD2  1149               	iorwf	(_mode+1)& (0+255),w,b
  3590  011FD4  A4D8               	btfss	status,2,c
  3591  011FD6  D014               	goto	l2213
  3592                           
  3593                           ; BSR set to: 1
  3594                           ;main.c: 384: printf("%c", (char)35);
  3595  011FD8  0EFC               	movlw	low STR_1
  3596  011FDA  0100               	movlb	0	; () banked
  3597  011FDC  6F75               	movwf	printf@f& (0+255),b
  3598  011FDE  0EFF               	movlw	high STR_1
  3599  011FE0  6F76               	movwf	(printf@f+1)& (0+255),b
  3600  011FE2  0E00               	movlw	0
  3601  011FE4  6F78               	movwf	(?_printf+3)& (0+255),b
  3602  011FE6  0E23               	movlw	35
  3603  011FE8  6F77               	movwf	(?_printf+2)& (0+255),b
  3604  011FEA  ECF8  F095         	call	_printf	;wreg free
  3605                           
  3606                           ;main.c: 385: printf("Robot Ready! \n\n");
  3607  011FEE  0E5F               	movlw	low STR_13
  3608  011FF0  0100               	movlb	0	; () banked
  3609  011FF2  6F75               	movwf	printf@f& (0+255),b
  3610  011FF4  0EFF               	movlw	high STR_13
  3611  011FF6  6F76               	movwf	(printf@f+1)& (0+255),b
  3612  011FF8  ECF8  F095         	call	_printf	;wreg free
  3613                           
  3614                           ;main.c: 387: Console_Render();
  3615  011FFC  EC1B  F092         	call	_Console_Render	;wreg free
  3616  012000                     l2213:
  3617                           
  3618                           ;main.c: 389: }
  3619                           ;main.c: 390: if (mode == 3){
  3620  012000  0E03               	movlw	3
  3621  012002  0101               	movlb	1	; () banked
  3622  012004  1948               	xorwf	_mode& (0+255),w,b
  3623  012006  1149               	iorwf	(_mode+1)& (0+255),w,b
  3624  012008  A4D8               	btfss	status,2,c
  3625  01200A  D039               	goto	l2214
  3626                           
  3627                           ; BSR set to: 1
  3628                           ;main.c: 393: Console_Render();
  3629  01200C  EC1B  F092         	call	_Console_Render	;wreg free
  3630                           
  3631                           ;main.c: 404: for (int r =0; r <10; r++){
  3632  012010  0E00               	movlw	0
  3633  012012  0101               	movlb	1	; () banked
  3634  012014  6FFF               	movwf	(main@r+1)& (0+255),b
  3635  012016  0E00               	movlw	0
  3636  012018  6FFE               	movwf	main@r& (0+255),b
  3637                           
  3638                           ; BSR set to: 1
  3639  01201A  BFFF               	btfsc	(main@r+1)& (0+255),7,b
  3640  01201C  D003               	goto	l2215
  3641  01201E  51FF               	movf	(main@r+1)& (0+255),w,b
  3642  012020  E10E               	bnz	l2216
  3643  012022  D009               	goto	L1
  3644  012024                     l2215:
  3645                           
  3646                           ; BSR set to: 1
  3647                           ;main.c: 405: ADCAverage();
  3648                           
  3649                           ; BSR set to: 1
  3650  012024  ECA9  F087         	call	_ADCAverage	;wreg free
  3651  012028  0101               	movlb	1	; () banked
  3652  01202A  4BFE               	infsnz	main@r& (0+255),f,b
  3653  01202C  2BFF               	incf	(main@r+1)& (0+255),f,b
  3654                           
  3655                           ; BSR set to: 1
  3656  01202E  BFFF               	btfsc	(main@r+1)& (0+255),7,b
  3657  012030  D7F9               	goto	l2215
  3658  012032  51FF               	movf	(main@r+1)& (0+255),w,b
  3659  012034  E104               	bnz	u14780
  3660  012036                     L1:
  3661  012036  0E0A               	movlw	10
  3662  012038  5DFE               	subwf	main@r& (0+255),w,b
  3663  01203A  A0D8               	btfss	status,0,c
  3664  01203C  D7F3               	goto	l2215
  3665  01203E                     u14780:
  3666  01203E                     l2216:
  3667                           
  3668                           ; BSR set to: 1
  3669                           ;main.c: 406: }
  3670                           ;main.c: 408: Desired_Level = average;
  3671  01203E  C13E  F02C         	movff	_average,_Desired_Level
  3672  012042  C13F  F02D         	movff	_average+1,_Desired_Level+1
  3673                           
  3674                           ; BSR set to: 1
  3675                           ;main.c: 410: Travel(3, 10000, 0, 200);
  3676  012046  0E00               	movlw	0
  3677  012048  0100               	movlb	0	; () banked
  3678  01204A  6FF2               	movwf	(Travel@direction+1)& (0+255),b
  3679  01204C  0E03               	movlw	3
  3680  01204E  6FF1               	movwf	Travel@direction& (0+255),b
  3681  012050  0E27               	movlw	39
  3682  012052  6FF4               	movwf	(Travel@Dist+1)& (0+255),b
  3683  012054  0E10               	movlw	16
  3684  012056  6FF3               	movwf	Travel@Dist& (0+255),b
  3685  012058  0E00               	movlw	0
  3686  01205A  6FF6               	movwf	(Travel@Test_ADC+1)& (0+255),b
  3687  01205C  0E00               	movlw	0
  3688  01205E  6FF5               	movwf	Travel@Test_ADC& (0+255),b
  3689  012060  0E00               	movlw	0
  3690  012062  6FF8               	movwf	(Travel@Spd+1)& (0+255),b
  3691  012064  0EC8               	movlw	200
  3692  012066  6FF7               	movwf	Travel@Spd& (0+255),b
  3693  012068  EC00  F080         	call	_Travel	;wreg free
  3694                           
  3695                           ;main.c: 421: Console_Render();
  3696  01206C  EC1B  F092         	call	_Console_Render	;wreg free
  3697                           
  3698                           ;main.c: 423: mode=0;
  3699  012070  0E00               	movlw	0
  3700  012072  0101               	movlb	1	; () banked
  3701  012074  6F49               	movwf	(_mode+1)& (0+255),b
  3702  012076  0E00               	movlw	0
  3703  012078  6F48               	movwf	_mode& (0+255),b
  3704                           
  3705                           ; BSR set to: 1
  3706                           ;main.c: 426: Console_Render();
  3707  01207A  EC1B  F092         	call	_Console_Render	;wreg free
  3708  01207E                     l2214:
  3709                           
  3710                           ;main.c: 428: }
  3711                           ;main.c: 430: Console_Render();
  3712  01207E  EC1B  F092         	call	_Console_Render	;wreg free
  3713                           
  3714                           ;main.c: 431: if (MXK_Release())
  3715  012082  EC25  F0AD         	call	_MXK_Release	;wreg free
  3716  012086  0900               	iorlw	0
  3717  012088  B4D8               	btfsc	status,2,c
  3718  01208A  D733               	goto	l2206
  3719                           
  3720                           ;main.c: 432: MXK_Dequeue();
  3721  01208C  EC61  F0AB         	call	_MXK_Dequeue	;wreg free
  3722                           
  3723                           ;main.c: 433: }
  3724                           ;main.c: 434: }
  3725  012090  D730               	goto	l2206
  3726  012092                     __end_of_main:
  3727                           	opt stack 0
  3728                           tosu	equ	0xFFF
  3729                           tosh	equ	0xFFE
  3730                           tosl	equ	0xFFD
  3731                           pclath	equ	0xFFA
  3732                           tblptru	equ	0xFF8
  3733                           tblptrh	equ	0xFF7
  3734                           tblptrl	equ	0xFF6
  3735                           tablat	equ	0xFF5
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           postdec1	equ	0xFE5
  3739                           fsr1h	equ	0xFE2
  3740                           fsr1l	equ	0xFE1
  3741                           postinc2	equ	0xFDE
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function _Travel *****************
  3745 ;; Defined at:
  3746 ;;		line 222 in file "dans.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;  direction       2  145[BANK0 ] int 
  3749 ;;  Dist            2  147[BANK0 ] int 
  3750 ;;  Test_ADC        2  149[BANK0 ] int 
  3751 ;;  Spd             2  151[BANK0 ] int 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  rev_Dist        2    6[BANK3 ] int 
  3754 ;;  error           2   12[BANK3 ] int 
  3755 ;;  Req_Dir         2   10[BANK3 ] int 
  3756 ;;  Dist_Travell    2    8[BANK3 ] int 
  3757 ;;  spd2            2    4[BANK3 ] int 
  3758 ;;  spd1            2    2[BANK3 ] int 
  3759 ;;  Dir             2    0[BANK3 ] int 
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  2  145[BANK0 ] int 
  3762 ;; Registers used:
  3763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3769 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;      Locals:         0       0       0       0      14       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Totals:         0      12       0       0      14       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;Total ram usage:       26 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; Hardware stack levels required when called:   13
  3776 ;; This function calls:
  3777 ;;		_ADCAverage
  3778 ;;		_Console_Render
  3779 ;;		_Drive
  3780 ;;		_Get_VirtualWall_State
  3781 ;;		_Robot_Stop
  3782 ;;		_Turn
  3783 ;;		_UpdateDistance
  3784 ;;		___wmul
  3785 ;;		_printf
  3786 ;; This function is called by:
  3787 ;;		_main
  3788 ;;		_movement1
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text1
  3793  010000                     __ptext1:
  3794                           	opt stack 0
  3795  010000                     _Travel:
  3796                           	opt stack 17
  3797                           
  3798                           ;dans.c: 223: int Dist_Travelled = 0;
  3799                           
  3800                           ;incstack = 0
  3801  010000  0E00               	movlw	0
  3802  010002  0103               	movlb	3	; () banked
  3803  010004  6F31               	movwf	(Travel@Dist_Travelled+1)& (0+255),b
  3804  010006  0E00               	movlw	0
  3805  010008  6F30               	movwf	Travel@Dist_Travelled& (0+255),b
  3806                           
  3807                           ;dans.c: 224: int Req_Dir = 0;
  3808  01000A  0E00               	movlw	0
  3809  01000C  6F33               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3810  01000E  0E00               	movlw	0
  3811  010010  6F32               	movwf	Travel@Req_Dir& (0+255),b
  3812                           
  3813                           ; BSR set to: 3
  3814                           ;dans.c: 225: int Dir;
  3815                           ;dans.c: 226: if(direction == Current_Direction){
  3816  010012  0101               	movlb	1	; () banked
  3817  010014  51F3               	movf	_Current_Direction& (0+255),w,b
  3818  010016  0100               	movlb	0	; () banked
  3819  010018  19F1               	xorwf	Travel@direction& (0+255),w,b
  3820  01001A  E11A               	bnz	l15891
  3821  01001C  0101               	movlb	1	; () banked
  3822  01001E  51F4               	movf	(_Current_Direction+1)& (0+255),w,b
  3823  010020  0100               	movlb	0	; () banked
  3824  010022  19F2               	xorwf	(Travel@direction+1)& (0+255),w,b
  3825  010024  A4D8               	btfss	status,2,c
  3826  010026  D014               	goto	l2400
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;dans.c: 227: printf("%d", Spd);
  3830  010028  0E9D               	movlw	low (STR_37+9)
  3831  01002A  6F75               	movwf	printf@f& (0+255),b
  3832  01002C  0EFF               	movlw	high (STR_37+9)
  3833  01002E  6F76               	movwf	(printf@f+1)& (0+255),b
  3834  010030  C0F7  F077         	movff	Travel@Spd,?_printf+2
  3835  010034  C0F8  F078         	movff	Travel@Spd+1,?_printf+3
  3836  010038  ECF8  F095         	call	_printf	;wreg free
  3837                           
  3838                           ;dans.c: 228: printf("driving");
  3839  01003C  0EEF               	movlw	low STR_25
  3840  01003E  0100               	movlb	0	; () banked
  3841  010040  6F75               	movwf	printf@f& (0+255),b
  3842  010042  0EFF               	movlw	high STR_25
  3843  010044  6F76               	movwf	(printf@f+1)& (0+255),b
  3844  010046  ECF8  F095         	call	_printf	;wreg free
  3845                           
  3846                           ;dans.c: 229: Console_Render();
  3847  01004A  EC1B  F092         	call	_Console_Render	;wreg free
  3848                           
  3849                           ;dans.c: 230: }
  3850  01004E  D093               	goto	l2401
  3851  010050                     l2400:
  3852  010050                     l15891:
  3853                           
  3854                           ;dans.c: 231: else {
  3855                           ;dans.c: 232: Req_Dir = direction - Current_Direction;
  3856  010050  C1F3  F0F9         	movff	_Current_Direction,??_Travel
  3857  010054  C1F4  F0FA         	movff	_Current_Direction+1,??_Travel+1
  3858  010058  0100               	movlb	0	; () banked
  3859  01005A  1FF9               	comf	??_Travel& (0+255),f,b
  3860  01005C  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  3861  01005E  4BF9               	infsnz	??_Travel& (0+255),f,b
  3862  010060  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  3863  010062  51F1               	movf	Travel@direction& (0+255),w,b
  3864  010064  25F9               	addwf	??_Travel& (0+255),w,b
  3865  010066  0103               	movlb	3	; () banked
  3866  010068  6F32               	movwf	Travel@Req_Dir& (0+255),b
  3867  01006A  0100               	movlb	0	; () banked
  3868  01006C  51F2               	movf	(Travel@direction+1)& (0+255),w,b
  3869  01006E  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  3870  010070  0103               	movlb	3	; () banked
  3871  010072  6F33               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3872                           
  3873                           ;dans.c: 234: if (Req_Dir < 0){
  3874  010074  AF33               	btfss	(Travel@Req_Dir+1)& (0+255),7,b
  3875  010076  D03A               	goto	l2402
  3876                           
  3877                           ; BSR set to: 3
  3878                           ;dans.c: 235: Req_Dir = 83*Req_Dir*-1;
  3879  010078  C332  F0F9         	movff	Travel@Req_Dir,??_Travel
  3880  01007C  C333  F0FA         	movff	Travel@Req_Dir+1,??_Travel+1
  3881  010080  0100               	movlb	0	; () banked
  3882  010082  1FF9               	comf	??_Travel& (0+255),f,b
  3883  010084  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  3884  010086  4BF9               	infsnz	??_Travel& (0+255),f,b
  3885  010088  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  3886  01008A  C0F9  F060         	movff	??_Travel,___wmul@multiplier
  3887  01008E  C0FA  F061         	movff	??_Travel+1,___wmul@multiplier+1
  3888  010092  0E00               	movlw	0
  3889  010094  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3890  010096  0E53               	movlw	83
  3891  010098  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3892  01009A  ECD6  F0AB         	call	___wmul	;wreg free
  3893  01009E  C060  F332         	movff	?___wmul,Travel@Req_Dir
  3894  0100A2  C061  F333         	movff	?___wmul+1,Travel@Req_Dir+1
  3895                           
  3896                           ;dans.c: 236: Dir = 1;
  3897  0100A6  0E00               	movlw	0
  3898  0100A8  0103               	movlb	3	; () banked
  3899  0100AA  6F29               	movwf	(Travel@Dir+1)& (0+255),b
  3900  0100AC  0E01               	movlw	1
  3901  0100AE  6F28               	movwf	Travel@Dir& (0+255),b
  3902                           
  3903                           ; BSR set to: 3
  3904                           ;dans.c: 237: if(Req_Dir > 166){
  3905  0100B0  BF33               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
  3906  0100B2  D04E               	goto	l2405
  3907  0100B4  5133               	movf	(Travel@Req_Dir+1)& (0+255),w,b
  3908  0100B6  E104               	bnz	u13240
  3909  0100B8  0EA7               	movlw	167
  3910  0100BA  5D32               	subwf	Travel@Req_Dir& (0+255),w,b
  3911  0100BC  A0D8               	btfss	status,0,c
  3912  0100BE  D048               	goto	l2405
  3913  0100C0                     u13240:
  3914                           
  3915                           ; BSR set to: 3
  3916                           ;dans.c: 238: Req_Dir = 332 - Req_Dir;
  3917  0100C0  C332  F0F9         	movff	Travel@Req_Dir,??_Travel
  3918  0100C4  C333  F0FA         	movff	Travel@Req_Dir+1,??_Travel+1
  3919  0100C8  0100               	movlb	0	; () banked
  3920  0100CA  1FF9               	comf	??_Travel& (0+255),f,b
  3921  0100CC  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  3922  0100CE  4BF9               	infsnz	??_Travel& (0+255),f,b
  3923  0100D0  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  3924  0100D2  0E4C               	movlw	76
  3925  0100D4  25F9               	addwf	??_Travel& (0+255),w,b
  3926  0100D6  0103               	movlb	3	; () banked
  3927  0100D8  6F32               	movwf	Travel@Req_Dir& (0+255),b
  3928  0100DA  0E01               	movlw	1
  3929  0100DC  0100               	movlb	0	; () banked
  3930  0100DE  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  3931  0100E0  0103               	movlb	3	; () banked
  3932  0100E2  6F33               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3933                           
  3934                           ; BSR set to: 3
  3935                           ;dans.c: 239: Dir = 0;
  3936  0100E4  0E00               	movlw	0
  3937  0100E6  6F29               	movwf	(Travel@Dir+1)& (0+255),b
  3938  0100E8  0E00               	movlw	0
  3939  0100EA  D031               	goto	L2
  3940  0100EC                     l2402:
  3941                           
  3942                           ; BSR set to: 3
  3943                           ;dans.c: 242: else{
  3944                           ;dans.c: 243: Req_Dir = 83*Req_Dir;
  3945                           
  3946                           ; BSR set to: 3
  3947  0100EC  C332  F060         	movff	Travel@Req_Dir,___wmul@multiplier
  3948  0100F0  C333  F061         	movff	Travel@Req_Dir+1,___wmul@multiplier+1
  3949  0100F4  0E00               	movlw	0
  3950  0100F6  0100               	movlb	0	; () banked
  3951  0100F8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3952  0100FA  0E53               	movlw	83
  3953  0100FC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3954  0100FE  ECD6  F0AB         	call	___wmul	;wreg free
  3955  010102  C060  F332         	movff	?___wmul,Travel@Req_Dir
  3956  010106  C061  F333         	movff	?___wmul+1,Travel@Req_Dir+1
  3957                           
  3958                           ;dans.c: 244: Dir = 0;
  3959  01010A  0E00               	movlw	0
  3960  01010C  0103               	movlb	3	; () banked
  3961  01010E  6F29               	movwf	(Travel@Dir+1)& (0+255),b
  3962  010110  0E00               	movlw	0
  3963  010112  6F28               	movwf	Travel@Dir& (0+255),b
  3964                           
  3965                           ; BSR set to: 3
  3966                           ;dans.c: 245: if(Req_Dir > 166){
  3967  010114  BF33               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
  3968  010116  D01C               	goto	l2405
  3969  010118  5133               	movf	(Travel@Req_Dir+1)& (0+255),w,b
  3970  01011A  E104               	bnz	u13250
  3971  01011C  0EA7               	movlw	167
  3972  01011E  5D32               	subwf	Travel@Req_Dir& (0+255),w,b
  3973  010120  A0D8               	btfss	status,0,c
  3974  010122  D016               	goto	l2405
  3975  010124                     u13250:
  3976                           
  3977                           ; BSR set to: 3
  3978                           ;dans.c: 246: Req_Dir = 332 - Req_Dir;
  3979  010124  C332  F0F9         	movff	Travel@Req_Dir,??_Travel
  3980  010128  C333  F0FA         	movff	Travel@Req_Dir+1,??_Travel+1
  3981  01012C  0100               	movlb	0	; () banked
  3982  01012E  1FF9               	comf	??_Travel& (0+255),f,b
  3983  010130  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  3984  010132  4BF9               	infsnz	??_Travel& (0+255),f,b
  3985  010134  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  3986  010136  0E4C               	movlw	76
  3987  010138  25F9               	addwf	??_Travel& (0+255),w,b
  3988  01013A  0103               	movlb	3	; () banked
  3989  01013C  6F32               	movwf	Travel@Req_Dir& (0+255),b
  3990  01013E  0E01               	movlw	1
  3991  010140  0100               	movlb	0	; () banked
  3992  010142  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  3993  010144  0103               	movlb	3	; () banked
  3994  010146  6F33               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3995                           
  3996                           ; BSR set to: 3
  3997                           ;dans.c: 247: Dir = 1;
  3998  010148  0E00               	movlw	0
  3999  01014A  6F29               	movwf	(Travel@Dir+1)& (0+255),b
  4000  01014C  0E01               	movlw	1
  4001  01014E                     L2:
  4002  01014E  6F28               	movwf	Travel@Dir& (0+255),b
  4003  010150                     l2405:
  4004                           
  4005                           ; BSR set to: 3
  4006                           ;dans.c: 248: }
  4007                           ;dans.c: 249: }
  4008                           ;dans.c: 250: Turn(Req_Dir, 200, Dir);
  4009                           
  4010                           ; BSR set to: 3
  4011                           
  4012                           ; BSR set to: 3
  4013  010150  C332  F061         	movff	Travel@Req_Dir,Turn@Angle
  4014  010154  C333  F062         	movff	Travel@Req_Dir+1,Turn@Angle+1
  4015  010158  0E00               	movlw	0
  4016  01015A  0100               	movlb	0	; () banked
  4017  01015C  6F64               	movwf	(Turn@Speed+1)& (0+255),b
  4018  01015E  0EC8               	movlw	200
  4019  010160  6F63               	movwf	Turn@Speed& (0+255),b
  4020  010162  C328  F065         	movff	Travel@Dir,Turn@Dir
  4021  010166  C329  F066         	movff	Travel@Dir+1,Turn@Dir+1
  4022  01016A  EC0E  F0A4         	call	_Turn	;wreg free
  4023                           
  4024                           ;dans.c: 251: Current_Direction = direction;
  4025  01016E  C0F1  F1F3         	movff	Travel@direction,_Current_Direction
  4026  010172  C0F2  F1F4         	movff	Travel@direction+1,_Current_Direction+1
  4027  010176                     l2401:
  4028                           
  4029                           ;dans.c: 252: }
  4030                           ;dans.c: 254: Drive(Spd,Spd);
  4031  010176  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
  4032  01017A  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  4033  01017E  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
  4034  010182  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  4035  010186  ECE2  F0A8         	call	_Drive	;wreg free
  4036                           
  4037                           ;dans.c: 259: k = 2;
  4038  01018A  0E00               	movlw	0
  4039  01018C  0101               	movlb	1	; () banked
  4040  01018E  6F3B               	movwf	(_k+1)& (0+255),b
  4041  010190  0E02               	movlw	2
  4042  010192  6F3A               	movwf	_k& (0+255),b
  4043                           
  4044                           ; BSR set to: 1
  4045                           ;dans.c: 260: int error;
  4046                           ;dans.c: 261: int spd1 =0 ;
  4047  010194  0E00               	movlw	0
  4048  010196  0103               	movlb	3	; () banked
  4049  010198  6F2B               	movwf	(Travel@spd1+1)& (0+255),b
  4050  01019A  0E00               	movlw	0
  4051  01019C  6F2A               	movwf	Travel@spd1& (0+255),b
  4052                           
  4053                           ; BSR set to: 3
  4054                           ;dans.c: 262: int spd2=0;
  4055  01019E  0E00               	movlw	0
  4056  0101A0  6F2D               	movwf	(Travel@spd2+1)& (0+255),b
  4057  0101A2  0E00               	movlw	0
  4058  0101A4  6F2C               	movwf	Travel@spd2& (0+255),b
  4059                           
  4060                           ;dans.c: 264: while (Dist_Travelled<Dist){
  4061  0101A6  D18C               	goto	l2419
  4062  0101A8                     
  4063                           ;dans.c: 267: ADCAverage();
  4064                           
  4065                           ; BSR set to: 3
  4066  0101A8  ECA9  F087         	call	_ADCAverage	;wreg free
  4067                           
  4068                           ;dans.c: 268: error = Desired_Level - average;
  4069  0101AC  C13E  F0F9         	movff	_average,??_Travel
  4070  0101B0  C13F  F0FA         	movff	_average+1,??_Travel+1
  4071  0101B4  0100               	movlb	0	; () banked
  4072  0101B6  1FF9               	comf	??_Travel& (0+255),f,b
  4073  0101B8  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4074  0101BA  4BF9               	infsnz	??_Travel& (0+255),f,b
  4075  0101BC  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4076  0101BE  502C               	movf	_Desired_Level,w,c
  4077  0101C0  25F9               	addwf	??_Travel& (0+255),w,b
  4078  0101C2  0103               	movlb	3	; () banked
  4079  0101C4  6F34               	movwf	Travel@error& (0+255),b
  4080  0101C6  502D               	movf	_Desired_Level+1,w,c
  4081  0101C8  0100               	movlb	0	; () banked
  4082  0101CA  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  4083  0101CC  0103               	movlb	3	; () banked
  4084  0101CE  6F35               	movwf	(Travel@error+1)& (0+255),b
  4085                           
  4086                           ; BSR set to: 3
  4087                           ;dans.c: 269: error*=k;
  4088  0101D0  C334  F060         	movff	Travel@error,___wmul@multiplier
  4089  0101D4  C335  F061         	movff	Travel@error+1,___wmul@multiplier+1
  4090  0101D8  C13A  F062         	movff	_k,___wmul@multiplicand
  4091  0101DC  C13B  F063         	movff	_k+1,___wmul@multiplicand+1
  4092  0101E0  ECD6  F0AB         	call	___wmul	;wreg free
  4093  0101E4  C060  F334         	movff	?___wmul,Travel@error
  4094  0101E8  C061  F335         	movff	?___wmul+1,Travel@error+1
  4095                           
  4096                           ;dans.c: 270: if (error > 190){
  4097  0101EC  0103               	movlb	3	; () banked
  4098  0101EE  BF35               	btfsc	(Travel@error+1)& (0+255),7,b
  4099  0101F0  D00A               	goto	l2408
  4100  0101F2  5135               	movf	(Travel@error+1)& (0+255),w,b
  4101  0101F4  E104               	bnz	u13260
  4102  0101F6  0EBF               	movlw	191
  4103  0101F8  5D34               	subwf	Travel@error& (0+255),w,b
  4104  0101FA  A0D8               	btfss	status,0,c
  4105  0101FC  D004               	goto	l2408
  4106  0101FE                     u13260:
  4107                           
  4108                           ; BSR set to: 3
  4109                           ;dans.c: 271: error=190;
  4110  0101FE  0E00               	movlw	0
  4111  010200  6F35               	movwf	(Travel@error+1)& (0+255),b
  4112  010202  0EBE               	movlw	190
  4113  010204  6F34               	movwf	Travel@error& (0+255),b
  4114  010206                     l2408:
  4115                           
  4116                           ; BSR set to: 3
  4117                           ;dans.c: 272: }
  4118                           ;dans.c: 273: if (error < -190){
  4119                           
  4120                           ; BSR set to: 3
  4121  010206  AF35               	btfss	(Travel@error+1)& (0+255),7,b
  4122  010208  D00A               	goto	l2409
  4123  01020A  0E42               	movlw	66
  4124  01020C  5D34               	subwf	Travel@error& (0+255),w,b
  4125  01020E  0EFF               	movlw	255
  4126  010210  5935               	subwfb	(Travel@error+1)& (0+255),w,b
  4127  010212  B0D8               	btfsc	status,0,c
  4128  010214  D004               	goto	l2409
  4129                           
  4130                           ; BSR set to: 3
  4131                           ;dans.c: 274: error = -190;
  4132  010216  0EFF               	movlw	255
  4133  010218  6F35               	movwf	(Travel@error+1)& (0+255),b
  4134  01021A  0E42               	movlw	66
  4135  01021C  6F34               	movwf	Travel@error& (0+255),b
  4136  01021E                     l2409:
  4137                           
  4138                           ; BSR set to: 3
  4139                           ;dans.c: 275: }
  4140                           ;dans.c: 276: if (error == Desired_Level + 4 || error == Desired_Level - 4){
  4141                           
  4142                           ; BSR set to: 3
  4143  01021E  0E04               	movlw	4
  4144  010220  242C               	addwf	_Desired_Level,w,c
  4145  010222  0100               	movlb	0	; () banked
  4146  010224  6FF9               	movwf	??_Travel& (0+255),b
  4147  010226  0E00               	movlw	0
  4148  010228  202D               	addwfc	_Desired_Level+1,w,c
  4149  01022A  6FFA               	movwf	(??_Travel+1)& (0+255),b
  4150  01022C  0103               	movlb	3	; () banked
  4151  01022E  5134               	movf	Travel@error& (0+255),w,b
  4152  010230  0100               	movlb	0	; () banked
  4153  010232  19F9               	xorwf	??_Travel& (0+255),w,b
  4154  010234  E106               	bnz	u13280
  4155  010236  0103               	movlb	3	; () banked
  4156  010238  5135               	movf	(Travel@error+1)& (0+255),w,b
  4157  01023A  0100               	movlb	0	; () banked
  4158  01023C  19FA               	xorwf	(??_Travel+1)& (0+255),w,b
  4159  01023E  B4D8               	btfsc	status,2,c
  4160  010240  D017               	goto	u13290
  4161  010242                     u13280:
  4162                           
  4163                           ; BSR set to: 0
  4164  010242  0EFC               	movlw	252
  4165  010244  6FF9               	movwf	??_Travel& (0+255),b
  4166  010246  0EFF               	movlw	255
  4167  010248  6FFA               	movwf	(??_Travel+1)& (0+255),b
  4168  01024A  C02C  F0FB         	movff	_Desired_Level,??_Travel+2
  4169  01024E  C02D  F0FC         	movff	_Desired_Level+1,??_Travel+3
  4170  010252  51F9               	movf	??_Travel& (0+255),w,b
  4171  010254  27FB               	addwf	(??_Travel+2)& (0+255),f,b
  4172  010256  51FA               	movf	(??_Travel+1)& (0+255),w,b
  4173  010258  23FC               	addwfc	(??_Travel+3)& (0+255),f,b
  4174  01025A  0103               	movlb	3	; () banked
  4175  01025C  5134               	movf	Travel@error& (0+255),w,b
  4176  01025E  0100               	movlb	0	; () banked
  4177  010260  19FB               	xorwf	(??_Travel+2)& (0+255),w,b
  4178  010262  E110               	bnz	l15945
  4179  010264  0103               	movlb	3	; () banked
  4180  010266  5135               	movf	(Travel@error+1)& (0+255),w,b
  4181  010268  0100               	movlb	0	; () banked
  4182  01026A  19FC               	xorwf	(??_Travel+3)& (0+255),w,b
  4183  01026C  A4D8               	btfss	status,2,c
  4184  01026E  D00A               	goto	l2410
  4185  010270                     u13290:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;dans.c: 277: Drive(Spd,Spd);
  4189                           
  4190                           ; BSR set to: 0
  4191  010270  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
  4192  010274  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  4193  010278  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
  4194  01027C  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  4195  010280  ECE2  F0A8         	call	_Drive	;wreg free
  4196  010284                     l2410:
  4197  010284                     l15945:
  4198                           
  4199                           ;dans.c: 278: }
  4200                           ;dans.c: 279: if (error >= 0){
  4201  010284  0103               	movlb	3	; () banked
  4202  010286  BF35               	btfsc	(Travel@error+1)& (0+255),7,b
  4203  010288  D01C               	goto	l2413
  4204                           
  4205                           ; BSR set to: 3
  4206                           ;dans.c: 280: spd1 = Spd - error;
  4207  01028A  C334  F0F9         	movff	Travel@error,??_Travel
  4208  01028E  C335  F0FA         	movff	Travel@error+1,??_Travel+1
  4209  010292  0100               	movlb	0	; () banked
  4210  010294  1FF9               	comf	??_Travel& (0+255),f,b
  4211  010296  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4212  010298  4BF9               	infsnz	??_Travel& (0+255),f,b
  4213  01029A  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4214  01029C  51F7               	movf	Travel@Spd& (0+255),w,b
  4215  01029E  25F9               	addwf	??_Travel& (0+255),w,b
  4216  0102A0  0103               	movlb	3	; () banked
  4217  0102A2  6F2A               	movwf	Travel@spd1& (0+255),b
  4218  0102A4  0100               	movlb	0	; () banked
  4219  0102A6  51F8               	movf	(Travel@Spd+1)& (0+255),w,b
  4220  0102A8  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  4221  0102AA  0103               	movlb	3	; () banked
  4222  0102AC  6F2B               	movwf	(Travel@spd1+1)& (0+255),b
  4223                           
  4224                           ; BSR set to: 3
  4225                           ;dans.c: 281: Drive(spd1,Spd);
  4226  0102AE  C32A  F061         	movff	Travel@spd1,Drive@SpeedL
  4227  0102B2  C32B  F062         	movff	Travel@spd1+1,Drive@SpeedL+1
  4228  0102B6  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
  4229  0102BA  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  4230  0102BE  ECE2  F0A8         	call	_Drive	;wreg free
  4231  0102C2                     l2413:
  4232                           
  4233                           ;dans.c: 282: }
  4234                           ;dans.c: 283: if (error <= 0){
  4235  0102C2  0103               	movlb	3	; () banked
  4236  0102C4  BF35               	btfsc	(Travel@error+1)& (0+255),7,b
  4237  0102C6  D005               	goto	u13310
  4238  0102C8  5135               	movf	(Travel@error+1)& (0+255),w,b
  4239  0102CA  E125               	bnz	l15963
  4240  0102CC  0534               	decf	Travel@error& (0+255),w,b
  4241  0102CE  B0D8               	btfsc	status,0,c
  4242  0102D0  D022               	goto	l2414
  4243  0102D2                     u13310:
  4244                           
  4245                           ; BSR set to: 3
  4246                           ;dans.c: 284: error=((error<0)?-error:error);
  4247  0102D2  AF35               	btfss	(Travel@error+1)& (0+255),7,b
  4248  0102D4  D004               	goto	l2418
  4249                           
  4250                           ; BSR set to: 3
  4251                           
  4252                           ; BSR set to: 3
  4253                           
  4254                           ; BSR set to: 3
  4255  0102D6  6D34               	negf	Travel@error& (0+255),b
  4256  0102D8  1F35               	comf	(Travel@error+1)& (0+255),f,b
  4257  0102DA  B0D8               	btfsc	status,0,c
  4258  0102DC  2B35               	incf	(Travel@error+1)& (0+255),f,b
  4259  0102DE                     l2418:
  4260                           
  4261                           ; BSR set to: 3
  4262                           ;dans.c: 285: spd2= Spd - error;
  4263                           
  4264                           ; BSR set to: 3
  4265  0102DE  C334  F0F9         	movff	Travel@error,??_Travel
  4266  0102E2  C335  F0FA         	movff	Travel@error+1,??_Travel+1
  4267  0102E6  0100               	movlb	0	; () banked
  4268  0102E8  1FF9               	comf	??_Travel& (0+255),f,b
  4269  0102EA  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4270  0102EC  4BF9               	infsnz	??_Travel& (0+255),f,b
  4271  0102EE  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4272  0102F0  51F7               	movf	Travel@Spd& (0+255),w,b
  4273  0102F2  25F9               	addwf	??_Travel& (0+255),w,b
  4274  0102F4  0103               	movlb	3	; () banked
  4275  0102F6  6F2C               	movwf	Travel@spd2& (0+255),b
  4276  0102F8  0100               	movlb	0	; () banked
  4277  0102FA  51F8               	movf	(Travel@Spd+1)& (0+255),w,b
  4278  0102FC  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  4279  0102FE  0103               	movlb	3	; () banked
  4280  010300  6F2D               	movwf	(Travel@spd2+1)& (0+255),b
  4281                           
  4282                           ; BSR set to: 3
  4283                           ;dans.c: 286: Drive(Spd,spd2);
  4284  010302  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
  4285  010306  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  4286  01030A  C32C  F063         	movff	Travel@spd2,Drive@SpeedR
  4287  01030E  C32D  F064         	movff	Travel@spd2+1,Drive@SpeedR+1
  4288  010312  ECE2  F0A8         	call	_Drive	;wreg free
  4289  010316                     l2414:
  4290  010316                     l15963:
  4291                           
  4292                           ;dans.c: 287: }
  4293                           ;dans.c: 309: printf("%c", (char)35);
  4294  010316  0EFC               	movlw	low STR_1
  4295  010318  0100               	movlb	0	; () banked
  4296  01031A  6F75               	movwf	printf@f& (0+255),b
  4297  01031C  0EFF               	movlw	high STR_1
  4298  01031E  6F76               	movwf	(printf@f+1)& (0+255),b
  4299  010320  0E00               	movlw	0
  4300  010322  6F78               	movwf	(?_printf+3)& (0+255),b
  4301  010324  0E23               	movlw	35
  4302  010326  6F77               	movwf	(?_printf+2)& (0+255),b
  4303  010328  ECF8  F095         	call	_printf	;wreg free
  4304                           
  4305                           ;dans.c: 310: Dist_Travelled += UpdateDistance();
  4306  01032C  EC33  F0A6         	call	_UpdateDistance	;wreg free
  4307  010330  0100               	movlb	0	; () banked
  4308  010332  5161               	movf	?_UpdateDistance& (0+255),w,b
  4309  010334  0103               	movlb	3	; () banked
  4310  010336  2730               	addwf	Travel@Dist_Travelled& (0+255),f,b
  4311  010338  0100               	movlb	0	; () banked
  4312  01033A  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  4313  01033C  0103               	movlb	3	; () banked
  4314  01033E  2331               	addwfc	(Travel@Dist_Travelled+1)& (0+255),f,b
  4315                           
  4316                           ; BSR set to: 3
  4317                           ;dans.c: 311: printf("%d \n", Dist_Travelled);
  4318  010340  0EF7               	movlw	low STR_27
  4319  010342  0100               	movlb	0	; () banked
  4320  010344  6F75               	movwf	printf@f& (0+255),b
  4321  010346  0EFF               	movlw	high STR_27
  4322  010348  6F76               	movwf	(printf@f+1)& (0+255),b
  4323  01034A  C330  F077         	movff	Travel@Dist_Travelled,?_printf+2
  4324  01034E  C331  F078         	movff	Travel@Dist_Travelled+1,?_printf+3
  4325  010352  ECF8  F095         	call	_printf	;wreg free
  4326                           
  4327                           ;dans.c: 312: printf("\nspd1 %d",spd1);
  4328  010356  0ECC               	movlw	low STR_28
  4329  010358  0100               	movlb	0	; () banked
  4330  01035A  6F75               	movwf	printf@f& (0+255),b
  4331  01035C  0EFF               	movlw	high STR_28
  4332  01035E  6F76               	movwf	(printf@f+1)& (0+255),b
  4333  010360  C32A  F077         	movff	Travel@spd1,?_printf+2
  4334  010364  C32B  F078         	movff	Travel@spd1+1,?_printf+3
  4335  010368  ECF8  F095         	call	_printf	;wreg free
  4336                           
  4337                           ;dans.c: 313: printf("\nspd2 %d",spd2);
  4338  01036C  0ED5               	movlw	low STR_29
  4339  01036E  0100               	movlb	0	; () banked
  4340  010370  6F75               	movwf	printf@f& (0+255),b
  4341  010372  0EFF               	movlw	high STR_29
  4342  010374  6F76               	movwf	(printf@f+1)& (0+255),b
  4343  010376  C32C  F077         	movff	Travel@spd2,?_printf+2
  4344  01037A  C32D  F078         	movff	Travel@spd2+1,?_printf+3
  4345  01037E  ECF8  F095         	call	_printf	;wreg free
  4346                           
  4347                           ;dans.c: 314: printf("\nADC %d",average);
  4348  010382  0EE7               	movlw	low STR_30
  4349  010384  0100               	movlb	0	; () banked
  4350  010386  6F75               	movwf	printf@f& (0+255),b
  4351  010388  0EFF               	movlw	high STR_30
  4352  01038A  6F76               	movwf	(printf@f+1)& (0+255),b
  4353  01038C  C13E  F077         	movff	_average,?_printf+2
  4354  010390  C13F  F078         	movff	_average+1,?_printf+3
  4355  010394  ECF8  F095         	call	_printf	;wreg free
  4356                           
  4357                           ;dans.c: 315: printf("\nDesired: %d",Desired_Level);
  4358  010398  0E6F               	movlw	low STR_31
  4359  01039A  0100               	movlb	0	; () banked
  4360  01039C  6F75               	movwf	printf@f& (0+255),b
  4361  01039E  0EFF               	movlw	high STR_31
  4362  0103A0  6F76               	movwf	(printf@f+1)& (0+255),b
  4363  0103A2  C02C  F077         	movff	_Desired_Level,?_printf+2
  4364  0103A6  C02D  F078         	movff	_Desired_Level+1,?_printf+3
  4365  0103AA  ECF8  F095         	call	_printf	;wreg free
  4366                           
  4367                           ;dans.c: 316: printf("\nSpeed: %d",Spd);
  4368  0103AE  0EAC               	movlw	low STR_32
  4369  0103B0  0100               	movlb	0	; () banked
  4370  0103B2  6F75               	movwf	printf@f& (0+255),b
  4371  0103B4  0EFF               	movlw	high STR_32
  4372  0103B6  6F76               	movwf	(printf@f+1)& (0+255),b
  4373  0103B8  C0F7  F077         	movff	Travel@Spd,?_printf+2
  4374  0103BC  C0F8  F078         	movff	Travel@Spd+1,?_printf+3
  4375  0103C0  ECF8  F095         	call	_printf	;wreg free
  4376                           
  4377                           ;dans.c: 317: printf("\nError: %d",error);
  4378  0103C4  0EB7               	movlw	low STR_33
  4379  0103C6  0100               	movlb	0	; () banked
  4380  0103C8  6F75               	movwf	printf@f& (0+255),b
  4381  0103CA  0EFF               	movlw	high STR_33
  4382  0103CC  6F76               	movwf	(printf@f+1)& (0+255),b
  4383  0103CE  C334  F077         	movff	Travel@error,?_printf+2
  4384  0103D2  C335  F078         	movff	Travel@error+1,?_printf+3
  4385  0103D6  ECF8  F095         	call	_printf	;wreg free
  4386                           
  4387                           ;dans.c: 318: Console_Render();
  4388  0103DA  EC1B  F092         	call	_Console_Render	;wreg free
  4389                           
  4390                           ;dans.c: 320: if (Get_VirtualWall_State()){
  4391  0103DE  EC38  F0AC         	call	_Get_VirtualWall_State	;wreg free
  4392  0103E2  0100               	movlb	0	; () banked
  4393  0103E4  5161               	movf	?_Get_VirtualWall_State& (0+255),w,b
  4394  0103E6  1162               	iorwf	(?_Get_VirtualWall_State+1)& (0+255),w,b
  4395  0103E8  B4D8               	btfsc	status,2,c
  4396  0103EA  D06A               	goto	l2419
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;dans.c: 321: int rev_Dist = 0;
  4400  0103EC  0E00               	movlw	0
  4401  0103EE  0103               	movlb	3	; () banked
  4402  0103F0  6F2F               	movwf	(Travel@rev_Dist+1)& (0+255),b
  4403  0103F2  0E00               	movlw	0
  4404  0103F4  6F2E               	movwf	Travel@rev_Dist& (0+255),b
  4405                           
  4406                           ; BSR set to: 3
  4407                           ;dans.c: 323: printf("WALL FOUND\n");
  4408  0103F6  0E7C               	movlw	low STR_34
  4409  0103F8  0100               	movlb	0	; () banked
  4410  0103FA  6F75               	movwf	printf@f& (0+255),b
  4411  0103FC  0EFF               	movlw	high STR_34
  4412  0103FE  6F76               	movwf	(printf@f+1)& (0+255),b
  4413  010400  ECF8  F095         	call	_printf	;wreg free
  4414                           
  4415                           ;dans.c: 324: Console_Render();
  4416  010404  EC1B  F092         	call	_Console_Render	;wreg free
  4417                           
  4418                           ;dans.c: 325: Drive(-Spd,-Spd);
  4419  010408  C0F7  F0F9         	movff	Travel@Spd,??_Travel
  4420  01040C  C0F8  F0FA         	movff	Travel@Spd+1,??_Travel+1
  4421  010410  0100               	movlb	0	; () banked
  4422  010412  1FF9               	comf	??_Travel& (0+255),f,b
  4423  010414  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4424  010416  4BF9               	infsnz	??_Travel& (0+255),f,b
  4425  010418  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4426  01041A  C0F9  F061         	movff	??_Travel,Drive@SpeedL
  4427  01041E  C0FA  F062         	movff	??_Travel+1,Drive@SpeedL+1
  4428  010422  C0F7  F0FB         	movff	Travel@Spd,??_Travel+2
  4429  010426  C0F8  F0FC         	movff	Travel@Spd+1,??_Travel+3
  4430  01042A  1FFB               	comf	(??_Travel+2)& (0+255),f,b
  4431  01042C  1FFC               	comf	(??_Travel+3)& (0+255),f,b
  4432  01042E  4BFB               	infsnz	(??_Travel+2)& (0+255),f,b
  4433  010430  2BFC               	incf	(??_Travel+3)& (0+255),f,b
  4434  010432  C0FB  F063         	movff	??_Travel+2,Drive@SpeedR
  4435  010436  C0FC  F064         	movff	??_Travel+3,Drive@SpeedR+1
  4436  01043A  ECE2  F0A8         	call	_Drive	;wreg free
  4437                           
  4438                           ;dans.c: 326: UpdateDistance();
  4439  01043E  EC33  F0A6         	call	_UpdateDistance	;wreg free
  4440                           
  4441                           ;dans.c: 327: while(rev_Dist >= -Dist_Travelled){
  4442  010442  D028               	goto	l2420
  4443  010444                     
  4444                           ;dans.c: 329: rev_Dist += UpdateDistance();
  4445  010444  EC33  F0A6         	call	_UpdateDistance	;wreg free
  4446  010448  0100               	movlb	0	; () banked
  4447  01044A  5161               	movf	?_UpdateDistance& (0+255),w,b
  4448  01044C  0103               	movlb	3	; () banked
  4449  01044E  272E               	addwf	Travel@rev_Dist& (0+255),f,b
  4450  010450  0100               	movlb	0	; () banked
  4451  010452  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  4452  010454  0103               	movlb	3	; () banked
  4453  010456  232F               	addwfc	(Travel@rev_Dist+1)& (0+255),f,b
  4454                           
  4455                           ; BSR set to: 3
  4456                           ;dans.c: 330: Console_Render();
  4457  010458  EC1B  F092         	call	_Console_Render	;wreg free
  4458                           
  4459                           ;dans.c: 331: printf("%c", (char)35);
  4460  01045C  0EFC               	movlw	low STR_1
  4461  01045E  0100               	movlb	0	; () banked
  4462  010460  6F75               	movwf	printf@f& (0+255),b
  4463  010462  0EFF               	movlw	high STR_1
  4464  010464  6F76               	movwf	(printf@f+1)& (0+255),b
  4465  010466  0E00               	movlw	0
  4466  010468  6F78               	movwf	(?_printf+3)& (0+255),b
  4467  01046A  0E23               	movlw	35
  4468  01046C  6F77               	movwf	(?_printf+2)& (0+255),b
  4469  01046E  ECF8  F095         	call	_printf	;wreg free
  4470                           
  4471                           ;dans.c: 332: printf("rev:%d Tar: %d\n", rev_Dist, Dist_Travelled);
  4472  010472  0E4F               	movlw	low STR_36
  4473  010474  0100               	movlb	0	; () banked
  4474  010476  6F75               	movwf	printf@f& (0+255),b
  4475  010478  0EFF               	movlw	high STR_36
  4476  01047A  6F76               	movwf	(printf@f+1)& (0+255),b
  4477  01047C  C32E  F077         	movff	Travel@rev_Dist,?_printf+2
  4478  010480  C32F  F078         	movff	Travel@rev_Dist+1,?_printf+3
  4479  010484  C330  F079         	movff	Travel@Dist_Travelled,?_printf+4
  4480  010488  C331  F07A         	movff	Travel@Dist_Travelled+1,?_printf+5
  4481  01048C  ECF8  F095         	call	_printf	;wreg free
  4482                           
  4483                           ;dans.c: 333: Console_Render();
  4484  010490  EC1B  F092         	call	_Console_Render	;wreg free
  4485  010494                     l2420:
  4486  010494  C330  F0F9         	movff	Travel@Dist_Travelled,??_Travel
  4487  010498  C331  F0FA         	movff	Travel@Dist_Travelled+1,??_Travel+1
  4488  01049C  0100               	movlb	0	; () banked
  4489  01049E  1FF9               	comf	??_Travel& (0+255),f,b
  4490  0104A0  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  4491  0104A2  4BF9               	infsnz	??_Travel& (0+255),f,b
  4492  0104A4  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  4493  0104A6  51F9               	movf	??_Travel& (0+255),w,b
  4494  0104A8  0103               	movlb	3	; () banked
  4495  0104AA  5D2E               	subwf	Travel@rev_Dist& (0+255),w,b
  4496  0104AC  512F               	movf	(Travel@rev_Dist+1)& (0+255),w,b
  4497  0104AE  0A80               	xorlw	128
  4498  0104B0  0100               	movlb	0	; () banked
  4499  0104B2  6FFB               	movwf	(??_Travel+2)& (0+255),b
  4500  0104B4  51FA               	movf	(??_Travel+1)& (0+255),w,b
  4501  0104B6  0A80               	xorlw	128
  4502  0104B8  59FB               	subwfb	(??_Travel+2)& (0+255),w,b
  4503  0104BA  A0D8               	btfss	status,0,c
  4504  0104BC  0012               	return	
  4505  0104BE  D7C2               	goto	l2421
  4506  0104C0                     l2419:
  4507                           
  4508                           ; BSR set to: 0
  4509                           
  4510                           ; BSR set to: 0
  4511  0104C0  0100               	movlb	0	; () banked
  4512  0104C2  51F3               	movf	Travel@Dist& (0+255),w,b
  4513  0104C4  0103               	movlb	3	; () banked
  4514  0104C6  5D30               	subwf	Travel@Dist_Travelled& (0+255),w,b
  4515  0104C8  5131               	movf	(Travel@Dist_Travelled+1)& (0+255),w,b
  4516  0104CA  0A80               	xorlw	128
  4517  0104CC  0100               	movlb	0	; () banked
  4518  0104CE  6FF9               	movwf	??_Travel& (0+255),b
  4519  0104D0  51F4               	movf	(Travel@Dist+1)& (0+255),w,b
  4520  0104D2  0A80               	xorlw	128
  4521  0104D4  59F9               	subwfb	??_Travel& (0+255),w,b
  4522  0104D6  A0D8               	btfss	status,0,c
  4523  0104D8  D667               	goto	l2407
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;dans.c: 336: }
  4527                           ;dans.c: 340: }
  4528                           ;dans.c: 341: if (direction == 0){
  4529                           
  4530                           ; BSR set to: 0
  4531  0104DA  51F1               	movf	Travel@direction& (0+255),w,b
  4532  0104DC  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
  4533  0104DE  A4D8               	btfss	status,2,c
  4534  0104E0  D004               	goto	l2425
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;dans.c: 342: X_Pos -= 1;
  4538  0104E2  0630               	decf	_X_Pos,f,c
  4539  0104E4  A0D8               	btfss	status,0,c
  4540  0104E6  0631               	decf	_X_Pos+1,f,c
  4541                           
  4542                           ;dans.c: 343: }
  4543  0104E8  D017               	goto	l2431
  4544  0104EA                     l2425:
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;dans.c: 344: else if (direction == 1){
  4548                           
  4549                           ; BSR set to: 0
  4550  0104EA  05F1               	decf	Travel@direction& (0+255),w,b
  4551  0104EC  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
  4552  0104EE  A4D8               	btfss	status,2,c
  4553  0104F0  D003               	goto	l2427
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;dans.c: 345: Y_Pos += 1;
  4557  0104F2  4A2E               	infsnz	_Y_Pos,f,c
  4558  0104F4  2A2F               	incf	_Y_Pos+1,f,c
  4559                           
  4560                           ;dans.c: 346: }
  4561  0104F6  D010               	goto	l2431
  4562  0104F8                     l2427:
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;dans.c: 347: else if (direction == 2){
  4566                           
  4567                           ; BSR set to: 0
  4568  0104F8  0E02               	movlw	2
  4569  0104FA  19F1               	xorwf	Travel@direction& (0+255),w,b
  4570  0104FC  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
  4571  0104FE  A4D8               	btfss	status,2,c
  4572  010500  D003               	goto	l2429
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;dans.c: 348: X_Pos += 1;
  4576  010502  4A30               	infsnz	_X_Pos,f,c
  4577  010504  2A31               	incf	_X_Pos+1,f,c
  4578                           
  4579                           ;dans.c: 349: }
  4580  010506  D008               	goto	l2431
  4581  010508                     l2429:
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;dans.c: 350: else if (direction == 3){
  4585                           
  4586                           ; BSR set to: 0
  4587  010508  0E03               	movlw	3
  4588  01050A  19F1               	xorwf	Travel@direction& (0+255),w,b
  4589  01050C  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
  4590  01050E  A4D8               	btfss	status,2,c
  4591  010510  D003               	goto	l2431
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;dans.c: 351: Y_Pos -= 1;
  4595  010512  062E               	decf	_Y_Pos,f,c
  4596  010514  A0D8               	btfss	status,0,c
  4597  010516  062F               	decf	_Y_Pos+1,f,c
  4598  010518                     l2431:
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;dans.c: 352: }
  4602                           ;dans.c: 353: Robot_Stop();
  4603                           
  4604                           ; BSR set to: 0
  4605                           
  4606                           ; BSR set to: 0
  4607                           
  4608                           ; BSR set to: 0
  4609                           
  4610                           ; BSR set to: 0
  4611  010518  EC4A  F0AC         	call	_Robot_Stop	;wreg free
  4612  01051C  0012               	return		;funcret
  4613  01051E                     __end_of_Travel:
  4614                           	opt stack 0
  4615                           tosu	equ	0xFFF
  4616                           tosh	equ	0xFFE
  4617                           tosl	equ	0xFFD
  4618                           pclath	equ	0xFFA
  4619                           tblptru	equ	0xFF8
  4620                           tblptrh	equ	0xFF7
  4621                           tblptrl	equ	0xFF6
  4622                           tablat	equ	0xFF5
  4623                           postinc0	equ	0xFEE
  4624                           wreg	equ	0xFE8
  4625                           postdec1	equ	0xFE5
  4626                           fsr1h	equ	0xFE2
  4627                           fsr1l	equ	0xFE1
  4628                           postinc2	equ	0xFDE
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function _printf *****************
  4632 ;; Defined at:
  4633 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4636 ;;		 -> STR_45(9), STR_44(10), STR_43(3), STR_42(24), 
  4637 ;;		 -> STR_41(3), STR_40(12), STR_39(12), STR_38(12), 
  4638 ;;		 -> STR_37(12), STR_36(16), STR_35(3), STR_34(12), 
  4639 ;;		 -> STR_33(11), STR_32(11), STR_31(13), STR_30(8), 
  4640 ;;		 -> STR_29(9), STR_28(9), STR_27(5), STR_26(3), 
  4641 ;;		 -> STR_25(8), STR_24(3), STR_23(12), STR_22(3), 
  4642 ;;		 -> STR_21(20), STR_20(19), STR_19(3), STR_18(20), 
  4643 ;;		 -> STR_17(19), STR_16(3), STR_15(39), STR_14(42), 
  4644 ;;		 -> STR_13(16), STR_12(3), STR_11(21), STR_10(3), 
  4645 ;;		 -> STR_9(19), STR_8(28), STR_7(20), STR_6(3), 
  4646 ;;		 -> STR_5(17), STR_4(12), STR_3(3), STR_2(19), 
  4647 ;;		 -> STR_1(3), 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  tmpval          4    0        struct .
  4650 ;;  cp              3    0        PTR const unsigned char 
  4651 ;;  val             2   32[BANK0 ] unsigned int 
  4652 ;;  ap              2   30[BANK0 ] PTR void [1]
  4653 ;;		 -> ?_printf(2), 
  4654 ;;  len             2    0        unsigned int 
  4655 ;;  c               1   34[BANK0 ] char 
  4656 ;;  prec            1   29[BANK0 ] char 
  4657 ;;  flag            1   28[BANK0 ] unsigned char 
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  2   21[BANK0 ] int 
  4660 ;; Registers used:
  4661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4667 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;Total ram usage:       14 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:   12
  4674 ;; This function calls:
  4675 ;;		___lwdiv
  4676 ;;		___lwmod
  4677 ;;		_putch
  4678 ;; This function is called by:
  4679 ;;		_main
  4680 ;;		_Travel
  4681 ;;		_Sensor_Observe
  4682 ;;		_Closest_Object
  4683 ;;		_pop
  4684 ;;		_push
  4685 ;;		_Detect_Victim
  4686 ;;		_movement1
  4687 ;;		_Find_Flag
  4688 ;;		_Move_ADC_To
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           	psect	text2
  4693  012BF0                     __ptext2:
  4694                           	opt stack 0
  4695  012BF0                     _printf:
  4696                           	opt stack 18
  4697                           
  4698                           ;doprnt.c: 466: va_list ap;
  4699                           ;doprnt.c: 499: signed char c;
  4700                           ;doprnt.c: 506: signed char prec;
  4701                           ;doprnt.c: 508: unsigned char flag;
  4702                           ;doprnt.c: 523: union {
  4703                           ;doprnt.c: 524: unsigned long vd;
  4704                           ;doprnt.c: 525: double integ;
  4705                           ;doprnt.c: 526: } tmpval;
  4706                           ;doprnt.c: 528: unsigned int val;
  4707                           ;doprnt.c: 529: unsigned len;
  4708                           ;doprnt.c: 530: const char * cp;
  4709                           ;doprnt.c: 533: *ap = __va_start();
  4710                           
  4711                           ;incstack = 0
  4712  012BF0  0E77               	movlw	low (?_printf+2)
  4713  012BF2  0100               	movlb	0	; () banked
  4714  012BF4  6F7E               	movwf	printf@ap& (0+255),b
  4715  012BF6  0E00               	movlw	high (?_printf+2)
  4716  012BF8  6F7F               	movwf	(printf@ap+1)& (0+255),b
  4717                           
  4718                           ;doprnt.c: 536: while(c = *f++) {
  4719  012BFA  D09E               	goto	u12760
  4720  012BFC                     
  4721                           ; BSR set to: 0
  4722                           ;doprnt.c: 538: if(c != '%')
  4723                           
  4724                           ; BSR set to: 0
  4725  012BFC  0E25               	movlw	37
  4726  012BFE  1982               	xorwf	printf@c& (0+255),w,b
  4727  012C00  B4D8               	btfsc	status,2,c
  4728  012C02  D004               	goto	l2474
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;doprnt.c: 540: {
  4732                           ;doprnt.c: 541: (putch(c) );
  4733  012C04  5182               	movf	printf@c& (0+255),w,b
  4734  012C06  EC7F  F0AD         	call	_putch
  4735                           
  4736                           ;doprnt.c: 542: continue;
  4737  012C0A  D096               	goto	u12760
  4738  012C0C                     l2474:
  4739                           
  4740                           ;doprnt.c: 543: }
  4741                           ;doprnt.c: 548: flag = 0;
  4742  012C0C  0E00               	movlw	0
  4743  012C0E  0100               	movlb	0	; () banked
  4744  012C10  6F7C               	movwf	printf@flag& (0+255),b
  4745                           
  4746                           ;doprnt.c: 635: switch(c = *f++) {
  4747  012C12  D00E               	goto	l2475
  4748  012C14                     
  4749                           ; BSR set to: 0
  4750                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4751                           
  4752                           ; BSR set to: 0
  4753  012C14  C07E  FFD9         	movff	printf@ap,fsr2l
  4754  012C18  C07F  FFDA         	movff	printf@ap+1,fsr2h
  4755  012C1C  50DF               	movf	indf2,w,c
  4756  012C1E  6F82               	movwf	printf@c& (0+255),b
  4757                           
  4758                           ; BSR set to: 0
  4759  012C20  0E02               	movlw	2
  4760  012C22  277E               	addwf	printf@ap& (0+255),f,b
  4761  012C24  0E00               	movlw	0
  4762  012C26  237F               	addwfc	(printf@ap+1)& (0+255),f,b
  4763  012C28                     
  4764                           ; BSR set to: 0
  4765                           ;doprnt.c: 809: (putch(c) );
  4766                           
  4767                           ; BSR set to: 0
  4768  012C28  5182               	movf	printf@c& (0+255),w,b
  4769  012C2A  EC7F  F0AD         	call	_putch
  4770                           
  4771                           ;doprnt.c: 810: continue;
  4772  012C2E  D084               	goto	u12760
  4773  012C30                     l2475:
  4774  012C30  C075  FFF6         	movff	printf@f,tblptrl
  4775  012C34  C076  FFF7         	movff	printf@f+1,tblptrh
  4776  012C38  0100               	movlb	0	; () banked
  4777  012C3A  4B75               	infsnz	printf@f& (0+255),f,b
  4778  012C3C  2B76               	incf	(printf@f+1)& (0+255),f,b
  4779  012C3E                     	if	0	;tblptru may be non-zero
  4780  012C3E                     	endif
  4781  012C3E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4782  012C3E  0E00               	movlw	low (__mediumconst shr (0+16))
  4783  012C40  6EF8               	movwf	tblptru,c
  4784  012C42                     	endif
  4785  012C42  0008               	tblrd		*
  4786  012C44  CFF5 F082          	movff	tablat,printf@c
  4787  012C48  5182               	movf	printf@c& (0+255),w,b
  4788                           
  4789                           ; Switch size 1, requested type "space"
  4790                           ; Number of cases is 4, Range of values is 0 to 105
  4791                           ; switch strategies available:
  4792                           ; Name         Instructions Cycles
  4793                           ; simple_byte           13     7 (average)
  4794                           ;	Chosen strategy is simple_byte
  4795  012C4A  0A00               	xorlw	0	; case 0
  4796  012C4C  B4D8               	btfsc	status,2,c
  4797  012C4E  0012               	return	
  4798  012C50  0A63               	xorlw	99	; case 99
  4799  012C52  B4D8               	btfsc	status,2,c
  4800  012C54  D7DF               	goto	l2481
  4801  012C56  0A07               	xorlw	7	; case 100
  4802  012C58  B4D8               	btfsc	status,2,c
  4803  012C5A  D003               	goto	l2480
  4804  012C5C  0A0D               	xorlw	13	; case 105
  4805  012C5E  A4D8               	btfss	status,2,c
  4806  012C60  D7E3               	goto	l2482
  4807  012C62                     l2480:
  4808                           
  4809                           ;doprnt.c: 1253: {
  4810                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4811                           
  4812                           ; BSR set to: 0
  4813  012C62  C07E  FFD9         	movff	printf@ap,fsr2l
  4814  012C66  C07F  FFDA         	movff	printf@ap+1,fsr2h
  4815  012C6A  CFDE F080          	movff	postinc2,printf@val
  4816  012C6E  CFDD F081          	movff	postdec2,printf@val+1
  4817  012C72  0E02               	movlw	2
  4818  012C74  0100               	movlb	0	; () banked
  4819  012C76  277E               	addwf	printf@ap& (0+255),f,b
  4820  012C78  0E00               	movlw	0
  4821  012C7A  237F               	addwfc	(printf@ap+1)& (0+255),f,b
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;doprnt.c: 1261: if((int)val < 0) {
  4825  012C7C  AF81               	btfss	(printf@val+1)& (0+255),7,b
  4826  012C7E  D006               	goto	l2483
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;doprnt.c: 1262: flag |= 0x03;
  4830  012C80  0E03               	movlw	3
  4831  012C82  137C               	iorwf	printf@flag& (0+255),f,b
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;doprnt.c: 1263: val = -val;
  4835  012C84  6D80               	negf	printf@val& (0+255),b
  4836  012C86  1F81               	comf	(printf@val+1)& (0+255),f,b
  4837  012C88  B0D8               	btfsc	status,0,c
  4838  012C8A  2B81               	incf	(printf@val+1)& (0+255),f,b
  4839  012C8C                     l2483:
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;doprnt.c: 1264: }
  4843                           ;doprnt.c: 1266: }
  4844                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4845                           
  4846                           ; BSR set to: 0
  4847  012C8C  0E01               	movlw	1
  4848  012C8E  6F82               	movwf	printf@c& (0+255),b
  4849  012C90                     l15365:
  4850                           
  4851                           ; BSR set to: 0
  4852  012C90  0E05               	movlw	5
  4853  012C92  1982               	xorwf	printf@c& (0+255),w,b
  4854  012C94  B4D8               	btfsc	status,2,c
  4855  012C96  D015               	goto	u12740
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;doprnt.c: 1306: if(val < dpowers[c])
  4859                           
  4860                           ; BSR set to: 0
  4861                           
  4862                           ; BSR set to: 0
  4863  012C98  5182               	movf	printf@c& (0+255),w,b
  4864  012C9A  0D02               	mullw	2
  4865  012C9C  0EEF               	movlw	low _dpowers
  4866  012C9E  24F3               	addwf	prodl,w,c
  4867  012CA0  6EF6               	movwf	tblptrl,c
  4868  012CA2  0EFB               	movlw	high _dpowers
  4869  012CA4  20F4               	addwfc	prodh,w,c
  4870  012CA6  6EF7               	movwf	tblptrh,c
  4871  012CA8                     	if	1	;There are 3 active tblptr bytes
  4872  012CA8  6AF8               	clrf	tblptru,c
  4873  012CAA  0E00               	movlw	low (__mediumconst shr (0+16))
  4874  012CAC  22F8               	addwfc	tblptru,f,c
  4875  012CAE                     	endif
  4876  012CAE  0009               	tblrd		*+
  4877  012CB0  50F5               	movf	tablat,w,c
  4878  012CB2  5D80               	subwf	printf@val& (0+255),w,b
  4879  012CB4  0009               	tblrd		*+
  4880  012CB6  50F5               	movf	tablat,w,c
  4881  012CB8  5981               	subwfb	(printf@val+1)& (0+255),w,b
  4882  012CBA  A0D8               	btfss	status,0,c
  4883  012CBC  D002               	goto	u12740
  4884                           
  4885                           ; BSR set to: 0
  4886                           
  4887                           ; BSR set to: 0
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;doprnt.c: 1307: break;
  4891  012CBE  2B82               	incf	printf@c& (0+255),f,b
  4892  012CC0  D7E7               	goto	l15365
  4893  012CC2                     u12740:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;doprnt.c: 1422: {
  4897                           ;doprnt.c: 1438: if(flag & 0x03)
  4898                           
  4899                           ; BSR set to: 0
  4900  012CC2  C07C  F07B         	movff	printf@flag,??_printf
  4901  012CC6  0E03               	movlw	3
  4902  012CC8  177B               	andwf	??_printf& (0+255),f,b
  4903  012CCA  B4D8               	btfsc	status,2,c
  4904  012CCC  D003               	goto	l2487
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;doprnt.c: 1439: (putch('-') );
  4908  012CCE  0E2D               	movlw	45
  4909  012CD0  EC7F  F0AD         	call	_putch
  4910  012CD4                     l2487:
  4911                           
  4912                           ;doprnt.c: 1469: }
  4913                           ;doprnt.c: 1472: prec = c;
  4914  012CD4  C082  F07D         	movff	printf@c,printf@prec
  4915                           
  4916                           ;doprnt.c: 1474: while(prec--) {
  4917  012CD8  D02A               	goto	l2488
  4918  012CDA                     
  4919                           ;doprnt.c: 1478: {
  4920                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4921  012CDA  0100               	movlb	0	; () banked
  4922  012CDC  517D               	movf	printf@prec& (0+255),w,b
  4923  012CDE  0D02               	mullw	2
  4924  012CE0  0EEF               	movlw	low _dpowers
  4925  012CE2  24F3               	addwf	prodl,w,c
  4926  012CE4  6EF6               	movwf	tblptrl,c
  4927  012CE6  0EFB               	movlw	high _dpowers
  4928  012CE8  20F4               	addwfc	prodh,w,c
  4929  012CEA  6EF7               	movwf	tblptrh,c
  4930  012CEC                     	if	1	;There are 3 active tblptr bytes
  4931  012CEC  6AF8               	clrf	tblptru,c
  4932  012CEE  0E00               	movlw	low (__mediumconst shr (0+16))
  4933  012CF0  22F8               	addwfc	tblptru,f,c
  4934  012CF2                     	endif
  4935  012CF2  0009               	tblrd		*+
  4936  012CF4  CFF5 F062          	movff	tablat,___lwdiv@divisor
  4937  012CF8  000A               	tblrd		*-
  4938  012CFA  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  4939  012CFE  C080  F060         	movff	printf@val,___lwdiv@dividend
  4940  012D02  C081  F061         	movff	printf@val+1,___lwdiv@dividend+1
  4941  012D06  ECCB  F0A7         	call	___lwdiv	;wreg free
  4942  012D0A  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  4943  012D0E  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  4944  012D12  0E00               	movlw	0
  4945  012D14  0100               	movlb	0	; () banked
  4946  012D16  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4947  012D18  0E0A               	movlw	10
  4948  012D1A  6F69               	movwf	___lwmod@divisor& (0+255),b
  4949  012D1C  EC96  F0A9         	call	___lwmod	;wreg free
  4950  012D20  0100               	movlb	0	; () banked
  4951  012D22  5167               	movf	?___lwmod& (0+255),w,b
  4952  012D24  0F30               	addlw	48
  4953  012D26  6F82               	movwf	printf@c& (0+255),b
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;doprnt.c: 1523: }
  4957                           ;doprnt.c: 1524: (putch(c) );
  4958  012D28  5182               	movf	printf@c& (0+255),w,b
  4959  012D2A  EC7F  F0AD         	call	_putch
  4960  012D2E                     l2488:
  4961  012D2E  0100               	movlb	0	; () banked
  4962  012D30  077D               	decf	printf@prec& (0+255),f,b
  4963  012D32  297D               	incf	printf@prec& (0+255),w,b
  4964  012D34  A4D8               	btfss	status,2,c
  4965  012D36  D7D1               	goto	l2489
  4966  012D38                     u12760:
  4967                           
  4968                           ; BSR set to: 0
  4969                           
  4970                           ; BSR set to: 0
  4971  012D38  C075  FFF6         	movff	printf@f,tblptrl
  4972  012D3C  C076  FFF7         	movff	printf@f+1,tblptrh
  4973  012D40  0100               	movlb	0	; () banked
  4974  012D42  4B75               	infsnz	printf@f& (0+255),f,b
  4975  012D44  2B76               	incf	(printf@f+1)& (0+255),f,b
  4976  012D46                     	if	0	;tblptru may be non-zero
  4977  012D46                     	endif
  4978  012D46                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4979  012D46  0E00               	movlw	low (__mediumconst shr (0+16))
  4980  012D48  6EF8               	movwf	tblptru,c
  4981  012D4A                     	endif
  4982  012D4A  0008               	tblrd		*
  4983  012D4C  CFF5 F082          	movff	tablat,printf@c
  4984  012D50  5182               	movf	printf@c& (0+255),w,b
  4985  012D52  B4D8               	btfsc	status,2,c
  4986  012D54  0012               	return	
  4987  012D56  D752               	goto	l2473
  4988  012D58                     __end_of_printf:
  4989                           	opt stack 0
  4990                           tosu	equ	0xFFF
  4991                           tosh	equ	0xFFE
  4992                           tosl	equ	0xFFD
  4993                           pclath	equ	0xFFA
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           postinc0	equ	0xFEE
  5001                           wreg	equ	0xFE8
  5002                           postdec1	equ	0xFE5
  5003                           fsr1h	equ	0xFE2
  5004                           fsr1l	equ	0xFE1
  5005                           indf2	equ	0xFDF
  5006                           postinc2	equ	0xFDE
  5007                           postdec2	equ	0xFDD
  5008                           fsr2h	equ	0xFDA
  5009                           fsr2l	equ	0xFD9
  5010                           status	equ	0xFD8
  5011                           
  5012 ;; *************** function _putch *****************
  5013 ;; Defined at:
  5014 ;;		line 454 in file "Library/Console.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  c               1    wreg     unsigned char 
  5017 ;; Auto vars:     Size  Location     Type
  5018 ;;  c               1   20[BANK0 ] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;                  1    wreg      void 
  5021 ;; Registers used:
  5022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;Total ram usage:        1 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; Hardware stack levels required when called:   11
  5035 ;; This function calls:
  5036 ;;		_Console_PrintChar
  5037 ;; This function is called by:
  5038 ;;		_printf
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           	psect	text3
  5043  015AFE                     __ptext3:
  5044                           	opt stack 0
  5045  015AFE                     _putch:
  5046                           	opt stack 18
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;incstack = 0
  5050                           ;putch@c stored from wreg
  5051  015AFE  0100               	movlb	0	; () banked
  5052  015B00  6F74               	movwf	putch@c& (0+255),b
  5053                           
  5054                           ;Console.c: 456: Console_PrintChar(c);
  5055  015B02  0100               	movlb	0	; () banked
  5056  015B04  5174               	movf	putch@c& (0+255),w,b
  5057  015B06  EC56  F097         	call	_Console_PrintChar
  5058  015B0A  0012               	return		;funcret
  5059  015B0C                     __end_of_putch:
  5060                           	opt stack 0
  5061                           tosu	equ	0xFFF
  5062                           tosh	equ	0xFFE
  5063                           tosl	equ	0xFFD
  5064                           pclath	equ	0xFFA
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           postinc0	equ	0xFEE
  5072                           wreg	equ	0xFE8
  5073                           postdec1	equ	0xFE5
  5074                           fsr1h	equ	0xFE2
  5075                           fsr1l	equ	0xFE1
  5076                           indf2	equ	0xFDF
  5077                           postinc2	equ	0xFDE
  5078                           postdec2	equ	0xFDD
  5079                           fsr2h	equ	0xFDA
  5080                           fsr2l	equ	0xFD9
  5081                           status	equ	0xFD8
  5082                           
  5083 ;; *************** function _Console_PrintChar *****************
  5084 ;; Defined at:
  5085 ;;		line 322 in file "Library/Console.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  pInput          1    wreg     unsigned char 
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;  pInput          1   19[BANK0 ] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  1    wreg      void 
  5092 ;; Registers used:
  5093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;Total ram usage:        4 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:   10
  5106 ;; This function calls:
  5107 ;;		_Console_Backspace
  5108 ;;		_Console_FormFeed
  5109 ;;		_Console_IncrementCursor
  5110 ;;		_Console_NewLine
  5111 ;;		_Console_ResetCursor
  5112 ;;		_Console_Tab
  5113 ;; This function is called by:
  5114 ;;		_putch
  5115 ;;		_Console_PrintString
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           	psect	text4
  5120  012EAC                     __ptext4:
  5121                           	opt stack 0
  5122  012EAC                     _Console_PrintChar:
  5123                           	opt stack 18
  5124                           
  5125                           ;incstack = 0
  5126                           ;Console_PrintChar@pInput stored from wreg
  5127  012EAC  0100               	movlb	0	; () banked
  5128  012EAE  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  5129                           
  5130                           ;Console.c: 324: switch(pInput)
  5131  012EB0  D08A               	goto	l1036
  5132  012EB2                     
  5133                           ;Console.c: 327: case '\n':
  5134                           ;Console.c: 328: Console_NewLine();
  5135  012EB2  EC56  F0A3         	call	_Console_NewLine	;wreg free
  5136                           
  5137                           ;Console.c: 329: return;
  5138  012EB6  0012               	return	
  5139  012EB8                     
  5140                           ;Console.c: 331: Console_Backspace();
  5141  012EB8  EC1E  F0A8         	call	_Console_Backspace	;wreg free
  5142                           
  5143                           ;Console.c: 332: return;
  5144  012EBC  0012               	return	
  5145  012EBE                     
  5146                           ;Console.c: 334: Console_FormFeed();
  5147  012EBE  ECF6  F0A4         	call	_Console_FormFeed	;wreg free
  5148                           
  5149                           ;Console.c: 335: return;
  5150  012EC2  0012               	return	
  5151  012EC4                     
  5152                           ;Console.c: 337: Console_Tab();
  5153  012EC4  ECEC  F0A0         	call	_Console_Tab	;wreg free
  5154                           
  5155                           ;Console.c: 338: return;
  5156  012EC8  0012               	return	
  5157  012ECA                     
  5158                           ;Console.c: 340: Console_IncrementCursor();
  5159  012ECA  EC23  F0A7         	call	_Console_IncrementCursor	;wreg free
  5160                           
  5161                           ;Console.c: 341: return;
  5162  012ECE  0012               	return	
  5163  012ED0                     
  5164                           ;Console.c: 343: Console_ResetCursor();
  5165  012ED0  ECA8  F0AC         	call	_Console_ResetCursor	;wreg free
  5166                           
  5167                           ;Console.c: 344: return;
  5168  012ED4  0012               	return	
  5169  012ED6                     
  5170                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  5171                           
  5172                           ;Console.c: 349: default:
  5173  012ED6  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  5174  012EDA  0E7F               	movlw	127
  5175  012EDC  0100               	movlb	0	; () banked
  5176  012EDE  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  5177  012EE0  51FF               	movf	_lBufferY& (0+255),w,b
  5178  012EE2  0D14               	mullw	20
  5179  012EE4  0E36               	movlw	low _lBuffer
  5180  012EE6  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5181  012EE8  0E03               	movlw	high _lBuffer
  5182  012EEA  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  5183  012EEC  50F3               	movf	prodl,w,c
  5184  012EEE  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  5185  012EF0  50F4               	movf	prodh,w,c
  5186  012EF2  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  5187  012EF4  5045               	movf	_lBufferX,w,c
  5188  012EF6  0D01               	mullw	1
  5189  012EF8  50F3               	movf	prodl,w,c
  5190  012EFA  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  5191  012EFC  6ED9               	movwf	fsr2l,c
  5192  012EFE  50F4               	movf	prodh,w,c
  5193  012F00  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  5194  012F02  6EDA               	movwf	fsr2h,c
  5195  012F04  50DF               	movf	indf2,w,c
  5196  012F06  0B7F               	andlw	127
  5197  012F08  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  5198  012F0A  B4D8               	btfsc	status,2,c
  5199  012F0C  D023               	goto	l1047
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;Console.c: 351: {
  5203                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  5204  012F0E  0E01               	movlw	1
  5205  012F10  6E4E               	movwf	_change,c
  5206                           
  5207                           ; BSR set to: 0
  5208  012F12  51FF               	movf	_lBufferY& (0+255),w,b
  5209  012F14  0D14               	mullw	20
  5210  012F16  0E36               	movlw	low _lBuffer
  5211  012F18  6F70               	movwf	??_Console_PrintChar& (0+255),b
  5212  012F1A  0E03               	movlw	high _lBuffer
  5213  012F1C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5214  012F1E  50F3               	movf	prodl,w,c
  5215  012F20  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  5216  012F22  50F4               	movf	prodh,w,c
  5217  012F24  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  5218  012F26  5045               	movf	_lBufferX,w,c
  5219  012F28  0D01               	mullw	1
  5220  012F2A  50F3               	movf	prodl,w,c
  5221  012F2C  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  5222  012F2E  6ED9               	movwf	fsr2l,c
  5223  012F30  50F4               	movf	prodh,w,c
  5224  012F32  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  5225  012F34  6EDA               	movwf	fsr2h,c
  5226  012F36  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  5227  012F38  0980               	iorlw	128
  5228  012F3A  6EDF               	movwf	indf2,c
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  5232  012F3C  51FF               	movf	_lBufferY& (0+255),w,b
  5233  012F3E  0D02               	mullw	2
  5234  012F40  0E28               	movlw	low _lCBuffer
  5235  012F42  24F3               	addwf	prodl,w,c
  5236  012F44  6ED9               	movwf	fsr2l,c
  5237  012F46  0E02               	movlw	high _lCBuffer
  5238  012F48  20F4               	addwfc	prodh,w,c
  5239  012F4A  6EDA               	movwf	fsr2h,c
  5240  012F4C  C1F5  FFDE         	movff	_gForecolour,postinc2
  5241  012F50  C1F6  FFDD         	movff	_gForecolour+1,postdec2
  5242  012F54                     l1047:
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;Console.c: 354: }
  5246                           ;Console.c: 368: if(Console_IncrementCursor())
  5247                           
  5248                           ; BSR set to: 0
  5249  012F54  EC23  F0A7         	call	_Console_IncrementCursor	;wreg free
  5250  012F58  0900               	iorlw	0
  5251  012F5A  B4D8               	btfsc	status,2,c
  5252  012F5C  0012               	return	
  5253                           
  5254                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  5255  012F5E  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  5256  012F62  0E7F               	movlw	127
  5257  012F64  0100               	movlb	0	; () banked
  5258  012F66  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  5259  012F68  51FF               	movf	_lBufferY& (0+255),w,b
  5260  012F6A  0D14               	mullw	20
  5261  012F6C  0E36               	movlw	low _lBuffer
  5262  012F6E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5263  012F70  0E03               	movlw	high _lBuffer
  5264  012F72  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  5265  012F74  50F3               	movf	prodl,w,c
  5266  012F76  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  5267  012F78  50F4               	movf	prodh,w,c
  5268  012F7A  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  5269  012F7C  5045               	movf	_lBufferX,w,c
  5270  012F7E  0D01               	mullw	1
  5271  012F80  50F3               	movf	prodl,w,c
  5272  012F82  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  5273  012F84  6ED9               	movwf	fsr2l,c
  5274  012F86  50F4               	movf	prodh,w,c
  5275  012F88  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  5276  012F8A  6EDA               	movwf	fsr2h,c
  5277  012F8C  50DF               	movf	indf2,w,c
  5278  012F8E  0B7F               	andlw	127
  5279  012F90  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  5280  012F92  B4D8               	btfsc	status,2,c
  5281  012F94  0012               	return	
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  5285  012F96  0E01               	movlw	1
  5286  012F98  6E4E               	movwf	_change,c
  5287                           
  5288                           ; BSR set to: 0
  5289  012F9A  51FF               	movf	_lBufferY& (0+255),w,b
  5290  012F9C  0D14               	mullw	20
  5291  012F9E  0E36               	movlw	low _lBuffer
  5292  012FA0  6F70               	movwf	??_Console_PrintChar& (0+255),b
  5293  012FA2  0E03               	movlw	high _lBuffer
  5294  012FA4  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5295  012FA6  50F3               	movf	prodl,w,c
  5296  012FA8  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  5297  012FAA  50F4               	movf	prodh,w,c
  5298  012FAC  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  5299  012FAE  5045               	movf	_lBufferX,w,c
  5300  012FB0  0D01               	mullw	1
  5301  012FB2  50F3               	movf	prodl,w,c
  5302  012FB4  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  5303  012FB6  6ED9               	movwf	fsr2l,c
  5304  012FB8  50F4               	movf	prodh,w,c
  5305  012FBA  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  5306  012FBC  6EDA               	movwf	fsr2h,c
  5307  012FBE  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  5308  012FC0  0980               	iorlw	128
  5309  012FC2  6EDF               	movwf	indf2,c
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;Console.c: 372: };
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;Console.c: 371: return;
  5316                           
  5317                           ; BSR set to: 0
  5318                           
  5319                           ; BSR set to: 0
  5320  012FC4  0012               	return	
  5321  012FC6                     l1036:
  5322                           
  5323                           ; BSR set to: 0
  5324  012FC6  0100               	movlb	0	; () banked
  5325  012FC8  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  5326                           
  5327                           ; Switch size 1, requested type "space"
  5328                           ; Number of cases is 8, Range of values is 7 to 35
  5329                           ; switch strategies available:
  5330                           ; Name         Instructions Cycles
  5331                           ; simple_byte           25    13 (average)
  5332                           ;	Chosen strategy is simple_byte
  5333  012FCA  0A07               	xorlw	7	; case 7
  5334  012FCC  B4D8               	btfsc	status,2,c
  5335  012FCE  D77D               	goto	l1043
  5336  012FD0  0A0F               	xorlw	15	; case 8
  5337  012FD2  B4D8               	btfsc	status,2,c
  5338  012FD4  D771               	goto	l1040
  5339  012FD6  0A01               	xorlw	1	; case 9
  5340  012FD8  B4D8               	btfsc	status,2,c
  5341  012FDA  D774               	goto	l1042
  5342  012FDC  0A03               	xorlw	3	; case 10
  5343  012FDE  B4D8               	btfsc	status,2,c
  5344  012FE0  D768               	goto	l1037
  5345  012FE2  0A06               	xorlw	6	; case 12
  5346  012FE4  B4D8               	btfsc	status,2,c
  5347  012FE6  D76B               	goto	l1041
  5348  012FE8  0A01               	xorlw	1	; case 13
  5349  012FEA  B4D8               	btfsc	status,2,c
  5350  012FEC  D762               	goto	l1037
  5351  012FEE  0A2D               	xorlw	45	; case 32
  5352  012FF0  B4D8               	btfsc	status,2,c
  5353  012FF2  D771               	goto	l1045
  5354  012FF4  0A03               	xorlw	3	; case 35
  5355  012FF6  B4D8               	btfsc	status,2,c
  5356  012FF8  D76B               	goto	l1044
  5357  012FFA  D76D               	goto	l1045
  5358  012FFC                     __end_of_Console_PrintChar:
  5359                           	opt stack 0
  5360                           tosu	equ	0xFFF
  5361                           tosh	equ	0xFFE
  5362                           tosl	equ	0xFFD
  5363                           pclath	equ	0xFFA
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           prodh	equ	0xFF4
  5369                           prodl	equ	0xFF3
  5370                           postinc0	equ	0xFEE
  5371                           wreg	equ	0xFE8
  5372                           postdec1	equ	0xFE5
  5373                           fsr1h	equ	0xFE2
  5374                           fsr1l	equ	0xFE1
  5375                           indf2	equ	0xFDF
  5376                           postinc2	equ	0xFDE
  5377                           postdec2	equ	0xFDD
  5378                           fsr2h	equ	0xFDA
  5379                           fsr2l	equ	0xFD9
  5380                           status	equ	0xFD8
  5381                           
  5382 ;; *************** function _Console_Tab *****************
  5383 ;; Defined at:
  5384 ;;		line 260 in file "Library/Console.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  c               1   15[BANK0 ] unsigned char 
  5389 ;;  i               1   14[BANK0 ] unsigned char 
  5390 ;;  t               1   13[BANK0 ] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5401 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5402 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;Total ram usage:        8 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    9
  5407 ;; This function calls:
  5408 ;;		_Console_ClearCursor
  5409 ;;		_Console_IncrementCursor
  5410 ;;		___awdiv
  5411 ;; This function is called by:
  5412 ;;		_Console_PrintChar
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text5
  5417  0141D8                     __ptext5:
  5418                           	opt stack 0
  5419  0141D8                     _Console_Tab:
  5420                           	opt stack 18
  5421                           
  5422                           ;Console.c: 262: UINT8 i = 0;
  5423                           
  5424                           ;incstack = 0
  5425  0141D8  0E00               	movlw	0
  5426  0141DA  0100               	movlb	0	; () banked
  5427  0141DC  6F6E               	movwf	Console_Tab@i& (0+255),b
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  5431  0141DE  0EFA               	movlw	250
  5432  0141E0  2447               	addwf	_gCursor,w,c
  5433  0141E2  6F60               	movwf	___awdiv@dividend& (0+255),b
  5434  0141E4  0EFF               	movlw	255
  5435  0141E6  2048               	addwfc	_gCursor+1,w,c
  5436  0141E8  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  5437  0141EA  0E00               	movlw	0
  5438  0141EC  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5439  0141EE  0E06               	movlw	6
  5440  0141F0  6F62               	movwf	___awdiv@divisor& (0+255),b
  5441  0141F2  EC92  F0A2         	call	___awdiv	;wreg free
  5442  0141F6  0100               	movlb	0	; () banked
  5443  0141F8  5160               	movf	?___awdiv& (0+255),w,b
  5444  0141FA  6F6F               	movwf	Console_Tab@c& (0+255),b
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;Console.c: 264: UINT8 t = c/4;
  5448  0141FC  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  5449  014200  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  5450  014202  0E00               	movlw	0
  5451  014204  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5452  014206  0E04               	movlw	4
  5453  014208  6F62               	movwf	___awdiv@divisor& (0+255),b
  5454  01420A  EC92  F0A2         	call	___awdiv	;wreg free
  5455  01420E  0100               	movlb	0	; () banked
  5456  014210  5160               	movf	?___awdiv& (0+255),w,b
  5457  014212  6F6D               	movwf	Console_Tab@t& (0+255),b
  5458                           
  5459                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  5460  014214  0E00               	movlw	0
  5461  014216  6F6E               	movwf	Console_Tab@i& (0+255),b
  5462  014218  D006               	goto	l1009
  5463  01421A                     
  5464                           ; BSR set to: 0
  5465                           ;Console.c: 266: {
  5466                           ;Console.c: 267: Console_ClearCursor();
  5467                           
  5468                           ; BSR set to: 0
  5469  01421A  EC31  F0AB         	call	_Console_ClearCursor	;wreg free
  5470                           
  5471                           ;Console.c: 268: Console_IncrementCursor();
  5472  01421E  EC23  F0A7         	call	_Console_IncrementCursor	;wreg free
  5473  014222  0100               	movlb	0	; () banked
  5474  014224  2B6E               	incf	Console_Tab@i& (0+255),f,b
  5475  014226                     l1009:
  5476                           
  5477                           ; BSR set to: 0
  5478                           
  5479                           ; BSR set to: 0
  5480  014226  516D               	movf	Console_Tab@t& (0+255),w,b
  5481  014228  0D04               	mullw	4
  5482  01422A  1EF3               	comf	prodl,f,c
  5483  01422C  1EF4               	comf	prodh,f,c
  5484  01422E  4AF3               	infsnz	prodl,f,c
  5485  014230  2AF4               	incf	prodh,f,c
  5486  014232  516F               	movf	Console_Tab@c& (0+255),w,b
  5487  014234  6F68               	movwf	??_Console_Tab& (0+255),b
  5488  014236  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  5489  014238  50F3               	movf	prodl,w,c
  5490  01423A  2768               	addwf	??_Console_Tab& (0+255),f,b
  5491  01423C  50F4               	movf	prodh,w,c
  5492  01423E  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5493  014240  1F68               	comf	??_Console_Tab& (0+255),f,b
  5494  014242  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  5495  014244  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  5496  014246  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  5497  014248  0E04               	movlw	4
  5498  01424A  2768               	addwf	??_Console_Tab& (0+255),f,b
  5499  01424C  0E00               	movlw	0
  5500  01424E  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5501  014250  516E               	movf	Console_Tab@i& (0+255),w,b
  5502  014252  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  5503  014254  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  5504  014256  5168               	movf	??_Console_Tab& (0+255),w,b
  5505  014258  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  5506  01425A  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  5507  01425C  0A80               	xorlw	128
  5508  01425E  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  5509  014260  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  5510  014262  0A80               	xorlw	128
  5511  014264  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  5512  014266  B0D8               	btfsc	status,0,c
  5513  014268  0012               	return	
  5514  01426A  D7D7               	goto	l1010
  5515  01426C                     __end_of_Console_Tab:
  5516                           	opt stack 0
  5517                           tosu	equ	0xFFF
  5518                           tosh	equ	0xFFE
  5519                           tosl	equ	0xFFD
  5520                           pclath	equ	0xFFA
  5521                           tblptru	equ	0xFF8
  5522                           tblptrh	equ	0xFF7
  5523                           tblptrl	equ	0xFF6
  5524                           tablat	equ	0xFF5
  5525                           prodh	equ	0xFF4
  5526                           prodl	equ	0xFF3
  5527                           postinc0	equ	0xFEE
  5528                           wreg	equ	0xFE8
  5529                           postdec1	equ	0xFE5
  5530                           fsr1h	equ	0xFE2
  5531                           fsr1l	equ	0xFE1
  5532                           indf2	equ	0xFDF
  5533                           postinc2	equ	0xFDE
  5534                           postdec2	equ	0xFDD
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function _Console_IncrementCursor *****************
  5540 ;; Defined at:
  5541 ;;		line 243 in file "Library/Console.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;		None
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      unsigned char 
  5548 ;; Registers used:
  5549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;Total ram usage:        2 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:    8
  5562 ;; This function calls:
  5563 ;;		_Console_FormFeed
  5564 ;;		_Console_NewLine
  5565 ;; This function is called by:
  5566 ;;		_Console_Tab
  5567 ;;		_Console_PrintChar
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text6
  5572  014E46                     __ptext6:
  5573                           	opt stack 0
  5574  014E46                     _Console_IncrementCursor:
  5575                           	opt stack 18
  5576                           
  5577                           ;Console.c: 246: lBufferX += 1;
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;incstack = 0
  5581  014E46  2A45               	incf	_lBufferX,f,c
  5582                           
  5583                           ;Console.c: 248: gCursor.x += 6;
  5584  014E48  0E06               	movlw	6
  5585  014E4A  2647               	addwf	_gCursor,f,c
  5586  014E4C  0E00               	movlw	0
  5587  014E4E  2248               	addwfc	_gCursor+1,f,c
  5588                           
  5589                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5590  014E50  0E06               	movlw	6
  5591  014E52  2447               	addwf	_gCursor,w,c
  5592  014E54  0100               	movlb	0	; () banked
  5593  014E56  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  5594  014E58  0E00               	movlw	0
  5595  014E5A  2048               	addwfc	_gCursor+1,w,c
  5596  014E5C  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5597  014E5E  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5598  014E60  D007               	goto	l1004
  5599  014E62  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5600  014E64  E103               	bnz	u10190
  5601  014E66  0E80               	movlw	128
  5602  014E68  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5603  014E6A  B0D8               	btfsc	status,0,c
  5604  014E6C                     u10190:
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;Console.c: 250: Console_NewLine();
  5608  014E6C  EC56  F0A3         	call	_Console_NewLine	;wreg free
  5609  014E70                     l1004:
  5610                           
  5611                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5612  014E70  0E08               	movlw	8
  5613  014E72  2449               	addwf	_gCursor+2,w,c
  5614  014E74  0100               	movlb	0	; () banked
  5615  014E76  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  5616  014E78  0E00               	movlw	0
  5617  014E7A  204A               	addwfc	_gCursor+3,w,c
  5618  014E7C  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5619  014E7E  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5620  014E80  D00A               	goto	l1005
  5621  014E82  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5622  014E84  E104               	bnz	u10200
  5623  014E86  0E80               	movlw	128
  5624  014E88  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5625  014E8A  A0D8               	btfss	status,0,c
  5626  014E8C  D004               	goto	l1005
  5627  014E8E                     u10200:
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;Console.c: 252: {
  5631                           ;Console.c: 253: Console_FormFeed();
  5632  014E8E  ECF6  F0A4         	call	_Console_FormFeed	;wreg free
  5633                           
  5634                           ;Console.c: 254: return 1;
  5635  014E92  0E01               	movlw	1
  5636  014E94  0012               	return	
  5637  014E96                     l1005:
  5638                           
  5639                           ;Console.c: 255: }
  5640                           ;Console.c: 257: return 0;
  5641  014E96  0E00               	movlw	0
  5642  014E98  0012               	return	
  5643  014E9A                     __end_of_Console_IncrementCursor:
  5644                           	opt stack 0
  5645                           tosu	equ	0xFFF
  5646                           tosh	equ	0xFFE
  5647                           tosl	equ	0xFFD
  5648                           pclath	equ	0xFFA
  5649                           tblptru	equ	0xFF8
  5650                           tblptrh	equ	0xFF7
  5651                           tblptrl	equ	0xFF6
  5652                           tablat	equ	0xFF5
  5653                           prodh	equ	0xFF4
  5654                           prodl	equ	0xFF3
  5655                           postinc0	equ	0xFEE
  5656                           wreg	equ	0xFE8
  5657                           postdec1	equ	0xFE5
  5658                           fsr1h	equ	0xFE2
  5659                           fsr1l	equ	0xFE1
  5660                           indf2	equ	0xFDF
  5661                           postinc2	equ	0xFDE
  5662                           postdec2	equ	0xFDD
  5663                           fsr2h	equ	0xFDA
  5664                           fsr2l	equ	0xFD9
  5665                           status	equ	0xFD8
  5666                           
  5667 ;; *************** function _Console_NewLine *****************
  5668 ;; Defined at:
  5669 ;;		line 175 in file "Library/Console.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;		None
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  1    wreg      void 
  5676 ;; Registers used:
  5677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;Total ram usage:        2 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    7
  5690 ;; This function calls:
  5691 ;;		Nothing
  5692 ;; This function is called by:
  5693 ;;		_Console_IncrementCursor
  5694 ;;		_Console_PrintChar
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           	psect	text7
  5699  0146AC                     __ptext7:
  5700                           	opt stack 0
  5701  0146AC                     _Console_NewLine:
  5702                           	opt stack 18
  5703                           
  5704                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5705                           
  5706                           ;incstack = 0
  5707  0146AC  D02D               	goto	l983
  5708  0146AE                     
  5709                           ;Console.c: 179: {
  5710                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5711  0146AE  0100               	movlb	0	; () banked
  5712  0146B0  51FF               	movf	_lBufferY& (0+255),w,b
  5713  0146B2  0D14               	mullw	20
  5714  0146B4  0E36               	movlw	low _lBuffer
  5715  0146B6  6F60               	movwf	??_Console_NewLine& (0+255),b
  5716  0146B8  0E03               	movlw	high _lBuffer
  5717  0146BA  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  5718  0146BC  50F3               	movf	prodl,w,c
  5719  0146BE  2760               	addwf	??_Console_NewLine& (0+255),f,b
  5720  0146C0  50F4               	movf	prodh,w,c
  5721  0146C2  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5722  0146C4  5045               	movf	_lBufferX,w,c
  5723  0146C6  0D01               	mullw	1
  5724  0146C8  50F3               	movf	prodl,w,c
  5725  0146CA  2560               	addwf	??_Console_NewLine& (0+255),w,b
  5726  0146CC  6ED9               	movwf	fsr2l,c
  5727  0146CE  50F4               	movf	prodh,w,c
  5728  0146D0  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5729  0146D2  6EDA               	movwf	fsr2h,c
  5730  0146D4  50DF               	movf	indf2,w,c
  5731  0146D6  B4D8               	btfsc	status,2,c
  5732  0146D8  D016               	goto	l985
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5736  0146DA  0E01               	movlw	1
  5737  0146DC  6E4E               	movwf	_change,c
  5738                           
  5739                           ; BSR set to: 0
  5740  0146DE  51FF               	movf	_lBufferY& (0+255),w,b
  5741  0146E0  0D14               	mullw	20
  5742  0146E2  0E36               	movlw	low _lBuffer
  5743  0146E4  6F60               	movwf	??_Console_NewLine& (0+255),b
  5744  0146E6  0E03               	movlw	high _lBuffer
  5745  0146E8  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  5746  0146EA  50F3               	movf	prodl,w,c
  5747  0146EC  2760               	addwf	??_Console_NewLine& (0+255),f,b
  5748  0146EE  50F4               	movf	prodh,w,c
  5749  0146F0  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5750  0146F2  5045               	movf	_lBufferX,w,c
  5751  0146F4  0D01               	mullw	1
  5752  0146F6  50F3               	movf	prodl,w,c
  5753  0146F8  2560               	addwf	??_Console_NewLine& (0+255),w,b
  5754  0146FA  6ED9               	movwf	fsr2l,c
  5755  0146FC  50F4               	movf	prodh,w,c
  5756  0146FE  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5757  014700  6EDA               	movwf	fsr2h,c
  5758  014702  0E80               	movlw	128
  5759  014704  6EDF               	movwf	indf2,c
  5760  014706                     l985:
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;Console.c: 182: lBufferX ++;
  5764                           
  5765                           ; BSR set to: 0
  5766  014706  2A45               	incf	_lBufferX,f,c
  5767  014708                     l983:
  5768                           
  5769                           ; BSR set to: 0
  5770  014708  0E13               	movlw	19
  5771  01470A  6445               	cpfsgt	_lBufferX,c
  5772  01470C  D7D0               	goto	l984
  5773                           
  5774                           ;Console.c: 183: }
  5775                           ;Console.c: 185: lBufferX = 0;
  5776  01470E  0E00               	movlw	0
  5777  014710  6E45               	movwf	_lBufferX,c
  5778                           
  5779                           ;Console.c: 186: lBufferY ++;
  5780  014712  0100               	movlb	0	; () banked
  5781  014714  2BFF               	incf	_lBufferY& (0+255),f,b
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;Console.c: 188: gCursor.y += 8;
  5785  014716  0E08               	movlw	8
  5786  014718  2649               	addwf	_gCursor+2,f,c
  5787  01471A  0E00               	movlw	0
  5788  01471C  224A               	addwfc	_gCursor+3,f,c
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;Console.c: 189: gCursor.x = 6;
  5792  01471E  0E00               	movlw	0
  5793  014720  6E48               	movwf	_gCursor+1,c
  5794  014722  0E06               	movlw	6
  5795  014724  6E47               	movwf	_gCursor,c
  5796                           
  5797                           ; BSR set to: 0
  5798  014726  0012               	return		;funcret
  5799  014728                     __end_of_Console_NewLine:
  5800                           	opt stack 0
  5801                           tosu	equ	0xFFF
  5802                           tosh	equ	0xFFE
  5803                           tosl	equ	0xFFD
  5804                           pclath	equ	0xFFA
  5805                           tblptru	equ	0xFF8
  5806                           tblptrh	equ	0xFF7
  5807                           tblptrl	equ	0xFF6
  5808                           tablat	equ	0xFF5
  5809                           prodh	equ	0xFF4
  5810                           prodl	equ	0xFF3
  5811                           postinc0	equ	0xFEE
  5812                           wreg	equ	0xFE8
  5813                           postdec1	equ	0xFE5
  5814                           fsr1h	equ	0xFE2
  5815                           fsr1l	equ	0xFE1
  5816                           indf2	equ	0xFDF
  5817                           postinc2	equ	0xFDE
  5818                           postdec2	equ	0xFDD
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function _Console_FormFeed *****************
  5824 ;; Defined at:
  5825 ;;		line 192 in file "Library/Console.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;		None
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  y               1    3[BANK0 ] unsigned char 
  5830 ;;  x               1    2[BANK0 ] unsigned char 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  1    wreg      void 
  5833 ;; Registers used:
  5834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;Total ram usage:        4 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    7
  5847 ;; This function calls:
  5848 ;;		Nothing
  5849 ;; This function is called by:
  5850 ;;		_Console_IncrementCursor
  5851 ;;		_Console_PrintChar
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text8
  5856  0149EC                     __ptext8:
  5857                           	opt stack 0
  5858  0149EC                     _Console_FormFeed:
  5859                           	opt stack 18
  5860                           
  5861                           ;Console.c: 195: lBufferX = 0;
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;incstack = 0
  5865  0149EC  0E00               	movlw	0
  5866  0149EE  6E45               	movwf	_lBufferX,c
  5867                           
  5868                           ;Console.c: 196: lBufferY = 0;
  5869  0149F0  0E00               	movlw	0
  5870  0149F2  0100               	movlb	0	; () banked
  5871  0149F4  6FFF               	movwf	_lBufferY& (0+255),b
  5872                           
  5873                           ;Console.c: 197: UINT8 x, y;
  5874                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5875  0149F6  0E00               	movlw	0
  5876  0149F8  6F63               	movwf	Console_FormFeed@y& (0+255),b
  5877  0149FA                     l12897:
  5878                           
  5879                           ; BSR set to: 0
  5880  0149FA  0E0E               	movlw	14
  5881  0149FC  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  5882  0149FE  D001               	goto	l990
  5883  014A00  D020               	goto	u10120
  5884  014A02                     l990:
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5888                           
  5889                           ; BSR set to: 0
  5890  014A02  0E00               	movlw	0
  5891  014A04  6F62               	movwf	Console_FormFeed@x& (0+255),b
  5892  014A06                     l12903:
  5893                           
  5894                           ; BSR set to: 0
  5895  014A06  0E13               	movlw	19
  5896  014A08  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  5897  014A0A  D001               	goto	l992
  5898  014A0C  D018               	goto	u10110
  5899  014A0E                     l992:
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5903                           
  5904                           ; BSR set to: 0
  5905  014A0E  0E01               	movlw	1
  5906  014A10  6E4E               	movwf	_change,c
  5907                           
  5908                           ; BSR set to: 0
  5909  014A12  5163               	movf	Console_FormFeed@y& (0+255),w,b
  5910  014A14  0D14               	mullw	20
  5911  014A16  0E36               	movlw	low _lBuffer
  5912  014A18  6F60               	movwf	??_Console_FormFeed& (0+255),b
  5913  014A1A  0E03               	movlw	high _lBuffer
  5914  014A1C  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5915  014A1E  50F3               	movf	prodl,w,c
  5916  014A20  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  5917  014A22  50F4               	movf	prodh,w,c
  5918  014A24  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5919  014A26  5162               	movf	Console_FormFeed@x& (0+255),w,b
  5920  014A28  0D01               	mullw	1
  5921  014A2A  50F3               	movf	prodl,w,c
  5922  014A2C  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  5923  014A2E  6ED9               	movwf	fsr2l,c
  5924  014A30  50F4               	movf	prodh,w,c
  5925  014A32  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5926  014A34  6EDA               	movwf	fsr2h,c
  5927  014A36  0E80               	movlw	128
  5928  014A38  6EDF               	movwf	indf2,c
  5929                           
  5930                           ; BSR set to: 0
  5931  014A3A  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  5932  014A3C  D7E4               	goto	l12903
  5933  014A3E                     u10110:
  5934                           
  5935                           ; BSR set to: 0
  5936                           
  5937                           ; BSR set to: 0
  5938  014A3E  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  5939  014A40  D7DC               	goto	l12897
  5940  014A42                     u10120:
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;Console.c: 204: clearall = 1;
  5944                           
  5945                           ; BSR set to: 0
  5946  014A42  0E01               	movlw	1
  5947  014A44  6E46               	movwf	_clearall,c
  5948                           
  5949                           ;Console.c: 205: gCursor.x = 6;
  5950  014A46  0E00               	movlw	0
  5951  014A48  6E48               	movwf	_gCursor+1,c
  5952  014A4A  0E06               	movlw	6
  5953  014A4C  6E47               	movwf	_gCursor,c
  5954                           
  5955                           ;Console.c: 206: gCursor.y = 6;
  5956  014A4E  0E00               	movlw	0
  5957  014A50  6E4A               	movwf	_gCursor+3,c
  5958  014A52  0E06               	movlw	6
  5959  014A54  6E49               	movwf	_gCursor+2,c
  5960                           
  5961                           ; BSR set to: 0
  5962  014A56  0012               	return		;funcret
  5963  014A58                     __end_of_Console_FormFeed:
  5964                           	opt stack 0
  5965                           tosu	equ	0xFFF
  5966                           tosh	equ	0xFFE
  5967                           tosl	equ	0xFFD
  5968                           pclath	equ	0xFFA
  5969                           tblptru	equ	0xFF8
  5970                           tblptrh	equ	0xFF7
  5971                           tblptrl	equ	0xFF6
  5972                           tablat	equ	0xFF5
  5973                           prodh	equ	0xFF4
  5974                           prodl	equ	0xFF3
  5975                           postinc0	equ	0xFEE
  5976                           wreg	equ	0xFE8
  5977                           postdec1	equ	0xFE5
  5978                           fsr1h	equ	0xFE2
  5979                           fsr1l	equ	0xFE1
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           postdec2	equ	0xFDD
  5983                           fsr2h	equ	0xFDA
  5984                           fsr2l	equ	0xFD9
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function _Console_ResetCursor *****************
  5988 ;; Defined at:
  5989 ;;		line 297 in file "Library/Console.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;		None
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;		None
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      void 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;Total ram usage:        0 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    7
  6010 ;; This function calls:
  6011 ;;		Nothing
  6012 ;; This function is called by:
  6013 ;;		_Console_PrintChar
  6014 ;; This function uses a non-reentrant model
  6015 ;;
  6016                           
  6017                           	psect	text9
  6018  015950                     __ptext9:
  6019                           	opt stack 0
  6020  015950                     _Console_ResetCursor:
  6021                           	opt stack 20
  6022                           
  6023                           ;Console.c: 299: gCursor.x = 6;
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;incstack = 0
  6027  015950  0E00               	movlw	0
  6028  015952  6E48               	movwf	_gCursor+1,c
  6029  015954  0E06               	movlw	6
  6030  015956  6E47               	movwf	_gCursor,c
  6031                           
  6032                           ;Console.c: 300: gCursor.y = 6;
  6033  015958  0E00               	movlw	0
  6034  01595A  6E4A               	movwf	_gCursor+3,c
  6035  01595C  0E06               	movlw	6
  6036  01595E  6E49               	movwf	_gCursor+2,c
  6037                           
  6038                           ;Console.c: 303: lBufferX = 0;
  6039  015960  0E00               	movlw	0
  6040  015962  6E45               	movwf	_lBufferX,c
  6041                           
  6042                           ;Console.c: 304: lBufferY = 0;
  6043  015964  0E00               	movlw	0
  6044  015966  0100               	movlb	0	; () banked
  6045  015968  6FFF               	movwf	_lBufferY& (0+255),b
  6046                           
  6047                           ; BSR set to: 0
  6048  01596A  0012               	return		;funcret
  6049  01596C                     __end_of_Console_ResetCursor:
  6050                           	opt stack 0
  6051                           tosu	equ	0xFFF
  6052                           tosh	equ	0xFFE
  6053                           tosl	equ	0xFFD
  6054                           pclath	equ	0xFFA
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           postinc0	equ	0xFEE
  6062                           wreg	equ	0xFE8
  6063                           postdec1	equ	0xFE5
  6064                           fsr1h	equ	0xFE2
  6065                           fsr1l	equ	0xFE1
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073 ;; *************** function _Console_Backspace *****************
  6074 ;; Defined at:
  6075 ;;		line 209 in file "Library/Console.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;		None
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;		None
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  1    wreg      void 
  6082 ;; Registers used:
  6083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;Total ram usage:        0 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    8
  6096 ;; This function calls:
  6097 ;;		_Console_ClearCursor
  6098 ;; This function is called by:
  6099 ;;		_Console_PrintChar
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           	psect	text10
  6104  01503C                     __ptext10:
  6105                           	opt stack 0
  6106  01503C                     _Console_Backspace:
  6107                           	opt stack 19
  6108                           
  6109                           ;Console.c: 211: if (lBufferX > 0)
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;incstack = 0
  6113  01503C  5045               	movf	_lBufferX,w,c
  6114  01503E  B4D8               	btfsc	status,2,c
  6115  015040  D006               	goto	l997
  6116                           
  6117                           ;Console.c: 212: {
  6118                           ;Console.c: 213: gCursor.x -= 6;
  6119  015042  0EFA               	movlw	250
  6120  015044  2647               	addwf	_gCursor,f,c
  6121  015046  0EFF               	movlw	255
  6122  015048  2248               	addwfc	_gCursor+1,f,c
  6123                           
  6124                           ;Console.c: 216: lBufferX --;
  6125  01504A  0645               	decf	_lBufferX,f,c
  6126                           
  6127                           ;Console.c: 218: }
  6128  01504C  D01C               	goto	l1000
  6129  01504E                     l997:
  6130                           
  6131                           ;Console.c: 219: else if (lBufferY > 0)
  6132  01504E  0100               	movlb	0	; () banked
  6133  015050  51FF               	movf	_lBufferY& (0+255),w,b
  6134  015052  B4D8               	btfsc	status,2,c
  6135  015054  D00C               	goto	l999
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;Console.c: 220: {
  6139                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  6140  015056  0E00               	movlw	0
  6141  015058  6E48               	movwf	_gCursor+1,c
  6142  01505A  0E72               	movlw	114
  6143  01505C  6E47               	movwf	_gCursor,c
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;Console.c: 222: gCursor.y -= 8;
  6147  01505E  0EF8               	movlw	248
  6148  015060  2649               	addwf	_gCursor+2,f,c
  6149  015062  0EFF               	movlw	255
  6150  015064  224A               	addwfc	_gCursor+3,f,c
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  6154  015066  0E13               	movlw	19
  6155  015068  6E45               	movwf	_lBufferX,c
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;Console.c: 226: lBufferY --;
  6159  01506A  07FF               	decf	_lBufferY& (0+255),f,b
  6160                           
  6161                           ;Console.c: 228: }
  6162  01506C  D00C               	goto	l1000
  6163  01506E                     l999:
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;Console.c: 229: else
  6167                           ;Console.c: 230: {
  6168                           ;Console.c: 231: gCursor.x = 6;
  6169                           
  6170                           ; BSR set to: 0
  6171  01506E  0E00               	movlw	0
  6172  015070  6E48               	movwf	_gCursor+1,c
  6173  015072  0E06               	movlw	6
  6174  015074  6E47               	movwf	_gCursor,c
  6175                           
  6176                           ;Console.c: 232: gCursor.y = 6;
  6177  015076  0E00               	movlw	0
  6178  015078  6E4A               	movwf	_gCursor+3,c
  6179  01507A  0E06               	movlw	6
  6180  01507C  6E49               	movwf	_gCursor+2,c
  6181                           
  6182                           ;Console.c: 235: lBufferX = 0;
  6183  01507E  0E00               	movlw	0
  6184  015080  6E45               	movwf	_lBufferX,c
  6185                           
  6186                           ;Console.c: 236: lBufferY = 0;
  6187  015082  0E00               	movlw	0
  6188  015084  6FFF               	movwf	_lBufferY& (0+255),b
  6189  015086                     l1000:
  6190                           
  6191                           ;Console.c: 238: }
  6192                           ;Console.c: 240: Console_ClearCursor();
  6193                           
  6194                           ; BSR set to: 0
  6195                           
  6196                           ; BSR set to: 0
  6197  015086  EC31  F0AB         	call	_Console_ClearCursor	;wreg free
  6198  01508A  0012               	return		;funcret
  6199  01508C                     __end_of_Console_Backspace:
  6200                           	opt stack 0
  6201                           tosu	equ	0xFFF
  6202                           tosh	equ	0xFFE
  6203                           tosl	equ	0xFFD
  6204                           pclath	equ	0xFFA
  6205                           tblptru	equ	0xFF8
  6206                           tblptrh	equ	0xFF7
  6207                           tblptrl	equ	0xFF6
  6208                           tablat	equ	0xFF5
  6209                           prodh	equ	0xFF4
  6210                           prodl	equ	0xFF3
  6211                           postinc0	equ	0xFEE
  6212                           wreg	equ	0xFE8
  6213                           postdec1	equ	0xFE5
  6214                           fsr1h	equ	0xFE2
  6215                           fsr1l	equ	0xFE1
  6216                           indf2	equ	0xFDF
  6217                           postinc2	equ	0xFDE
  6218                           postdec2	equ	0xFDD
  6219                           fsr2h	equ	0xFDA
  6220                           fsr2l	equ	0xFD9
  6221                           status	equ	0xFD8
  6222                           
  6223 ;; *************** function _Console_ClearCursor *****************
  6224 ;; Defined at:
  6225 ;;		line 308 in file "Library/Console.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;		None
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      void 
  6232 ;; Registers used:
  6233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;Total ram usage:        2 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    7
  6246 ;; This function calls:
  6247 ;;		Nothing
  6248 ;; This function is called by:
  6249 ;;		_Console_Backspace
  6250 ;;		_Console_Tab
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text11
  6255  015662                     __ptext11:
  6256                           	opt stack 0
  6257  015662                     _Console_ClearCursor:
  6258                           	opt stack 19
  6259                           
  6260                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  6261                           
  6262                           ;incstack = 0
  6263  015662  0E01               	movlw	1
  6264  015664  6E4E               	movwf	_change,c
  6265  015666  0100               	movlb	0	; () banked
  6266  015668  51FF               	movf	_lBufferY& (0+255),w,b
  6267  01566A  0D14               	mullw	20
  6268  01566C  0E36               	movlw	low _lBuffer
  6269  01566E  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  6270  015670  0E03               	movlw	high _lBuffer
  6271  015672  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  6272  015674  50F3               	movf	prodl,w,c
  6273  015676  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  6274  015678  50F4               	movf	prodh,w,c
  6275  01567A  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  6276  01567C  5045               	movf	_lBufferX,w,c
  6277  01567E  0D01               	mullw	1
  6278  015680  50F3               	movf	prodl,w,c
  6279  015682  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  6280  015684  6ED9               	movwf	fsr2l,c
  6281  015686  50F4               	movf	prodh,w,c
  6282  015688  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  6283  01568A  6EDA               	movwf	fsr2h,c
  6284  01568C  0E80               	movlw	128
  6285  01568E  6EDF               	movwf	indf2,c
  6286                           
  6287                           ; BSR set to: 0
  6288  015690  0012               	return		;funcret
  6289  015692                     __end_of_Console_ClearCursor:
  6290                           	opt stack 0
  6291                           tosu	equ	0xFFF
  6292                           tosh	equ	0xFFE
  6293                           tosl	equ	0xFFD
  6294                           pclath	equ	0xFFA
  6295                           tblptru	equ	0xFF8
  6296                           tblptrh	equ	0xFF7
  6297                           tblptrl	equ	0xFF6
  6298                           tablat	equ	0xFF5
  6299                           prodh	equ	0xFF4
  6300                           prodl	equ	0xFF3
  6301                           postinc0	equ	0xFEE
  6302                           wreg	equ	0xFE8
  6303                           postdec1	equ	0xFE5
  6304                           fsr1h	equ	0xFE2
  6305                           fsr1l	equ	0xFE1
  6306                           indf2	equ	0xFDF
  6307                           postinc2	equ	0xFDE
  6308                           postdec2	equ	0xFDD
  6309                           fsr2h	equ	0xFDA
  6310                           fsr2l	equ	0xFD9
  6311                           status	equ	0xFD8
  6312                           
  6313 ;; *************** function _Turn *****************
  6314 ;; Defined at:
  6315 ;;		line 199 in file "dans.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  Angle           2    1[BANK0 ] int 
  6318 ;;  Speed           2    3[BANK0 ] int 
  6319 ;;  Dir             2    5[BANK0 ] int 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  Rad             2    9[BANK0 ] int 
  6322 ;;  C_Angle         2    7[BANK0 ] int 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  2    1[BANK0 ] int 
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6332 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;Total ram usage:       10 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    9
  6339 ;; This function calls:
  6340 ;;		_Robot_Stop
  6341 ;;		_eusartRec
  6342 ;;		_eusartSend
  6343 ;; This function is called by:
  6344 ;;		_Travel
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text12
  6349  01481C                     __ptext12:
  6350                           	opt stack 0
  6351  01481C                     _Turn:
  6352                           	opt stack 20
  6353                           
  6354                           ;dans.c: 200: int Rad = 1;
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;incstack = 0
  6358  01481C  0E00               	movlw	0
  6359  01481E  0100               	movlb	0	; () banked
  6360  014820  6F6A               	movwf	(Turn@Rad+1)& (0+255),b
  6361  014822  0E01               	movlw	1
  6362  014824  6F69               	movwf	Turn@Rad& (0+255),b
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;dans.c: 201: if (Dir == 0){
  6366  014826  5165               	movf	Turn@Dir& (0+255),w,b
  6367  014828  1166               	iorwf	(Turn@Dir+1)& (0+255),w,b
  6368  01482A  A4D8               	btfss	status,2,c
  6369  01482C  D004               	goto	l2396
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;dans.c: 202: Rad = 65535;
  6373  01482E  6969               	setf	Turn@Rad& (0+255),b
  6374  014830  696A               	setf	(Turn@Rad+1)& (0+255),b
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;dans.c: 203: Angle = ~Angle;
  6378  014832  1F61               	comf	Turn@Angle& (0+255),f,b
  6379  014834  1F62               	comf	(Turn@Angle+1)& (0+255),f,b
  6380  014836                     l2396:
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;dans.c: 204: }
  6384                           ;dans.c: 206: eusartSend(137);
  6385                           
  6386                           ; BSR set to: 0
  6387  014836  0E89               	movlw	137
  6388  014838  EC86  F0AD         	call	_eusartSend
  6389                           
  6390                           ;dans.c: 207: eusartSend(((unsigned char)(((Speed)>>8)&0xFF)));
  6391  01483C  0100               	movlb	0	; () banked
  6392  01483E  5164               	movf	(Turn@Speed+1)& (0+255),w,b
  6393  014840  EC86  F0AD         	call	_eusartSend
  6394                           
  6395                           ;dans.c: 208: eusartSend(((unsigned char)((Speed)&0xFF)));
  6396  014844  0100               	movlb	0	; () banked
  6397  014846  5163               	movf	Turn@Speed& (0+255),w,b
  6398  014848  EC86  F0AD         	call	_eusartSend
  6399                           
  6400                           ;dans.c: 209: eusartSend(((unsigned char)(((Rad)>>8)&0xFF)));
  6401  01484C  0100               	movlb	0	; () banked
  6402  01484E  516A               	movf	(Turn@Rad+1)& (0+255),w,b
  6403  014850  EC86  F0AD         	call	_eusartSend
  6404                           
  6405                           ;dans.c: 210: eusartSend(((unsigned char)((Rad)&0xFF)));
  6406  014854  0100               	movlb	0	; () banked
  6407  014856  5169               	movf	Turn@Rad& (0+255),w,b
  6408  014858  EC86  F0AD         	call	_eusartSend
  6409                           
  6410                           ;dans.c: 211: int C_Angle = 0;
  6411  01485C  0E00               	movlw	0
  6412  01485E  0100               	movlb	0	; () banked
  6413  014860  6F68               	movwf	(Turn@C_Angle+1)& (0+255),b
  6414  014862  0E00               	movlw	0
  6415  014864  6F67               	movwf	Turn@C_Angle& (0+255),b
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;dans.c: 212: eusartSend(157);
  6419  014866  0E9D               	movlw	157
  6420  014868  EC86  F0AD         	call	_eusartSend
  6421                           
  6422                           ;dans.c: 213: eusartSend(((unsigned char)(((Angle)>>8)&0xFF)));
  6423  01486C  0100               	movlb	0	; () banked
  6424  01486E  5162               	movf	(Turn@Angle+1)& (0+255),w,b
  6425  014870  EC86  F0AD         	call	_eusartSend
  6426                           
  6427                           ;dans.c: 214: eusartSend(((unsigned char)((Angle)&0xFF)));
  6428  014874  0100               	movlb	0	; () banked
  6429  014876  5161               	movf	Turn@Angle& (0+255),w,b
  6430  014878  EC86  F0AD         	call	_eusartSend
  6431                           
  6432                           ;dans.c: 216: Robot_Stop();
  6433  01487C  EC4A  F0AC         	call	_Robot_Stop	;wreg free
  6434                           
  6435                           ;dans.c: 218: eusartSend(142);
  6436  014880  0E8E               	movlw	142
  6437  014882  EC86  F0AD         	call	_eusartSend
  6438                           
  6439                           ;dans.c: 219: eusartSend(7);
  6440  014886  0E07               	movlw	7
  6441  014888  EC86  F0AD         	call	_eusartSend
  6442                           
  6443                           ;dans.c: 220: eusartRec();
  6444  01488C  ECBD  F0AD         	call	_eusartRec	;wreg free
  6445  014890  0012               	return		;funcret
  6446  014892                     __end_of_Turn:
  6447                           	opt stack 0
  6448                           tosu	equ	0xFFF
  6449                           tosh	equ	0xFFE
  6450                           tosl	equ	0xFFD
  6451                           pclath	equ	0xFFA
  6452                           tblptru	equ	0xFF8
  6453                           tblptrh	equ	0xFF7
  6454                           tblptrl	equ	0xFF6
  6455                           tablat	equ	0xFF5
  6456                           prodh	equ	0xFF4
  6457                           prodl	equ	0xFF3
  6458                           postinc0	equ	0xFEE
  6459                           wreg	equ	0xFE8
  6460                           postdec1	equ	0xFE5
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           postinc2	equ	0xFDE
  6465                           postdec2	equ	0xFDD
  6466                           fsr2h	equ	0xFDA
  6467                           fsr2l	equ	0xFD9
  6468                           status	equ	0xFD8
  6469                           
  6470 ;; *************** function _Get_VirtualWall_State *****************
  6471 ;; Defined at:
  6472 ;;		line 158 in file "dans.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;		None
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  Vitual_Wall_    2    4[BANK0 ] int 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  2    1[BANK0 ] int 
  6479 ;; Registers used:
  6480 ;;		wreg, status,2, status,0, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6486 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;Total ram usage:        5 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    8
  6493 ;; This function calls:
  6494 ;;		_eusartRec
  6495 ;;		_eusartSend
  6496 ;; This function is called by:
  6497 ;;		_Travel
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text13
  6502  015870                     __ptext13:
  6503                           	opt stack 0
  6504  015870                     _Get_VirtualWall_State:
  6505                           	opt stack 21
  6506                           
  6507                           ;dans.c: 159: eusartSend(142);
  6508                           
  6509                           ;incstack = 0
  6510  015870  0E8E               	movlw	142
  6511  015872  EC86  F0AD         	call	_eusartSend
  6512                           
  6513                           ;dans.c: 160: eusartSend(13);
  6514  015876  0E0D               	movlw	13
  6515  015878  EC86  F0AD         	call	_eusartSend
  6516                           
  6517                           ;dans.c: 161: int Vitual_Wall_Sensor = (eusartRec());
  6518  01587C  ECBD  F0AD         	call	_eusartRec	;wreg free
  6519  015880  0100               	movlb	0	; () banked
  6520  015882  6F63               	movwf	??_Get_VirtualWall_State& (0+255),b
  6521  015884  5163               	movf	??_Get_VirtualWall_State& (0+255),w,b
  6522  015886  6F64               	movwf	Get_VirtualWall_State@Vitual_Wall_Sensor& (0+255),b
  6523  015888  6B65               	clrf	(Get_VirtualWall_State@Vitual_Wall_Sensor+1)& (0+255),b
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;dans.c: 162: return Vitual_Wall_Sensor;
  6527  01588A  C064  F061         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor,?_Get_VirtualWall_State
  6528  01588E  C065  F062         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor+1,?_Get_VirtualWall_State+1
  6529  015892  0012               	return	
  6530  015894                     __end_of_Get_VirtualWall_State:
  6531                           	opt stack 0
  6532                           tosu	equ	0xFFF
  6533                           tosh	equ	0xFFE
  6534                           tosl	equ	0xFFD
  6535                           pclath	equ	0xFFA
  6536                           tblptru	equ	0xFF8
  6537                           tblptrh	equ	0xFF7
  6538                           tblptrl	equ	0xFF6
  6539                           tablat	equ	0xFF5
  6540                           prodh	equ	0xFF4
  6541                           prodl	equ	0xFF3
  6542                           postinc0	equ	0xFEE
  6543                           wreg	equ	0xFE8
  6544                           postdec1	equ	0xFE5
  6545                           fsr1h	equ	0xFE2
  6546                           fsr1l	equ	0xFE1
  6547                           indf2	equ	0xFDF
  6548                           postinc2	equ	0xFDE
  6549                           postdec2	equ	0xFDD
  6550                           fsr2h	equ	0xFDA
  6551                           fsr2l	equ	0xFD9
  6552                           status	equ	0xFD8
  6553                           
  6554 ;; *************** function _Drive *****************
  6555 ;; Defined at:
  6556 ;;		line 126 in file "dans.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;  SpeedL          2    1[BANK0 ] int 
  6559 ;;  SpeedR          2    3[BANK0 ] int 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      void 
  6564 ;; Registers used:
  6565 ;;		wreg, status,2, status,0, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6571 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;Total ram usage:        4 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    8
  6578 ;; This function calls:
  6579 ;;		_eusartSend
  6580 ;; This function is called by:
  6581 ;;		_Travel
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text14
  6586  0151C4                     __ptext14:
  6587                           	opt stack 0
  6588  0151C4                     _Drive:
  6589                           	opt stack 21
  6590                           
  6591                           ;dans.c: 127: if (SpeedL < 0){
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;incstack = 0
  6595  0151C4  0100               	movlb	0	; () banked
  6596  0151C6  AF62               	btfss	(Drive@SpeedL+1)& (0+255),7,b
  6597  0151C8  D006               	goto	l2373
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;dans.c: 128: SpeedL = -1*SpeedL;
  6601  0151CA  6D61               	negf	Drive@SpeedL& (0+255),b
  6602  0151CC  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
  6603  0151CE  B0D8               	btfsc	status,0,c
  6604  0151D0  2B62               	incf	(Drive@SpeedL+1)& (0+255),f,b
  6605                           
  6606                           ;dans.c: 129: SpeedL = ~SpeedL;
  6607  0151D2  1F61               	comf	Drive@SpeedL& (0+255),f,b
  6608  0151D4  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
  6609  0151D6                     l2373:
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;dans.c: 130: }
  6613                           ;dans.c: 131: if (SpeedR < 0){
  6614                           
  6615                           ; BSR set to: 0
  6616  0151D6  AF64               	btfss	(Drive@SpeedR+1)& (0+255),7,b
  6617  0151D8  D006               	goto	l2374
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;dans.c: 132: SpeedR = -1*SpeedR;
  6621  0151DA  6D63               	negf	Drive@SpeedR& (0+255),b
  6622  0151DC  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
  6623  0151DE  B0D8               	btfsc	status,0,c
  6624  0151E0  2B64               	incf	(Drive@SpeedR+1)& (0+255),f,b
  6625                           
  6626                           ;dans.c: 133: SpeedR = ~SpeedR;
  6627  0151E2  1F63               	comf	Drive@SpeedR& (0+255),f,b
  6628  0151E4  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
  6629  0151E6                     l2374:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;dans.c: 134: }
  6633                           ;dans.c: 136: eusartSend(145);
  6634                           
  6635                           ; BSR set to: 0
  6636  0151E6  0E91               	movlw	145
  6637  0151E8  EC86  F0AD         	call	_eusartSend
  6638                           
  6639                           ;dans.c: 137: eusartSend(((unsigned char)(((SpeedL)>>8)&0xFF)));
  6640  0151EC  0100               	movlb	0	; () banked
  6641  0151EE  5162               	movf	(Drive@SpeedL+1)& (0+255),w,b
  6642  0151F0  EC86  F0AD         	call	_eusartSend
  6643                           
  6644                           ;dans.c: 138: eusartSend(((unsigned char)((SpeedL)&0xFF)));
  6645  0151F4  0100               	movlb	0	; () banked
  6646  0151F6  5161               	movf	Drive@SpeedL& (0+255),w,b
  6647  0151F8  EC86  F0AD         	call	_eusartSend
  6648                           
  6649                           ;dans.c: 139: eusartSend(((unsigned char)(((SpeedR)>>8)&0xFF)));
  6650  0151FC  0100               	movlb	0	; () banked
  6651  0151FE  5164               	movf	(Drive@SpeedR+1)& (0+255),w,b
  6652  015200  EC86  F0AD         	call	_eusartSend
  6653                           
  6654                           ;dans.c: 140: eusartSend(((unsigned char)((SpeedR)&0xFF)));
  6655  015204  0100               	movlb	0	; () banked
  6656  015206  5163               	movf	Drive@SpeedR& (0+255),w,b
  6657  015208  EC86  F0AD         	call	_eusartSend
  6658  01520C  0012               	return		;funcret
  6659  01520E                     __end_of_Drive:
  6660                           	opt stack 0
  6661                           tosu	equ	0xFFF
  6662                           tosh	equ	0xFFE
  6663                           tosl	equ	0xFFD
  6664                           pclath	equ	0xFFA
  6665                           tblptru	equ	0xFF8
  6666                           tblptrh	equ	0xFF7
  6667                           tblptrl	equ	0xFF6
  6668                           tablat	equ	0xFF5
  6669                           prodh	equ	0xFF4
  6670                           prodl	equ	0xFF3
  6671                           postinc0	equ	0xFEE
  6672                           wreg	equ	0xFE8
  6673                           postdec1	equ	0xFE5
  6674                           fsr1h	equ	0xFE2
  6675                           fsr1l	equ	0xFE1
  6676                           indf2	equ	0xFDF
  6677                           postinc2	equ	0xFDE
  6678                           postdec2	equ	0xFDD
  6679                           fsr2h	equ	0xFDA
  6680                           fsr2l	equ	0xFD9
  6681                           status	equ	0xFD8
  6682                           
  6683 ;; *************** function _Console_Render *****************
  6684 ;; Defined at:
  6685 ;;		line 377 in file "Library/Console.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;		None
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;  lCursor         4   38[BANK0 ] struct Point
  6690 ;;  y               1   43[BANK0 ] unsigned char 
  6691 ;;  x               1   42[BANK0 ] unsigned char 
  6692 ;;  temp            1   37[BANK0 ] unsigned char 
  6693 ;;  Temp            2    0        unsigned short 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6704 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6705 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6706 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6707 ;;Total ram usage:        9 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:   11
  6710 ;; This function calls:
  6711 ;;		_Console_MakeField
  6712 ;;		_LCD_DrawField
  6713 ;;		_LCD_FillRectangle
  6714 ;; This function is called by:
  6715 ;;		_main
  6716 ;;		_Travel
  6717 ;;		_Sensor_Observe
  6718 ;;		_Closest_Object
  6719 ;;		_Detect_Victim
  6720 ;;		_movement1
  6721 ;;		_Find_Flag
  6722 ;;		_Move_ADC_To
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           	psect	text15
  6727  012436                     __ptext15:
  6728                           	opt stack 0
  6729  012436                     _Console_Render:
  6730                           	opt stack 18
  6731                           
  6732                           ;Console.c: 379: Colour Temp;
  6733                           ;Console.c: 380: if (change)
  6734                           
  6735                           ;incstack = 0
  6736  012436  504E               	movf	_change,w,c
  6737  012438  B4D8               	btfsc	status,2,c
  6738  01243A  0012               	return	
  6739                           
  6740                           ;Console.c: 381: {
  6741                           ;Console.c: 382: UINT8 x, y, temp;
  6742                           ;Console.c: 383: Point lCursor = {6,6};
  6743  01243C  C1DD  F086         	movff	Console_Render@F6956,Console_Render@lCursor
  6744  012440  C1DE  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  6745  012444  C1DF  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  6746  012448  C1E0  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  6747                           
  6748                           ;Console.c: 385: if (clearall)
  6749  01244C  5046               	movf	_clearall,w,c
  6750  01244E  B4D8               	btfsc	status,2,c
  6751  012450  D005               	goto	l1056
  6752                           
  6753                           ;Console.c: 386: {
  6754                           ;Console.c: 389: temp = lBufferY;
  6755  012452  C0FF  F085         	movff	_lBufferY,Console_Render@temp
  6756                           
  6757                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  6758  012456  0E0F               	movlw	15
  6759  012458  0100               	movlb	0	; () banked
  6760  01245A  6FFF               	movwf	_lBufferY& (0+255),b
  6761  01245C                     l1056:
  6762                           
  6763                           ;Console.c: 391: }
  6764                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  6765  01245C  0E00               	movlw	0
  6766  01245E  0100               	movlb	0	; () banked
  6767  012460  6F8B               	movwf	Console_Render@y& (0+255),b
  6768  012462  D0B9               	goto	l1057
  6769  012464                     
  6770                           ; BSR set to: 0
  6771                           ;Console.c: 394: {
  6772                           ;Console.c: 395: gForecolour = lCBuffer[y];
  6773                           
  6774                           ; BSR set to: 0
  6775  012464  518B               	movf	Console_Render@y& (0+255),w,b
  6776  012466  0D02               	mullw	2
  6777  012468  0E28               	movlw	low _lCBuffer
  6778  01246A  24F3               	addwf	prodl,w,c
  6779  01246C  6ED9               	movwf	fsr2l,c
  6780  01246E  0E02               	movlw	high _lCBuffer
  6781  012470  20F4               	addwfc	prodh,w,c
  6782  012472  6EDA               	movwf	fsr2h,c
  6783  012474  CFDE F1F5          	movff	postinc2,_gForecolour
  6784  012478  CFDD F1F6          	movff	postdec2,_gForecolour+1
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  6788  01247C  0E00               	movlw	0
  6789  01247E  6F8A               	movwf	Console_Render@x& (0+255),b
  6790  012480                     l15253:
  6791                           
  6792                           ; BSR set to: 0
  6793  012480  0E13               	movlw	19
  6794  012482  658A               	cpfsgt	Console_Render@x& (0+255),b
  6795  012484  D001               	goto	l1059
  6796  012486  D09E               	goto	u12620
  6797  012488                     l1059:
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;Console.c: 397: {
  6801                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  6802                           
  6803                           ; BSR set to: 0
  6804  012488  518B               	movf	Console_Render@y& (0+255),w,b
  6805  01248A  0D14               	mullw	20
  6806  01248C  0E36               	movlw	low _lBuffer
  6807  01248E  6F83               	movwf	??_Console_Render& (0+255),b
  6808  012490  0E03               	movlw	high _lBuffer
  6809  012492  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6810  012494  50F3               	movf	prodl,w,c
  6811  012496  2783               	addwf	??_Console_Render& (0+255),f,b
  6812  012498  50F4               	movf	prodh,w,c
  6813  01249A  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6814  01249C  518A               	movf	Console_Render@x& (0+255),w,b
  6815  01249E  0D01               	mullw	1
  6816  0124A0  50F3               	movf	prodl,w,c
  6817  0124A2  2583               	addwf	??_Console_Render& (0+255),w,b
  6818  0124A4  6ED9               	movwf	fsr2l,c
  6819  0124A6  50F4               	movf	prodh,w,c
  6820  0124A8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6821  0124AA  6EDA               	movwf	fsr2h,c
  6822  0124AC  AEDF               	btfss	indf2,7,c
  6823  0124AE  D083               	goto	l1063
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;Console.c: 399: {
  6827                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  6828  0124B0  518B               	movf	Console_Render@y& (0+255),w,b
  6829  0124B2  0D14               	mullw	20
  6830  0124B4  0E36               	movlw	low _lBuffer
  6831  0124B6  6F83               	movwf	??_Console_Render& (0+255),b
  6832  0124B8  0E03               	movlw	high _lBuffer
  6833  0124BA  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6834  0124BC  50F3               	movf	prodl,w,c
  6835  0124BE  2783               	addwf	??_Console_Render& (0+255),f,b
  6836  0124C0  50F4               	movf	prodh,w,c
  6837  0124C2  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6838  0124C4  518A               	movf	Console_Render@x& (0+255),w,b
  6839  0124C6  0D01               	mullw	1
  6840  0124C8  50F3               	movf	prodl,w,c
  6841  0124CA  2583               	addwf	??_Console_Render& (0+255),w,b
  6842  0124CC  6ED9               	movwf	fsr2l,c
  6843  0124CE  50F4               	movf	prodh,w,c
  6844  0124D0  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6845  0124D2  6EDA               	movwf	fsr2h,c
  6846  0124D4  0E7F               	movlw	127
  6847  0124D6  16DF               	andwf	indf2,f,c
  6848                           
  6849                           ;Console.c: 401: if (lBuffer[y][x])
  6850  0124D8  518B               	movf	Console_Render@y& (0+255),w,b
  6851  0124DA  0D14               	mullw	20
  6852  0124DC  0E36               	movlw	low _lBuffer
  6853  0124DE  6F83               	movwf	??_Console_Render& (0+255),b
  6854  0124E0  0E03               	movlw	high _lBuffer
  6855  0124E2  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6856  0124E4  50F3               	movf	prodl,w,c
  6857  0124E6  2783               	addwf	??_Console_Render& (0+255),f,b
  6858  0124E8  50F4               	movf	prodh,w,c
  6859  0124EA  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6860  0124EC  518A               	movf	Console_Render@x& (0+255),w,b
  6861  0124EE  0D01               	mullw	1
  6862  0124F0  50F3               	movf	prodl,w,c
  6863  0124F2  2583               	addwf	??_Console_Render& (0+255),w,b
  6864  0124F4  6ED9               	movwf	fsr2l,c
  6865  0124F6  50F4               	movf	prodh,w,c
  6866  0124F8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6867  0124FA  6EDA               	movwf	fsr2h,c
  6868  0124FC  50DF               	movf	indf2,w,c
  6869  0124FE  B4D8               	btfsc	status,2,c
  6870  012500  D043               	goto	l1062
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;Console.c: 402: {
  6874                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  6875  012502  C154  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
  6876  012506  C155  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  6877  01250A  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  6878  01250E  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  6879  012512  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  6880  012516  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  6881  01251A  C1E5  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  6882  01251E  C1E6  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  6883  012522  C1E7  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  6884  012526  C1E8  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  6885  01252A  EC4D  F0A7         	call	_LCD_FillRectangle	;wreg free
  6886                           
  6887                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  6888  01252E  0100               	movlb	0	; () banked
  6889  012530  518B               	movf	Console_Render@y& (0+255),w,b
  6890  012532  0D14               	mullw	20
  6891  012534  0E36               	movlw	low _lBuffer
  6892  012536  6F83               	movwf	??_Console_Render& (0+255),b
  6893  012538  0E03               	movlw	high _lBuffer
  6894  01253A  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6895  01253C  50F3               	movf	prodl,w,c
  6896  01253E  2783               	addwf	??_Console_Render& (0+255),f,b
  6897  012540  50F4               	movf	prodh,w,c
  6898  012542  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6899  012544  518A               	movf	Console_Render@x& (0+255),w,b
  6900  012546  0D01               	mullw	1
  6901  012548  50F3               	movf	prodl,w,c
  6902  01254A  2583               	addwf	??_Console_Render& (0+255),w,b
  6903  01254C  6ED9               	movwf	fsr2l,c
  6904  01254E  50F4               	movf	prodh,w,c
  6905  012550  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6906  012552  6EDA               	movwf	fsr2h,c
  6907  012554  50DF               	movf	indf2,w,c
  6908  012556  EC64  F09F         	call	_Console_MakeField
  6909  01255A  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
  6910  01255E  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  6911  012562  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  6912  012566  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  6913  01256A  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  6914  01256E  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  6915  012572  C1E5  F078         	movff	_gCharSize,LCD_DrawField@pSize
  6916  012576  C1E6  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  6917  01257A  C1E7  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  6918  01257E  C1E8  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  6919  012582  EC17  F0A3         	call	_LCD_DrawField	;wreg free
  6920                           
  6921                           ;Console.c: 405: }
  6922  012586  D017               	goto	l1063
  6923  012588                     l1062:
  6924                           
  6925                           ;Console.c: 406: else
  6926                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  6927  012588  0E00               	movlw	0
  6928  01258A  0100               	movlb	0	; () banked
  6929  01258C  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  6930  01258E  0E00               	movlw	0
  6931  012590  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
  6932  012592  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  6933  012596  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  6934  01259A  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  6935  01259E  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  6936  0125A2  C1E5  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  6937  0125A6  C1E6  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  6938  0125AA  C1E7  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  6939  0125AE  C1E8  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  6940  0125B2  EC4D  F0A7         	call	_LCD_FillRectangle	;wreg free
  6941  0125B6                     l1063:
  6942                           
  6943                           ;Console.c: 408: }
  6944                           ;Console.c: 409: lCursor.x += (5 + 1);
  6945  0125B6  0E06               	movlw	6
  6946  0125B8  0100               	movlb	0	; () banked
  6947  0125BA  2786               	addwf	Console_Render@lCursor& (0+255),f,b
  6948  0125BC  0E00               	movlw	0
  6949  0125BE  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  6950                           
  6951                           ; BSR set to: 0
  6952  0125C0  2B8A               	incf	Console_Render@x& (0+255),f,b
  6953  0125C2  D75E               	goto	l15253
  6954  0125C4                     u12620:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;Console.c: 410: }
  6958                           ;Console.c: 411: lCursor.y += (7 + 1);
  6959                           
  6960                           ; BSR set to: 0
  6961  0125C4  0E08               	movlw	8
  6962  0125C6  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  6963  0125C8  0E00               	movlw	0
  6964  0125CA  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;Console.c: 412: lCursor.x = 6;
  6968  0125CC  0E00               	movlw	0
  6969  0125CE  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
  6970  0125D0  0E06               	movlw	6
  6971  0125D2  6F86               	movwf	Console_Render@lCursor& (0+255),b
  6972                           
  6973                           ; BSR set to: 0
  6974  0125D4  2B8B               	incf	Console_Render@y& (0+255),f,b
  6975  0125D6                     l1057:
  6976                           
  6977                           ; BSR set to: 0
  6978                           
  6979                           ; BSR set to: 0
  6980  0125D6  518B               	movf	Console_Render@y& (0+255),w,b
  6981  0125D8  5DFF               	subwf	_lBufferY& (0+255),w,b
  6982  0125DA  B0D8               	btfsc	status,0,c
  6983  0125DC  D743               	goto	l1058
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;Console.c: 413: }
  6987                           ;Console.c: 415: if (clearall)
  6988                           
  6989                           ; BSR set to: 0
  6990  0125DE  5046               	movf	_clearall,w,c
  6991  0125E0  B4D8               	btfsc	status,2,c
  6992  0125E2  0012               	return	
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;Console.c: 416: {
  6996                           ;Console.c: 417: clearall = 0;
  6997  0125E4  0E00               	movlw	0
  6998  0125E6  6E46               	movwf	_clearall,c
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;Console.c: 418: lBufferY = temp;
  7002  0125E8  C085  F0FF         	movff	Console_Render@temp,_lBufferY
  7003                           
  7004                           ; BSR set to: 0
  7005  0125EC  0012               	return	
  7006  0125EE                     __end_of_Console_Render:
  7007                           	opt stack 0
  7008                           tosu	equ	0xFFF
  7009                           tosh	equ	0xFFE
  7010                           tosl	equ	0xFFD
  7011                           pclath	equ	0xFFA
  7012                           tblptru	equ	0xFF8
  7013                           tblptrh	equ	0xFF7
  7014                           tblptrl	equ	0xFF6
  7015                           tablat	equ	0xFF5
  7016                           prodh	equ	0xFF4
  7017                           prodl	equ	0xFF3
  7018                           postinc0	equ	0xFEE
  7019                           wreg	equ	0xFE8
  7020                           postdec1	equ	0xFE5
  7021                           fsr1h	equ	0xFE2
  7022                           fsr1l	equ	0xFE1
  7023                           indf2	equ	0xFDF
  7024                           postinc2	equ	0xFDE
  7025                           postdec2	equ	0xFDD
  7026                           fsr2h	equ	0xFDA
  7027                           fsr2l	equ	0xFD9
  7028                           status	equ	0xFD8
  7029                           
  7030 ;; *************** function _LCD_FillRectangle *****************
  7031 ;; Defined at:
  7032 ;;		line 318 in file "Library/LCD.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;  pColour         2    9[BANK0 ] unsigned short 
  7035 ;;  pPoint          4   11[BANK0 ] struct Point
  7036 ;;  pSize           4   15[BANK0 ] struct Point
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;  j               1   22[BANK0 ] unsigned char 
  7039 ;;  i               1   21[BANK0 ] unsigned char 
  7040 ;; Return value:  Size  Location     Type
  7041 ;;                  1    wreg      void 
  7042 ;; Registers used:
  7043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7049 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;Total ram usage:       14 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:   10
  7056 ;; This function calls:
  7057 ;;		_LCD_Word_Write
  7058 ;;		_Set_Addr_Window
  7059 ;; This function is called by:
  7060 ;;		_Console_Render
  7061 ;;		_Console_ClearLine
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           	psect	text16
  7066  014E9A                     __ptext16:
  7067                           	opt stack 0
  7068  014E9A                     _LCD_FillRectangle:
  7069                           	opt stack 18
  7070                           
  7071                           ;LCD.c: 320: UINT8 i = 0x00;
  7072                           
  7073                           ;incstack = 0
  7074  014E9A  0E00               	movlw	0
  7075  014E9C  0100               	movlb	0	; () banked
  7076  014E9E  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
  7077                           
  7078                           ;LCD.c: 321: UINT8 j = 0x00;
  7079  014EA0  0E00               	movlw	0
  7080  014EA2  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  7084  014EA4  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  7085  014EA8  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  7086  014EAA  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
  7087  014EAC  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
  7088  014EAE  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
  7089  014EB0  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  7090  014EB2  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
  7091  014EB4  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
  7092  014EB6  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
  7093  014EB8  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
  7094  014EBA  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  7095  014EBC  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  7096  014EBE  EC54  F0A0         	call	_Set_Addr_Window
  7097                           
  7098                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
  7099  014EC2  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
  7100  014EC6  0100               	movlb	0	; () banked
  7101  014EC8  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
  7102  014ECA  B4D8               	btfsc	status,2,c
  7103  014ECC  0012               	return	
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
  7107                           
  7108                           ; BSR set to: 0
  7109  014ECE  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
  7110  014ED2                     l14649:
  7111                           
  7112                           ; BSR set to: 0
  7113  014ED2  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
  7114  014ED4  B4D8               	btfsc	status,2,c
  7115  014ED6  D009               	goto	u12040
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;LCD.c: 333: LCD_Word_Write(pColour);
  7119                           
  7120                           ; BSR set to: 0
  7121                           
  7122                           ; BSR set to: 0
  7123  014ED8  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
  7124  014EDC  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
  7125  014EE0  ECC4  F0AC         	call	_LCD_Word_Write	;wreg free
  7126  014EE4  0100               	movlb	0	; () banked
  7127  014EE6  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
  7128  014EE8  D7F4               	goto	l14649
  7129  014EEA                     u12040:
  7130                           
  7131                           ; BSR set to: 0
  7132                           
  7133                           ; BSR set to: 0
  7134  014EEA  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
  7135  014EEC  D7ED               	goto	L3
  7136  014EEE                     __end_of_LCD_FillRectangle:
  7137                           	opt stack 0
  7138                           tosu	equ	0xFFF
  7139                           tosh	equ	0xFFE
  7140                           tosl	equ	0xFFD
  7141                           pclath	equ	0xFFA
  7142                           tblptru	equ	0xFF8
  7143                           tblptrh	equ	0xFF7
  7144                           tblptrl	equ	0xFF6
  7145                           tablat	equ	0xFF5
  7146                           prodh	equ	0xFF4
  7147                           prodl	equ	0xFF3
  7148                           postinc0	equ	0xFEE
  7149                           wreg	equ	0xFE8
  7150                           postdec1	equ	0xFE5
  7151                           fsr1h	equ	0xFE2
  7152                           fsr1l	equ	0xFE1
  7153                           indf2	equ	0xFDF
  7154                           postinc2	equ	0xFDE
  7155                           postdec2	equ	0xFDD
  7156                           fsr2h	equ	0xFDA
  7157                           fsr2l	equ	0xFD9
  7158                           status	equ	0xFD8
  7159                           
  7160 ;; *************** function _LCD_DrawField *****************
  7161 ;; Defined at:
  7162 ;;		line 393 in file "Library/LCD.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  pField          2   18[BANK0 ] PTR unsigned short 
  7165 ;;		 -> Console_MakeField@Fill(70), 
  7166 ;;  pPoint          4   20[BANK0 ] struct Point
  7167 ;;  pSize           4   24[BANK0 ] struct Point
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;  count           2   30[BANK0 ] unsigned short 
  7170 ;;  i               1   34[BANK0 ] unsigned char 
  7171 ;;  ymax            1   33[BANK0 ] unsigned char 
  7172 ;;  xmax            1   32[BANK0 ] unsigned char 
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  1    wreg      void 
  7175 ;; Registers used:
  7176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7182 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7183 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;Total ram usage:       17 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:   10
  7189 ;; This function calls:
  7190 ;;		_LCD_Word_Write
  7191 ;;		_Set_Addr_Window
  7192 ;;		___wmul
  7193 ;; This function is called by:
  7194 ;;		_Console_Render
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           	psect	text17
  7199  01462E                     __ptext17:
  7200                           	opt stack 0
  7201  01462E                     _LCD_DrawField:
  7202                           	opt stack 18
  7203                           
  7204                           ;LCD.c: 396: UINT8 i = 0x00;
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;incstack = 0
  7208  01462E  0E00               	movlw	0
  7209  014630  0100               	movlb	0	; () banked
  7210  014632  6F82               	movwf	LCD_DrawField@i& (0+255),b
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
  7214  014634  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  7215  014636  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
  7216  014638  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
  7220  01463A  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
  7221  01463C  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
  7222  01463E  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
  7226  014640  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
  7227  014644  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
  7228  014648  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
  7229  01464C  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
  7230  014650  ECD6  F0AB         	call	___wmul	;wreg free
  7231  014654  C060  F07E         	movff	?___wmul,LCD_DrawField@count
  7232  014658  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
  7233                           
  7234                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
  7235  01465C  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
  7236  014660  0100               	movlb	0	; () banked
  7237  014662  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
  7238  014664  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  7239  014666  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
  7240  014668  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  7241  01466A  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  7242  01466C  EC54  F0A0         	call	_Set_Addr_Window
  7243                           
  7244                           ;LCD.c: 403: for(i = 0; i < count; i++)
  7245  014670  0E00               	movlw	0
  7246  014672  0100               	movlb	0	; () banked
  7247  014674  6F82               	movwf	LCD_DrawField@i& (0+255),b
  7248  014676  D010               	goto	l183
  7249  014678                     
  7250                           ; BSR set to: 0
  7251                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
  7252                           
  7253                           ; BSR set to: 0
  7254  014678  5182               	movf	LCD_DrawField@i& (0+255),w,b
  7255  01467A  0D02               	mullw	2
  7256  01467C  50F3               	movf	prodl,w,c
  7257  01467E  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
  7258  014680  6ED9               	movwf	fsr2l,c
  7259  014682  50F4               	movf	prodh,w,c
  7260  014684  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
  7261  014686  6EDA               	movwf	fsr2h,c
  7262  014688  CFDE F065          	movff	postinc2,LCD_Word_Write@value
  7263  01468C  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
  7264  014690  ECC4  F0AC         	call	_LCD_Word_Write	;wreg free
  7265  014694  0100               	movlb	0	; () banked
  7266  014696  2B82               	incf	LCD_DrawField@i& (0+255),f,b
  7267  014698                     l183:
  7268                           
  7269                           ; BSR set to: 0
  7270                           
  7271                           ; BSR set to: 0
  7272  014698  5182               	movf	LCD_DrawField@i& (0+255),w,b
  7273  01469A  6F7C               	movwf	??_LCD_DrawField& (0+255),b
  7274  01469C  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
  7275  01469E  517E               	movf	LCD_DrawField@count& (0+255),w,b
  7276  0146A0  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
  7277  0146A2  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
  7278  0146A4  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
  7279  0146A6  B0D8               	btfsc	status,0,c
  7280  0146A8  0012               	return	
  7281  0146AA  D7E6               	goto	l184
  7282  0146AC                     __end_of_LCD_DrawField:
  7283                           	opt stack 0
  7284                           tosu	equ	0xFFF
  7285                           tosh	equ	0xFFE
  7286                           tosl	equ	0xFFD
  7287                           pclath	equ	0xFFA
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           postinc0	equ	0xFEE
  7295                           wreg	equ	0xFE8
  7296                           postdec1	equ	0xFE5
  7297                           fsr1h	equ	0xFE2
  7298                           fsr1l	equ	0xFE1
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           fsr2h	equ	0xFDA
  7303                           fsr2l	equ	0xFD9
  7304                           status	equ	0xFD8
  7305                           
  7306 ;; *************** function ___wmul *****************
  7307 ;; Defined at:
  7308 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7311 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;  product         2    4[BANK0 ] unsigned int 
  7314 ;; Return value:  Size  Location     Type
  7315 ;;                  2    0[BANK0 ] unsigned int 
  7316 ;; Registers used:
  7317 ;;		wreg, status,2, status,0, prodl, prodh
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7323 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;Total ram usage:        6 bytes
  7328 ;; Hardware stack levels used:    1
  7329 ;; Hardware stack levels required when called:    7
  7330 ;; This function calls:
  7331 ;;		Nothing
  7332 ;; This function is called by:
  7333 ;;		_LCD_DrawField
  7334 ;;		_Travel
  7335 ;;		_Create_Maze
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text18
  7340  0157AC                     __ptext18:
  7341                           	opt stack 0
  7342  0157AC                     ___wmul:
  7343                           	opt stack 22
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;incstack = 0
  7347  0157AC  0100               	movlb	0	; () banked
  7348  0157AE  5160               	movf	___wmul@multiplier& (0+255),w,b
  7349  0157B0  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7350  0157B2  CFF3 F064          	movff	prodl,___wmul@product
  7351  0157B6  CFF4 F065          	movff	prodh,___wmul@product+1
  7352  0157BA  5160               	movf	___wmul@multiplier& (0+255),w,b
  7353  0157BC  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7354  0157BE  50F3               	movf	prodl,w,c
  7355  0157C0  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7356  0157C2  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7357  0157C4  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7358  0157C6  50F3               	movf	prodl,w,c
  7359  0157C8  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7360                           
  7361                           ; BSR set to: 0
  7362  0157CA  C064  F060         	movff	___wmul@product,?___wmul
  7363  0157CE  C065  F061         	movff	___wmul@product+1,?___wmul+1
  7364  0157D2  0012               	return	
  7365  0157D4                     __end_of___wmul:
  7366                           	opt stack 0
  7367                           tosu	equ	0xFFF
  7368                           tosh	equ	0xFFE
  7369                           tosl	equ	0xFFD
  7370                           pclath	equ	0xFFA
  7371                           tblptru	equ	0xFF8
  7372                           tblptrh	equ	0xFF7
  7373                           tblptrl	equ	0xFF6
  7374                           tablat	equ	0xFF5
  7375                           prodh	equ	0xFF4
  7376                           prodl	equ	0xFF3
  7377                           postinc0	equ	0xFEE
  7378                           wreg	equ	0xFE8
  7379                           postdec1	equ	0xFE5
  7380                           fsr1h	equ	0xFE2
  7381                           fsr1l	equ	0xFE1
  7382                           indf2	equ	0xFDF
  7383                           postinc2	equ	0xFDE
  7384                           postdec2	equ	0xFDD
  7385                           fsr2h	equ	0xFDA
  7386                           fsr2l	equ	0xFD9
  7387                           status	equ	0xFD8
  7388                           
  7389 ;; *************** function _Console_MakeField *****************
  7390 ;; Defined at:
  7391 ;;		line 435 in file "Library/Console.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;  pInput          1    wreg     unsigned char 
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;  pInput          1   11[BANK0 ] unsigned char 
  7396 ;;  y               1   17[BANK0 ] unsigned char 
  7397 ;;  x               1   16[BANK0 ] unsigned char 
  7398 ;;  Column          2   12[BANK0 ] PTR struct Byte
  7399 ;;		 -> Font5x7(480), 
  7400 ;;  Index           2    9[BANK0 ] unsigned short 
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  2    5[BANK0 ] PTR unsigned short 
  7403 ;; Registers used:
  7404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7410 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;Total ram usage:       13 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:    8
  7417 ;; This function calls:
  7418 ;;		_Byte_GetBit
  7419 ;; This function is called by:
  7420 ;;		_Console_Render
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           	psect	text19
  7425  013EC8                     __ptext19:
  7426                           	opt stack 0
  7427  013EC8                     _Console_MakeField:
  7428                           	opt stack 20
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;incstack = 0
  7432                           ;Console_MakeField@pInput stored from wreg
  7433  013EC8  0100               	movlb	0	; () banked
  7434  013ECA  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
  7435                           
  7436                           ;Console.c: 437: static Colour Fill[7][5];
  7437                           ;Console.c: 438: pInput -= 32;
  7438  013ECC  0E20               	movlw	32
  7439  013ECE  0100               	movlb	0	; () banked
  7440  013ED0  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
  7444  013ED2  516B               	movf	Console_MakeField@pInput& (0+255),w,b
  7445  013ED4  0D05               	mullw	5
  7446  013ED6  CFF3 F069          	movff	prodl,Console_MakeField@Index
  7447  013EDA  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
  7451  013EDE  0E09               	movlw	low _Font5x7
  7452  013EE0  2569               	addwf	Console_MakeField@Index& (0+255),w,b
  7453  013EE2  6F6C               	movwf	Console_MakeField@Column& (0+255),b
  7454  013EE4  0EFC               	movlw	high _Font5x7
  7455  013EE6  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
  7456  013EE8  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
  7457                           
  7458                           ; BSR set to: 0
  7459                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
  7460  013EEA  0E00               	movlw	0
  7461  013EEC  6F70               	movwf	Console_MakeField@x& (0+255),b
  7462  013EEE                     l14871:
  7463                           
  7464                           ; BSR set to: 0
  7465  013EEE  0E04               	movlw	4
  7466  013EF0  6570               	cpfsgt	Console_MakeField@x& (0+255),b
  7467  013EF2  D001               	goto	l1077
  7468  013EF4  D037               	goto	u12230
  7469  013EF6                     l1077:
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;Console.c: 444: {
  7473                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
  7474                           
  7475                           ; BSR set to: 0
  7476  013EF6  0E00               	movlw	0
  7477  013EF8  6F71               	movwf	Console_MakeField@y& (0+255),b
  7478  013EFA                     l14877:
  7479                           
  7480                           ; BSR set to: 0
  7481  013EFA  0E06               	movlw	6
  7482  013EFC  6571               	cpfsgt	Console_MakeField@y& (0+255),b
  7483  013EFE  D001               	goto	l1079
  7484  013F00  D02D               	goto	u12220
  7485  013F02                     l1079:
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
  7489                           
  7490                           ; BSR set to: 0
  7491  013F02  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
  7492  013F06  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
  7493  013F0A  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
  7494  013F0E  ECC0  F0AB         	call	_Byte_GetBit	;wreg free
  7495  013F12  0900               	iorlw	0
  7496  013F14  A4D8               	btfss	status,2,c
  7497  013F16  D005               	goto	l1082
  7498  013F18  C154  F06E         	movff	_gBackcolour,_Console_MakeField$10974
  7499  013F1C  C155  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
  7500  013F20  D004               	goto	l1084
  7501  013F22                     l1082:
  7502  013F22  C1F5  F06E         	movff	_gForecolour,_Console_MakeField$10974
  7503  013F26  C1F6  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
  7504  013F2A                     l1084:
  7505  013F2A  0100               	movlb	0	; () banked
  7506  013F2C  5171               	movf	Console_MakeField@y& (0+255),w,b
  7507  013F2E  0D0A               	mullw	10
  7508  013F30  0E5A               	movlw	low Console_MakeField@Fill
  7509  013F32  6F67               	movwf	??_Console_MakeField& (0+255),b
  7510  013F34  0E02               	movlw	high Console_MakeField@Fill
  7511  013F36  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
  7512  013F38  50F3               	movf	prodl,w,c
  7513  013F3A  2767               	addwf	??_Console_MakeField& (0+255),f,b
  7514  013F3C  50F4               	movf	prodh,w,c
  7515  013F3E  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
  7516  013F40  5170               	movf	Console_MakeField@x& (0+255),w,b
  7517  013F42  0D02               	mullw	2
  7518  013F44  50F3               	movf	prodl,w,c
  7519  013F46  2567               	addwf	??_Console_MakeField& (0+255),w,b
  7520  013F48  6ED9               	movwf	fsr2l,c
  7521  013F4A  50F4               	movf	prodh,w,c
  7522  013F4C  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
  7523  013F4E  6EDA               	movwf	fsr2h,c
  7524  013F50  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
  7525  013F54  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
  7526                           
  7527                           ; BSR set to: 0
  7528  013F58  2B71               	incf	Console_MakeField@y& (0+255),f,b
  7529  013F5A  D7CF               	goto	l14877
  7530  013F5C                     u12220:
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;Console.c: 447: Column += 1;
  7534                           
  7535                           ; BSR set to: 0
  7536  013F5C  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
  7537  013F5E  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
  7538  013F60  2B70               	incf	Console_MakeField@x& (0+255),f,b
  7539  013F62  D7C5               	goto	l14871
  7540  013F64                     u12230:
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;Console.c: 448: }
  7544                           ;Console.c: 449: return (ColourPtr)Fill;
  7545                           
  7546                           ; BSR set to: 0
  7547  013F64  0E5A               	movlw	low Console_MakeField@Fill
  7548  013F66  6F65               	movwf	?_Console_MakeField& (0+255),b
  7549  013F68  0E02               	movlw	high Console_MakeField@Fill
  7550  013F6A  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
  7551  013F6C  0012               	return	
  7552  013F6E                     __end_of_Console_MakeField:
  7553                           	opt stack 0
  7554                           tosu	equ	0xFFF
  7555                           tosh	equ	0xFFE
  7556                           tosl	equ	0xFFD
  7557                           pclath	equ	0xFFA
  7558                           tblptru	equ	0xFF8
  7559                           tblptrh	equ	0xFF7
  7560                           tblptrl	equ	0xFF6
  7561                           tablat	equ	0xFF5
  7562                           prodh	equ	0xFF4
  7563                           prodl	equ	0xFF3
  7564                           postinc0	equ	0xFEE
  7565                           wreg	equ	0xFE8
  7566                           postdec1	equ	0xFE5
  7567                           fsr1h	equ	0xFE2
  7568                           fsr1l	equ	0xFE1
  7569                           indf2	equ	0xFDF
  7570                           postinc2	equ	0xFDE
  7571                           postdec2	equ	0xFDD
  7572                           fsr2h	equ	0xFDA
  7573                           fsr2l	equ	0xFD9
  7574                           status	equ	0xFD8
  7575                           
  7576 ;; *************** function _Byte_GetBit *****************
  7577 ;; Defined at:
  7578 ;;		line 38 in file "Library/Types.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  7581 ;;		 -> Font5x7(480), 
  7582 ;;  pBit            1    2[BANK0 ] unsigned char 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;  Output          1    4[BANK0 ] unsigned char 
  7585 ;; Return value:  Size  Location     Type
  7586 ;;                  1    wreg      unsigned char 
  7587 ;; Registers used:
  7588 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7594 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7597 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7598 ;;Total ram usage:        5 bytes
  7599 ;; Hardware stack levels used:    1
  7600 ;; Hardware stack levels required when called:    7
  7601 ;; This function calls:
  7602 ;;		Nothing
  7603 ;; This function is called by:
  7604 ;;		_Console_MakeField
  7605 ;;		_Word_GetBit
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text20
  7610  015780                     __ptext20:
  7611                           	opt stack 0
  7612  015780                     _Byte_GetBit:
  7613                           	opt stack 20
  7614                           
  7615                           ;Types.c: 40: UINT8 Output = pInput->mBits;
  7616                           
  7617                           ; BSR set to: 0
  7618                           ;incstack = 0
  7619  015780  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
  7620  015784  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
  7621  015788                     	if	0	;tblptru may be non-zero
  7622  015788                     	endif
  7623  015788                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7624  015788  0E00               	movlw	low (__mediumconst shr (0+16))
  7625  01578A  6EF8               	movwf	tblptru,c
  7626  01578C                     	endif
  7627  01578C  0008               	tblrd		*
  7628  01578E  CFF5 F064          	movff	tablat,Byte_GetBit@Output
  7629                           
  7630                           ;Types.c: 42: Output >>= pBit;
  7631  015792  0100               	movlb	0	; () banked
  7632  015794  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
  7633  015796  6F63               	movwf	??_Byte_GetBit& (0+255),b
  7634  015798  D002               	goto	u11790
  7635  01579A                     u11795:
  7636  01579A  90D8               	bcf	status,0,c
  7637  01579C  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
  7638  01579E                     u11790:
  7639  01579E  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
  7640  0157A0  D7FC               	goto	u11795
  7641                           
  7642                           ;Types.c: 43: Output &= 1;
  7643  0157A2  0E01               	movlw	1
  7644  0157A4  0100               	movlb	0	; () banked
  7645  0157A6  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;Types.c: 44: return Output;
  7649  0157A8  5164               	movf	Byte_GetBit@Output& (0+255),w,b
  7650  0157AA  0012               	return	
  7651  0157AC                     __end_of_Byte_GetBit:
  7652                           	opt stack 0
  7653                           tosu	equ	0xFFF
  7654                           tosh	equ	0xFFE
  7655                           tosl	equ	0xFFD
  7656                           pclath	equ	0xFFA
  7657                           tblptru	equ	0xFF8
  7658                           tblptrh	equ	0xFF7
  7659                           tblptrl	equ	0xFF6
  7660                           tablat	equ	0xFF5
  7661                           prodh	equ	0xFF4
  7662                           prodl	equ	0xFF3
  7663                           postinc0	equ	0xFEE
  7664                           wreg	equ	0xFE8
  7665                           postdec1	equ	0xFE5
  7666                           fsr1h	equ	0xFE2
  7667                           fsr1l	equ	0xFE1
  7668                           indf2	equ	0xFDF
  7669                           postinc2	equ	0xFDE
  7670                           postdec2	equ	0xFDD
  7671                           fsr2h	equ	0xFDA
  7672                           fsr2l	equ	0xFD9
  7673                           status	equ	0xFD8
  7674                           
  7675 ;; *************** function _ADCAverage *****************
  7676 ;; Defined at:
  7677 ;;		line 54 in file "dans.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  2  2000[None  ] int 
  7684 ;; Registers used:
  7685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7692 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7694 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7695 ;;Total ram usage:       26 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:   11
  7698 ;; This function calls:
  7699 ;;		_FunctReadADC
  7700 ;;		_HMI_Render
  7701 ;;		_HMI_SetNumber
  7702 ;;		___awdiv
  7703 ;;		___fladd
  7704 ;;		___flmul
  7705 ;;		___flneg
  7706 ;;		___fltol
  7707 ;;		___xxtofl
  7708 ;;		_pow
  7709 ;; This function is called by:
  7710 ;;		_main
  7711 ;;		_Travel
  7712 ;;		_Sensor_Observe
  7713 ;;		_Closest_Object
  7714 ;;		_Find_Flag
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text21
  7719  010F52                     __ptext21:
  7720                           	opt stack 0
  7721  010F52                     _ADCAverage:
  7722                           	opt stack 18
  7723                           
  7724                           ;dans.c: 56: total = total - readings[readIndex];
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;incstack = 0
  7728  010F52  90D8               	bcf	status,0,c
  7729  010F54  3432               	rlcf	_readIndex,w,c
  7730  010F56  6ED9               	movwf	fsr2l,c
  7731  010F58  3433               	rlcf	_readIndex+1,w,c
  7732  010F5A  6EDA               	movwf	fsr2h,c
  7733  010F5C  0E46               	movlw	low _readings
  7734  010F5E  26D9               	addwf	fsr2l,f,c
  7735  010F60  0E02               	movlw	high _readings
  7736  010F62  22DA               	addwfc	fsr2h,f,c
  7737  010F64  CFDE F0D7          	movff	postinc2,??_ADCAverage
  7738  010F68  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
  7739  010F6C  0100               	movlb	0	; () banked
  7740  010F6E  1FD7               	comf	??_ADCAverage& (0+255),f,b
  7741  010F70  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
  7742  010F72  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
  7743  010F74  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
  7744  010F76  0101               	movlb	1	; () banked
  7745  010F78  5140               	movf	_total& (0+255),w,b
  7746  010F7A  0100               	movlb	0	; () banked
  7747  010F7C  25D7               	addwf	??_ADCAverage& (0+255),w,b
  7748  010F7E  0101               	movlb	1	; () banked
  7749  010F80  6F40               	movwf	_total& (0+255),b
  7750  010F82  5141               	movf	(_total+1)& (0+255),w,b
  7751  010F84  0100               	movlb	0	; () banked
  7752  010F86  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
  7753  010F88  0101               	movlb	1	; () banked
  7754  010F8A  6F41               	movwf	(_total+1)& (0+255),b
  7755                           
  7756                           ; BSR set to: 1
  7757                           ;dans.c: 58: readings[readIndex] = (FunctReadADC(0));
  7758  010F8C  0E00               	movlw	0
  7759  010F8E  0100               	movlb	0	; () banked
  7760  010F90  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
  7761  010F92  0E00               	movlw	0
  7762  010F94  6F60               	movwf	FunctReadADC@channel& (0+255),b
  7763  010F96  EC37  F0AA         	call	_FunctReadADC	;wreg free
  7764  010F9A  90D8               	bcf	status,0,c
  7765  010F9C  3432               	rlcf	_readIndex,w,c
  7766  010F9E  6ED9               	movwf	fsr2l,c
  7767  010FA0  3433               	rlcf	_readIndex+1,w,c
  7768  010FA2  6EDA               	movwf	fsr2h,c
  7769  010FA4  0E46               	movlw	low _readings
  7770  010FA6  26D9               	addwf	fsr2l,f,c
  7771  010FA8  0E02               	movlw	high _readings
  7772  010FAA  22DA               	addwfc	fsr2h,f,c
  7773  010FAC  0100               	movlb	0	; () banked
  7774  010FAE  C060  FFDE         	movff	?_FunctReadADC,postinc2
  7775  010FB2  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;dans.c: 60: total = total + readings[readIndex];
  7779  010FB6  90D8               	bcf	status,0,c
  7780  010FB8  3432               	rlcf	_readIndex,w,c
  7781  010FBA  6ED9               	movwf	fsr2l,c
  7782  010FBC  3433               	rlcf	_readIndex+1,w,c
  7783  010FBE  6EDA               	movwf	fsr2h,c
  7784  010FC0  0E46               	movlw	low _readings
  7785  010FC2  26D9               	addwf	fsr2l,f,c
  7786  010FC4  0E02               	movlw	high _readings
  7787  010FC6  22DA               	addwfc	fsr2h,f,c
  7788  010FC8  CFDE F0D7          	movff	postinc2,??_ADCAverage
  7789  010FCC  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
  7790  010FD0  0101               	movlb	1	; () banked
  7791  010FD2  5140               	movf	_total& (0+255),w,b
  7792  010FD4  0100               	movlb	0	; () banked
  7793  010FD6  25D7               	addwf	??_ADCAverage& (0+255),w,b
  7794  010FD8  0101               	movlb	1	; () banked
  7795  010FDA  6F40               	movwf	_total& (0+255),b
  7796  010FDC  5141               	movf	(_total+1)& (0+255),w,b
  7797  010FDE  0100               	movlb	0	; () banked
  7798  010FE0  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
  7799  010FE2  0101               	movlb	1	; () banked
  7800  010FE4  6F41               	movwf	(_total+1)& (0+255),b
  7801                           
  7802                           ; BSR set to: 1
  7803                           ;dans.c: 62: readIndex++;
  7804  010FE6  4A32               	infsnz	_readIndex,f,c
  7805  010FE8  2A33               	incf	_readIndex+1,f,c
  7806                           
  7807                           ; BSR set to: 1
  7808                           ;dans.c: 65: if (readIndex >= numReadings) {
  7809  010FEA  51F1               	movf	_numReadings& (0+255),w,b
  7810  010FEC  5C32               	subwf	_readIndex,w,c
  7811  010FEE  5033               	movf	_readIndex+1,w,c
  7812  010FF0  0A80               	xorlw	128
  7813  010FF2  0100               	movlb	0	; () banked
  7814  010FF4  6FD7               	movwf	??_ADCAverage& (0+255),b
  7815  010FF6  0101               	movlb	1	; () banked
  7816  010FF8  51F2               	movf	(_numReadings+1)& (0+255),w,b
  7817  010FFA  0A80               	xorlw	128
  7818  010FFC  0100               	movlb	0	; () banked
  7819  010FFE  59D7               	subwfb	??_ADCAverage& (0+255),w,b
  7820  011000  A0D8               	btfss	status,0,c
  7821  011002  D004               	goto	l2334
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;dans.c: 67: readIndex = 0;
  7825  011004  0E00               	movlw	0
  7826  011006  6E33               	movwf	_readIndex+1,c
  7827  011008  0E00               	movlw	0
  7828  01100A  6E32               	movwf	_readIndex,c
  7829  01100C                     l2334:
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;dans.c: 68: }
  7833                           ;dans.c: 71: average = total / numReadings;
  7834                           
  7835                           ; BSR set to: 0
  7836  01100C  C140  F060         	movff	_total,___awdiv@dividend
  7837  011010  C141  F061         	movff	_total+1,___awdiv@dividend+1
  7838  011014  C1F1  F062         	movff	_numReadings,___awdiv@divisor
  7839  011018  C1F2  F063         	movff	_numReadings+1,___awdiv@divisor+1
  7840  01101C  EC92  F0A2         	call	___awdiv	;wreg free
  7841  011020  C060  F13E         	movff	?___awdiv,_average
  7842  011024  C061  F13F         	movff	?___awdiv+1,_average+1
  7843                           
  7844                           ;dans.c: 72: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7845  011028  C13E  F060         	movff	_average,___xxtofl@val
  7846  01102C  C13F  F061         	movff	_average+1,___xxtofl@val+1
  7847  011030  0100               	movlb	0	; () banked
  7848  011032  0E00               	movlw	0
  7849  011034  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  7850  011036  0EFF               	movlw	-1
  7851  011038  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  7852  01103A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  7853  01103C  0E01               	movlw	1
  7854  01103E  ECAC  F096         	call	___xxtofl
  7855  011042  C060  F0D9         	movff	?___xxtofl,_ADCAverage$15818
  7856  011046  C061  F0DA         	movff	?___xxtofl+1,_ADCAverage$15818+1
  7857  01104A  C062  F0DB         	movff	?___xxtofl+2,_ADCAverage$15818+2
  7858  01104E  C063  F0DC         	movff	?___xxtofl+3,_ADCAverage$15818+3
  7859                           
  7860                           ;dans.c: 72: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7861  011052  0E00               	movlw	0
  7862  011054  0100               	movlb	0	; () banked
  7863  011056  6FC6               	movwf	pow@y& (0+255),b
  7864  011058  0E00               	movlw	0
  7865  01105A  6FC7               	movwf	(pow@y+1)& (0+255),b
  7866  01105C  0E00               	movlw	0
  7867  01105E  6FC8               	movwf	(pow@y+2)& (0+255),b
  7868  011060  0E40               	movlw	64
  7869  011062  6FC9               	movwf	(pow@y+3)& (0+255),b
  7870  011064  C0D9  F0C2         	movff	_ADCAverage$15818,pow@x
  7871  011068  C0DA  F0C3         	movff	_ADCAverage$15818+1,pow@x+1
  7872  01106C  C0DB  F0C4         	movff	_ADCAverage$15818+2,pow@x+2
  7873  011070  C0DC  F0C5         	movff	_ADCAverage$15818+3,pow@x+3
  7874  011074  EC49  F090         	call	_pow	;wreg free
  7875  011078  C0C2  F0DD         	movff	?_pow,_ADCAverage$15819
  7876  01107C  C0C3  F0DE         	movff	?_pow+1,_ADCAverage$15819+1
  7877  011080  C0C4  F0DF         	movff	?_pow+2,_ADCAverage$15819+2
  7878  011084  C0C5  F0E0         	movff	?_pow+3,_ADCAverage$15819+3
  7879                           
  7880                           ;dans.c: 72: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7881  011088  C13E  F060         	movff	_average,___xxtofl@val
  7882  01108C  C13F  F061         	movff	_average+1,___xxtofl@val+1
  7883  011090  0100               	movlb	0	; () banked
  7884  011092  0E00               	movlw	0
  7885  011094  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  7886  011096  0EFF               	movlw	-1
  7887  011098  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  7888  01109A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  7889  01109C  0E01               	movlw	1
  7890  01109E  ECAC  F096         	call	___xxtofl
  7891  0110A2  C060  F0E1         	movff	?___xxtofl,_ADCAverage$15820
  7892  0110A6  C061  F0E2         	movff	?___xxtofl+1,_ADCAverage$15820+1
  7893  0110AA  C062  F0E3         	movff	?___xxtofl+2,_ADCAverage$15820+2
  7894  0110AE  C063  F0E4         	movff	?___xxtofl+3,_ADCAverage$15820+3
  7895                           
  7896                           ;dans.c: 72: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7897  0110B2  0E00               	movlw	0
  7898  0110B4  0100               	movlb	0	; () banked
  7899  0110B6  6FC6               	movwf	pow@y& (0+255),b
  7900  0110B8  0E00               	movlw	0
  7901  0110BA  6FC7               	movwf	(pow@y+1)& (0+255),b
  7902  0110BC  0E40               	movlw	64
  7903  0110BE  6FC8               	movwf	(pow@y+2)& (0+255),b
  7904  0110C0  0E40               	movlw	64
  7905  0110C2  6FC9               	movwf	(pow@y+3)& (0+255),b
  7906  0110C4  C0E1  F0C2         	movff	_ADCAverage$15820,pow@x
  7907  0110C8  C0E2  F0C3         	movff	_ADCAverage$15820+1,pow@x+1
  7908  0110CC  C0E3  F0C4         	movff	_ADCAverage$15820+2,pow@x+2
  7909  0110D0  C0E4  F0C5         	movff	_ADCAverage$15820+3,pow@x+3
  7910  0110D4  EC49  F090         	call	_pow	;wreg free
  7911  0110D8  C0C2  F0E5         	movff	?_pow,_ADCAverage$15821
  7912  0110DC  C0C3  F0E6         	movff	?_pow+1,_ADCAverage$15821+1
  7913  0110E0  C0C4  F0E7         	movff	?_pow+2,_ADCAverage$15821+2
  7914  0110E4  C0C5  F0E8         	movff	?_pow+3,_ADCAverage$15821+3
  7915                           
  7916                           ;dans.c: 72: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7917  0110E8  0EA6               	movlw	166
  7918  0110EA  0100               	movlb	0	; () banked
  7919  0110EC  6F72               	movwf	___flmul@a& (0+255),b
  7920  0110EE  0E9B               	movlw	155
  7921  0110F0  6F73               	movwf	(___flmul@a+1)& (0+255),b
  7922  0110F2  0EC4               	movlw	196
  7923  0110F4  6F74               	movwf	(___flmul@a+2)& (0+255),b
  7924  0110F6  0E3A               	movlw	58
  7925  0110F8  6F75               	movwf	(___flmul@a+3)& (0+255),b
  7926  0110FA  C0DD  F06E         	movff	_ADCAverage$15819,___flmul@b
  7927  0110FE  C0DE  F06F         	movff	_ADCAverage$15819+1,___flmul@b+1
  7928  011102  C0DF  F070         	movff	_ADCAverage$15819+2,___flmul@b+2
  7929  011106  C0E0  F071         	movff	_ADCAverage$15819+3,___flmul@b+3
  7930  01110A  EC61  F084         	call	___flmul	;wreg free
  7931  01110E  C06E  F08F         	movff	?___flmul,___fladd@a
  7932  011112  C06F  F090         	movff	?___flmul+1,___fladd@a+1
  7933  011116  C070  F091         	movff	?___flmul+2,___fladd@a+2
  7934  01111A  C071  F092         	movff	?___flmul+3,___fladd@a+3
  7935  01111E  0E87               	movlw	135
  7936  011120  0100               	movlb	0	; () banked
  7937  011122  6F72               	movwf	___flmul@a& (0+255),b
  7938  011124  0E97               	movlw	151
  7939  011126  6F73               	movwf	(___flmul@a+1)& (0+255),b
  7940  011128  0E71               	movlw	113
  7941  01112A  6F74               	movwf	(___flmul@a+2)& (0+255),b
  7942  01112C  0EB5               	movlw	181
  7943  01112E  6F75               	movwf	(___flmul@a+3)& (0+255),b
  7944  011130  C0E5  F06E         	movff	_ADCAverage$15821,___flmul@b
  7945  011134  C0E6  F06F         	movff	_ADCAverage$15821+1,___flmul@b+1
  7946  011138  C0E7  F070         	movff	_ADCAverage$15821+2,___flmul@b+2
  7947  01113C  C0E8  F071         	movff	_ADCAverage$15821+3,___flmul@b+3
  7948  011140  EC61  F084         	call	___flmul	;wreg free
  7949  011144  C06E  F08B         	movff	?___flmul,___fladd@b
  7950  011148  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
  7951  01114C  C070  F08D         	movff	?___flmul+2,___fladd@b+2
  7952  011150  C071  F08E         	movff	?___flmul+3,___fladd@b+3
  7953  011154  EC0A  F086         	call	___fladd	;wreg free
  7954  011158  C08B  F0E9         	movff	?___fladd,_ADCAverage$15822
  7955  01115C  C08C  F0EA         	movff	?___fladd+1,_ADCAverage$15822+1
  7956  011160  C08D  F0EB         	movff	?___fladd+2,_ADCAverage$15822+2
  7957  011164  C08E  F0EC         	movff	?___fladd+3,_ADCAverage$15822+3
  7958                           
  7959                           ;dans.c: 72: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  7960  011168  0E8C               	movlw	140
  7961  01116A  0100               	movlb	0	; () banked
  7962  01116C  6F72               	movwf	___flmul@a& (0+255),b
  7963  01116E  0EB9               	movlw	185
  7964  011170  6F73               	movwf	(___flmul@a+1)& (0+255),b
  7965  011172  0E6B               	movlw	107
  7966  011174  6F74               	movwf	(___flmul@a+2)& (0+255),b
  7967  011176  0E3F               	movlw	63
  7968  011178  6F75               	movwf	(___flmul@a+3)& (0+255),b
  7969  01117A  C13E  F060         	movff	_average,___xxtofl@val
  7970  01117E  C13F  F061         	movff	_average+1,___xxtofl@val+1
  7971  011182  0E00               	movlw	0
  7972  011184  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  7973  011186  0EFF               	movlw	-1
  7974  011188  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  7975  01118A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  7976  01118C  0E01               	movlw	1
  7977  01118E  ECAC  F096         	call	___xxtofl
  7978  011192  C060  F06E         	movff	?___xxtofl,___flmul@b
  7979  011196  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
  7980  01119A  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
  7981  01119E  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
  7982  0111A2  EC61  F084         	call	___flmul	;wreg free
  7983  0111A6  C06E  F087         	movff	?___flmul,___flneg@f1
  7984  0111AA  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
  7985  0111AE  C070  F089         	movff	?___flmul+2,___flneg@f1+2
  7986  0111B2  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
  7987  0111B6  EC49  F0AB         	call	___flneg	;wreg free
  7988  0111BA  C087  F08F         	movff	?___flneg,___fladd@a
  7989  0111BE  C088  F090         	movff	?___flneg+1,___fladd@a+1
  7990  0111C2  C089  F091         	movff	?___flneg+2,___fladd@a+2
  7991  0111C6  C08A  F092         	movff	?___flneg+3,___fladd@a+3
  7992  0111CA  C0E9  F08B         	movff	_ADCAverage$15822,___fladd@b
  7993  0111CE  C0EA  F08C         	movff	_ADCAverage$15822+1,___fladd@b+1
  7994  0111D2  C0EB  F08D         	movff	_ADCAverage$15822+2,___fladd@b+2
  7995  0111D6  C0EC  F08E         	movff	_ADCAverage$15822+3,___fladd@b+3
  7996  0111DA  EC0A  F086         	call	___fladd	;wreg free
  7997  0111DE  C08B  F0ED         	movff	?___fladd,_ADCAverage$15823
  7998  0111E2  C08C  F0EE         	movff	?___fladd+1,_ADCAverage$15823+1
  7999  0111E6  C08D  F0EF         	movff	?___fladd+2,_ADCAverage$15823+2
  8000  0111EA  C08E  F0F0         	movff	?___fladd+3,_ADCAverage$15823+3
  8001                           
  8002                           ;dans.c: 72: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
  8003  0111EE  0E7B               	movlw	123
  8004  0111F0  0100               	movlb	0	; () banked
  8005  0111F2  6F8F               	movwf	___fladd@a& (0+255),b
  8006  0111F4  0E54               	movlw	84
  8007  0111F6  6F90               	movwf	(___fladd@a+1)& (0+255),b
  8008  0111F8  0E63               	movlw	99
  8009  0111FA  6F91               	movwf	(___fladd@a+2)& (0+255),b
  8010  0111FC  0E43               	movlw	67
  8011  0111FE  6F92               	movwf	(___fladd@a+3)& (0+255),b
  8012  011200  C0ED  F08B         	movff	_ADCAverage$15823,___fladd@b
  8013  011204  C0EE  F08C         	movff	_ADCAverage$15823+1,___fladd@b+1
  8014  011208  C0EF  F08D         	movff	_ADCAverage$15823+2,___fladd@b+2
  8015  01120C  C0F0  F08E         	movff	_ADCAverage$15823+3,___fladd@b+3
  8016  011210  EC0A  F086         	call	___fladd	;wreg free
  8017  011214  C08B  F09F         	movff	?___fladd,___fltol@f1
  8018  011218  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
  8019  01121C  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
  8020  011220  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
  8021  011224  EC8F  F09D         	call	___fltol	;wreg free
  8022  011228  C09F  F13E         	movff	?___fltol,_average
  8023  01122C  C0A0  F13F         	movff	?___fltol+1,_average+1
  8024                           
  8025                           ;dans.c: 75: HMI_SetNumber(average);
  8026  011230  C13E  F076         	movff	_average,HMI_SetNumber@pInput
  8027  011234  C13F  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  8028  011238  EC25  F0AC         	call	_HMI_SetNumber	;wreg free
  8029                           
  8030                           ;dans.c: 76: HMI_Render();
  8031  01123C  ECC8  F0AA         	call	_HMI_Render	;wreg free
  8032  011240  0012               	return	
  8033  011242                     __end_of_ADCAverage:
  8034                           	opt stack 0
  8035                           tosu	equ	0xFFF
  8036                           tosh	equ	0xFFE
  8037                           tosl	equ	0xFFD
  8038                           pclath	equ	0xFFA
  8039                           tblptru	equ	0xFF8
  8040                           tblptrh	equ	0xFF7
  8041                           tblptrl	equ	0xFF6
  8042                           tablat	equ	0xFF5
  8043                           prodh	equ	0xFF4
  8044                           prodl	equ	0xFF3
  8045                           postinc0	equ	0xFEE
  8046                           wreg	equ	0xFE8
  8047                           postdec1	equ	0xFE5
  8048                           fsr1h	equ	0xFE2
  8049                           fsr1l	equ	0xFE1
  8050                           indf2	equ	0xFDF
  8051                           postinc2	equ	0xFDE
  8052                           postdec2	equ	0xFDD
  8053                           fsr2h	equ	0xFDA
  8054                           fsr2l	equ	0xFD9
  8055                           status	equ	0xFD8
  8056                           
  8057 ;; *************** function _pow *****************
  8058 ;; Defined at:
  8059 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;  x               4   98[BANK0 ] int 
  8062 ;;  y               4  102[BANK0 ] int 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  yi              4  115[BANK0 ] unsigned long 
  8065 ;;  sign            1  114[BANK0 ] unsigned char 
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  4   98[BANK0 ] unsigned char 
  8068 ;; Registers used:
  8069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8075 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8079 ;;Total ram usage:       21 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:   10
  8082 ;; This function calls:
  8083 ;;		___flge
  8084 ;;		___flmul
  8085 ;;		___flneg
  8086 ;;		___fltol
  8087 ;;		___xxtofl
  8088 ;;		_exp
  8089 ;;		_log
  8090 ;; This function is called by:
  8091 ;;		_ADCAverage
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text22
  8096  012092                     __ptext22:
  8097                           	opt stack 0
  8098  012092                     _pow:
  8099                           	opt stack 18
  8100                           
  8101                           ;incstack = 0
  8102  012092  0E00               	movlw	0
  8103  012094  0100               	movlb	0	; () banked
  8104  012096  6FD2               	movwf	pow@sign& (0+255),b
  8105                           
  8106                           ; BSR set to: 0
  8107  012098  51C2               	movf	pow@x& (0+255),w,b
  8108  01209A  11C3               	iorwf	(pow@x+1)& (0+255),w,b
  8109  01209C  11C4               	iorwf	(pow@x+2)& (0+255),w,b
  8110  01209E  11C5               	iorwf	(pow@x+3)& (0+255),w,b
  8111  0120A0  A4D8               	btfss	status,2,c
  8112  0120A2  D024               	goto	l2926
  8113                           
  8114                           ; BSR set to: 0
  8115  0120A4  0E00               	movlw	0
  8116  0120A6  6F60               	movwf	___flge@ff1& (0+255),b
  8117  0120A8  0E00               	movlw	0
  8118  0120AA  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  8119  0120AC  0E00               	movlw	0
  8120  0120AE  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  8121  0120B0  0E00               	movlw	0
  8122  0120B2  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  8123  0120B4  C0C6  F064         	movff	pow@y,___flge@ff2
  8124  0120B8  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
  8125  0120BC  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
  8126  0120C0  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
  8127  0120C4  EC7A  F09A         	call	___flge	;wreg free
  8128  0120C8  0100               	movlb	0	; () banked
  8129  0120CA  A0D8               	btfss	status,0,c
  8130  0120CC  D005               	goto	l2927
  8131                           
  8132                           ; BSR set to: 0
  8133  0120CE  0E00               	movlw	0
  8134  0120D0  0101               	movlb	1	; () banked
  8135  0120D2  6F1B               	movwf	(_errno+1)& (0+255),b
  8136  0120D4  0E21               	movlw	33
  8137  0120D6  6F1A               	movwf	_errno& (0+255),b
  8138  0120D8                     l2927:
  8139  0120D8  0E00               	movlw	0
  8140  0120DA  0100               	movlb	0	; () banked
  8141  0120DC  6FC2               	movwf	?_pow& (0+255),b
  8142  0120DE  0E00               	movlw	0
  8143  0120E0  6FC3               	movwf	(?_pow+1)& (0+255),b
  8144  0120E2  0E00               	movlw	0
  8145  0120E4  6FC4               	movwf	(?_pow+2)& (0+255),b
  8146  0120E6  0E00               	movlw	0
  8147  0120E8  6FC5               	movwf	(?_pow+3)& (0+255),b
  8148                           
  8149                           ; BSR set to: 0
  8150  0120EA  0012               	return	
  8151  0120EC                     l2926:
  8152                           
  8153                           ; BSR set to: 0
  8154                           
  8155                           ; BSR set to: 0
  8156  0120EC  51C6               	movf	pow@y& (0+255),w,b
  8157  0120EE  11C7               	iorwf	(pow@y+1)& (0+255),w,b
  8158  0120F0  11C8               	iorwf	(pow@y+2)& (0+255),w,b
  8159  0120F2  11C9               	iorwf	(pow@y+3)& (0+255),w,b
  8160  0120F4  A4D8               	btfss	status,2,c
  8161  0120F6  D009               	goto	l2929
  8162                           
  8163                           ; BSR set to: 0
  8164  0120F8  0E00               	movlw	0
  8165  0120FA  6FC2               	movwf	?_pow& (0+255),b
  8166  0120FC  0E00               	movlw	0
  8167  0120FE  6FC3               	movwf	(?_pow+1)& (0+255),b
  8168  012100  0E80               	movlw	128
  8169  012102  6FC4               	movwf	(?_pow+2)& (0+255),b
  8170  012104  0E3F               	movlw	63
  8171  012106  6FC5               	movwf	(?_pow+3)& (0+255),b
  8172                           
  8173                           ; BSR set to: 0
  8174  012108  0012               	return	
  8175  01210A                     l2929:
  8176                           
  8177                           ; BSR set to: 0
  8178                           
  8179                           ; BSR set to: 0
  8180  01210A  AFC5               	btfss	(pow@x+3)& (0+255),7,b
  8181  01210C  D04F               	goto	l2930
  8182                           
  8183                           ; BSR set to: 0
  8184  01210E  C0C6  F09F         	movff	pow@y,___fltol@f1
  8185  012112  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
  8186  012116  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
  8187  01211A  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
  8188  01211E  EC8F  F09D         	call	___fltol	;wreg free
  8189  012122  C09F  F0D3         	movff	?___fltol,pow@yi
  8190  012126  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
  8191  01212A  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
  8192  01212E  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
  8193  012132  C0D3  F060         	movff	pow@yi,___xxtofl@val
  8194  012136  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
  8195  01213A  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
  8196  01213E  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
  8197  012142  0E00               	movlw	0
  8198  012144  ECAC  F096         	call	___xxtofl
  8199  012148  0100               	movlb	0	; () banked
  8200  01214A  51C6               	movf	pow@y& (0+255),w,b
  8201  01214C  1960               	xorwf	?___xxtofl& (0+255),w,b
  8202  01214E  E10A               	bnz	u12360
  8203  012150  51C7               	movf	(pow@y+1)& (0+255),w,b
  8204  012152  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
  8205  012154  E107               	bnz	u12360
  8206  012156  51C8               	movf	(pow@y+2)& (0+255),w,b
  8207  012158  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
  8208  01215A  E104               	bnz	u12360
  8209  01215C  51C9               	movf	(pow@y+3)& (0+255),w,b
  8210  01215E  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
  8211  012160  B4D8               	btfsc	status,2,c
  8212  012162  D00F               	goto	l2931
  8213  012164                     u12360:
  8214                           
  8215                           ; BSR set to: 0
  8216  012164  0E00               	movlw	0
  8217  012166  0101               	movlb	1	; () banked
  8218  012168  6F1B               	movwf	(_errno+1)& (0+255),b
  8219  01216A  0E21               	movlw	33
  8220  01216C  6F1A               	movwf	_errno& (0+255),b
  8221  01216E  0E00               	movlw	0
  8222  012170  0100               	movlb	0	; () banked
  8223  012172  6FC2               	movwf	?_pow& (0+255),b
  8224  012174  0E00               	movlw	0
  8225  012176  6FC3               	movwf	(?_pow+1)& (0+255),b
  8226  012178  0E00               	movlw	0
  8227  01217A  6FC4               	movwf	(?_pow+2)& (0+255),b
  8228  01217C  0E00               	movlw	0
  8229  01217E  6FC5               	movwf	(?_pow+3)& (0+255),b
  8230                           
  8231                           ; BSR set to: 0
  8232  012180  0012               	return	
  8233  012182                     l2931:
  8234                           
  8235                           ; BSR set to: 0
  8236                           
  8237                           ; BSR set to: 0
  8238  012182  51D3               	movf	pow@yi& (0+255),w,b
  8239  012184  0B01               	andlw	1
  8240  012186  6FD2               	movwf	pow@sign& (0+255),b
  8241                           
  8242                           ; BSR set to: 0
  8243  012188  C0C2  F087         	movff	pow@x,___flneg@f1
  8244  01218C  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
  8245  012190  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
  8246  012194  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
  8247  012198  EC49  F0AB         	call	___flneg	;wreg free
  8248  01219C  C087  F0C2         	movff	?___flneg,pow@x
  8249  0121A0  C088  F0C3         	movff	?___flneg+1,pow@x+1
  8250  0121A4  C089  F0C4         	movff	?___flneg+2,pow@x+2
  8251  0121A8  C08A  F0C5         	movff	?___flneg+3,pow@x+3
  8252  0121AC                     l2930:
  8253  0121AC  C0C2  F0AF         	movff	pow@x,log@x
  8254  0121B0  C0C3  F0B0         	movff	pow@x+1,log@x+1
  8255  0121B4  C0C4  F0B1         	movff	pow@x+2,log@x+2
  8256  0121B8  C0C5  F0B2         	movff	pow@x+3,log@x+3
  8257  0121BC  EC84  F094         	call	_log	;wreg free
  8258  0121C0  C0AF  F0CA         	movff	?_log,_pow$15824
  8259  0121C4  C0B0  F0CB         	movff	?_log+1,_pow$15824+1
  8260  0121C8  C0B1  F0CC         	movff	?_log+2,_pow$15824+2
  8261  0121CC  C0B2  F0CD         	movff	?_log+3,_pow$15824+3
  8262  0121D0  C0CA  F06E         	movff	_pow$15824,___flmul@b
  8263  0121D4  C0CB  F06F         	movff	_pow$15824+1,___flmul@b+1
  8264  0121D8  C0CC  F070         	movff	_pow$15824+2,___flmul@b+2
  8265  0121DC  C0CD  F071         	movff	_pow$15824+3,___flmul@b+3
  8266  0121E0  C0C6  F072         	movff	pow@y,___flmul@a
  8267  0121E4  C0C7  F073         	movff	pow@y+1,___flmul@a+1
  8268  0121E8  C0C8  F074         	movff	pow@y+2,___flmul@a+2
  8269  0121EC  C0C9  F075         	movff	pow@y+3,___flmul@a+3
  8270  0121F0  EC61  F084         	call	___flmul	;wreg free
  8271  0121F4  C06E  F0CE         	movff	?___flmul,_pow$15825
  8272  0121F8  C06F  F0CF         	movff	?___flmul+1,_pow$15825+1
  8273  0121FC  C070  F0D0         	movff	?___flmul+2,_pow$15825+2
  8274  012200  C071  F0D1         	movff	?___flmul+3,_pow$15825+3
  8275  012204  C0CE  F0B7         	movff	_pow$15825,exp@x
  8276  012208  C0CF  F0B8         	movff	_pow$15825+1,exp@x+1
  8277  01220C  C0D0  F0B9         	movff	_pow$15825+2,exp@x+2
  8278  012210  C0D1  F0BA         	movff	_pow$15825+3,exp@x+3
  8279  012214  EC13  F08D         	call	_exp	;wreg free
  8280  012218  C0B7  F0C2         	movff	?_exp,pow@x
  8281  01221C  C0B8  F0C3         	movff	?_exp+1,pow@x+1
  8282  012220  C0B9  F0C4         	movff	?_exp+2,pow@x+2
  8283  012224  C0BA  F0C5         	movff	?_exp+3,pow@x+3
  8284  012228  0100               	movlb	0	; () banked
  8285  01222A  51D2               	movf	pow@sign& (0+255),w,b
  8286  01222C  B4D8               	btfsc	status,2,c
  8287  01222E  D013               	goto	l2932
  8288                           
  8289                           ; BSR set to: 0
  8290  012230  C0C2  F087         	movff	pow@x,___flneg@f1
  8291  012234  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
  8292  012238  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
  8293  01223C  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
  8294  012240  EC49  F0AB         	call	___flneg	;wreg free
  8295  012244  C087  F0C2         	movff	?___flneg,?_pow
  8296  012248  C088  F0C3         	movff	?___flneg+1,?_pow+1
  8297  01224C  C089  F0C4         	movff	?___flneg+2,?_pow+2
  8298  012250  C08A  F0C5         	movff	?___flneg+3,?_pow+3
  8299  012254  0012               	return	
  8300  012256                     l2932:
  8301                           
  8302                           ; BSR set to: 0
  8303  012256  C0C2  F0C2         	movff	pow@x,?_pow
  8304  01225A  C0C3  F0C3         	movff	pow@x+1,?_pow+1
  8305  01225E  C0C4  F0C4         	movff	pow@x+2,?_pow+2
  8306  012262  C0C5  F0C5         	movff	pow@x+3,?_pow+3
  8307  012266  0012               	return		;funcret
  8308  012268                     __end_of_pow:
  8309                           	opt stack 0
  8310                           tosu	equ	0xFFF
  8311                           tosh	equ	0xFFE
  8312                           tosl	equ	0xFFD
  8313                           pclath	equ	0xFFA
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           postinc0	equ	0xFEE
  8321                           wreg	equ	0xFE8
  8322                           postdec1	equ	0xFE5
  8323                           fsr1h	equ	0xFE2
  8324                           fsr1l	equ	0xFE1
  8325                           indf2	equ	0xFDF
  8326                           postinc2	equ	0xFDE
  8327                           postdec2	equ	0xFDD
  8328                           fsr2h	equ	0xFDA
  8329                           fsr2l	equ	0xFD9
  8330                           status	equ	0xFD8
  8331                           
  8332 ;; *************** function _log *****************
  8333 ;; Defined at:
  8334 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  x               4   79[BANK0 ] unsigned char 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  exponent        2   83[BANK0 ] int 
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  4   79[BANK0 ] int 
  8341 ;; Registers used:
  8342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8348 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;Total ram usage:        6 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    9
  8355 ;; This function calls:
  8356 ;;		___fladd
  8357 ;;		___flmul
  8358 ;;		___xxtofl
  8359 ;;		_eval_poly
  8360 ;;		_frexp
  8361 ;; This function is called by:
  8362 ;;		_pow
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text23
  8367  012908                     __ptext23:
  8368                           	opt stack 0
  8369  012908                     _log:
  8370                           	opt stack 18
  8371                           
  8372                           ;incstack = 0
  8373  012908  0100               	movlb	0	; () banked
  8374  01290A  AFB2               	btfss	(log@x+3)& (0+255),7,b
  8375  01290C  D00F               	goto	l3128
  8376                           
  8377                           ; BSR set to: 0
  8378  01290E  0E00               	movlw	0
  8379  012910  0101               	movlb	1	; () banked
  8380  012912  6F1B               	movwf	(_errno+1)& (0+255),b
  8381  012914  0E21               	movlw	33
  8382  012916  6F1A               	movwf	_errno& (0+255),b
  8383  012918  0E00               	movlw	0
  8384  01291A  0100               	movlb	0	; () banked
  8385  01291C  6FAF               	movwf	?_log& (0+255),b
  8386  01291E  0E00               	movlw	0
  8387  012920  6FB0               	movwf	(?_log+1)& (0+255),b
  8388  012922  0E00               	movlw	0
  8389  012924  6FB1               	movwf	(?_log+2)& (0+255),b
  8390  012926  0E00               	movlw	0
  8391  012928  6FB2               	movwf	(?_log+3)& (0+255),b
  8392                           
  8393                           ; BSR set to: 0
  8394  01292A  0012               	return	
  8395  01292C                     l3128:
  8396                           
  8397                           ; BSR set to: 0
  8398                           
  8399                           ; BSR set to: 0
  8400  01292C  51AF               	movf	log@x& (0+255),w,b
  8401  01292E  11B0               	iorwf	(log@x+1)& (0+255),w,b
  8402  012930  11B1               	iorwf	(log@x+2)& (0+255),w,b
  8403  012932  11B2               	iorwf	(log@x+3)& (0+255),w,b
  8404  012934  A4D8               	btfss	status,2,c
  8405  012936  D00F               	goto	l3130
  8406                           
  8407                           ; BSR set to: 0
  8408  012938  0E00               	movlw	0
  8409  01293A  0101               	movlb	1	; () banked
  8410  01293C  6F1B               	movwf	(_errno+1)& (0+255),b
  8411  01293E  0E22               	movlw	34
  8412  012940  6F1A               	movwf	_errno& (0+255),b
  8413  012942  0E00               	movlw	0
  8414  012944  0100               	movlb	0	; () banked
  8415  012946  6FAF               	movwf	?_log& (0+255),b
  8416  012948  0E00               	movlw	0
  8417  01294A  6FB0               	movwf	(?_log+1)& (0+255),b
  8418  01294C  0E00               	movlw	0
  8419  01294E  6FB1               	movwf	(?_log+2)& (0+255),b
  8420  012950  0E00               	movlw	0
  8421  012952  6FB2               	movwf	(?_log+3)& (0+255),b
  8422                           
  8423                           ; BSR set to: 0
  8424  012954  0012               	return	
  8425  012956                     l3130:
  8426                           
  8427                           ; BSR set to: 0
  8428                           
  8429                           ; BSR set to: 0
  8430  012956  0E00               	movlw	0
  8431  012958  6F72               	movwf	___flmul@a& (0+255),b
  8432  01295A  0E00               	movlw	0
  8433  01295C  6F73               	movwf	(___flmul@a+1)& (0+255),b
  8434  01295E  0E00               	movlw	0
  8435  012960  6F74               	movwf	(___flmul@a+2)& (0+255),b
  8436  012962  0E40               	movlw	64
  8437  012964  6F75               	movwf	(___flmul@a+3)& (0+255),b
  8438  012966  0EB3               	movlw	low log@exponent
  8439  012968  6F64               	movwf	frexp@eptr& (0+255),b
  8440  01296A  0E00               	movlw	high log@exponent
  8441  01296C  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  8442  01296E  C0AF  F060         	movff	log@x,frexp@value
  8443  012972  C0B0  F061         	movff	log@x+1,frexp@value+1
  8444  012976  C0B1  F062         	movff	log@x+2,frexp@value+2
  8445  01297A  C0B2  F063         	movff	log@x+3,frexp@value+3
  8446  01297E  ECB7  F09F         	call	_frexp	;wreg free
  8447  012982  C060  F06E         	movff	?_frexp,___flmul@b
  8448  012986  C061  F06F         	movff	?_frexp+1,___flmul@b+1
  8449  01298A  C062  F070         	movff	?_frexp+2,___flmul@b+2
  8450  01298E  C063  F071         	movff	?_frexp+3,___flmul@b+3
  8451  012992  EC61  F084         	call	___flmul	;wreg free
  8452  012996  C06E  F08B         	movff	?___flmul,___fladd@b
  8453  01299A  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
  8454  01299E  C070  F08D         	movff	?___flmul+2,___fladd@b+2
  8455  0129A2  C071  F08E         	movff	?___flmul+3,___fladd@b+3
  8456  0129A6  0E00               	movlw	0
  8457  0129A8  0100               	movlb	0	; () banked
  8458  0129AA  6F8F               	movwf	___fladd@a& (0+255),b
  8459  0129AC  0E00               	movlw	0
  8460  0129AE  6F90               	movwf	(___fladd@a+1)& (0+255),b
  8461  0129B0  0E80               	movlw	128
  8462  0129B2  6F91               	movwf	(___fladd@a+2)& (0+255),b
  8463  0129B4  0EBF               	movlw	191
  8464  0129B6  6F92               	movwf	(___fladd@a+3)& (0+255),b
  8465  0129B8  EC0A  F086         	call	___fladd	;wreg free
  8466  0129BC  C08B  F0AF         	movff	?___fladd,log@x
  8467  0129C0  C08C  F0B0         	movff	?___fladd+1,log@x+1
  8468  0129C4  C08D  F0B1         	movff	?___fladd+2,log@x+2
  8469  0129C8  C08E  F0B2         	movff	?___fladd+3,log@x+3
  8470  0129CC  0100               	movlb	0	; () banked
  8471  0129CE  07B3               	decf	log@exponent& (0+255),f,b
  8472  0129D0  A0D8               	btfss	status,0,c
  8473  0129D2  07B4               	decf	(log@exponent+1)& (0+255),f,b
  8474                           
  8475                           ; BSR set to: 0
  8476  0129D4  C0AF  F09F         	movff	log@x,eval_poly@x
  8477  0129D8  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
  8478  0129DC  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
  8479  0129E0  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
  8480  0129E4  0E11               	movlw	low log@coeff
  8481  0129E6  6FA3               	movwf	eval_poly@d& (0+255),b
  8482  0129E8  0EFE               	movlw	high log@coeff
  8483  0129EA  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
  8484  0129EC  0E00               	movlw	0
  8485  0129EE  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
  8486  0129F0  0E08               	movlw	8
  8487  0129F2  6FA5               	movwf	eval_poly@n& (0+255),b
  8488  0129F4  EC1D  F09C         	call	_eval_poly	;wreg free
  8489  0129F8  C09F  F0AF         	movff	?_eval_poly,log@x
  8490  0129FC  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
  8491  012A00  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
  8492  012A04  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
  8493  012A08  0E18               	movlw	24
  8494  012A0A  0100               	movlb	0	; () banked
  8495  012A0C  6F72               	movwf	___flmul@a& (0+255),b
  8496  012A0E  0E72               	movlw	114
  8497  012A10  6F73               	movwf	(___flmul@a+1)& (0+255),b
  8498  012A12  0E31               	movlw	49
  8499  012A14  6F74               	movwf	(___flmul@a+2)& (0+255),b
  8500  012A16  0E3F               	movlw	63
  8501  012A18  6F75               	movwf	(___flmul@a+3)& (0+255),b
  8502  012A1A  C0B3  F060         	movff	log@exponent,___xxtofl@val
  8503  012A1E  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
  8504  012A22  0E00               	movlw	0
  8505  012A24  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  8506  012A26  0EFF               	movlw	-1
  8507  012A28  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  8508  012A2A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  8509  012A2C  0E01               	movlw	1
  8510  012A2E  ECAC  F096         	call	___xxtofl
  8511  012A32  C060  F06E         	movff	?___xxtofl,___flmul@b
  8512  012A36  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
  8513  012A3A  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
  8514  012A3E  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
  8515  012A42  EC61  F084         	call	___flmul	;wreg free
  8516  012A46  C06E  F08B         	movff	?___flmul,___fladd@b
  8517  012A4A  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
  8518  012A4E  C070  F08D         	movff	?___flmul+2,___fladd@b+2
  8519  012A52  C071  F08E         	movff	?___flmul+3,___fladd@b+3
  8520  012A56  C0AF  F08F         	movff	log@x,___fladd@a
  8521  012A5A  C0B0  F090         	movff	log@x+1,___fladd@a+1
  8522  012A5E  C0B1  F091         	movff	log@x+2,___fladd@a+2
  8523  012A62  C0B2  F092         	movff	log@x+3,___fladd@a+3
  8524  012A66  EC0A  F086         	call	___fladd	;wreg free
  8525  012A6A  C08B  F0AF         	movff	?___fladd,?_log
  8526  012A6E  C08C  F0B0         	movff	?___fladd+1,?_log+1
  8527  012A72  C08D  F0B1         	movff	?___fladd+2,?_log+2
  8528  012A76  C08E  F0B2         	movff	?___fladd+3,?_log+3
  8529  012A7A  0012               	return	
  8530  012A7C                     __end_of_log:
  8531                           	opt stack 0
  8532                           tosu	equ	0xFFF
  8533                           tosh	equ	0xFFE
  8534                           tosl	equ	0xFFD
  8535                           pclath	equ	0xFFA
  8536                           tblptru	equ	0xFF8
  8537                           tblptrh	equ	0xFF7
  8538                           tblptrl	equ	0xFF6
  8539                           tablat	equ	0xFF5
  8540                           prodh	equ	0xFF4
  8541                           prodl	equ	0xFF3
  8542                           postinc0	equ	0xFEE
  8543                           wreg	equ	0xFE8
  8544                           postdec1	equ	0xFE5
  8545                           fsr1h	equ	0xFE2
  8546                           fsr1l	equ	0xFE1
  8547                           indf2	equ	0xFDF
  8548                           postinc2	equ	0xFDE
  8549                           postdec2	equ	0xFDD
  8550                           fsr2h	equ	0xFDA
  8551                           fsr2l	equ	0xFD9
  8552                           status	equ	0xFD8
  8553                           
  8554 ;; *************** function _exp *****************
  8555 ;; Defined at:
  8556 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
  8557 ;; Parameters:    Size  Location     Type
  8558 ;;  x               4   87[BANK0 ] int 
  8559 ;; Auto vars:     Size  Location     Type
  8560 ;;  exponent        2   95[BANK0 ] int 
  8561 ;;  sign            1   97[BANK0 ] unsigned char 
  8562 ;; Return value:  Size  Location     Type
  8563 ;;                  4   87[BANK0 ] unsigned char 
  8564 ;; Registers used:
  8565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8566 ;; Tracked objects:
  8567 ;;		On entry : 0/0
  8568 ;;		On exit  : 0/0
  8569 ;;		Unchanged: 0/0
  8570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8571 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;Total ram usage:       11 bytes
  8576 ;; Hardware stack levels used:    1
  8577 ;; Hardware stack levels required when called:    9
  8578 ;; This function calls:
  8579 ;;		___fldiv
  8580 ;;		___flge
  8581 ;;		___flmul
  8582 ;;		___flneg
  8583 ;;		___flsub
  8584 ;;		___fltol
  8585 ;;		___xxtofl
  8586 ;;		_eval_poly
  8587 ;;		_floor
  8588 ;;		_ldexp
  8589 ;; This function is called by:
  8590 ;;		_pow
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           	psect	text24
  8595  011A26                     __ptext24:
  8596                           	opt stack 0
  8597  011A26                     _exp:
  8598                           	opt stack 18
  8599                           
  8600                           ;incstack = 0
  8601  011A26  0100               	movlb	0	; () banked
  8602  011A28  51B7               	movf	exp@x& (0+255),w,b
  8603  011A2A  11B8               	iorwf	(exp@x+1)& (0+255),w,b
  8604  011A2C  11B9               	iorwf	(exp@x+2)& (0+255),w,b
  8605  011A2E  11BA               	iorwf	(exp@x+3)& (0+255),w,b
  8606  011A30  A4D8               	btfss	status,2,c
  8607  011A32  D009               	goto	l3086
  8608                           
  8609                           ; BSR set to: 0
  8610  011A34  0E00               	movlw	0
  8611  011A36  6FB7               	movwf	?_exp& (0+255),b
  8612  011A38  0E00               	movlw	0
  8613  011A3A  6FB8               	movwf	(?_exp+1)& (0+255),b
  8614  011A3C  0E80               	movlw	128
  8615  011A3E  6FB9               	movwf	(?_exp+2)& (0+255),b
  8616  011A40  0E3F               	movlw	63
  8617  011A42  6FBA               	movwf	(?_exp+3)& (0+255),b
  8618                           
  8619                           ; BSR set to: 0
  8620  011A44  0012               	return	
  8621  011A46                     l3086:
  8622                           
  8623                           ; BSR set to: 0
  8624                           
  8625                           ; BSR set to: 0
  8626  011A46  0E18               	movlw	24
  8627  011A48  6F60               	movwf	___flge@ff1& (0+255),b
  8628  011A4A  0E72               	movlw	114
  8629  011A4C  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  8630  011A4E  0E31               	movlw	49
  8631  011A50  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  8632  011A52  0E44               	movlw	68
  8633  011A54  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  8634  011A56  C0B7  F064         	movff	exp@x,___flge@ff2
  8635  011A5A  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
  8636  011A5E  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
  8637  011A62  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
  8638  011A66  EC7A  F09A         	call	___flge	;wreg free
  8639  011A6A  0100               	movlb	0	; () banked
  8640  011A6C  B0D8               	btfsc	status,0,c
  8641  011A6E  D00F               	goto	l3088
  8642                           
  8643                           ; BSR set to: 0
  8644  011A70  0E00               	movlw	0
  8645  011A72  0101               	movlb	1	; () banked
  8646  011A74  6F1B               	movwf	(_errno+1)& (0+255),b
  8647  011A76  0E22               	movlw	34
  8648  011A78  6F1A               	movwf	_errno& (0+255),b
  8649  011A7A  0EFF               	movlw	255
  8650  011A7C  0100               	movlb	0	; () banked
  8651  011A7E  6FB7               	movwf	?_exp& (0+255),b
  8652  011A80  0EFF               	movlw	255
  8653  011A82  6FB8               	movwf	(?_exp+1)& (0+255),b
  8654  011A84  0E7F               	movlw	127
  8655  011A86  6FB9               	movwf	(?_exp+2)& (0+255),b
  8656  011A88  0E7F               	movlw	127
  8657  011A8A  6FBA               	movwf	(?_exp+3)& (0+255),b
  8658                           
  8659                           ; BSR set to: 0
  8660  011A8C  0012               	return	
  8661  011A8E                     l3088:
  8662                           
  8663                           ; BSR set to: 0
  8664                           
  8665                           ; BSR set to: 0
  8666  011A8E  C0B7  F060         	movff	exp@x,___flge@ff1
  8667  011A92  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
  8668  011A96  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
  8669  011A9A  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
  8670  011A9E  0E87               	movlw	135
  8671  011AA0  6F64               	movwf	___flge@ff2& (0+255),b
  8672  011AA2  0E48               	movlw	72
  8673  011AA4  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  8674  011AA6  0E3A               	movlw	58
  8675  011AA8  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  8676  011AAA  0EC4               	movlw	196
  8677  011AAC  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  8678  011AAE  EC7A  F09A         	call	___flge	;wreg free
  8679  011AB2  0100               	movlb	0	; () banked
  8680  011AB4  B0D8               	btfsc	status,0,c
  8681  011AB6  D00F               	goto	l3089
  8682                           
  8683                           ; BSR set to: 0
  8684  011AB8  0E00               	movlw	0
  8685  011ABA  0101               	movlb	1	; () banked
  8686  011ABC  6F1B               	movwf	(_errno+1)& (0+255),b
  8687  011ABE  0E22               	movlw	34
  8688  011AC0  6F1A               	movwf	_errno& (0+255),b
  8689  011AC2  0E00               	movlw	0
  8690  011AC4  0100               	movlb	0	; () banked
  8691  011AC6  6FB7               	movwf	?_exp& (0+255),b
  8692  011AC8  0E00               	movlw	0
  8693  011ACA  6FB8               	movwf	(?_exp+1)& (0+255),b
  8694  011ACC  0E00               	movlw	0
  8695  011ACE  6FB9               	movwf	(?_exp+2)& (0+255),b
  8696  011AD0  0E00               	movlw	0
  8697  011AD2  6FBA               	movwf	(?_exp+3)& (0+255),b
  8698                           
  8699                           ; BSR set to: 0
  8700  011AD4  0012               	return	
  8701  011AD6                     l3089:
  8702                           
  8703                           ; BSR set to: 0
  8704                           
  8705                           ; BSR set to: 0
  8706  011AD6  AFBA               	btfss	(exp@x+3)& (0+255),7,b
  8707  011AD8  D002               	goto	u11970
  8708  011ADA  0E01               	movlw	1
  8709  011ADC  D001               	goto	u11980
  8710  011ADE                     u11970:
  8711  011ADE  0E00               	movlw	0
  8712  011AE0                     u11980:
  8713  011AE0  6FC1               	movwf	exp@sign& (0+255),b
  8714                           
  8715                           ; BSR set to: 0
  8716  011AE2  51C1               	movf	exp@sign& (0+255),w,b
  8717  011AE4  B4D8               	btfsc	status,2,c
  8718  011AE6  D012               	goto	l3090
  8719                           
  8720                           ; BSR set to: 0
  8721  011AE8  C0B7  F087         	movff	exp@x,___flneg@f1
  8722  011AEC  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
  8723  011AF0  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
  8724  011AF4  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
  8725  011AF8  EC49  F0AB         	call	___flneg	;wreg free
  8726  011AFC  C087  F0B7         	movff	?___flneg,exp@x
  8727  011B00  C088  F0B8         	movff	?___flneg+1,exp@x+1
  8728  011B04  C089  F0B9         	movff	?___flneg+2,exp@x+2
  8729  011B08  C08A  F0BA         	movff	?___flneg+3,exp@x+3
  8730  011B0C                     l3090:
  8731  011B0C  C0B7  F06E         	movff	exp@x,___flmul@b
  8732  011B10  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
  8733  011B14  C0B9  F070         	movff	exp@x+2,___flmul@b+2
  8734  011B18  C0BA  F071         	movff	exp@x+3,___flmul@b+3
  8735  011B1C  0E3B               	movlw	59
  8736  011B1E  0100               	movlb	0	; () banked
  8737  011B20  6F72               	movwf	___flmul@a& (0+255),b
  8738  011B22  0EAA               	movlw	170
  8739  011B24  6F73               	movwf	(___flmul@a+1)& (0+255),b
  8740  011B26  0EB8               	movlw	184
  8741  011B28  6F74               	movwf	(___flmul@a+2)& (0+255),b
  8742  011B2A  0E3F               	movlw	63
  8743  011B2C  6F75               	movwf	(___flmul@a+3)& (0+255),b
  8744  011B2E  EC61  F084         	call	___flmul	;wreg free
  8745  011B32  C06E  F0B7         	movff	?___flmul,exp@x
  8746  011B36  C06F  F0B8         	movff	?___flmul+1,exp@x+1
  8747  011B3A  C070  F0B9         	movff	?___flmul+2,exp@x+2
  8748  011B3E  C071  F0BA         	movff	?___flmul+3,exp@x+3
  8749  011B42  C0B7  F0A9         	movff	exp@x,floor@x
  8750  011B46  C0B8  F0AA         	movff	exp@x+1,floor@x+1
  8751  011B4A  C0B9  F0AB         	movff	exp@x+2,floor@x+2
  8752  011B4E  C0BA  F0AC         	movff	exp@x+3,floor@x+3
  8753  011B52  EC0B  F09B         	call	_floor	;wreg free
  8754  011B56  C0A9  F0BB         	movff	?_floor,_exp$15826
  8755  011B5A  C0AA  F0BC         	movff	?_floor+1,_exp$15826+1
  8756  011B5E  C0AB  F0BD         	movff	?_floor+2,_exp$15826+2
  8757  011B62  C0AC  F0BE         	movff	?_floor+3,_exp$15826+3
  8758  011B66  C0BB  F09F         	movff	_exp$15826,___fltol@f1
  8759  011B6A  C0BC  F0A0         	movff	_exp$15826+1,___fltol@f1+1
  8760  011B6E  C0BD  F0A1         	movff	_exp$15826+2,___fltol@f1+2
  8761  011B72  C0BE  F0A2         	movff	_exp$15826+3,___fltol@f1+3
  8762  011B76  EC8F  F09D         	call	___fltol	;wreg free
  8763  011B7A  C09F  F0BF         	movff	?___fltol,exp@exponent
  8764  011B7E  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
  8765  011B82  C0B7  F09F         	movff	exp@x,___flsub@b
  8766  011B86  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
  8767  011B8A  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
  8768  011B8E  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
  8769  011B92  C0BF  F060         	movff	exp@exponent,___xxtofl@val
  8770  011B96  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
  8771  011B9A  0100               	movlb	0	; () banked
  8772  011B9C  0E00               	movlw	0
  8773  011B9E  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  8774  011BA0  0EFF               	movlw	-1
  8775  011BA2  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  8776  011BA4  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  8777  011BA6  0E01               	movlw	1
  8778  011BA8  ECAC  F096         	call	___xxtofl
  8779  011BAC  C060  F0A3         	movff	?___xxtofl,___flsub@a
  8780  011BB0  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
  8781  011BB4  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
  8782  011BB8  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
  8783  011BBC  EC07  F0A9         	call	___flsub	;wreg free
  8784  011BC0  C09F  F0B7         	movff	?___flsub,exp@x
  8785  011BC4  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
  8786  011BC8  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
  8787  011BCC  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
  8788  011BD0  C0B7  F09F         	movff	exp@x,eval_poly@x
  8789  011BD4  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
  8790  011BD8  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
  8791  011BDC  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
  8792  011BE0  0EE9               	movlw	low exp@coeff
  8793  011BE2  0100               	movlb	0	; () banked
  8794  011BE4  6FA3               	movwf	eval_poly@d& (0+255),b
  8795  011BE6  0EFD               	movlw	high exp@coeff
  8796  011BE8  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
  8797  011BEA  0E00               	movlw	0
  8798  011BEC  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
  8799  011BEE  0E09               	movlw	9
  8800  011BF0  6FA5               	movwf	eval_poly@n& (0+255),b
  8801  011BF2  EC1D  F09C         	call	_eval_poly	;wreg free
  8802  011BF6  C09F  F0AF         	movff	?_eval_poly,ldexp@value
  8803  011BFA  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
  8804  011BFE  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
  8805  011C02  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
  8806  011C06  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
  8807  011C0A  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
  8808  011C0E  EC1D  F09D         	call	_ldexp	;wreg free
  8809  011C12  C0AF  F0B7         	movff	?_ldexp,exp@x
  8810  011C16  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
  8811  011C1A  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
  8812  011C1E  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
  8813  011C22  0100               	movlb	0	; () banked
  8814  011C24  51C1               	movf	exp@sign& (0+255),w,b
  8815  011C26  B4D8               	btfsc	status,2,c
  8816  011C28  D02F               	goto	l3091
  8817                           
  8818                           ; BSR set to: 0
  8819  011C2A  29B7               	incf	exp@x& (0+255),w,b
  8820  011C2C  E112               	bnz	l14551
  8821  011C2E  29B8               	incf	(exp@x+1)& (0+255),w,b
  8822  011C30  E110               	bnz	l14551
  8823  011C32  0E7F               	movlw	127
  8824  011C34  19B9               	xorwf	(exp@x+2)& (0+255),w,b
  8825  011C36  E10D               	bnz	l14551
  8826  011C38  0E7F               	movlw	127
  8827  011C3A  19BA               	xorwf	(exp@x+3)& (0+255),w,b
  8828  011C3C  A4D8               	btfss	status,2,c
  8829  011C3E  D009               	goto	l3092
  8830                           
  8831                           ; BSR set to: 0
  8832  011C40  0E00               	movlw	0
  8833  011C42  6FB7               	movwf	?_exp& (0+255),b
  8834  011C44  0E00               	movlw	0
  8835  011C46  6FB8               	movwf	(?_exp+1)& (0+255),b
  8836  011C48  0E00               	movlw	0
  8837  011C4A  6FB9               	movwf	(?_exp+2)& (0+255),b
  8838  011C4C  0E00               	movlw	0
  8839  011C4E  6FBA               	movwf	(?_exp+3)& (0+255),b
  8840                           
  8841                           ; BSR set to: 0
  8842  011C50  0012               	return	
  8843  011C52                     l3092:
  8844  011C52                     l14551:
  8845                           
  8846                           ; BSR set to: 0
  8847  011C52  0E00               	movlw	0
  8848  011C54  6F60               	movwf	___fldiv@b& (0+255),b
  8849  011C56  0E00               	movlw	0
  8850  011C58  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  8851  011C5A  0E80               	movlw	128
  8852  011C5C  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  8853  011C5E  0E3F               	movlw	63
  8854  011C60  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  8855  011C62  C0B7  F064         	movff	exp@x,___fldiv@a
  8856  011C66  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
  8857  011C6A  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
  8858  011C6E  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
  8859  011C72  EC21  F089         	call	___fldiv	;wreg free
  8860  011C76  C060  F0B7         	movff	?___fldiv,?_exp
  8861  011C7A  C061  F0B8         	movff	?___fldiv+1,?_exp+1
  8862  011C7E  C062  F0B9         	movff	?___fldiv+2,?_exp+2
  8863  011C82  C063  F0BA         	movff	?___fldiv+3,?_exp+3
  8864  011C86  0012               	return	
  8865  011C88                     l3091:
  8866                           
  8867                           ; BSR set to: 0
  8868  011C88  C0B7  F0B7         	movff	exp@x,?_exp
  8869  011C8C  C0B8  F0B8         	movff	exp@x+1,?_exp+1
  8870  011C90  C0B9  F0B9         	movff	exp@x+2,?_exp+2
  8871  011C94  C0BA  F0BA         	movff	exp@x+3,?_exp+3
  8872  011C98  0012               	return		;funcret
  8873  011C9A                     __end_of_exp:
  8874                           	opt stack 0
  8875                           tosu	equ	0xFFF
  8876                           tosh	equ	0xFFE
  8877                           tosl	equ	0xFFD
  8878                           pclath	equ	0xFFA
  8879                           tblptru	equ	0xFF8
  8880                           tblptrh	equ	0xFF7
  8881                           tblptrl	equ	0xFF6
  8882                           tablat	equ	0xFF5
  8883                           prodh	equ	0xFF4
  8884                           prodl	equ	0xFF3
  8885                           postinc0	equ	0xFEE
  8886                           wreg	equ	0xFE8
  8887                           postdec1	equ	0xFE5
  8888                           fsr1h	equ	0xFE2
  8889                           fsr1l	equ	0xFE1
  8890                           indf2	equ	0xFDF
  8891                           postinc2	equ	0xFDE
  8892                           postdec2	equ	0xFDD
  8893                           fsr2h	equ	0xFDA
  8894                           fsr2l	equ	0xFD9
  8895                           status	equ	0xFD8
  8896                           
  8897 ;; *************** function _ldexp *****************
  8898 ;; Defined at:
  8899 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;  value           4   79[BANK0 ] unsigned char 
  8902 ;;  newexp          2   83[BANK0 ] int 
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;		None
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  4   79[BANK0 ] int 
  8907 ;; Registers used:
  8908 ;;		wreg, status,2, status,0
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8914 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;Total ram usage:        8 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    7
  8921 ;; This function calls:
  8922 ;;		Nothing
  8923 ;; This function is called by:
  8924 ;;		_exp
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           	psect	text25
  8929  013A3A                     __ptext25:
  8930                           	opt stack 0
  8931  013A3A                     _ldexp:
  8932                           	opt stack 19
  8933                           
  8934                           ;incstack = 0
  8935  013A3A  0100               	movlb	0	; () banked
  8936  013A3C  51AF               	movf	ldexp@value& (0+255),w,b
  8937  013A3E  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
  8938  013A40  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
  8939  013A42  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
  8940  013A44  A4D8               	btfss	status,2,c
  8941  013A46  D009               	goto	l3110
  8942                           
  8943                           ; BSR set to: 0
  8944  013A48  0E00               	movlw	0
  8945  013A4A  6FAF               	movwf	?_ldexp& (0+255),b
  8946  013A4C  0E00               	movlw	0
  8947  013A4E  6FB0               	movwf	(?_ldexp+1)& (0+255),b
  8948  013A50  0E00               	movlw	0
  8949  013A52  6FB1               	movwf	(?_ldexp+2)& (0+255),b
  8950  013A54  0E00               	movlw	0
  8951  013A56  6FB2               	movwf	(?_ldexp+3)& (0+255),b
  8952                           
  8953                           ; BSR set to: 0
  8954  013A58  0012               	return	
  8955  013A5A                     l3110:
  8956                           
  8957                           ; BSR set to: 0
  8958                           
  8959                           ; BSR set to: 0
  8960  013A5A  51B2               	movf	(ldexp@value+3)& (0+255),w,b
  8961  013A5C  0B7F               	andlw	127
  8962  013A5E  6FB5               	movwf	??_ldexp& (0+255),b
  8963  013A60  6BB6               	clrf	(??_ldexp+1)& (0+255),b
  8964  013A62  90D8               	bcf	status,0,c
  8965  013A64  37B5               	rlcf	??_ldexp& (0+255),f,b
  8966  013A66  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
  8967  013A68  51B5               	movf	??_ldexp& (0+255),w,b
  8968  013A6A  27B3               	addwf	ldexp@newexp& (0+255),f,b
  8969  013A6C  51B6               	movf	(??_ldexp+1)& (0+255),w,b
  8970  013A6E  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8971  013A70  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
  8972  013A72  D003               	goto	u11600
  8973  013A74  6BB5               	clrf	??_ldexp& (0+255),b
  8974  013A76  2BB5               	incf	??_ldexp& (0+255),f,b
  8975  013A78  D002               	goto	u11608
  8976  013A7A                     u11600:
  8977  013A7A  0100               	movlb	0	; () banked
  8978  013A7C  6BB5               	clrf	??_ldexp& (0+255),b
  8979  013A7E                     u11608:
  8980  013A7E  51B5               	movf	??_ldexp& (0+255),w,b
  8981  013A80  27B3               	addwf	ldexp@newexp& (0+255),f,b
  8982  013A82  0E00               	movlw	0
  8983  013A84  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8984  013A86  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
  8985  013A88  D00F               	goto	l3112
  8986                           
  8987                           ; BSR set to: 0
  8988  013A8A  0E00               	movlw	0
  8989  013A8C  0101               	movlb	1	; () banked
  8990  013A8E  6F1B               	movwf	(_errno+1)& (0+255),b
  8991  013A90  0E22               	movlw	34
  8992  013A92  6F1A               	movwf	_errno& (0+255),b
  8993  013A94  0E00               	movlw	0
  8994  013A96  0100               	movlb	0	; () banked
  8995  013A98  6FAF               	movwf	?_ldexp& (0+255),b
  8996  013A9A  0E00               	movlw	0
  8997  013A9C  6FB0               	movwf	(?_ldexp+1)& (0+255),b
  8998  013A9E  0E00               	movlw	0
  8999  013AA0  6FB1               	movwf	(?_ldexp+2)& (0+255),b
  9000  013AA2  0E00               	movlw	0
  9001  013AA4                     L4:
  9002  013AA4  6FB2               	movwf	(?_ldexp+3)& (0+255),b
  9003                           
  9004                           ; BSR set to: 0
  9005  013AA6  0012               	return	
  9006  013AA8                     l3112:
  9007                           
  9008                           ; BSR set to: 0
  9009                           
  9010                           ; BSR set to: 0
  9011  013AA8  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  9012  013AAA  D01B               	goto	l3114
  9013  013AAC  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
  9014  013AAE  A0D8               	btfss	status,0,c
  9015  013AB0  D018               	goto	l3114
  9016                           
  9017                           ; BSR set to: 0
  9018  013AB2  0E00               	movlw	0
  9019  013AB4  0101               	movlb	1	; () banked
  9020  013AB6  6F1B               	movwf	(_errno+1)& (0+255),b
  9021  013AB8  0E22               	movlw	34
  9022  013ABA  6F1A               	movwf	_errno& (0+255),b
  9023                           
  9024                           ; BSR set to: 1
  9025  013ABC  0100               	movlb	0	; () banked
  9026  013ABE  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
  9027  013AC0  D008               	goto	l3115
  9028                           
  9029                           ; BSR set to: 0
  9030  013AC2  0EFF               	movlw	255
  9031  013AC4  6FAF               	movwf	?_ldexp& (0+255),b
  9032  013AC6  0EFF               	movlw	255
  9033  013AC8  6FB0               	movwf	(?_ldexp+1)& (0+255),b
  9034  013ACA  0E7F               	movlw	127
  9035  013ACC  6FB1               	movwf	(?_ldexp+2)& (0+255),b
  9036  013ACE  0EFF               	movlw	255
  9037  013AD0  D7E9               	goto	L4
  9038  013AD2                     l3115:
  9039                           
  9040                           ; BSR set to: 0
  9041                           
  9042                           ; BSR set to: 0
  9043  013AD2  0EFF               	movlw	255
  9044  013AD4  6FAF               	movwf	?_ldexp& (0+255),b
  9045  013AD6  0EFF               	movlw	255
  9046  013AD8  6FB0               	movwf	(?_ldexp+1)& (0+255),b
  9047  013ADA  0E7F               	movlw	127
  9048  013ADC  6FB1               	movwf	(?_ldexp+2)& (0+255),b
  9049  013ADE  0E7F               	movlw	127
  9050  013AE0  D7E1               	goto	L4
  9051  013AE2                     l3114:
  9052                           
  9053                           ; BSR set to: 0
  9054                           
  9055                           ; BSR set to: 0
  9056  013AE2  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  9057  013AE4  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  9058  013AE6  6FB6               	movwf	(??_ldexp+1)& (0+255),b
  9059  013AE8  31B3               	rrcf	ldexp@newexp& (0+255),w,b
  9060  013AEA  6FB5               	movwf	??_ldexp& (0+255),b
  9061  013AEC  51B2               	movf	(ldexp@value+3)& (0+255),w,b
  9062  013AEE  19B5               	xorwf	??_ldexp& (0+255),w,b
  9063  013AF0  0B80               	andlw	-128
  9064  013AF2  19B5               	xorwf	??_ldexp& (0+255),w,b
  9065  013AF4  6FB2               	movwf	(ldexp@value+3)& (0+255),b
  9066  013AF6  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
  9067  013AFA  0E01               	movlw	1
  9068  013AFC  17B5               	andwf	??_ldexp& (0+255),f,b
  9069  013AFE  33B5               	rrcf	??_ldexp& (0+255),f,b
  9070  013B00  33B5               	rrcf	??_ldexp& (0+255),f,b
  9071  013B02  51B1               	movf	(ldexp@value+2)& (0+255),w,b
  9072  013B04  19B5               	xorwf	??_ldexp& (0+255),w,b
  9073  013B06  0B7F               	andlw	-129
  9074  013B08  19B5               	xorwf	??_ldexp& (0+255),w,b
  9075  013B0A  6FB1               	movwf	(ldexp@value+2)& (0+255),b
  9076                           
  9077                           ; BSR set to: 0
  9078                           
  9079                           ; BSR set to: 0
  9080                           
  9081                           ; BSR set to: 0
  9082  013B0C  C0AF  F0AF         	movff	ldexp@value,?_ldexp
  9083  013B10  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
  9084  013B14  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
  9085  013B18  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
  9086  013B1C  0012               	return	
  9087  013B1E                     __end_of_ldexp:
  9088                           	opt stack 0
  9089                           tosu	equ	0xFFF
  9090                           tosh	equ	0xFFE
  9091                           tosl	equ	0xFFD
  9092                           pclath	equ	0xFFA
  9093                           tblptru	equ	0xFF8
  9094                           tblptrh	equ	0xFF7
  9095                           tblptrl	equ	0xFF6
  9096                           tablat	equ	0xFF5
  9097                           prodh	equ	0xFF4
  9098                           prodl	equ	0xFF3
  9099                           postinc0	equ	0xFEE
  9100                           wreg	equ	0xFE8
  9101                           postdec1	equ	0xFE5
  9102                           fsr1h	equ	0xFE2
  9103                           fsr1l	equ	0xFE1
  9104                           indf2	equ	0xFDF
  9105                           postinc2	equ	0xFDE
  9106                           postdec2	equ	0xFDD
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111 ;; *************** function _floor *****************
  9112 ;; Defined at:
  9113 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  x               4   73[BANK0 ] int 
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  i               4   77[BANK0 ] int 
  9118 ;;  expon           2   81[BANK0 ] int 
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  4   73[BANK0 ] int 
  9121 ;; Registers used:
  9122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9128 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;Total ram usage:       10 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:    8
  9135 ;; This function calls:
  9136 ;;		___fladd
  9137 ;;		___flge
  9138 ;;		___fltol
  9139 ;;		___xxtofl
  9140 ;;		_frexp
  9141 ;; This function is called by:
  9142 ;;		_exp
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           	psect	text26
  9147  013616                     __ptext26:
  9148                           	opt stack 0
  9149  013616                     _floor:
  9150                           	opt stack 18
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;incstack = 0
  9154  013616  C0A9  F060         	movff	floor@x,frexp@value
  9155  01361A  C0AA  F061         	movff	floor@x+1,frexp@value+1
  9156  01361E  C0AB  F062         	movff	floor@x+2,frexp@value+2
  9157  013622  C0AC  F063         	movff	floor@x+3,frexp@value+3
  9158  013626  0EB1               	movlw	low floor@expon
  9159  013628  0100               	movlb	0	; () banked
  9160  01362A  6F64               	movwf	frexp@eptr& (0+255),b
  9161  01362C  0E00               	movlw	high floor@expon
  9162  01362E  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  9163  013630  ECB7  F09F         	call	_frexp	;wreg free
  9164  013634  0100               	movlb	0	; () banked
  9165  013636  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
  9166  013638  D014               	goto	l3097
  9167                           
  9168                           ; BSR set to: 0
  9169  01363A  AFAC               	btfss	(floor@x+3)& (0+255),7,b
  9170  01363C  D009               	goto	l3098
  9171                           
  9172                           ; BSR set to: 0
  9173  01363E  0E00               	movlw	0
  9174  013640  6FA9               	movwf	?_floor& (0+255),b
  9175  013642  0E00               	movlw	0
  9176  013644  6FAA               	movwf	(?_floor+1)& (0+255),b
  9177  013646  0E80               	movlw	128
  9178  013648  6FAB               	movwf	(?_floor+2)& (0+255),b
  9179  01364A  0EBF               	movlw	191
  9180  01364C  6FAC               	movwf	(?_floor+3)& (0+255),b
  9181                           
  9182                           ; BSR set to: 0
  9183  01364E  0012               	return	
  9184  013650                     l3098:
  9185                           
  9186                           ; BSR set to: 0
  9187                           
  9188                           ; BSR set to: 0
  9189  013650  0E00               	movlw	0
  9190  013652  6FA9               	movwf	?_floor& (0+255),b
  9191  013654  0E00               	movlw	0
  9192  013656  6FAA               	movwf	(?_floor+1)& (0+255),b
  9193  013658  0E00               	movlw	0
  9194  01365A  6FAB               	movwf	(?_floor+2)& (0+255),b
  9195  01365C  0E00               	movlw	0
  9196  01365E  6FAC               	movwf	(?_floor+3)& (0+255),b
  9197                           
  9198                           ; BSR set to: 0
  9199  013660  0012               	return	
  9200  013662                     l3097:
  9201                           
  9202                           ; BSR set to: 0
  9203                           
  9204                           ; BSR set to: 0
  9205  013662  51B2               	movf	(floor@expon+1)& (0+255),w,b
  9206  013664  E104               	bnz	u11560
  9207  013666  0E1D               	movlw	29
  9208  013668  5DB1               	subwf	floor@expon& (0+255),w,b
  9209  01366A  A0D8               	btfss	status,0,c
  9210  01366C  D009               	goto	l3100
  9211  01366E                     u11560:
  9212                           
  9213                           ; BSR set to: 0
  9214  01366E  C0A9  F0A9         	movff	floor@x,?_floor
  9215  013672  C0AA  F0AA         	movff	floor@x+1,?_floor+1
  9216  013676  C0AB  F0AB         	movff	floor@x+2,?_floor+2
  9217  01367A  C0AC  F0AC         	movff	floor@x+3,?_floor+3
  9218  01367E  0012               	return	
  9219  013680                     l3100:
  9220                           
  9221                           ; BSR set to: 0
  9222                           
  9223                           ; BSR set to: 0
  9224  013680  C0A9  F09F         	movff	floor@x,___fltol@f1
  9225  013684  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
  9226  013688  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
  9227  01368C  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
  9228  013690  EC8F  F09D         	call	___fltol	;wreg free
  9229  013694  C09F  F060         	movff	?___fltol,___xxtofl@val
  9230  013698  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
  9231  01369C  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
  9232  0136A0  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
  9233  0136A4  0E01               	movlw	1
  9234  0136A6  ECAC  F096         	call	___xxtofl
  9235  0136AA  C060  F0AD         	movff	?___xxtofl,floor@i
  9236  0136AE  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
  9237  0136B2  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
  9238  0136B6  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
  9239  0136BA  C0A9  F060         	movff	floor@x,___flge@ff1
  9240  0136BE  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
  9241  0136C2  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
  9242  0136C6  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
  9243  0136CA  C0AD  F064         	movff	floor@i,___flge@ff2
  9244  0136CE  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
  9245  0136D2  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
  9246  0136D6  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
  9247  0136DA  EC7A  F09A         	call	___flge	;wreg free
  9248  0136DE  0100               	movlb	0	; () banked
  9249  0136E0  B0D8               	btfsc	status,0,c
  9250  0136E2  D01B               	goto	l3101
  9251                           
  9252                           ; BSR set to: 0
  9253  0136E4  C0AD  F08B         	movff	floor@i,___fladd@b
  9254  0136E8  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
  9255  0136EC  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
  9256  0136F0  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
  9257  0136F4  0E00               	movlw	0
  9258  0136F6  6F8F               	movwf	___fladd@a& (0+255),b
  9259  0136F8  0E00               	movlw	0
  9260  0136FA  6F90               	movwf	(___fladd@a+1)& (0+255),b
  9261  0136FC  0E80               	movlw	128
  9262  0136FE  6F91               	movwf	(___fladd@a+2)& (0+255),b
  9263  013700  0EBF               	movlw	191
  9264  013702  6F92               	movwf	(___fladd@a+3)& (0+255),b
  9265  013704  EC0A  F086         	call	___fladd	;wreg free
  9266  013708  C08B  F0A9         	movff	?___fladd,?_floor
  9267  01370C  C08C  F0AA         	movff	?___fladd+1,?_floor+1
  9268  013710  C08D  F0AB         	movff	?___fladd+2,?_floor+2
  9269  013714  C08E  F0AC         	movff	?___fladd+3,?_floor+3
  9270  013718  0012               	return	
  9271  01371A                     l3101:
  9272                           
  9273                           ; BSR set to: 0
  9274  01371A  C0AD  F0A9         	movff	floor@i,?_floor
  9275  01371E  C0AE  F0AA         	movff	floor@i+1,?_floor+1
  9276  013722  C0AF  F0AB         	movff	floor@i+2,?_floor+2
  9277  013726  C0B0  F0AC         	movff	floor@i+3,?_floor+3
  9278  01372A  0012               	return		;funcret
  9279  01372C                     __end_of_floor:
  9280                           	opt stack 0
  9281                           tosu	equ	0xFFF
  9282                           tosh	equ	0xFFE
  9283                           tosl	equ	0xFFD
  9284                           pclath	equ	0xFFA
  9285                           tblptru	equ	0xFF8
  9286                           tblptrh	equ	0xFF7
  9287                           tblptrl	equ	0xFF6
  9288                           tablat	equ	0xFF5
  9289                           prodh	equ	0xFF4
  9290                           prodl	equ	0xFF3
  9291                           postinc0	equ	0xFEE
  9292                           wreg	equ	0xFE8
  9293                           postdec1	equ	0xFE5
  9294                           fsr1h	equ	0xFE2
  9295                           fsr1l	equ	0xFE1
  9296                           indf2	equ	0xFDF
  9297                           postinc2	equ	0xFDE
  9298                           postdec2	equ	0xFDD
  9299                           fsr2h	equ	0xFDA
  9300                           fsr2l	equ	0xFD9
  9301                           status	equ	0xFD8
  9302                           
  9303 ;; *************** function _frexp *****************
  9304 ;; Defined at:
  9305 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  value           4    0[BANK0 ] int 
  9308 ;;  eptr            2    4[BANK0 ] PTR int 
  9309 ;;		 -> log@exponent(2), floor@expon(2), 
  9310 ;; Auto vars:     Size  Location     Type
  9311 ;;		None
  9312 ;; Return value:  Size  Location     Type
  9313 ;;                  4    0[BANK0 ] PTR int 
  9314 ;; Registers used:
  9315 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9316 ;; Tracked objects:
  9317 ;;		On entry : 0/0
  9318 ;;		On exit  : 0/0
  9319 ;;		Unchanged: 0/0
  9320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9321 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;Total ram usage:        8 bytes
  9326 ;; Hardware stack levels used:    1
  9327 ;; Hardware stack levels required when called:    7
  9328 ;; This function calls:
  9329 ;;		Nothing
  9330 ;; This function is called by:
  9331 ;;		_floor
  9332 ;;		_log
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336                           	psect	text27
  9337  013F6E                     __ptext27:
  9338                           	opt stack 0
  9339  013F6E                     _frexp:
  9340                           	opt stack 19
  9341                           
  9342                           ;incstack = 0
  9343  013F6E  0100               	movlb	0	; () banked
  9344  013F70  5160               	movf	frexp@value& (0+255),w,b
  9345  013F72  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  9346  013F74  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  9347  013F76  1163               	iorwf	(frexp@value+3)& (0+255),w,b
  9348  013F78  A4D8               	btfss	status,2,c
  9349  013F7A  D011               	goto	l3106
  9350                           
  9351                           ; BSR set to: 0
  9352  013F7C  C064  FFD9         	movff	frexp@eptr,fsr2l
  9353  013F80  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  9354  013F84  0E00               	movlw	0
  9355  013F86  6EDE               	movwf	postinc2,c
  9356  013F88  0E00               	movlw	0
  9357  013F8A  6EDD               	movwf	postdec2,c
  9358                           
  9359                           ; BSR set to: 0
  9360  013F8C  0E00               	movlw	0
  9361  013F8E  6F60               	movwf	?_frexp& (0+255),b
  9362  013F90  0E00               	movlw	0
  9363  013F92  6F61               	movwf	(?_frexp+1)& (0+255),b
  9364  013F94  0E00               	movlw	0
  9365  013F96  6F62               	movwf	(?_frexp+2)& (0+255),b
  9366  013F98  0E00               	movlw	0
  9367  013F9A  6F63               	movwf	(?_frexp+3)& (0+255),b
  9368                           
  9369                           ; BSR set to: 0
  9370  013F9C  0012               	return	
  9371  013F9E                     l3106:
  9372                           
  9373                           ; BSR set to: 0
  9374                           
  9375                           ; BSR set to: 0
  9376  013F9E  5163               	movf	(frexp@value+3)& (0+255),w,b
  9377  013FA0  0B7F               	andlw	127
  9378  013FA2  6F66               	movwf	??_frexp& (0+255),b
  9379  013FA4  6B67               	clrf	(??_frexp+1)& (0+255),b
  9380  013FA6  90D8               	bcf	status,0,c
  9381  013FA8  3766               	rlcf	??_frexp& (0+255),f,b
  9382  013FAA  3767               	rlcf	(??_frexp+1)& (0+255),f,b
  9383  013FAC  C064  FFD9         	movff	frexp@eptr,fsr2l
  9384  013FB0  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  9385  013FB4  C066  FFDE         	movff	??_frexp,postinc2
  9386  013FB8  C067  FFDD         	movff	??_frexp+1,postdec2
  9387  013FBC  AF62               	btfss	(frexp@value+2)& (0+255),7,b
  9388  013FBE  D003               	goto	u11140
  9389  013FC0  6B66               	clrf	??_frexp& (0+255),b
  9390  013FC2  2B66               	incf	??_frexp& (0+255),f,b
  9391  013FC4  D002               	goto	u11148
  9392  013FC6                     u11140:
  9393  013FC6  0100               	movlb	0	; () banked
  9394  013FC8  6B66               	clrf	??_frexp& (0+255),b
  9395  013FCA                     u11148:
  9396  013FCA  5166               	movf	??_frexp& (0+255),w,b
  9397  013FCC  C064  FFD9         	movff	frexp@eptr,fsr2l
  9398  013FD0  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  9399  013FD4  12DE               	iorwf	postinc2,f,c
  9400  013FD6  0E00               	movlw	0
  9401  013FD8  12DD               	iorwf	postdec2,f,c
  9402                           
  9403                           ; BSR set to: 0
  9404  013FDA  C064  FFD9         	movff	frexp@eptr,fsr2l
  9405  013FDE  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  9406  013FE2  0E82               	movlw	130
  9407  013FE4  26DE               	addwf	postinc2,f,c
  9408  013FE6  0EFF               	movlw	255
  9409  013FE8  22DD               	addwfc	postdec2,f,c
  9410                           
  9411                           ; BSR set to: 0
  9412  013FEA  8163               	bsf	(frexp@value+3)& (0+255),0,b
  9413  013FEC  8363               	bsf	(frexp@value+3)& (0+255),1,b
  9414  013FEE  8563               	bsf	(frexp@value+3)& (0+255),2,b
  9415  013FF0  8763               	bsf	(frexp@value+3)& (0+255),3,b
  9416  013FF2  8963               	bsf	(frexp@value+3)& (0+255),4,b
  9417  013FF4  8B63               	bsf	(frexp@value+3)& (0+255),5,b
  9418  013FF6  9D63               	bcf	(frexp@value+3)& (0+255),6,b
  9419                           
  9420                           ; BSR set to: 0
  9421  013FF8  9F62               	bcf	(frexp@value+2)& (0+255),7,b
  9422                           
  9423                           ; BSR set to: 0
  9424  013FFA  C060  F060         	movff	frexp@value,?_frexp
  9425  013FFE  C061  F061         	movff	frexp@value+1,?_frexp+1
  9426  014002  C062  F062         	movff	frexp@value+2,?_frexp+2
  9427  014006  C063  F063         	movff	frexp@value+3,?_frexp+3
  9428  01400A  0012               	return	
  9429  01400C                     __end_of_frexp:
  9430                           	opt stack 0
  9431                           tosu	equ	0xFFF
  9432                           tosh	equ	0xFFE
  9433                           tosl	equ	0xFFD
  9434                           pclath	equ	0xFFA
  9435                           tblptru	equ	0xFF8
  9436                           tblptrh	equ	0xFF7
  9437                           tblptrl	equ	0xFF6
  9438                           tablat	equ	0xFF5
  9439                           prodh	equ	0xFF4
  9440                           prodl	equ	0xFF3
  9441                           postinc0	equ	0xFEE
  9442                           wreg	equ	0xFE8
  9443                           postdec1	equ	0xFE5
  9444                           fsr1h	equ	0xFE2
  9445                           fsr1l	equ	0xFE1
  9446                           indf2	equ	0xFDF
  9447                           postinc2	equ	0xFDE
  9448                           postdec2	equ	0xFDD
  9449                           fsr2h	equ	0xFDA
  9450                           fsr2l	equ	0xFD9
  9451                           status	equ	0xFD8
  9452                           
  9453 ;; *************** function ___xxtofl *****************
  9454 ;; Defined at:
  9455 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\xxtofl.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;  sign            1    wreg     unsigned char 
  9458 ;;  val             4    0[BANK0 ] long 
  9459 ;; Auto vars:     Size  Location     Type
  9460 ;;  sign            1    8[BANK0 ] unsigned char 
  9461 ;;  arg             4   10[BANK0 ] unsigned long 
  9462 ;;  exp             1    9[BANK0 ] unsigned char 
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  4    0[BANK0 ] unsigned char 
  9465 ;; Registers used:
  9466 ;;		wreg, status,2, status,0
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9472 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9474 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9475 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;Total ram usage:       14 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    7
  9479 ;; This function calls:
  9480 ;;		Nothing
  9481 ;; This function is called by:
  9482 ;;		_ADCAverage
  9483 ;;		_pow
  9484 ;;		_exp
  9485 ;;		_floor
  9486 ;;		_log
  9487 ;;		_ADC_Voltage
  9488 ;;		_Move_ADC_To
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           	psect	text28
  9493  012D58                     __ptext28:
  9494                           	opt stack 0
  9495  012D58                     ___xxtofl:
  9496                           	opt stack 19
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;incstack = 0
  9500                           ;___xxtofl@sign stored from wreg
  9501  012D58  0100               	movlb	0	; () banked
  9502  012D5A  6F68               	movwf	___xxtofl@sign& (0+255),b
  9503  012D5C  0100               	movlb	0	; () banked
  9504  012D5E  5168               	movf	___xxtofl@sign& (0+255),w,b
  9505  012D60  A4D8               	btfss	status,2,c
  9506                           
  9507                           ; BSR set to: 0
  9508  012D62  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
  9509  012D64  D01A               	goto	l3055
  9510                           
  9511                           ; BSR set to: 0
  9512  012D66  C060  F064         	movff	___xxtofl@val,??___xxtofl
  9513  012D6A  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
  9514  012D6E  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
  9515  012D72  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
  9516  012D76  1F64               	comf	??___xxtofl& (0+255),f,b
  9517  012D78  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
  9518  012D7A  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
  9519  012D7C  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
  9520  012D7E  2B64               	incf	??___xxtofl& (0+255),f,b
  9521  012D80  0E00               	movlw	0
  9522  012D82  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
  9523  012D84  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
  9524  012D86  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
  9525  012D88  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
  9526  012D8C  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
  9527  012D90  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
  9528  012D94  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
  9529  012D98  D008               	goto	l3056
  9530  012D9A                     l3055:
  9531                           
  9532                           ; BSR set to: 0
  9533  012D9A  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
  9534  012D9E  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
  9535  012DA2  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
  9536  012DA6  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
  9537  012DAA                     l3056:
  9538                           
  9539                           ; BSR set to: 0
  9540                           
  9541                           ; BSR set to: 0
  9542  012DAA  5160               	movf	___xxtofl@val& (0+255),w,b
  9543  012DAC  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
  9544  012DAE  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
  9545  012DB0  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
  9546  012DB2  A4D8               	btfss	status,2,c
  9547  012DB4  D009               	goto	l3057
  9548                           
  9549                           ; BSR set to: 0
  9550  012DB6  0E00               	movlw	0
  9551  012DB8  6F60               	movwf	?___xxtofl& (0+255),b
  9552  012DBA  0E00               	movlw	0
  9553  012DBC  6F61               	movwf	(?___xxtofl+1)& (0+255),b
  9554  012DBE  0E00               	movlw	0
  9555  012DC0  6F62               	movwf	(?___xxtofl+2)& (0+255),b
  9556  012DC2  0E00               	movlw	0
  9557  012DC4  6F63               	movwf	(?___xxtofl+3)& (0+255),b
  9558                           
  9559                           ; BSR set to: 0
  9560  012DC6  0012               	return	
  9561  012DC8                     l3057:
  9562                           
  9563                           ; BSR set to: 0
  9564                           
  9565                           ; BSR set to: 0
  9566  012DC8  0E96               	movlw	150
  9567  012DCA  6F69               	movwf	___xxtofl@exp& (0+255),b
  9568  012DCC  D006               	goto	l3059
  9569  012DCE                     
  9570                           ; BSR set to: 0
  9571                           
  9572                           ; BSR set to: 0
  9573  012DCE  2B69               	incf	___xxtofl@exp& (0+255),f,b
  9574  012DD0  90D8               	bcf	status,0,c
  9575  012DD2  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
  9576  012DD4  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
  9577  012DD6  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
  9578  012DD8  336A               	rrcf	___xxtofl@arg& (0+255),f,b
  9579  012DDA                     l3059:
  9580                           
  9581                           ; BSR set to: 0
  9582                           
  9583                           ; BSR set to: 0
  9584  012DDA  0E00               	movlw	0
  9585  012DDC  156A               	andwf	___xxtofl@arg& (0+255),w,b
  9586  012DDE  6F64               	movwf	??___xxtofl& (0+255),b
  9587  012DE0  0E00               	movlw	0
  9588  012DE2  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
  9589  012DE4  6F65               	movwf	(??___xxtofl+1)& (0+255),b
  9590  012DE6  0E00               	movlw	0
  9591  012DE8  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
  9592  012DEA  6F66               	movwf	(??___xxtofl+2)& (0+255),b
  9593  012DEC  0EFE               	movlw	254
  9594  012DEE  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
  9595  012DF0  6F67               	movwf	(??___xxtofl+3)& (0+255),b
  9596  012DF2  5164               	movf	??___xxtofl& (0+255),w,b
  9597  012DF4  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
  9598  012DF6  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
  9599  012DF8  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
  9600  012DFA  B4D8               	btfsc	status,2,c
  9601  012DFC  D00D               	goto	l3062
  9602  012DFE  D7E7               	goto	l3060
  9603  012E00                     
  9604                           ; BSR set to: 0
  9605                           
  9606                           ; BSR set to: 0
  9607  012E00  2B69               	incf	___xxtofl@exp& (0+255),f,b
  9608                           
  9609                           ; BSR set to: 0
  9610  012E02  0E01               	movlw	1
  9611  012E04  276A               	addwf	___xxtofl@arg& (0+255),f,b
  9612  012E06  0E00               	movlw	0
  9613  012E08  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
  9614  012E0A  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
  9615  012E0C  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
  9616                           
  9617                           ; BSR set to: 0
  9618  012E0E  90D8               	bcf	status,0,c
  9619  012E10  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
  9620  012E12  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
  9621  012E14  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
  9622  012E16  336A               	rrcf	___xxtofl@arg& (0+255),f,b
  9623  012E18                     l3062:
  9624                           
  9625                           ; BSR set to: 0
  9626  012E18  0E00               	movlw	0
  9627  012E1A  156A               	andwf	___xxtofl@arg& (0+255),w,b
  9628  012E1C  6F64               	movwf	??___xxtofl& (0+255),b
  9629  012E1E  0E00               	movlw	0
  9630  012E20  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
  9631  012E22  6F65               	movwf	(??___xxtofl+1)& (0+255),b
  9632  012E24  0E00               	movlw	0
  9633  012E26  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
  9634  012E28  6F66               	movwf	(??___xxtofl+2)& (0+255),b
  9635  012E2A  0EFF               	movlw	255
  9636  012E2C  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
  9637  012E2E  6F67               	movwf	(??___xxtofl+3)& (0+255),b
  9638  012E30  5164               	movf	??___xxtofl& (0+255),w,b
  9639  012E32  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
  9640  012E34  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
  9641  012E36  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
  9642  012E38  B4D8               	btfsc	status,2,c
  9643  012E3A  D007               	goto	l3065
  9644  012E3C  D7E1               	goto	l3063
  9645  012E3E                     
  9646                           ; BSR set to: 0
  9647                           
  9648                           ; BSR set to: 0
  9649  012E3E  0769               	decf	___xxtofl@exp& (0+255),f,b
  9650  012E40  90D8               	bcf	status,0,c
  9651  012E42  376A               	rlcf	___xxtofl@arg& (0+255),f,b
  9652  012E44  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
  9653  012E46  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
  9654  012E48  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
  9655  012E4A                     l3065:
  9656                           
  9657                           ; BSR set to: 0
  9658                           
  9659                           ; BSR set to: 0
  9660  012E4A  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
  9661  012E4C  D003               	goto	u11090
  9662                           
  9663                           ; BSR set to: 0
  9664  012E4E  0E02               	movlw	2
  9665  012E50  6169               	cpfslt	___xxtofl@exp& (0+255),b
  9666  012E52  D7F5               	goto	l3066
  9667  012E54                     u11090:
  9668                           
  9669                           ; BSR set to: 0
  9670                           
  9671                           ; BSR set to: 0
  9672  012E54  B169               	btfsc	___xxtofl@exp& (0+255),0,b
  9673  012E56  D008               	goto	l3070
  9674                           
  9675                           ; BSR set to: 0
  9676  012E58  0EFF               	movlw	255
  9677  012E5A  176A               	andwf	___xxtofl@arg& (0+255),f,b
  9678  012E5C  0EFF               	movlw	255
  9679  012E5E  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
  9680  012E60  0E7F               	movlw	127
  9681  012E62  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
  9682  012E64  0EFF               	movlw	255
  9683  012E66  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
  9684  012E68                     l3070:
  9685                           
  9686                           ; BSR set to: 0
  9687  012E68  90D8               	bcf	status,0,c
  9688  012E6A  3369               	rrcf	___xxtofl@exp& (0+255),f,b
  9689  012E6C  C069  F064         	movff	___xxtofl@exp,??___xxtofl
  9690  012E70  6B65               	clrf	(??___xxtofl+1)& (0+255),b
  9691  012E72  6B66               	clrf	(??___xxtofl+2)& (0+255),b
  9692  012E74  6B67               	clrf	(??___xxtofl+3)& (0+255),b
  9693  012E76  C064  F067         	movff	??___xxtofl,??___xxtofl+3
  9694  012E7A  6B66               	clrf	(??___xxtofl+2)& (0+255),b
  9695  012E7C  6B65               	clrf	(??___xxtofl+1)& (0+255),b
  9696  012E7E  6B64               	clrf	??___xxtofl& (0+255),b
  9697  012E80  5164               	movf	??___xxtofl& (0+255),w,b
  9698  012E82  136A               	iorwf	___xxtofl@arg& (0+255),f,b
  9699  012E84  5165               	movf	(??___xxtofl+1)& (0+255),w,b
  9700  012E86  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
  9701  012E88  5166               	movf	(??___xxtofl+2)& (0+255),w,b
  9702  012E8A  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
  9703  012E8C  5167               	movf	(??___xxtofl+3)& (0+255),w,b
  9704  012E8E  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
  9705                           
  9706                           ; BSR set to: 0
  9707  012E90  5168               	movf	___xxtofl@sign& (0+255),w,b
  9708  012E92  A4D8               	btfss	status,2,c
  9709                           
  9710                           ; BSR set to: 0
  9711  012E94  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
  9712  012E96  D001               	goto	l3071
  9713                           
  9714                           ; BSR set to: 0
  9715  012E98  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
  9716  012E9A                     l3071:
  9717                           
  9718                           ; BSR set to: 0
  9719                           
  9720                           ; BSR set to: 0
  9721  012E9A  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
  9722  012E9E  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
  9723  012EA2  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
  9724  012EA6  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
  9725  012EAA  0012               	return	
  9726  012EAC                     __end_of___xxtofl:
  9727                           	opt stack 0
  9728                           tosu	equ	0xFFF
  9729                           tosh	equ	0xFFE
  9730                           tosl	equ	0xFFD
  9731                           pclath	equ	0xFFA
  9732                           tblptru	equ	0xFF8
  9733                           tblptrh	equ	0xFF7
  9734                           tblptrl	equ	0xFF6
  9735                           tablat	equ	0xFF5
  9736                           prodh	equ	0xFF4
  9737                           prodl	equ	0xFF3
  9738                           postinc0	equ	0xFEE
  9739                           wreg	equ	0xFE8
  9740                           postdec1	equ	0xFE5
  9741                           fsr1h	equ	0xFE2
  9742                           fsr1l	equ	0xFE1
  9743                           indf2	equ	0xFDF
  9744                           postinc2	equ	0xFDE
  9745                           postdec2	equ	0xFDD
  9746                           fsr2h	equ	0xFDA
  9747                           fsr2l	equ	0xFD9
  9748                           status	equ	0xFD8
  9749                           
  9750 ;; *************** function ___fltol *****************
  9751 ;; Defined at:
  9752 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fltol.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;  f1              4   63[BANK0 ] unsigned char 
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;  exp1            1   72[BANK0 ] unsigned char 
  9757 ;;  sign1           1   71[BANK0 ] unsigned char 
  9758 ;; Return value:  Size  Location     Type
  9759 ;;                  4   63[BANK0 ] long 
  9760 ;; Registers used:
  9761 ;;		wreg, status,2, status,0
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9767 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;Total ram usage:       10 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    7
  9774 ;; This function calls:
  9775 ;;		Nothing
  9776 ;; This function is called by:
  9777 ;;		_ADCAverage
  9778 ;;		_pow
  9779 ;;		_exp
  9780 ;;		_floor
  9781 ;;		_Move_ADC_To
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           	psect	text29
  9786  013B1E                     __ptext29:
  9787                           	opt stack 0
  9788  013B1E                     ___fltol:
  9789                           	opt stack 18
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;incstack = 0
  9793  013B1E  0100               	movlb	0	; () banked
  9794  013B20  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
  9795  013B22  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
  9796  013B24  6FA8               	movwf	___fltol@exp1& (0+255),b
  9797  013B26  51A8               	movf	___fltol@exp1& (0+255),w,b
  9798  013B28  A4D8               	btfss	status,2,c
  9799  013B2A  D009               	goto	l2722
  9800                           
  9801                           ; BSR set to: 0
  9802  013B2C  0E00               	movlw	0
  9803  013B2E  6F9F               	movwf	?___fltol& (0+255),b
  9804  013B30  0E00               	movlw	0
  9805  013B32  6FA0               	movwf	(?___fltol+1)& (0+255),b
  9806  013B34  0E00               	movlw	0
  9807  013B36  6FA1               	movwf	(?___fltol+2)& (0+255),b
  9808  013B38  0E00               	movlw	0
  9809  013B3A  6FA2               	movwf	(?___fltol+3)& (0+255),b
  9810                           
  9811                           ; BSR set to: 0
  9812  013B3C  0012               	return	
  9813  013B3E                     l2722:
  9814                           
  9815                           ; BSR set to: 0
  9816                           
  9817                           ; BSR set to: 0
  9818  013B3E  C09F  F0A3         	movff	___fltol@f1,??___fltol
  9819  013B42  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
  9820  013B46  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
  9821  013B4A  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
  9822  013B4E  0E20               	movlw	32
  9823  013B50  D005               	goto	u10910
  9824  013B52                     u10915:
  9825  013B52  90D8               	bcf	status,0,c
  9826  013B54  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
  9827  013B56  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
  9828  013B58  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
  9829  013B5A  33A3               	rrcf	??___fltol& (0+255),f,b
  9830  013B5C                     u10910:
  9831  013B5C  2EE8               	decfsz	wreg,f,c
  9832  013B5E  D7F9               	goto	u10915
  9833  013B60  51A3               	movf	??___fltol& (0+255),w,b
  9834  013B62  6FA7               	movwf	___fltol@sign1& (0+255),b
  9835                           
  9836                           ; BSR set to: 0
  9837  013B64  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
  9838                           
  9839                           ; BSR set to: 0
  9840  013B66  0EFF               	movlw	255
  9841  013B68  179F               	andwf	___fltol@f1& (0+255),f,b
  9842  013B6A  0EFF               	movlw	255
  9843  013B6C  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
  9844  013B6E  0EFF               	movlw	255
  9845  013B70  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
  9846  013B72  0E00               	movlw	0
  9847  013B74  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
  9848                           
  9849                           ; BSR set to: 0
  9850  013B76  0E96               	movlw	150
  9851  013B78  5FA8               	subwf	___fltol@exp1& (0+255),f,b
  9852                           
  9853                           ; BSR set to: 0
  9854  013B7A  AFA8               	btfss	___fltol@exp1& (0+255),7,b
  9855  013B7C  D016               	goto	l2724
  9856                           
  9857                           ; BSR set to: 0
  9858  013B7E  51A8               	movf	___fltol@exp1& (0+255),w,b
  9859  013B80  0A80               	xorlw	128
  9860  013B82  0F97               	addlw	151
  9861  013B84  B0D8               	btfsc	status,0,c
  9862  013B86  D009               	goto	l2725
  9863                           
  9864                           ; BSR set to: 0
  9865  013B88  0E00               	movlw	0
  9866  013B8A  6F9F               	movwf	?___fltol& (0+255),b
  9867  013B8C  0E00               	movlw	0
  9868  013B8E  6FA0               	movwf	(?___fltol+1)& (0+255),b
  9869  013B90  0E00               	movlw	0
  9870  013B92  6FA1               	movwf	(?___fltol+2)& (0+255),b
  9871  013B94  0E00               	movlw	0
  9872  013B96  6FA2               	movwf	(?___fltol+3)& (0+255),b
  9873                           
  9874                           ; BSR set to: 0
  9875  013B98  0012               	return	
  9876  013B9A                     l2725:
  9877                           
  9878                           ; BSR set to: 0
  9879                           
  9880                           ; BSR set to: 0
  9881                           
  9882                           ; BSR set to: 0
  9883  013B9A  90D8               	bcf	status,0,c
  9884  013B9C  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9885  013B9E  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9886  013BA0  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9887  013BA2  339F               	rrcf	___fltol@f1& (0+255),f,b
  9888                           
  9889                           ; BSR set to: 0
  9890  013BA4  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
  9891  013BA6  D7F9               	goto	l2725
  9892                           
  9893                           ; BSR set to: 0
  9894  013BA8  D015               	goto	u10950
  9895  013BAA                     l2724:
  9896                           
  9897                           ; BSR set to: 0
  9898                           
  9899                           ; BSR set to: 0
  9900  013BAA  0E1F               	movlw	31
  9901  013BAC  65A8               	cpfsgt	___fltol@exp1& (0+255),b
  9902  013BAE  D00F               	goto	l2730
  9903                           
  9904                           ; BSR set to: 0
  9905  013BB0  0E00               	movlw	0
  9906  013BB2  6F9F               	movwf	?___fltol& (0+255),b
  9907  013BB4  0E00               	movlw	0
  9908  013BB6  6FA0               	movwf	(?___fltol+1)& (0+255),b
  9909  013BB8  0E00               	movlw	0
  9910  013BBA  6FA1               	movwf	(?___fltol+2)& (0+255),b
  9911  013BBC  0E00               	movlw	0
  9912  013BBE  6FA2               	movwf	(?___fltol+3)& (0+255),b
  9913                           
  9914                           ; BSR set to: 0
  9915  013BC0  0012               	return	
  9916  013BC2                     
  9917                           ; BSR set to: 0
  9918                           
  9919                           ; BSR set to: 0
  9920  013BC2  90D8               	bcf	status,0,c
  9921  013BC4  379F               	rlcf	___fltol@f1& (0+255),f,b
  9922  013BC6  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9923  013BC8  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9924  013BCA  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9925  013BCC  07A8               	decf	___fltol@exp1& (0+255),f,b
  9926  013BCE                     l2730:
  9927                           
  9928                           ; BSR set to: 0
  9929                           
  9930                           ; BSR set to: 0
  9931  013BCE  51A8               	movf	___fltol@exp1& (0+255),w,b
  9932  013BD0  A4D8               	btfss	status,2,c
  9933  013BD2  D7F7               	goto	l2731
  9934  013BD4                     u10950:
  9935                           
  9936                           ; BSR set to: 0
  9937                           
  9938                           ; BSR set to: 0
  9939                           
  9940                           ; BSR set to: 0
  9941  013BD4  51A7               	movf	___fltol@sign1& (0+255),w,b
  9942  013BD6  B4D8               	btfsc	status,2,c
  9943  013BD8  D008               	goto	l2733
  9944                           
  9945                           ; BSR set to: 0
  9946  013BDA  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
  9947  013BDC  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
  9948  013BDE  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
  9949  013BE0  6D9F               	negf	___fltol@f1& (0+255),b
  9950  013BE2  0E00               	movlw	0
  9951  013BE4  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9952  013BE6  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9953  013BE8  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9954  013BEA                     l2733:
  9955                           
  9956                           ; BSR set to: 0
  9957                           
  9958                           ; BSR set to: 0
  9959  013BEA  C09F  F09F         	movff	___fltol@f1,?___fltol
  9960  013BEE  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
  9961  013BF2  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
  9962  013BF6  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
  9963  013BFA  0012               	return	
  9964  013BFC                     __end_of___fltol:
  9965                           	opt stack 0
  9966                           tosu	equ	0xFFF
  9967                           tosh	equ	0xFFE
  9968                           tosl	equ	0xFFD
  9969                           pclath	equ	0xFFA
  9970                           tblptru	equ	0xFF8
  9971                           tblptrh	equ	0xFF7
  9972                           tblptrl	equ	0xFF6
  9973                           tablat	equ	0xFF5
  9974                           prodh	equ	0xFF4
  9975                           prodl	equ	0xFF3
  9976                           postinc0	equ	0xFEE
  9977                           wreg	equ	0xFE8
  9978                           postdec1	equ	0xFE5
  9979                           fsr1h	equ	0xFE2
  9980                           fsr1l	equ	0xFE1
  9981                           indf2	equ	0xFDF
  9982                           postinc2	equ	0xFDE
  9983                           postdec2	equ	0xFDD
  9984                           fsr2h	equ	0xFDA
  9985                           fsr2l	equ	0xFD9
  9986                           status	equ	0xFD8
  9987                           
  9988 ;; *************** function ___flge *****************
  9989 ;; Defined at:
  9990 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flge.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;  ff1             4    0[BANK0 ] long 
  9993 ;;  ff2             4    4[BANK0 ] long 
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;		None
  9996 ;; Return value:  Size  Location     Type
  9997 ;;		None               void
  9998 ;; Registers used:
  9999 ;;		wreg, status,2, status,0
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10005 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;Total ram usage:       12 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    7
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_pow
 10016 ;;		_exp
 10017 ;;		_floor
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           	psect	text30
 10022  0134F4                     __ptext30:
 10023                           	opt stack 0
 10024  0134F4                     ___flge:
 10025                           	opt stack 18
 10026                           
 10027                           ; BSR set to: 0
 10028                           ;incstack = 0
 10029  0134F4  0E00               	movlw	0
 10030  0134F6  0100               	movlb	0	; () banked
 10031  0134F8  1560               	andwf	___flge@ff1& (0+255),w,b
 10032  0134FA  6F68               	movwf	??___flge& (0+255),b
 10033  0134FC  0E00               	movlw	0
 10034  0134FE  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 10035  013500  6F69               	movwf	(??___flge+1)& (0+255),b
 10036  013502  0E80               	movlw	128
 10037  013504  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 10038  013506  6F6A               	movwf	(??___flge+2)& (0+255),b
 10039  013508  0E7F               	movlw	127
 10040  01350A  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 10041  01350C  6F6B               	movwf	(??___flge+3)& (0+255),b
 10042  01350E  5168               	movf	??___flge& (0+255),w,b
 10043  013510  1169               	iorwf	(??___flge+1)& (0+255),w,b
 10044  013512  116A               	iorwf	(??___flge+2)& (0+255),w,b
 10045  013514  116B               	iorwf	(??___flge+3)& (0+255),w,b
 10046  013516  A4D8               	btfss	status,2,c
 10047  013518  D008               	goto	l2692
 10048                           
 10049                           ; BSR set to: 0
 10050  01351A  0E00               	movlw	0
 10051  01351C  6F60               	movwf	___flge@ff1& (0+255),b
 10052  01351E  0E00               	movlw	0
 10053  013520  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 10054  013522  0E00               	movlw	0
 10055  013524  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 10056  013526  0E00               	movlw	0
 10057  013528  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 10058  01352A                     l2692:
 10059                           
 10060                           ; BSR set to: 0
 10061                           
 10062                           ; BSR set to: 0
 10063  01352A  0E00               	movlw	0
 10064  01352C  1564               	andwf	___flge@ff2& (0+255),w,b
 10065  01352E  6F68               	movwf	??___flge& (0+255),b
 10066  013530  0E00               	movlw	0
 10067  013532  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 10068  013534  6F69               	movwf	(??___flge+1)& (0+255),b
 10069  013536  0E80               	movlw	128
 10070  013538  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 10071  01353A  6F6A               	movwf	(??___flge+2)& (0+255),b
 10072  01353C  0E7F               	movlw	127
 10073  01353E  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 10074  013540  6F6B               	movwf	(??___flge+3)& (0+255),b
 10075  013542  5168               	movf	??___flge& (0+255),w,b
 10076  013544  1169               	iorwf	(??___flge+1)& (0+255),w,b
 10077  013546  116A               	iorwf	(??___flge+2)& (0+255),w,b
 10078  013548  116B               	iorwf	(??___flge+3)& (0+255),w,b
 10079  01354A  A4D8               	btfss	status,2,c
 10080  01354C  D008               	goto	l2693
 10081                           
 10082                           ; BSR set to: 0
 10083  01354E  0E00               	movlw	0
 10084  013550  6F64               	movwf	___flge@ff2& (0+255),b
 10085  013552  0E00               	movlw	0
 10086  013554  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 10087  013556  0E00               	movlw	0
 10088  013558  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 10089  01355A  0E00               	movlw	0
 10090  01355C  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 10091  01355E                     l2693:
 10092                           
 10093                           ; BSR set to: 0
 10094                           
 10095                           ; BSR set to: 0
 10096  01355E  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 10097  013560  D01D               	goto	l2694
 10098                           
 10099                           ; BSR set to: 0
 10100  013562  C060  F068         	movff	___flge@ff1,??___flge
 10101  013566  C061  F069         	movff	___flge@ff1+1,??___flge+1
 10102  01356A  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 10103  01356E  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 10104  013572  1F68               	comf	??___flge& (0+255),f,b
 10105  013574  1F69               	comf	(??___flge+1)& (0+255),f,b
 10106  013576  1F6A               	comf	(??___flge+2)& (0+255),f,b
 10107  013578  1F6B               	comf	(??___flge+3)& (0+255),f,b
 10108  01357A  2B68               	incf	??___flge& (0+255),f,b
 10109  01357C  0E00               	movlw	0
 10110  01357E  2369               	addwfc	(??___flge+1)& (0+255),f,b
 10111  013580  236A               	addwfc	(??___flge+2)& (0+255),f,b
 10112  013582  236B               	addwfc	(??___flge+3)& (0+255),f,b
 10113  013584  0E00               	movlw	0
 10114  013586  2568               	addwf	??___flge& (0+255),w,b
 10115  013588  6F60               	movwf	___flge@ff1& (0+255),b
 10116  01358A  0E00               	movlw	0
 10117  01358C  2169               	addwfc	(??___flge+1)& (0+255),w,b
 10118  01358E  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 10119  013590  0E00               	movlw	0
 10120  013592  216A               	addwfc	(??___flge+2)& (0+255),w,b
 10121  013594  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 10122  013596  0E80               	movlw	128
 10123  013598  216B               	addwfc	(??___flge+3)& (0+255),w,b
 10124  01359A  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 10125  01359C                     l2694:
 10126                           
 10127                           ; BSR set to: 0
 10128                           
 10129                           ; BSR set to: 0
 10130  01359C  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 10131  01359E  D01D               	goto	l2695
 10132                           
 10133                           ; BSR set to: 0
 10134  0135A0  C064  F068         	movff	___flge@ff2,??___flge
 10135  0135A4  C065  F069         	movff	___flge@ff2+1,??___flge+1
 10136  0135A8  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 10137  0135AC  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 10138  0135B0  1F68               	comf	??___flge& (0+255),f,b
 10139  0135B2  1F69               	comf	(??___flge+1)& (0+255),f,b
 10140  0135B4  1F6A               	comf	(??___flge+2)& (0+255),f,b
 10141  0135B6  1F6B               	comf	(??___flge+3)& (0+255),f,b
 10142  0135B8  2B68               	incf	??___flge& (0+255),f,b
 10143  0135BA  0E00               	movlw	0
 10144  0135BC  2369               	addwfc	(??___flge+1)& (0+255),f,b
 10145  0135BE  236A               	addwfc	(??___flge+2)& (0+255),f,b
 10146  0135C0  236B               	addwfc	(??___flge+3)& (0+255),f,b
 10147  0135C2  0E00               	movlw	0
 10148  0135C4  2568               	addwf	??___flge& (0+255),w,b
 10149  0135C6  6F64               	movwf	___flge@ff2& (0+255),b
 10150  0135C8  0E00               	movlw	0
 10151  0135CA  2169               	addwfc	(??___flge+1)& (0+255),w,b
 10152  0135CC  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 10153  0135CE  0E00               	movlw	0
 10154  0135D0  216A               	addwfc	(??___flge+2)& (0+255),w,b
 10155  0135D2  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 10156  0135D4  0E80               	movlw	128
 10157  0135D6  216B               	addwfc	(??___flge+3)& (0+255),w,b
 10158  0135D8  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 10159  0135DA                     l2695:
 10160                           
 10161                           ; BSR set to: 0
 10162  0135DA  0E00               	movlw	0
 10163  0135DC  1B60               	xorwf	___flge@ff1& (0+255),f,b
 10164  0135DE  0E00               	movlw	0
 10165  0135E0  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 10166  0135E2  0E00               	movlw	0
 10167  0135E4  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 10168  0135E6  0E80               	movlw	128
 10169  0135E8  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 10170  0135EA  0E00               	movlw	0
 10171  0135EC  1B64               	xorwf	___flge@ff2& (0+255),f,b
 10172  0135EE  0E00               	movlw	0
 10173  0135F0  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 10174  0135F2  0E00               	movlw	0
 10175  0135F4  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 10176  0135F6  0E80               	movlw	128
 10177  0135F8  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 10178  0135FA  5164               	movf	___flge@ff2& (0+255),w,b
 10179  0135FC  5D60               	subwf	___flge@ff1& (0+255),w,b
 10180  0135FE  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 10181  013600  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 10182  013602  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 10183  013604  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 10184  013606  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 10185  013608  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 10186  01360A  B0D8               	btfsc	status,0,c
 10187  01360C  D002               	goto	l12789
 10188                           
 10189                           ; BSR set to: 0
 10190  01360E  90D8               	bcf	status,0,c
 10191  013610  0012               	return	
 10192  013612                     l12789:
 10193                           
 10194                           ; BSR set to: 0
 10195                           
 10196                           ; BSR set to: 0
 10197  013612  80D8               	bsf	status,0,c
 10198                           
 10199                           ; BSR set to: 0
 10200  013614  0012               	return	
 10201  013616                     __end_of___flge:
 10202                           	opt stack 0
 10203                           tosu	equ	0xFFF
 10204                           tosh	equ	0xFFE
 10205                           tosl	equ	0xFFD
 10206                           pclath	equ	0xFFA
 10207                           tblptru	equ	0xFF8
 10208                           tblptrh	equ	0xFF7
 10209                           tblptrl	equ	0xFF6
 10210                           tablat	equ	0xFF5
 10211                           prodh	equ	0xFF4
 10212                           prodl	equ	0xFF3
 10213                           postinc0	equ	0xFEE
 10214                           wreg	equ	0xFE8
 10215                           postdec1	equ	0xFE5
 10216                           fsr1h	equ	0xFE2
 10217                           fsr1l	equ	0xFE1
 10218                           indf2	equ	0xFDF
 10219                           postinc2	equ	0xFDE
 10220                           postdec2	equ	0xFDD
 10221                           fsr2h	equ	0xFDA
 10222                           fsr2l	equ	0xFD9
 10223                           status	equ	0xFD8
 10224                           
 10225 ;; *************** function _eval_poly *****************
 10226 ;; Defined at:
 10227 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;  x               4   63[BANK0 ] long 
 10230 ;;  d               2   67[BANK0 ] PTR const 
 10231 ;;		 -> log@coeff(36), exp@coeff(40), 
 10232 ;;  n               2   69[BANK0 ] int 
 10233 ;; Auto vars:     Size  Location     Type
 10234 ;;  res             4   75[BANK0 ] int 
 10235 ;; Return value:  Size  Location     Type
 10236 ;;                  4   63[BANK0 ] int 
 10237 ;; Registers used:
 10238 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10239 ;; Tracked objects:
 10240 ;;		On entry : 0/0
 10241 ;;		On exit  : 0/0
 10242 ;;		Unchanged: 0/0
 10243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10244 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10245 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10246 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10247 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;Total ram usage:       16 bytes
 10249 ;; Hardware stack levels used:    1
 10250 ;; Hardware stack levels required when called:    8
 10251 ;; This function calls:
 10252 ;;		___fladd
 10253 ;;		___flmul
 10254 ;; This function is called by:
 10255 ;;		_exp
 10256 ;;		_log
 10257 ;; This function uses a non-reentrant model
 10258 ;;
 10259                           
 10260                           	psect	text31
 10261  01383A                     __ptext31:
 10262                           	opt stack 0
 10263  01383A                     _eval_poly:
 10264                           	opt stack 18
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;incstack = 0
 10268  01383A  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 10269  01383E  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 10270  013842  0100               	movlb	0	; () banked
 10271  013844  90D8               	bcf	status,0,c
 10272  013846  37A7               	rlcf	??_eval_poly& (0+255),f,b
 10273  013848  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 10274  01384A  90D8               	bcf	status,0,c
 10275  01384C  37A7               	rlcf	??_eval_poly& (0+255),f,b
 10276  01384E  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 10277  013850  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 10278  013854  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 10279  013858  51A7               	movf	??_eval_poly& (0+255),w,b
 10280  01385A  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 10281  01385C  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 10282  01385E  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 10283  013860  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 10284  013864  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 10285  013868                     	if	0	;tblptru may be non-zero
 10286  013868                     	endif
 10287  013868                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10288  013868  0E00               	movlw	low (__mediumconst shr (0+16))
 10289  01386A  6EF8               	movwf	tblptru,c
 10290  01386C                     	endif
 10291  01386C  0009               	tblrd		*+
 10292  01386E  CFF5 F0AB          	movff	tablat,eval_poly@res
 10293  013872  0009               	tblrd		*+
 10294  013874  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 10295  013878  0009               	tblrd		*+
 10296  01387A  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 10297  01387E  000A               	tblrd		*-
 10298  013880  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 10299  013884  D04C               	goto	l3136
 10300  013886                     
 10301                           ; BSR set to: 0
 10302                           
 10303                           ; BSR set to: 0
 10304  013886  C0AB  F072         	movff	eval_poly@res,___flmul@a
 10305  01388A  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 10306  01388E  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 10307  013892  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 10308  013896  C09F  F06E         	movff	eval_poly@x,___flmul@b
 10309  01389A  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 10310  01389E  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 10311  0138A2  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 10312  0138A6  EC61  F084         	call	___flmul	;wreg free
 10313  0138AA  C06E  F08B         	movff	?___flmul,___fladd@b
 10314  0138AE  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 10315  0138B2  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 10316  0138B6  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 10317  0138BA  0100               	movlb	0	; () banked
 10318  0138BC  07A5               	decf	eval_poly@n& (0+255),f,b
 10319  0138BE  A0D8               	btfss	status,0,c
 10320  0138C0  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 10321  0138C2  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 10322  0138C6  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 10323  0138CA  90D8               	bcf	status,0,c
 10324  0138CC  37A7               	rlcf	??_eval_poly& (0+255),f,b
 10325  0138CE  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 10326  0138D0  90D8               	bcf	status,0,c
 10327  0138D2  37A7               	rlcf	??_eval_poly& (0+255),f,b
 10328  0138D4  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 10329  0138D6  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 10330  0138DA  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 10331  0138DE  51A7               	movf	??_eval_poly& (0+255),w,b
 10332  0138E0  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 10333  0138E2  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 10334  0138E4  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 10335  0138E6  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 10336  0138EA  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 10337  0138EE                     	if	0	;tblptru may be non-zero
 10338  0138EE                     	endif
 10339  0138EE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10340  0138EE  0E00               	movlw	low (__mediumconst shr (0+16))
 10341  0138F0  6EF8               	movwf	tblptru,c
 10342  0138F2                     	endif
 10343  0138F2  0009               	tblrd		*+
 10344  0138F4  CFF5 F08F          	movff	tablat,___fladd@a
 10345  0138F8  0009               	tblrd		*+
 10346  0138FA  CFF5 F090          	movff	tablat,___fladd@a+1
 10347  0138FE  0009               	tblrd		*+
 10348  013900  CFF5 F091          	movff	tablat,___fladd@a+2
 10349  013904  000A               	tblrd		*-
 10350  013906  CFF5 F092          	movff	tablat,___fladd@a+3
 10351  01390A  EC0A  F086         	call	___fladd	;wreg free
 10352  01390E  C08B  F0AB         	movff	?___fladd,eval_poly@res
 10353  013912  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 10354  013916  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 10355  01391A  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 10356  01391E                     l3136:
 10357  01391E  0100               	movlb	0	; () banked
 10358  013920  51A5               	movf	eval_poly@n& (0+255),w,b
 10359  013922  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 10360  013924  A4D8               	btfss	status,2,c
 10361  013926  D7AF               	goto	l3137
 10362                           
 10363                           ; BSR set to: 0
 10364  013928  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 10365  01392C  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 10366  013930  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 10367  013934  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 10368                           
 10369                           ; BSR set to: 0
 10370  013938  0012               	return		;funcret
 10371  01393A                     __end_of_eval_poly:
 10372                           	opt stack 0
 10373                           tosu	equ	0xFFF
 10374                           tosh	equ	0xFFE
 10375                           tosl	equ	0xFFD
 10376                           pclath	equ	0xFFA
 10377                           tblptru	equ	0xFF8
 10378                           tblptrh	equ	0xFF7
 10379                           tblptrl	equ	0xFF6
 10380                           tablat	equ	0xFF5
 10381                           prodh	equ	0xFF4
 10382                           prodl	equ	0xFF3
 10383                           postinc0	equ	0xFEE
 10384                           wreg	equ	0xFE8
 10385                           postdec1	equ	0xFE5
 10386                           fsr1h	equ	0xFE2
 10387                           fsr1l	equ	0xFE1
 10388                           indf2	equ	0xFDF
 10389                           postinc2	equ	0xFDE
 10390                           postdec2	equ	0xFDD
 10391                           fsr2h	equ	0xFDA
 10392                           fsr2l	equ	0xFD9
 10393                           status	equ	0xFD8
 10394                           
 10395 ;; *************** function ___flmul *****************
 10396 ;; Defined at:
 10397 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcmul.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;  b               4   14[BANK0 ] int 
 10400 ;;  a               4   18[BANK0 ] int 
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;  prod            4   33[BANK0 ] struct .
 10403 ;;  grs             4   28[BANK0 ] unsigned long 
 10404 ;;  temp            2   37[BANK0 ] struct .
 10405 ;;  bexp            1   32[BANK0 ] unsigned char 
 10406 ;;  aexp            1   27[BANK0 ] unsigned char 
 10407 ;;  sign            1   26[BANK0 ] unsigned char 
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  4   14[BANK0 ] unsigned char 
 10410 ;; Registers used:
 10411 ;;		wreg, status,2, status,0, prodl, prodh
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10417 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10418 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10420 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10421 ;;Total ram usage:       25 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:    7
 10424 ;; This function calls:
 10425 ;;		Nothing
 10426 ;; This function is called by:
 10427 ;;		_ADCAverage
 10428 ;;		_pow
 10429 ;;		_exp
 10430 ;;		_log
 10431 ;;		_eval_poly
 10432 ;;		_ADC_Voltage
 10433 ;;		_Move_ADC_To
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           	psect	text32
 10438  0108C2                     __ptext32:
 10439                           	opt stack 0
 10440  0108C2                     ___flmul:
 10441                           	opt stack 18
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;incstack = 0
 10445  0108C2  0100               	movlb	0	; () banked
 10446  0108C4  5171               	movf	(___flmul@b+3)& (0+255),w,b
 10447  0108C6  0B80               	andlw	128
 10448  0108C8  6F7A               	movwf	___flmul@sign& (0+255),b
 10449  0108CA  5171               	movf	(___flmul@b+3)& (0+255),w,b
 10450  0108CC  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 10451  0108CE  6F80               	movwf	___flmul@bexp& (0+255),b
 10452                           
 10453                           ; BSR set to: 0
 10454  0108D0  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 10455                           
 10456                           ; BSR set to: 0
 10457  0108D2  8180               	bsf	___flmul@bexp& (0+255),0,b
 10458                           
 10459                           ; BSR set to: 0
 10460                           
 10461                           ; BSR set to: 0
 10462  0108D4  5180               	movf	___flmul@bexp& (0+255),w,b
 10463  0108D6  B4D8               	btfsc	status,2,c
 10464  0108D8  D00D               	goto	l3027
 10465                           
 10466                           ; BSR set to: 0
 10467  0108DA  2980               	incf	___flmul@bexp& (0+255),w,b
 10468  0108DC  A4D8               	btfss	status,2,c
 10469  0108DE  D008               	goto	l3028
 10470                           
 10471                           ; BSR set to: 0
 10472  0108E0  0E00               	movlw	0
 10473  0108E2  6F6E               	movwf	___flmul@b& (0+255),b
 10474  0108E4  0E00               	movlw	0
 10475  0108E6  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 10476  0108E8  0E00               	movlw	0
 10477  0108EA  6F70               	movwf	(___flmul@b+2)& (0+255),b
 10478  0108EC  0E00               	movlw	0
 10479  0108EE  6F71               	movwf	(___flmul@b+3)& (0+255),b
 10480  0108F0                     l3028:
 10481                           
 10482                           ; BSR set to: 0
 10483                           
 10484                           ; BSR set to: 0
 10485  0108F0  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 10486  0108F2  D008               	goto	l3029
 10487  0108F4                     l3027:
 10488                           
 10489                           ; BSR set to: 0
 10490                           
 10491                           ; BSR set to: 0
 10492  0108F4  0E00               	movlw	0
 10493  0108F6  6F6E               	movwf	___flmul@b& (0+255),b
 10494  0108F8  0E00               	movlw	0
 10495  0108FA  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 10496  0108FC  0E00               	movlw	0
 10497  0108FE  6F70               	movwf	(___flmul@b+2)& (0+255),b
 10498  010900  0E00               	movlw	0
 10499  010902  6F71               	movwf	(___flmul@b+3)& (0+255),b
 10500  010904                     l3029:
 10501                           
 10502                           ; BSR set to: 0
 10503                           
 10504                           ; BSR set to: 0
 10505  010904  5175               	movf	(___flmul@a+3)& (0+255),w,b
 10506  010906  0B80               	andlw	128
 10507  010908  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 10508                           
 10509                           ; BSR set to: 0
 10510  01090A  5175               	movf	(___flmul@a+3)& (0+255),w,b
 10511  01090C  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 10512  01090E  6F7B               	movwf	___flmul@aexp& (0+255),b
 10513                           
 10514                           ; BSR set to: 0
 10515  010910  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 10516                           
 10517                           ; BSR set to: 0
 10518  010912  817B               	bsf	___flmul@aexp& (0+255),0,b
 10519                           
 10520                           ; BSR set to: 0
 10521                           
 10522                           ; BSR set to: 0
 10523  010914  517B               	movf	___flmul@aexp& (0+255),w,b
 10524  010916  B4D8               	btfsc	status,2,c
 10525  010918  D00D               	goto	l3031
 10526                           
 10527                           ; BSR set to: 0
 10528  01091A  297B               	incf	___flmul@aexp& (0+255),w,b
 10529  01091C  A4D8               	btfss	status,2,c
 10530  01091E  D008               	goto	l3032
 10531                           
 10532                           ; BSR set to: 0
 10533  010920  0E00               	movlw	0
 10534  010922  6F72               	movwf	___flmul@a& (0+255),b
 10535  010924  0E00               	movlw	0
 10536  010926  6F73               	movwf	(___flmul@a+1)& (0+255),b
 10537  010928  0E00               	movlw	0
 10538  01092A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 10539  01092C  0E00               	movlw	0
 10540  01092E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 10541  010930                     l3032:
 10542                           
 10543                           ; BSR set to: 0
 10544                           
 10545                           ; BSR set to: 0
 10546  010930  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 10547  010932  D008               	goto	l3033
 10548  010934                     l3031:
 10549                           
 10550                           ; BSR set to: 0
 10551                           
 10552                           ; BSR set to: 0
 10553  010934  0E00               	movlw	0
 10554  010936  6F72               	movwf	___flmul@a& (0+255),b
 10555  010938  0E00               	movlw	0
 10556  01093A  6F73               	movwf	(___flmul@a+1)& (0+255),b
 10557  01093C  0E00               	movlw	0
 10558  01093E  6F74               	movwf	(___flmul@a+2)& (0+255),b
 10559  010940  0E00               	movlw	0
 10560  010942  6F75               	movwf	(___flmul@a+3)& (0+255),b
 10561  010944                     l3033:
 10562                           
 10563                           ; BSR set to: 0
 10564  010944  517B               	movf	___flmul@aexp& (0+255),w,b
 10565  010946  B4D8               	btfsc	status,2,c
 10566  010948  D003               	goto	u10670
 10567                           
 10568                           ; BSR set to: 0
 10569  01094A  5180               	movf	___flmul@bexp& (0+255),w,b
 10570  01094C  A4D8               	btfss	status,2,c
 10571  01094E  D009               	goto	l3034
 10572  010950                     u10670:
 10573                           
 10574                           ; BSR set to: 0
 10575                           
 10576                           ; BSR set to: 0
 10577  010950  0E00               	movlw	0
 10578  010952  6F6E               	movwf	?___flmul& (0+255),b
 10579  010954  0E00               	movlw	0
 10580  010956  6F6F               	movwf	(?___flmul+1)& (0+255),b
 10581  010958  0E00               	movlw	0
 10582  01095A  6F70               	movwf	(?___flmul+2)& (0+255),b
 10583  01095C  0E00               	movlw	0
 10584  01095E  6F71               	movwf	(?___flmul+3)& (0+255),b
 10585                           
 10586                           ; BSR set to: 0
 10587  010960  0012               	return	
 10588  010962                     l3034:
 10589                           
 10590                           ; BSR set to: 0
 10591                           
 10592                           ; BSR set to: 0
 10593  010962  5174               	movf	(___flmul@a+2)& (0+255),w,b
 10594  010964  036E               	mulwf	___flmul@b& (0+255),b
 10595  010966  CFF3 F085          	movff	prodl,___flmul@temp
 10596  01096A  CFF4 F086          	movff	prodh,___flmul@temp+1
 10597                           
 10598                           ; BSR set to: 0
 10599  01096E  5185               	movf	___flmul@temp& (0+255),w,b
 10600  010970  6F7C               	movwf	___flmul@grs& (0+255),b
 10601  010972  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 10602  010974  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 10603  010976  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 10604                           
 10605                           ; BSR set to: 0
 10606  010978  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10607  01097A  6F81               	movwf	___flmul@prod& (0+255),b
 10608  01097C  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 10609  01097E  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 10610  010980  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 10611  010982  5173               	movf	(___flmul@a+1)& (0+255),w,b
 10612  010984  036F               	mulwf	(___flmul@b+1)& (0+255),b
 10613  010986  CFF3 F085          	movff	prodl,___flmul@temp
 10614  01098A  CFF4 F086          	movff	prodh,___flmul@temp+1
 10615                           
 10616                           ; BSR set to: 0
 10617  01098E  5185               	movf	___flmul@temp& (0+255),w,b
 10618  010990  277C               	addwf	___flmul@grs& (0+255),f,b
 10619  010992  0E00               	movlw	0
 10620  010994  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10621  010996  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10622  010998  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10623                           
 10624                           ; BSR set to: 0
 10625  01099A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10626  01099C  2781               	addwf	___flmul@prod& (0+255),f,b
 10627  01099E  0E00               	movlw	0
 10628  0109A0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10629  0109A2  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10630  0109A4  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10631  0109A6  5172               	movf	___flmul@a& (0+255),w,b
 10632  0109A8  0370               	mulwf	(___flmul@b+2)& (0+255),b
 10633  0109AA  CFF3 F085          	movff	prodl,___flmul@temp
 10634  0109AE  CFF4 F086          	movff	prodh,___flmul@temp+1
 10635                           
 10636                           ; BSR set to: 0
 10637  0109B2  5185               	movf	___flmul@temp& (0+255),w,b
 10638  0109B4  277C               	addwf	___flmul@grs& (0+255),f,b
 10639  0109B6  0E00               	movlw	0
 10640  0109B8  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10641  0109BA  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10642  0109BC  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10643                           
 10644                           ; BSR set to: 0
 10645  0109BE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10646  0109C0  2781               	addwf	___flmul@prod& (0+255),f,b
 10647  0109C2  0E00               	movlw	0
 10648  0109C4  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10649  0109C6  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10650  0109C8  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10651                           
 10652                           ; BSR set to: 0
 10653  0109CA  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 10654  0109CE  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 10655  0109D2  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 10656  0109D6  6B7C               	clrf	___flmul@grs& (0+255),b
 10657                           
 10658                           ; BSR set to: 0
 10659  0109D8  5172               	movf	___flmul@a& (0+255),w,b
 10660  0109DA  036F               	mulwf	(___flmul@b+1)& (0+255),b
 10661  0109DC  CFF3 F085          	movff	prodl,___flmul@temp
 10662  0109E0  CFF4 F086          	movff	prodh,___flmul@temp+1
 10663                           
 10664                           ; BSR set to: 0
 10665  0109E4  5185               	movf	___flmul@temp& (0+255),w,b
 10666  0109E6  277C               	addwf	___flmul@grs& (0+255),f,b
 10667  0109E8  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10668  0109EA  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10669  0109EC  0E00               	movlw	0
 10670  0109EE  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10671  0109F0  0E00               	movlw	0
 10672  0109F2  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10673                           
 10674                           ; BSR set to: 0
 10675  0109F4  5173               	movf	(___flmul@a+1)& (0+255),w,b
 10676  0109F6  036E               	mulwf	___flmul@b& (0+255),b
 10677  0109F8  CFF3 F085          	movff	prodl,___flmul@temp
 10678  0109FC  CFF4 F086          	movff	prodh,___flmul@temp+1
 10679                           
 10680                           ; BSR set to: 0
 10681  010A00  5185               	movf	___flmul@temp& (0+255),w,b
 10682  010A02  277C               	addwf	___flmul@grs& (0+255),f,b
 10683  010A04  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10684  010A06  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10685  010A08  0E00               	movlw	0
 10686  010A0A  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10687  010A0C  0E00               	movlw	0
 10688  010A0E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10689                           
 10690                           ; BSR set to: 0
 10691  010A10  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 10692  010A14  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 10693  010A18  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 10694  010A1C  6B7C               	clrf	___flmul@grs& (0+255),b
 10695  010A1E  5172               	movf	___flmul@a& (0+255),w,b
 10696  010A20  036E               	mulwf	___flmul@b& (0+255),b
 10697  010A22  CFF3 F085          	movff	prodl,___flmul@temp
 10698  010A26  CFF4 F086          	movff	prodh,___flmul@temp+1
 10699                           
 10700                           ; BSR set to: 0
 10701  010A2A  5185               	movf	___flmul@temp& (0+255),w,b
 10702  010A2C  277C               	addwf	___flmul@grs& (0+255),f,b
 10703  010A2E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10704  010A30  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 10705  010A32  0E00               	movlw	0
 10706  010A34  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 10707  010A36  0E00               	movlw	0
 10708  010A38  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 10709                           
 10710                           ; BSR set to: 0
 10711  010A3A  5174               	movf	(___flmul@a+2)& (0+255),w,b
 10712  010A3C  036F               	mulwf	(___flmul@b+1)& (0+255),b
 10713  010A3E  CFF3 F085          	movff	prodl,___flmul@temp
 10714  010A42  CFF4 F086          	movff	prodh,___flmul@temp+1
 10715  010A46  5185               	movf	___flmul@temp& (0+255),w,b
 10716  010A48  2781               	addwf	___flmul@prod& (0+255),f,b
 10717  010A4A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10718  010A4C  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10719  010A4E  0E00               	movlw	0
 10720  010A50  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10721  010A52  0E00               	movlw	0
 10722  010A54  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10723                           
 10724                           ; BSR set to: 0
 10725  010A56  5173               	movf	(___flmul@a+1)& (0+255),w,b
 10726  010A58  0370               	mulwf	(___flmul@b+2)& (0+255),b
 10727  010A5A  CFF3 F085          	movff	prodl,___flmul@temp
 10728  010A5E  CFF4 F086          	movff	prodh,___flmul@temp+1
 10729                           
 10730                           ; BSR set to: 0
 10731  010A62  5185               	movf	___flmul@temp& (0+255),w,b
 10732  010A64  2781               	addwf	___flmul@prod& (0+255),f,b
 10733  010A66  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10734  010A68  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10735  010A6A  0E00               	movlw	0
 10736  010A6C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10737  010A6E  0E00               	movlw	0
 10738  010A70  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10739  010A72  5174               	movf	(___flmul@a+2)& (0+255),w,b
 10740  010A74  0370               	mulwf	(___flmul@b+2)& (0+255),b
 10741  010A76  CFF3 F085          	movff	prodl,___flmul@temp
 10742  010A7A  CFF4 F086          	movff	prodh,___flmul@temp+1
 10743                           
 10744                           ; BSR set to: 0
 10745  010A7E  5185               	movf	___flmul@temp& (0+255),w,b
 10746  010A80  6F76               	movwf	??___flmul& (0+255),b
 10747  010A82  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10748  010A84  6F77               	movwf	(??___flmul+1)& (0+255),b
 10749  010A86  6B78               	clrf	(??___flmul+2)& (0+255),b
 10750  010A88  6B79               	clrf	(??___flmul+3)& (0+255),b
 10751  010A8A  C078  F079         	movff	??___flmul+2,??___flmul+3
 10752  010A8E  C077  F078         	movff	??___flmul+1,??___flmul+2
 10753  010A92  C076  F077         	movff	??___flmul,??___flmul+1
 10754  010A96  6B76               	clrf	??___flmul& (0+255),b
 10755  010A98  5176               	movf	??___flmul& (0+255),w,b
 10756  010A9A  2781               	addwf	___flmul@prod& (0+255),f,b
 10757  010A9C  5177               	movf	(??___flmul+1)& (0+255),w,b
 10758  010A9E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10759  010AA0  5178               	movf	(??___flmul+2)& (0+255),w,b
 10760  010AA2  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10761  010AA4  5179               	movf	(??___flmul+3)& (0+255),w,b
 10762  010AA6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10763                           
 10764                           ; BSR set to: 0
 10765  010AA8  C07C  F076         	movff	___flmul@grs,??___flmul
 10766  010AAC  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 10767  010AB0  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 10768  010AB4  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 10769  010AB8  0E19               	movlw	25
 10770  010ABA  D005               	goto	u10680
 10771  010ABC                     u10685:
 10772  010ABC  90D8               	bcf	status,0,c
 10773  010ABE  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 10774  010AC0  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 10775  010AC2  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 10776  010AC4  3376               	rrcf	??___flmul& (0+255),f,b
 10777  010AC6                     u10680:
 10778  010AC6  2EE8               	decfsz	wreg,f,c
 10779  010AC8  D7F9               	goto	u10685
 10780  010ACA  5176               	movf	??___flmul& (0+255),w,b
 10781  010ACC  2781               	addwf	___flmul@prod& (0+255),f,b
 10782  010ACE  5177               	movf	(??___flmul+1)& (0+255),w,b
 10783  010AD0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10784  010AD2  5178               	movf	(??___flmul+2)& (0+255),w,b
 10785  010AD4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10786  010AD6  5179               	movf	(??___flmul+3)& (0+255),w,b
 10787  010AD8  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10788                           
 10789                           ; BSR set to: 0
 10790  010ADA  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 10791  010ADE  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 10792  010AE2  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 10793  010AE6  6B7C               	clrf	___flmul@grs& (0+255),b
 10794                           
 10795                           ; BSR set to: 0
 10796  010AE8  517B               	movf	___flmul@aexp& (0+255),w,b
 10797  010AEA  C080  F076         	movff	___flmul@bexp,??___flmul
 10798  010AEE  6B77               	clrf	(??___flmul+1)& (0+255),b
 10799  010AF0  2776               	addwf	??___flmul& (0+255),f,b
 10800  010AF2  0E00               	movlw	0
 10801  010AF4  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 10802  010AF6  0E82               	movlw	130
 10803  010AF8  2576               	addwf	??___flmul& (0+255),w,b
 10804  010AFA  6F85               	movwf	___flmul@temp& (0+255),b
 10805  010AFC  0EFF               	movlw	255
 10806  010AFE  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 10807  010B00  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 10808  010B02  D00F               	goto	l3038
 10809  010B04                     
 10810                           ; BSR set to: 0
 10811                           
 10812                           ; BSR set to: 0
 10813  010B04  90D8               	bcf	status,0,c
 10814  010B06  3781               	rlcf	___flmul@prod& (0+255),f,b
 10815  010B08  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 10816  010B0A  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 10817  010B0C  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 10818                           
 10819                           ; BSR set to: 0
 10820  010B0E  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 10821                           
 10822                           ; BSR set to: 0
 10823  010B10  8181               	bsf	___flmul@prod& (0+255),0,b
 10824                           
 10825                           ; BSR set to: 0
 10826  010B12  90D8               	bcf	status,0,c
 10827  010B14  377C               	rlcf	___flmul@grs& (0+255),f,b
 10828  010B16  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 10829  010B18  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 10830  010B1A  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 10831  010B1C  0785               	decf	___flmul@temp& (0+255),f,b
 10832  010B1E  A0D8               	btfss	status,0,c
 10833  010B20  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 10834  010B22                     l3038:
 10835                           
 10836                           ; BSR set to: 0
 10837                           
 10838                           ; BSR set to: 0
 10839  010B22  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 10840  010B24  D7EF               	goto	l3039
 10841                           
 10842                           ; BSR set to: 0
 10843                           
 10844                           ; BSR set to: 0
 10845  010B26  0E00               	movlw	0
 10846  010B28  6F7B               	movwf	___flmul@aexp& (0+255),b
 10847                           
 10848                           ; BSR set to: 0
 10849  010B2A  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 10850  010B2C  D016               	goto	l3045
 10851                           
 10852                           ; BSR set to: 0
 10853  010B2E  0EFF               	movlw	255
 10854  010B30  157C               	andwf	___flmul@grs& (0+255),w,b
 10855  010B32  6F76               	movwf	??___flmul& (0+255),b
 10856  010B34  0EFF               	movlw	255
 10857  010B36  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 10858  010B38  6F77               	movwf	(??___flmul+1)& (0+255),b
 10859  010B3A  0EFF               	movlw	255
 10860  010B3C  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 10861  010B3E  6F78               	movwf	(??___flmul+2)& (0+255),b
 10862  010B40  0E7F               	movlw	127
 10863  010B42  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 10864  010B44  6F79               	movwf	(??___flmul+3)& (0+255),b
 10865  010B46  5176               	movf	??___flmul& (0+255),w,b
 10866  010B48  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 10867  010B4A  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 10868  010B4C  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 10869  010B4E  A4D8               	btfss	status,2,c
 10870  010B50  D002               	goto	u10730
 10871                           
 10872                           ; BSR set to: 0
 10873                           
 10874                           ; BSR set to: 0
 10875  010B52  A181               	btfss	___flmul@prod& (0+255),0,b
 10876  010B54  D002               	goto	l3045
 10877  010B56                     u10730:
 10878                           
 10879                           ; BSR set to: 0
 10880  010B56  0E01               	movlw	1
 10881  010B58  6F7B               	movwf	___flmul@aexp& (0+255),b
 10882  010B5A                     l3045:
 10883                           
 10884                           ; BSR set to: 0
 10885                           
 10886                           ; BSR set to: 0
 10887                           
 10888                           ; BSR set to: 0
 10889  010B5A  517B               	movf	___flmul@aexp& (0+255),w,b
 10890  010B5C  B4D8               	btfsc	status,2,c
 10891  010B5E  D01F               	goto	l3047
 10892                           
 10893                           ; BSR set to: 0
 10894  010B60  0E01               	movlw	1
 10895  010B62  2781               	addwf	___flmul@prod& (0+255),f,b
 10896  010B64  0E00               	movlw	0
 10897  010B66  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 10898  010B68  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 10899  010B6A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 10900                           
 10901                           ; BSR set to: 0
 10902  010B6C  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 10903  010B6E  D017               	goto	l3047
 10904                           
 10905                           ; BSR set to: 0
 10906  010B70  C081  F076         	movff	___flmul@prod,??___flmul
 10907  010B74  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 10908  010B78  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 10909  010B7C  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 10910  010B80  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 10911  010B82  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 10912  010B84  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 10913  010B86  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 10914  010B88  3376               	rrcf	??___flmul& (0+255),f,b
 10915  010B8A  C076  F081         	movff	??___flmul,___flmul@prod
 10916  010B8E  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 10917  010B92  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 10918  010B96  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 10919                           
 10920                           ; BSR set to: 0
 10921  010B9A  4B85               	infsnz	___flmul@temp& (0+255),f,b
 10922  010B9C  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 10923  010B9E                     l3047:
 10924                           
 10925                           ; BSR set to: 0
 10926                           
 10927                           ; BSR set to: 0
 10928                           
 10929                           ; BSR set to: 0
 10930  010B9E  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10931  010BA0  D00D               	goto	l3048
 10932  010BA2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10933  010BA4  E103               	bnz	u10760
 10934  010BA6  2985               	incf	___flmul@temp& (0+255),w,b
 10935  010BA8  A0D8               	btfss	status,0,c
 10936  010BAA  D008               	goto	l3048
 10937  010BAC                     u10760:
 10938                           
 10939                           ; BSR set to: 0
 10940  010BAC  0E00               	movlw	0
 10941  010BAE  6F81               	movwf	___flmul@prod& (0+255),b
 10942  010BB0  0E00               	movlw	0
 10943  010BB2  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 10944  010BB4  0E80               	movlw	128
 10945  010BB6  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 10946  010BB8  0E7F               	movlw	127
 10947  010BBA  D020               	goto	L5
 10948  010BBC                     l3048:
 10949                           
 10950                           ; BSR set to: 0
 10951                           
 10952                           ; BSR set to: 0
 10953  010BBC  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 10954  010BBE  D005               	goto	u10770
 10955  010BC0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 10956  010BC2  E10E               	bnz	l3050
 10957  010BC4  0585               	decf	___flmul@temp& (0+255),w,b
 10958  010BC6  B0D8               	btfsc	status,0,c
 10959  010BC8  D00B               	goto	l3050
 10960  010BCA                     u10770:
 10961                           
 10962                           ; BSR set to: 0
 10963  010BCA  0E00               	movlw	0
 10964  010BCC  6F81               	movwf	___flmul@prod& (0+255),b
 10965  010BCE  0E00               	movlw	0
 10966  010BD0  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 10967  010BD2  0E00               	movlw	0
 10968  010BD4  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 10969  010BD6  0E00               	movlw	0
 10970  010BD8  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 10971  010BDA  0E00               	movlw	0
 10972  010BDC  6F7A               	movwf	___flmul@sign& (0+255),b
 10973  010BDE  D00F               	goto	l3051
 10974  010BE0                     l3050:
 10975                           
 10976                           ; BSR set to: 0
 10977  010BE0  C085  F080         	movff	___flmul@temp,___flmul@bexp
 10978                           
 10979                           ; BSR set to: 0
 10980  010BE4  0EFF               	movlw	255
 10981  010BE6  1781               	andwf	___flmul@prod& (0+255),f,b
 10982  010BE8  0EFF               	movlw	255
 10983  010BEA  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 10984  010BEC  0E7F               	movlw	127
 10985  010BEE  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 10986  010BF0  0E00               	movlw	0
 10987  010BF2  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 10988                           
 10989                           ; BSR set to: 0
 10990  010BF4  B180               	btfsc	___flmul@bexp& (0+255),0,b
 10991                           
 10992                           ; BSR set to: 0
 10993  010BF6  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 10994                           
 10995                           ; BSR set to: 0
 10996                           
 10997                           ; BSR set to: 0
 10998  010BF8  90D8               	bcf	status,0,c
 10999  010BFA  3180               	rrcf	___flmul@bexp& (0+255),w,b
 11000  010BFC                     L5:
 11001  010BFC  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 11002  010BFE                     l3051:
 11003                           
 11004                           ; BSR set to: 0
 11005                           
 11006                           ; BSR set to: 0
 11007                           
 11008                           ; BSR set to: 0
 11009  010BFE  517A               	movf	___flmul@sign& (0+255),w,b
 11010  010C00  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 11011                           
 11012                           ; BSR set to: 0
 11013  010C02  C081  F06E         	movff	___flmul@prod,?___flmul
 11014  010C06  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 11015  010C0A  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 11016  010C0E  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 11017  010C12  0012               	return	
 11018  010C14                     __end_of___flmul:
 11019                           	opt stack 0
 11020                           tosu	equ	0xFFF
 11021                           tosh	equ	0xFFE
 11022                           tosl	equ	0xFFD
 11023                           pclath	equ	0xFFA
 11024                           tblptru	equ	0xFF8
 11025                           tblptrh	equ	0xFF7
 11026                           tblptrl	equ	0xFF6
 11027                           tablat	equ	0xFF5
 11028                           prodh	equ	0xFF4
 11029                           prodl	equ	0xFF3
 11030                           postinc0	equ	0xFEE
 11031                           wreg	equ	0xFE8
 11032                           postdec1	equ	0xFE5
 11033                           fsr1h	equ	0xFE2
 11034                           fsr1l	equ	0xFE1
 11035                           indf2	equ	0xFDF
 11036                           postinc2	equ	0xFDE
 11037                           postdec2	equ	0xFDD
 11038                           fsr2h	equ	0xFDA
 11039                           fsr2l	equ	0xFD9
 11040                           status	equ	0xFD8
 11041                           
 11042 ;; *************** function ___flsub *****************
 11043 ;; Defined at:
 11044 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 11045 ;; Parameters:    Size  Location     Type
 11046 ;;  b               4   63[BANK0 ] unsigned char 
 11047 ;;  a               4   67[BANK0 ] unsigned char 
 11048 ;; Auto vars:     Size  Location     Type
 11049 ;;		None
 11050 ;; Return value:  Size  Location     Type
 11051 ;;                  4   63[BANK0 ] unsigned char 
 11052 ;; Registers used:
 11053 ;;		wreg, status,2, status,0, cstack
 11054 ;; Tracked objects:
 11055 ;;		On entry : 0/0
 11056 ;;		On exit  : 0/0
 11057 ;;		Unchanged: 0/0
 11058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11059 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;Total ram usage:        8 bytes
 11064 ;; Hardware stack levels used:    1
 11065 ;; Hardware stack levels required when called:    8
 11066 ;; This function calls:
 11067 ;;		___fladd
 11068 ;; This function is called by:
 11069 ;;		_exp
 11070 ;; This function uses a non-reentrant model
 11071 ;;
 11072                           
 11073                           	psect	text33
 11074  01520E                     __ptext33:
 11075                           	opt stack 0
 11076  01520E                     ___flsub:
 11077                           	opt stack 18
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;incstack = 0
 11081  01520E  0E00               	movlw	0
 11082  015210  0100               	movlb	0	; () banked
 11083  015212  1BA3               	xorwf	___flsub@a& (0+255),f,b
 11084  015214  0E00               	movlw	0
 11085  015216  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 11086  015218  0E00               	movlw	0
 11087  01521A  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 11088  01521C  0E80               	movlw	128
 11089  01521E  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 11090                           
 11091                           ; BSR set to: 0
 11092  015220  C09F  F08B         	movff	___flsub@b,___fladd@b
 11093  015224  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 11094  015228  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 11095  01522C  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 11096  015230  C0A3  F08F         	movff	___flsub@a,___fladd@a
 11097  015234  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 11098  015238  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 11099  01523C  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 11100  015240  EC0A  F086         	call	___fladd	;wreg free
 11101  015244  C08B  F09F         	movff	?___fladd,?___flsub
 11102  015248  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 11103  01524C  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 11104  015250  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 11105  015254  0012               	return	
 11106  015256                     __end_of___flsub:
 11107                           	opt stack 0
 11108                           tosu	equ	0xFFF
 11109                           tosh	equ	0xFFE
 11110                           tosl	equ	0xFFD
 11111                           pclath	equ	0xFFA
 11112                           tblptru	equ	0xFF8
 11113                           tblptrh	equ	0xFF7
 11114                           tblptrl	equ	0xFF6
 11115                           tablat	equ	0xFF5
 11116                           prodh	equ	0xFF4
 11117                           prodl	equ	0xFF3
 11118                           postinc0	equ	0xFEE
 11119                           wreg	equ	0xFE8
 11120                           postdec1	equ	0xFE5
 11121                           fsr1h	equ	0xFE2
 11122                           fsr1l	equ	0xFE1
 11123                           indf2	equ	0xFDF
 11124                           postinc2	equ	0xFDE
 11125                           postdec2	equ	0xFDD
 11126                           fsr2h	equ	0xFDA
 11127                           fsr2l	equ	0xFD9
 11128                           status	equ	0xFD8
 11129                           
 11130 ;; *************** function ___fladd *****************
 11131 ;; Defined at:
 11132 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 11133 ;; Parameters:    Size  Location     Type
 11134 ;;  b               4   43[BANK0 ] unsigned char 
 11135 ;;  a               4   47[BANK0 ] unsigned char 
 11136 ;; Auto vars:     Size  Location     Type
 11137 ;;  grs             1   62[BANK0 ] unsigned char 
 11138 ;;  bexp            1   61[BANK0 ] unsigned char 
 11139 ;;  aexp            1   60[BANK0 ] unsigned char 
 11140 ;;  signs           1   59[BANK0 ] unsigned char 
 11141 ;; Return value:  Size  Location     Type
 11142 ;;                  4   43[BANK0 ] unsigned char 
 11143 ;; Registers used:
 11144 ;;		wreg, status,2, status,0
 11145 ;; Tracked objects:
 11146 ;;		On entry : 0/0
 11147 ;;		On exit  : 0/0
 11148 ;;		Unchanged: 0/0
 11149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11150 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11151 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11152 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11153 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11154 ;;Total ram usage:       20 bytes
 11155 ;; Hardware stack levels used:    1
 11156 ;; Hardware stack levels required when called:    7
 11157 ;; This function calls:
 11158 ;;		Nothing
 11159 ;; This function is called by:
 11160 ;;		_ADCAverage
 11161 ;;		___flsub
 11162 ;;		_floor
 11163 ;;		_log
 11164 ;;		_eval_poly
 11165 ;;		_Move_ADC_To
 11166 ;; This function uses a non-reentrant model
 11167 ;;
 11168                           
 11169                           	psect	text34
 11170  010C14                     __ptext34:
 11171                           	opt stack 0
 11172  010C14                     ___fladd:
 11173                           	opt stack 18
 11174                           
 11175                           ;incstack = 0
 11176  010C14  0100               	movlb	0	; () banked
 11177  010C16  518E               	movf	(___fladd@b+3)& (0+255),w,b
 11178  010C18  0B80               	andlw	128
 11179  010C1A  6F9B               	movwf	___fladd@signs& (0+255),b
 11180  010C1C  518E               	movf	(___fladd@b+3)& (0+255),w,b
 11181  010C1E  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 11182  010C20  6F9D               	movwf	___fladd@bexp& (0+255),b
 11183                           
 11184                           ; BSR set to: 0
 11185  010C22  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 11186                           
 11187                           ; BSR set to: 0
 11188  010C24  819D               	bsf	___fladd@bexp& (0+255),0,b
 11189                           
 11190                           ; BSR set to: 0
 11191                           
 11192                           ; BSR set to: 0
 11193  010C26  519D               	movf	___fladd@bexp& (0+255),w,b
 11194  010C28  B4D8               	btfsc	status,2,c
 11195  010C2A  D00D               	goto	l2936
 11196                           
 11197                           ; BSR set to: 0
 11198  010C2C  299D               	incf	___fladd@bexp& (0+255),w,b
 11199  010C2E  A4D8               	btfss	status,2,c
 11200  010C30  D008               	goto	l2937
 11201                           
 11202                           ; BSR set to: 0
 11203  010C32  0E00               	movlw	0
 11204  010C34  6F8B               	movwf	___fladd@b& (0+255),b
 11205  010C36  0E00               	movlw	0
 11206  010C38  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11207  010C3A  0E00               	movlw	0
 11208  010C3C  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11209  010C3E  0E00               	movlw	0
 11210  010C40  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11211  010C42                     l2937:
 11212                           
 11213                           ; BSR set to: 0
 11214                           
 11215                           ; BSR set to: 0
 11216  010C42  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 11217  010C44  D006               	goto	L6
 11218  010C46                     l2936:
 11219                           
 11220                           ; BSR set to: 0
 11221                           
 11222                           ; BSR set to: 0
 11223  010C46  0E00               	movlw	0
 11224  010C48  6F8B               	movwf	___fladd@b& (0+255),b
 11225  010C4A  0E00               	movlw	0
 11226  010C4C  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11227  010C4E  0E00               	movlw	0
 11228  010C50  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11229  010C52                     L6:
 11230  010C52  0E00               	movlw	0
 11231  010C54  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11232                           
 11233                           ; BSR set to: 0
 11234                           
 11235                           ; BSR set to: 0
 11236  010C56  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11237  010C58  0B80               	andlw	128
 11238  010C5A  6F9C               	movwf	___fladd@aexp& (0+255),b
 11239                           
 11240                           ; BSR set to: 0
 11241  010C5C  519B               	movf	___fladd@signs& (0+255),w,b
 11242  010C5E  199C               	xorwf	___fladd@aexp& (0+255),w,b
 11243  010C60  A4D8               	btfss	status,2,c
 11244                           
 11245                           ; BSR set to: 0
 11246  010C62  8D9B               	bsf	___fladd@signs& (0+255),6,b
 11247                           
 11248                           ; BSR set to: 0
 11249                           
 11250                           ; BSR set to: 0
 11251  010C64  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11252  010C66  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 11253  010C68  6F9C               	movwf	___fladd@aexp& (0+255),b
 11254                           
 11255                           ; BSR set to: 0
 11256  010C6A  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 11257                           
 11258                           ; BSR set to: 0
 11259  010C6C  819C               	bsf	___fladd@aexp& (0+255),0,b
 11260                           
 11261                           ; BSR set to: 0
 11262                           
 11263                           ; BSR set to: 0
 11264  010C6E  519C               	movf	___fladd@aexp& (0+255),w,b
 11265  010C70  B4D8               	btfsc	status,2,c
 11266  010C72  D00D               	goto	l2941
 11267                           
 11268                           ; BSR set to: 0
 11269  010C74  299C               	incf	___fladd@aexp& (0+255),w,b
 11270  010C76  A4D8               	btfss	status,2,c
 11271  010C78  D008               	goto	l2942
 11272                           
 11273                           ; BSR set to: 0
 11274  010C7A  0E00               	movlw	0
 11275  010C7C  6F8F               	movwf	___fladd@a& (0+255),b
 11276  010C7E  0E00               	movlw	0
 11277  010C80  6F90               	movwf	(___fladd@a+1)& (0+255),b
 11278  010C82  0E00               	movlw	0
 11279  010C84  6F91               	movwf	(___fladd@a+2)& (0+255),b
 11280  010C86  0E00               	movlw	0
 11281  010C88  6F92               	movwf	(___fladd@a+3)& (0+255),b
 11282  010C8A                     l2942:
 11283                           
 11284                           ; BSR set to: 0
 11285                           
 11286                           ; BSR set to: 0
 11287  010C8A  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 11288  010C8C  D006               	goto	L7
 11289  010C8E                     l2941:
 11290                           
 11291                           ; BSR set to: 0
 11292                           
 11293                           ; BSR set to: 0
 11294  010C8E  0E00               	movlw	0
 11295  010C90  6F8F               	movwf	___fladd@a& (0+255),b
 11296  010C92  0E00               	movlw	0
 11297  010C94  6F90               	movwf	(___fladd@a+1)& (0+255),b
 11298  010C96  0E00               	movlw	0
 11299  010C98  6F91               	movwf	(___fladd@a+2)& (0+255),b
 11300  010C9A                     L7:
 11301  010C9A  0E00               	movlw	0
 11302  010C9C  6F92               	movwf	(___fladd@a+3)& (0+255),b
 11303                           
 11304                           ; BSR set to: 0
 11305                           
 11306                           ; BSR set to: 0
 11307  010C9E  519D               	movf	___fladd@bexp& (0+255),w,b
 11308  010CA0  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 11309  010CA2  B0D8               	btfsc	status,0,c
 11310  010CA4  D022               	goto	l2944
 11311                           
 11312                           ; BSR set to: 0
 11313  010CA6  AD9B               	btfss	___fladd@signs& (0+255),6,b
 11314  010CA8  D002               	goto	l2945
 11315                           
 11316                           ; BSR set to: 0
 11317  010CAA  0E80               	movlw	128
 11318  010CAC  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 11319  010CAE                     l2945:
 11320                           
 11321                           ; BSR set to: 0
 11322                           
 11323                           ; BSR set to: 0
 11324  010CAE  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 11325                           
 11326                           ; BSR set to: 0
 11327  010CB2  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 11328                           
 11329                           ; BSR set to: 0
 11330  010CB6  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 11331                           
 11332                           ; BSR set to: 0
 11333  010CBA  C08B  F09E         	movff	___fladd@b,___fladd@grs
 11334                           
 11335                           ; BSR set to: 0
 11336  010CBE  C08F  F08B         	movff	___fladd@a,___fladd@b
 11337                           
 11338                           ; BSR set to: 0
 11339  010CC2  C09E  F08F         	movff	___fladd@grs,___fladd@a
 11340                           
 11341                           ; BSR set to: 0
 11342  010CC6  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 11343                           
 11344                           ; BSR set to: 0
 11345  010CCA  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 11346                           
 11347                           ; BSR set to: 0
 11348  010CCE  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 11349                           
 11350                           ; BSR set to: 0
 11351  010CD2  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 11352                           
 11353                           ; BSR set to: 0
 11354  010CD6  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 11355                           
 11356                           ; BSR set to: 0
 11357  010CDA  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 11358                           
 11359                           ; BSR set to: 0
 11360  010CDE  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 11361                           
 11362                           ; BSR set to: 0
 11363  010CE2  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 11364                           
 11365                           ; BSR set to: 0
 11366  010CE6  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 11367  010CEA                     l2944:
 11368                           
 11369                           ; BSR set to: 0
 11370                           
 11371                           ; BSR set to: 0
 11372  010CEA  0E00               	movlw	0
 11373  010CEC  6F9E               	movwf	___fladd@grs& (0+255),b
 11374                           
 11375                           ; BSR set to: 0
 11376  010CEE  519D               	movf	___fladd@bexp& (0+255),w,b
 11377  010CF0  6F93               	movwf	??___fladd& (0+255),b
 11378  010CF2  6B94               	clrf	(??___fladd+1)& (0+255),b
 11379  010CF4  1F93               	comf	??___fladd& (0+255),f,b
 11380  010CF6  1F94               	comf	(??___fladd+1)& (0+255),f,b
 11381  010CF8  4B93               	infsnz	??___fladd& (0+255),f,b
 11382  010CFA  2B94               	incf	(??___fladd+1)& (0+255),f,b
 11383  010CFC  519C               	movf	___fladd@aexp& (0+255),w,b
 11384  010CFE  6F95               	movwf	(??___fladd+2)& (0+255),b
 11385  010D00  6B96               	clrf	(??___fladd+3)& (0+255),b
 11386  010D02  5193               	movf	??___fladd& (0+255),w,b
 11387  010D04  2795               	addwf	(??___fladd+2)& (0+255),f,b
 11388  010D06  5194               	movf	(??___fladd+1)& (0+255),w,b
 11389  010D08  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 11390  010D0A  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 11391  010D0C  D02C               	goto	l2948
 11392  010D0E  5196               	movf	(??___fladd+3)& (0+255),w,b
 11393  010D10  E104               	bnz	u10300
 11394  010D12  0E1A               	movlw	26
 11395  010D14  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 11396  010D16  A0D8               	btfss	status,0,c
 11397  010D18  D026               	goto	l2948
 11398  010D1A                     u10300:
 11399                           
 11400                           ; BSR set to: 0
 11401  010D1A  518B               	movf	___fladd@b& (0+255),w,b
 11402  010D1C  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 11403  010D1E  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 11404  010D20  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 11405  010D22  B4D8               	btfsc	status,2,c
 11406  010D24  D002               	goto	u10310
 11407  010D26  0E01               	movlw	1
 11408  010D28  D001               	goto	u10320
 11409  010D2A                     u10310:
 11410  010D2A  0E00               	movlw	0
 11411  010D2C                     u10320:
 11412  010D2C  6F9E               	movwf	___fladd@grs& (0+255),b
 11413                           
 11414                           ; BSR set to: 0
 11415  010D2E  0E00               	movlw	0
 11416  010D30  6F8B               	movwf	___fladd@b& (0+255),b
 11417  010D32  0E00               	movlw	0
 11418  010D34  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11419  010D36  0E00               	movlw	0
 11420  010D38  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11421  010D3A  0E00               	movlw	0
 11422  010D3C  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11423                           
 11424                           ; BSR set to: 0
 11425  010D3E  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 11426  010D42  D015               	goto	u10350
 11427  010D44                     l2949:
 11428                           
 11429                           ; BSR set to: 0
 11430  010D44  A19E               	btfss	___fladd@grs& (0+255),0,b
 11431  010D46  D005               	goto	l2950
 11432                           
 11433                           ; BSR set to: 0
 11434  010D48  90D8               	bcf	status,0,c
 11435  010D4A  319E               	rrcf	___fladd@grs& (0+255),w,b
 11436  010D4C  0901               	iorlw	1
 11437  010D4E  6F9E               	movwf	___fladd@grs& (0+255),b
 11438  010D50  D002               	goto	l2951
 11439  010D52                     l2950:
 11440                           
 11441                           ; BSR set to: 0
 11442                           
 11443                           ; BSR set to: 0
 11444  010D52  90D8               	bcf	status,0,c
 11445  010D54  339E               	rrcf	___fladd@grs& (0+255),f,b
 11446  010D56                     l2951:
 11447                           
 11448                           ; BSR set to: 0
 11449                           
 11450                           ; BSR set to: 0
 11451  010D56  B18B               	btfsc	___fladd@b& (0+255),0,b
 11452                           
 11453                           ; BSR set to: 0
 11454  010D58  8F9E               	bsf	___fladd@grs& (0+255),7,b
 11455                           
 11456                           ; BSR set to: 0
 11457                           
 11458                           ; BSR set to: 0
 11459  010D5A  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 11460  010D5C  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 11461  010D5E  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 11462  010D60  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 11463  010D62  338B               	rrcf	___fladd@b& (0+255),f,b
 11464                           
 11465                           ; BSR set to: 0
 11466  010D64  2B9D               	incf	___fladd@bexp& (0+255),f,b
 11467  010D66                     l2948:
 11468                           
 11469                           ; BSR set to: 0
 11470  010D66  519C               	movf	___fladd@aexp& (0+255),w,b
 11471  010D68  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 11472  010D6A  A0D8               	btfss	status,0,c
 11473  010D6C  D7EB               	goto	l2949
 11474  010D6E                     u10350:
 11475                           
 11476                           ; BSR set to: 0
 11477                           
 11478                           ; BSR set to: 0
 11479  010D6E  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 11480  010D70  D029               	goto	l2954
 11481                           
 11482                           ; BSR set to: 0
 11483  010D72  519D               	movf	___fladd@bexp& (0+255),w,b
 11484  010D74  A4D8               	btfss	status,2,c
 11485  010D76  D009               	goto	l2955
 11486                           
 11487                           ; BSR set to: 0
 11488  010D78  0E00               	movlw	0
 11489  010D7A  6F8B               	movwf	?___fladd& (0+255),b
 11490  010D7C  0E00               	movlw	0
 11491  010D7E  6F8C               	movwf	(?___fladd+1)& (0+255),b
 11492  010D80  0E00               	movlw	0
 11493  010D82  6F8D               	movwf	(?___fladd+2)& (0+255),b
 11494  010D84  0E00               	movlw	0
 11495  010D86  6F8E               	movwf	(?___fladd+3)& (0+255),b
 11496                           
 11497                           ; BSR set to: 0
 11498  010D88  0012               	return	
 11499  010D8A                     l2955:
 11500                           
 11501                           ; BSR set to: 0
 11502                           
 11503                           ; BSR set to: 0
 11504  010D8A  518F               	movf	___fladd@a& (0+255),w,b
 11505  010D8C  278B               	addwf	___fladd@b& (0+255),f,b
 11506  010D8E  5190               	movf	(___fladd@a+1)& (0+255),w,b
 11507  010D90  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 11508  010D92  5191               	movf	(___fladd@a+2)& (0+255),w,b
 11509  010D94  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 11510  010D96  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11511  010D98  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 11512                           
 11513                           ; BSR set to: 0
 11514  010D9A  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 11515  010D9C  D083               	goto	u10480
 11516                           
 11517                           ; BSR set to: 0
 11518  010D9E  A19E               	btfss	___fladd@grs& (0+255),0,b
 11519  010DA0  D006               	goto	l2958
 11520                           
 11521                           ; BSR set to: 0
 11522  010DA2  90D8               	bcf	status,0,c
 11523  010DA4  339E               	rrcf	___fladd@grs& (0+255),f,b
 11524  010DA6  519E               	movf	___fladd@grs& (0+255),w,b
 11525  010DA8  0901               	iorlw	1
 11526  010DAA  6F9E               	movwf	___fladd@grs& (0+255),b
 11527  010DAC  D002               	goto	l2959
 11528  010DAE                     l2958:
 11529                           
 11530                           ; BSR set to: 0
 11531                           
 11532                           ; BSR set to: 0
 11533  010DAE  90D8               	bcf	status,0,c
 11534  010DB0  339E               	rrcf	___fladd@grs& (0+255),f,b
 11535  010DB2                     l2959:
 11536                           
 11537                           ; BSR set to: 0
 11538                           
 11539                           ; BSR set to: 0
 11540  010DB2  B18B               	btfsc	___fladd@b& (0+255),0,b
 11541                           
 11542                           ; BSR set to: 0
 11543  010DB4  8F9E               	bsf	___fladd@grs& (0+255),7,b
 11544                           
 11545                           ; BSR set to: 0
 11546                           
 11547                           ; BSR set to: 0
 11548  010DB6  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 11549  010DB8  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 11550  010DBA  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 11551  010DBC  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 11552  010DBE  338B               	rrcf	___fladd@b& (0+255),f,b
 11553                           
 11554                           ; BSR set to: 0
 11555  010DC0  2B9D               	incf	___fladd@bexp& (0+255),f,b
 11556                           
 11557                           ; BSR set to: 0
 11558  010DC2  D070               	goto	u10480
 11559  010DC4                     l2954:
 11560                           
 11561                           ; BSR set to: 0
 11562                           
 11563                           ; BSR set to: 0
 11564  010DC4  518F               	movf	___fladd@a& (0+255),w,b
 11565  010DC6  5D8B               	subwf	___fladd@b& (0+255),w,b
 11566  010DC8  5190               	movf	(___fladd@a+1)& (0+255),w,b
 11567  010DCA  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 11568  010DCC  5191               	movf	(___fladd@a+2)& (0+255),w,b
 11569  010DCE  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 11570  010DD0  518E               	movf	(___fladd@b+3)& (0+255),w,b
 11571  010DD2  0A80               	xorlw	128
 11572  010DD4  6F93               	movwf	??___fladd& (0+255),b
 11573  010DD6  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11574  010DD8  0A80               	xorlw	128
 11575  010DDA  5993               	subwfb	??___fladd& (0+255),w,b
 11576  010DDC  B0D8               	btfsc	status,0,c
 11577  010DDE  D036               	goto	l2962
 11578                           
 11579                           ; BSR set to: 0
 11580  010DE0  C08B  F093         	movff	___fladd@b,??___fladd
 11581  010DE4  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 11582  010DE8  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 11583  010DEC  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 11584  010DF0  1F93               	comf	??___fladd& (0+255),f,b
 11585  010DF2  1F94               	comf	(??___fladd+1)& (0+255),f,b
 11586  010DF4  1F95               	comf	(??___fladd+2)& (0+255),f,b
 11587  010DF6  1F96               	comf	(??___fladd+3)& (0+255),f,b
 11588  010DF8  2B93               	incf	??___fladd& (0+255),f,b
 11589  010DFA  0E00               	movlw	0
 11590  010DFC  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 11591  010DFE  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 11592  010E00  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 11593  010E02  518F               	movf	___fladd@a& (0+255),w,b
 11594  010E04  2593               	addwf	??___fladd& (0+255),w,b
 11595  010E06  6F97               	movwf	(??___fladd+4)& (0+255),b
 11596  010E08  5190               	movf	(___fladd@a+1)& (0+255),w,b
 11597  010E0A  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 11598  010E0C  6F98               	movwf	(??___fladd+5)& (0+255),b
 11599  010E0E  5191               	movf	(___fladd@a+2)& (0+255),w,b
 11600  010E10  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 11601  010E12  6F99               	movwf	(??___fladd+6)& (0+255),b
 11602  010E14  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11603  010E16  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 11604  010E18  6F9A               	movwf	(??___fladd+7)& (0+255),b
 11605  010E1A  0EFF               	movlw	255
 11606  010E1C  2597               	addwf	(??___fladd+4)& (0+255),w,b
 11607  010E1E  6F8B               	movwf	___fladd@b& (0+255),b
 11608  010E20  0EFF               	movlw	255
 11609  010E22  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 11610  010E24  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11611  010E26  0EFF               	movlw	255
 11612  010E28  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 11613  010E2A  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11614  010E2C  0EFF               	movlw	255
 11615  010E2E  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 11616  010E30  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11617  010E32  0E80               	movlw	128
 11618  010E34  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 11619                           
 11620                           ; BSR set to: 0
 11621  010E36  6D9E               	negf	___fladd@grs& (0+255),b
 11622                           
 11623                           ; BSR set to: 0
 11624  010E38  519E               	movf	___fladd@grs& (0+255),w,b
 11625  010E3A  A4D8               	btfss	status,2,c
 11626  010E3C  D00F               	goto	l2964
 11627                           
 11628                           ; BSR set to: 0
 11629  010E3E  0E01               	movlw	1
 11630  010E40  278B               	addwf	___fladd@b& (0+255),f,b
 11631  010E42  0E00               	movlw	0
 11632  010E44  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 11633  010E46  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 11634  010E48  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 11635                           
 11636                           ; BSR set to: 0
 11637  010E4A  D008               	goto	l2964
 11638  010E4C                     l2962:
 11639                           
 11640                           ; BSR set to: 0
 11641                           
 11642                           ; BSR set to: 0
 11643  010E4C  518F               	movf	___fladd@a& (0+255),w,b
 11644  010E4E  5F8B               	subwf	___fladd@b& (0+255),f,b
 11645  010E50  5190               	movf	(___fladd@a+1)& (0+255),w,b
 11646  010E52  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 11647  010E54  5191               	movf	(___fladd@a+2)& (0+255),w,b
 11648  010E56  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 11649  010E58  5192               	movf	(___fladd@a+3)& (0+255),w,b
 11650  010E5A  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 11651  010E5C                     l2964:
 11652                           
 11653                           ; BSR set to: 0
 11654  010E5C  518B               	movf	___fladd@b& (0+255),w,b
 11655  010E5E  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 11656  010E60  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 11657  010E62  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 11658  010E64  A4D8               	btfss	status,2,c
 11659  010E66  D01C               	goto	l2971
 11660                           
 11661                           ; BSR set to: 0
 11662  010E68  519E               	movf	___fladd@grs& (0+255),w,b
 11663  010E6A  A4D8               	btfss	status,2,c
 11664  010E6C  D019               	goto	l2971
 11665                           
 11666                           ; BSR set to: 0
 11667  010E6E  0E00               	movlw	0
 11668  010E70  6F8B               	movwf	?___fladd& (0+255),b
 11669  010E72  0E00               	movlw	0
 11670  010E74  6F8C               	movwf	(?___fladd+1)& (0+255),b
 11671  010E76  0E00               	movlw	0
 11672  010E78  6F8D               	movwf	(?___fladd+2)& (0+255),b
 11673  010E7A  0E00               	movlw	0
 11674  010E7C  6F8E               	movwf	(?___fladd+3)& (0+255),b
 11675                           
 11676                           ; BSR set to: 0
 11677  010E7E  0012               	return	
 11678  010E80                     
 11679                           ; BSR set to: 0
 11680                           
 11681                           ; BSR set to: 0
 11682  010E80  90D8               	bcf	status,0,c
 11683  010E82  378B               	rlcf	___fladd@b& (0+255),f,b
 11684  010E84  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 11685  010E86  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 11686  010E88  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 11687                           
 11688                           ; BSR set to: 0
 11689  010E8A  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 11690                           
 11691                           ; BSR set to: 0
 11692  010E8C  818B               	bsf	___fladd@b& (0+255),0,b
 11693                           
 11694                           ; BSR set to: 0
 11695                           
 11696                           ; BSR set to: 0
 11697  010E8E  A19E               	btfss	___fladd@grs& (0+255),0,b
 11698  010E90  D002               	goto	l2969
 11699                           
 11700                           ; BSR set to: 0
 11701  010E92  80D8               	bsf	status,0,c
 11702  010E94  D001               	goto	L8
 11703  010E96                     l2969:
 11704                           
 11705                           ; BSR set to: 0
 11706                           
 11707                           ; BSR set to: 0
 11708  010E96  90D8               	bcf	status,0,c
 11709  010E98                     L8:
 11710  010E98  379E               	rlcf	___fladd@grs& (0+255),f,b
 11711                           
 11712                           ; BSR set to: 0
 11713                           
 11714                           ; BSR set to: 0
 11715  010E9A  519D               	movf	___fladd@bexp& (0+255),w,b
 11716  010E9C  A4D8               	btfss	status,2,c
 11717                           
 11718                           ; BSR set to: 0
 11719  010E9E  079D               	decf	___fladd@bexp& (0+255),f,b
 11720  010EA0                     l2971:
 11721                           
 11722                           ; BSR set to: 0
 11723                           
 11724                           ; BSR set to: 0
 11725                           
 11726                           ; BSR set to: 0
 11727  010EA0  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 11728  010EA2  D7EE               	goto	l2967
 11729  010EA4                     u10480:
 11730                           
 11731                           ; BSR set to: 0
 11732                           
 11733                           ; BSR set to: 0
 11734                           
 11735                           ; BSR set to: 0
 11736  010EA4  0E00               	movlw	0
 11737  010EA6  6F9C               	movwf	___fladd@aexp& (0+255),b
 11738                           
 11739                           ; BSR set to: 0
 11740  010EA8  AF9E               	btfss	___fladd@grs& (0+255),7,b
 11741  010EAA  D00A               	goto	l2976
 11742                           
 11743                           ; BSR set to: 0
 11744  010EAC  C09E  F093         	movff	___fladd@grs,??___fladd
 11745  010EB0  0E7F               	movlw	127
 11746  010EB2  1793               	andwf	??___fladd& (0+255),f,b
 11747  010EB4  A4D8               	btfss	status,2,c
 11748  010EB6  D002               	goto	u10510
 11749                           
 11750                           ; BSR set to: 0
 11751                           
 11752                           ; BSR set to: 0
 11753  010EB8  A18B               	btfss	___fladd@b& (0+255),0,b
 11754  010EBA  D002               	goto	l2976
 11755  010EBC                     u10510:
 11756                           
 11757                           ; BSR set to: 0
 11758  010EBC  0E01               	movlw	1
 11759  010EBE  6F9C               	movwf	___fladd@aexp& (0+255),b
 11760  010EC0                     l2976:
 11761                           
 11762                           ; BSR set to: 0
 11763                           
 11764                           ; BSR set to: 0
 11765                           
 11766                           ; BSR set to: 0
 11767  010EC0  519C               	movf	___fladd@aexp& (0+255),w,b
 11768  010EC2  B4D8               	btfsc	status,2,c
 11769  010EC4  D020               	goto	l2979
 11770                           
 11771                           ; BSR set to: 0
 11772  010EC6  0E01               	movlw	1
 11773  010EC8  278B               	addwf	___fladd@b& (0+255),f,b
 11774  010ECA  0E00               	movlw	0
 11775  010ECC  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 11776  010ECE  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 11777  010ED0  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 11778                           
 11779                           ; BSR set to: 0
 11780  010ED2  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 11781  010ED4  D018               	goto	l2979
 11782                           
 11783                           ; BSR set to: 0
 11784  010ED6  C08B  F093         	movff	___fladd@b,??___fladd
 11785  010EDA  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 11786  010EDE  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 11787  010EE2  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 11788  010EE6  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 11789  010EE8  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 11790  010EEA  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 11791  010EEC  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 11792  010EEE  3393               	rrcf	??___fladd& (0+255),f,b
 11793  010EF0  C093  F08B         	movff	??___fladd,___fladd@b
 11794  010EF4  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 11795  010EF8  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 11796  010EFC  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 11797  010F00  299D               	incf	___fladd@bexp& (0+255),w,b
 11798  010F02  A4D8               	btfss	status,2,c
 11799                           
 11800                           ; BSR set to: 0
 11801  010F04  2B9D               	incf	___fladd@bexp& (0+255),f,b
 11802  010F06                     l2979:
 11803                           
 11804                           ; BSR set to: 0
 11805                           
 11806                           ; BSR set to: 0
 11807                           
 11808                           ; BSR set to: 0
 11809                           
 11810                           ; BSR set to: 0
 11811  010F06  299D               	incf	___fladd@bexp& (0+255),w,b
 11812  010F08  B4D8               	btfsc	status,2,c
 11813  010F0A  D003               	goto	u10560
 11814                           
 11815                           ; BSR set to: 0
 11816  010F0C  519D               	movf	___fladd@bexp& (0+255),w,b
 11817  010F0E  A4D8               	btfss	status,2,c
 11818  010F10  D00D               	goto	l2983
 11819  010F12                     u10560:
 11820                           
 11821                           ; BSR set to: 0
 11822                           
 11823                           ; BSR set to: 0
 11824  010F12  0E00               	movlw	0
 11825  010F14  6F8B               	movwf	___fladd@b& (0+255),b
 11826  010F16  0E00               	movlw	0
 11827  010F18  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 11828  010F1A  0E00               	movlw	0
 11829  010F1C  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 11830  010F1E  0E00               	movlw	0
 11831  010F20  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11832  010F22  519D               	movf	___fladd@bexp& (0+255),w,b
 11833  010F24  A4D8               	btfss	status,2,c
 11834  010F26  D002               	goto	l2983
 11835                           
 11836                           ; BSR set to: 0
 11837  010F28  0E00               	movlw	0
 11838  010F2A  6F9B               	movwf	___fladd@signs& (0+255),b
 11839  010F2C                     l2983:
 11840                           
 11841                           ; BSR set to: 0
 11842                           
 11843                           ; BSR set to: 0
 11844                           
 11845                           ; BSR set to: 0
 11846  010F2C  A19D               	btfss	___fladd@bexp& (0+255),0,b
 11847  010F2E  D002               	goto	l2984
 11848                           
 11849                           ; BSR set to: 0
 11850  010F30  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 11851  010F32  D001               	goto	l2985
 11852  010F34                     l2984:
 11853                           
 11854                           ; BSR set to: 0
 11855                           
 11856                           ; BSR set to: 0
 11857  010F34  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 11858  010F36                     l2985:
 11859                           
 11860                           ; BSR set to: 0
 11861                           
 11862                           ; BSR set to: 0
 11863  010F36  90D8               	bcf	status,0,c
 11864  010F38  319D               	rrcf	___fladd@bexp& (0+255),w,b
 11865  010F3A  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 11866                           
 11867                           ; BSR set to: 0
 11868  010F3C  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 11869                           
 11870                           ; BSR set to: 0
 11871  010F3E  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 11872                           
 11873                           ; BSR set to: 0
 11874                           
 11875                           ; BSR set to: 0
 11876  010F40  C08B  F08B         	movff	___fladd@b,?___fladd
 11877  010F44  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 11878  010F48  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 11879  010F4C  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 11880  010F50  0012               	return	
 11881  010F52                     __end_of___fladd:
 11882                           	opt stack 0
 11883                           tosu	equ	0xFFF
 11884                           tosh	equ	0xFFE
 11885                           tosl	equ	0xFFD
 11886                           pclath	equ	0xFFA
 11887                           tblptru	equ	0xFF8
 11888                           tblptrh	equ	0xFF7
 11889                           tblptrl	equ	0xFF6
 11890                           tablat	equ	0xFF5
 11891                           prodh	equ	0xFF4
 11892                           prodl	equ	0xFF3
 11893                           postinc0	equ	0xFEE
 11894                           wreg	equ	0xFE8
 11895                           postdec1	equ	0xFE5
 11896                           fsr1h	equ	0xFE2
 11897                           fsr1l	equ	0xFE1
 11898                           indf2	equ	0xFDF
 11899                           postinc2	equ	0xFDE
 11900                           postdec2	equ	0xFDD
 11901                           fsr2h	equ	0xFDA
 11902                           fsr2l	equ	0xFD9
 11903                           status	equ	0xFD8
 11904                           
 11905 ;; *************** function ___flneg *****************
 11906 ;; Defined at:
 11907 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flneg.c"
 11908 ;; Parameters:    Size  Location     Type
 11909 ;;  f1              4   39[BANK0 ] unsigned char 
 11910 ;; Auto vars:     Size  Location     Type
 11911 ;;		None
 11912 ;; Return value:  Size  Location     Type
 11913 ;;                  4   39[BANK0 ] unsigned char 
 11914 ;; Registers used:
 11915 ;;		wreg, status,2, status,0
 11916 ;; Tracked objects:
 11917 ;;		On entry : 0/0
 11918 ;;		On exit  : 0/0
 11919 ;;		Unchanged: 0/0
 11920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11921 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11924 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;Total ram usage:        4 bytes
 11926 ;; Hardware stack levels used:    1
 11927 ;; Hardware stack levels required when called:    7
 11928 ;; This function calls:
 11929 ;;		Nothing
 11930 ;; This function is called by:
 11931 ;;		_ADCAverage
 11932 ;;		_pow
 11933 ;;		_exp
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           	psect	text35
 11938  015692                     __ptext35:
 11939                           	opt stack 0
 11940  015692                     ___flneg:
 11941                           	opt stack 19
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;incstack = 0
 11945  015692  0100               	movlb	0	; () banked
 11946  015694  5187               	movf	___flneg@f1& (0+255),w,b
 11947  015696  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 11948  015698  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 11949  01569A  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 11950  01569C  B4D8               	btfsc	status,2,c
 11951  01569E  D008               	goto	l2699
 11952                           
 11953                           ; BSR set to: 0
 11954  0156A0  0E00               	movlw	0
 11955  0156A2  1B87               	xorwf	___flneg@f1& (0+255),f,b
 11956  0156A4  0E00               	movlw	0
 11957  0156A6  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 11958  0156A8  0E00               	movlw	0
 11959  0156AA  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 11960  0156AC  0E80               	movlw	128
 11961  0156AE  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 11962  0156B0                     l2699:
 11963                           
 11964                           ; BSR set to: 0
 11965                           
 11966                           ; BSR set to: 0
 11967  0156B0  C087  F087         	movff	___flneg@f1,?___flneg
 11968  0156B4  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 11969  0156B8  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 11970  0156BC  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 11971  0156C0  0012               	return	
 11972  0156C2                     __end_of___flneg:
 11973                           	opt stack 0
 11974                           tosu	equ	0xFFF
 11975                           tosh	equ	0xFFE
 11976                           tosl	equ	0xFFD
 11977                           pclath	equ	0xFFA
 11978                           tblptru	equ	0xFF8
 11979                           tblptrh	equ	0xFF7
 11980                           tblptrl	equ	0xFF6
 11981                           tablat	equ	0xFF5
 11982                           prodh	equ	0xFF4
 11983                           prodl	equ	0xFF3
 11984                           postinc0	equ	0xFEE
 11985                           wreg	equ	0xFE8
 11986                           postdec1	equ	0xFE5
 11987                           fsr1h	equ	0xFE2
 11988                           fsr1l	equ	0xFE1
 11989                           indf2	equ	0xFDF
 11990                           postinc2	equ	0xFDE
 11991                           postdec2	equ	0xFDD
 11992                           fsr2h	equ	0xFDA
 11993                           fsr2l	equ	0xFD9
 11994                           status	equ	0xFD8
 11995                           
 11996 ;; *************** function ___fldiv *****************
 11997 ;; Defined at:
 11998 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcdiv.c"
 11999 ;; Parameters:    Size  Location     Type
 12000 ;;  b               4    0[BANK0 ] unsigned char 
 12001 ;;  a               4    4[BANK0 ] unsigned char 
 12002 ;; Auto vars:     Size  Location     Type
 12003 ;;  grs             4   19[BANK0 ] unsigned long 
 12004 ;;  rem             4   13[BANK0 ] unsigned long 
 12005 ;;  new_exp         2   17[BANK0 ] int 
 12006 ;;  aexp            1   24[BANK0 ] unsigned char 
 12007 ;;  bexp            1   23[BANK0 ] unsigned char 
 12008 ;;  sign            1   12[BANK0 ] unsigned char 
 12009 ;; Return value:  Size  Location     Type
 12010 ;;                  4    0[BANK0 ] unsigned char 
 12011 ;; Registers used:
 12012 ;;		wreg, status,2, status,0
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12018 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12019 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12020 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12021 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12022 ;;Total ram usage:       25 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; Hardware stack levels required when called:    7
 12025 ;; This function calls:
 12026 ;;		Nothing
 12027 ;; This function is called by:
 12028 ;;		_exp
 12029 ;;		_ADC_Voltage
 12030 ;; This function uses a non-reentrant model
 12031 ;;
 12032                           
 12033                           	psect	text36
 12034  011242                     __ptext36:
 12035                           	opt stack 0
 12036  011242                     ___fldiv:
 12037                           	opt stack 19
 12038                           
 12039                           ; BSR set to: 0
 12040                           ;incstack = 0
 12041  011242  0100               	movlb	0	; () banked
 12042  011244  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 12043  011246  0B80               	andlw	128
 12044  011248  6F6C               	movwf	___fldiv@sign& (0+255),b
 12045  01124A  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 12046  01124C  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 12047  01124E  6F77               	movwf	___fldiv@bexp& (0+255),b
 12048                           
 12049                           ; BSR set to: 0
 12050  011250  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 12051                           
 12052                           ; BSR set to: 0
 12053  011252  8177               	bsf	___fldiv@bexp& (0+255),0,b
 12054                           
 12055                           ; BSR set to: 0
 12056                           
 12057                           ; BSR set to: 0
 12058  011254  5177               	movf	___fldiv@bexp& (0+255),w,b
 12059  011256  B4D8               	btfsc	status,2,c
 12060  011258  D00D               	goto	l2993
 12061                           
 12062                           ; BSR set to: 0
 12063  01125A  2977               	incf	___fldiv@bexp& (0+255),w,b
 12064  01125C  A4D8               	btfss	status,2,c
 12065  01125E  D008               	goto	l2994
 12066                           
 12067                           ; BSR set to: 0
 12068  011260  0E00               	movlw	0
 12069  011262  6F60               	movwf	___fldiv@b& (0+255),b
 12070  011264  0E00               	movlw	0
 12071  011266  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12072  011268  0E00               	movlw	0
 12073  01126A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12074  01126C  0E00               	movlw	0
 12075  01126E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12076  011270                     l2994:
 12077                           
 12078                           ; BSR set to: 0
 12079                           
 12080                           ; BSR set to: 0
 12081  011270  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 12082  011272  D006               	goto	L9
 12083  011274                     l2993:
 12084                           
 12085                           ; BSR set to: 0
 12086                           
 12087                           ; BSR set to: 0
 12088  011274  0E00               	movlw	0
 12089  011276  6F60               	movwf	___fldiv@b& (0+255),b
 12090  011278  0E00               	movlw	0
 12091  01127A  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12092  01127C  0E00               	movlw	0
 12093  01127E  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12094  011280                     L9:
 12095  011280  0E00               	movlw	0
 12096  011282  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12097                           
 12098                           ; BSR set to: 0
 12099                           
 12100                           ; BSR set to: 0
 12101  011284  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 12102  011286  0B80               	andlw	128
 12103  011288  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 12104                           
 12105                           ; BSR set to: 0
 12106  01128A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 12107  01128C  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 12108  01128E  6F78               	movwf	___fldiv@aexp& (0+255),b
 12109                           
 12110                           ; BSR set to: 0
 12111  011290  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 12112                           
 12113                           ; BSR set to: 0
 12114  011292  8178               	bsf	___fldiv@aexp& (0+255),0,b
 12115                           
 12116                           ; BSR set to: 0
 12117                           
 12118                           ; BSR set to: 0
 12119  011294  5178               	movf	___fldiv@aexp& (0+255),w,b
 12120  011296  B4D8               	btfsc	status,2,c
 12121  011298  D00D               	goto	l2997
 12122                           
 12123                           ; BSR set to: 0
 12124  01129A  2978               	incf	___fldiv@aexp& (0+255),w,b
 12125  01129C  A4D8               	btfss	status,2,c
 12126  01129E  D008               	goto	l2998
 12127                           
 12128                           ; BSR set to: 0
 12129  0112A0  0E00               	movlw	0
 12130  0112A2  6F64               	movwf	___fldiv@a& (0+255),b
 12131  0112A4  0E00               	movlw	0
 12132  0112A6  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 12133  0112A8  0E00               	movlw	0
 12134  0112AA  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 12135  0112AC  0E00               	movlw	0
 12136  0112AE  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 12137  0112B0                     l2998:
 12138                           
 12139                           ; BSR set to: 0
 12140                           
 12141                           ; BSR set to: 0
 12142  0112B0  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 12143  0112B2  D006               	goto	L10
 12144  0112B4                     l2997:
 12145                           
 12146                           ; BSR set to: 0
 12147                           
 12148                           ; BSR set to: 0
 12149  0112B4  0E00               	movlw	0
 12150  0112B6  6F64               	movwf	___fldiv@a& (0+255),b
 12151  0112B8  0E00               	movlw	0
 12152  0112BA  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 12153  0112BC  0E00               	movlw	0
 12154  0112BE  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 12155  0112C0                     L10:
 12156  0112C0  0E00               	movlw	0
 12157  0112C2  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 12158                           
 12159                           ; BSR set to: 0
 12160                           
 12161                           ; BSR set to: 0
 12162  0112C4  5164               	movf	___fldiv@a& (0+255),w,b
 12163  0112C6  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12164  0112C8  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12165  0112CA  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12166  0112CC  A4D8               	btfss	status,2,c
 12167  0112CE  D015               	goto	l3000
 12168                           
 12169                           ; BSR set to: 0
 12170  0112D0  0E00               	movlw	0
 12171  0112D2  6F60               	movwf	___fldiv@b& (0+255),b
 12172  0112D4  0E00               	movlw	0
 12173  0112D6  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12174  0112D8  0E00               	movlw	0
 12175  0112DA  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12176  0112DC  0E00               	movlw	0
 12177  0112DE  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12178                           
 12179                           ; BSR set to: 0
 12180  0112E0  0E80               	movlw	128
 12181  0112E2  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12182  0112E4  0E7F               	movlw	127
 12183  0112E6  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12184                           
 12185                           ; BSR set to: 0
 12186  0112E8  C060  F060         	movff	___fldiv@b,?___fldiv
 12187  0112EC  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 12188  0112F0  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 12189  0112F4  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 12190                           
 12191                           ; BSR set to: 0
 12192  0112F8  0012               	return	
 12193  0112FA                     l3000:
 12194                           
 12195                           ; BSR set to: 0
 12196                           
 12197                           ; BSR set to: 0
 12198  0112FA  5177               	movf	___fldiv@bexp& (0+255),w,b
 12199  0112FC  A4D8               	btfss	status,2,c
 12200  0112FE  D011               	goto	l3002
 12201                           
 12202                           ; BSR set to: 0
 12203  011300  0E00               	movlw	0
 12204  011302  6F60               	movwf	___fldiv@b& (0+255),b
 12205  011304  0E00               	movlw	0
 12206  011306  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12207  011308  0E00               	movlw	0
 12208  01130A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12209  01130C  0E00               	movlw	0
 12210  01130E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12211                           
 12212                           ; BSR set to: 0
 12213  011310  C060  F060         	movff	___fldiv@b,?___fldiv
 12214  011314  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 12215  011318  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 12216  01131C  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 12217                           
 12218                           ; BSR set to: 0
 12219  011320  0012               	return	
 12220  011322                     l3002:
 12221                           
 12222                           ; BSR set to: 0
 12223                           
 12224                           ; BSR set to: 0
 12225  011322  5178               	movf	___fldiv@aexp& (0+255),w,b
 12226  011324  6F68               	movwf	??___fldiv& (0+255),b
 12227  011326  6B69               	clrf	(??___fldiv+1)& (0+255),b
 12228  011328  1F68               	comf	??___fldiv& (0+255),f,b
 12229  01132A  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 12230  01132C  4B68               	infsnz	??___fldiv& (0+255),f,b
 12231  01132E  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 12232  011330  5177               	movf	___fldiv@bexp& (0+255),w,b
 12233  011332  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 12234  011334  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 12235  011336  5168               	movf	??___fldiv& (0+255),w,b
 12236  011338  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 12237  01133A  5169               	movf	(??___fldiv+1)& (0+255),w,b
 12238  01133C  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 12239  01133E  0E7F               	movlw	127
 12240  011340  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 12241  011342  6F71               	movwf	___fldiv@new_exp& (0+255),b
 12242  011344  0E00               	movlw	0
 12243  011346  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 12244  011348  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12245                           
 12246                           ; BSR set to: 0
 12247  01134A  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 12248  01134E  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 12249  011352  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 12250  011356  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 12251                           
 12252                           ; BSR set to: 0
 12253  01135A  0E00               	movlw	0
 12254  01135C  6F60               	movwf	___fldiv@b& (0+255),b
 12255  01135E  0E00               	movlw	0
 12256  011360  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12257  011362  0E00               	movlw	0
 12258  011364  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12259  011366  0E00               	movlw	0
 12260  011368  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12261                           
 12262                           ; BSR set to: 0
 12263  01136A  0E00               	movlw	0
 12264  01136C  6F73               	movwf	___fldiv@grs& (0+255),b
 12265  01136E  0E00               	movlw	0
 12266  011370  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 12267  011372  0E00               	movlw	0
 12268  011374  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 12269  011376  0E00               	movlw	0
 12270  011378  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 12271                           
 12272                           ; BSR set to: 0
 12273  01137A  0E00               	movlw	0
 12274  01137C  6F78               	movwf	___fldiv@aexp& (0+255),b
 12275  01137E  D028               	goto	l3003
 12276  011380                     
 12277                           ; BSR set to: 0
 12278                           
 12279                           ; BSR set to: 0
 12280  011380  5178               	movf	___fldiv@aexp& (0+255),w,b
 12281  011382  B4D8               	btfsc	status,2,c
 12282  011384  D011               	goto	l3005
 12283                           
 12284                           ; BSR set to: 0
 12285  011386  90D8               	bcf	status,0,c
 12286  011388  376D               	rlcf	___fldiv@rem& (0+255),f,b
 12287  01138A  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12288  01138C  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12289  01138E  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12290  011390  90D8               	bcf	status,0,c
 12291  011392  3760               	rlcf	___fldiv@b& (0+255),f,b
 12292  011394  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12293  011396  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12294  011398  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12295                           
 12296                           ; BSR set to: 0
 12297  01139A  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 12298                           
 12299                           ; BSR set to: 0
 12300  01139C  8160               	bsf	___fldiv@b& (0+255),0,b
 12301                           
 12302                           ; BSR set to: 0
 12303  01139E  90D8               	bcf	status,0,c
 12304  0113A0  3773               	rlcf	___fldiv@grs& (0+255),f,b
 12305  0113A2  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12306  0113A4  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12307  0113A6  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12308  0113A8                     l3005:
 12309                           
 12310                           ; BSR set to: 0
 12311                           
 12312                           ; BSR set to: 0
 12313  0113A8  5164               	movf	___fldiv@a& (0+255),w,b
 12314  0113AA  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 12315  0113AC  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 12316  0113AE  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12317  0113B0  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 12318  0113B2  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12319  0113B4  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 12320  0113B6  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12321  0113B8  A0D8               	btfss	status,0,c
 12322  0113BA  D009               	goto	l3007
 12323                           
 12324                           ; BSR set to: 0
 12325  0113BC  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12326                           
 12327                           ; BSR set to: 0
 12328  0113BE  5164               	movf	___fldiv@a& (0+255),w,b
 12329  0113C0  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 12330  0113C2  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 12331  0113C4  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12332  0113C6  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 12333  0113C8  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12334  0113CA  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 12335  0113CC  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12336  0113CE                     l3007:
 12337                           
 12338                           ; BSR set to: 0
 12339                           
 12340                           ; BSR set to: 0
 12341  0113CE  2B78               	incf	___fldiv@aexp& (0+255),f,b
 12342  0113D0                     l3003:
 12343                           
 12344                           ; BSR set to: 0
 12345  0113D0  0E19               	movlw	25
 12346  0113D2  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 12347  0113D4  D7D5               	goto	l3004
 12348                           
 12349                           ; BSR set to: 0
 12350                           
 12351                           ; BSR set to: 0
 12352  0113D6  516D               	movf	___fldiv@rem& (0+255),w,b
 12353  0113D8  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12354  0113DA  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12355  0113DC  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12356  0113DE  B4D8               	btfsc	status,2,c
 12357  0113E0  D011               	goto	l3010
 12358                           
 12359                           ; BSR set to: 0
 12360  0113E2  8173               	bsf	___fldiv@grs& (0+255),0,b
 12361                           
 12362                           ; BSR set to: 0
 12363  0113E4  D00F               	goto	l3010
 12364  0113E6                     
 12365                           ; BSR set to: 0
 12366                           
 12367                           ; BSR set to: 0
 12368  0113E6  90D8               	bcf	status,0,c
 12369  0113E8  3760               	rlcf	___fldiv@b& (0+255),f,b
 12370  0113EA  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12371  0113EC  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12372  0113EE  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12373                           
 12374                           ; BSR set to: 0
 12375  0113F0  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 12376                           
 12377                           ; BSR set to: 0
 12378  0113F2  8160               	bsf	___fldiv@b& (0+255),0,b
 12379                           
 12380                           ; BSR set to: 0
 12381  0113F4  90D8               	bcf	status,0,c
 12382  0113F6  3773               	rlcf	___fldiv@grs& (0+255),f,b
 12383  0113F8  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12384  0113FA  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12385  0113FC  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12386  0113FE  0771               	decf	___fldiv@new_exp& (0+255),f,b
 12387  011400  A0D8               	btfss	status,0,c
 12388  011402  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12389  011404                     l3010:
 12390                           
 12391                           ; BSR set to: 0
 12392                           
 12393                           ; BSR set to: 0
 12394  011404  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 12395  011406  D7EF               	goto	l3011
 12396                           
 12397                           ; BSR set to: 0
 12398                           
 12399                           ; BSR set to: 0
 12400  011408  0E00               	movlw	0
 12401  01140A  6F78               	movwf	___fldiv@aexp& (0+255),b
 12402                           
 12403                           ; BSR set to: 0
 12404  01140C  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12405  01140E  D016               	goto	l3017
 12406                           
 12407                           ; BSR set to: 0
 12408  011410  0EFF               	movlw	255
 12409  011412  1573               	andwf	___fldiv@grs& (0+255),w,b
 12410  011414  6F68               	movwf	??___fldiv& (0+255),b
 12411  011416  0EFF               	movlw	255
 12412  011418  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12413  01141A  6F69               	movwf	(??___fldiv+1)& (0+255),b
 12414  01141C  0EFF               	movlw	255
 12415  01141E  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12416  011420  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 12417  011422  0E7F               	movlw	127
 12418  011424  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12419  011426  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 12420  011428  5168               	movf	??___fldiv& (0+255),w,b
 12421  01142A  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 12422  01142C  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 12423  01142E  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 12424  011430  A4D8               	btfss	status,2,c
 12425  011432  D002               	goto	u11440
 12426                           
 12427                           ; BSR set to: 0
 12428                           
 12429                           ; BSR set to: 0
 12430  011434  A160               	btfss	___fldiv@b& (0+255),0,b
 12431  011436  D002               	goto	l3017
 12432  011438                     u11440:
 12433                           
 12434                           ; BSR set to: 0
 12435  011438  0E01               	movlw	1
 12436  01143A  6F78               	movwf	___fldiv@aexp& (0+255),b
 12437  01143C                     l3017:
 12438                           
 12439                           ; BSR set to: 0
 12440                           
 12441                           ; BSR set to: 0
 12442                           
 12443                           ; BSR set to: 0
 12444  01143C  5178               	movf	___fldiv@aexp& (0+255),w,b
 12445  01143E  B4D8               	btfsc	status,2,c
 12446  011440  D01F               	goto	l3019
 12447                           
 12448                           ; BSR set to: 0
 12449  011442  0E01               	movlw	1
 12450  011444  2760               	addwf	___fldiv@b& (0+255),f,b
 12451  011446  0E00               	movlw	0
 12452  011448  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12453  01144A  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12454  01144C  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12455                           
 12456                           ; BSR set to: 0
 12457  01144E  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 12458  011450  D017               	goto	l3019
 12459                           
 12460                           ; BSR set to: 0
 12461  011452  C060  F068         	movff	___fldiv@b,??___fldiv
 12462  011456  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 12463  01145A  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 12464  01145E  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 12465  011462  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 12466  011464  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 12467  011466  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 12468  011468  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 12469  01146A  3368               	rrcf	??___fldiv& (0+255),f,b
 12470  01146C  C068  F060         	movff	??___fldiv,___fldiv@b
 12471  011470  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 12472  011474  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 12473  011478  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 12474                           
 12475                           ; BSR set to: 0
 12476  01147C  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 12477  01147E  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12478  011480                     l3019:
 12479                           
 12480                           ; BSR set to: 0
 12481                           
 12482                           ; BSR set to: 0
 12483                           
 12484                           ; BSR set to: 0
 12485  011480  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12486  011482  D010               	goto	l3020
 12487  011484  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12488  011486  E103               	bnz	u11470
 12489  011488  2971               	incf	___fldiv@new_exp& (0+255),w,b
 12490  01148A  A0D8               	btfss	status,0,c
 12491  01148C  D00B               	goto	l3020
 12492  01148E                     u11470:
 12493                           
 12494                           ; BSR set to: 0
 12495  01148E  0E00               	movlw	0
 12496  011490  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12497  011492  6971               	setf	___fldiv@new_exp& (0+255),b
 12498  011494  0E00               	movlw	0
 12499  011496  6F60               	movwf	___fldiv@b& (0+255),b
 12500  011498  0E00               	movlw	0
 12501  01149A  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12502  01149C  0E00               	movlw	0
 12503  01149E  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12504  0114A0  0E00               	movlw	0
 12505  0114A2  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12506  0114A4                     l3020:
 12507                           
 12508                           ; BSR set to: 0
 12509                           
 12510                           ; BSR set to: 0
 12511  0114A4  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12512  0114A6  D005               	goto	u11480
 12513  0114A8  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12514  0114AA  E111               	bnz	l14073
 12515  0114AC  0571               	decf	___fldiv@new_exp& (0+255),w,b
 12516  0114AE  B0D8               	btfsc	status,0,c
 12517  0114B0  D00E               	goto	l3021
 12518  0114B2                     u11480:
 12519                           
 12520                           ; BSR set to: 0
 12521  0114B2  0E00               	movlw	0
 12522  0114B4  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12523  0114B6  0E00               	movlw	0
 12524  0114B8  6F71               	movwf	___fldiv@new_exp& (0+255),b
 12525  0114BA  0E00               	movlw	0
 12526  0114BC  6F60               	movwf	___fldiv@b& (0+255),b
 12527  0114BE  0E00               	movlw	0
 12528  0114C0  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 12529  0114C2  0E00               	movlw	0
 12530  0114C4  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 12531  0114C6  0E00               	movlw	0
 12532  0114C8  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12533  0114CA  0E00               	movlw	0
 12534  0114CC  6F6C               	movwf	___fldiv@sign& (0+255),b
 12535  0114CE                     l3021:
 12536  0114CE                     l14073:
 12537                           
 12538                           ; BSR set to: 0
 12539  0114CE  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 12540                           
 12541                           ; BSR set to: 0
 12542  0114D2  A177               	btfss	___fldiv@bexp& (0+255),0,b
 12543  0114D4  D002               	goto	l3022
 12544                           
 12545                           ; BSR set to: 0
 12546  0114D6  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 12547  0114D8  D001               	goto	l3023
 12548  0114DA                     l3022:
 12549                           
 12550                           ; BSR set to: 0
 12551                           
 12552                           ; BSR set to: 0
 12553  0114DA  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 12554  0114DC                     l3023:
 12555                           
 12556                           ; BSR set to: 0
 12557                           
 12558                           ; BSR set to: 0
 12559  0114DC  90D8               	bcf	status,0,c
 12560  0114DE  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 12561  0114E0  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 12562                           
 12563                           ; BSR set to: 0
 12564  0114E2  516C               	movf	___fldiv@sign& (0+255),w,b
 12565  0114E4  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12566                           
 12567                           ; BSR set to: 0
 12568  0114E6  C060  F060         	movff	___fldiv@b,?___fldiv
 12569  0114EA  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 12570  0114EE  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 12571  0114F2  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 12572  0114F6  0012               	return	
 12573  0114F8                     __end_of___fldiv:
 12574                           	opt stack 0
 12575                           tosu	equ	0xFFF
 12576                           tosh	equ	0xFFE
 12577                           tosl	equ	0xFFD
 12578                           pclath	equ	0xFFA
 12579                           tblptru	equ	0xFF8
 12580                           tblptrh	equ	0xFF7
 12581                           tblptrl	equ	0xFF6
 12582                           tablat	equ	0xFF5
 12583                           prodh	equ	0xFF4
 12584                           prodl	equ	0xFF3
 12585                           postinc0	equ	0xFEE
 12586                           wreg	equ	0xFE8
 12587                           postdec1	equ	0xFE5
 12588                           fsr1h	equ	0xFE2
 12589                           fsr1l	equ	0xFE1
 12590                           indf2	equ	0xFDF
 12591                           postinc2	equ	0xFDE
 12592                           postdec2	equ	0xFDD
 12593                           fsr2h	equ	0xFDA
 12594                           fsr2l	equ	0xFD9
 12595                           status	equ	0xFD8
 12596                           
 12597 ;; *************** function ___awdiv *****************
 12598 ;; Defined at:
 12599 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
 12600 ;; Parameters:    Size  Location     Type
 12601 ;;  dividend        2    0[BANK0 ] int 
 12602 ;;  divisor         2    2[BANK0 ] int 
 12603 ;; Auto vars:     Size  Location     Type
 12604 ;;  quotient        2    6[BANK0 ] int 
 12605 ;;  sign            1    5[BANK0 ] unsigned char 
 12606 ;;  counter         1    4[BANK0 ] unsigned char 
 12607 ;; Return value:  Size  Location     Type
 12608 ;;                  2    0[BANK0 ] int 
 12609 ;; Registers used:
 12610 ;;		wreg, status,2, status,0
 12611 ;; Tracked objects:
 12612 ;;		On entry : 0/0
 12613 ;;		On exit  : 0/0
 12614 ;;		Unchanged: 0/0
 12615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12616 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12617 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12619 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12620 ;;Total ram usage:        8 bytes
 12621 ;; Hardware stack levels used:    1
 12622 ;; Hardware stack levels required when called:    7
 12623 ;; This function calls:
 12624 ;;		Nothing
 12625 ;; This function is called by:
 12626 ;;		_Console_Tab
 12627 ;;		_ADCAverage
 12628 ;; This function uses a non-reentrant model
 12629 ;;
 12630                           
 12631                           	psect	text37
 12632  014524                     __ptext37:
 12633                           	opt stack 0
 12634  014524                     ___awdiv:
 12635                           	opt stack 19
 12636                           
 12637                           ; BSR set to: 0
 12638                           ;incstack = 0
 12639  014524  0E00               	movlw	0
 12640  014526  0100               	movlb	0	; () banked
 12641  014528  6F65               	movwf	___awdiv@sign& (0+255),b
 12642                           
 12643                           ; BSR set to: 0
 12644  01452A  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12645  01452C  D006               	goto	l2660
 12646                           
 12647                           ; BSR set to: 0
 12648  01452E  6D62               	negf	___awdiv@divisor& (0+255),b
 12649  014530  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 12650  014532  B0D8               	btfsc	status,0,c
 12651  014534  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 12652                           
 12653                           ; BSR set to: 0
 12654  014536  0E01               	movlw	1
 12655  014538  6F65               	movwf	___awdiv@sign& (0+255),b
 12656  01453A                     l2660:
 12657                           
 12658                           ; BSR set to: 0
 12659                           
 12660                           ; BSR set to: 0
 12661  01453A  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 12662  01453C  D006               	goto	l2661
 12663                           
 12664                           ; BSR set to: 0
 12665  01453E  6D60               	negf	___awdiv@dividend& (0+255),b
 12666  014540  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 12667  014542  B0D8               	btfsc	status,0,c
 12668  014544  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 12669                           
 12670                           ; BSR set to: 0
 12671  014546  0E01               	movlw	1
 12672  014548  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 12673  01454A                     l2661:
 12674                           
 12675                           ; BSR set to: 0
 12676                           
 12677                           ; BSR set to: 0
 12678  01454A  0E00               	movlw	0
 12679  01454C  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 12680  01454E  0E00               	movlw	0
 12681  014550  6F66               	movwf	___awdiv@quotient& (0+255),b
 12682                           
 12683                           ; BSR set to: 0
 12684  014552  5162               	movf	___awdiv@divisor& (0+255),w,b
 12685  014554  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 12686  014556  B4D8               	btfsc	status,2,c
 12687  014558  D01C               	goto	l2668
 12688                           
 12689                           ; BSR set to: 0
 12690  01455A  0E01               	movlw	1
 12691  01455C  6F64               	movwf	___awdiv@counter& (0+255),b
 12692  01455E  D004               	goto	l2663
 12693  014560                     
 12694                           ; BSR set to: 0
 12695                           
 12696                           ; BSR set to: 0
 12697  014560  90D8               	bcf	status,0,c
 12698  014562  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 12699  014564  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 12700  014566  2B64               	incf	___awdiv@counter& (0+255),f,b
 12701  014568                     l2663:
 12702                           
 12703                           ; BSR set to: 0
 12704                           
 12705                           ; BSR set to: 0
 12706  014568  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 12707  01456A  D7FA               	goto	l2664
 12708  01456C                     u10820:
 12709                           
 12710                           ; BSR set to: 0
 12711                           
 12712                           ; BSR set to: 0
 12713                           
 12714                           ; BSR set to: 0
 12715  01456C  90D8               	bcf	status,0,c
 12716  01456E  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 12717  014570  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 12718                           
 12719                           ; BSR set to: 0
 12720  014572  5162               	movf	___awdiv@divisor& (0+255),w,b
 12721  014574  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 12722  014576  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12723  014578  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 12724  01457A  A0D8               	btfss	status,0,c
 12725  01457C  D005               	goto	l2667
 12726                           
 12727                           ; BSR set to: 0
 12728  01457E  5162               	movf	___awdiv@divisor& (0+255),w,b
 12729  014580  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 12730  014582  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 12731  014584  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 12732                           
 12733                           ; BSR set to: 0
 12734  014586  8166               	bsf	___awdiv@quotient& (0+255),0,b
 12735  014588                     l2667:
 12736                           
 12737                           ; BSR set to: 0
 12738                           
 12739                           ; BSR set to: 0
 12740  014588  90D8               	bcf	status,0,c
 12741  01458A  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 12742  01458C  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 12743                           
 12744                           ; BSR set to: 0
 12745  01458E  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 12746  014590  D7ED               	goto	u10820
 12747  014592                     l2668:
 12748                           
 12749                           ; BSR set to: 0
 12750                           
 12751                           ; BSR set to: 0
 12752                           
 12753                           ; BSR set to: 0
 12754  014592  5165               	movf	___awdiv@sign& (0+255),w,b
 12755  014594  B4D8               	btfsc	status,2,c
 12756  014596  D004               	goto	l2669
 12757                           
 12758                           ; BSR set to: 0
 12759  014598  6D66               	negf	___awdiv@quotient& (0+255),b
 12760  01459A  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 12761  01459C  B0D8               	btfsc	status,0,c
 12762  01459E  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 12763  0145A0                     l2669:
 12764                           
 12765                           ; BSR set to: 0
 12766                           
 12767                           ; BSR set to: 0
 12768  0145A0  C066  F060         	movff	___awdiv@quotient,?___awdiv
 12769  0145A4  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 12770  0145A8  0012               	return	
 12771  0145AA                     __end_of___awdiv:
 12772                           	opt stack 0
 12773                           tosu	equ	0xFFF
 12774                           tosh	equ	0xFFE
 12775                           tosl	equ	0xFFD
 12776                           pclath	equ	0xFFA
 12777                           tblptru	equ	0xFF8
 12778                           tblptrh	equ	0xFF7
 12779                           tblptrl	equ	0xFF6
 12780                           tablat	equ	0xFF5
 12781                           prodh	equ	0xFF4
 12782                           prodl	equ	0xFF3
 12783                           postinc0	equ	0xFEE
 12784                           wreg	equ	0xFE8
 12785                           postdec1	equ	0xFE5
 12786                           fsr1h	equ	0xFE2
 12787                           fsr1l	equ	0xFE1
 12788                           indf2	equ	0xFDF
 12789                           postinc2	equ	0xFDE
 12790                           postdec2	equ	0xFDD
 12791                           fsr2h	equ	0xFDA
 12792                           fsr2l	equ	0xFD9
 12793                           status	equ	0xFD8
 12794                           
 12795 ;; *************** function _HMI_Render *****************
 12796 ;; Defined at:
 12797 ;;		line 138 in file "HMI.c"
 12798 ;; Parameters:    Size  Location     Type
 12799 ;;		None
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;  a               2    8[BANK0 ] unsigned short 
 12802 ;; Return value:  Size  Location     Type
 12803 ;;                  1    wreg      void 
 12804 ;; Registers used:
 12805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12806 ;; Tracked objects:
 12807 ;;		On entry : 0/0
 12808 ;;		On exit  : 0/0
 12809 ;;		Unchanged: 0/0
 12810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12812 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;Total ram usage:        2 bytes
 12816 ;; Hardware stack levels used:    1
 12817 ;; Hardware stack levels required when called:    9
 12818 ;; This function calls:
 12819 ;;		_OutSeg
 12820 ;; This function is called by:
 12821 ;;		_main
 12822 ;;		_ADCAverage
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           	psect	text38
 12827  015590                     __ptext38:
 12828                           	opt stack 0
 12829  015590                     _HMI_Render:
 12830                           	opt stack 19
 12831                           
 12832                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;incstack = 0
 12836  015590  0E00               	movlw	0
 12837  015592  0100               	movlb	0	; () banked
 12838  015594  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 12839  015596  0E00               	movlw	0
 12840  015598  6F68               	movwf	HMI_Render@a& (0+255),b
 12841  01559A                     l14925:
 12842                           
 12843                           ; BSR set to: 0
 12844  01559A  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 12845  01559C  E113               	bnz	l1158
 12846  01559E  0E08               	movlw	8
 12847  0155A0  5D68               	subwf	HMI_Render@a& (0+255),w,b
 12848  0155A2  B0D8               	btfsc	status,0,c
 12849  0155A4  0012               	return	
 12850                           
 12851                           ; BSR set to: 0
 12852                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 12853                           
 12854                           ; BSR set to: 0
 12855                           
 12856                           ; BSR set to: 0
 12857  0155A6  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 12858  0155AA  0EA0               	movlw	low _HMIBoard
 12859  0155AC  2568               	addwf	HMI_Render@a& (0+255),w,b
 12860  0155AE  6ED9               	movwf	fsr2l,c
 12861  0155B0  0E02               	movlw	high _HMIBoard
 12862  0155B2  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 12863  0155B4  6EDA               	movwf	fsr2h,c
 12864  0155B6  50DF               	movf	indf2,w,c
 12865  0155B8  ECBF  F0A4         	call	_OutSeg
 12866  0155BC  0100               	movlb	0	; () banked
 12867  0155BE  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 12868  0155C0  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 12869  0155C2  D7EB               	goto	l14925
 12870  0155C4                     l1158:
 12871                           
 12872                           ; BSR set to: 0
 12873  0155C4  0012               	return		;funcret
 12874  0155C6                     __end_of_HMI_Render:
 12875                           	opt stack 0
 12876                           tosu	equ	0xFFF
 12877                           tosh	equ	0xFFE
 12878                           tosl	equ	0xFFD
 12879                           pclath	equ	0xFFA
 12880                           tblptru	equ	0xFF8
 12881                           tblptrh	equ	0xFF7
 12882                           tblptrl	equ	0xFF6
 12883                           tablat	equ	0xFF5
 12884                           prodh	equ	0xFF4
 12885                           prodl	equ	0xFF3
 12886                           postinc0	equ	0xFEE
 12887                           wreg	equ	0xFE8
 12888                           postdec1	equ	0xFE5
 12889                           fsr1h	equ	0xFE2
 12890                           fsr1l	equ	0xFE1
 12891                           indf2	equ	0xFDF
 12892                           postinc2	equ	0xFDE
 12893                           postdec2	equ	0xFDD
 12894                           fsr2h	equ	0xFDA
 12895                           fsr2l	equ	0xFD9
 12896                           status	equ	0xFD8
 12897                           
 12898 ;; *************** function _OutSeg *****************
 12899 ;; Defined at:
 12900 ;;		line 54 in file "HMI.c"
 12901 ;; Parameters:    Size  Location     Type
 12902 ;;  pInput          1    wreg     unsigned char 
 12903 ;;  pSegment        1    3[BANK0 ] unsigned char 
 12904 ;; Auto vars:     Size  Location     Type
 12905 ;;  pInput          1    6[BANK0 ] unsigned char 
 12906 ;;  out             1    7[BANK0 ] volatile unsigned char 
 12907 ;; Return value:  Size  Location     Type
 12908 ;;                  1    wreg      void 
 12909 ;; Registers used:
 12910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12911 ;; Tracked objects:
 12912 ;;		On entry : 0/0
 12913 ;;		On exit  : 0/0
 12914 ;;		Unchanged: 0/0
 12915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12916 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12918 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12919 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12920 ;;Total ram usage:        5 bytes
 12921 ;; Hardware stack levels used:    1
 12922 ;; Hardware stack levels required when called:    8
 12923 ;; This function calls:
 12924 ;;		_SPI_Send
 12925 ;; This function is called by:
 12926 ;;		_HMI_Render
 12927 ;;		_HMI_GRender
 12928 ;; This function uses a non-reentrant model
 12929 ;;
 12930                           
 12931                           	psect	text39
 12932  01497E                     __ptext39:
 12933                           	opt stack 0
 12934  01497E                     _OutSeg:
 12935                           	opt stack 19
 12936                           
 12937                           ; BSR set to: 0
 12938                           ;incstack = 0
 12939                           ;OutSeg@pInput stored from wreg
 12940  01497E  0100               	movlb	0	; () banked
 12941  014980  6F66               	movwf	OutSeg@pInput& (0+255),b
 12942                           
 12943                           ;HMI.c: 58: static UINT8 cur;
 12944                           ;HMI.c: 59: volatile UINT8 out;
 12945                           ;HMI.c: 60: static UINT8 segset;
 12946                           ;HMI.c: 61: static UINT8 a;
 12947                           ;HMI.c: 83: if (pSegment <= 8)
 12948  014982  0E09               	movlw	9
 12949  014984  0100               	movlb	0	; () banked
 12950  014986  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 12951  014988  0012               	return	
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;HMI.c: 84: {
 12955                           ;HMI.c: 85: cur = pInput;
 12956  01498A  C066  F044         	movff	OutSeg@pInput,OutSeg@cur
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 12960  01498E  0E00               	movlw	0
 12961  014990  6E42               	movwf	OutSeg@a,c
 12962  014992                     l14441:
 12963                           
 12964                           ; BSR set to: 0
 12965  014992  0E07               	movlw	7
 12966  014994  6442               	cpfsgt	OutSeg@a,c
 12967  014996  D001               	goto	l1146
 12968  014998  D01F               	goto	u11890
 12969  01499A                     l1146:
 12970                           
 12971                           ;HMI.c: 87: {
 12972                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 12973                           
 12974                           ; BSR set to: 0
 12975  01499A  C044  F064         	movff	OutSeg@cur,??_OutSeg
 12976  01499E  0E01               	movlw	1
 12977  0149A0  0100               	movlb	0	; () banked
 12978  0149A2  1764               	andwf	??_OutSeg& (0+255),f,b
 12979  0149A4  0E06               	movlw	6
 12980  0149A6  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 12981  0149A8                     u11885:
 12982  0149A8  90D8               	bcf	status,0,c
 12983  0149AA  3764               	rlcf	??_OutSeg& (0+255),f,b
 12984  0149AC  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 12985  0149AE  D7FC               	goto	u11885
 12986  0149B0  5164               	movf	??_OutSeg& (0+255),w,b
 12987  0149B2  6E43               	movwf	OutSeg@segset,c
 12988                           
 12989                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 12990  0149B4  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 12991  0149B6  42E8               	rrncf	wreg,f,c
 12992  0149B8  0BF8               	andlw	248
 12993  0149BA  1042               	iorwf	OutSeg@a,w,c
 12994  0149BC  1043               	iorwf	OutSeg@segset,w,c
 12995  0149BE  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 12996                           
 12997                           ;HMI.c: 90: cur >>= 1;
 12998  0149C0  90D8               	bcf	status,0,c
 12999  0149C2  3244               	rrcf	OutSeg@cur,f,c
 13000                           
 13001                           ; BSR set to: 0
 13002                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 13003  0149C4  0E61               	movlw	low _SPI1
 13004  0149C6  6F60               	movwf	SPI_Send@pInput& (0+255),b
 13005  0149C8  0E01               	movlw	high _SPI1
 13006  0149CA  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 13007  0149CC  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 13008  0149D0  EC2C  F0A5         	call	_SPI_Send	;wreg free
 13009  0149D4  2A42               	incf	OutSeg@a,f,c
 13010  0149D6  D7DD               	goto	l14441
 13011  0149D8                     u11890:
 13012                           
 13013                           ;HMI.c: 96: }
 13014                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 13015  0149D8  0E61               	movlw	low _SPI1
 13016  0149DA  0100               	movlb	0	; () banked
 13017  0149DC  6F60               	movwf	SPI_Send@pInput& (0+255),b
 13018  0149DE  0E01               	movlw	high _SPI1
 13019  0149E0  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 13020  0149E2  0E00               	movlw	0
 13021  0149E4  6F62               	movwf	SPI_Send@pData& (0+255),b
 13022  0149E6  EC2C  F0A5         	call	_SPI_Send	;wreg free
 13023  0149EA  0012               	return	
 13024  0149EC                     __end_of_OutSeg:
 13025                           	opt stack 0
 13026                           tosu	equ	0xFFF
 13027                           tosh	equ	0xFFE
 13028                           tosl	equ	0xFFD
 13029                           pclath	equ	0xFFA
 13030                           tblptru	equ	0xFF8
 13031                           tblptrh	equ	0xFF7
 13032                           tblptrl	equ	0xFF6
 13033                           tablat	equ	0xFF5
 13034                           prodh	equ	0xFF4
 13035                           prodl	equ	0xFF3
 13036                           postinc0	equ	0xFEE
 13037                           wreg	equ	0xFE8
 13038                           postdec1	equ	0xFE5
 13039                           fsr1h	equ	0xFE2
 13040                           fsr1l	equ	0xFE1
 13041                           indf2	equ	0xFDF
 13042                           postinc2	equ	0xFDE
 13043                           postdec2	equ	0xFDD
 13044                           fsr2h	equ	0xFDA
 13045                           fsr2l	equ	0xFD9
 13046                           status	equ	0xFD8
 13047                           
 13048 ;; *************** function _FunctReadADC *****************
 13049 ;; Defined at:
 13050 ;;		line 42 in file "dans.c"
 13051 ;; Parameters:    Size  Location     Type
 13052 ;;  channel         2    0[BANK0 ] int 
 13053 ;; Auto vars:     Size  Location     Type
 13054 ;;		None
 13055 ;; Return value:  Size  Location     Type
 13056 ;;                  2    0[BANK0 ] int 
 13057 ;; Registers used:
 13058 ;;		wreg, status,2, status,0
 13059 ;; Tracked objects:
 13060 ;;		On entry : 0/0
 13061 ;;		On exit  : 0/0
 13062 ;;		Unchanged: 0/0
 13063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13064 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13067 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13068 ;;Total ram usage:        2 bytes
 13069 ;; Hardware stack levels used:    1
 13070 ;; Hardware stack levels required when called:    7
 13071 ;; This function calls:
 13072 ;;		Nothing
 13073 ;; This function is called by:
 13074 ;;		_ADCAverage
 13075 ;; This function uses a non-reentrant model
 13076 ;;
 13077                           
 13078                           	psect	text40
 13079  01546E                     __ptext40:
 13080                           	opt stack 0
 13081  01546E                     _FunctReadADC:
 13082                           	opt stack 21
 13083                           
 13084                           ;dans.c: 44: if(channel>4) return 0;
 13085                           
 13086                           ;incstack = 0
 13087  01546E  0100               	movlb	0	; () banked
 13088  015470  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 13089  015472  D00B               	goto	l2327
 13090  015474  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 13091  015476  E104               	bnz	u12300
 13092  015478  0E05               	movlw	5
 13093  01547A  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 13094  01547C  A0D8               	btfss	status,0,c
 13095  01547E  D005               	goto	l2327
 13096  015480                     u12300:
 13097                           
 13098                           ; BSR set to: 0
 13099  015480  0E00               	movlw	0
 13100  015482  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 13101  015484  0E00               	movlw	0
 13102  015486  6F60               	movwf	?_FunctReadADC& (0+255),b
 13103                           
 13104                           ; BSR set to: 0
 13105  015488  0012               	return	
 13106  01548A                     l2327:
 13107                           
 13108                           ; BSR set to: 0
 13109                           ;dans.c: 45: ADCON0=0x00;
 13110                           
 13111                           ; BSR set to: 0
 13112  01548A  0E00               	movlw	0
 13113  01548C  6EC2               	movwf	4034,c	;volatile
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;dans.c: 46: ADCON0=(channel<<2);
 13117  01548E  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 13118  015490  46E8               	rlncf	wreg,f,c
 13119  015492  0BFC               	andlw	252
 13120  015494  6EC2               	movwf	4034,c	;volatile
 13121                           
 13122                           ; BSR set to: 0
 13123                           ;dans.c: 47: ADON=1;
 13124  015496  80C2               	bsf	4034,0,c	;volatile
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;dans.c: 48: GODONE=1;
 13128  015498  82C2               	bsf	4034,1,c	;volatile
 13129  01549A                     
 13130                           ; BSR set to: 0
 13131  01549A  B2C2               	btfsc	4034,1,c	;volatile
 13132  01549C  D7FE               	goto	l2330
 13133                           
 13134                           ;dans.c: 50: ADON=0;
 13135  01549E  90C2               	bcf	4034,0,c	;volatile
 13136                           
 13137                           ;dans.c: 51: return ADRES;
 13138  0154A0  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 13139  0154A4  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 13140  0154A8  0012               	return		;funcret
 13141  0154AA                     __end_of_FunctReadADC:
 13142                           	opt stack 0
 13143                           tosu	equ	0xFFF
 13144                           tosh	equ	0xFFE
 13145                           tosl	equ	0xFFD
 13146                           pclath	equ	0xFFA
 13147                           tblptru	equ	0xFF8
 13148                           tblptrh	equ	0xFF7
 13149                           tblptrl	equ	0xFF6
 13150                           tablat	equ	0xFF5
 13151                           prodh	equ	0xFF4
 13152                           prodl	equ	0xFF3
 13153                           postinc0	equ	0xFEE
 13154                           wreg	equ	0xFE8
 13155                           postdec1	equ	0xFE5
 13156                           fsr1h	equ	0xFE2
 13157                           fsr1l	equ	0xFE1
 13158                           indf2	equ	0xFDF
 13159                           postinc2	equ	0xFDE
 13160                           postdec2	equ	0xFDD
 13161                           fsr2h	equ	0xFDA
 13162                           fsr2l	equ	0xFD9
 13163                           status	equ	0xFD8
 13164                           
 13165 ;; *************** function _Robot_Init *****************
 13166 ;; Defined at:
 13167 ;;		line 154 in file "main.c"
 13168 ;; Parameters:    Size  Location     Type
 13169 ;;		None
 13170 ;; Auto vars:     Size  Location     Type
 13171 ;;		None
 13172 ;; Return value:  Size  Location     Type
 13173 ;;                  1    wreg      void 
 13174 ;; Registers used:
 13175 ;;		wreg, status,2, status,0, cstack
 13176 ;; Tracked objects:
 13177 ;;		On entry : 0/0
 13178 ;;		On exit  : 0/0
 13179 ;;		Unchanged: 0/0
 13180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13185 ;;Total ram usage:        0 bytes
 13186 ;; Hardware stack levels used:    1
 13187 ;; Hardware stack levels required when called:    9
 13188 ;; This function calls:
 13189 ;;		_Robot_Stop
 13190 ;;		_UpdateDistance
 13191 ;;		_eusartSend
 13192 ;; This function is called by:
 13193 ;;		_main
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           	psect	text41
 13198  015A34                     __ptext41:
 13199                           	opt stack 0
 13200  015A34                     _Robot_Init:
 13201                           	opt stack 21
 13202                           
 13203                           ;main.c: 155: eusartSend(128);
 13204                           
 13205                           ;incstack = 0
 13206  015A34  0E80               	movlw	128
 13207  015A36  EC86  F0AD         	call	_eusartSend
 13208                           
 13209                           ;main.c: 156: eusartSend(132);
 13210  015A3A  0E84               	movlw	132
 13211  015A3C  EC86  F0AD         	call	_eusartSend
 13212                           
 13213                           ;main.c: 157: Robot_Stop();
 13214  015A40  EC4A  F0AC         	call	_Robot_Stop	;wreg free
 13215                           
 13216                           ;main.c: 158: UpdateDistance();
 13217  015A44  EC33  F0A6         	call	_UpdateDistance	;wreg free
 13218  015A48  0012               	return		;funcret
 13219  015A4A                     __end_of_Robot_Init:
 13220                           	opt stack 0
 13221                           tosu	equ	0xFFF
 13222                           tosh	equ	0xFFE
 13223                           tosl	equ	0xFFD
 13224                           pclath	equ	0xFFA
 13225                           tblptru	equ	0xFF8
 13226                           tblptrh	equ	0xFF7
 13227                           tblptrl	equ	0xFF6
 13228                           tablat	equ	0xFF5
 13229                           prodh	equ	0xFF4
 13230                           prodl	equ	0xFF3
 13231                           postinc0	equ	0xFEE
 13232                           wreg	equ	0xFE8
 13233                           postdec1	equ	0xFE5
 13234                           fsr1h	equ	0xFE2
 13235                           fsr1l	equ	0xFE1
 13236                           indf2	equ	0xFDF
 13237                           postinc2	equ	0xFDE
 13238                           postdec2	equ	0xFDD
 13239                           fsr2h	equ	0xFDA
 13240                           fsr2l	equ	0xFD9
 13241                           status	equ	0xFD8
 13242                           
 13243 ;; *************** function _UpdateDistance *****************
 13244 ;; Defined at:
 13245 ;;		line 142 in file "dans.c"
 13246 ;; Parameters:    Size  Location     Type
 13247 ;;		None
 13248 ;; Auto vars:     Size  Location     Type
 13249 ;;		None
 13250 ;; Return value:  Size  Location     Type
 13251 ;;                  2    1[BANK0 ] int 
 13252 ;; Registers used:
 13253 ;;		wreg, status,2, status,0, cstack
 13254 ;; Tracked objects:
 13255 ;;		On entry : 0/0
 13256 ;;		On exit  : 0/0
 13257 ;;		Unchanged: 0/0
 13258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13259 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13261 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13262 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13263 ;;Total ram usage:        6 bytes
 13264 ;; Hardware stack levels used:    1
 13265 ;; Hardware stack levels required when called:    8
 13266 ;; This function calls:
 13267 ;;		_eusartRec
 13268 ;;		_eusartSend
 13269 ;; This function is called by:
 13270 ;;		_Robot_Init
 13271 ;;		_Travel
 13272 ;; This function uses a non-reentrant model
 13273 ;;
 13274                           
 13275                           	psect	text42
 13276  014C66                     __ptext42:
 13277                           	opt stack 0
 13278  014C66                     _UpdateDistance:
 13279                           	opt stack 21
 13280                           
 13281                           ;dans.c: 143: eusartSend(142);
 13282                           
 13283                           ;incstack = 0
 13284  014C66  0E8E               	movlw	142
 13285  014C68  EC86  F0AD         	call	_eusartSend
 13286                           
 13287                           ;dans.c: 144: eusartSend(19);
 13288  014C6C  0E13               	movlw	19
 13289  014C6E  EC86  F0AD         	call	_eusartSend
 13290                           
 13291                           ;dans.c: 145: Current_Dist1 = eusartRec();
 13292  014C72  ECBD  F0AD         	call	_eusartRec	;wreg free
 13293  014C76  0100               	movlb	0	; () banked
 13294  014C78  6F63               	movwf	??_UpdateDistance& (0+255),b
 13295  014C7A  5163               	movf	??_UpdateDistance& (0+255),w,b
 13296  014C7C  0101               	movlb	1	; () banked
 13297  014C7E  6F4C               	movwf	_Current_Dist1& (0+255),b
 13298  014C80  6B4D               	clrf	(_Current_Dist1+1)& (0+255),b
 13299                           
 13300                           ; BSR set to: 1
 13301                           ;dans.c: 146: Current_Dist2 = eusartRec();
 13302  014C82  ECBD  F0AD         	call	_eusartRec	;wreg free
 13303  014C86  0100               	movlb	0	; () banked
 13304  014C88  6F63               	movwf	??_UpdateDistance& (0+255),b
 13305  014C8A  5163               	movf	??_UpdateDistance& (0+255),w,b
 13306  014C8C  0101               	movlb	1	; () banked
 13307  014C8E  6F4A               	movwf	_Current_Dist2& (0+255),b
 13308  014C90  6B4B               	clrf	(_Current_Dist2+1)& (0+255),b
 13309                           
 13310                           ; BSR set to: 1
 13311                           ;dans.c: 148: Current_Dist = ((Current_Dist1 <<(8)) & 0b1111111100000000 | (Current_Dist
      +                          2 & 255));
 13312  014C92  0E00               	movlw	0
 13313  014C94  0100               	movlb	0	; () banked
 13314  014C96  6F63               	movwf	??_UpdateDistance& (0+255),b
 13315  014C98  0EFF               	movlw	255
 13316  014C9A  6F64               	movwf	(??_UpdateDistance+1)& (0+255),b
 13317  014C9C  0101               	movlb	1	; () banked
 13318  014C9E  514C               	movf	_Current_Dist1& (0+255),w,b
 13319  014CA0  0100               	movlb	0	; () banked
 13320  014CA2  6F66               	movwf	(??_UpdateDistance+3)& (0+255),b
 13321  014CA4  6B65               	clrf	(??_UpdateDistance+2)& (0+255),b
 13322  014CA6  5163               	movf	??_UpdateDistance& (0+255),w,b
 13323  014CA8  1765               	andwf	(??_UpdateDistance+2)& (0+255),f,b
 13324  014CAA  5164               	movf	(??_UpdateDistance+1)& (0+255),w,b
 13325  014CAC  1766               	andwf	(??_UpdateDistance+3)& (0+255),f,b
 13326  014CAE  0101               	movlb	1	; () banked
 13327  014CB0  514A               	movf	_Current_Dist2& (0+255),w,b
 13328  014CB2  0100               	movlb	0	; () banked
 13329  014CB4  1165               	iorwf	(??_UpdateDistance+2)& (0+255),w,b
 13330  014CB6  0101               	movlb	1	; () banked
 13331  014CB8  6F4E               	movwf	_Current_Dist& (0+255),b
 13332  014CBA  0100               	movlb	0	; () banked
 13333  014CBC  5166               	movf	(??_UpdateDistance+3)& (0+255),w,b
 13334  014CBE  0101               	movlb	1	; () banked
 13335  014CC0  6F4F               	movwf	(_Current_Dist+1)& (0+255),b
 13336                           
 13337                           ; BSR set to: 1
 13338                           ;dans.c: 149: return Current_Dist;
 13339  014CC2  C14E  F061         	movff	_Current_Dist,?_UpdateDistance
 13340  014CC6  C14F  F062         	movff	_Current_Dist+1,?_UpdateDistance+1
 13341  014CCA  0012               	return	
 13342  014CCC                     __end_of_UpdateDistance:
 13343                           	opt stack 0
 13344                           tosu	equ	0xFFF
 13345                           tosh	equ	0xFFE
 13346                           tosl	equ	0xFFD
 13347                           pclath	equ	0xFFA
 13348                           tblptru	equ	0xFF8
 13349                           tblptrh	equ	0xFF7
 13350                           tblptrl	equ	0xFF6
 13351                           tablat	equ	0xFF5
 13352                           prodh	equ	0xFF4
 13353                           prodl	equ	0xFF3
 13354                           postinc0	equ	0xFEE
 13355                           wreg	equ	0xFE8
 13356                           postdec1	equ	0xFE5
 13357                           fsr1h	equ	0xFE2
 13358                           fsr1l	equ	0xFE1
 13359                           indf2	equ	0xFDF
 13360                           postinc2	equ	0xFDE
 13361                           postdec2	equ	0xFDD
 13362                           fsr2h	equ	0xFDA
 13363                           fsr2l	equ	0xFD9
 13364                           status	equ	0xFD8
 13365                           
 13366 ;; *************** function _eusartRec *****************
 13367 ;; Defined at:
 13368 ;;		line 83 in file "dans.c"
 13369 ;; Parameters:    Size  Location     Type
 13370 ;;		None
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;		None
 13373 ;; Return value:  Size  Location     Type
 13374 ;;                  1    wreg      unsigned char 
 13375 ;; Registers used:
 13376 ;;		wreg, status,2
 13377 ;; Tracked objects:
 13378 ;;		On entry : 0/0
 13379 ;;		On exit  : 0/0
 13380 ;;		Unchanged: 0/0
 13381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13386 ;;Total ram usage:        0 bytes
 13387 ;; Hardware stack levels used:    1
 13388 ;; Hardware stack levels required when called:    7
 13389 ;; This function calls:
 13390 ;;		Nothing
 13391 ;; This function is called by:
 13392 ;;		_UpdateDistance
 13393 ;;		_Get_VirtualWall_State
 13394 ;;		_Turn
 13395 ;;		_Detect_Victim
 13396 ;; This function uses a non-reentrant model
 13397 ;;
 13398                           
 13399                           	psect	text43
 13400  015B7A                     __ptext43:
 13401                           	opt stack 0
 13402  015B7A                     _eusartRec:
 13403                           	opt stack 21
 13404                           
 13405                           ;dans.c: 84: while(!PIR1bits.RC1IF){}
 13406                           
 13407                           ; BSR set to: 1
 13408                           ;incstack = 0
 13409  015B7A  AA9E               	btfss	3998,5,c	;volatile
 13410  015B7C  D7FE               	goto	_eusartRec
 13411                           
 13412                           ;dans.c: 85: return (int) RCREG1;
 13413  015B7E  50AF               	movf	4015,w,c	;volatile
 13414  015B80  0012               	return	
 13415  015B82                     __end_of_eusartRec:
 13416                           	opt stack 0
 13417                           tosu	equ	0xFFF
 13418                           tosh	equ	0xFFE
 13419                           tosl	equ	0xFFD
 13420                           pclath	equ	0xFFA
 13421                           tblptru	equ	0xFF8
 13422                           tblptrh	equ	0xFF7
 13423                           tblptrl	equ	0xFF6
 13424                           tablat	equ	0xFF5
 13425                           prodh	equ	0xFF4
 13426                           prodl	equ	0xFF3
 13427                           postinc0	equ	0xFEE
 13428                           wreg	equ	0xFE8
 13429                           postdec1	equ	0xFE5
 13430                           fsr1h	equ	0xFE2
 13431                           fsr1l	equ	0xFE1
 13432                           indf2	equ	0xFDF
 13433                           postinc2	equ	0xFDE
 13434                           postdec2	equ	0xFDD
 13435                           fsr2h	equ	0xFDA
 13436                           fsr2l	equ	0xFD9
 13437                           status	equ	0xFD8
 13438                           
 13439 ;; *************** function _Robot_Stop *****************
 13440 ;; Defined at:
 13441 ;;		line 151 in file "dans.c"
 13442 ;; Parameters:    Size  Location     Type
 13443 ;;		None
 13444 ;; Auto vars:     Size  Location     Type
 13445 ;;		None
 13446 ;; Return value:  Size  Location     Type
 13447 ;;                  1    wreg      void 
 13448 ;; Registers used:
 13449 ;;		wreg, cstack
 13450 ;; Tracked objects:
 13451 ;;		On entry : 0/0
 13452 ;;		On exit  : 0/0
 13453 ;;		Unchanged: 0/0
 13454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13459 ;;Total ram usage:        0 bytes
 13460 ;; Hardware stack levels used:    1
 13461 ;; Hardware stack levels required when called:    8
 13462 ;; This function calls:
 13463 ;;		_eusartSend
 13464 ;; This function is called by:
 13465 ;;		_Robot_Init
 13466 ;;		_Turn
 13467 ;;		_Travel
 13468 ;; This function uses a non-reentrant model
 13469 ;;
 13470                           
 13471                           	psect	text44
 13472  015894                     __ptext44:
 13473                           	opt stack 0
 13474  015894                     _Robot_Stop:
 13475                           	opt stack 20
 13476                           
 13477                           ;dans.c: 152: eusartSend(137);
 13478                           
 13479                           ;incstack = 0
 13480  015894  0E89               	movlw	137
 13481  015896  EC86  F0AD         	call	_eusartSend
 13482                           
 13483                           ;dans.c: 153: eusartSend(0);
 13484  01589A  0E00               	movlw	0
 13485  01589C  EC86  F0AD         	call	_eusartSend
 13486                           
 13487                           ;dans.c: 154: eusartSend(0);
 13488  0158A0  0E00               	movlw	0
 13489  0158A2  EC86  F0AD         	call	_eusartSend
 13490                           
 13491                           ;dans.c: 155: eusartSend(0);
 13492  0158A6  0E00               	movlw	0
 13493  0158A8  EC86  F0AD         	call	_eusartSend
 13494                           
 13495                           ;dans.c: 156: eusartSend(0);
 13496  0158AC  0E00               	movlw	0
 13497  0158AE  EC86  F0AD         	call	_eusartSend
 13498  0158B2  0012               	return		;funcret
 13499  0158B4                     __end_of_Robot_Stop:
 13500                           	opt stack 0
 13501                           tosu	equ	0xFFF
 13502                           tosh	equ	0xFFE
 13503                           tosl	equ	0xFFD
 13504                           pclath	equ	0xFFA
 13505                           tblptru	equ	0xFF8
 13506                           tblptrh	equ	0xFF7
 13507                           tblptrl	equ	0xFF6
 13508                           tablat	equ	0xFF5
 13509                           prodh	equ	0xFF4
 13510                           prodl	equ	0xFF3
 13511                           postinc0	equ	0xFEE
 13512                           wreg	equ	0xFE8
 13513                           postdec1	equ	0xFE5
 13514                           fsr1h	equ	0xFE2
 13515                           fsr1l	equ	0xFE1
 13516                           indf2	equ	0xFDF
 13517                           postinc2	equ	0xFDE
 13518                           postdec2	equ	0xFDD
 13519                           fsr2h	equ	0xFDA
 13520                           fsr2l	equ	0xFD9
 13521                           status	equ	0xFD8
 13522                           
 13523 ;; *************** function _eusartSend *****************
 13524 ;; Defined at:
 13525 ;;		line 79 in file "dans.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;  sendChar        1    wreg     unsigned char 
 13528 ;; Auto vars:     Size  Location     Type
 13529 ;;  sendChar        1    0[BANK0 ] unsigned char 
 13530 ;; Return value:  Size  Location     Type
 13531 ;;                  1    wreg      void 
 13532 ;; Registers used:
 13533 ;;		wreg
 13534 ;; Tracked objects:
 13535 ;;		On entry : 0/0
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13542 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;Total ram usage:        1 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; Hardware stack levels required when called:    7
 13546 ;; This function calls:
 13547 ;;		Nothing
 13548 ;; This function is called by:
 13549 ;;		_Robot_Init
 13550 ;;		_Drive
 13551 ;;		_UpdateDistance
 13552 ;;		_Robot_Stop
 13553 ;;		_Get_VirtualWall_State
 13554 ;;		_Turn
 13555 ;;		_Get_Sensor_State
 13556 ;;		_BangBang
 13557 ;;		_LEDOn
 13558 ;;		_LEDOff
 13559 ;;		_Detect_Victim
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563                           	psect	text45
 13564  015B0C                     __ptext45:
 13565                           	opt stack 0
 13566  015B0C                     _eusartSend:
 13567                           	opt stack 21
 13568                           
 13569                           ;incstack = 0
 13570                           ;eusartSend@sendChar stored from wreg
 13571  015B0C  0100               	movlb	0	; () banked
 13572  015B0E  6F60               	movwf	eusartSend@sendChar& (0+255),b
 13573  015B10                     
 13574                           ;dans.c: 80: while(!TXSTA1bits.TRMT){};
 13575  015B10  A2AD               	btfss	4013,1,c	;volatile
 13576  015B12  D7FE               	goto	l14477
 13577                           
 13578                           ;dans.c: 81: TXREG1 = sendChar;
 13579  015B14  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
 13580  015B18  0012               	return		;funcret
 13581  015B1A                     __end_of_eusartSend:
 13582                           	opt stack 0
 13583                           tosu	equ	0xFFF
 13584                           tosh	equ	0xFFE
 13585                           tosl	equ	0xFFD
 13586                           pclath	equ	0xFFA
 13587                           tblptru	equ	0xFF8
 13588                           tblptrh	equ	0xFF7
 13589                           tblptrl	equ	0xFF6
 13590                           tablat	equ	0xFF5
 13591                           prodh	equ	0xFF4
 13592                           prodl	equ	0xFF3
 13593                           postinc0	equ	0xFEE
 13594                           wreg	equ	0xFE8
 13595                           postdec1	equ	0xFE5
 13596                           fsr1h	equ	0xFE2
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           postdec2	equ	0xFDD
 13601                           fsr2h	equ	0xFDA
 13602                           fsr2l	equ	0xFD9
 13603                           status	equ	0xFD8
 13604                           
 13605 ;; *************** function _MXK_Init *****************
 13606 ;; Defined at:
 13607 ;;		line 33 in file "Library/MXK.c"
 13608 ;; Parameters:    Size  Location     Type
 13609 ;;		None
 13610 ;; Auto vars:     Size  Location     Type
 13611 ;;		None
 13612 ;; Return value:  Size  Location     Type
 13613 ;;                  1    wreg      void 
 13614 ;; Registers used:
 13615 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13616 ;; Tracked objects:
 13617 ;;		On entry : 0/0
 13618 ;;		On exit  : 0/0
 13619 ;;		Unchanged: 0/0
 13620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13625 ;;Total ram usage:        0 bytes
 13626 ;; Hardware stack levels used:    1
 13627 ;; Hardware stack levels required when called:   16
 13628 ;; This function calls:
 13629 ;;		_LED_Init
 13630 ;;		_Port_Init
 13631 ;;		_Port_SetPin
 13632 ;;		_Port_SetPinType
 13633 ;;		_Port_SetQuadType
 13634 ;;		_Port_SetType
 13635 ;;		_delay_ms
 13636 ;; This function is called by:
 13637 ;;		_main
 13638 ;; This function uses a non-reentrant model
 13639 ;;
 13640                           
 13641                           	psect	text46
 13642  01328A                     __ptext46:
 13643                           	opt stack 0
 13644  01328A                     _MXK_Init:
 13645                           	opt stack 14
 13646                           
 13647                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 13648                           
 13649                           ;incstack = 0
 13650  01328A  0E01               	movlw	1
 13651  01328C  6E4D               	movwf	_Bus_State,c
 13652                           
 13653                           ;MXK.c: 36: lQueue = (Function)0;
 13654  01328E  0E00               	movlw	0
 13655  013290  6E29               	movwf	_lQueue,c	;volatile
 13656  013292  0E00               	movlw	0
 13657  013294  6E2A               	movwf	_lQueue+1,c	;volatile
 13658  013296  0E00               	movlw	0
 13659  013298  6E2B               	movwf	_lQueue+2,c	;volatile
 13660                           
 13661                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 13662  01329A  0EEE               	movlw	low _PortA
 13663  01329C  0100               	movlb	0	; () banked
 13664  01329E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13665  0132A0  0E02               	movlw	high _PortA
 13666  0132A2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13667  0132A4  0E00               	movlw	0
 13668  0132A6  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13669  0132A8  EC3E  F095         	call	_Port_Init	;wreg free
 13670                           
 13671                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 13672  0132AC  0E95               	movlw	low _PortB
 13673  0132AE  0100               	movlb	0	; () banked
 13674  0132B0  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13675  0132B2  0E01               	movlw	high _PortB
 13676  0132B4  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13677  0132B6  0E01               	movlw	1
 13678  0132B8  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13679  0132BA  EC3E  F095         	call	_Port_Init	;wreg free
 13680                           
 13681                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 13682  0132BE  0E9F               	movlw	low _PortC
 13683  0132C0  0100               	movlb	0	; () banked
 13684  0132C2  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13685  0132C4  0E01               	movlw	high _PortC
 13686  0132C6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13687  0132C8  0E02               	movlw	2
 13688  0132CA  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13689  0132CC  EC3E  F095         	call	_Port_Init	;wreg free
 13690                           
 13691                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 13692  0132D0  0E8B               	movlw	low _PortD
 13693  0132D2  0100               	movlb	0	; () banked
 13694  0132D4  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13695  0132D6  0E01               	movlw	high _PortD
 13696  0132D8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13697  0132DA  0E03               	movlw	3
 13698  0132DC  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13699  0132DE  EC3E  F095         	call	_Port_Init	;wreg free
 13700                           
 13701                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 13702  0132E2  0E81               	movlw	low _PortE
 13703  0132E4  0100               	movlb	0	; () banked
 13704  0132E6  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13705  0132E8  0E01               	movlw	high _PortE
 13706  0132EA  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13707  0132EC  0E04               	movlw	4
 13708  0132EE  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13709  0132F0  EC3E  F095         	call	_Port_Init	;wreg free
 13710                           
 13711                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 13712  0132F4  0EA9               	movlw	low _PortF
 13713  0132F6  0100               	movlb	0	; () banked
 13714  0132F8  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13715  0132FA  0E01               	movlw	high _PortF
 13716  0132FC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13717  0132FE  0E05               	movlw	5
 13718  013300  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13719  013302  EC3E  F095         	call	_Port_Init	;wreg free
 13720                           
 13721                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 13722  013306  0E77               	movlw	low _PortG
 13723  013308  0100               	movlb	0	; () banked
 13724  01330A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 13725  01330C  0E01               	movlw	high _PortG
 13726  01330E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 13727  013310  0E06               	movlw	6
 13728  013312  6FA2               	movwf	Port_Init@pPort& (0+255),b
 13729  013314  EC3E  F095         	call	_Port_Init	;wreg free
 13730                           
 13731                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 13732  013318  0EA9               	movlw	low _PortF
 13733  01331A  0100               	movlb	0	; () banked
 13734  01331C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13735  01331E  0E01               	movlw	high _PortF
 13736  013320  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13737  013322  0E05               	movlw	5
 13738  013324  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13739  013326  0E00               	movlw	0
 13740  013328  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13741  01332A  ECF7  F092         	call	_Port_SetPinType	;wreg free
 13742                           
 13743                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 13744  01332E  0E95               	movlw	low _PortB
 13745  013330  0100               	movlb	0	; () banked
 13746  013332  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 13747  013334  0E01               	movlw	high _PortB
 13748  013336  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 13749  013338  0E00               	movlw	0
 13750  01333A  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 13751  01333C  0E00               	movlw	0
 13752  01333E  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 13753  013340  EC4D  F08E         	call	_Port_SetQuadType	;wreg free
 13754                           
 13755                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 13756  013344  0EA9               	movlw	low _PortF
 13757  013346  0100               	movlb	0	; () banked
 13758  013348  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13759  01334A  0E01               	movlw	high _PortF
 13760  01334C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13761  01334E  0E06               	movlw	6
 13762  013350  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13763  013352  0E03               	movlw	3
 13764  013354  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13765  013356  ECF7  F092         	call	_Port_SetPinType	;wreg free
 13766                           
 13767                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 13768  01335A  0E77               	movlw	low _PortG
 13769  01335C  0100               	movlb	0	; () banked
 13770  01335E  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 13771  013360  0E01               	movlw	high _PortG
 13772  013362  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 13773  013364  0E03               	movlw	3
 13774  013366  6F9C               	movwf	Port_SetType@pType& (0+255),b
 13775  013368  EC34  F091         	call	_Port_SetType	;wreg free
 13776                           
 13777                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 13778  01336C  0E77               	movlw	low _PortG
 13779  01336E  0100               	movlb	0	; () banked
 13780  013370  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13781  013372  0E01               	movlw	high _PortG
 13782  013374  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13783  013376  0E04               	movlw	4
 13784  013378  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13785  01337A  0E00               	movlw	0
 13786  01337C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13787  01337E  EC5D  F09E         	call	_Port_SetPin	;wreg free
 13788                           
 13789                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 13790  013382  0EA9               	movlw	low _PortF
 13791  013384  0100               	movlb	0	; () banked
 13792  013386  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13793  013388  0E01               	movlw	high _PortF
 13794  01338A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13795  01338C  0E06               	movlw	6
 13796  01338E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13797  013390  0E01               	movlw	1
 13798  013392  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13799  013394  EC5D  F09E         	call	_Port_SetPin	;wreg free
 13800                           
 13801                           ;MXK.c: 55: LED_Init(eLED1);
 13802  013398  0E00               	movlw	0
 13803  01339A  EC77  F0A7         	call	_LED_Init
 13804                           
 13805                           ;MXK.c: 56: LED_Init(eLED2);
 13806  01339E  0E01               	movlw	1
 13807  0133A0  EC77  F0A7         	call	_LED_Init
 13808                           
 13809                           ;MXK.c: 58: PIR1 = 0;
 13810  0133A4  0E00               	movlw	0
 13811  0133A6  6E9E               	movwf	3998,c	;volatile
 13812                           
 13813                           ;MXK.c: 59: PIR2 = 0;
 13814  0133A8  0E00               	movlw	0
 13815  0133AA  6EA1               	movwf	4001,c	;volatile
 13816                           
 13817                           ;MXK.c: 60: PIR3 = 0;
 13818  0133AC  0E00               	movlw	0
 13819  0133AE  6EA4               	movwf	4004,c	;volatile
 13820                           
 13821                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 13822  0133B0  8E9B               	bsf	3995,7,c	;volatile
 13823                           
 13824                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 13825  0133B2  8C9B               	bsf	3995,6,c	;volatile
 13826                           
 13827                           ;MXK.c: 66: delay_ms(100);
 13828  0133B4  0E00               	movlw	0
 13829  0133B6  0100               	movlb	0	; () banked
 13830  0133B8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13831  0133BA  0E64               	movlw	100
 13832  0133BC  6F60               	movwf	delay_ms@ms& (0+255),b
 13833  0133BE  ECF5  F0A6         	call	_delay_ms	;wreg free
 13834                           
 13835                           ;MXK.c: 68: RCONbits.IPEN = 1;
 13836  0133C2  8ED0               	bsf	4048,7,c	;volatile
 13837  0133C4  0012               	return		;funcret
 13838  0133C6                     __end_of_MXK_Init:
 13839                           	opt stack 0
 13840                           tosu	equ	0xFFF
 13841                           tosh	equ	0xFFE
 13842                           tosl	equ	0xFFD
 13843                           pclath	equ	0xFFA
 13844                           tblptru	equ	0xFF8
 13845                           tblptrh	equ	0xFF7
 13846                           tblptrl	equ	0xFF6
 13847                           tablat	equ	0xFF5
 13848                           prodh	equ	0xFF4
 13849                           prodl	equ	0xFF3
 13850                           postinc0	equ	0xFEE
 13851                           wreg	equ	0xFE8
 13852                           postdec1	equ	0xFE5
 13853                           fsr1h	equ	0xFE2
 13854                           fsr1l	equ	0xFE1
 13855                           indf2	equ	0xFDF
 13856                           postinc2	equ	0xFDE
 13857                           postdec2	equ	0xFDD
 13858                           fsr2h	equ	0xFDA
 13859                           fsr2l	equ	0xFD9
 13860                           status	equ	0xFD8
 13861                           
 13862 ;; *************** function _Port_Init *****************
 13863 ;; Defined at:
 13864 ;;		line 150 in file "Library/Port.c"
 13865 ;; Parameters:    Size  Location     Type
 13866 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 13867 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13868 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13869 ;;  pPort           1   66[BANK0 ] enum E6786
 13870 ;; Auto vars:     Size  Location     Type
 13871 ;;  i               1   69[BANK0 ] unsigned char 
 13872 ;; Return value:  Size  Location     Type
 13873 ;;                  1    wreg      void 
 13874 ;; Registers used:
 13875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13876 ;; Tracked objects:
 13877 ;;		On entry : 0/0
 13878 ;;		On exit  : 0/0
 13879 ;;		Unchanged: 0/0
 13880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13881 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13885 ;;Total ram usage:        6 bytes
 13886 ;; Hardware stack levels used:    1
 13887 ;; Hardware stack levels required when called:   15
 13888 ;; This function calls:
 13889 ;;		_GetPortPORT
 13890 ;;		_GetPortProperties
 13891 ;;		_GetPortTRIS
 13892 ;;		_Port_Set
 13893 ;;		_Port_SetPinType
 13894 ;;		_Port_SetType
 13895 ;;		_Word_GetPair
 13896 ;; This function is called by:
 13897 ;;		_MXK_Init
 13898 ;; This function uses a non-reentrant model
 13899 ;;
 13900                           
 13901                           	psect	text47
 13902  012A7C                     __ptext47:
 13903                           	opt stack 0
 13904  012A7C                     _Port_Init:
 13905                           	opt stack 14
 13906                           
 13907                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 13908                           
 13909                           ;incstack = 0
 13910  012A7C  0100               	movlb	0	; () banked
 13911  012A7E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 13912  012A80  EC0A  F0A2         	call	_GetPortProperties
 13913  012A84  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 13914  012A88  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 13915  012A8C  0100               	movlb	0	; () banked
 13916  012A8E  C060  FFDE         	movff	?_GetPortProperties,postinc2
 13917  012A92  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 13918                           
 13919                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 13920  012A96  51A2               	movf	Port_Init@pPort& (0+255),w,b
 13921  012A98  EC4E  F0A2         	call	_GetPortPORT
 13922  012A9C  0100               	movlb	0	; () banked
 13923  012A9E  EE20 F006          	lfsr	2,6
 13924  012AA2  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13925  012AA4  26D9               	addwf	fsr2l,f,c
 13926  012AA6  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13927  012AA8  22DA               	addwfc	fsr2h,f,c
 13928  012AAA  C060  FFDE         	movff	?_GetPortPORT,postinc2
 13929  012AAE  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 13930                           
 13931                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 13932  012AB2  51A2               	movf	Port_Init@pPort& (0+255),w,b
 13933  012AB4  EC4E  F0A2         	call	_GetPortPORT
 13934  012AB8  0100               	movlb	0	; () banked
 13935  012ABA  EE20 F004          	lfsr	2,4
 13936  012ABE  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13937  012AC0  26D9               	addwf	fsr2l,f,c
 13938  012AC2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13939  012AC4  22DA               	addwfc	fsr2h,f,c
 13940  012AC6  C060  FFDE         	movff	?_GetPortPORT,postinc2
 13941  012ACA  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 13942                           
 13943                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 13944  012ACE  51A2               	movf	Port_Init@pPort& (0+255),w,b
 13945  012AD0  ECC6  F0A1         	call	_GetPortTRIS
 13946  012AD4  0100               	movlb	0	; () banked
 13947  012AD6  EE20 F002          	lfsr	2,2
 13948  012ADA  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13949  012ADC  26D9               	addwf	fsr2l,f,c
 13950  012ADE  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13951  012AE0  22DA               	addwfc	fsr2h,f,c
 13952  012AE2  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 13953  012AE6  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 13954                           
 13955                           ; BSR set to: 0
 13956                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 13957  012AEA  EE20 F004          	lfsr	2,4
 13958  012AEE  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13959  012AF0  26D9               	addwf	fsr2l,f,c
 13960  012AF2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13961  012AF4  22DA               	addwfc	fsr2h,f,c
 13962  012AF6  CFDE F0A3          	movff	postinc2,??_Port_Init
 13963  012AFA  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 13964  012AFE  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 13965  012B02  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 13966  012B06  0E00               	movlw	0
 13967  012B08  6EDF               	movwf	indf2,c
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 13971  012B0A  EE20 F002          	lfsr	2,2
 13972  012B0E  51A0               	movf	Port_Init@pInput& (0+255),w,b
 13973  012B10  26D9               	addwf	fsr2l,f,c
 13974  012B12  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 13975  012B14  22DA               	addwfc	fsr2h,f,c
 13976  012B16  CFDE F0A3          	movff	postinc2,??_Port_Init
 13977  012B1A  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 13978  012B1E  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 13979  012B22  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 13980  012B26  0EFF               	movlw	255
 13981  012B28  6EDF               	movwf	indf2,c
 13982                           
 13983                           ; BSR set to: 0
 13984                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 13985  012B2A  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 13986  012B2E  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 13987  012B32  0E00               	movlw	0
 13988  012B34  6F9C               	movwf	Port_SetType@pType& (0+255),b
 13989  012B36  EC34  F091         	call	_Port_SetType	;wreg free
 13990                           
 13991                           ;Port.c: 166: UINT8 i;
 13992                           ;Port.c: 167: for (i=0; i<8; i++)
 13993  012B3A  0E00               	movlw	0
 13994  012B3C  0100               	movlb	0	; () banked
 13995  012B3E  6FA5               	movwf	Port_Init@i& (0+255),b
 13996  012B40                     l15211:
 13997                           
 13998                           ; BSR set to: 0
 13999  012B40  0E07               	movlw	7
 14000  012B42  65A5               	cpfsgt	Port_Init@i& (0+255),b
 14001  012B44  D031               	goto	l403
 14002  012B46  D04B               	goto	u12560
 14003  012B48                     
 14004                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14005                           
 14006                           ; BSR set to: 0
 14007  012B48  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14008  012B4C  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14009  012B50  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14010  012B54  0E03               	movlw	3
 14011  012B56  0100               	movlb	0	; () banked
 14012  012B58  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14013  012B5A  ECF7  F092         	call	_Port_SetPinType	;wreg free
 14014                           
 14015                           ;Port.c: 173: break;
 14016  012B5E  D03C               	goto	l405
 14017  012B60                     
 14018                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14019  012B60  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14020  012B64  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14021  012B68  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14022  012B6C  0E02               	movlw	2
 14023  012B6E  0100               	movlb	0	; () banked
 14024  012B70  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14025  012B72  ECF7  F092         	call	_Port_SetPinType	;wreg free
 14026                           
 14027                           ;Port.c: 176: break;
 14028  012B76  D030               	goto	l405
 14029  012B78                     
 14030                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14031  012B78  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14032  012B7C  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14033  012B80  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14034  012B84  0E01               	movlw	1
 14035  012B86  0100               	movlb	0	; () banked
 14036  012B88  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14037  012B8A  ECF7  F092         	call	_Port_SetPinType	;wreg free
 14038                           
 14039                           ;Port.c: 179: break;
 14040  012B8E  D024               	goto	l405
 14041  012B90                     
 14042                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14043  012B90  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14044  012B94  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14045  012B98  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14046  012B9C  0E00               	movlw	0
 14047  012B9E  0100               	movlb	0	; () banked
 14048  012BA0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14049  012BA2  ECF7  F092         	call	_Port_SetPinType	;wreg free
 14050                           
 14051                           ;Port.c: 183: }
 14052                           
 14053                           ;Port.c: 182: break;
 14054  012BA6  D018               	goto	l405
 14055  012BA8                     l403:
 14056  012BA8  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 14057  012BAC  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14058  012BB0  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 14059  012BB4  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 14060  012BB8  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 14061  012BBC  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14062                           
 14063                           ; Switch size 1, requested type "space"
 14064                           ; Number of cases is 4, Range of values is 0 to 3
 14065                           ; switch strategies available:
 14066                           ; Name         Instructions Cycles
 14067                           ; simple_byte           13     7 (average)
 14068                           ;	Chosen strategy is simple_byte
 14069  012BC0  0A00               	xorlw	0	; case 0
 14070  012BC2  B4D8               	btfsc	status,2,c
 14071  012BC4  D7C1               	goto	l404
 14072  012BC6  0A01               	xorlw	1	; case 1
 14073  012BC8  B4D8               	btfsc	status,2,c
 14074  012BCA  D7D6               	goto	l407
 14075  012BCC  0A03               	xorlw	3	; case 2
 14076  012BCE  B4D8               	btfsc	status,2,c
 14077  012BD0  D7C7               	goto	l406
 14078  012BD2  0A01               	xorlw	1	; case 3
 14079  012BD4  B4D8               	btfsc	status,2,c
 14080  012BD6  D7DC               	goto	l408
 14081  012BD8                     l405:
 14082  012BD8  0100               	movlb	0	; () banked
 14083  012BDA  2BA5               	incf	Port_Init@i& (0+255),f,b
 14084  012BDC  D7B1               	goto	l15211
 14085  012BDE                     u12560:
 14086                           
 14087                           ; BSR set to: 0
 14088                           ;Port.c: 184: }
 14089                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14090                           
 14091                           ; BSR set to: 0
 14092  012BDE  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 14093  012BE2  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14094  012BE6  0E00               	movlw	0
 14095  012BE8  6F71               	movwf	Port_Set@pValue& (0+255),b
 14096  012BEA  EC7C  F08A         	call	_Port_Set	;wreg free
 14097  012BEE  0012               	return		;funcret
 14098  012BF0                     __end_of_Port_Init:
 14099                           	opt stack 0
 14100                           tosu	equ	0xFFF
 14101                           tosh	equ	0xFFE
 14102                           tosl	equ	0xFFD
 14103                           pclath	equ	0xFFA
 14104                           tblptru	equ	0xFF8
 14105                           tblptrh	equ	0xFF7
 14106                           tblptrl	equ	0xFF6
 14107                           tablat	equ	0xFF5
 14108                           prodh	equ	0xFF4
 14109                           prodl	equ	0xFF3
 14110                           postinc0	equ	0xFEE
 14111                           wreg	equ	0xFE8
 14112                           postdec1	equ	0xFE5
 14113                           fsr1h	equ	0xFE2
 14114                           fsr1l	equ	0xFE1
 14115                           indf2	equ	0xFDF
 14116                           postinc2	equ	0xFDE
 14117                           postdec2	equ	0xFDD
 14118                           fsr2h	equ	0xFDA
 14119                           fsr2l	equ	0xFD9
 14120                           status	equ	0xFD8
 14121                           
 14122 ;; *************** function _Port_SetType *****************
 14123 ;; Defined at:
 14124 ;;		line 513 in file "Library/Port.c"
 14125 ;; Parameters:    Size  Location     Type
 14126 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14127 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14128 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14129 ;;  pType           1   60[BANK0 ] enum E6795
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;  Output          1   63[BANK0 ] enum E6475
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      enum E6475
 14134 ;; Registers used:
 14135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14136 ;; Tracked objects:
 14137 ;;		On entry : 0/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14141 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14144 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14145 ;;Total ram usage:        6 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; Hardware stack levels required when called:   14
 14148 ;; This function calls:
 14149 ;;		_Port_CheckPortType
 14150 ;;		_Word_SetPair
 14151 ;; This function is called by:
 14152 ;;		_Port_Init
 14153 ;;		_MXK_Init
 14154 ;; This function uses a non-reentrant model
 14155 ;;
 14156                           
 14157                           	psect	text48
 14158  012268                     __ptext48:
 14159                           	opt stack 0
 14160  012268                     _Port_SetType:
 14161                           	opt stack 15
 14162                           
 14163                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14164                           
 14165                           ;incstack = 0
 14166  012268  0E05               	movlw	5
 14167  01226A  0100               	movlb	0	; () banked
 14168  01226C  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14169                           
 14170                           ;Port.c: 517: switch (pType)
 14171  01226E  D06E               	goto	l509
 14172  012270                     
 14173                           ; BSR set to: 0
 14174                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14175                           
 14176                           ; BSR set to: 0
 14177  012270  EE20 F002          	lfsr	2,2
 14178  012274  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14179  012276  26D9               	addwf	fsr2l,f,c
 14180  012278  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14181  01227A  22DA               	addwfc	fsr2h,f,c
 14182  01227C  CFDE F09D          	movff	postinc2,??_Port_SetType
 14183  012280  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14184  012284  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14185  012288  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14186  01228C  0EFF               	movlw	255
 14187  01228E  D05C               	goto	L13
 14188  012290                     
 14189                           ; BSR set to: 0
 14190                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14191                           
 14192                           ; BSR set to: 0
 14193  012290  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14194  012294  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14195  012298  0E01               	movlw	1
 14196  01229A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14197  01229C  ECB8  F0A9         	call	_Port_CheckPortType	;wreg free
 14198  0122A0  0100               	movlb	0	; () banked
 14199  0122A2  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14200  0122A4  519F               	movf	Port_SetType@Output& (0+255),w,b
 14201  0122A6  A4D8               	btfss	status,2,c
 14202  0122A8  0012               	return	
 14203                           
 14204                           ; BSR set to: 0
 14205                           ;Port.c: 527: {
 14206                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 14207  0122AA  EE20 F002          	lfsr	2,2
 14208  0122AE  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14209  0122B0  26D9               	addwf	fsr2l,f,c
 14210  0122B2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14211  0122B4  22DA               	addwfc	fsr2h,f,c
 14212  0122B6  CFDE F09D          	movff	postinc2,??_Port_SetType
 14213  0122BA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14214  0122BE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14215  0122C2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14216  0122C6  0E00               	movlw	0
 14217  0122C8  6EDF               	movwf	indf2,c
 14218                           
 14219                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 14220  0122CA  EE20 F004          	lfsr	2,4
 14221  0122CE  D02F               	goto	L19
 14222  0122D0                     
 14223                           ; BSR set to: 0
 14224                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 14225                           
 14226                           ; BSR set to: 0
 14227  0122D0  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14228  0122D4  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14229  0122D8  0E02               	movlw	2
 14230  0122DA  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14231  0122DC  ECB8  F0A9         	call	_Port_CheckPortType	;wreg free
 14232  0122E0  0100               	movlb	0	; () banked
 14233  0122E2  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14234  0122E4  519F               	movf	Port_SetType@Output& (0+255),w,b
 14235  0122E6  A4D8               	btfss	status,2,c
 14236  0122E8  0012               	return	
 14237                           
 14238                           ; BSR set to: 0
 14239                           ;Port.c: 538: {
 14240                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 14241  0122EA  EE20 F002          	lfsr	2,2
 14242  0122EE  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14243  0122F0  26D9               	addwf	fsr2l,f,c
 14244  0122F2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14245  0122F4  22DA               	addwfc	fsr2h,f,c
 14246  0122F6  CFDE F09D          	movff	postinc2,??_Port_SetType
 14247  0122FA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14248  0122FE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14249  012302  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14250  012306  0EFF               	movlw	255
 14251  012308  6EDF               	movwf	indf2,c
 14252                           
 14253                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 14254  01230A  EE20 F004          	lfsr	2,4
 14255  01230E  D7B2               	goto	L14
 14256  012310                     
 14257                           ; BSR set to: 0
 14258                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 14259                           
 14260                           ; BSR set to: 0
 14261  012310  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14262  012314  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14263  012318  0E00               	movlw	0
 14264  01231A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14265  01231C  ECB8  F0A9         	call	_Port_CheckPortType	;wreg free
 14266  012320  0100               	movlb	0	; () banked
 14267  012322  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14268  012324  519F               	movf	Port_SetType@Output& (0+255),w,b
 14269  012326  A4D8               	btfss	status,2,c
 14270  012328  0012               	return	
 14271                           
 14272                           ; BSR set to: 0
 14273                           ;Port.c: 549: {
 14274                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 14275  01232A  EE20 F002          	lfsr	2,2
 14276  01232E                     L19:
 14277  01232E  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14278  012330  26D9               	addwf	fsr2l,f,c
 14279  012332  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14280  012334  22DA               	addwfc	fsr2h,f,c
 14281  012336  CFDE F09D          	movff	postinc2,??_Port_SetType
 14282  01233A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14283  01233E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14284  012342  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14285  012346  0E00               	movlw	0
 14286  012348                     L13:
 14287  012348  6EDF               	movwf	indf2,c
 14288                           
 14289                           ;Port.c: 552: }
 14290  01234A  D00D               	goto	l511
 14291  01234C                     l509:
 14292                           
 14293                           ; BSR set to: 0
 14294                           
 14295                           ; BSR set to: 0
 14296  01234C  519C               	movf	Port_SetType@pType& (0+255),w,b
 14297                           
 14298                           ; Switch size 1, requested type "space"
 14299                           ; Number of cases is 4, Range of values is 0 to 3
 14300                           ; switch strategies available:
 14301                           ; Name         Instructions Cycles
 14302                           ; simple_byte           13     7 (average)
 14303                           ;	Chosen strategy is simple_byte
 14304  01234E  0A00               	xorlw	0	; case 0
 14305  012350  B4D8               	btfsc	status,2,c
 14306  012352  D78E               	goto	l510
 14307  012354  0A01               	xorlw	1	; case 1
 14308  012356  B4D8               	btfsc	status,2,c
 14309  012358  D79B               	goto	l512
 14310  01235A  0A03               	xorlw	3	; case 2
 14311  01235C  B4D8               	btfsc	status,2,c
 14312  01235E  D7B8               	goto	l516
 14313  012360  0A01               	xorlw	1	; case 3
 14314  012362  B4D8               	btfsc	status,2,c
 14315  012364  D7D5               	goto	l519
 14316  012366                     l511:
 14317                           
 14318                           ; BSR set to: 0
 14319                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 14320                           
 14321                           ; BSR set to: 0
 14322  012366  0E08               	movlw	8
 14323  012368  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14324  01236A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14325  01236C  0E00               	movlw	0
 14326  01236E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14327  012370  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14328  012372  0E00               	movlw	0
 14329  012374  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14330  012376  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14331  01237A  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14332                           
 14333                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 14334  01237E  0E08               	movlw	8
 14335  012380  0100               	movlb	0	; () banked
 14336  012382  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14337  012384  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14338  012386  0E00               	movlw	0
 14339  012388  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14340  01238A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14341  01238C  0E01               	movlw	1
 14342  01238E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14343  012390  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14344  012394  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14345                           
 14346                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 14347  012398  0E08               	movlw	8
 14348  01239A  0100               	movlb	0	; () banked
 14349  01239C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14350  01239E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14351  0123A0  0E00               	movlw	0
 14352  0123A2  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14353  0123A4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14354  0123A6  0E02               	movlw	2
 14355  0123A8  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14356  0123AA  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14357  0123AE  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14358                           
 14359                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 14360  0123B2  0E08               	movlw	8
 14361  0123B4  0100               	movlb	0	; () banked
 14362  0123B6  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14363  0123B8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14364  0123BA  0E00               	movlw	0
 14365  0123BC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14366  0123BE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14367  0123C0  0E03               	movlw	3
 14368  0123C2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14369  0123C4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14370  0123C8  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14371                           
 14372                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 14373  0123CC  0E08               	movlw	8
 14374  0123CE  0100               	movlb	0	; () banked
 14375  0123D0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14376  0123D2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14377  0123D4  0E00               	movlw	0
 14378  0123D6  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14379  0123D8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14380  0123DA  0E04               	movlw	4
 14381  0123DC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14382  0123DE  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14383  0123E2  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14384                           
 14385                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 14386  0123E6  0E08               	movlw	8
 14387  0123E8  0100               	movlb	0	; () banked
 14388  0123EA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14389  0123EC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14390  0123EE  0E00               	movlw	0
 14391  0123F0  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14392  0123F2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14393  0123F4  0E05               	movlw	5
 14394  0123F6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14395  0123F8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14396  0123FC  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14397                           
 14398                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 14399  012400  0E08               	movlw	8
 14400  012402  0100               	movlb	0	; () banked
 14401  012404  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14402  012406  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14403  012408  0E00               	movlw	0
 14404  01240A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14405  01240C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14406  01240E  0E06               	movlw	6
 14407  012410  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14408  012412  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14409  012416  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14410                           
 14411                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 14412  01241A  0E08               	movlw	8
 14413  01241C  0100               	movlb	0	; () banked
 14414  01241E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14415  012420  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14416  012422  0E00               	movlw	0
 14417  012424  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14418  012426  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14419  012428  0E07               	movlw	7
 14420  01242A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14421  01242C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14422  012430  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 14423  012434  0012               	return	
 14424  012436                     __end_of_Port_SetType:
 14425                           	opt stack 0
 14426                           tosu	equ	0xFFF
 14427                           tosh	equ	0xFFE
 14428                           tosl	equ	0xFFD
 14429                           pclath	equ	0xFFA
 14430                           tblptru	equ	0xFF8
 14431                           tblptrh	equ	0xFF7
 14432                           tblptrl	equ	0xFF6
 14433                           tablat	equ	0xFF5
 14434                           prodh	equ	0xFF4
 14435                           prodl	equ	0xFF3
 14436                           postinc0	equ	0xFEE
 14437                           wreg	equ	0xFE8
 14438                           postdec1	equ	0xFE5
 14439                           fsr1h	equ	0xFE2
 14440                           fsr1l	equ	0xFE1
 14441                           indf2	equ	0xFDF
 14442                           postinc2	equ	0xFDE
 14443                           postdec2	equ	0xFDD
 14444                           fsr2h	equ	0xFDA
 14445                           fsr2l	equ	0xFD9
 14446                           status	equ	0xFD8
 14447                           
 14448 ;; *************** function _Port_CheckPortType *****************
 14449 ;; Defined at:
 14450 ;;		line 138 in file "Library/Port.c"
 14451 ;; Parameters:    Size  Location     Type
 14452 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 14453 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14454 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14455 ;;  pDrive          1   56[BANK0 ] enum E6469
 14456 ;; Auto vars:     Size  Location     Type
 14457 ;;  Output          1   57[BANK0 ] enum E6475
 14458 ;; Return value:  Size  Location     Type
 14459 ;;                  1    wreg      enum E6475
 14460 ;; Registers used:
 14461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14462 ;; Tracked objects:
 14463 ;;		On entry : 0/0
 14464 ;;		On exit  : 0/0
 14465 ;;		Unchanged: 0/0
 14466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14467 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14468 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14470 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14471 ;;Total ram usage:        4 bytes
 14472 ;; Hardware stack levels used:    1
 14473 ;; Hardware stack levels required when called:   13
 14474 ;; This function calls:
 14475 ;;		_Port_CheckQuadType
 14476 ;; This function is called by:
 14477 ;;		_Port_SetType
 14478 ;; This function uses a non-reentrant model
 14479 ;;
 14480                           
 14481                           	psect	text49
 14482  015370                     __ptext49:
 14483                           	opt stack 0
 14484  015370                     _Port_CheckPortType:
 14485                           	opt stack 15
 14486                           
 14487                           ;Port.c: 140: ePinError Output = ePinErrorState;
 14488                           
 14489                           ;incstack = 0
 14490  015370  0E05               	movlw	5
 14491  015372  0100               	movlb	0	; () banked
 14492  015374  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14493                           
 14494                           ; BSR set to: 0
 14495                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 14496  015376  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14497  01537A  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14498  01537E  0E00               	movlw	0
 14499  015380  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14500  015382  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14501  015386  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 14502  01538A  0100               	movlb	0	; () banked
 14503  01538C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14504  01538E  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 14505  015390  A4D8               	btfss	status,2,c
 14506  015392  D00C               	goto	l397
 14507                           
 14508                           ; BSR set to: 0
 14509                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 14510  015394  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14511  015398  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14512  01539C  0E01               	movlw	1
 14513  01539E  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14514  0153A0  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14515  0153A4  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 14516  0153A8  0100               	movlb	0	; () banked
 14517  0153AA  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14518  0153AC                     l397:
 14519                           
 14520                           ; BSR set to: 0
 14521                           ;Port.c: 146: return Output;
 14522                           
 14523                           ; BSR set to: 0
 14524  0153AC  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 14525  0153AE  0012               	return	
 14526  0153B0                     __end_of_Port_CheckPortType:
 14527                           	opt stack 0
 14528                           tosu	equ	0xFFF
 14529                           tosh	equ	0xFFE
 14530                           tosl	equ	0xFFD
 14531                           pclath	equ	0xFFA
 14532                           tblptru	equ	0xFF8
 14533                           tblptrh	equ	0xFF7
 14534                           tblptrl	equ	0xFF6
 14535                           tablat	equ	0xFF5
 14536                           prodh	equ	0xFF4
 14537                           prodl	equ	0xFF3
 14538                           postinc0	equ	0xFEE
 14539                           wreg	equ	0xFE8
 14540                           postdec1	equ	0xFE5
 14541                           fsr1h	equ	0xFE2
 14542                           fsr1l	equ	0xFE1
 14543                           indf2	equ	0xFDF
 14544                           postinc2	equ	0xFDE
 14545                           postdec2	equ	0xFDD
 14546                           fsr2h	equ	0xFDA
 14547                           fsr2l	equ	0xFD9
 14548                           status	equ	0xFD8
 14549                           
 14550 ;; *************** function _Port_Set *****************
 14551 ;; Defined at:
 14552 ;;		line 570 in file "Library/Port.c"
 14553 ;; Parameters:    Size  Location     Type
 14554 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14555 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14556 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14557 ;;  pValue          1   17[BANK0 ] unsigned char 
 14558 ;; Auto vars:     Size  Location     Type
 14559 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 14560 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 14561 ;;  Type            1   38[BANK0 ] enum E6795
 14562 ;; Return value:  Size  Location     Type
 14563 ;;                  1    wreg      void 
 14564 ;; Registers used:
 14565 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14566 ;; Tracked objects:
 14567 ;;		On entry : 0/0
 14568 ;;		On exit  : 0/0
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14571 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14572 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14573 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14574 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14575 ;;Total ram usage:       24 bytes
 14576 ;; Hardware stack levels used:    1
 14577 ;; Hardware stack levels required when called:   10
 14578 ;; This function calls:
 14579 ;;		_Byte_SetByte
 14580 ;;		_Word_GetPair
 14581 ;; This function is called by:
 14582 ;;		_Port_Init
 14583 ;;		_Port_Toggle
 14584 ;; This function uses a non-reentrant model
 14585 ;;
 14586                           
 14587                           	psect	text50
 14588  0114F8                     __ptext50:
 14589                           	opt stack 0
 14590  0114F8                     _Port_Set:
 14591                           	opt stack 18
 14592                           
 14593                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;incstack = 0
 14597  0114F8  0E08               	movlw	8
 14598  0114FA  0100               	movlb	0	; () banked
 14599  0114FC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14600  0114FE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14601  011500  0E00               	movlw	0
 14602  011502  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14603  011504  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14604  011506  0E00               	movlw	0
 14605  011508  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14606  01150A  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14607  01150E  0100               	movlb	0	; () banked
 14608  011510  6F86               	movwf	Port_Set@Type& (0+255),b
 14609                           
 14610                           ; BSR set to: 0
 14611                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 14612  011512  5186               	movf	Port_Set@Type& (0+255),w,b
 14613  011514  6F72               	movwf	??_Port_Set& (0+255),b
 14614  011516  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14615  011518  0E0E               	movlw	14
 14616  01151A                     u12105:
 14617  01151A  90D8               	bcf	status,0,c
 14618  01151C  3772               	rlcf	??_Port_Set& (0+255),f,b
 14619  01151E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14620  011520  2EE8               	decfsz	wreg,f,c
 14621  011522  D7FB               	goto	u12105
 14622  011524  5186               	movf	Port_Set@Type& (0+255),w,b
 14623  011526  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 14624  011528  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 14625  01152A  0E0C               	movlw	12
 14626  01152C                     u12115:
 14627  01152C  90D8               	bcf	status,0,c
 14628  01152E  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 14629  011530  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 14630  011532  2EE8               	decfsz	wreg,f,c
 14631  011534  D7FB               	goto	u12115
 14632  011536  5186               	movf	Port_Set@Type& (0+255),w,b
 14633  011538  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 14634  01153A  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 14635  01153C  0E0A               	movlw	10
 14636  01153E                     u12125:
 14637  01153E  90D8               	bcf	status,0,c
 14638  011540  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 14639  011542  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 14640  011544  2EE8               	decfsz	wreg,f,c
 14641  011546  D7FB               	goto	u12125
 14642  011548  5186               	movf	Port_Set@Type& (0+255),w,b
 14643  01154A  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 14644  01154C  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 14645  01154E  5186               	movf	Port_Set@Type& (0+255),w,b
 14646  011550  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 14647  011552  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 14648  011554  0E06               	movlw	6
 14649  011556                     u12135:
 14650  011556  90D8               	bcf	status,0,c
 14651  011558  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 14652  01155A  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 14653  01155C  2EE8               	decfsz	wreg,f,c
 14654  01155E  D7FB               	goto	u12135
 14655  011560  5186               	movf	Port_Set@Type& (0+255),w,b
 14656  011562  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 14657  011564  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 14658  011566  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 14659  011568  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 14660  01156A  0EF0               	movlw	240
 14661  01156C  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 14662  01156E  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 14663  011570  0B0F               	andlw	15
 14664  011572  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 14665  011574  0EF0               	movlw	240
 14666  011576  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 14667  011578  5186               	movf	Port_Set@Type& (0+255),w,b
 14668  01157A  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 14669  01157C  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 14670  01157E  90D8               	bcf	status,0,c
 14671  011580  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 14672  011582  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 14673  011584  90D8               	bcf	status,0,c
 14674  011586  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 14675  011588  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 14676  01158A  5186               	movf	Port_Set@Type& (0+255),w,b
 14677  01158C  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 14678  01158E  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 14679  011590  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 14680  011592  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14681  011594  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 14682  011596  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14683  011598  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 14684  01159A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14685  01159C  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 14686  01159E  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14687  0115A0  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 14688  0115A2  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14689  0115A4  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 14690  0115A6  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14691  0115A8  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 14692  0115AA  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14693  0115AC  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 14694  0115AE  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14695  0115B0  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 14696  0115B2  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14697  0115B4  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 14698  0115B6  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14699  0115B8  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 14700  0115BA  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 14701  0115BC  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 14702  0115BE  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 14703  0115C0  5172               	movf	??_Port_Set& (0+255),w,b
 14704  0115C2  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 14705  0115C4  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 14706  0115C6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14707  0115C8  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 14708  0115CA  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;Port.c: 574: UINT16 TypeActual = Type;
 14712  0115CC  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 14713  0115D0  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 14717  0115D2  0E08               	movlw	8
 14718  0115D4  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14719  0115D6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14720  0115D8  0E00               	movlw	0
 14721  0115DA  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14722  0115DC  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14723  0115DE  0E01               	movlw	1
 14724  0115E0  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14725  0115E2  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14726  0115E6  0100               	movlb	0	; () banked
 14727  0115E8  6F72               	movwf	??_Port_Set& (0+255),b
 14728  0115EA  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14729  0115EC  90D8               	bcf	status,0,c
 14730  0115EE  3772               	rlcf	??_Port_Set& (0+255),f,b
 14731  0115F0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14732  0115F2  90D8               	bcf	status,0,c
 14733  0115F4  3772               	rlcf	??_Port_Set& (0+255),f,b
 14734  0115F6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14735  0115F8  5172               	movf	??_Port_Set& (0+255),w,b
 14736  0115FA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14737  0115FC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14738  0115FE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14739                           
 14740                           ; BSR set to: 0
 14741                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 14742  011600  0E08               	movlw	8
 14743  011602  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14744  011604  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14745  011606  0E00               	movlw	0
 14746  011608  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14747  01160A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14748  01160C  0E02               	movlw	2
 14749  01160E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14750  011610  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14751  011614  0100               	movlb	0	; () banked
 14752  011616  6F72               	movwf	??_Port_Set& (0+255),b
 14753  011618  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14754  01161A  3B72               	swapf	??_Port_Set& (0+255),f,b
 14755  01161C  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 14756  01161E  0EF0               	movlw	240
 14757  011620  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 14758  011622  5172               	movf	??_Port_Set& (0+255),w,b
 14759  011624  0B0F               	andlw	15
 14760  011626  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 14761  011628  0EF0               	movlw	240
 14762  01162A  1772               	andwf	??_Port_Set& (0+255),f,b
 14763  01162C  5172               	movf	??_Port_Set& (0+255),w,b
 14764  01162E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14765  011630  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14766  011632  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14767                           
 14768                           ; BSR set to: 0
 14769                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 14770  011634  0E08               	movlw	8
 14771  011636  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14772  011638  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14773  01163A  0E00               	movlw	0
 14774  01163C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14775  01163E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14776  011640  0E03               	movlw	3
 14777  011642  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14778  011644  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14779  011648  0100               	movlb	0	; () banked
 14780  01164A  6F72               	movwf	??_Port_Set& (0+255),b
 14781  01164C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14782  01164E  0E06               	movlw	6
 14783  011650                     u12145:
 14784  011650  90D8               	bcf	status,0,c
 14785  011652  3772               	rlcf	??_Port_Set& (0+255),f,b
 14786  011654  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14787  011656  2EE8               	decfsz	wreg,f,c
 14788  011658  D7FB               	goto	u12145
 14789  01165A  5172               	movf	??_Port_Set& (0+255),w,b
 14790  01165C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14791  01165E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14792  011660  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14793                           
 14794                           ; BSR set to: 0
 14795                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 14796  011662  0E08               	movlw	8
 14797  011664  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14798  011666  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14799  011668  0E00               	movlw	0
 14800  01166A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14801  01166C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14802  01166E  0E04               	movlw	4
 14803  011670  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14804  011672  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14805  011676  0100               	movlb	0	; () banked
 14806  011678  6F72               	movwf	??_Port_Set& (0+255),b
 14807  01167A  5172               	movf	??_Port_Set& (0+255),w,b
 14808  01167C  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 14809  01167E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14810  011680  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14811  011682  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14812  011684  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 14813  011686  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14814                           
 14815                           ; BSR set to: 0
 14816                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 14817  011688  0E08               	movlw	8
 14818  01168A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14819  01168C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14820  01168E  0E00               	movlw	0
 14821  011690  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14822  011692  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14823  011694  0E05               	movlw	5
 14824  011696  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14825  011698  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14826  01169C  0100               	movlb	0	; () banked
 14827  01169E  6F72               	movwf	??_Port_Set& (0+255),b
 14828  0116A0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14829  0116A2  0E0A               	movlw	10
 14830  0116A4                     u12155:
 14831  0116A4  90D8               	bcf	status,0,c
 14832  0116A6  3772               	rlcf	??_Port_Set& (0+255),f,b
 14833  0116A8  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14834  0116AA  2EE8               	decfsz	wreg,f,c
 14835  0116AC  D7FB               	goto	u12155
 14836  0116AE  5172               	movf	??_Port_Set& (0+255),w,b
 14837  0116B0  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14838  0116B2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14839  0116B4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14840                           
 14841                           ; BSR set to: 0
 14842                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 14843  0116B6  0E08               	movlw	8
 14844  0116B8  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14845  0116BA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14846  0116BC  0E00               	movlw	0
 14847  0116BE  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14848  0116C0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14849  0116C2  0E06               	movlw	6
 14850  0116C4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14851  0116C6  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14852  0116CA  0100               	movlb	0	; () banked
 14853  0116CC  6F72               	movwf	??_Port_Set& (0+255),b
 14854  0116CE  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14855  0116D0  0E0C               	movlw	12
 14856  0116D2                     u12165:
 14857  0116D2  90D8               	bcf	status,0,c
 14858  0116D4  3772               	rlcf	??_Port_Set& (0+255),f,b
 14859  0116D6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14860  0116D8  2EE8               	decfsz	wreg,f,c
 14861  0116DA  D7FB               	goto	u12165
 14862  0116DC  5172               	movf	??_Port_Set& (0+255),w,b
 14863  0116DE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14864  0116E0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14865  0116E2  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14866                           
 14867                           ; BSR set to: 0
 14868                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 14869  0116E4  0E08               	movlw	8
 14870  0116E6  256F               	addwf	Port_Set@pInput& (0+255),w,b
 14871  0116E8  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14872  0116EA  0E00               	movlw	0
 14873  0116EC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 14874  0116EE  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14875  0116F0  0E07               	movlw	7
 14876  0116F2  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 14877  0116F4  EC18  F0AB         	call	_Word_GetPair	;wreg free
 14878  0116F8  0100               	movlb	0	; () banked
 14879  0116FA  6F72               	movwf	??_Port_Set& (0+255),b
 14880  0116FC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 14881  0116FE  0E0E               	movlw	14
 14882  011700                     u12175:
 14883  011700  90D8               	bcf	status,0,c
 14884  011702  3772               	rlcf	??_Port_Set& (0+255),f,b
 14885  011704  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 14886  011706  2EE8               	decfsz	wreg,f,c
 14887  011708  D7FB               	goto	u12175
 14888  01170A  5172               	movf	??_Port_Set& (0+255),w,b
 14889  01170C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 14890  01170E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 14891  011710  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 14892                           
 14893                           ;Port.c: 584: if (TypeRequired == TypeActual)
 14894  011712  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 14895  011714  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 14896  011716  E144               	bnz	l528
 14897  011718  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 14898  01171A  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 14899  01171C  A4D8               	btfss	status,2,c
 14900  01171E  0012               	return	
 14901  011720  D030               	goto	l526
 14902  011722                     
 14903                           ; BSR set to: 0
 14904                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 14905                           
 14906                           ; BSR set to: 0
 14907  011722  EE20 F002          	lfsr	2,2
 14908  011726  516F               	movf	Port_Set@pInput& (0+255),w,b
 14909  011728  26D9               	addwf	fsr2l,f,c
 14910  01172A  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 14911  01172C  22DA               	addwfc	fsr2h,f,c
 14912  01172E  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 14913  011732  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 14914  011736  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 14915  01173A  EC8D  F0AD         	call	_Byte_SetByte	;wreg free
 14916                           
 14917                           ;Port.c: 594: break;
 14918  01173E  0012               	return	
 14919  011740                     
 14920                           ;Port.c: 597: pValue = ~pValue;
 14921  011740  0100               	movlb	0	; () banked
 14922  011742  1F71               	comf	Port_Set@pValue& (0+255),f,b
 14923                           
 14924                           ; BSR set to: 0
 14925                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 14926  011744  EE20 F002          	lfsr	2,2
 14927  011748  516F               	movf	Port_Set@pInput& (0+255),w,b
 14928  01174A  26D9               	addwf	fsr2l,f,c
 14929  01174C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 14930  01174E  22DA               	addwfc	fsr2h,f,c
 14931  011750  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 14932  011754  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 14933  011758  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 14934  01175C  EC8D  F0AD         	call	_Byte_SetByte	;wreg free
 14935                           
 14936                           ;Port.c: 599: break;
 14937  011760  0012               	return	
 14938  011762                     
 14939                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 14940  011762  0100               	movlb	0	; () banked
 14941  011764  EE20 F004          	lfsr	2,4
 14942  011768  516F               	movf	Port_Set@pInput& (0+255),w,b
 14943  01176A  26D9               	addwf	fsr2l,f,c
 14944  01176C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 14945  01176E  22DA               	addwfc	fsr2h,f,c
 14946  011770  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 14947  011774  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 14948  011778  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 14949  01177C  EC8D  F0AD         	call	_Byte_SetByte	;wreg free
 14950                           
 14951                           ;Port.c: 606: }
 14952                           
 14953                           ;Port.c: 605: break;
 14954                           
 14955                           ;Port.c: 604: default:
 14956                           
 14957                           ;Port.c: 603: break;
 14958  011780  0012               	return	
 14959  011782                     l526:
 14960  011782  0100               	movlb	0	; () banked
 14961  011784  5186               	movf	Port_Set@Type& (0+255),w,b
 14962                           
 14963                           ; Switch size 1, requested type "space"
 14964                           ; Number of cases is 4, Range of values is 0 to 3
 14965                           ; switch strategies available:
 14966                           ; Name         Instructions Cycles
 14967                           ; simple_byte           13     7 (average)
 14968                           ;	Chosen strategy is simple_byte
 14969  011786  0A00               	xorlw	0	; case 0
 14970  011788  B4D8               	btfsc	status,2,c
 14971  01178A  0012               	return	
 14972  01178C  0A01               	xorlw	1	; case 1
 14973  01178E  B4D8               	btfsc	status,2,c
 14974  011790  D7C8               	goto	l529
 14975  011792  0A03               	xorlw	3	; case 2
 14976  011794  B4D8               	btfsc	status,2,c
 14977  011796  D7D4               	goto	l531
 14978  011798  0A01               	xorlw	1	; case 3
 14979  01179A  A4D8               	btfss	status,2,c
 14980                           
 14981                           ; BSR set to: 0
 14982                           
 14983                           ; BSR set to: 0
 14984                           ;Port.c: 607: }
 14985  01179C  0012               	return	
 14986  01179E  D7E1               	goto	l532
 14987  0117A0                     l528:
 14988  0117A0  0012               	return		;funcret
 14989  0117A2                     __end_of_Port_Set:
 14990                           	opt stack 0
 14991                           tosu	equ	0xFFF
 14992                           tosh	equ	0xFFE
 14993                           tosl	equ	0xFFD
 14994                           pclath	equ	0xFFA
 14995                           tblptru	equ	0xFF8
 14996                           tblptrh	equ	0xFF7
 14997                           tblptrl	equ	0xFF6
 14998                           tablat	equ	0xFF5
 14999                           prodh	equ	0xFF4
 15000                           prodl	equ	0xFF3
 15001                           postinc0	equ	0xFEE
 15002                           wreg	equ	0xFE8
 15003                           postdec1	equ	0xFE5
 15004                           fsr1h	equ	0xFE2
 15005                           fsr1l	equ	0xFE1
 15006                           indf2	equ	0xFDF
 15007                           postinc2	equ	0xFDE
 15008                           postdec2	equ	0xFDD
 15009                           fsr2h	equ	0xFDA
 15010                           fsr2l	equ	0xFD9
 15011                           status	equ	0xFD8
 15012                           
 15013 ;; *************** function _Byte_SetByte *****************
 15014 ;; Defined at:
 15015 ;;		line 110 in file "Library/Types.c"
 15016 ;; Parameters:    Size  Location     Type
 15017 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15018 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15019 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15020 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15021 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15022 ;;		 -> NULL(0), 
 15023 ;;  pValue          1    2[BANK0 ] unsigned char 
 15024 ;; Auto vars:     Size  Location     Type
 15025 ;;		None
 15026 ;; Return value:  Size  Location     Type
 15027 ;;                  1    wreg      void 
 15028 ;; Registers used:
 15029 ;;		fsr2l, fsr2h
 15030 ;; Tracked objects:
 15031 ;;		On entry : 0/0
 15032 ;;		On exit  : 0/0
 15033 ;;		Unchanged: 0/0
 15034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15035 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15038 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15039 ;;Total ram usage:        3 bytes
 15040 ;; Hardware stack levels used:    1
 15041 ;; Hardware stack levels required when called:    7
 15042 ;; This function calls:
 15043 ;;		Nothing
 15044 ;; This function is called by:
 15045 ;;		_Port_Set
 15046 ;;		_I2C_Init
 15047 ;; This function uses a non-reentrant model
 15048 ;;
 15049                           
 15050                           	psect	text51
 15051  015B1A                     __ptext51:
 15052                           	opt stack 0
 15053  015B1A                     _Byte_SetByte:
 15054                           	opt stack 20
 15055                           
 15056                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 15057                           
 15058                           ;incstack = 0
 15059  015B1A  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 15060  015B1E  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 15061  015B22  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 15062  015B26  0012               	return		;funcret
 15063  015B28                     __end_of_Byte_SetByte:
 15064                           	opt stack 0
 15065                           tosu	equ	0xFFF
 15066                           tosh	equ	0xFFE
 15067                           tosl	equ	0xFFD
 15068                           pclath	equ	0xFFA
 15069                           tblptru	equ	0xFF8
 15070                           tblptrh	equ	0xFF7
 15071                           tblptrl	equ	0xFF6
 15072                           tablat	equ	0xFF5
 15073                           prodh	equ	0xFF4
 15074                           prodl	equ	0xFF3
 15075                           postinc0	equ	0xFEE
 15076                           wreg	equ	0xFE8
 15077                           postdec1	equ	0xFE5
 15078                           fsr1h	equ	0xFE2
 15079                           fsr1l	equ	0xFE1
 15080                           indf2	equ	0xFDF
 15081                           postinc2	equ	0xFDE
 15082                           postdec2	equ	0xFDD
 15083                           fsr2h	equ	0xFDA
 15084                           fsr2l	equ	0xFD9
 15085                           status	equ	0xFD8
 15086                           
 15087 ;; *************** function _GetPortTRIS *****************
 15088 ;; Defined at:
 15089 ;;		line 67 in file "Library/Port.c"
 15090 ;; Parameters:    Size  Location     Type
 15091 ;;  pInput          1    wreg     enum E6786
 15092 ;; Auto vars:     Size  Location     Type
 15093 ;;  pInput          1    2[BANK0 ] enum E6786
 15094 ;; Return value:  Size  Location     Type
 15095 ;;                  2    0[BANK0 ] PTR struct Byte
 15096 ;; Registers used:
 15097 ;;		wreg, status,2, status,0
 15098 ;; Tracked objects:
 15099 ;;		On entry : 0/0
 15100 ;;		On exit  : 0/0
 15101 ;;		Unchanged: 0/0
 15102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15103 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15106 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15107 ;;Total ram usage:        3 bytes
 15108 ;; Hardware stack levels used:    1
 15109 ;; Hardware stack levels required when called:    7
 15110 ;; This function calls:
 15111 ;;		Nothing
 15112 ;; This function is called by:
 15113 ;;		_Port_Init
 15114 ;; This function uses a non-reentrant model
 15115 ;;
 15116                           
 15117                           	psect	text52
 15118  01438C                     __ptext52:
 15119                           	opt stack 0
 15120  01438C                     _GetPortTRIS:
 15121                           	opt stack 21
 15122                           
 15123                           ;incstack = 0
 15124                           ;GetPortTRIS@pInput stored from wreg
 15125  01438C  0100               	movlb	0	; () banked
 15126  01438E  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 15127                           
 15128                           ;Port.c: 69: switch (pInput)
 15129  014390  D029               	goto	l363
 15130  014392                     
 15131                           ;Port.c: 72: return (BytePtr)&TRISA;
 15132  014392  0E92               	movlw	146
 15133  014394  0100               	movlb	0	; () banked
 15134  014396  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15135  014398  0E0F               	movlw	15
 15136  01439A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15137                           
 15138                           ; BSR set to: 0
 15139  01439C  0012               	return	
 15140  01439E                     
 15141                           ; BSR set to: 0
 15142                           ;Port.c: 74: return (BytePtr)&TRISB;
 15143                           
 15144                           ; BSR set to: 0
 15145  01439E  0E93               	movlw	147
 15146  0143A0  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15147  0143A2  0E0F               	movlw	15
 15148  0143A4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15149                           
 15150                           ; BSR set to: 0
 15151  0143A6  0012               	return	
 15152  0143A8                     
 15153                           ; BSR set to: 0
 15154                           ;Port.c: 76: return (BytePtr)&TRISC;
 15155                           
 15156                           ; BSR set to: 0
 15157  0143A8  0E94               	movlw	148
 15158  0143AA  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15159  0143AC  0E0F               	movlw	15
 15160  0143AE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15161                           
 15162                           ; BSR set to: 0
 15163  0143B0  0012               	return	
 15164  0143B2                     
 15165                           ; BSR set to: 0
 15166                           ;Port.c: 78: return (BytePtr)&TRISD;
 15167                           
 15168                           ; BSR set to: 0
 15169  0143B2  0E95               	movlw	149
 15170  0143B4  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15171  0143B6  0E0F               	movlw	15
 15172  0143B8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15173                           
 15174                           ; BSR set to: 0
 15175  0143BA  0012               	return	
 15176  0143BC                     
 15177                           ; BSR set to: 0
 15178                           ;Port.c: 80: return (BytePtr)&TRISE;
 15179                           
 15180                           ; BSR set to: 0
 15181  0143BC  0E96               	movlw	150
 15182  0143BE  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15183  0143C0  0E0F               	movlw	15
 15184  0143C2  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15185                           
 15186                           ; BSR set to: 0
 15187  0143C4  0012               	return	
 15188  0143C6                     
 15189                           ; BSR set to: 0
 15190                           ;Port.c: 82: return (BytePtr)&TRISF;
 15191                           
 15192                           ; BSR set to: 0
 15193  0143C6  0E97               	movlw	151
 15194  0143C8  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15195  0143CA  0E0F               	movlw	15
 15196  0143CC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15197                           
 15198                           ; BSR set to: 0
 15199  0143CE  0012               	return	
 15200  0143D0                     
 15201                           ; BSR set to: 0
 15202                           ;Port.c: 84: return (BytePtr)&TRISG;
 15203                           
 15204                           ; BSR set to: 0
 15205  0143D0  0E98               	movlw	152
 15206  0143D2  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15207  0143D4  0E0F               	movlw	15
 15208  0143D6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15209                           
 15210                           ; BSR set to: 0
 15211  0143D8  0012               	return	
 15212  0143DA                     
 15213                           ; BSR set to: 0
 15214                           ;Port.c: 86: return (void*)0;
 15215                           
 15216                           ; BSR set to: 0
 15217  0143DA  0E00               	movlw	0
 15218  0143DC  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15219  0143DE  0E00               	movlw	0
 15220  0143E0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15221                           
 15222                           ; BSR set to: 0
 15223                           ;Port.c: 87: }
 15224                           
 15225                           ; BSR set to: 0
 15226  0143E2  0012               	return	
 15227  0143E4                     l363:
 15228                           
 15229                           ; BSR set to: 0
 15230  0143E4  0100               	movlb	0	; () banked
 15231  0143E6  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 15232                           
 15233                           ; Switch size 1, requested type "space"
 15234                           ; Number of cases is 7, Range of values is 0 to 6
 15235                           ; switch strategies available:
 15236                           ; Name         Instructions Cycles
 15237                           ; simple_byte           22    12 (average)
 15238                           ;	Chosen strategy is simple_byte
 15239  0143E8  0A00               	xorlw	0	; case 0
 15240  0143EA  B4D8               	btfsc	status,2,c
 15241  0143EC  D7D2               	goto	l364
 15242  0143EE  0A01               	xorlw	1	; case 1
 15243  0143F0  B4D8               	btfsc	status,2,c
 15244  0143F2  D7D5               	goto	l366
 15245  0143F4  0A03               	xorlw	3	; case 2
 15246  0143F6  B4D8               	btfsc	status,2,c
 15247  0143F8  D7D7               	goto	l367
 15248  0143FA  0A01               	xorlw	1	; case 3
 15249  0143FC  B4D8               	btfsc	status,2,c
 15250  0143FE  D7D9               	goto	l368
 15251  014400  0A07               	xorlw	7	; case 4
 15252  014402  B4D8               	btfsc	status,2,c
 15253  014404  D7DB               	goto	l369
 15254  014406  0A01               	xorlw	1	; case 5
 15255  014408  B4D8               	btfsc	status,2,c
 15256  01440A  D7DD               	goto	l370
 15257  01440C  0A03               	xorlw	3	; case 6
 15258  01440E  B4D8               	btfsc	status,2,c
 15259  014410  D7DF               	goto	l371
 15260  014412  D7E3               	goto	l372
 15261  014414                     __end_of_GetPortTRIS:
 15262                           	opt stack 0
 15263                           tosu	equ	0xFFF
 15264                           tosh	equ	0xFFE
 15265                           tosl	equ	0xFFD
 15266                           pclath	equ	0xFFA
 15267                           tblptru	equ	0xFF8
 15268                           tblptrh	equ	0xFF7
 15269                           tblptrl	equ	0xFF6
 15270                           tablat	equ	0xFF5
 15271                           prodh	equ	0xFF4
 15272                           prodl	equ	0xFF3
 15273                           postinc0	equ	0xFEE
 15274                           wreg	equ	0xFE8
 15275                           postdec1	equ	0xFE5
 15276                           fsr1h	equ	0xFE2
 15277                           fsr1l	equ	0xFE1
 15278                           indf2	equ	0xFDF
 15279                           postinc2	equ	0xFDE
 15280                           postdec2	equ	0xFDD
 15281                           fsr2h	equ	0xFDA
 15282                           fsr2l	equ	0xFD9
 15283                           status	equ	0xFD8
 15284                           
 15285 ;; *************** function _GetPortProperties *****************
 15286 ;; Defined at:
 15287 ;;		line 21 in file "Library/Port.c"
 15288 ;; Parameters:    Size  Location     Type
 15289 ;;  pInput          1    wreg     enum E6786
 15290 ;; Auto vars:     Size  Location     Type
 15291 ;;  pInput          1    2[BANK0 ] enum E6786
 15292 ;; Return value:  Size  Location     Type
 15293 ;;                  2    0[BANK0 ] PTR struct PortProperty
 15294 ;; Registers used:
 15295 ;;		wreg, status,2, status,0
 15296 ;; Tracked objects:
 15297 ;;		On entry : 0/0
 15298 ;;		On exit  : 0/0
 15299 ;;		Unchanged: 0/0
 15300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15301 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15302 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15304 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15305 ;;Total ram usage:        3 bytes
 15306 ;; Hardware stack levels used:    1
 15307 ;; Hardware stack levels required when called:    7
 15308 ;; This function calls:
 15309 ;;		Nothing
 15310 ;; This function is called by:
 15311 ;;		_Port_Init
 15312 ;; This function uses a non-reentrant model
 15313 ;;
 15314                           
 15315                           	psect	text53
 15316  014414                     __ptext53:
 15317                           	opt stack 0
 15318  014414                     _GetPortProperties:
 15319                           	opt stack 21
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;incstack = 0
 15323                           ;GetPortProperties@pInput stored from wreg
 15324  014414  0100               	movlb	0	; () banked
 15325  014416  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 15326                           
 15327                           ;Port.c: 23: switch (pInput)
 15328  014418  D029               	goto	l337
 15329  01441A                     
 15330                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 15331  01441A  0E41               	movlw	low _PortA_Property
 15332  01441C  0100               	movlb	0	; () banked
 15333  01441E  6F60               	movwf	?_GetPortProperties& (0+255),b
 15334  014420  0EFE               	movlw	high _PortA_Property
 15335  014422  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15336                           
 15337                           ; BSR set to: 0
 15338  014424  0012               	return	
 15339  014426                     
 15340                           ; BSR set to: 0
 15341                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 15342                           
 15343                           ; BSR set to: 0
 15344  014426  0E3F               	movlw	low _PortB_Property
 15345  014428  6F60               	movwf	?_GetPortProperties& (0+255),b
 15346  01442A  0EFE               	movlw	high _PortB_Property
 15347  01442C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15348                           
 15349                           ; BSR set to: 0
 15350  01442E  0012               	return	
 15351  014430                     
 15352                           ; BSR set to: 0
 15353                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 15354                           
 15355                           ; BSR set to: 0
 15356  014430  0E3D               	movlw	low _PortC_Property
 15357  014432  6F60               	movwf	?_GetPortProperties& (0+255),b
 15358  014434  0EFE               	movlw	high _PortC_Property
 15359  014436  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15360                           
 15361                           ; BSR set to: 0
 15362  014438  0012               	return	
 15363  01443A                     
 15364                           ; BSR set to: 0
 15365                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 15366                           
 15367                           ; BSR set to: 0
 15368  01443A  0E3B               	movlw	low _PortD_Property
 15369  01443C  6F60               	movwf	?_GetPortProperties& (0+255),b
 15370  01443E  0EFE               	movlw	high _PortD_Property
 15371  014440  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15372                           
 15373                           ; BSR set to: 0
 15374  014442  0012               	return	
 15375  014444                     
 15376                           ; BSR set to: 0
 15377                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 15378                           
 15379                           ; BSR set to: 0
 15380  014444  0E39               	movlw	low _PortE_Property
 15381  014446  6F60               	movwf	?_GetPortProperties& (0+255),b
 15382  014448  0EFE               	movlw	high _PortE_Property
 15383  01444A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15384                           
 15385                           ; BSR set to: 0
 15386  01444C  0012               	return	
 15387  01444E                     
 15388                           ; BSR set to: 0
 15389                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 15390                           
 15391                           ; BSR set to: 0
 15392  01444E  0E37               	movlw	low _PortF_Property
 15393  014450  6F60               	movwf	?_GetPortProperties& (0+255),b
 15394  014452  0EFE               	movlw	high _PortF_Property
 15395  014454  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15396                           
 15397                           ; BSR set to: 0
 15398  014456  0012               	return	
 15399  014458                     
 15400                           ; BSR set to: 0
 15401                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 15402                           
 15403                           ; BSR set to: 0
 15404  014458  0E35               	movlw	low _PortG_Property
 15405  01445A  6F60               	movwf	?_GetPortProperties& (0+255),b
 15406  01445C  0EFE               	movlw	high _PortG_Property
 15407  01445E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15408                           
 15409                           ; BSR set to: 0
 15410  014460  0012               	return	
 15411  014462                     
 15412                           ; BSR set to: 0
 15413                           ;Port.c: 40: return (void*)0;
 15414                           
 15415                           ; BSR set to: 0
 15416  014462  0E00               	movlw	0
 15417  014464  6F60               	movwf	?_GetPortProperties& (0+255),b
 15418  014466  0E00               	movlw	0
 15419  014468  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15420                           
 15421                           ; BSR set to: 0
 15422                           ;Port.c: 41: }
 15423                           
 15424                           ; BSR set to: 0
 15425  01446A  0012               	return	
 15426  01446C                     l337:
 15427                           
 15428                           ; BSR set to: 0
 15429  01446C  0100               	movlb	0	; () banked
 15430  01446E  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 15431                           
 15432                           ; Switch size 1, requested type "space"
 15433                           ; Number of cases is 7, Range of values is 0 to 6
 15434                           ; switch strategies available:
 15435                           ; Name         Instructions Cycles
 15436                           ; simple_byte           22    12 (average)
 15437                           ;	Chosen strategy is simple_byte
 15438  014470  0A00               	xorlw	0	; case 0
 15439  014472  B4D8               	btfsc	status,2,c
 15440  014474  D7D2               	goto	l338
 15441  014476  0A01               	xorlw	1	; case 1
 15442  014478  B4D8               	btfsc	status,2,c
 15443  01447A  D7D5               	goto	l340
 15444  01447C  0A03               	xorlw	3	; case 2
 15445  01447E  B4D8               	btfsc	status,2,c
 15446  014480  D7D7               	goto	l341
 15447  014482  0A01               	xorlw	1	; case 3
 15448  014484  B4D8               	btfsc	status,2,c
 15449  014486  D7D9               	goto	l342
 15450  014488  0A07               	xorlw	7	; case 4
 15451  01448A  B4D8               	btfsc	status,2,c
 15452  01448C  D7DB               	goto	l343
 15453  01448E  0A01               	xorlw	1	; case 5
 15454  014490  B4D8               	btfsc	status,2,c
 15455  014492  D7DD               	goto	l344
 15456  014494  0A03               	xorlw	3	; case 6
 15457  014496  B4D8               	btfsc	status,2,c
 15458  014498  D7DF               	goto	l345
 15459  01449A  D7E3               	goto	l346
 15460  01449C                     __end_of_GetPortProperties:
 15461                           	opt stack 0
 15462                           tosu	equ	0xFFF
 15463                           tosh	equ	0xFFE
 15464                           tosl	equ	0xFFD
 15465                           pclath	equ	0xFFA
 15466                           tblptru	equ	0xFF8
 15467                           tblptrh	equ	0xFF7
 15468                           tblptrl	equ	0xFF6
 15469                           tablat	equ	0xFF5
 15470                           prodh	equ	0xFF4
 15471                           prodl	equ	0xFF3
 15472                           postinc0	equ	0xFEE
 15473                           wreg	equ	0xFE8
 15474                           postdec1	equ	0xFE5
 15475                           fsr1h	equ	0xFE2
 15476                           fsr1l	equ	0xFE1
 15477                           indf2	equ	0xFDF
 15478                           postinc2	equ	0xFDE
 15479                           postdec2	equ	0xFDD
 15480                           fsr2h	equ	0xFDA
 15481                           fsr2l	equ	0xFD9
 15482                           status	equ	0xFD8
 15483                           
 15484 ;; *************** function _GetPortPORT *****************
 15485 ;; Defined at:
 15486 ;;		line 44 in file "Library/Port.c"
 15487 ;; Parameters:    Size  Location     Type
 15488 ;;  pInput          1    wreg     enum E6786
 15489 ;; Auto vars:     Size  Location     Type
 15490 ;;  pInput          1    2[BANK0 ] enum E6786
 15491 ;; Return value:  Size  Location     Type
 15492 ;;                  2    0[BANK0 ] PTR struct Byte
 15493 ;; Registers used:
 15494 ;;		wreg, status,2, status,0
 15495 ;; Tracked objects:
 15496 ;;		On entry : 0/0
 15497 ;;		On exit  : 0/0
 15498 ;;		Unchanged: 0/0
 15499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15500 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15501 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15503 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15504 ;;Total ram usage:        3 bytes
 15505 ;; Hardware stack levels used:    1
 15506 ;; Hardware stack levels required when called:    7
 15507 ;; This function calls:
 15508 ;;		Nothing
 15509 ;; This function is called by:
 15510 ;;		_Port_Init
 15511 ;; This function uses a non-reentrant model
 15512 ;;
 15513                           
 15514                           	psect	text54
 15515  01449C                     __ptext54:
 15516                           	opt stack 0
 15517  01449C                     _GetPortPORT:
 15518                           	opt stack 21
 15519                           
 15520                           ; BSR set to: 0
 15521                           ;incstack = 0
 15522                           ;GetPortPORT@pInput stored from wreg
 15523  01449C  0100               	movlb	0	; () banked
 15524  01449E  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 15525                           
 15526                           ;Port.c: 46: switch (pInput)
 15527  0144A0  D029               	goto	l350
 15528  0144A2                     
 15529                           ;Port.c: 49: return (BytePtr)&PORTA;
 15530  0144A2  0E80               	movlw	128
 15531  0144A4  0100               	movlb	0	; () banked
 15532  0144A6  6F60               	movwf	?_GetPortPORT& (0+255),b
 15533  0144A8  0E0F               	movlw	15
 15534  0144AA  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15535                           
 15536                           ; BSR set to: 0
 15537  0144AC  0012               	return	
 15538  0144AE                     
 15539                           ; BSR set to: 0
 15540                           ;Port.c: 51: return (BytePtr)&PORTB;
 15541                           
 15542                           ; BSR set to: 0
 15543  0144AE  0E81               	movlw	129
 15544  0144B0  6F60               	movwf	?_GetPortPORT& (0+255),b
 15545  0144B2  0E0F               	movlw	15
 15546  0144B4  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15547                           
 15548                           ; BSR set to: 0
 15549  0144B6  0012               	return	
 15550  0144B8                     
 15551                           ; BSR set to: 0
 15552                           ;Port.c: 53: return (BytePtr)&PORTC;
 15553                           
 15554                           ; BSR set to: 0
 15555  0144B8  0E82               	movlw	130
 15556  0144BA  6F60               	movwf	?_GetPortPORT& (0+255),b
 15557  0144BC  0E0F               	movlw	15
 15558  0144BE  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15559                           
 15560                           ; BSR set to: 0
 15561  0144C0  0012               	return	
 15562  0144C2                     
 15563                           ; BSR set to: 0
 15564                           ;Port.c: 55: return (BytePtr)&PORTD;
 15565                           
 15566                           ; BSR set to: 0
 15567  0144C2  0E83               	movlw	131
 15568  0144C4  6F60               	movwf	?_GetPortPORT& (0+255),b
 15569  0144C6  0E0F               	movlw	15
 15570  0144C8  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15571                           
 15572                           ; BSR set to: 0
 15573  0144CA  0012               	return	
 15574  0144CC                     
 15575                           ; BSR set to: 0
 15576                           ;Port.c: 57: return (BytePtr)&PORTE;
 15577                           
 15578                           ; BSR set to: 0
 15579  0144CC  0E84               	movlw	132
 15580  0144CE  6F60               	movwf	?_GetPortPORT& (0+255),b
 15581  0144D0  0E0F               	movlw	15
 15582  0144D2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15583                           
 15584                           ; BSR set to: 0
 15585  0144D4  0012               	return	
 15586  0144D6                     
 15587                           ; BSR set to: 0
 15588                           ;Port.c: 59: return (BytePtr)&PORTF;
 15589                           
 15590                           ; BSR set to: 0
 15591  0144D6  0E85               	movlw	133
 15592  0144D8  6F60               	movwf	?_GetPortPORT& (0+255),b
 15593  0144DA  0E0F               	movlw	15
 15594  0144DC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15595                           
 15596                           ; BSR set to: 0
 15597  0144DE  0012               	return	
 15598  0144E0                     
 15599                           ; BSR set to: 0
 15600                           ;Port.c: 61: return (BytePtr)&PORTG;
 15601                           
 15602                           ; BSR set to: 0
 15603  0144E0  0E86               	movlw	134
 15604  0144E2  6F60               	movwf	?_GetPortPORT& (0+255),b
 15605  0144E4  0E0F               	movlw	15
 15606  0144E6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15607                           
 15608                           ; BSR set to: 0
 15609  0144E8  0012               	return	
 15610  0144EA                     
 15611                           ; BSR set to: 0
 15612                           ;Port.c: 63: return (void*)0;
 15613                           
 15614                           ; BSR set to: 0
 15615  0144EA  0E00               	movlw	0
 15616  0144EC  6F60               	movwf	?_GetPortPORT& (0+255),b
 15617  0144EE  0E00               	movlw	0
 15618  0144F0  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;Port.c: 64: }
 15622                           
 15623                           ; BSR set to: 0
 15624  0144F2  0012               	return	
 15625  0144F4                     l350:
 15626                           
 15627                           ; BSR set to: 0
 15628  0144F4  0100               	movlb	0	; () banked
 15629  0144F6  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 15630                           
 15631                           ; Switch size 1, requested type "space"
 15632                           ; Number of cases is 7, Range of values is 0 to 6
 15633                           ; switch strategies available:
 15634                           ; Name         Instructions Cycles
 15635                           ; simple_byte           22    12 (average)
 15636                           ;	Chosen strategy is simple_byte
 15637  0144F8  0A00               	xorlw	0	; case 0
 15638  0144FA  B4D8               	btfsc	status,2,c
 15639  0144FC  D7D2               	goto	l351
 15640  0144FE  0A01               	xorlw	1	; case 1
 15641  014500  B4D8               	btfsc	status,2,c
 15642  014502  D7D5               	goto	l353
 15643  014504  0A03               	xorlw	3	; case 2
 15644  014506  B4D8               	btfsc	status,2,c
 15645  014508  D7D7               	goto	l354
 15646  01450A  0A01               	xorlw	1	; case 3
 15647  01450C  B4D8               	btfsc	status,2,c
 15648  01450E  D7D9               	goto	l355
 15649  014510  0A07               	xorlw	7	; case 4
 15650  014512  B4D8               	btfsc	status,2,c
 15651  014514  D7DB               	goto	l356
 15652  014516  0A01               	xorlw	1	; case 5
 15653  014518  B4D8               	btfsc	status,2,c
 15654  01451A  D7DD               	goto	l357
 15655  01451C  0A03               	xorlw	3	; case 6
 15656  01451E  B4D8               	btfsc	status,2,c
 15657  014520  D7DF               	goto	l358
 15658  014522  D7E3               	goto	l359
 15659  014524                     __end_of_GetPortPORT:
 15660                           	opt stack 0
 15661                           tosu	equ	0xFFF
 15662                           tosh	equ	0xFFE
 15663                           tosl	equ	0xFFD
 15664                           pclath	equ	0xFFA
 15665                           tblptru	equ	0xFF8
 15666                           tblptrh	equ	0xFF7
 15667                           tblptrl	equ	0xFF6
 15668                           tablat	equ	0xFF5
 15669                           prodh	equ	0xFF4
 15670                           prodl	equ	0xFF3
 15671                           postinc0	equ	0xFEE
 15672                           wreg	equ	0xFE8
 15673                           postdec1	equ	0xFE5
 15674                           fsr1h	equ	0xFE2
 15675                           fsr1l	equ	0xFE1
 15676                           indf2	equ	0xFDF
 15677                           postinc2	equ	0xFDE
 15678                           postdec2	equ	0xFDD
 15679                           fsr2h	equ	0xFDA
 15680                           fsr2l	equ	0xFD9
 15681                           status	equ	0xFD8
 15682                           
 15683 ;; *************** function _LED_Init *****************
 15684 ;; Defined at:
 15685 ;;		line 15 in file "Library/LED.c"
 15686 ;; Parameters:    Size  Location     Type
 15687 ;;  pLED            1    wreg     enum E6739
 15688 ;; Auto vars:     Size  Location     Type
 15689 ;;  pLED            1   45[BANK0 ] enum E6739
 15690 ;; Return value:  Size  Location     Type
 15691 ;;                  1    wreg      void 
 15692 ;; Registers used:
 15693 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15694 ;; Tracked objects:
 15695 ;;		On entry : 0/0
 15696 ;;		On exit  : 0/0
 15697 ;;		Unchanged: 0/0
 15698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15702 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15703 ;;Total ram usage:        1 bytes
 15704 ;; Hardware stack levels used:    1
 15705 ;; Hardware stack levels required when called:   12
 15706 ;; This function calls:
 15707 ;;		_LED_Set
 15708 ;;		_Port_SetPinType
 15709 ;; This function is called by:
 15710 ;;		_MXK_Init
 15711 ;;		_main
 15712 ;; This function uses a non-reentrant model
 15713 ;;
 15714                           
 15715                           	psect	text55
 15716  014EEE                     __ptext55:
 15717                           	opt stack 0
 15718  014EEE                     _LED_Init:
 15719                           	opt stack 17
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;incstack = 0
 15723                           ;LED_Init@pLED stored from wreg
 15724  014EEE  0100               	movlb	0	; () banked
 15725  014EF0  6F8D               	movwf	LED_Init@pLED& (0+255),b
 15726                           
 15727                           ;LED.c: 17: switch (pLED)
 15728  014EF2  D018               	goto	l220
 15729  014EF4                     
 15730                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 15731  014EF4  0E9F               	movlw	low _PortC
 15732  014EF6  0100               	movlb	0	; () banked
 15733  014EF8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15734  014EFA  0E01               	movlw	high _PortC
 15735  014EFC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15736  014EFE  0E00               	movlw	0
 15737  014F00  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15738  014F02  0E03               	movlw	3
 15739  014F04  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15740  014F06  ECF7  F092         	call	_Port_SetPinType	;wreg free
 15741                           
 15742                           ;LED.c: 21: break;
 15743  014F0A  D014               	goto	l222
 15744  014F0C                     
 15745                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 15746  014F0C  0E9F               	movlw	low _PortC
 15747  014F0E  0100               	movlb	0	; () banked
 15748  014F10  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15749  014F12  0E01               	movlw	high _PortC
 15750  014F14  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15751  014F16  0E01               	movlw	1
 15752  014F18  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15753  014F1A  0E03               	movlw	3
 15754  014F1C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15755  014F1E  ECF7  F092         	call	_Port_SetPinType	;wreg free
 15756                           
 15757                           ;LED.c: 25: }
 15758                           
 15759                           ;LED.c: 24: break;
 15760  014F22  D008               	goto	l222
 15761  014F24                     l220:
 15762  014F24  0100               	movlb	0	; () banked
 15763  014F26  518D               	movf	LED_Init@pLED& (0+255),w,b
 15764                           
 15765                           ; Switch size 1, requested type "space"
 15766                           ; Number of cases is 2, Range of values is 0 to 1
 15767                           ; switch strategies available:
 15768                           ; Name         Instructions Cycles
 15769                           ; simple_byte            7     4 (average)
 15770                           ;	Chosen strategy is simple_byte
 15771  014F28  0A00               	xorlw	0	; case 0
 15772  014F2A  B4D8               	btfsc	status,2,c
 15773  014F2C  D7E3               	goto	l221
 15774  014F2E  0A01               	xorlw	1	; case 1
 15775  014F30  B4D8               	btfsc	status,2,c
 15776  014F32  D7EC               	goto	l223
 15777  014F34                     l222:
 15778                           
 15779                           ;LED.c: 26: LED_Set(pLED, 0);
 15780                           
 15781                           ; BSR set to: 0
 15782  014F34  0E00               	movlw	0
 15783  014F36  0100               	movlb	0	; () banked
 15784  014F38  6F74               	movwf	LED_Set@pValue& (0+255),b
 15785  014F3A  518D               	movf	LED_Init@pLED& (0+255),w,b
 15786  014F3C  EC2B  F0A9         	call	_LED_Set
 15787  014F40  0012               	return		;funcret
 15788  014F42                     __end_of_LED_Init:
 15789                           	opt stack 0
 15790                           tosu	equ	0xFFF
 15791                           tosh	equ	0xFFE
 15792                           tosl	equ	0xFFD
 15793                           pclath	equ	0xFFA
 15794                           tblptru	equ	0xFF8
 15795                           tblptrh	equ	0xFF7
 15796                           tblptrl	equ	0xFF6
 15797                           tablat	equ	0xFF5
 15798                           prodh	equ	0xFF4
 15799                           prodl	equ	0xFF3
 15800                           postinc0	equ	0xFEE
 15801                           wreg	equ	0xFE8
 15802                           postdec1	equ	0xFE5
 15803                           fsr1h	equ	0xFE2
 15804                           fsr1l	equ	0xFE1
 15805                           indf2	equ	0xFDF
 15806                           postinc2	equ	0xFDE
 15807                           postdec2	equ	0xFDD
 15808                           fsr2h	equ	0xFDA
 15809                           fsr2l	equ	0xFD9
 15810                           status	equ	0xFD8
 15811                           
 15812 ;; *************** function _LED_Set *****************
 15813 ;; Defined at:
 15814 ;;		line 33 in file "Library/LED.c"
 15815 ;; Parameters:    Size  Location     Type
 15816 ;;  pLED            1    wreg     enum E6739
 15817 ;;  pValue          1   20[BANK0 ] unsigned char 
 15818 ;; Auto vars:     Size  Location     Type
 15819 ;;  pLED            1   21[BANK0 ] enum E6739
 15820 ;; Return value:  Size  Location     Type
 15821 ;;                  1    wreg      void 
 15822 ;; Registers used:
 15823 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15824 ;; Tracked objects:
 15825 ;;		On entry : 0/0
 15826 ;;		On exit  : 0/0
 15827 ;;		Unchanged: 0/0
 15828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15829 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15832 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15833 ;;Total ram usage:        2 bytes
 15834 ;; Hardware stack levels used:    1
 15835 ;; Hardware stack levels required when called:   11
 15836 ;; This function calls:
 15837 ;;		_Port_SetPin
 15838 ;; This function is called by:
 15839 ;;		_LED_Init
 15840 ;;		_SYSTEM_Initialize
 15841 ;; This function uses a non-reentrant model
 15842 ;;
 15843                           
 15844                           	psect	text56
 15845  015256                     __ptext56:
 15846                           	opt stack 0
 15847  015256                     _LED_Set:
 15848                           	opt stack 17
 15849                           
 15850                           ;incstack = 0
 15851                           ;LED_Set@pLED stored from wreg
 15852  015256  0100               	movlb	0	; () banked
 15853  015258  6F75               	movwf	LED_Set@pLED& (0+255),b
 15854                           
 15855                           ;LED.c: 35: switch (pLED)
 15856  01525A  D018               	goto	l227
 15857  01525C                     
 15858                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 15859  01525C  0E9F               	movlw	low _PortC
 15860  01525E  0100               	movlb	0	; () banked
 15861  015260  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15862  015262  0E01               	movlw	high _PortC
 15863  015264  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15864  015266  0E00               	movlw	0
 15865  015268  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15866  01526A  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 15867  01526E  EC5D  F09E         	call	_Port_SetPin	;wreg free
 15868                           
 15869                           ;LED.c: 39: break;
 15870  015272  0012               	return	
 15871  015274                     
 15872                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 15873  015274  0E9F               	movlw	low _PortC
 15874  015276  0100               	movlb	0	; () banked
 15875  015278  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15876  01527A  0E01               	movlw	high _PortC
 15877  01527C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15878  01527E  0E01               	movlw	1
 15879  015280  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15880  015282  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 15881  015286  EC5D  F09E         	call	_Port_SetPin	;wreg free
 15882                           
 15883                           ;LED.c: 43: }
 15884                           
 15885                           ;LED.c: 42: break;
 15886  01528A  0012               	return	
 15887  01528C                     l227:
 15888  01528C  0100               	movlb	0	; () banked
 15889  01528E  5175               	movf	LED_Set@pLED& (0+255),w,b
 15890                           
 15891                           ; Switch size 1, requested type "space"
 15892                           ; Number of cases is 2, Range of values is 0 to 1
 15893                           ; switch strategies available:
 15894                           ; Name         Instructions Cycles
 15895                           ; simple_byte            7     4 (average)
 15896                           ;	Chosen strategy is simple_byte
 15897  015290  0A00               	xorlw	0	; case 0
 15898  015292  B4D8               	btfsc	status,2,c
 15899  015294  D7E3               	goto	l228
 15900  015296  0A01               	xorlw	1	; case 1
 15901  015298  A4D8               	btfss	status,2,c
 15902  01529A  0012               	return	
 15903  01529C  D7EB               	goto	l230
 15904  01529E                     __end_of_LED_Set:
 15905                           	opt stack 0
 15906                           tosu	equ	0xFFF
 15907                           tosh	equ	0xFFE
 15908                           tosl	equ	0xFFD
 15909                           pclath	equ	0xFFA
 15910                           tblptru	equ	0xFF8
 15911                           tblptrh	equ	0xFF7
 15912                           tblptrl	equ	0xFF6
 15913                           tablat	equ	0xFF5
 15914                           prodh	equ	0xFF4
 15915                           prodl	equ	0xFF3
 15916                           postinc0	equ	0xFEE
 15917                           wreg	equ	0xFE8
 15918                           postdec1	equ	0xFE5
 15919                           fsr1h	equ	0xFE2
 15920                           fsr1l	equ	0xFE1
 15921                           indf2	equ	0xFDF
 15922                           postinc2	equ	0xFDE
 15923                           postdec2	equ	0xFDD
 15924                           fsr2h	equ	0xFDA
 15925                           fsr2l	equ	0xFD9
 15926                           status	equ	0xFD8
 15927                           
 15928 ;; *************** function _MXK_Dequeue *****************
 15929 ;; Defined at:
 15930 ;;		line 153 in file "Library/MXK.c"
 15931 ;; Parameters:    Size  Location     Type
 15932 ;;		None
 15933 ;; Auto vars:     Size  Location     Type
 15934 ;;		None
 15935 ;; Return value:  Size  Location     Type
 15936 ;;                  1    wreg      void 
 15937 ;; Registers used:
 15938 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15939 ;; Tracked objects:
 15940 ;;		On entry : 0/0
 15941 ;;		On exit  : 0/0
 15942 ;;		Unchanged: 0/0
 15943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15948 ;;Total ram usage:        0 bytes
 15949 ;; Hardware stack levels used:    1
 15950 ;; Hardware stack levels required when called:   12
 15951 ;; This function calls:
 15952 ;;		Absolute function
 15953 ;;		_Motor_Step
 15954 ;; This function is called by:
 15955 ;;		_main
 15956 ;; This function uses a non-reentrant model
 15957 ;;
 15958                           
 15959                           	psect	text57
 15960  0156C2                     __ptext57:
 15961                           	opt stack 0
 15962  0156C2                     _MXK_Dequeue:
 15963                           	opt stack 18
 15964                           
 15965                           ;MXK.c: 155: if (lQueue)
 15966                           
 15967                           ;incstack = 0
 15968  0156C2  5029               	movf	_lQueue,w,c	;volatile
 15969  0156C4  102A               	iorwf	_lQueue+1,w,c	;volatile
 15970  0156C6  102B               	iorwf	_lQueue+2,w,c	;volatile
 15971  0156C8  B4D8               	btfsc	status,2,c
 15972  0156CA  D00C               	goto	u14619
 15973                           
 15974                           ;MXK.c: 156: lQueue();
 15975  0156CC  D801               	call	u14618
 15976  0156CE  D00A               	goto	u14619
 15977  0156D0                     u14618:
 15978  0156D0  0005               	push	
 15979  0156D2  6EFA               	movwf	pclath,c
 15980  0156D4  5029               	movf	_lQueue,w,c	;volatile
 15981  0156D6  6EFD               	movwf	tosl,c
 15982  0156D8  502A               	movf	_lQueue+1,w,c	;volatile
 15983  0156DA  6EFE               	movwf	tosh,c
 15984  0156DC  502B               	movf	_lQueue+2,w,c	;volatile
 15985  0156DE  6EFF               	movwf	tosu,c
 15986  0156E0  50FA               	movf	pclath,w,c
 15987  0156E2  0012               	return		;indir
 15988  0156E4                     u14619:
 15989                           
 15990                           ;MXK.c: 157: lQueue = 0;
 15991  0156E4  0E00               	movlw	0
 15992  0156E6  6E29               	movwf	_lQueue,c	;volatile
 15993  0156E8  0E00               	movlw	0
 15994  0156EA  6E2A               	movwf	_lQueue+1,c	;volatile
 15995  0156EC  0E00               	movlw	0
 15996  0156EE  6E2B               	movwf	_lQueue+2,c	;volatile
 15997  0156F0  0012               	return		;funcret
 15998  0156F2                     __end_of_MXK_Dequeue:
 15999                           	opt stack 0
 16000                           tosu	equ	0xFFF
 16001                           tosh	equ	0xFFE
 16002                           tosl	equ	0xFFD
 16003                           pclath	equ	0xFFA
 16004                           tblptru	equ	0xFF8
 16005                           tblptrh	equ	0xFF7
 16006                           tblptrl	equ	0xFF6
 16007                           tablat	equ	0xFF5
 16008                           prodh	equ	0xFF4
 16009                           prodl	equ	0xFF3
 16010                           postinc0	equ	0xFEE
 16011                           wreg	equ	0xFE8
 16012                           postdec1	equ	0xFE5
 16013                           fsr1h	equ	0xFE2
 16014                           fsr1l	equ	0xFE1
 16015                           indf2	equ	0xFDF
 16016                           postinc2	equ	0xFDE
 16017                           postdec2	equ	0xFDD
 16018                           fsr2h	equ	0xFDA
 16019                           fsr2l	equ	0xFD9
 16020                           status	equ	0xFD8
 16021                           
 16022 ;; *************** function _Motor_Step *****************
 16023 ;; Defined at:
 16024 ;;		line 75 in file "Library/Motor.c"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;		None
 16027 ;; Auto vars:     Size  Location     Type
 16028 ;;		None
 16029 ;; Return value:  Size  Location     Type
 16030 ;;                  1    wreg      void 
 16031 ;; Registers used:
 16032 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16033 ;; Tracked objects:
 16034 ;;		On entry : 0/0
 16035 ;;		On exit  : 0/0
 16036 ;;		Unchanged: 0/0
 16037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16040 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16042 ;;Total ram usage:        2 bytes
 16043 ;; Hardware stack levels used:    1
 16044 ;; Hardware stack levels required when called:   11
 16045 ;; This function calls:
 16046 ;;		_MXK_Queue
 16047 ;;		_MXK_Release
 16048 ;;		_MXK_SwitchTo
 16049 ;;		_Port_SetPin
 16050 ;;		_Timer0_Restart
 16051 ;;		_Timer0_Stop
 16052 ;; This function is called by:
 16053 ;;		_Motor_Init
 16054 ;;		_Timer0_ISR
 16055 ;;		_MXK_Dequeue
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           	psect	text58
 16060  01372C                     __ptext58:
 16061                           	opt stack 0
 16062  01372C                     _Motor_Step:
 16063                           	opt stack 0
 16064                           
 16065                           ;Skip over the trampoline to the duplicate function for level 2
 16066  01372C  B251               	btfsc	btemp,1,c
 16067  01372E  EF9D  F09C         	goto	i2_Motor_Step
 16068  013732                     _Motor_Step$intlevel0:
 16069                           	opt stack 18
 16070                           
 16071                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 16072                           
 16073                           ;incstack = 0
 16074  013732  0100               	movlb	0	; () banked
 16075  013734  EE20 F004          	lfsr	2,4
 16076  013738  51FD               	movf	_lMotor& (0+255),w,b
 16077  01373A  26D9               	addwf	fsr2l,f,c
 16078  01373C  51FE               	movf	(_lMotor+1)& (0+255),w,b
 16079  01373E  22DA               	addwfc	fsr2h,f,c
 16080  013740  50DF               	movf	indf2,w,c
 16081  013742  EC55  F0AA         	call	_MXK_SwitchTo
 16082  013746  0900               	iorlw	0
 16083  013748  B4D8               	btfsc	status,2,c
 16084  01374A  D06E               	goto	l1627
 16085                           
 16086                           ;Motor.c: 78: {
 16087                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 16088  01374C  C0FD  FFD9         	movff	_lMotor,fsr2l
 16089  013750  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16090  013754  50DE               	movf	postinc2,w,c
 16091  013756  10DE               	iorwf	postinc2,w,c
 16092  013758  B4D8               	btfsc	status,2,c
 16093  01375A  D061               	goto	l1628
 16094                           
 16095                           ;Motor.c: 80: {
 16096                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 16097  01375C  C0FD  FFD9         	movff	_lMotor,fsr2l
 16098  013760  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16099  013764  0E01               	movlw	1
 16100  013766  BEDB               	btfsc	plusw2,7,c
 16101  013768  D023               	goto	l1629
 16102  01376A  0E01               	movlw	1
 16103  01376C  50DB               	movf	plusw2,w,c
 16104  01376E  E103               	bnz	u12670
 16105  013770  04DE               	decf	postinc2,w,c
 16106  013772  A0D8               	btfss	status,0,c
 16107  013774  D01D               	goto	l1629
 16108  013776                     u12670:
 16109                           
 16110                           ;Motor.c: 83: {
 16111                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 16112  013776  C0FD  FFD9         	movff	_lMotor,fsr2l
 16113  01377A  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16114  01377E  28DE               	incf	postinc2,w,c
 16115  013780  E104               	bnz	u12680
 16116  013782  0E7F               	movlw	127
 16117  013784  18DE               	xorwf	postinc2,w,c
 16118  013786  B4D8               	btfsc	status,2,c
 16119  013788  D007               	goto	l1630
 16120  01378A                     u12680:
 16121                           
 16122                           ;Motor.c: 85: lMotor->mDelta --;
 16123  01378A  C0FD  FFD9         	movff	_lMotor,fsr2l
 16124  01378E  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16125  013792  06DE               	decf	postinc2,f,c
 16126  013794  0E00               	movlw	0
 16127  013796  5ADD               	subwfb	postdec2,f,c
 16128  013798                     l1630:
 16129                           
 16130                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 16131  013798  0E81               	movlw	low _PortE
 16132  01379A  0100               	movlb	0	; () banked
 16133  01379C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16134  01379E  0E01               	movlw	high _PortE
 16135  0137A0  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16136  0137A2  0E00               	movlw	0
 16137  0137A4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16138  0137A6  0E01               	movlw	1
 16139  0137A8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16140  0137AA  EC5D  F09E         	call	_Port_SetPin	;wreg free
 16141                           
 16142                           ;Motor.c: 88: }
 16143  0137AE  D01C               	goto	l1631
 16144  0137B0                     l1629:
 16145                           
 16146                           ;Motor.c: 89: else
 16147                           ;Motor.c: 90: {
 16148                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 16149  0137B0  C0FD  FFD9         	movff	_lMotor,fsr2l
 16150  0137B4  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16151  0137B8  04DE               	decf	postinc2,w,c
 16152  0137BA  E104               	bnz	u12690
 16153  0137BC  0E80               	movlw	128
 16154  0137BE  18DE               	xorwf	postinc2,w,c
 16155  0137C0  B4D8               	btfsc	status,2,c
 16156  0137C2  D007               	goto	l1632
 16157  0137C4                     u12690:
 16158                           
 16159                           ;Motor.c: 92: lMotor->mDelta ++;
 16160  0137C4  C0FD  FFD9         	movff	_lMotor,fsr2l
 16161  0137C8  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 16162  0137CC  2ADE               	incf	postinc2,f,c
 16163  0137CE  0E00               	movlw	0
 16164  0137D0  22DD               	addwfc	postdec2,f,c
 16165  0137D2                     l1632:
 16166                           
 16167                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 16168  0137D2  0E81               	movlw	low _PortE
 16169  0137D4  0100               	movlb	0	; () banked
 16170  0137D6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16171  0137D8  0E01               	movlw	high _PortE
 16172  0137DA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16173  0137DC  0E00               	movlw	0
 16174  0137DE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16175  0137E0  0E00               	movlw	0
 16176  0137E2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16177  0137E4  EC5D  F09E         	call	_Port_SetPin	;wreg free
 16178  0137E8                     l1631:
 16179                           
 16180                           ;Motor.c: 95: }
 16181                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 16182  0137E8  0E81               	movlw	low _PortE
 16183  0137EA  0100               	movlb	0	; () banked
 16184  0137EC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16185  0137EE  0E01               	movlw	high _PortE
 16186  0137F0  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16187  0137F2  0E01               	movlw	1
 16188  0137F4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16189  0137F6  0E01               	movlw	1
 16190  0137F8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16191  0137FA  EC5D  F09E         	call	_Port_SetPin	;wreg free
 16192                           
 16193                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 16194  0137FE  0E81               	movlw	low _PortE
 16195  013800  0100               	movlb	0	; () banked
 16196  013802  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16197  013804  0E01               	movlw	high _PortE
 16198  013806  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16199  013808  0E01               	movlw	1
 16200  01380A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16201  01380C  0E00               	movlw	0
 16202  01380E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16203  013810  EC5D  F09E         	call	_Port_SetPin	;wreg free
 16204                           
 16205                           ;Motor.c: 101: MXK_Release();
 16206  013814  EC25  F0AD         	call	_MXK_Release	;wreg free
 16207                           
 16208                           ;Motor.c: 102: Timer0_Restart();
 16209  013818  ECA2  F0AD         	call	_Timer0_Restart	;wreg free
 16210                           
 16211                           ;Motor.c: 103: return;
 16212  01381C  0012               	return	
 16213  01381E                     l1628:
 16214                           
 16215                           ;Motor.c: 104: }
 16216                           ;Motor.c: 105: MXK_Release();
 16217  01381E  EC25  F0AD         	call	_MXK_Release	;wreg free
 16218                           
 16219                           ;Motor.c: 106: Timer0_Stop();
 16220  013822  ECC5  F0AD         	call	_Timer0_Stop	;wreg free
 16221                           
 16222                           ;Motor.c: 107: return;
 16223  013826  0012               	return	
 16224  013828                     l1627:
 16225                           
 16226                           ;Motor.c: 108: }
 16227                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 16228  013828  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 16229  01382C  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 16230  013830  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 16231  013834  EC94  F0AD         	call	_MXK_Queue	;wreg free
 16232  013838  0012               	return		;funcret
 16233  01383A                     __end_of_Motor_Step:
 16234                           	opt stack 0
 16235                           tosu	equ	0xFFF
 16236                           tosh	equ	0xFFE
 16237                           tosl	equ	0xFFD
 16238                           pclath	equ	0xFFA
 16239                           tblptru	equ	0xFF8
 16240                           tblptrh	equ	0xFF7
 16241                           tblptrl	equ	0xFF6
 16242                           tablat	equ	0xFF5
 16243                           prodh	equ	0xFF4
 16244                           prodl	equ	0xFF3
 16245                           postinc0	equ	0xFEE
 16246                           wreg	equ	0xFE8
 16247                           postdec1	equ	0xFE5
 16248                           fsr1h	equ	0xFE2
 16249                           fsr1l	equ	0xFE1
 16250                           indf2	equ	0xFDF
 16251                           postinc2	equ	0xFDE
 16252                           postdec2	equ	0xFDD
 16253                           plusw2	equ	0xFDB
 16254                           fsr2h	equ	0xFDA
 16255                           fsr2l	equ	0xFD9
 16256                           status	equ	0xFD8
 16257                           
 16258 ;; *************** function _Timer0_Stop *****************
 16259 ;; Defined at:
 16260 ;;		line 89 in file "Library/Timer0.c"
 16261 ;; Parameters:    Size  Location     Type
 16262 ;;		None
 16263 ;; Auto vars:     Size  Location     Type
 16264 ;;		None
 16265 ;; Return value:  Size  Location     Type
 16266 ;;                  1    wreg      void 
 16267 ;; Registers used:
 16268 ;;		None
 16269 ;; Tracked objects:
 16270 ;;		On entry : 0/0
 16271 ;;		On exit  : 0/0
 16272 ;;		Unchanged: 0/0
 16273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16278 ;;Total ram usage:        0 bytes
 16279 ;; Hardware stack levels used:    1
 16280 ;; Hardware stack levels required when called:    7
 16281 ;; This function calls:
 16282 ;;		Nothing
 16283 ;; This function is called by:
 16284 ;;		_Motor_Step
 16285 ;; This function uses a non-reentrant model
 16286 ;;
 16287                           
 16288                           	psect	text59
 16289  015B8A                     __ptext59:
 16290                           	opt stack 0
 16291  015B8A                     _Timer0_Stop:
 16292                           	opt stack 21
 16293                           
 16294                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 16295                           
 16296                           ;incstack = 0
 16297  015B8A  9AF2               	bcf	intcon,5,c	;volatile
 16298                           
 16299                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 16300  015B8C  94F2               	bcf	intcon,2,c	;volatile
 16301  015B8E  0012               	return		;funcret
 16302  015B90                     __end_of_Timer0_Stop:
 16303                           	opt stack 0
 16304                           tosu	equ	0xFFF
 16305                           tosh	equ	0xFFE
 16306                           tosl	equ	0xFFD
 16307                           pclath	equ	0xFFA
 16308                           tblptru	equ	0xFF8
 16309                           tblptrh	equ	0xFF7
 16310                           tblptrl	equ	0xFF6
 16311                           tablat	equ	0xFF5
 16312                           prodh	equ	0xFF4
 16313                           prodl	equ	0xFF3
 16314                           intcon	equ	0xFF2
 16315                           postinc0	equ	0xFEE
 16316                           wreg	equ	0xFE8
 16317                           postdec1	equ	0xFE5
 16318                           fsr1h	equ	0xFE2
 16319                           fsr1l	equ	0xFE1
 16320                           indf2	equ	0xFDF
 16321                           postinc2	equ	0xFDE
 16322                           postdec2	equ	0xFDD
 16323                           plusw2	equ	0xFDB
 16324                           fsr2h	equ	0xFDA
 16325                           fsr2l	equ	0xFD9
 16326                           status	equ	0xFD8
 16327                           
 16328 ;; *************** function _Timer0_Restart *****************
 16329 ;; Defined at:
 16330 ;;		line 83 in file "Library/Timer0.c"
 16331 ;; Parameters:    Size  Location     Type
 16332 ;;		None
 16333 ;; Auto vars:     Size  Location     Type
 16334 ;;		None
 16335 ;; Return value:  Size  Location     Type
 16336 ;;                  1    wreg      void 
 16337 ;; Registers used:
 16338 ;;		None
 16339 ;; Tracked objects:
 16340 ;;		On entry : 0/0
 16341 ;;		On exit  : 0/0
 16342 ;;		Unchanged: 0/0
 16343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16348 ;;Total ram usage:        0 bytes
 16349 ;; Hardware stack levels used:    1
 16350 ;; Hardware stack levels required when called:    7
 16351 ;; This function calls:
 16352 ;;		Nothing
 16353 ;; This function is called by:
 16354 ;;		_Motor_Step
 16355 ;; This function uses a non-reentrant model
 16356 ;;
 16357                           
 16358                           	psect	text60
 16359  015B44                     __ptext60:
 16360                           	opt stack 0
 16361  015B44                     _Timer0_Restart:
 16362                           	opt stack 21
 16363                           
 16364                           ;Timer0.c: 85: TMR0 = COUNTER;
 16365                           
 16366                           ;incstack = 0
 16367  015B44  C038  FFD6         	movff	_COUNTER,4054	;volatile
 16368  015B48  C039  FFD7         	movff	_COUNTER+1,4055	;volatile
 16369                           
 16370                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 16371  015B4C  8AF2               	bsf	intcon,5,c	;volatile
 16372  015B4E  0012               	return		;funcret
 16373  015B50                     __end_of_Timer0_Restart:
 16374                           	opt stack 0
 16375                           tosu	equ	0xFFF
 16376                           tosh	equ	0xFFE
 16377                           tosl	equ	0xFFD
 16378                           pclath	equ	0xFFA
 16379                           tblptru	equ	0xFF8
 16380                           tblptrh	equ	0xFF7
 16381                           tblptrl	equ	0xFF6
 16382                           tablat	equ	0xFF5
 16383                           prodh	equ	0xFF4
 16384                           prodl	equ	0xFF3
 16385                           intcon	equ	0xFF2
 16386                           postinc0	equ	0xFEE
 16387                           wreg	equ	0xFE8
 16388                           postdec1	equ	0xFE5
 16389                           fsr1h	equ	0xFE2
 16390                           fsr1l	equ	0xFE1
 16391                           indf2	equ	0xFDF
 16392                           postinc2	equ	0xFDE
 16393                           postdec2	equ	0xFDD
 16394                           plusw2	equ	0xFDB
 16395                           fsr2h	equ	0xFDA
 16396                           fsr2l	equ	0xFD9
 16397                           status	equ	0xFD8
 16398                           
 16399 ;; *************** function _MXK_SwitchTo *****************
 16400 ;; Defined at:
 16401 ;;		line 105 in file "Library/MXK.c"
 16402 ;; Parameters:    Size  Location     Type
 16403 ;;  pModule         1    wreg     enum E6927
 16404 ;; Auto vars:     Size  Location     Type
 16405 ;;  pModule         1    7[BANK0 ] enum E6927
 16406 ;;  CUR             1    6[BANK0 ] unsigned char 
 16407 ;; Return value:  Size  Location     Type
 16408 ;;                  1    wreg      unsigned char 
 16409 ;; Registers used:
 16410 ;;		wreg, status,2, status,0, cstack
 16411 ;; Tracked objects:
 16412 ;;		On entry : 0/0
 16413 ;;		On exit  : 0/0
 16414 ;;		Unchanged: 0/0
 16415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16417 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16419 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16420 ;;Total ram usage:        2 bytes
 16421 ;; Hardware stack levels used:    1
 16422 ;; Hardware stack levels required when called:    8
 16423 ;; This function calls:
 16424 ;;		_delay_us
 16425 ;; This function is called by:
 16426 ;;		_Motor_Step
 16427 ;; This function uses a non-reentrant model
 16428 ;;
 16429                           
 16430                           	psect	text61
 16431  0154AA                     __ptext61:
 16432                           	opt stack 0
 16433  0154AA                     _MXK_SwitchTo:
 16434                           	opt stack 20
 16435                           
 16436                           ;incstack = 0
 16437                           ;MXK_SwitchTo@pModule stored from wreg
 16438  0154AA  0100               	movlb	0	; () banked
 16439  0154AC  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 16440                           
 16441                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 16442  0154AE  5086               	movf	3974,w,c	;volatile
 16443  0154B0  0B0F               	andlw	15
 16444  0154B2  0100               	movlb	0	; () banked
 16445  0154B4  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 16446                           
 16447                           ; BSR set to: 0
 16448                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 16449  0154B6  504D               	movf	_Bus_State,w,c
 16450  0154B8  A4D8               	btfss	status,2,c
 16451  0154BA  D002               	goto	l1730
 16452                           
 16453                           ; BSR set to: 0
 16454                           ;MXK.c: 110: return 0;
 16455  0154BC  0E00               	movlw	0
 16456                           
 16457                           ; BSR set to: 0
 16458  0154BE  0012               	return	
 16459  0154C0                     l1730:
 16460                           
 16461                           ; BSR set to: 0
 16462                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 16463                           
 16464                           ; BSR set to: 0
 16465  0154C0  0E00               	movlw	0
 16466  0154C2  6E4D               	movwf	_Bus_State,c
 16467                           
 16468                           ; BSR set to: 0
 16469                           ;MXK.c: 114: if (CUR != pModule)
 16470  0154C4  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 16471  0154C6  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 16472  0154C8  B4D8               	btfsc	status,2,c
 16473  0154CA  D00A               	goto	l1732
 16474                           
 16475                           ; BSR set to: 0
 16476                           ;MXK.c: 115: {
 16477                           ;MXK.c: 116: PORTG &= ~(0xF);
 16478  0154CC  0EF0               	movlw	240
 16479  0154CE  1686               	andwf	3974,f,c	;volatile
 16480                           
 16481                           ;MXK.c: 117: PORTG |= pModule;
 16482  0154D0  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 16483  0154D2  1286               	iorwf	3974,f,c	;volatile
 16484                           
 16485                           ; BSR set to: 0
 16486                           ;MXK.c: 120: delay_us(10);
 16487  0154D4  0E00               	movlw	0
 16488  0154D6  6F61               	movwf	(delay_us@us+1)& (0+255),b
 16489  0154D8  0E0A               	movlw	10
 16490  0154DA  6F60               	movwf	delay_us@us& (0+255),b
 16491  0154DC  EC73  F0A9         	call	_delay_us	;wreg free
 16492  0154E0                     l1732:
 16493                           
 16494                           ;MXK.c: 121: }
 16495                           ;MXK.c: 122: return 1;
 16496  0154E0  0E01               	movlw	1
 16497  0154E2  0012               	return	
 16498  0154E4                     __end_of_MXK_SwitchTo:
 16499                           	opt stack 0
 16500                           tosu	equ	0xFFF
 16501                           tosh	equ	0xFFE
 16502                           tosl	equ	0xFFD
 16503                           pclath	equ	0xFFA
 16504                           tblptru	equ	0xFF8
 16505                           tblptrh	equ	0xFF7
 16506                           tblptrl	equ	0xFF6
 16507                           tablat	equ	0xFF5
 16508                           prodh	equ	0xFF4
 16509                           prodl	equ	0xFF3
 16510                           intcon	equ	0xFF2
 16511                           postinc0	equ	0xFEE
 16512                           wreg	equ	0xFE8
 16513                           postdec1	equ	0xFE5
 16514                           fsr1h	equ	0xFE2
 16515                           fsr1l	equ	0xFE1
 16516                           indf2	equ	0xFDF
 16517                           postinc2	equ	0xFDE
 16518                           postdec2	equ	0xFDD
 16519                           plusw2	equ	0xFDB
 16520                           fsr2h	equ	0xFDA
 16521                           fsr2l	equ	0xFD9
 16522                           status	equ	0xFD8
 16523                           
 16524 ;; *************** function _MXK_Release *****************
 16525 ;; Defined at:
 16526 ;;		line 130 in file "Library/MXK.c"
 16527 ;; Parameters:    Size  Location     Type
 16528 ;;		None
 16529 ;; Auto vars:     Size  Location     Type
 16530 ;;		None
 16531 ;; Return value:  Size  Location     Type
 16532 ;;                  1    wreg      unsigned char 
 16533 ;; Registers used:
 16534 ;;		wreg, status,2, status,0
 16535 ;; Tracked objects:
 16536 ;;		On entry : 0/0
 16537 ;;		On exit  : 0/0
 16538 ;;		Unchanged: 0/0
 16539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16544 ;;Total ram usage:        0 bytes
 16545 ;; Hardware stack levels used:    1
 16546 ;; Hardware stack levels required when called:    7
 16547 ;; This function calls:
 16548 ;;		Nothing
 16549 ;; This function is called by:
 16550 ;;		_Motor_Step
 16551 ;;		_main
 16552 ;; This function uses a non-reentrant model
 16553 ;;
 16554                           
 16555                           	psect	text62
 16556  015A4A                     __ptext62:
 16557                           	opt stack 0
 16558  015A4A                     _MXK_Release:
 16559                           	opt stack 23
 16560                           
 16561                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 16562                           
 16563                           ;incstack = 0
 16564  015A4A  0E01               	movlw	1
 16565  015A4C  6E4D               	movwf	_Bus_State,c
 16566                           
 16567                           ;MXK.c: 134: if (lQueue != 0)
 16568  015A4E  5029               	movf	_lQueue,w,c	;volatile
 16569  015A50  102A               	iorwf	_lQueue+1,w,c	;volatile
 16570  015A52  102B               	iorwf	_lQueue+2,w,c	;volatile
 16571  015A54  B4D8               	btfsc	status,2,c
 16572  015A56  D002               	goto	l1735
 16573                           
 16574                           ;MXK.c: 135: return 1;
 16575  015A58  0E01               	movlw	1
 16576  015A5A  0012               	return	
 16577  015A5C                     l1735:
 16578                           
 16579                           ;MXK.c: 137: return 0;
 16580  015A5C  0E00               	movlw	0
 16581  015A5E  0012               	return	
 16582  015A60                     __end_of_MXK_Release:
 16583                           	opt stack 0
 16584                           tosu	equ	0xFFF
 16585                           tosh	equ	0xFFE
 16586                           tosl	equ	0xFFD
 16587                           pclath	equ	0xFFA
 16588                           tblptru	equ	0xFF8
 16589                           tblptrh	equ	0xFF7
 16590                           tblptrl	equ	0xFF6
 16591                           tablat	equ	0xFF5
 16592                           prodh	equ	0xFF4
 16593                           prodl	equ	0xFF3
 16594                           intcon	equ	0xFF2
 16595                           postinc0	equ	0xFEE
 16596                           wreg	equ	0xFE8
 16597                           postdec1	equ	0xFE5
 16598                           fsr1h	equ	0xFE2
 16599                           fsr1l	equ	0xFE1
 16600                           indf2	equ	0xFDF
 16601                           postinc2	equ	0xFDE
 16602                           postdec2	equ	0xFDD
 16603                           plusw2	equ	0xFDB
 16604                           fsr2h	equ	0xFDA
 16605                           fsr2l	equ	0xFD9
 16606                           status	equ	0xFD8
 16607                           
 16608 ;; *************** function _MXK_Queue *****************
 16609 ;; Defined at:
 16610 ;;		line 144 in file "Library/MXK.c"
 16611 ;; Parameters:    Size  Location     Type
 16612 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 16613 ;;		 -> Absolute function(1), Motor_Step(1), 
 16614 ;; Auto vars:     Size  Location     Type
 16615 ;;		None
 16616 ;; Return value:  Size  Location     Type
 16617 ;;                  1    wreg      void 
 16618 ;; Registers used:
 16619 ;;		wreg, status,2, status,0
 16620 ;; Tracked objects:
 16621 ;;		On entry : 0/0
 16622 ;;		On exit  : 0/0
 16623 ;;		Unchanged: 0/0
 16624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16625 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16628 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16629 ;;Total ram usage:        3 bytes
 16630 ;; Hardware stack levels used:    1
 16631 ;; Hardware stack levels required when called:    7
 16632 ;; This function calls:
 16633 ;;		Nothing
 16634 ;; This function is called by:
 16635 ;;		_Motor_Step
 16636 ;; This function uses a non-reentrant model
 16637 ;;
 16638                           
 16639                           	psect	text63
 16640  015B28                     __ptext63:
 16641                           	opt stack 0
 16642  015B28                     _MXK_Queue:
 16643                           	opt stack 21
 16644                           
 16645                           ;MXK.c: 146: lQueue = pCallback;
 16646                           
 16647                           ;incstack = 0
 16648  015B28  C060  F029         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 16649  015B2C  C061  F02A         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 16650  015B30  C062  F02B         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 16651  015B34  0012               	return		;funcret
 16652  015B36                     __end_of_MXK_Queue:
 16653                           	opt stack 0
 16654                           tosu	equ	0xFFF
 16655                           tosh	equ	0xFFE
 16656                           tosl	equ	0xFFD
 16657                           pclath	equ	0xFFA
 16658                           tblptru	equ	0xFF8
 16659                           tblptrh	equ	0xFF7
 16660                           tblptrl	equ	0xFF6
 16661                           tablat	equ	0xFF5
 16662                           prodh	equ	0xFF4
 16663                           prodl	equ	0xFF3
 16664                           intcon	equ	0xFF2
 16665                           postinc0	equ	0xFEE
 16666                           wreg	equ	0xFE8
 16667                           postdec1	equ	0xFE5
 16668                           fsr1h	equ	0xFE2
 16669                           fsr1l	equ	0xFE1
 16670                           indf2	equ	0xFDF
 16671                           postinc2	equ	0xFDE
 16672                           postdec2	equ	0xFDD
 16673                           plusw2	equ	0xFDB
 16674                           fsr2h	equ	0xFDA
 16675                           fsr2l	equ	0xFD9
 16676                           status	equ	0xFD8
 16677                           
 16678 ;; *************** function _MXK_BlockSwitchTo *****************
 16679 ;; Defined at:
 16680 ;;		line 82 in file "Library/MXK.c"
 16681 ;; Parameters:    Size  Location     Type
 16682 ;;  pModule         1    wreg     enum E6927
 16683 ;; Auto vars:     Size  Location     Type
 16684 ;;  pModule         1    7[BANK0 ] enum E6927
 16685 ;;  CUR             1    6[BANK0 ] unsigned char 
 16686 ;; Return value:  Size  Location     Type
 16687 ;;                  1    wreg      unsigned char 
 16688 ;; Registers used:
 16689 ;;		wreg, status,2, status,0, cstack
 16690 ;; Tracked objects:
 16691 ;;		On entry : 0/0
 16692 ;;		On exit  : 0/0
 16693 ;;		Unchanged: 0/0
 16694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16699 ;;Total ram usage:        2 bytes
 16700 ;; Hardware stack levels used:    1
 16701 ;; Hardware stack levels required when called:    8
 16702 ;; This function calls:
 16703 ;;		_delay_us
 16704 ;; This function is called by:
 16705 ;;		_main
 16706 ;; This function uses a non-reentrant model
 16707 ;;
 16708                           
 16709                           	psect	text64
 16710  015558                     __ptext64:
 16711                           	opt stack 0
 16712  015558                     _MXK_BlockSwitchTo:
 16713                           	opt stack 22
 16714                           
 16715                           ;incstack = 0
 16716                           ;MXK_BlockSwitchTo@pModule stored from wreg
 16717  015558  0100               	movlb	0	; () banked
 16718  01555A  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 16719                           
 16720                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 16721  01555C  5086               	movf	3974,w,c	;volatile
 16722  01555E  0B0F               	andlw	15
 16723  015560  0100               	movlb	0	; () banked
 16724  015562  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 16725  015564                     
 16726                           ; BSR set to: 0
 16727                           
 16728                           ; BSR set to: 0
 16729  015564  504D               	movf	_Bus_State,w,c
 16730  015566  B4D8               	btfsc	status,2,c
 16731  015568  D7FD               	goto	l1724
 16732                           
 16733                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 16734  01556A  0E00               	movlw	0
 16735  01556C  6E4D               	movwf	_Bus_State,c
 16736                           
 16737                           ;MXK.c: 90: if (CUR != pModule)
 16738  01556E  0100               	movlb	0	; () banked
 16739  015570  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 16740  015572  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 16741  015574  B4D8               	btfsc	status,2,c
 16742  015576  D00A               	goto	l1726
 16743                           
 16744                           ; BSR set to: 0
 16745                           ;MXK.c: 91: {
 16746                           ;MXK.c: 92: PORTG &= ~(0xF);
 16747  015578  0EF0               	movlw	240
 16748  01557A  1686               	andwf	3974,f,c	;volatile
 16749                           
 16750                           ;MXK.c: 93: PORTG |= pModule;
 16751  01557C  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 16752  01557E  1286               	iorwf	3974,f,c	;volatile
 16753                           
 16754                           ; BSR set to: 0
 16755                           ;MXK.c: 96: delay_us(10);
 16756  015580  0E00               	movlw	0
 16757  015582  6F61               	movwf	(delay_us@us+1)& (0+255),b
 16758  015584  0E0A               	movlw	10
 16759  015586  6F60               	movwf	delay_us@us& (0+255),b
 16760  015588  EC73  F0A9         	call	_delay_us	;wreg free
 16761  01558C                     l1726:
 16762                           
 16763                           ;MXK.c: 97: }
 16764                           ;MXK.c: 98: return 1;
 16765  01558C  0E01               	movlw	1
 16766  01558E  0012               	return	
 16767  015590                     __end_of_MXK_BlockSwitchTo:
 16768                           	opt stack 0
 16769                           tosu	equ	0xFFF
 16770                           tosh	equ	0xFFE
 16771                           tosl	equ	0xFFD
 16772                           pclath	equ	0xFFA
 16773                           tblptru	equ	0xFF8
 16774                           tblptrh	equ	0xFF7
 16775                           tblptrl	equ	0xFF6
 16776                           tablat	equ	0xFF5
 16777                           prodh	equ	0xFF4
 16778                           prodl	equ	0xFF3
 16779                           intcon	equ	0xFF2
 16780                           postinc0	equ	0xFEE
 16781                           wreg	equ	0xFE8
 16782                           postdec1	equ	0xFE5
 16783                           fsr1h	equ	0xFE2
 16784                           fsr1l	equ	0xFE1
 16785                           indf2	equ	0xFDF
 16786                           postinc2	equ	0xFDE
 16787                           postdec2	equ	0xFDD
 16788                           plusw2	equ	0xFDB
 16789                           fsr2h	equ	0xFDA
 16790                           fsr2l	equ	0xFD9
 16791                           status	equ	0xFD8
 16792                           
 16793 ;; *************** function _delay_us *****************
 16794 ;; Defined at:
 16795 ;;		line 255 in file "Library/Types.c"
 16796 ;; Parameters:    Size  Location     Type
 16797 ;;  us              2    0[BANK0 ] unsigned short 
 16798 ;; Auto vars:     Size  Location     Type
 16799 ;;  u               4    2[BANK0 ] unsigned long 
 16800 ;; Return value:  Size  Location     Type
 16801 ;;                  1    wreg      void 
 16802 ;; Registers used:
 16803 ;;		wreg, status,2, status,0
 16804 ;; Tracked objects:
 16805 ;;		On entry : 0/0
 16806 ;;		On exit  : 0/0
 16807 ;;		Unchanged: 0/0
 16808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16809 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16810 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16812 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16813 ;;Total ram usage:        6 bytes
 16814 ;; Hardware stack levels used:    1
 16815 ;; Hardware stack levels required when called:    7
 16816 ;; This function calls:
 16817 ;;		Nothing
 16818 ;; This function is called by:
 16819 ;;		_MXK_BlockSwitchTo
 16820 ;;		_MXK_SwitchTo
 16821 ;; This function uses a non-reentrant model
 16822 ;;
 16823                           
 16824                           	psect	text65
 16825  0152E6                     __ptext65:
 16826                           	opt stack 0
 16827  0152E6                     _delay_us:
 16828                           	opt stack 20
 16829                           
 16830                           ;Types.c: 256: unsigned long u;
 16831                           ;Types.c: 257: while (us--) {
 16832                           
 16833                           ;incstack = 0
 16834  0152E6  D018               	goto	u11810
 16835  0152E8                     l14377:
 16836                           
 16837                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 16838  0152E8  0E00               	movlw	0
 16839  0152EA  0100               	movlb	0	; () banked
 16840  0152EC  6F62               	movwf	delay_us@u& (0+255),b
 16841  0152EE  0E00               	movlw	0
 16842  0152F0  6F63               	movwf	(delay_us@u+1)& (0+255),b
 16843  0152F2  0E00               	movlw	0
 16844  0152F4  6F64               	movwf	(delay_us@u+2)& (0+255),b
 16845  0152F6  0E00               	movlw	0
 16846  0152F8  6F65               	movwf	(delay_us@u+3)& (0+255),b
 16847  0152FA                     l14379:
 16848                           
 16849                           ; BSR set to: 0
 16850  0152FA  5162               	movf	delay_us@u& (0+255),w,b
 16851  0152FC  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 16852  0152FE  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 16853  015300  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 16854  015302  A4D8               	btfss	status,2,c
 16855  015304  D009               	goto	u11810
 16856                           
 16857                           ; BSR set to: 0
 16858                           
 16859                           ; BSR set to: 0
 16860  015306  F000               	nop		; ;# 
 16861  015308  0E01               	movlw	1
 16862  01530A  0100               	movlb	0	; () banked
 16863  01530C  2762               	addwf	delay_us@u& (0+255),f,b
 16864  01530E  0E00               	movlw	0
 16865  015310  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 16866  015312  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 16867  015314  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 16868  015316  D7F1               	goto	l14379
 16869  015318                     u11810:
 16870                           
 16871                           ; BSR set to: 0
 16872                           
 16873                           ; BSR set to: 0
 16874  015318  0100               	movlb	0	; () banked
 16875  01531A  0760               	decf	delay_us@us& (0+255),f,b
 16876  01531C  A0D8               	btfss	status,0,c
 16877  01531E  0761               	decf	(delay_us@us+1)& (0+255),f,b
 16878  015320  2960               	incf	delay_us@us& (0+255),w,b
 16879  015322  E1E2               	bnz	l14377
 16880  015324  2961               	incf	(delay_us@us+1)& (0+255),w,b
 16881  015326  B4D8               	btfsc	status,2,c
 16882  015328  0012               	return	
 16883  01532A  D7DE               	goto	l832
 16884  01532C                     __end_of_delay_us:
 16885                           	opt stack 0
 16886                           tosu	equ	0xFFF
 16887                           tosh	equ	0xFFE
 16888                           tosl	equ	0xFFD
 16889                           pclath	equ	0xFFA
 16890                           tblptru	equ	0xFF8
 16891                           tblptrh	equ	0xFF7
 16892                           tblptrl	equ	0xFF6
 16893                           tablat	equ	0xFF5
 16894                           prodh	equ	0xFF4
 16895                           prodl	equ	0xFF3
 16896                           intcon	equ	0xFF2
 16897                           postinc0	equ	0xFEE
 16898                           wreg	equ	0xFE8
 16899                           postdec1	equ	0xFE5
 16900                           fsr1h	equ	0xFE2
 16901                           fsr1l	equ	0xFE1
 16902                           indf2	equ	0xFDF
 16903                           postinc2	equ	0xFDE
 16904                           postdec2	equ	0xFDD
 16905                           plusw2	equ	0xFDB
 16906                           fsr2h	equ	0xFDA
 16907                           fsr2l	equ	0xFD9
 16908                           status	equ	0xFD8
 16909                           
 16910 ;; *************** function _LCD_Init *****************
 16911 ;; Defined at:
 16912 ;;		line 172 in file "Library/LCD.c"
 16913 ;; Parameters:    Size  Location     Type
 16914 ;;		None
 16915 ;; Auto vars:     Size  Location     Type
 16916 ;;  i               2   55[BANK0 ] unsigned short 
 16917 ;; Return value:  Size  Location     Type
 16918 ;;                  1    wreg      void 
 16919 ;; Registers used:
 16920 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16921 ;; Tracked objects:
 16922 ;;		On entry : 0/0
 16923 ;;		On exit  : 0/0
 16924 ;;		Unchanged: 0/0
 16925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16929 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16930 ;;Total ram usage:        4 bytes
 16931 ;; Hardware stack levels used:    1
 16932 ;; Hardware stack levels required when called:   15
 16933 ;; This function calls:
 16934 ;;		_Configure_GPIOs
 16935 ;;		_LCD_Fill
 16936 ;;		_LCD_Write
 16937 ;;		_Set_Rotation
 16938 ;;		_delay_ms
 16939 ;; This function is called by:
 16940 ;;		_main
 16941 ;; This function uses a non-reentrant model
 16942 ;;
 16943                           
 16944                           	psect	text66
 16945  012FFC                     __ptext66:
 16946                           	opt stack 0
 16947  012FFC                     _LCD_Init:
 16948                           	opt stack 15
 16949                           
 16950                           ;LCD.c: 174: UINT16 i;
 16951                           ;LCD.c: 175: Configure_GPIOs();
 16952                           
 16953                           ; BSR set to: 0
 16954                           ;incstack = 0
 16955  012FFC  ECC6  F0A6         	call	_Configure_GPIOs	;wreg free
 16956                           
 16957                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 16958  013000  0E00               	movlw	0
 16959  013002  0100               	movlb	0	; () banked
 16960  013004  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 16961  013006  0E00               	movlw	0
 16962  013008  6F97               	movwf	LCD_Init@i& (0+255),b
 16963                           
 16964                           ; BSR set to: 0
 16965  01300A  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 16966  01300C  E17D               	bnz	u12860
 16967  01300E  0E59               	movlw	89
 16968  013010  5D97               	subwf	LCD_Init@i& (0+255),w,b
 16969  013012  B0D8               	btfsc	status,0,c
 16970  013014  D079               	goto	u12860
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;LCD.c: 178: {
 16974                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 16975                           
 16976                           ; BSR set to: 0
 16977                           
 16978                           ; BSR set to: 0
 16979  013016  90D8               	bcf	status,0,c
 16980  013018  3597               	rlcf	LCD_Init@i& (0+255),w,b
 16981  01301A  6EF6               	movwf	tblptrl,c
 16982  01301C  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16983  01301E  6EF7               	movwf	tblptrh,c
 16984  013020  0E1D               	movlw	low _InitList
 16985  013022  26F6               	addwf	tblptrl,f,c
 16986  013024  0EFB               	movlw	high _InitList
 16987  013026  22F7               	addwfc	tblptrh,f,c
 16988  013028                     	if	1	;There are 3 active tblptr bytes
 16989  013028  6AF8               	clrf	tblptru,c
 16990  01302A  0E00               	movlw	low (__mediumconst shr (0+16))
 16991  01302C  22F8               	addwfc	tblptru,f,c
 16992  01302E                     	endif
 16993  01302E  0009               	tblrd		*+
 16994  013030  0E80               	movlw	128
 16995  013032  18F5               	xorwf	tablat,w,c
 16996  013034  0009               	tblrd		*+
 16997  013036  10F5               	iorwf	tablat,w,c
 16998  013038  A4D8               	btfss	status,2,c
 16999  01303A  D01D               	goto	l87
 17000                           
 17001                           ; BSR set to: 0
 17002  01303C  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17003  01303E  E11B               	bnz	l15499
 17004  013040  0E58               	movlw	88
 17005  013042  5D97               	subwf	LCD_Init@i& (0+255),w,b
 17006  013044  B0D8               	btfsc	status,0,c
 17007  013046  D017               	goto	l87
 17008                           
 17009                           ; BSR set to: 0
 17010                           ;LCD.c: 180: delay_ms(InitList[++i]);
 17011  013048  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17012  01304A  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17013  01304C  90D8               	bcf	status,0,c
 17014  01304E  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17015  013050  6EF6               	movwf	tblptrl,c
 17016  013052  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17017  013054  6EF7               	movwf	tblptrh,c
 17018  013056  0E1D               	movlw	low _InitList
 17019  013058  26F6               	addwf	tblptrl,f,c
 17020  01305A  0EFB               	movlw	high _InitList
 17021  01305C  22F7               	addwfc	tblptrh,f,c
 17022  01305E                     	if	1	;There are 3 active tblptr bytes
 17023  01305E  6AF8               	clrf	tblptru,c
 17024  013060  0E00               	movlw	low (__mediumconst shr (0+16))
 17025  013062  22F8               	addwfc	tblptru,f,c
 17026  013064                     	endif
 17027  013064  0009               	tblrd		*+
 17028  013066  CFF5 F060          	movff	tablat,delay_ms@ms
 17029  01306A  000A               	tblrd		*-
 17030  01306C  CFF5 F061          	movff	tablat,delay_ms@ms+1
 17031  013070  ECF5  F0A6         	call	_delay_ms	;wreg free
 17032  013074  D043               	goto	l90
 17033  013076                     l87:
 17034  013076                     l15499:
 17035                           
 17036                           ;LCD.c: 181: else
 17037                           ;LCD.c: 182: {
 17038                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 17039  013076  90D8               	bcf	status,0,c
 17040  013078  0100               	movlb	0	; () banked
 17041  01307A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17042  01307C  6EF6               	movwf	tblptrl,c
 17043  01307E  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17044  013080  6EF7               	movwf	tblptrh,c
 17045  013082  0E1D               	movlw	low _InitList
 17046  013084  26F6               	addwf	tblptrl,f,c
 17047  013086  0EFB               	movlw	high _InitList
 17048  013088  22F7               	addwfc	tblptrh,f,c
 17049  01308A                     	if	1	;There are 3 active tblptr bytes
 17050  01308A  6AF8               	clrf	tblptru,c
 17051  01308C  0E00               	movlw	low (__mediumconst shr (0+16))
 17052  01308E  22F8               	addwfc	tblptru,f,c
 17053  013090                     	endif
 17054  013090  0009               	tblrd		*+
 17055  013092  0E00               	movlw	0
 17056  013094  5EF5               	subwf	tablat,f,c
 17057  013096  0009               	tblrd		*+
 17058  013098  0E01               	movlw	1
 17059  01309A  5AF5               	subwfb	tablat,f,c
 17060  01309C  A0D8               	btfss	status,0,c
 17061  01309E  D01B               	goto	l89
 17062                           
 17063                           ; BSR set to: 0
 17064  0130A0  0E00               	movlw	0
 17065  0130A2  6F63               	movwf	LCD_Write@mode& (0+255),b
 17066  0130A4  90D8               	bcf	status,0,c
 17067  0130A6  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17068  0130A8  6EF6               	movwf	tblptrl,c
 17069  0130AA  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17070  0130AC  6EF7               	movwf	tblptrh,c
 17071  0130AE  0E1D               	movlw	low _InitList
 17072  0130B0  26F6               	addwf	tblptrl,f,c
 17073  0130B2  0EFB               	movlw	high _InitList
 17074  0130B4  22F7               	addwfc	tblptrh,f,c
 17075  0130B6                     	if	1	;There are 3 active tblptr bytes
 17076  0130B6  6AF8               	clrf	tblptru,c
 17077  0130B8  0E00               	movlw	low (__mediumconst shr (0+16))
 17078  0130BA  22F8               	addwfc	tblptru,f,c
 17079  0130BC                     	endif
 17080  0130BC  0009               	tblrd		*+
 17081  0130BE  CFF5 F095          	movff	tablat,??_LCD_Init
 17082  0130C2  0009               	tblrd		*+
 17083  0130C4  CFF5 F096          	movff	tablat,??_LCD_Init+1
 17084  0130C8  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 17085  0130CC  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 17086  0130CE  5195               	movf	??_LCD_Init& (0+255),w,b
 17087  0130D0  EC5A  F0AC         	call	_LCD_Write
 17088  0130D4  D013               	goto	l90
 17089  0130D6                     l89:
 17090                           
 17091                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 17092  0130D6  0E01               	movlw	1
 17093  0130D8  0100               	movlb	0	; () banked
 17094  0130DA  6F63               	movwf	LCD_Write@mode& (0+255),b
 17095  0130DC  90D8               	bcf	status,0,c
 17096  0130DE  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17097  0130E0  6EF6               	movwf	tblptrl,c
 17098  0130E2  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17099  0130E4  6EF7               	movwf	tblptrh,c
 17100  0130E6  0E1D               	movlw	low _InitList
 17101  0130E8  26F6               	addwf	tblptrl,f,c
 17102  0130EA  0EFB               	movlw	high _InitList
 17103  0130EC  22F7               	addwfc	tblptrh,f,c
 17104  0130EE                     	if	1	;There are 3 active tblptr bytes
 17105  0130EE  6AF8               	clrf	tblptru,c
 17106  0130F0  0E00               	movlw	low (__mediumconst shr (0+16))
 17107  0130F2  22F8               	addwfc	tblptru,f,c
 17108  0130F4                     	endif
 17109  0130F4  0008               	tblrd		*
 17110  0130F6  50F5               	movf	tablat,w,c
 17111  0130F8  EC5A  F0AC         	call	_LCD_Write
 17112  0130FC                     l90:
 17113  0130FC  0100               	movlb	0	; () banked
 17114  0130FE  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17115  013100  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17116                           
 17117                           ; BSR set to: 0
 17118  013102  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17119  013104  E101               	bnz	l15509
 17120  013106  D783               	goto	L15
 17121  013108                     u12860:
 17122  013108                     l15509:
 17123                           
 17124                           ; BSR set to: 0
 17125                           ;LCD.c: 185: }
 17126                           ;LCD.c: 186: }
 17127                           ;LCD.c: 187: delay_ms(100);
 17128  013108  0E00               	movlw	0
 17129  01310A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17130  01310C  0E64               	movlw	100
 17131  01310E  6F60               	movwf	delay_ms@ms& (0+255),b
 17132  013110  ECF5  F0A6         	call	_delay_ms	;wreg free
 17133                           
 17134                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 17135  013114  0E00               	movlw	0
 17136  013116  0100               	movlb	0	; () banked
 17137  013118  6F63               	movwf	LCD_Write@mode& (0+255),b
 17138  01311A  0E29               	movlw	41
 17139  01311C  EC5A  F0AC         	call	_LCD_Write
 17140                           
 17141                           ;LCD.c: 189: Set_Rotation(1);
 17142  013120  0E01               	movlw	1
 17143  013122  EC36  F0A1         	call	_Set_Rotation
 17144                           
 17145                           ;LCD.c: 191: delay_ms(100);
 17146  013126  0E00               	movlw	0
 17147  013128  0100               	movlb	0	; () banked
 17148  01312A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17149  01312C  0E64               	movlw	100
 17150  01312E  6F60               	movwf	delay_ms@ms& (0+255),b
 17151  013130  ECF5  F0A6         	call	_delay_ms	;wreg free
 17152                           
 17153                           ;LCD.c: 192: LCD_Fill(0x0000);
 17154  013134  0E00               	movlw	0
 17155  013136  0100               	movlb	0	; () banked
 17156  013138  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 17157  01313A  0E00               	movlw	0
 17158  01313C  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 17159  01313E  EC4F  F0A9         	call	_LCD_Fill	;wreg free
 17160  013142  0012               	return		;funcret
 17161  013144                     __end_of_LCD_Init:
 17162                           	opt stack 0
 17163                           tosu	equ	0xFFF
 17164                           tosh	equ	0xFFE
 17165                           tosl	equ	0xFFD
 17166                           pclath	equ	0xFFA
 17167                           tblptru	equ	0xFF8
 17168                           tblptrh	equ	0xFF7
 17169                           tblptrl	equ	0xFF6
 17170                           tablat	equ	0xFF5
 17171                           prodh	equ	0xFF4
 17172                           prodl	equ	0xFF3
 17173                           intcon	equ	0xFF2
 17174                           postinc0	equ	0xFEE
 17175                           wreg	equ	0xFE8
 17176                           postdec1	equ	0xFE5
 17177                           fsr1h	equ	0xFE2
 17178                           fsr1l	equ	0xFE1
 17179                           indf2	equ	0xFDF
 17180                           postinc2	equ	0xFDE
 17181                           postdec2	equ	0xFDD
 17182                           plusw2	equ	0xFDB
 17183                           fsr2h	equ	0xFDA
 17184                           fsr2l	equ	0xFD9
 17185                           status	equ	0xFD8
 17186                           
 17187 ;; *************** function _Set_Rotation *****************
 17188 ;; Defined at:
 17189 ;;		line 248 in file "Library/LCD.c"
 17190 ;; Parameters:    Size  Location     Type
 17191 ;;  m               1    wreg     unsigned char 
 17192 ;; Auto vars:     Size  Location     Type
 17193 ;;  m               1    5[BANK0 ] unsigned char 
 17194 ;;  rotation        1    6[BANK0 ] unsigned char 
 17195 ;; Return value:  Size  Location     Type
 17196 ;;                  1    wreg      void 
 17197 ;; Registers used:
 17198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : 0/0
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;Total ram usage:        2 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; Hardware stack levels required when called:    9
 17211 ;; This function calls:
 17212 ;;		_LCD_Write
 17213 ;; This function is called by:
 17214 ;;		_LCD_Init
 17215 ;; This function uses a non-reentrant model
 17216 ;;
 17217                           
 17218                           	psect	text67
 17219  01426C                     __ptext67:
 17220                           	opt stack 0
 17221  01426C                     _Set_Rotation:
 17222                           	opt stack 20
 17223                           
 17224                           ;incstack = 0
 17225                           ;Set_Rotation@m stored from wreg
 17226  01426C  0100               	movlb	0	; () banked
 17227  01426E  6F65               	movwf	Set_Rotation@m& (0+255),b
 17228                           
 17229                           ;LCD.c: 250: UINT8 rotation = 0x00;
 17230  014270  0E00               	movlw	0
 17231  014272  0100               	movlb	0	; () banked
 17232  014274  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 17233                           
 17234                           ; BSR set to: 0
 17235                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 17236  014276  0E00               	movlw	0
 17237  014278  6F63               	movwf	LCD_Write@mode& (0+255),b
 17238  01427A  0E36               	movlw	54
 17239  01427C  EC5A  F0AC         	call	_LCD_Write
 17240                           
 17241                           ;LCD.c: 253: rotation = (m % 4);
 17242  014280  0100               	movlb	0	; () banked
 17243  014282  5165               	movf	Set_Rotation@m& (0+255),w,b
 17244  014284  0B03               	andlw	3
 17245  014286  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 17246                           
 17247                           ;LCD.c: 255: switch(rotation)
 17248  014288  D02B               	goto	l117
 17249  01428A                     
 17250                           ; BSR set to: 0
 17251                           ;LCD.c: 258: {
 17252                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 17253                           
 17254                           ; BSR set to: 0
 17255  01428A  0E01               	movlw	1
 17256  01428C  6F63               	movwf	LCD_Write@mode& (0+255),b
 17257  01428E  0EC8               	movlw	200
 17258  014290  EC5A  F0AC         	call	_LCD_Write
 17259                           
 17260                           ;LCD.c: 260: w = 128;
 17261  014294  0E80               	movlw	128
 17262  014296  6E50               	movwf	_w,c
 17263                           
 17264                           ;LCD.c: 261: l = 128;
 17265  014298  0E80               	movlw	128
 17266  01429A  6E4F               	movwf	_l,c
 17267                           
 17268                           ;LCD.c: 262: break;
 17269  01429C  0012               	return	
 17270  01429E                     
 17271                           ;LCD.c: 265: {
 17272                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 17273  01429E  0E01               	movlw	1
 17274  0142A0  0100               	movlb	0	; () banked
 17275  0142A2  6F63               	movwf	LCD_Write@mode& (0+255),b
 17276  0142A4  0EA8               	movlw	168
 17277  0142A6  EC5A  F0AC         	call	_LCD_Write
 17278                           
 17279                           ;LCD.c: 267: w = 128;
 17280  0142AA  0E80               	movlw	128
 17281  0142AC  6E50               	movwf	_w,c
 17282                           
 17283                           ;LCD.c: 268: l = 128;
 17284  0142AE  0E80               	movlw	128
 17285  0142B0  6E4F               	movwf	_l,c
 17286                           
 17287                           ;LCD.c: 269: break;
 17288  0142B2  0012               	return	
 17289  0142B4                     
 17290                           ;LCD.c: 272: {
 17291                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 17292  0142B4  0E01               	movlw	1
 17293  0142B6  0100               	movlb	0	; () banked
 17294  0142B8  6F63               	movwf	LCD_Write@mode& (0+255),b
 17295  0142BA  0E08               	movlw	8
 17296  0142BC  EC5A  F0AC         	call	_LCD_Write
 17297                           
 17298                           ;LCD.c: 274: w = 128;
 17299  0142C0  0E80               	movlw	128
 17300  0142C2  6E50               	movwf	_w,c
 17301                           
 17302                           ;LCD.c: 275: l = 128;
 17303  0142C4  0E80               	movlw	128
 17304  0142C6  6E4F               	movwf	_l,c
 17305                           
 17306                           ;LCD.c: 276: break;
 17307  0142C8  0012               	return	
 17308  0142CA                     
 17309                           ;LCD.c: 279: {
 17310                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 17311  0142CA  0E01               	movlw	1
 17312  0142CC  0100               	movlb	0	; () banked
 17313  0142CE  6F63               	movwf	LCD_Write@mode& (0+255),b
 17314  0142D0  0E68               	movlw	104
 17315  0142D2  EC5A  F0AC         	call	_LCD_Write
 17316                           
 17317                           ;LCD.c: 281: w = 128;
 17318  0142D6  0E80               	movlw	128
 17319  0142D8  6E50               	movwf	_w,c
 17320                           
 17321                           ;LCD.c: 282: l = 128;
 17322  0142DA  0E80               	movlw	128
 17323  0142DC  6E4F               	movwf	_l,c
 17324                           
 17325                           ;LCD.c: 284: }
 17326                           ;LCD.c: 285: }
 17327                           
 17328                           ;LCD.c: 283: break;
 17329  0142DE  0012               	return	
 17330  0142E0                     l117:
 17331  0142E0  0100               	movlb	0	; () banked
 17332  0142E2  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 17333                           
 17334                           ; Switch size 1, requested type "space"
 17335                           ; Number of cases is 4, Range of values is 0 to 3
 17336                           ; switch strategies available:
 17337                           ; Name         Instructions Cycles
 17338                           ; simple_byte           13     7 (average)
 17339                           ;	Chosen strategy is simple_byte
 17340  0142E4  0A00               	xorlw	0	; case 0
 17341  0142E6  B4D8               	btfsc	status,2,c
 17342  0142E8  D7D0               	goto	l118
 17343  0142EA  0A01               	xorlw	1	; case 1
 17344  0142EC  B4D8               	btfsc	status,2,c
 17345  0142EE  D7D7               	goto	l120
 17346  0142F0  0A03               	xorlw	3	; case 2
 17347  0142F2  B4D8               	btfsc	status,2,c
 17348  0142F4  D7DF               	goto	l121
 17349  0142F6  0A01               	xorlw	1	; case 3
 17350  0142F8  A4D8               	btfss	status,2,c
 17351  0142FA  0012               	return	
 17352  0142FC  D7E6               	goto	l122
 17353  0142FE                     __end_of_Set_Rotation:
 17354                           	opt stack 0
 17355                           tosu	equ	0xFFF
 17356                           tosh	equ	0xFFE
 17357                           tosl	equ	0xFFD
 17358                           pclath	equ	0xFFA
 17359                           tblptru	equ	0xFF8
 17360                           tblptrh	equ	0xFF7
 17361                           tblptrl	equ	0xFF6
 17362                           tablat	equ	0xFF5
 17363                           prodh	equ	0xFF4
 17364                           prodl	equ	0xFF3
 17365                           intcon	equ	0xFF2
 17366                           postinc0	equ	0xFEE
 17367                           wreg	equ	0xFE8
 17368                           postdec1	equ	0xFE5
 17369                           fsr1h	equ	0xFE2
 17370                           fsr1l	equ	0xFE1
 17371                           indf2	equ	0xFDF
 17372                           postinc2	equ	0xFDE
 17373                           postdec2	equ	0xFDD
 17374                           plusw2	equ	0xFDB
 17375                           fsr2h	equ	0xFDA
 17376                           fsr2l	equ	0xFD9
 17377                           status	equ	0xFD8
 17378                           
 17379 ;; *************** function _LCD_Fill *****************
 17380 ;; Defined at:
 17381 ;;		line 287 in file "Library/LCD.c"
 17382 ;; Parameters:    Size  Location     Type
 17383 ;;  pColour         2    9[BANK0 ] unsigned short 
 17384 ;; Auto vars:     Size  Location     Type
 17385 ;;  j               1   12[BANK0 ] unsigned char 
 17386 ;;  i               1   11[BANK0 ] unsigned char 
 17387 ;; Return value:  Size  Location     Type
 17388 ;;                  1    wreg      void 
 17389 ;; Registers used:
 17390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17391 ;; Tracked objects:
 17392 ;;		On entry : 0/0
 17393 ;;		On exit  : 0/0
 17394 ;;		Unchanged: 0/0
 17395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17396 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17397 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17399 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17400 ;;Total ram usage:        4 bytes
 17401 ;; Hardware stack levels used:    1
 17402 ;; Hardware stack levels required when called:   10
 17403 ;; This function calls:
 17404 ;;		_LCD_Word_Write
 17405 ;;		_Set_Addr_Window
 17406 ;; This function is called by:
 17407 ;;		_LCD_Init
 17408 ;; This function uses a non-reentrant model
 17409 ;;
 17410                           
 17411                           	psect	text68
 17412  01529E                     __ptext68:
 17413                           	opt stack 0
 17414  01529E                     _LCD_Fill:
 17415                           	opt stack 19
 17416                           
 17417                           ;LCD.c: 296: UINT8 i = 0x00;
 17418                           
 17419                           ;incstack = 0
 17420  01529E  0E00               	movlw	0
 17421  0152A0  0100               	movlb	0	; () banked
 17422  0152A2  6F6B               	movwf	LCD_Fill@i& (0+255),b
 17423                           
 17424                           ;LCD.c: 297: UINT8 j = 0x00;
 17425  0152A4  0E00               	movlw	0
 17426  0152A6  6F6C               	movwf	LCD_Fill@j& (0+255),b
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 17430  0152A8  0E00               	movlw	0
 17431  0152AA  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 17432  0152AC  0450               	decf	_w,w,c
 17433  0152AE  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 17434  0152B0  044F               	decf	_l,w,c
 17435  0152B2  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 17436  0152B4  0E00               	movlw	0
 17437  0152B6  EC54  F0A0         	call	_Set_Addr_Window
 17438                           
 17439                           ;LCD.c: 299: for (j = l; j > 0; j--)
 17440  0152BA  C04F  F06C         	movff	_l,LCD_Fill@j
 17441  0152BE  0100               	movlb	0	; () banked
 17442  0152C0  516C               	movf	LCD_Fill@j& (0+255),w,b
 17443  0152C2  B4D8               	btfsc	status,2,c
 17444  0152C4  0012               	return	
 17445                           
 17446                           ; BSR set to: 0
 17447                           ;LCD.c: 300: for (i = w; i > 0; i--)
 17448                           
 17449                           ; BSR set to: 0
 17450  0152C6  C050  F06B         	movff	_w,LCD_Fill@i
 17451  0152CA                     l15173:
 17452                           
 17453                           ; BSR set to: 0
 17454  0152CA  516B               	movf	LCD_Fill@i& (0+255),w,b
 17455  0152CC  B4D8               	btfsc	status,2,c
 17456  0152CE  D009               	goto	u12530
 17457                           
 17458                           ; BSR set to: 0
 17459                           ;LCD.c: 301: LCD_Word_Write(pColour);
 17460                           
 17461                           ; BSR set to: 0
 17462                           
 17463                           ; BSR set to: 0
 17464  0152D0  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 17465  0152D4  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 17466  0152D8  ECC4  F0AC         	call	_LCD_Word_Write	;wreg free
 17467  0152DC  0100               	movlb	0	; () banked
 17468  0152DE  076B               	decf	LCD_Fill@i& (0+255),f,b
 17469  0152E0  D7F4               	goto	l15173
 17470  0152E2                     u12530:
 17471                           
 17472                           ; BSR set to: 0
 17473                           
 17474                           ; BSR set to: 0
 17475  0152E2  076C               	decf	LCD_Fill@j& (0+255),f,b
 17476  0152E4  D7ED               	goto	L16
 17477  0152E6                     __end_of_LCD_Fill:
 17478                           	opt stack 0
 17479                           tosu	equ	0xFFF
 17480                           tosh	equ	0xFFE
 17481                           tosl	equ	0xFFD
 17482                           pclath	equ	0xFFA
 17483                           tblptru	equ	0xFF8
 17484                           tblptrh	equ	0xFF7
 17485                           tblptrl	equ	0xFF6
 17486                           tablat	equ	0xFF5
 17487                           prodh	equ	0xFF4
 17488                           prodl	equ	0xFF3
 17489                           intcon	equ	0xFF2
 17490                           postinc0	equ	0xFEE
 17491                           wreg	equ	0xFE8
 17492                           postdec1	equ	0xFE5
 17493                           fsr1h	equ	0xFE2
 17494                           fsr1l	equ	0xFE1
 17495                           indf2	equ	0xFDF
 17496                           postinc2	equ	0xFDE
 17497                           postdec2	equ	0xFDD
 17498                           plusw2	equ	0xFDB
 17499                           fsr2h	equ	0xFDA
 17500                           fsr2l	equ	0xFD9
 17501                           status	equ	0xFD8
 17502                           
 17503 ;; *************** function _Set_Addr_Window *****************
 17504 ;; Defined at:
 17505 ;;		line 214 in file "Library/LCD.c"
 17506 ;; Parameters:    Size  Location     Type
 17507 ;;  xs              1    wreg     unsigned char 
 17508 ;;  ys              1    5[BANK0 ] unsigned char 
 17509 ;;  xe              1    6[BANK0 ] unsigned char 
 17510 ;;  ye              1    7[BANK0 ] unsigned char 
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;  xs              1    8[BANK0 ] unsigned char 
 17513 ;; Return value:  Size  Location     Type
 17514 ;;                  1    wreg      void 
 17515 ;; Registers used:
 17516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17522 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17525 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17526 ;;Total ram usage:        4 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; Hardware stack levels required when called:    9
 17529 ;; This function calls:
 17530 ;;		_LCD_Write
 17531 ;; This function is called by:
 17532 ;;		_LCD_Fill
 17533 ;;		_LCD_FillRectangle
 17534 ;;		_LCD_DrawField
 17535 ;;		_RAM_Address_Set
 17536 ;;		_LCD_DrawPixel
 17537 ;; This function uses a non-reentrant model
 17538 ;;
 17539                           
 17540                           	psect	text69
 17541  0140A8                     __ptext69:
 17542                           	opt stack 0
 17543  0140A8                     _Set_Addr_Window:
 17544                           	opt stack 18
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;incstack = 0
 17548                           ;Set_Addr_Window@xs stored from wreg
 17549  0140A8  0100               	movlb	0	; () banked
 17550  0140AA  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 17551                           
 17552                           ;LCD.c: 216: ys+=2;
 17553  0140AC  0E02               	movlw	2
 17554  0140AE  0100               	movlb	0	; () banked
 17555  0140B0  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 17556                           
 17557                           ;LCD.c: 217: ye+=2;
 17558  0140B2  0E02               	movlw	2
 17559  0140B4  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 17560                           
 17561                           ;LCD.c: 218: xs+=3;
 17562  0140B6  0E03               	movlw	3
 17563  0140B8  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 17564                           
 17565                           ;LCD.c: 219: xe+=3;
 17566  0140BA  0E03               	movlw	3
 17567  0140BC  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 17568                           
 17569                           ; BSR set to: 0
 17570                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 17571  0140BE  0E00               	movlw	0
 17572  0140C0  6F63               	movwf	LCD_Write@mode& (0+255),b
 17573  0140C2  0E2A               	movlw	42
 17574  0140C4  EC5A  F0AC         	call	_LCD_Write
 17575                           
 17576                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 17577  0140C8  0E01               	movlw	1
 17578  0140CA  0100               	movlb	0	; () banked
 17579  0140CC  6F63               	movwf	LCD_Write@mode& (0+255),b
 17580  0140CE  0E00               	movlw	0
 17581  0140D0  EC5A  F0AC         	call	_LCD_Write
 17582                           
 17583                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 17584  0140D4  0E01               	movlw	1
 17585  0140D6  0100               	movlb	0	; () banked
 17586  0140D8  6F63               	movwf	LCD_Write@mode& (0+255),b
 17587  0140DA  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 17588  0140DC  EC5A  F0AC         	call	_LCD_Write
 17589                           
 17590                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 17591  0140E0  0E01               	movlw	1
 17592  0140E2  0100               	movlb	0	; () banked
 17593  0140E4  6F63               	movwf	LCD_Write@mode& (0+255),b
 17594  0140E6  0E00               	movlw	0
 17595  0140E8  EC5A  F0AC         	call	_LCD_Write
 17596                           
 17597                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 17598  0140EC  0E01               	movlw	1
 17599  0140EE  0100               	movlb	0	; () banked
 17600  0140F0  6F63               	movwf	LCD_Write@mode& (0+255),b
 17601  0140F2  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 17602  0140F4  EC5A  F0AC         	call	_LCD_Write
 17603                           
 17604                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 17605  0140F8  0E00               	movlw	0
 17606  0140FA  0100               	movlb	0	; () banked
 17607  0140FC  6F63               	movwf	LCD_Write@mode& (0+255),b
 17608  0140FE  0E2B               	movlw	43
 17609  014100  EC5A  F0AC         	call	_LCD_Write
 17610                           
 17611                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 17612  014104  0E01               	movlw	1
 17613  014106  0100               	movlb	0	; () banked
 17614  014108  6F63               	movwf	LCD_Write@mode& (0+255),b
 17615  01410A  0E00               	movlw	0
 17616  01410C  EC5A  F0AC         	call	_LCD_Write
 17617                           
 17618                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 17619  014110  0E01               	movlw	1
 17620  014112  0100               	movlb	0	; () banked
 17621  014114  6F63               	movwf	LCD_Write@mode& (0+255),b
 17622  014116  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 17623  014118  EC5A  F0AC         	call	_LCD_Write
 17624                           
 17625                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 17626  01411C  0E01               	movlw	1
 17627  01411E  0100               	movlb	0	; () banked
 17628  014120  6F63               	movwf	LCD_Write@mode& (0+255),b
 17629  014122  0E00               	movlw	0
 17630  014124  EC5A  F0AC         	call	_LCD_Write
 17631                           
 17632                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 17633  014128  0E01               	movlw	1
 17634  01412A  0100               	movlb	0	; () banked
 17635  01412C  6F63               	movwf	LCD_Write@mode& (0+255),b
 17636  01412E  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 17637  014130  EC5A  F0AC         	call	_LCD_Write
 17638                           
 17639                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 17640  014134  0E00               	movlw	0
 17641  014136  0100               	movlb	0	; () banked
 17642  014138  6F63               	movwf	LCD_Write@mode& (0+255),b
 17643  01413A  0E2C               	movlw	44
 17644  01413C  EC5A  F0AC         	call	_LCD_Write
 17645  014140  0012               	return		;funcret
 17646  014142                     __end_of_Set_Addr_Window:
 17647                           	opt stack 0
 17648                           tosu	equ	0xFFF
 17649                           tosh	equ	0xFFE
 17650                           tosl	equ	0xFFD
 17651                           pclath	equ	0xFFA
 17652                           tblptru	equ	0xFF8
 17653                           tblptrh	equ	0xFF7
 17654                           tblptrl	equ	0xFF6
 17655                           tablat	equ	0xFF5
 17656                           prodh	equ	0xFF4
 17657                           prodl	equ	0xFF3
 17658                           intcon	equ	0xFF2
 17659                           postinc0	equ	0xFEE
 17660                           wreg	equ	0xFE8
 17661                           postdec1	equ	0xFE5
 17662                           fsr1h	equ	0xFE2
 17663                           fsr1l	equ	0xFE1
 17664                           indf2	equ	0xFDF
 17665                           postinc2	equ	0xFDE
 17666                           postdec2	equ	0xFDD
 17667                           plusw2	equ	0xFDB
 17668                           fsr2h	equ	0xFDA
 17669                           fsr2l	equ	0xFD9
 17670                           status	equ	0xFD8
 17671                           
 17672 ;; *************** function _LCD_Word_Write *****************
 17673 ;; Defined at:
 17674 ;;		line 198 in file "Library/LCD.c"
 17675 ;; Parameters:    Size  Location     Type
 17676 ;;  value           2    5[BANK0 ] unsigned short 
 17677 ;; Auto vars:     Size  Location     Type
 17678 ;;		None
 17679 ;; Return value:  Size  Location     Type
 17680 ;;                  1    wreg      void 
 17681 ;; Registers used:
 17682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17683 ;; Tracked objects:
 17684 ;;		On entry : 0/0
 17685 ;;		On exit  : 0/0
 17686 ;;		Unchanged: 0/0
 17687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17688 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17692 ;;Total ram usage:        2 bytes
 17693 ;; Hardware stack levels used:    1
 17694 ;; Hardware stack levels required when called:    9
 17695 ;; This function calls:
 17696 ;;		_LCD_Write
 17697 ;; This function is called by:
 17698 ;;		_LCD_Fill
 17699 ;;		_LCD_FillRectangle
 17700 ;;		_LCD_DrawField
 17701 ;;		_LCD_DrawPixel
 17702 ;; This function uses a non-reentrant model
 17703 ;;
 17704                           
 17705                           	psect	text70
 17706  015988                     __ptext70:
 17707                           	opt stack 0
 17708  015988                     _LCD_Word_Write:
 17709                           	opt stack 18
 17710                           
 17711                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 17712                           
 17713                           ;incstack = 0
 17714  015988  0E01               	movlw	1
 17715  01598A  0100               	movlb	0	; () banked
 17716  01598C  6F63               	movwf	LCD_Write@mode& (0+255),b
 17717  01598E  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 17718  015990  EC5A  F0AC         	call	_LCD_Write
 17719                           
 17720                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 17721  015994  0E01               	movlw	1
 17722  015996  0100               	movlb	0	; () banked
 17723  015998  6F63               	movwf	LCD_Write@mode& (0+255),b
 17724  01599A  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 17725  01599C  EC5A  F0AC         	call	_LCD_Write
 17726  0159A0  0012               	return		;funcret
 17727  0159A2                     __end_of_LCD_Word_Write:
 17728                           	opt stack 0
 17729                           tosu	equ	0xFFF
 17730                           tosh	equ	0xFFE
 17731                           tosl	equ	0xFFD
 17732                           pclath	equ	0xFFA
 17733                           tblptru	equ	0xFF8
 17734                           tblptrh	equ	0xFF7
 17735                           tblptrl	equ	0xFF6
 17736                           tablat	equ	0xFF5
 17737                           prodh	equ	0xFF4
 17738                           prodl	equ	0xFF3
 17739                           intcon	equ	0xFF2
 17740                           postinc0	equ	0xFEE
 17741                           wreg	equ	0xFE8
 17742                           postdec1	equ	0xFE5
 17743                           fsr1h	equ	0xFE2
 17744                           fsr1l	equ	0xFE1
 17745                           indf2	equ	0xFDF
 17746                           postinc2	equ	0xFDE
 17747                           postdec2	equ	0xFDD
 17748                           plusw2	equ	0xFDB
 17749                           fsr2h	equ	0xFDA
 17750                           fsr2l	equ	0xFD9
 17751                           status	equ	0xFD8
 17752                           
 17753 ;; *************** function _LCD_Write *****************
 17754 ;; Defined at:
 17755 ;;		line 67 in file "Library/LCD.c"
 17756 ;; Parameters:    Size  Location     Type
 17757 ;;  value           1    wreg     unsigned char 
 17758 ;;  mode            1    3[BANK0 ] enum E6761
 17759 ;; Auto vars:     Size  Location     Type
 17760 ;;  value           1    4[BANK0 ] unsigned char 
 17761 ;; Return value:  Size  Location     Type
 17762 ;;                  1    wreg      void 
 17763 ;; Registers used:
 17764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17765 ;; Tracked objects:
 17766 ;;		On entry : 0/0
 17767 ;;		On exit  : 0/0
 17768 ;;		Unchanged: 0/0
 17769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17770 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17774 ;;Total ram usage:        2 bytes
 17775 ;; Hardware stack levels used:    1
 17776 ;; Hardware stack levels required when called:    8
 17777 ;; This function calls:
 17778 ;;		_Mode_Set
 17779 ;;		_SPI_Send
 17780 ;; This function is called by:
 17781 ;;		_LCD_Init
 17782 ;;		_LCD_Word_Write
 17783 ;;		_Set_Addr_Window
 17784 ;;		_Set_Rotation
 17785 ;;		_LCD_WriteCMD
 17786 ;;		_LCD_WriteData
 17787 ;;		_LCD_Data_Write
 17788 ;;		_LCD_Data_Write_4k
 17789 ;;		_Invert_Display
 17790 ;; This function uses a non-reentrant model
 17791 ;;
 17792                           
 17793                           	psect	text71
 17794  0158B4                     __ptext71:
 17795                           	opt stack 0
 17796  0158B4                     _LCD_Write:
 17797                           	opt stack 18
 17798                           
 17799                           ;incstack = 0
 17800                           ;LCD_Write@value stored from wreg
 17801  0158B4  0100               	movlb	0	; () banked
 17802  0158B6  6F64               	movwf	LCD_Write@value& (0+255),b
 17803                           
 17804                           ;LCD.c: 89: Mode_Set(mode);
 17805  0158B8  0100               	movlb	0	; () banked
 17806  0158BA  5163               	movf	LCD_Write@mode& (0+255),w,b
 17807  0158BC  EC76  F0AD         	call	_Mode_Set
 17808                           
 17809                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 17810  0158C0  0E6C               	movlw	low _SPI2
 17811  0158C2  0100               	movlb	0	; () banked
 17812  0158C4  6F60               	movwf	SPI_Send@pInput& (0+255),b
 17813  0158C6  0E01               	movlw	high _SPI2
 17814  0158C8  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 17815  0158CA  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 17816  0158CE  EC2C  F0A5         	call	_SPI_Send	;wreg free
 17817  0158D2  0012               	return		;funcret
 17818  0158D4                     __end_of_LCD_Write:
 17819                           	opt stack 0
 17820                           tosu	equ	0xFFF
 17821                           tosh	equ	0xFFE
 17822                           tosl	equ	0xFFD
 17823                           pclath	equ	0xFFA
 17824                           tblptru	equ	0xFF8
 17825                           tblptrh	equ	0xFF7
 17826                           tblptrl	equ	0xFF6
 17827                           tablat	equ	0xFF5
 17828                           prodh	equ	0xFF4
 17829                           prodl	equ	0xFF3
 17830                           intcon	equ	0xFF2
 17831                           postinc0	equ	0xFEE
 17832                           wreg	equ	0xFE8
 17833                           postdec1	equ	0xFE5
 17834                           fsr1h	equ	0xFE2
 17835                           fsr1l	equ	0xFE1
 17836                           indf2	equ	0xFDF
 17837                           postinc2	equ	0xFDE
 17838                           postdec2	equ	0xFDD
 17839                           plusw2	equ	0xFDB
 17840                           fsr2h	equ	0xFDA
 17841                           fsr2l	equ	0xFD9
 17842                           status	equ	0xFD8
 17843                           
 17844 ;; *************** function _SPI_Send *****************
 17845 ;; Defined at:
 17846 ;;		line 226 in file "Library/SPI.c"
 17847 ;; Parameters:    Size  Location     Type
 17848 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17849 ;;		 -> SPI1(11), SPI2(11), 
 17850 ;;  pData           1    2[BANK0 ] unsigned char 
 17851 ;; Auto vars:     Size  Location     Type
 17852 ;;		None
 17853 ;; Return value:  Size  Location     Type
 17854 ;;                  1    wreg      unsigned char 
 17855 ;; Registers used:
 17856 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17857 ;; Tracked objects:
 17858 ;;		On entry : 0/0
 17859 ;;		On exit  : 0/0
 17860 ;;		Unchanged: 0/0
 17861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17862 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17865 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17866 ;;Total ram usage:        3 bytes
 17867 ;; Hardware stack levels used:    1
 17868 ;; Hardware stack levels required when called:    7
 17869 ;; This function calls:
 17870 ;;		Nothing
 17871 ;; This function is called by:
 17872 ;;		_LCD_Write
 17873 ;;		_OutSeg
 17874 ;; This function uses a non-reentrant model
 17875 ;;
 17876                           
 17877                           	psect	text72
 17878  014A58                     __ptext72:
 17879                           	opt stack 0
 17880  014A58                     _SPI_Send:
 17881                           	opt stack 18
 17882                           
 17883                           ;SPI.c: 253: switch (pInput->mChannel)
 17884                           
 17885                           ;incstack = 0
 17886  014A58  D026               	goto	l678
 17887  014A5A                     
 17888                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 17889  014A5A  C1A3  FFD9         	movff	_PortC+4,fsr2l
 17890  014A5E  C1A4  FFDA         	movff	_PortC+5,fsr2h
 17891  014A62  0101               	movlb	1	; () banked
 17892  014A64  94DF               	bcf	indf2,2,c
 17893                           
 17894                           ; BSR set to: 1
 17895                           ;SPI.c: 257: SSP1BUF = pData;
 17896  014A66  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 17897  014A6A                     
 17898                           ; BSR set to: 1
 17899  014A6A  A0C7               	btfss	4039,0,c	;volatile
 17900  014A6C  D7FE               	goto	l681
 17901                           
 17902                           ;SPI.c: 259: pData = SSP1BUF;
 17903  014A6E  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 17904                           
 17905                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 17906  014A72  C1A3  FFD9         	movff	_PortC+4,fsr2l
 17907  014A76  C1A4  FFDA         	movff	_PortC+5,fsr2h
 17908  014A7A  0101               	movlb	1	; () banked
 17909  014A7C  84DF               	bsf	indf2,2,c
 17910                           
 17911                           ; BSR set to: 1
 17912                           ;SPI.c: 261: return pData;
 17913                           ;	Return value of _SPI_Send is never used
 17914  014A7E  0012               	return	
 17915  014A80                     
 17916                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 17917                           
 17918                           ; BSR set to: 1
 17919  014A80  C18F  FFD9         	movff	_PortD+4,fsr2l
 17920  014A84  C190  FFDA         	movff	_PortD+5,fsr2h
 17921  014A88  0101               	movlb	1	; () banked
 17922  014A8A  9EDF               	bcf	indf2,7,c
 17923                           
 17924                           ; BSR set to: 1
 17925                           ;SPI.c: 264: SSP2BUF = pData;
 17926  014A8C  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 17927  014A90                     
 17928                           ; BSR set to: 1
 17929  014A90  A06D               	btfss	3949,0,c	;volatile
 17930  014A92  D7FE               	goto	l686
 17931                           
 17932                           ;SPI.c: 266: pData = SSP2BUF;
 17933  014A94  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 17934                           
 17935                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 17936  014A98  C18F  FFD9         	movff	_PortD+4,fsr2l
 17937  014A9C  C190  FFDA         	movff	_PortD+5,fsr2h
 17938  014AA0  0101               	movlb	1	; () banked
 17939  014AA2  8EDF               	bsf	indf2,7,c
 17940                           
 17941                           ; BSR set to: 1
 17942                           ;SPI.c: 269: };
 17943                           
 17944                           ; BSR set to: 1
 17945                           ;SPI.c: 268: return pData;
 17946                           ;	Return value of _SPI_Send is never used
 17947  014AA4  0012               	return	
 17948  014AA6                     l678:
 17949                           
 17950                           ; BSR set to: 1
 17951  014AA6  0100               	movlb	0	; () banked
 17952  014AA8  EE20 F002          	lfsr	2,2
 17953  014AAC  5160               	movf	SPI_Send@pInput& (0+255),w,b
 17954  014AAE  26D9               	addwf	fsr2l,f,c
 17955  014AB0  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 17956  014AB2  22DA               	addwfc	fsr2h,f,c
 17957  014AB4  50DF               	movf	indf2,w,c
 17958                           
 17959                           ; Switch size 1, requested type "space"
 17960                           ; Number of cases is 2, Range of values is 0 to 1
 17961                           ; switch strategies available:
 17962                           ; Name         Instructions Cycles
 17963                           ; simple_byte            7     4 (average)
 17964                           ;	Chosen strategy is simple_byte
 17965  014AB6  0A00               	xorlw	0	; case 0
 17966  014AB8  B4D8               	btfsc	status,2,c
 17967  014ABA  D7CF               	goto	l679
 17968  014ABC  0A01               	xorlw	1	; case 1
 17969  014ABE  A4D8               	btfss	status,2,c
 17970  014AC0  0012               	return	
 17971  014AC2  D7DE               	goto	l684
 17972  014AC4                     __end_of_SPI_Send:
 17973                           	opt stack 0
 17974                           tosu	equ	0xFFF
 17975                           tosh	equ	0xFFE
 17976                           tosl	equ	0xFFD
 17977                           pclath	equ	0xFFA
 17978                           tblptru	equ	0xFF8
 17979                           tblptrh	equ	0xFF7
 17980                           tblptrl	equ	0xFF6
 17981                           tablat	equ	0xFF5
 17982                           prodh	equ	0xFF4
 17983                           prodl	equ	0xFF3
 17984                           intcon	equ	0xFF2
 17985                           postinc0	equ	0xFEE
 17986                           wreg	equ	0xFE8
 17987                           postdec1	equ	0xFE5
 17988                           fsr1h	equ	0xFE2
 17989                           fsr1l	equ	0xFE1
 17990                           indf2	equ	0xFDF
 17991                           postinc2	equ	0xFDE
 17992                           postdec2	equ	0xFDD
 17993                           plusw2	equ	0xFDB
 17994                           fsr2h	equ	0xFDA
 17995                           fsr2l	equ	0xFD9
 17996                           status	equ	0xFD8
 17997                           
 17998 ;; *************** function _Mode_Set *****************
 17999 ;; Defined at:
 18000 ;;		line 40 in file "Library/LCD.c"
 18001 ;; Parameters:    Size  Location     Type
 18002 ;;  pMode           1    wreg     enum E6761
 18003 ;; Auto vars:     Size  Location     Type
 18004 ;;  pMode           1    0[BANK0 ] enum E6761
 18005 ;; Return value:  Size  Location     Type
 18006 ;;                  1    wreg      void 
 18007 ;; Registers used:
 18008 ;;		wreg
 18009 ;; Tracked objects:
 18010 ;;		On entry : 0/0
 18011 ;;		On exit  : 0/0
 18012 ;;		Unchanged: 0/0
 18013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18017 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18018 ;;Total ram usage:        1 bytes
 18019 ;; Hardware stack levels used:    1
 18020 ;; Hardware stack levels required when called:    7
 18021 ;; This function calls:
 18022 ;;		Nothing
 18023 ;; This function is called by:
 18024 ;;		_LCD_Write
 18025 ;; This function uses a non-reentrant model
 18026 ;;
 18027                           
 18028                           	psect	text73
 18029  015AEC                     __ptext73:
 18030                           	opt stack 0
 18031  015AEC                     _Mode_Set:
 18032                           	opt stack 18
 18033                           
 18034                           ;incstack = 0
 18035                           ;Mode_Set@pMode stored from wreg
 18036  015AEC  0100               	movlb	0	; () banked
 18037  015AEE  6F60               	movwf	Mode_Set@pMode& (0+255),b
 18038                           
 18039                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 18040  015AF0  0100               	movlb	0	; () banked
 18041  015AF2  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 18042  015AF4  D002               	bra	u10135
 18043  015AF6  9E85               	bcf	3973,7,c	;volatile
 18044  015AF8  D001               	bra	u10136
 18045  015AFA                     u10135:
 18046  015AFA  8E85               	bsf	3973,7,c	;volatile
 18047  015AFC                     u10136:
 18048  015AFC  0012               	return		;funcret
 18049  015AFE                     __end_of_Mode_Set:
 18050                           	opt stack 0
 18051                           tosu	equ	0xFFF
 18052                           tosh	equ	0xFFE
 18053                           tosl	equ	0xFFD
 18054                           pclath	equ	0xFFA
 18055                           tblptru	equ	0xFF8
 18056                           tblptrh	equ	0xFF7
 18057                           tblptrl	equ	0xFF6
 18058                           tablat	equ	0xFF5
 18059                           prodh	equ	0xFF4
 18060                           prodl	equ	0xFF3
 18061                           intcon	equ	0xFF2
 18062                           postinc0	equ	0xFEE
 18063                           wreg	equ	0xFE8
 18064                           postdec1	equ	0xFE5
 18065                           fsr1h	equ	0xFE2
 18066                           fsr1l	equ	0xFE1
 18067                           indf2	equ	0xFDF
 18068                           postinc2	equ	0xFDE
 18069                           postdec2	equ	0xFDD
 18070                           plusw2	equ	0xFDB
 18071                           fsr2h	equ	0xFDA
 18072                           fsr2l	equ	0xFD9
 18073                           status	equ	0xFD8
 18074                           
 18075 ;; *************** function _Configure_GPIOs *****************
 18076 ;; Defined at:
 18077 ;;		line 46 in file "Library/LCD.c"
 18078 ;; Parameters:    Size  Location     Type
 18079 ;;		None
 18080 ;; Auto vars:     Size  Location     Type
 18081 ;;		None
 18082 ;; Return value:  Size  Location     Type
 18083 ;;                  1    wreg      void 
 18084 ;; Registers used:
 18085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18086 ;; Tracked objects:
 18087 ;;		On entry : 0/0
 18088 ;;		On exit  : 0/0
 18089 ;;		Unchanged: 0/0
 18090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18095 ;;Total ram usage:        0 bytes
 18096 ;; Hardware stack levels used:    1
 18097 ;; Hardware stack levels required when called:   14
 18098 ;; This function calls:
 18099 ;;		_LCD_Reset
 18100 ;;		_Port_SetPinType
 18101 ;;		_SPI_Init
 18102 ;;		_SPI_MaxSpeed
 18103 ;; This function is called by:
 18104 ;;		_LCD_Init
 18105 ;; This function uses a non-reentrant model
 18106 ;;
 18107                           
 18108                           	psect	text74
 18109  014D8C                     __ptext74:
 18110                           	opt stack 0
 18111  014D8C                     _Configure_GPIOs:
 18112                           	opt stack 15
 18113                           
 18114                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 18115                           
 18116                           ;incstack = 0
 18117  014D8C  0EA9               	movlw	low _PortF
 18118  014D8E  0100               	movlb	0	; () banked
 18119  014D90  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18120  014D92  0E01               	movlw	high _PortF
 18121  014D94  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18122  014D96  0E07               	movlw	7
 18123  014D98  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18124  014D9A  0E03               	movlw	3
 18125  014D9C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18126  014D9E  ECF7  F092         	call	_Port_SetPinType	;wreg free
 18127                           
 18128                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 18129  014DA2  0EA9               	movlw	low _PortF
 18130  014DA4  0100               	movlb	0	; () banked
 18131  014DA6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18132  014DA8  0E01               	movlw	high _PortF
 18133  014DAA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18134  014DAC  0E06               	movlw	6
 18135  014DAE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18136  014DB0  0E03               	movlw	3
 18137  014DB2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18138  014DB4  ECF7  F092         	call	_Port_SetPinType	;wreg free
 18139                           
 18140                           ;LCD.c: 55: LCD_Reset();
 18141  014DB8  EC46  F0A8         	call	_LCD_Reset	;wreg free
 18142                           
 18143                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 18144  014DBC  0EC0               	movlw	192
 18145  014DBE  0100               	movlb	0	; () banked
 18146  014DC0  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 18147  014DC2  0EC6               	movlw	198
 18148  014DC4  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18149  014DC6  0E2D               	movlw	45
 18150  014DC8  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18151  014DCA  0E00               	movlw	0
 18152  014DCC  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18153  014DCE  0E01               	movlw	1
 18154  014DD0  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 18155  014DD2  0E01               	movlw	1
 18156  014DD4  6F92               	movwf	SPI_Init@pMode& (0+255),b
 18157  014DD6  EC8F  F082         	call	_SPI_Init	;wreg free
 18158                           
 18159                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 18160  014DDA  0E6C               	movlw	low _SPI2
 18161  014DDC  0100               	movlb	0	; () banked
 18162  014DDE  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 18163  014DE0  0E01               	movlw	high _SPI2
 18164  014DE2  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 18165  014DE4  EC97  F0A5         	call	_SPI_MaxSpeed	;wreg free
 18166  014DE8  0012               	return		;funcret
 18167  014DEA                     __end_of_Configure_GPIOs:
 18168                           	opt stack 0
 18169                           tosu	equ	0xFFF
 18170                           tosh	equ	0xFFE
 18171                           tosl	equ	0xFFD
 18172                           pclath	equ	0xFFA
 18173                           tblptru	equ	0xFF8
 18174                           tblptrh	equ	0xFF7
 18175                           tblptrl	equ	0xFF6
 18176                           tablat	equ	0xFF5
 18177                           prodh	equ	0xFF4
 18178                           prodl	equ	0xFF3
 18179                           intcon	equ	0xFF2
 18180                           postinc0	equ	0xFEE
 18181                           wreg	equ	0xFE8
 18182                           postdec1	equ	0xFE5
 18183                           fsr1h	equ	0xFE2
 18184                           fsr1l	equ	0xFE1
 18185                           indf2	equ	0xFDF
 18186                           postinc2	equ	0xFDE
 18187                           postdec2	equ	0xFDD
 18188                           plusw2	equ	0xFDB
 18189                           fsr2h	equ	0xFDA
 18190                           fsr2l	equ	0xFD9
 18191                           status	equ	0xFD8
 18192                           
 18193 ;; *************** function _SPI_MaxSpeed *****************
 18194 ;; Defined at:
 18195 ;;		line 201 in file "Library/SPI.c"
 18196 ;; Parameters:    Size  Location     Type
 18197 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18198 ;;		 -> SPI2(11), 
 18199 ;; Auto vars:     Size  Location     Type
 18200 ;;		None
 18201 ;; Return value:  Size  Location     Type
 18202 ;;                  1    wreg      void 
 18203 ;; Registers used:
 18204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18205 ;; Tracked objects:
 18206 ;;		On entry : 0/0
 18207 ;;		On exit  : 0/0
 18208 ;;		Unchanged: 0/0
 18209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18214 ;;Total ram usage:        2 bytes
 18215 ;; Hardware stack levels used:    1
 18216 ;; Hardware stack levels required when called:    9
 18217 ;; This function calls:
 18218 ;;		_Byte_SetBit
 18219 ;;		_Byte_SetQuad
 18220 ;; This function is called by:
 18221 ;;		_Configure_GPIOs
 18222 ;; This function uses a non-reentrant model
 18223 ;;
 18224                           
 18225                           	psect	text75
 18226  014B2E                     __ptext75:
 18227                           	opt stack 0
 18228  014B2E                     _SPI_MaxSpeed:
 18229                           	opt stack 19
 18230                           
 18231                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18232                           
 18233                           ;incstack = 0
 18234  014B2E  0100               	movlb	0	; () banked
 18235  014B30  EE20 F006          	lfsr	2,6
 18236  014B34  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18237  014B36  26D9               	addwf	fsr2l,f,c
 18238  014B38  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18239  014B3A  22DA               	addwfc	fsr2h,f,c
 18240  014B3C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18241  014B40  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18242  014B44  0E05               	movlw	5
 18243  014B46  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 18244  014B48  0E00               	movlw	0
 18245  014B4A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18246  014B4C  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 18247                           
 18248                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 18249  014B50  0100               	movlb	0	; () banked
 18250  014B52  EE20 F006          	lfsr	2,6
 18251  014B56  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18252  014B58  26D9               	addwf	fsr2l,f,c
 18253  014B5A  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18254  014B5C  22DA               	addwfc	fsr2h,f,c
 18255  014B5E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18256  014B62  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18257  014B66  0E00               	movlw	0
 18258  014B68  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 18259  014B6A  0E00               	movlw	0
 18260  014B6C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18261  014B6E  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 18262                           
 18263                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 18264  014B72  0100               	movlb	0	; () banked
 18265  014B74  EE20 F006          	lfsr	2,6
 18266  014B78  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18267  014B7A  26D9               	addwf	fsr2l,f,c
 18268  014B7C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 18269  014B7E  22DA               	addwfc	fsr2h,f,c
 18270  014B80  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18271  014B84  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18272  014B88  0E05               	movlw	5
 18273  014B8A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 18274  014B8C  0E01               	movlw	1
 18275  014B8E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18276  014B90  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 18277  014B94  0012               	return		;funcret
 18278  014B96                     __end_of_SPI_MaxSpeed:
 18279                           	opt stack 0
 18280                           tosu	equ	0xFFF
 18281                           tosh	equ	0xFFE
 18282                           tosl	equ	0xFFD
 18283                           pclath	equ	0xFFA
 18284                           tblptru	equ	0xFF8
 18285                           tblptrh	equ	0xFF7
 18286                           tblptrl	equ	0xFF6
 18287                           tablat	equ	0xFF5
 18288                           prodh	equ	0xFF4
 18289                           prodl	equ	0xFF3
 18290                           intcon	equ	0xFF2
 18291                           postinc0	equ	0xFEE
 18292                           wreg	equ	0xFE8
 18293                           postdec1	equ	0xFE5
 18294                           fsr1h	equ	0xFE2
 18295                           fsr1l	equ	0xFE1
 18296                           indf2	equ	0xFDF
 18297                           postinc2	equ	0xFDE
 18298                           postdec2	equ	0xFDD
 18299                           plusw2	equ	0xFDB
 18300                           fsr2h	equ	0xFDA
 18301                           fsr2l	equ	0xFD9
 18302                           status	equ	0xFD8
 18303                           
 18304 ;; *************** function _LCD_Reset *****************
 18305 ;; Defined at:
 18306 ;;		line 95 in file "Library/LCD.c"
 18307 ;; Parameters:    Size  Location     Type
 18308 ;;		None
 18309 ;; Auto vars:     Size  Location     Type
 18310 ;;		None
 18311 ;; Return value:  Size  Location     Type
 18312 ;;                  1    wreg      void 
 18313 ;; Registers used:
 18314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18315 ;; Tracked objects:
 18316 ;;		On entry : 0/0
 18317 ;;		On exit  : 0/0
 18318 ;;		Unchanged: 0/0
 18319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18324 ;;Total ram usage:        0 bytes
 18325 ;; Hardware stack levels used:    1
 18326 ;; Hardware stack levels required when called:   13
 18327 ;; This function calls:
 18328 ;;		_LED_Toggle
 18329 ;;		_Reset_High
 18330 ;;		_Reset_Low
 18331 ;;		_delay_ms
 18332 ;; This function is called by:
 18333 ;;		_Configure_GPIOs
 18334 ;; This function uses a non-reentrant model
 18335 ;;
 18336                           
 18337                           	psect	text76
 18338  01508C                     __ptext76:
 18339                           	opt stack 0
 18340  01508C                     _LCD_Reset:
 18341                           	opt stack 15
 18342                           
 18343                           ;LCD.c: 97: Reset_High();
 18344                           
 18345                           ;incstack = 0
 18346  01508C  ECEA  F0AC         	call	_Reset_High	;wreg free
 18347                           
 18348                           ;LCD.c: 98: LED_Toggle(eLED2);
 18349  015090  0E01               	movlw	1
 18350  015092  ECD8  F0A9         	call	_LED_Toggle
 18351                           
 18352                           ;LCD.c: 99: delay_ms(0x80);
 18353  015096  0E00               	movlw	0
 18354  015098  0100               	movlb	0	; () banked
 18355  01509A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18356  01509C  0E80               	movlw	128
 18357  01509E  6F60               	movwf	delay_ms@ms& (0+255),b
 18358  0150A0  ECF5  F0A6         	call	_delay_ms	;wreg free
 18359                           
 18360                           ;LCD.c: 100: LED_Toggle(eLED2);
 18361  0150A4  0E01               	movlw	1
 18362  0150A6  ECD8  F0A9         	call	_LED_Toggle
 18363                           
 18364                           ;LCD.c: 101: Reset_Low();
 18365  0150AA  ECDE  F0AC         	call	_Reset_Low	;wreg free
 18366                           
 18367                           ;LCD.c: 102: delay_ms(0x80);
 18368  0150AE  0E00               	movlw	0
 18369  0150B0  0100               	movlb	0	; () banked
 18370  0150B2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18371  0150B4  0E80               	movlw	128
 18372  0150B6  6F60               	movwf	delay_ms@ms& (0+255),b
 18373  0150B8  ECF5  F0A6         	call	_delay_ms	;wreg free
 18374                           
 18375                           ;LCD.c: 103: LED_Toggle(eLED2);
 18376  0150BC  0E01               	movlw	1
 18377  0150BE  ECD8  F0A9         	call	_LED_Toggle
 18378                           
 18379                           ;LCD.c: 104: Reset_High();
 18380  0150C2  ECEA  F0AC         	call	_Reset_High	;wreg free
 18381                           
 18382                           ;LCD.c: 105: delay_ms(0x80);
 18383  0150C6  0E00               	movlw	0
 18384  0150C8  0100               	movlb	0	; () banked
 18385  0150CA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 18386  0150CC  0E80               	movlw	128
 18387  0150CE  6F60               	movwf	delay_ms@ms& (0+255),b
 18388  0150D0  ECF5  F0A6         	call	_delay_ms	;wreg free
 18389                           
 18390                           ;LCD.c: 106: LED_Toggle(eLED2);
 18391  0150D4  0E01               	movlw	1
 18392  0150D6  ECD8  F0A9         	call	_LED_Toggle
 18393  0150DA  0012               	return		;funcret
 18394  0150DC                     __end_of_LCD_Reset:
 18395                           	opt stack 0
 18396                           tosu	equ	0xFFF
 18397                           tosh	equ	0xFFE
 18398                           tosl	equ	0xFFD
 18399                           pclath	equ	0xFFA
 18400                           tblptru	equ	0xFF8
 18401                           tblptrh	equ	0xFF7
 18402                           tblptrl	equ	0xFF6
 18403                           tablat	equ	0xFF5
 18404                           prodh	equ	0xFF4
 18405                           prodl	equ	0xFF3
 18406                           intcon	equ	0xFF2
 18407                           postinc0	equ	0xFEE
 18408                           wreg	equ	0xFE8
 18409                           postdec1	equ	0xFE5
 18410                           fsr1h	equ	0xFE2
 18411                           fsr1l	equ	0xFE1
 18412                           indf2	equ	0xFDF
 18413                           postinc2	equ	0xFDE
 18414                           postdec2	equ	0xFDD
 18415                           plusw2	equ	0xFDB
 18416                           fsr2h	equ	0xFDA
 18417                           fsr2l	equ	0xFD9
 18418                           status	equ	0xFD8
 18419                           
 18420 ;; *************** function _delay_ms *****************
 18421 ;; Defined at:
 18422 ;;		line 240 in file "Library/Types.c"
 18423 ;; Parameters:    Size  Location     Type
 18424 ;;  ms              2    0[BANK0 ] unsigned short 
 18425 ;; Auto vars:     Size  Location     Type
 18426 ;;  u               4    2[BANK0 ] volatile unsigned long 
 18427 ;; Return value:  Size  Location     Type
 18428 ;;                  1    wreg      void 
 18429 ;; Registers used:
 18430 ;;		wreg, status,2, status,0
 18431 ;; Tracked objects:
 18432 ;;		On entry : 0/0
 18433 ;;		On exit  : 0/0
 18434 ;;		Unchanged: 0/0
 18435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18436 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18437 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18439 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18440 ;;Total ram usage:        6 bytes
 18441 ;; Hardware stack levels used:    1
 18442 ;; Hardware stack levels required when called:    7
 18443 ;; This function calls:
 18444 ;;		Nothing
 18445 ;; This function is called by:
 18446 ;;		_LCD_Reset
 18447 ;;		_LCD_Init
 18448 ;;		_MXK_Init
 18449 ;;		_SteppingCCW
 18450 ;;		_SteppingCW
 18451 ;; This function uses a non-reentrant model
 18452 ;;
 18453                           
 18454                           	psect	text77
 18455  014DEA                     __ptext77:
 18456                           	opt stack 0
 18457  014DEA                     _delay_ms:
 18458                           	opt stack 22
 18459                           
 18460                           ;Types.c: 242: volatile unsigned long u;
 18461                           ;Types.c: 243: while (ms--)
 18462                           
 18463                           ;incstack = 0
 18464  014DEA  D01B               	goto	u11680
 18465  014DEC                     l14237:
 18466                           
 18467                           ;Types.c: 244: {
 18468                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 18469  014DEC  0E00               	movlw	0
 18470  014DEE  0100               	movlb	0	; () banked
 18471  014DF0  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 18472  014DF2  0E00               	movlw	0
 18473  014DF4  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 18474  014DF6  0E00               	movlw	0
 18475  014DF8  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 18476  014DFA  0E00               	movlw	0
 18477  014DFC  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 18478  014DFE                     l14239:
 18479                           
 18480                           ; BSR set to: 0
 18481  014DFE  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 18482  014E00  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 18483  014E02  E10F               	bnz	l14245
 18484  014E04  0EB0               	movlw	176
 18485  014E06  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 18486  014E08  0E04               	movlw	4
 18487  014E0A  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 18488  014E0C  B0D8               	btfsc	status,0,c
 18489  014E0E  D009               	goto	u11680
 18490                           
 18491                           ; BSR set to: 0
 18492                           
 18493                           ; BSR set to: 0
 18494  014E10  F000               	nop		; ;# 
 18495  014E12  0E01               	movlw	1
 18496  014E14  0100               	movlb	0	; () banked
 18497  014E16  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 18498  014E18  0E00               	movlw	0
 18499  014E1A  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 18500  014E1C  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 18501  014E1E  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 18502  014E20  D7EE               	goto	l14239
 18503  014E22                     u11680:
 18504  014E22                     l14245:
 18505  014E22  0100               	movlb	0	; () banked
 18506  014E24  0760               	decf	delay_ms@ms& (0+255),f,b
 18507  014E26  A0D8               	btfss	status,0,c
 18508  014E28  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 18509  014E2A  2960               	incf	delay_ms@ms& (0+255),w,b
 18510  014E2C  E1DF               	bnz	l14237
 18511  014E2E  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 18512  014E30  A4D8               	btfss	status,2,c
 18513  014E32  D7DC               	goto	l824
 18514                           
 18515                           ; BSR set to: 0
 18516                           ;Types.c: 251: }
 18517                           ;Types.c: 252: }
 18518                           ;Types.c: 253: u = 0x8008;
 18519                           
 18520                           ; BSR set to: 0
 18521  014E34  0E08               	movlw	8
 18522  014E36  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 18523  014E38  0E80               	movlw	128
 18524  014E3A  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 18525  014E3C  0E00               	movlw	0
 18526  014E3E  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 18527  014E40  0E00               	movlw	0
 18528  014E42  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 18529                           
 18530                           ; BSR set to: 0
 18531  014E44  0012               	return		;funcret
 18532  014E46                     __end_of_delay_ms:
 18533                           	opt stack 0
 18534                           tosu	equ	0xFFF
 18535                           tosh	equ	0xFFE
 18536                           tosl	equ	0xFFD
 18537                           pclath	equ	0xFFA
 18538                           tblptru	equ	0xFF8
 18539                           tblptrh	equ	0xFF7
 18540                           tblptrl	equ	0xFF6
 18541                           tablat	equ	0xFF5
 18542                           prodh	equ	0xFF4
 18543                           prodl	equ	0xFF3
 18544                           intcon	equ	0xFF2
 18545                           postinc0	equ	0xFEE
 18546                           wreg	equ	0xFE8
 18547                           postdec1	equ	0xFE5
 18548                           fsr1h	equ	0xFE2
 18549                           fsr1l	equ	0xFE1
 18550                           indf2	equ	0xFDF
 18551                           postinc2	equ	0xFDE
 18552                           postdec2	equ	0xFDD
 18553                           plusw2	equ	0xFDB
 18554                           fsr2h	equ	0xFDA
 18555                           fsr2l	equ	0xFD9
 18556                           status	equ	0xFD8
 18557                           
 18558 ;; *************** function _Reset_Low *****************
 18559 ;; Defined at:
 18560 ;;		line 32 in file "Library/LCD.c"
 18561 ;; Parameters:    Size  Location     Type
 18562 ;;		None
 18563 ;; Auto vars:     Size  Location     Type
 18564 ;;		None
 18565 ;; Return value:  Size  Location     Type
 18566 ;;                  1    wreg      void 
 18567 ;; Registers used:
 18568 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18569 ;; Tracked objects:
 18570 ;;		On entry : 0/0
 18571 ;;		On exit  : 0/0
 18572 ;;		Unchanged: 0/0
 18573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18578 ;;Total ram usage:        0 bytes
 18579 ;; Hardware stack levels used:    1
 18580 ;; Hardware stack levels required when called:   11
 18581 ;; This function calls:
 18582 ;;		_Port_SetPin
 18583 ;; This function is called by:
 18584 ;;		_LCD_Reset
 18585 ;; This function uses a non-reentrant model
 18586 ;;
 18587                           
 18588                           	psect	text78
 18589  0159BC                     __ptext78:
 18590                           	opt stack 0
 18591  0159BC                     _Reset_Low:
 18592                           	opt stack 16
 18593                           
 18594                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 18595                           
 18596                           ; BSR set to: 0
 18597                           ;incstack = 0
 18598  0159BC  0EA9               	movlw	low _PortF
 18599  0159BE  0100               	movlb	0	; () banked
 18600  0159C0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18601  0159C2  0E01               	movlw	high _PortF
 18602  0159C4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18603  0159C6  0E06               	movlw	6
 18604  0159C8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18605  0159CA  0E01               	movlw	1
 18606  0159CC  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18607  0159CE  EC5D  F09E         	call	_Port_SetPin	;wreg free
 18608  0159D2  0012               	return		;funcret
 18609  0159D4                     __end_of_Reset_Low:
 18610                           	opt stack 0
 18611                           tosu	equ	0xFFF
 18612                           tosh	equ	0xFFE
 18613                           tosl	equ	0xFFD
 18614                           pclath	equ	0xFFA
 18615                           tblptru	equ	0xFF8
 18616                           tblptrh	equ	0xFF7
 18617                           tblptrl	equ	0xFF6
 18618                           tablat	equ	0xFF5
 18619                           prodh	equ	0xFF4
 18620                           prodl	equ	0xFF3
 18621                           intcon	equ	0xFF2
 18622                           postinc0	equ	0xFEE
 18623                           wreg	equ	0xFE8
 18624                           postdec1	equ	0xFE5
 18625                           fsr1h	equ	0xFE2
 18626                           fsr1l	equ	0xFE1
 18627                           indf2	equ	0xFDF
 18628                           postinc2	equ	0xFDE
 18629                           postdec2	equ	0xFDD
 18630                           plusw2	equ	0xFDB
 18631                           fsr2h	equ	0xFDA
 18632                           fsr2l	equ	0xFD9
 18633                           status	equ	0xFD8
 18634                           
 18635 ;; *************** function _Reset_High *****************
 18636 ;; Defined at:
 18637 ;;		line 36 in file "Library/LCD.c"
 18638 ;; Parameters:    Size  Location     Type
 18639 ;;		None
 18640 ;; Auto vars:     Size  Location     Type
 18641 ;;		None
 18642 ;; Return value:  Size  Location     Type
 18643 ;;                  1    wreg      void 
 18644 ;; Registers used:
 18645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18646 ;; Tracked objects:
 18647 ;;		On entry : 0/0
 18648 ;;		On exit  : 0/0
 18649 ;;		Unchanged: 0/0
 18650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18655 ;;Total ram usage:        0 bytes
 18656 ;; Hardware stack levels used:    1
 18657 ;; Hardware stack levels required when called:   11
 18658 ;; This function calls:
 18659 ;;		_Port_SetPin
 18660 ;; This function is called by:
 18661 ;;		_LCD_Reset
 18662 ;; This function uses a non-reentrant model
 18663 ;;
 18664                           
 18665                           	psect	text79
 18666  0159D4                     __ptext79:
 18667                           	opt stack 0
 18668  0159D4                     _Reset_High:
 18669                           	opt stack 16
 18670                           
 18671                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 18672                           
 18673                           ;incstack = 0
 18674  0159D4  0EA9               	movlw	low _PortF
 18675  0159D6  0100               	movlb	0	; () banked
 18676  0159D8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18677  0159DA  0E01               	movlw	high _PortF
 18678  0159DC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18679  0159DE  0E06               	movlw	6
 18680  0159E0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18681  0159E2  0E00               	movlw	0
 18682  0159E4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18683  0159E6  EC5D  F09E         	call	_Port_SetPin	;wreg free
 18684  0159EA  0012               	return		;funcret
 18685  0159EC                     __end_of_Reset_High:
 18686                           	opt stack 0
 18687                           tosu	equ	0xFFF
 18688                           tosh	equ	0xFFE
 18689                           tosl	equ	0xFFD
 18690                           pclath	equ	0xFFA
 18691                           tblptru	equ	0xFF8
 18692                           tblptrh	equ	0xFF7
 18693                           tblptrl	equ	0xFF6
 18694                           tablat	equ	0xFF5
 18695                           prodh	equ	0xFF4
 18696                           prodl	equ	0xFF3
 18697                           intcon	equ	0xFF2
 18698                           postinc0	equ	0xFEE
 18699                           wreg	equ	0xFE8
 18700                           postdec1	equ	0xFE5
 18701                           fsr1h	equ	0xFE2
 18702                           fsr1l	equ	0xFE1
 18703                           indf2	equ	0xFDF
 18704                           postinc2	equ	0xFDE
 18705                           postdec2	equ	0xFDD
 18706                           plusw2	equ	0xFDB
 18707                           fsr2h	equ	0xFDA
 18708                           fsr2l	equ	0xFD9
 18709                           status	equ	0xFD8
 18710                           
 18711 ;; *************** function _Init_Timer0 *****************
 18712 ;; Defined at:
 18713 ;;		line 68 in file "main.c"
 18714 ;; Parameters:    Size  Location     Type
 18715 ;;		None
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;		None
 18718 ;; Return value:  Size  Location     Type
 18719 ;;                  2  2130[None  ] int 
 18720 ;; Registers used:
 18721 ;;		None
 18722 ;; Tracked objects:
 18723 ;;		On entry : 0/0
 18724 ;;		On exit  : 0/0
 18725 ;;		Unchanged: 0/0
 18726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18731 ;;Total ram usage:        0 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; Hardware stack levels required when called:    7
 18734 ;; This function calls:
 18735 ;;		Nothing
 18736 ;; This function is called by:
 18737 ;;		_main
 18738 ;; This function uses a non-reentrant model
 18739 ;;
 18740                           
 18741                           	psect	text80
 18742  0159EC                     __ptext80:
 18743                           	opt stack 0
 18744  0159EC                     _Init_Timer0:
 18745                           	opt stack 23
 18746                           
 18747                           ;main.c: 70: T0CONbits.TMR0ON = 1;
 18748                           
 18749                           ;incstack = 0
 18750  0159EC  8ED5               	bsf	4053,7,c	;volatile
 18751                           
 18752                           ;main.c: 71: T0CONbits.T08BIT = 1;
 18753  0159EE  8CD5               	bsf	4053,6,c	;volatile
 18754                           
 18755                           ;main.c: 72: T0CONbits.T0CS=0;
 18756  0159F0  9AD5               	bcf	4053,5,c	;volatile
 18757                           
 18758                           ;main.c: 73: T0CONbits.T0SE=0;
 18759  0159F2  98D5               	bcf	4053,4,c	;volatile
 18760                           
 18761                           ;main.c: 74: T0CONbits.PSA=0;
 18762  0159F4  96D5               	bcf	4053,3,c	;volatile
 18763                           
 18764                           ;main.c: 75: T0CONbits.T0PS2=1;
 18765  0159F6  84D5               	bsf	4053,2,c	;volatile
 18766                           
 18767                           ;main.c: 76: T0CONbits.T0PS1=1;
 18768  0159F8  82D5               	bsf	4053,1,c	;volatile
 18769                           
 18770                           ;main.c: 77: T0CONbits.T0PS0=1;
 18771  0159FA  80D5               	bsf	4053,0,c	;volatile
 18772                           
 18773                           ;main.c: 79: INTCONbits.TMR0IE = 1;
 18774  0159FC  8AF2               	bsf	intcon,5,c	;volatile
 18775                           
 18776                           ;main.c: 80: INTCONbits.PEIE = 1;
 18777  0159FE  8CF2               	bsf	intcon,6,c	;volatile
 18778                           
 18779                           ;main.c: 81: INTCONbits.GIE = 1;
 18780  015A00  8EF2               	bsf	intcon,7,c	;volatile
 18781  015A02  0012               	return		;funcret
 18782  015A04                     __end_of_Init_Timer0:
 18783                           	opt stack 0
 18784                           tosu	equ	0xFFF
 18785                           tosh	equ	0xFFE
 18786                           tosl	equ	0xFFD
 18787                           pclath	equ	0xFFA
 18788                           tblptru	equ	0xFF8
 18789                           tblptrh	equ	0xFF7
 18790                           tblptrl	equ	0xFF6
 18791                           tablat	equ	0xFF5
 18792                           prodh	equ	0xFF4
 18793                           prodl	equ	0xFF3
 18794                           intcon	equ	0xFF2
 18795                           postinc0	equ	0xFEE
 18796                           wreg	equ	0xFE8
 18797                           postdec1	equ	0xFE5
 18798                           fsr1h	equ	0xFE2
 18799                           fsr1l	equ	0xFE1
 18800                           indf2	equ	0xFDF
 18801                           postinc2	equ	0xFDE
 18802                           postdec2	equ	0xFDD
 18803                           plusw2	equ	0xFDB
 18804                           fsr2h	equ	0xFDA
 18805                           fsr2l	equ	0xFD9
 18806                           status	equ	0xFD8
 18807                           
 18808 ;; *************** function _InitSerialCommunication *****************
 18809 ;; Defined at:
 18810 ;;		line 91 in file "main.c"
 18811 ;; Parameters:    Size  Location     Type
 18812 ;;		None
 18813 ;; Auto vars:     Size  Location     Type
 18814 ;;		None
 18815 ;; Return value:  Size  Location     Type
 18816 ;;                  1    wreg      void 
 18817 ;; Registers used:
 18818 ;;		wreg, status,2
 18819 ;; Tracked objects:
 18820 ;;		On entry : 0/0
 18821 ;;		On exit  : 0/0
 18822 ;;		Unchanged: 0/0
 18823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18828 ;;Total ram usage:        0 bytes
 18829 ;; Hardware stack levels used:    1
 18830 ;; Hardware stack levels required when called:    7
 18831 ;; This function calls:
 18832 ;;		Nothing
 18833 ;; This function is called by:
 18834 ;;		_main
 18835 ;; This function uses a non-reentrant model
 18836 ;;
 18837                           
 18838                           	psect	text81
 18839  015914                     __ptext81:
 18840                           	opt stack 0
 18841  015914                     _InitSerialCommunication:
 18842                           	opt stack 23
 18843                           
 18844                           ;main.c: 93: TRISCbits.TRISC6 = 0;
 18845                           
 18846                           ;incstack = 0
 18847  015914  9C94               	bcf	3988,6,c	;volatile
 18848                           
 18849                           ;main.c: 94: TRISCbits.TRISC7 = 1;
 18850  015916  8E94               	bsf	3988,7,c	;volatile
 18851                           
 18852                           ;main.c: 96: TXSTA1 = 0b00100100;
 18853  015918  0E24               	movlw	36
 18854  01591A  6EAD               	movwf	4013,c	;volatile
 18855                           
 18856                           ;main.c: 97: RCSTA1 = 0b10010000;
 18857  01591C  0E90               	movlw	144
 18858  01591E  6EAC               	movwf	4012,c	;volatile
 18859                           
 18860                           ;main.c: 99: BAUDCON1bits.DTRXP = 0;
 18861  015920  9A7E               	bcf	3966,5,c	;volatile
 18862                           
 18863                           ;main.c: 100: BAUDCON1bits.SCKP = 0;
 18864  015922  987E               	bcf	3966,4,c	;volatile
 18865                           
 18866                           ;main.c: 101: BAUDCON1bits.WUE = 0;
 18867  015924  927E               	bcf	3966,1,c	;volatile
 18868                           
 18869                           ;main.c: 102: BAUDCON1bits.ABDEN = 0;
 18870  015926  907E               	bcf	3966,0,c	;volatile
 18871                           
 18872                           ;main.c: 105: TXSTA1bits.BRGH = 1;
 18873  015928  84AD               	bsf	4013,2,c	;volatile
 18874                           
 18875                           ;main.c: 106: BAUDCON1bits.BRG16 = 0;
 18876  01592A  967E               	bcf	3966,3,c	;volatile
 18877                           
 18878                           ;main.c: 107: SPBRG1 = 51;
 18879  01592C  0E33               	movlw	51
 18880  01592E  6EB0               	movwf	4016,c	;volatile
 18881  015930  0012               	return		;funcret
 18882  015932                     __end_of_InitSerialCommunication:
 18883                           	opt stack 0
 18884                           tosu	equ	0xFFF
 18885                           tosh	equ	0xFFE
 18886                           tosl	equ	0xFFD
 18887                           pclath	equ	0xFFA
 18888                           tblptru	equ	0xFF8
 18889                           tblptrh	equ	0xFF7
 18890                           tblptrl	equ	0xFF6
 18891                           tablat	equ	0xFF5
 18892                           prodh	equ	0xFF4
 18893                           prodl	equ	0xFF3
 18894                           intcon	equ	0xFF2
 18895                           postinc0	equ	0xFEE
 18896                           wreg	equ	0xFE8
 18897                           postdec1	equ	0xFE5
 18898                           fsr1h	equ	0xFE2
 18899                           fsr1l	equ	0xFE1
 18900                           indf2	equ	0xFDF
 18901                           postinc2	equ	0xFDE
 18902                           postdec2	equ	0xFDD
 18903                           plusw2	equ	0xFDB
 18904                           fsr2h	equ	0xFDA
 18905                           fsr2l	equ	0xFD9
 18906                           status	equ	0xFD8
 18907                           
 18908 ;; *************** function _InitADC *****************
 18909 ;; Defined at:
 18910 ;;		line 34 in file "dans.c"
 18911 ;; Parameters:    Size  Location     Type
 18912 ;;		None
 18913 ;; Auto vars:     Size  Location     Type
 18914 ;;		None
 18915 ;; Return value:  Size  Location     Type
 18916 ;;                  1    wreg      void 
 18917 ;; Registers used:
 18918 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18919 ;; Tracked objects:
 18920 ;;		On entry : 0/0
 18921 ;;		On exit  : 0/0
 18922 ;;		Unchanged: 0/0
 18923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18927 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18928 ;;Total ram usage:        1 bytes
 18929 ;; Hardware stack levels used:    1
 18930 ;; Hardware stack levels required when called:    7
 18931 ;; This function calls:
 18932 ;;		Nothing
 18933 ;; This function is called by:
 18934 ;;		_main
 18935 ;; This function uses a non-reentrant model
 18936 ;;
 18937                           
 18938                           	psect	text82
 18939  01512C                     __ptext82:
 18940                           	opt stack 0
 18941  01512C                     _InitADC:
 18942                           	opt stack 23
 18943                           
 18944                           ;dans.c: 36: ADCON1 = 0b10101101;
 18945                           
 18946                           ;incstack = 0
 18947  01512C  0EAD               	movlw	173
 18948  01512E  6EC1               	movwf	4033,c	;volatile
 18949                           
 18950                           ;dans.c: 37: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 18951  015130  0E00               	movlw	0
 18952  015132  0101               	movlb	1	; () banked
 18953  015134  6F43               	movwf	(_thisReading+1)& (0+255),b
 18954  015136  0E00               	movlw	0
 18955  015138  6F42               	movwf	_thisReading& (0+255),b
 18956  01513A  D010               	goto	l2321
 18957  01513C                     
 18958                           ;dans.c: 38: readings[thisReading] = 0;
 18959                           
 18960                           ; BSR set to: 1
 18961  01513C  90D8               	bcf	status,0,c
 18962  01513E  0101               	movlb	1	; () banked
 18963  015140  3542               	rlcf	_thisReading& (0+255),w,b
 18964  015142  6ED9               	movwf	fsr2l,c
 18965  015144  3543               	rlcf	(_thisReading+1)& (0+255),w,b
 18966  015146  6EDA               	movwf	fsr2h,c
 18967  015148  0E46               	movlw	low _readings
 18968  01514A  26D9               	addwf	fsr2l,f,c
 18969  01514C  0E02               	movlw	high _readings
 18970  01514E  22DA               	addwfc	fsr2h,f,c
 18971  015150  0E00               	movlw	0
 18972  015152  6EDE               	movwf	postinc2,c
 18973  015154  0E00               	movlw	0
 18974  015156  6EDD               	movwf	postdec2,c
 18975                           
 18976                           ; BSR set to: 1
 18977  015158  4B42               	infsnz	_thisReading& (0+255),f,b
 18978  01515A  2B43               	incf	(_thisReading+1)& (0+255),f,b
 18979  01515C                     l2321:
 18980                           
 18981                           ; BSR set to: 1
 18982                           
 18983                           ; BSR set to: 1
 18984  01515C  51F1               	movf	_numReadings& (0+255),w,b
 18985  01515E  5D42               	subwf	_thisReading& (0+255),w,b
 18986  015160  5143               	movf	(_thisReading+1)& (0+255),w,b
 18987  015162  0A80               	xorlw	128
 18988  015164  0100               	movlb	0	; () banked
 18989  015166  6F60               	movwf	??_InitADC& (0+255),b
 18990  015168  0101               	movlb	1	; () banked
 18991  01516A  51F2               	movf	(_numReadings+1)& (0+255),w,b
 18992  01516C  0A80               	xorlw	128
 18993  01516E  0100               	movlb	0	; () banked
 18994  015170  5960               	subwfb	??_InitADC& (0+255),w,b
 18995  015172  B0D8               	btfsc	status,0,c
 18996  015174  0012               	return	
 18997  015176  D7E2               	goto	l2322
 18998  015178                     __end_of_InitADC:
 18999                           	opt stack 0
 19000                           tosu	equ	0xFFF
 19001                           tosh	equ	0xFFE
 19002                           tosl	equ	0xFFD
 19003                           pclath	equ	0xFFA
 19004                           tblptru	equ	0xFF8
 19005                           tblptrh	equ	0xFF7
 19006                           tblptrl	equ	0xFF6
 19007                           tablat	equ	0xFF5
 19008                           prodh	equ	0xFF4
 19009                           prodl	equ	0xFF3
 19010                           intcon	equ	0xFF2
 19011                           postinc0	equ	0xFEE
 19012                           wreg	equ	0xFE8
 19013                           postdec1	equ	0xFE5
 19014                           fsr1h	equ	0xFE2
 19015                           fsr1l	equ	0xFE1
 19016                           indf2	equ	0xFDF
 19017                           postinc2	equ	0xFDE
 19018                           postdec2	equ	0xFDD
 19019                           plusw2	equ	0xFDB
 19020                           fsr2h	equ	0xFDA
 19021                           fsr2l	equ	0xFD9
 19022                           status	equ	0xFD8
 19023                           
 19024 ;; *************** function _ISR_Enable *****************
 19025 ;; Defined at:
 19026 ;;		line 27 in file "Library/ISR.c"
 19027 ;; Parameters:    Size  Location     Type
 19028 ;;		None
 19029 ;; Auto vars:     Size  Location     Type
 19030 ;;		None
 19031 ;; Return value:  Size  Location     Type
 19032 ;;                  1    wreg      void 
 19033 ;; Registers used:
 19034 ;;		None
 19035 ;; Tracked objects:
 19036 ;;		On entry : 0/0
 19037 ;;		On exit  : 0/0
 19038 ;;		Unchanged: 0/0
 19039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19044 ;;Total ram usage:        0 bytes
 19045 ;; Hardware stack levels used:    1
 19046 ;; Hardware stack levels required when called:    7
 19047 ;; This function calls:
 19048 ;;		Nothing
 19049 ;; This function is called by:
 19050 ;;		_main
 19051 ;; This function uses a non-reentrant model
 19052 ;;
 19053                           
 19054                           	psect	text83
 19055  015B66                     __ptext83:
 19056                           	opt stack 0
 19057  015B66                     _ISR_Enable:
 19058                           	opt stack 23
 19059                           
 19060                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19061                           
 19062                           ; BSR set to: 0
 19063                           ;incstack = 0
 19064  015B66  8CF2               	bsf	intcon,6,c	;volatile
 19065                           
 19066                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19067  015B68  8EF2               	bsf	intcon,7,c	;volatile
 19068                           
 19069                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19070  015B6A  88F2               	bsf	intcon,4,c	;volatile
 19071                           
 19072                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19073  015B6C  92F2               	bcf	intcon,1,c	;volatile
 19074  015B6E  0012               	return		;funcret
 19075  015B70                     __end_of_ISR_Enable:
 19076                           	opt stack 0
 19077                           tosu	equ	0xFFF
 19078                           tosh	equ	0xFFE
 19079                           tosl	equ	0xFFD
 19080                           pclath	equ	0xFFA
 19081                           tblptru	equ	0xFF8
 19082                           tblptrh	equ	0xFF7
 19083                           tblptrl	equ	0xFF6
 19084                           tablat	equ	0xFF5
 19085                           prodh	equ	0xFF4
 19086                           prodl	equ	0xFF3
 19087                           intcon	equ	0xFF2
 19088                           postinc0	equ	0xFEE
 19089                           wreg	equ	0xFE8
 19090                           postdec1	equ	0xFE5
 19091                           fsr1h	equ	0xFE2
 19092                           fsr1l	equ	0xFE1
 19093                           indf2	equ	0xFDF
 19094                           postinc2	equ	0xFDE
 19095                           postdec2	equ	0xFDD
 19096                           plusw2	equ	0xFDB
 19097                           fsr2h	equ	0xFDA
 19098                           fsr2l	equ	0xFD9
 19099                           status	equ	0xFD8
 19100                           
 19101 ;; *************** function _HMI_Poll *****************
 19102 ;; Defined at:
 19103 ;;		line 252 in file "HMI.c"
 19104 ;; Parameters:    Size  Location     Type
 19105 ;;		None
 19106 ;; Auto vars:     Size  Location     Type
 19107 ;;		None
 19108 ;; Return value:  Size  Location     Type
 19109 ;;                  1    wreg      void 
 19110 ;; Registers used:
 19111 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 19112 ;; Tracked objects:
 19113 ;;		On entry : 0/0
 19114 ;;		On exit  : 0/0
 19115 ;;		Unchanged: 0/0
 19116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19121 ;;Total ram usage:        0 bytes
 19122 ;; Hardware stack levels used:    1
 19123 ;; Hardware stack levels required when called:   15
 19124 ;; This function calls:
 19125 ;;		_Button_Poll
 19126 ;; This function is called by:
 19127 ;;		_main
 19128 ;; This function uses a non-reentrant model
 19129 ;;
 19130                           
 19131                           	psect	text84
 19132  014CCC                     __ptext84:
 19133                           	opt stack 0
 19134  014CCC                     _HMI_Poll:
 19135                           	opt stack 15
 19136                           
 19137                           ;HMI.c: 254: TRISE = 0xFC;
 19138                           
 19139                           ;incstack = 0
 19140  014CCC  0EFC               	movlw	252
 19141  014CCE  6E96               	movwf	3990,c	;volatile
 19142                           
 19143                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 19144  014CD0  0ED0               	movlw	low (_HMIBoard+48)
 19145  014CD2  0100               	movlb	0	; () banked
 19146  014CD4  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19147  014CD6  0E02               	movlw	high (_HMIBoard+48)
 19148  014CD8  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19149  014CDA  0E01               	movlw	1
 19150  014CDC  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19151  014CDE  ECE3  F099         	call	_Button_Poll	;wreg free
 19152                           
 19153                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 19154  014CE2  0EB2               	movlw	low (_HMIBoard+18)
 19155  014CE4  0100               	movlb	0	; () banked
 19156  014CE6  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19157  014CE8  0E02               	movlw	high (_HMIBoard+18)
 19158  014CEA  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19159  014CEC  0E01               	movlw	1
 19160  014CEE  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19161  014CF0  ECE3  F099         	call	_Button_Poll	;wreg free
 19162                           
 19163                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 19164  014CF4  0EA8               	movlw	low (_HMIBoard+8)
 19165  014CF6  0100               	movlb	0	; () banked
 19166  014CF8  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19167  014CFA  0E02               	movlw	high (_HMIBoard+8)
 19168  014CFC  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19169  014CFE  0E01               	movlw	1
 19170  014D00  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19171  014D02  ECE3  F099         	call	_Button_Poll	;wreg free
 19172                           
 19173                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 19174  014D06  0EBC               	movlw	low (_HMIBoard+28)
 19175  014D08  0100               	movlb	0	; () banked
 19176  014D0A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19177  014D0C  0E02               	movlw	high (_HMIBoard+28)
 19178  014D0E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19179  014D10  0E01               	movlw	1
 19180  014D12  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19181  014D14  ECE3  F099         	call	_Button_Poll	;wreg free
 19182                           
 19183                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 19184  014D18  0EC6               	movlw	low (_HMIBoard+38)
 19185  014D1A  0100               	movlb	0	; () banked
 19186  014D1C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 19187  014D1E  0E02               	movlw	high (_HMIBoard+38)
 19188  014D20  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 19189  014D22  0E01               	movlw	1
 19190  014D24  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 19191  014D26  ECE3  F099         	call	_Button_Poll	;wreg free
 19192  014D2A  0012               	return		;funcret
 19193  014D2C                     __end_of_HMI_Poll:
 19194                           	opt stack 0
 19195                           tosu	equ	0xFFF
 19196                           tosh	equ	0xFFE
 19197                           tosl	equ	0xFFD
 19198                           pclath	equ	0xFFA
 19199                           tblptru	equ	0xFF8
 19200                           tblptrh	equ	0xFF7
 19201                           tblptrl	equ	0xFF6
 19202                           tablat	equ	0xFF5
 19203                           prodh	equ	0xFF4
 19204                           prodl	equ	0xFF3
 19205                           intcon	equ	0xFF2
 19206                           postinc0	equ	0xFEE
 19207                           wreg	equ	0xFE8
 19208                           postdec1	equ	0xFE5
 19209                           fsr1h	equ	0xFE2
 19210                           fsr1l	equ	0xFE1
 19211                           indf2	equ	0xFDF
 19212                           postinc2	equ	0xFDE
 19213                           postdec2	equ	0xFDD
 19214                           plusw2	equ	0xFDB
 19215                           fsr2h	equ	0xFDA
 19216                           fsr2l	equ	0xFD9
 19217                           status	equ	0xFD8
 19218                           
 19219 ;; *************** function _Button_Poll *****************
 19220 ;; Defined at:
 19221 ;;		line 57 in file "Library/Button.c"
 19222 ;; Parameters:    Size  Location     Type
 19223 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 19224 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 19225 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 19226 ;; Auto vars:     Size  Location     Type
 19227 ;;  Pin             1   35[BANK0 ] unsigned char 
 19228 ;; Return value:  Size  Location     Type
 19229 ;;                  1    wreg      unsigned char 
 19230 ;; Registers used:
 19231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 19232 ;; Tracked objects:
 19233 ;;		On entry : 0/0
 19234 ;;		On exit  : 0/0
 19235 ;;		Unchanged: 0/0
 19236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19237 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19239 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19240 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19241 ;;Total ram usage:        9 bytes
 19242 ;; Hardware stack levels used:    1
 19243 ;; Hardware stack levels required when called:   14
 19244 ;; This function calls:
 19245 ;;		_Event_DIPSwitch
 19246 ;;		_Event_NULL
 19247 ;;		_Event_TestButton
 19248 ;;		_HMI_DIPSwitch
 19249 ;;		_HMI_DownSwitch
 19250 ;;		_HMI_LeftSwitch
 19251 ;;		_HMI_RightSwitch
 19252 ;;		_HMI_UpSwitch
 19253 ;;		_MXK_DIPSwitch
 19254 ;;		_MXK_TestButton
 19255 ;; This function is called by:
 19256 ;;		_HMI_Poll
 19257 ;;		_MXK_Poll
 19258 ;; This function uses a non-reentrant model
 19259 ;;
 19260                           
 19261                           	psect	text85
 19262  0133C6                     __ptext85:
 19263                           	opt stack 0
 19264  0133C6                     _Button_Poll:
 19265                           	opt stack 15
 19266                           
 19267                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 19268                           
 19269                           ;incstack = 0
 19270  0133C6  0100               	movlb	0	; () banked
 19271  0133C8  EE20 F007          	lfsr	2,7
 19272  0133CC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19273  0133CE  26D9               	addwf	fsr2l,f,c
 19274  0133D0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19275  0133D2  22DA               	addwfc	fsr2h,f,c
 19276  0133D4  D801               	call	u12458
 19277  0133D6  D00A               	goto	u12459
 19278  0133D8                     u12458:
 19279  0133D8  0005               	push	
 19280  0133DA  6EFA               	movwf	pclath,c
 19281  0133DC  50DE               	movf	postinc2,w,c
 19282  0133DE  6EFD               	movwf	tosl,c
 19283  0133E0  50DE               	movf	postinc2,w,c
 19284  0133E2  6EFE               	movwf	tosh,c
 19285  0133E4  50DE               	movf	postinc2,w,c
 19286  0133E6  6EFF               	movwf	tosu,c
 19287  0133E8  50FA               	movf	pclath,w,c
 19288  0133EA  0012               	return		;indir
 19289  0133EC                     u12459:
 19290  0133EC  0100               	movlb	0	; () banked
 19291  0133EE  6F83               	movwf	Button_Poll@Pin& (0+255),b
 19292                           
 19293                           ; BSR set to: 0
 19294                           ;Button.c: 61: if (pButton->mState == Pin)
 19295  0133F0  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 19296  0133F4  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 19297  0133F8  5183               	movf	Button_Poll@Pin& (0+255),w,b
 19298  0133FA  18DE               	xorwf	postinc2,w,c
 19299  0133FC  A4D8               	btfss	status,2,c
 19300  0133FE  D01C               	goto	l11
 19301                           
 19302                           ; BSR set to: 0
 19303                           ;Button.c: 62: {
 19304                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 19305  013400  EE20 F001          	lfsr	2,1
 19306  013404  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19307  013406  26D9               	addwf	fsr2l,f,c
 19308  013408  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19309  01340A  22DA               	addwfc	fsr2h,f,c
 19310  01340C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 19311  01340E  5CDE               	subwf	postinc2,w,c
 19312  013410  B0D8               	btfsc	status,0,c
 19313  013412  D009               	goto	l12
 19314                           
 19315                           ; BSR set to: 0
 19316                           ;Button.c: 66: pButton->mCount = 0;
 19317  013414  EE20 F001          	lfsr	2,1
 19318  013418  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19319  01341A  26D9               	addwf	fsr2l,f,c
 19320  01341C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19321  01341E  22DA               	addwfc	fsr2h,f,c
 19322  013420  0E00               	movlw	0
 19323  013422  6EDF               	movwf	indf2,c
 19324  013424  0012               	return	
 19325  013426                     l12:
 19326                           
 19327                           ; BSR set to: 0
 19328                           ;Button.c: 67: else
 19329                           ;Button.c: 68: pButton->mCount -= pIncrement;
 19330                           
 19331                           ; BSR set to: 0
 19332  013426  EE20 F001          	lfsr	2,1
 19333  01342A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19334  01342C  26D9               	addwf	fsr2l,f,c
 19335  01342E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19336  013430  22DA               	addwfc	fsr2h,f,c
 19337  013432  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 19338  013434  5EDF               	subwf	indf2,f,c
 19339                           
 19340                           ; BSR set to: 0
 19341                           ;Button.c: 69: }
 19342  013436  0012               	return	
 19343  013438                     l11:
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 19347                           
 19348                           ; BSR set to: 0
 19349  013438  EE20 F001          	lfsr	2,1
 19350  01343C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19351  01343E  26D9               	addwf	fsr2l,f,c
 19352  013440  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19353  013442  22DA               	addwfc	fsr2h,f,c
 19354  013444  50DF               	movf	indf2,w,c
 19355  013446  6F7E               	movwf	??_Button_Poll& (0+255),b
 19356  013448  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 19357  01344A  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 19358  01344C  277E               	addwf	??_Button_Poll& (0+255),f,b
 19359  01344E  0E00               	movlw	0
 19360  013450  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 19361  013452  EE20 F001          	lfsr	2,1
 19362  013456  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19363  013458  26D9               	addwf	fsr2l,f,c
 19364  01345A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19365  01345C  22DA               	addwfc	fsr2h,f,c
 19366  01345E  50DF               	movf	indf2,w,c
 19367  013460  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 19368  013462  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 19369  013464  517E               	movf	??_Button_Poll& (0+255),w,b
 19370  013466  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 19371  013468  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 19372  01346A  0A80               	xorlw	128
 19373  01346C  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 19374  01346E  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 19375  013470  0A80               	xorlw	128
 19376  013472  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 19377  013474  B0D8               	btfsc	status,0,c
 19378  013476  0012               	return	
 19379                           
 19380                           ; BSR set to: 0
 19381                           ;Button.c: 73: {
 19382                           ;Button.c: 75: pButton->mCount += pIncrement;
 19383  013478  EE20 F001          	lfsr	2,1
 19384  01347C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19385  01347E  26D9               	addwf	fsr2l,f,c
 19386  013480  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19387  013482  22DA               	addwfc	fsr2h,f,c
 19388  013484  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 19389  013486  26DF               	addwf	indf2,f,c
 19390                           
 19391                           ; BSR set to: 0
 19392                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 19393  013488  EE20 F002          	lfsr	2,2
 19394  01348C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19395  01348E  26D9               	addwf	fsr2l,f,c
 19396  013490  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19397  013492  22DA               	addwfc	fsr2h,f,c
 19398  013494  EE10 F001          	lfsr	1,1
 19399  013498  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19400  01349A  26E1               	addwf	fsr1l,f,c
 19401  01349C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19402  01349E  22E2               	addwfc	fsr1h,f,c
 19403  0134A0  50E7               	movf	indf1,w,c
 19404  0134A2  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 19405  0134A4  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 19406  0134A6  50DE               	movf	postinc2,w,c
 19407  0134A8  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 19408  0134AA  50DE               	movf	postinc2,w,c
 19409  0134AC  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 19410  0134AE  A0D8               	btfss	status,0,c
 19411  0134B0  0012               	return	
 19412                           
 19413                           ; BSR set to: 0
 19414                           ;Button.c: 77: {
 19415                           ;Button.c: 79: pButton->mState = Pin;
 19416  0134B2  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 19417  0134B6  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 19418  0134BA  C083  FFDF         	movff	Button_Poll@Pin,indf2
 19419                           
 19420                           ; BSR set to: 0
 19421                           ;Button.c: 80: pButton->mCount = 0;
 19422  0134BE  EE20 F001          	lfsr	2,1
 19423  0134C2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19424  0134C4  26D9               	addwf	fsr2l,f,c
 19425  0134C6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19426  0134C8  22DA               	addwfc	fsr2h,f,c
 19427  0134CA  0E00               	movlw	0
 19428  0134CC  6EDF               	movwf	indf2,c
 19429                           
 19430                           ; BSR set to: 0
 19431                           ;Button.c: 83: pButton->mFunction(Pin);
 19432  0134CE  EE20 F004          	lfsr	2,4
 19433  0134D2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 19434  0134D4  26D9               	addwf	fsr2l,f,c
 19435  0134D6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 19436  0134D8  22DA               	addwfc	fsr2h,f,c
 19437  0134DA  D801               	call	u12508
 19438  0134DC  0012               	return	
 19439  0134DE                     u12508:
 19440  0134DE  0005               	push	
 19441  0134E0  6EFA               	movwf	pclath,c
 19442  0134E2  50DE               	movf	postinc2,w,c
 19443  0134E4  6EFD               	movwf	tosl,c
 19444  0134E6  50DE               	movf	postinc2,w,c
 19445  0134E8  6EFE               	movwf	tosh,c
 19446  0134EA  50DE               	movf	postinc2,w,c
 19447  0134EC  6EFF               	movwf	tosu,c
 19448  0134EE  50FA               	movf	pclath,w,c
 19449  0134F0  5183               	movf	Button_Poll@Pin& (0+255),w,b
 19450  0134F2  0012               	return		;indir
 19451  0134F4                     __end_of_Button_Poll:
 19452                           	opt stack 0
 19453                           tosu	equ	0xFFF
 19454                           tosh	equ	0xFFE
 19455                           tosl	equ	0xFFD
 19456                           pclath	equ	0xFFA
 19457                           tblptru	equ	0xFF8
 19458                           tblptrh	equ	0xFF7
 19459                           tblptrl	equ	0xFF6
 19460                           tablat	equ	0xFF5
 19461                           prodh	equ	0xFF4
 19462                           prodl	equ	0xFF3
 19463                           intcon	equ	0xFF2
 19464                           postinc0	equ	0xFEE
 19465                           wreg	equ	0xFE8
 19466                           indf1	equ	0xFE7
 19467                           postdec1	equ	0xFE5
 19468                           fsr1h	equ	0xFE2
 19469                           fsr1l	equ	0xFE1
 19470                           indf2	equ	0xFDF
 19471                           postinc2	equ	0xFDE
 19472                           postdec2	equ	0xFDD
 19473                           plusw2	equ	0xFDB
 19474                           fsr2h	equ	0xFDA
 19475                           fsr2l	equ	0xFD9
 19476                           status	equ	0xFD8
 19477                           
 19478 ;; *************** function _MXK_DIPSwitch *****************
 19479 ;; Defined at:
 19480 ;;		line 24 in file "Library/MXK.c"
 19481 ;; Parameters:    Size  Location     Type
 19482 ;;		None
 19483 ;; Auto vars:     Size  Location     Type
 19484 ;;		None
 19485 ;; Return value:  Size  Location     Type
 19486 ;;                  1    wreg      unsigned char 
 19487 ;; Registers used:
 19488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19489 ;; Tracked objects:
 19490 ;;		On entry : 0/0
 19491 ;;		On exit  : 0/0
 19492 ;;		Unchanged: 0/0
 19493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19498 ;;Total ram usage:        0 bytes
 19499 ;; Hardware stack levels used:    1
 19500 ;; Hardware stack levels required when called:    8
 19501 ;; This function calls:
 19502 ;;		_Port_GetQuad
 19503 ;; This function is called by:
 19504 ;;		_FunctInitButton
 19505 ;;		_Button_Poll
 19506 ;;		_main
 19507 ;; This function uses a non-reentrant model
 19508 ;;
 19509                           
 19510                           	psect	text86
 19511  015A60                     __ptext86:
 19512                           	opt stack 0
 19513  015A60                     _MXK_DIPSwitch:
 19514                           	opt stack 22
 19515                           
 19516                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 19517                           
 19518                           ;incstack = 0
 19519  015A60  0E8B               	movlw	low _PortD
 19520  015A62  0100               	movlb	0	; () banked
 19521  015A64  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 19522  015A66  0E01               	movlw	high _PortD
 19523  015A68  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 19524  015A6A  0E00               	movlw	0
 19525  015A6C  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 19526  015A6E  EC18  F0AA         	call	_Port_GetQuad
 19527  015A72  0012               	return	
 19528  015A74                     __end_of_MXK_DIPSwitch:
 19529                           	opt stack 0
 19530                           tosu	equ	0xFFF
 19531                           tosh	equ	0xFFE
 19532                           tosl	equ	0xFFD
 19533                           pclath	equ	0xFFA
 19534                           tblptru	equ	0xFF8
 19535                           tblptrh	equ	0xFF7
 19536                           tblptrl	equ	0xFF6
 19537                           tablat	equ	0xFF5
 19538                           prodh	equ	0xFF4
 19539                           prodl	equ	0xFF3
 19540                           intcon	equ	0xFF2
 19541                           postinc0	equ	0xFEE
 19542                           wreg	equ	0xFE8
 19543                           indf1	equ	0xFE7
 19544                           postdec1	equ	0xFE5
 19545                           fsr1h	equ	0xFE2
 19546                           fsr1l	equ	0xFE1
 19547                           indf2	equ	0xFDF
 19548                           postinc2	equ	0xFDE
 19549                           postdec2	equ	0xFDD
 19550                           plusw2	equ	0xFDB
 19551                           fsr2h	equ	0xFDA
 19552                           fsr2l	equ	0xFD9
 19553                           status	equ	0xFD8
 19554                           
 19555 ;; *************** function _HMI_DIPSwitch *****************
 19556 ;; Defined at:
 19557 ;;		line 47 in file "HMI.c"
 19558 ;; Parameters:    Size  Location     Type
 19559 ;;		None
 19560 ;; Auto vars:     Size  Location     Type
 19561 ;;		None
 19562 ;; Return value:  Size  Location     Type
 19563 ;;                  1    wreg      unsigned char 
 19564 ;; Registers used:
 19565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19566 ;; Tracked objects:
 19567 ;;		On entry : 0/0
 19568 ;;		On exit  : 0/0
 19569 ;;		Unchanged: 0/0
 19570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19575 ;;Total ram usage:        0 bytes
 19576 ;; Hardware stack levels used:    1
 19577 ;; Hardware stack levels required when called:    8
 19578 ;; This function calls:
 19579 ;;		_Port_GetQuad
 19580 ;; This function is called by:
 19581 ;;		_HMI_Init
 19582 ;;		_Button_Poll
 19583 ;;		_main
 19584 ;; This function uses a non-reentrant model
 19585 ;;
 19586                           
 19587                           	psect	text87
 19588  015A74                     __ptext87:
 19589                           	opt stack 0
 19590  015A74                     _HMI_DIPSwitch:
 19591                           	opt stack 20
 19592                           
 19593                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 19594                           
 19595                           ;incstack = 0
 19596  015A74  0E81               	movlw	low _PortE
 19597  015A76  0100               	movlb	0	; () banked
 19598  015A78  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 19599  015A7A  0E01               	movlw	high _PortE
 19600  015A7C  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 19601  015A7E  0E00               	movlw	0
 19602  015A80  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 19603  015A82  EC18  F0AA         	call	_Port_GetQuad	;wreg free
 19604  015A86  0012               	return	
 19605  015A88                     __end_of_HMI_DIPSwitch:
 19606                           	opt stack 0
 19607                           tosu	equ	0xFFF
 19608                           tosh	equ	0xFFE
 19609                           tosl	equ	0xFFD
 19610                           pclath	equ	0xFFA
 19611                           tblptru	equ	0xFF8
 19612                           tblptrh	equ	0xFF7
 19613                           tblptrl	equ	0xFF6
 19614                           tablat	equ	0xFF5
 19615                           prodh	equ	0xFF4
 19616                           prodl	equ	0xFF3
 19617                           intcon	equ	0xFF2
 19618                           postinc0	equ	0xFEE
 19619                           wreg	equ	0xFE8
 19620                           indf1	equ	0xFE7
 19621                           postdec1	equ	0xFE5
 19622                           fsr1h	equ	0xFE2
 19623                           fsr1l	equ	0xFE1
 19624                           indf2	equ	0xFDF
 19625                           postinc2	equ	0xFDE
 19626                           postdec2	equ	0xFDD
 19627                           plusw2	equ	0xFDB
 19628                           fsr2h	equ	0xFDA
 19629                           fsr2l	equ	0xFD9
 19630                           status	equ	0xFD8
 19631                           
 19632 ;; *************** function _HMI_DownSwitch *****************
 19633 ;; Defined at:
 19634 ;;		line 42 in file "HMI.c"
 19635 ;; Parameters:    Size  Location     Type
 19636 ;;		None
 19637 ;; Auto vars:     Size  Location     Type
 19638 ;;		None
 19639 ;; Return value:  Size  Location     Type
 19640 ;;                  1    wreg      unsigned char 
 19641 ;; Registers used:
 19642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19643 ;; Tracked objects:
 19644 ;;		On entry : 0/0
 19645 ;;		On exit  : 0/0
 19646 ;;		Unchanged: 0/0
 19647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19652 ;;Total ram usage:        0 bytes
 19653 ;; Hardware stack levels used:    1
 19654 ;; Hardware stack levels required when called:    8
 19655 ;; This function calls:
 19656 ;;		_Port_GetPin
 19657 ;; This function is called by:
 19658 ;;		_HMI_Init
 19659 ;;		_Button_Poll
 19660 ;;		_main
 19661 ;; This function uses a non-reentrant model
 19662 ;;
 19663                           
 19664                           	psect	text88
 19665  015A88                     __ptext88:
 19666                           	opt stack 0
 19667  015A88                     _HMI_DownSwitch:
 19668                           	opt stack 20
 19669                           
 19670                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 19671                           
 19672                           ;incstack = 0
 19673  015A88  0E81               	movlw	low _PortE
 19674  015A8A  0100               	movlb	0	; () banked
 19675  015A8C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19676  015A8E  0E01               	movlw	high _PortE
 19677  015A90  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19678  015A92  0E06               	movlw	6
 19679  015A94  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19680  015A96  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19681  015A9A  0012               	return	
 19682  015A9C                     __end_of_HMI_DownSwitch:
 19683                           	opt stack 0
 19684                           tosu	equ	0xFFF
 19685                           tosh	equ	0xFFE
 19686                           tosl	equ	0xFFD
 19687                           pclath	equ	0xFFA
 19688                           tblptru	equ	0xFF8
 19689                           tblptrh	equ	0xFF7
 19690                           tblptrl	equ	0xFF6
 19691                           tablat	equ	0xFF5
 19692                           prodh	equ	0xFF4
 19693                           prodl	equ	0xFF3
 19694                           intcon	equ	0xFF2
 19695                           postinc0	equ	0xFEE
 19696                           wreg	equ	0xFE8
 19697                           indf1	equ	0xFE7
 19698                           postdec1	equ	0xFE5
 19699                           fsr1h	equ	0xFE2
 19700                           fsr1l	equ	0xFE1
 19701                           indf2	equ	0xFDF
 19702                           postinc2	equ	0xFDE
 19703                           postdec2	equ	0xFDD
 19704                           plusw2	equ	0xFDB
 19705                           fsr2h	equ	0xFDA
 19706                           fsr2l	equ	0xFD9
 19707                           status	equ	0xFD8
 19708                           
 19709 ;; *************** function _HMI_UpSwitch *****************
 19710 ;; Defined at:
 19711 ;;		line 37 in file "HMI.c"
 19712 ;; Parameters:    Size  Location     Type
 19713 ;;		None
 19714 ;; Auto vars:     Size  Location     Type
 19715 ;;		None
 19716 ;; Return value:  Size  Location     Type
 19717 ;;                  1    wreg      unsigned char 
 19718 ;; Registers used:
 19719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19720 ;; Tracked objects:
 19721 ;;		On entry : 0/0
 19722 ;;		On exit  : 0/0
 19723 ;;		Unchanged: 0/0
 19724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19729 ;;Total ram usage:        0 bytes
 19730 ;; Hardware stack levels used:    1
 19731 ;; Hardware stack levels required when called:    8
 19732 ;; This function calls:
 19733 ;;		_Port_GetPin
 19734 ;; This function is called by:
 19735 ;;		_HMI_Init
 19736 ;;		_Button_Poll
 19737 ;;		_main
 19738 ;; This function uses a non-reentrant model
 19739 ;;
 19740                           
 19741                           	psect	text89
 19742  015A9C                     __ptext89:
 19743                           	opt stack 0
 19744  015A9C                     _HMI_UpSwitch:
 19745                           	opt stack 22
 19746                           
 19747                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 19748                           
 19749                           ;incstack = 0
 19750  015A9C  0E81               	movlw	low _PortE
 19751  015A9E  0100               	movlb	0	; () banked
 19752  015AA0  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19753  015AA2  0E01               	movlw	high _PortE
 19754  015AA4  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19755  015AA6  0E07               	movlw	7
 19756  015AA8  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19757  015AAA  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19758  015AAE  0012               	return	
 19759  015AB0                     __end_of_HMI_UpSwitch:
 19760                           	opt stack 0
 19761                           tosu	equ	0xFFF
 19762                           tosh	equ	0xFFE
 19763                           tosl	equ	0xFFD
 19764                           pclath	equ	0xFFA
 19765                           tblptru	equ	0xFF8
 19766                           tblptrh	equ	0xFF7
 19767                           tblptrl	equ	0xFF6
 19768                           tablat	equ	0xFF5
 19769                           prodh	equ	0xFF4
 19770                           prodl	equ	0xFF3
 19771                           intcon	equ	0xFF2
 19772                           postinc0	equ	0xFEE
 19773                           wreg	equ	0xFE8
 19774                           indf1	equ	0xFE7
 19775                           postdec1	equ	0xFE5
 19776                           fsr1h	equ	0xFE2
 19777                           fsr1l	equ	0xFE1
 19778                           indf2	equ	0xFDF
 19779                           postinc2	equ	0xFDE
 19780                           postdec2	equ	0xFDD
 19781                           plusw2	equ	0xFDB
 19782                           fsr2h	equ	0xFDA
 19783                           fsr2l	equ	0xFD9
 19784                           status	equ	0xFD8
 19785                           
 19786 ;; *************** function _HMI_RightSwitch *****************
 19787 ;; Defined at:
 19788 ;;		line 32 in file "HMI.c"
 19789 ;; Parameters:    Size  Location     Type
 19790 ;;		None
 19791 ;; Auto vars:     Size  Location     Type
 19792 ;;		None
 19793 ;; Return value:  Size  Location     Type
 19794 ;;                  1    wreg      unsigned char 
 19795 ;; Registers used:
 19796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19797 ;; Tracked objects:
 19798 ;;		On entry : 0/0
 19799 ;;		On exit  : 0/0
 19800 ;;		Unchanged: 0/0
 19801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19806 ;;Total ram usage:        0 bytes
 19807 ;; Hardware stack levels used:    1
 19808 ;; Hardware stack levels required when called:    8
 19809 ;; This function calls:
 19810 ;;		_Port_GetPin
 19811 ;; This function is called by:
 19812 ;;		_HMI_Init
 19813 ;;		_Button_Poll
 19814 ;;		_main
 19815 ;; This function uses a non-reentrant model
 19816 ;;
 19817                           
 19818                           	psect	text90
 19819  015AB0                     __ptext90:
 19820                           	opt stack 0
 19821  015AB0                     _HMI_RightSwitch:
 19822                           	opt stack 22
 19823                           
 19824                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 19825                           
 19826                           ;incstack = 0
 19827  015AB0  0E81               	movlw	low _PortE
 19828  015AB2  0100               	movlb	0	; () banked
 19829  015AB4  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19830  015AB6  0E01               	movlw	high _PortE
 19831  015AB8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19832  015ABA  0E04               	movlw	4
 19833  015ABC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19834  015ABE  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19835  015AC2  0012               	return	
 19836  015AC4                     __end_of_HMI_RightSwitch:
 19837                           	opt stack 0
 19838                           tosu	equ	0xFFF
 19839                           tosh	equ	0xFFE
 19840                           tosl	equ	0xFFD
 19841                           pclath	equ	0xFFA
 19842                           tblptru	equ	0xFF8
 19843                           tblptrh	equ	0xFF7
 19844                           tblptrl	equ	0xFF6
 19845                           tablat	equ	0xFF5
 19846                           prodh	equ	0xFF4
 19847                           prodl	equ	0xFF3
 19848                           intcon	equ	0xFF2
 19849                           postinc0	equ	0xFEE
 19850                           wreg	equ	0xFE8
 19851                           indf1	equ	0xFE7
 19852                           postdec1	equ	0xFE5
 19853                           fsr1h	equ	0xFE2
 19854                           fsr1l	equ	0xFE1
 19855                           indf2	equ	0xFDF
 19856                           postinc2	equ	0xFDE
 19857                           postdec2	equ	0xFDD
 19858                           plusw2	equ	0xFDB
 19859                           fsr2h	equ	0xFDA
 19860                           fsr2l	equ	0xFD9
 19861                           status	equ	0xFD8
 19862                           
 19863 ;; *************** function _HMI_LeftSwitch *****************
 19864 ;; Defined at:
 19865 ;;		line 27 in file "HMI.c"
 19866 ;; Parameters:    Size  Location     Type
 19867 ;;		None
 19868 ;; Auto vars:     Size  Location     Type
 19869 ;;		None
 19870 ;; Return value:  Size  Location     Type
 19871 ;;                  1    wreg      unsigned char 
 19872 ;; Registers used:
 19873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19874 ;; Tracked objects:
 19875 ;;		On entry : 0/0
 19876 ;;		On exit  : 0/0
 19877 ;;		Unchanged: 0/0
 19878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19883 ;;Total ram usage:        0 bytes
 19884 ;; Hardware stack levels used:    1
 19885 ;; Hardware stack levels required when called:    8
 19886 ;; This function calls:
 19887 ;;		_Port_GetPin
 19888 ;; This function is called by:
 19889 ;;		_HMI_Init
 19890 ;;		_Button_Poll
 19891 ;;		_main
 19892 ;; This function uses a non-reentrant model
 19893 ;;
 19894                           
 19895                           	psect	text91
 19896  015AC4                     __ptext91:
 19897                           	opt stack 0
 19898  015AC4                     _HMI_LeftSwitch:
 19899                           	opt stack 20
 19900                           
 19901                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 19902                           
 19903                           ;incstack = 0
 19904  015AC4  0E81               	movlw	low _PortE
 19905  015AC6  0100               	movlb	0	; () banked
 19906  015AC8  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19907  015ACA  0E01               	movlw	high _PortE
 19908  015ACC  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19909  015ACE  0E05               	movlw	5
 19910  015AD0  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19911  015AD2  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19912  015AD6  0012               	return	
 19913  015AD8                     __end_of_HMI_LeftSwitch:
 19914                           	opt stack 0
 19915                           tosu	equ	0xFFF
 19916                           tosh	equ	0xFFE
 19917                           tosl	equ	0xFFD
 19918                           pclath	equ	0xFFA
 19919                           tblptru	equ	0xFF8
 19920                           tblptrh	equ	0xFF7
 19921                           tblptrl	equ	0xFF6
 19922                           tablat	equ	0xFF5
 19923                           prodh	equ	0xFF4
 19924                           prodl	equ	0xFF3
 19925                           intcon	equ	0xFF2
 19926                           postinc0	equ	0xFEE
 19927                           wreg	equ	0xFE8
 19928                           indf1	equ	0xFE7
 19929                           postdec1	equ	0xFE5
 19930                           fsr1h	equ	0xFE2
 19931                           fsr1l	equ	0xFE1
 19932                           indf2	equ	0xFDF
 19933                           postinc2	equ	0xFDE
 19934                           postdec2	equ	0xFDD
 19935                           plusw2	equ	0xFDB
 19936                           fsr2h	equ	0xFDA
 19937                           fsr2l	equ	0xFD9
 19938                           status	equ	0xFD8
 19939                           
 19940 ;; *************** function _MXK_TestButton *****************
 19941 ;; Defined at:
 19942 ;;		line 14 in file "Library/MXK.c"
 19943 ;; Parameters:    Size  Location     Type
 19944 ;;		None
 19945 ;; Auto vars:     Size  Location     Type
 19946 ;;		None
 19947 ;; Return value:  Size  Location     Type
 19948 ;;                  1    wreg      unsigned char 
 19949 ;; Registers used:
 19950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19951 ;; Tracked objects:
 19952 ;;		On entry : 0/0
 19953 ;;		On exit  : 0/0
 19954 ;;		Unchanged: 0/0
 19955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19960 ;;Total ram usage:        0 bytes
 19961 ;; Hardware stack levels used:    1
 19962 ;; Hardware stack levels required when called:    8
 19963 ;; This function calls:
 19964 ;;		_Port_GetPin
 19965 ;; This function is called by:
 19966 ;;		_FunctInitButton
 19967 ;;		_Button_Poll
 19968 ;;		_main
 19969 ;; This function uses a non-reentrant model
 19970 ;;
 19971                           
 19972                           	psect	text92
 19973  015AD8                     __ptext92:
 19974                           	opt stack 0
 19975  015AD8                     _MXK_TestButton:
 19976                           	opt stack 22
 19977                           
 19978                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 19979                           
 19980                           ;incstack = 0
 19981  015AD8  0E95               	movlw	low _PortB
 19982  015ADA  0100               	movlb	0	; () banked
 19983  015ADC  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 19984  015ADE  0E01               	movlw	high _PortB
 19985  015AE0  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 19986  015AE2  0E04               	movlw	4
 19987  015AE4  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 19988  015AE6  EC72  F0AA         	call	_Port_GetPin	;wreg free
 19989  015AEA  0012               	return	
 19990  015AEC                     __end_of_MXK_TestButton:
 19991                           	opt stack 0
 19992                           tosu	equ	0xFFF
 19993                           tosh	equ	0xFFE
 19994                           tosl	equ	0xFFD
 19995                           pclath	equ	0xFFA
 19996                           tblptru	equ	0xFF8
 19997                           tblptrh	equ	0xFF7
 19998                           tblptrl	equ	0xFF6
 19999                           tablat	equ	0xFF5
 20000                           prodh	equ	0xFF4
 20001                           prodl	equ	0xFF3
 20002                           intcon	equ	0xFF2
 20003                           postinc0	equ	0xFEE
 20004                           wreg	equ	0xFE8
 20005                           indf1	equ	0xFE7
 20006                           postdec1	equ	0xFE5
 20007                           fsr1h	equ	0xFE2
 20008                           fsr1l	equ	0xFE1
 20009                           indf2	equ	0xFDF
 20010                           postinc2	equ	0xFDE
 20011                           postdec2	equ	0xFDD
 20012                           plusw2	equ	0xFDB
 20013                           fsr2h	equ	0xFDA
 20014                           fsr2l	equ	0xFD9
 20015                           status	equ	0xFD8
 20016                           
 20017 ;; *************** function _Port_GetQuad *****************
 20018 ;; Defined at:
 20019 ;;		line 498 in file "Library/Port.c"
 20020 ;; Parameters:    Size  Location     Type
 20021 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 20022 ;;		 -> PortE(10), PortD(10), 
 20023 ;;  pQuad           1    2[BANK0 ] enum E6776
 20024 ;; Auto vars:     Size  Location     Type
 20025 ;;  Output          1    5[BANK0 ] unsigned char 
 20026 ;; Return value:  Size  Location     Type
 20027 ;;                  1    wreg      unsigned char 
 20028 ;; Registers used:
 20029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20030 ;; Tracked objects:
 20031 ;;		On entry : 0/0
 20032 ;;		On exit  : 0/0
 20033 ;;		Unchanged: 0/0
 20034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20035 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20037 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20038 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20039 ;;Total ram usage:        6 bytes
 20040 ;; Hardware stack levels used:    1
 20041 ;; Hardware stack levels required when called:    7
 20042 ;; This function calls:
 20043 ;;		Nothing
 20044 ;; This function is called by:
 20045 ;;		_HMI_DIPSwitch
 20046 ;;		_MXK_DIPSwitch
 20047 ;;		_Port_ToggleQuad
 20048 ;; This function uses a non-reentrant model
 20049 ;;
 20050                           
 20051                           	psect	text93
 20052  015430                     __ptext93:
 20053                           	opt stack 0
 20054  015430                     _Port_GetQuad:
 20055                           	opt stack 22
 20056                           
 20057                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 20058                           
 20059                           ;incstack = 0
 20060  015430  0100               	movlb	0	; () banked
 20061  015432  EE20 F006          	lfsr	2,6
 20062  015436  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 20063  015438  26D9               	addwf	fsr2l,f,c
 20064  01543A  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 20065  01543C  22DA               	addwfc	fsr2h,f,c
 20066  01543E  CFDE F063          	movff	postinc2,??_Port_GetQuad
 20067  015442  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 20068  015446  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 20069  01544A  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 20070  01544E  50DF               	movf	indf2,w,c
 20071  015450  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 20072                           
 20073                           ; BSR set to: 0
 20074                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 20075  015452  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 20076  015454  0D04               	mullw	4
 20077  015456  28F3               	incf	prodl,w,c
 20078  015458  6F63               	movwf	??_Port_GetQuad& (0+255),b
 20079  01545A  D002               	goto	u11740
 20080  01545C                     u11745:
 20081  01545C  90D8               	bcf	status,0,c
 20082  01545E  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 20083  015460                     u11740:
 20084  015460  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 20085  015462  D7FC               	goto	u11745
 20086                           
 20087                           ;Port.c: 502: Output &= 0xF;
 20088  015464  0E0F               	movlw	15
 20089  015466  0100               	movlb	0	; () banked
 20090  015468  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 20091                           
 20092                           ; BSR set to: 0
 20093                           ;Port.c: 503: return Output;
 20094  01546A  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 20095  01546C  0012               	return	
 20096  01546E                     __end_of_Port_GetQuad:
 20097                           	opt stack 0
 20098                           tosu	equ	0xFFF
 20099                           tosh	equ	0xFFE
 20100                           tosl	equ	0xFFD
 20101                           pclath	equ	0xFFA
 20102                           tblptru	equ	0xFF8
 20103                           tblptrh	equ	0xFF7
 20104                           tblptrl	equ	0xFF6
 20105                           tablat	equ	0xFF5
 20106                           prodh	equ	0xFF4
 20107                           prodl	equ	0xFF3
 20108                           intcon	equ	0xFF2
 20109                           postinc0	equ	0xFEE
 20110                           wreg	equ	0xFE8
 20111                           indf1	equ	0xFE7
 20112                           postdec1	equ	0xFE5
 20113                           fsr1h	equ	0xFE2
 20114                           fsr1l	equ	0xFE1
 20115                           indf2	equ	0xFDF
 20116                           postinc2	equ	0xFDE
 20117                           postdec2	equ	0xFDD
 20118                           plusw2	equ	0xFDB
 20119                           fsr2h	equ	0xFDA
 20120                           fsr2l	equ	0xFD9
 20121                           status	equ	0xFD8
 20122                           
 20123 ;; *************** function _Event_DIPSwitch *****************
 20124 ;; Defined at:
 20125 ;;		line 22 in file "Events.c"
 20126 ;; Parameters:    Size  Location     Type
 20127 ;;  pState          1    wreg     unsigned char 
 20128 ;; Auto vars:     Size  Location     Type
 20129 ;;  pState          1   25[BANK0 ] unsigned char 
 20130 ;;  Bar             1   26[BANK0 ] unsigned char 
 20131 ;; Return value:  Size  Location     Type
 20132 ;;                  1    wreg      void 
 20133 ;; Registers used:
 20134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20135 ;; Tracked objects:
 20136 ;;		On entry : 0/0
 20137 ;;		On exit  : 0/0
 20138 ;;		Unchanged: 0/0
 20139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20144 ;;Total ram usage:        2 bytes
 20145 ;; Hardware stack levels used:    1
 20146 ;; Hardware stack levels required when called:   13
 20147 ;; This function calls:
 20148 ;;		_HMI_GetBar
 20149 ;;		_HMI_SetBar
 20150 ;;		_LED_Toggle
 20151 ;; This function is called by:
 20152 ;;		_FunctInitButton
 20153 ;;		_Button_Poll
 20154 ;; This function uses a non-reentrant model
 20155 ;;
 20156                           
 20157                           	psect	text94
 20158  015824                     __ptext94:
 20159                           	opt stack 0
 20160  015824                     _Event_DIPSwitch:
 20161                           	opt stack 15
 20162                           
 20163                           ; BSR set to: 0
 20164                           ;incstack = 0
 20165                           ;Event_DIPSwitch@pState stored from wreg
 20166  015824  0100               	movlb	0	; () banked
 20167  015826  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 20168                           
 20169                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 20170  015828  ECC8  F0AD         	call	_HMI_GetBar	;wreg free
 20171  01582C  0100               	movlb	0	; () banked
 20172  01582E  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 20173                           
 20174                           ; BSR set to: 0
 20175                           ;Events.c: 25: Bar &= 0x0F;
 20176  015830  0E0F               	movlw	15
 20177  015832  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 20178                           
 20179                           ; BSR set to: 0
 20180                           ;Events.c: 26: pState <<= 4;
 20181  015834  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 20182  015836  0EF0               	movlw	240
 20183  015838  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 20184                           
 20185                           ; BSR set to: 0
 20186                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 20187  01583A  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 20188  01583C  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 20189  01583E  ECB8  F0AD         	call	_HMI_SetBar
 20190                           
 20191                           ;Events.c: 32: LED_Toggle(eLED1);
 20192  015842  0E00               	movlw	0
 20193  015844  ECD8  F0A9         	call	_LED_Toggle
 20194  015848  0012               	return		;funcret
 20195  01584A                     __end_of_Event_DIPSwitch:
 20196                           	opt stack 0
 20197                           tosu	equ	0xFFF
 20198                           tosh	equ	0xFFE
 20199                           tosl	equ	0xFFD
 20200                           pclath	equ	0xFFA
 20201                           tblptru	equ	0xFF8
 20202                           tblptrh	equ	0xFF7
 20203                           tblptrl	equ	0xFF6
 20204                           tablat	equ	0xFF5
 20205                           prodh	equ	0xFF4
 20206                           prodl	equ	0xFF3
 20207                           intcon	equ	0xFF2
 20208                           postinc0	equ	0xFEE
 20209                           wreg	equ	0xFE8
 20210                           indf1	equ	0xFE7
 20211                           postdec1	equ	0xFE5
 20212                           fsr1h	equ	0xFE2
 20213                           fsr1l	equ	0xFE1
 20214                           indf2	equ	0xFDF
 20215                           postinc2	equ	0xFDE
 20216                           postdec2	equ	0xFDD
 20217                           plusw2	equ	0xFDB
 20218                           fsr2h	equ	0xFDA
 20219                           fsr2l	equ	0xFD9
 20220                           status	equ	0xFD8
 20221                           
 20222 ;; *************** function _Event_NULL *****************
 20223 ;; Defined at:
 20224 ;;		line 9 in file "Events.c"
 20225 ;; Parameters:    Size  Location     Type
 20226 ;;  pState          1    wreg     unsigned char 
 20227 ;; Auto vars:     Size  Location     Type
 20228 ;;  pState          1    0[COMRAM] unsigned char 
 20229 ;; Return value:  Size  Location     Type
 20230 ;;                  1    wreg      void 
 20231 ;; Registers used:
 20232 ;;		wreg
 20233 ;; Tracked objects:
 20234 ;;		On entry : 0/0
 20235 ;;		On exit  : 0/0
 20236 ;;		Unchanged: 0/0
 20237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20242 ;;Total ram usage:        0 bytes
 20243 ;; Hardware stack levels used:    1
 20244 ;; Hardware stack levels required when called:    7
 20245 ;; This function calls:
 20246 ;;		Nothing
 20247 ;; This function is called by:
 20248 ;;		_HMI_Init
 20249 ;;		_Button_Poll
 20250 ;; This function uses a non-reentrant model
 20251 ;;
 20252                           
 20253                           	psect	text95
 20254  001404                     __ptext95:
 20255                           	opt stack 0
 20256  001404                     _Event_NULL:
 20257                           	opt stack 21
 20258                           
 20259                           ;incstack = 0
 20260  001404  0012               	return		;funcret
 20261  001406                     __end_of_Event_NULL:
 20262                           	opt stack 0
 20263                           tosu	equ	0xFFF
 20264                           tosh	equ	0xFFE
 20265                           tosl	equ	0xFFD
 20266                           pclath	equ	0xFFA
 20267                           tblptru	equ	0xFF8
 20268                           tblptrh	equ	0xFF7
 20269                           tblptrl	equ	0xFF6
 20270                           tablat	equ	0xFF5
 20271                           prodh	equ	0xFF4
 20272                           prodl	equ	0xFF3
 20273                           intcon	equ	0xFF2
 20274                           postinc0	equ	0xFEE
 20275                           wreg	equ	0xFE8
 20276                           indf1	equ	0xFE7
 20277                           postdec1	equ	0xFE5
 20278                           fsr1h	equ	0xFE2
 20279                           fsr1l	equ	0xFE1
 20280                           indf2	equ	0xFDF
 20281                           postinc2	equ	0xFDE
 20282                           postdec2	equ	0xFDD
 20283                           plusw2	equ	0xFDB
 20284                           fsr2h	equ	0xFDA
 20285                           fsr2l	equ	0xFD9
 20286                           status	equ	0xFD8
 20287                           
 20288 ;; *************** function _Event_TestButton *****************
 20289 ;; Defined at:
 20290 ;;		line 52 in file "Events.c"
 20291 ;; Parameters:    Size  Location     Type
 20292 ;;  pState          1    wreg     unsigned char 
 20293 ;; Auto vars:     Size  Location     Type
 20294 ;;  pState          1   25[BANK0 ] unsigned char 
 20295 ;; Return value:  Size  Location     Type
 20296 ;;                  1    wreg      void 
 20297 ;; Registers used:
 20298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20299 ;; Tracked objects:
 20300 ;;		On entry : 0/0
 20301 ;;		On exit  : 0/0
 20302 ;;		Unchanged: 0/0
 20303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20307 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20308 ;;Total ram usage:        1 bytes
 20309 ;; Hardware stack levels used:    1
 20310 ;; Hardware stack levels required when called:   13
 20311 ;; This function calls:
 20312 ;;		_HMI_SetButton
 20313 ;;		_HMI_SetNumber
 20314 ;;		_LED_Toggle
 20315 ;; This function is called by:
 20316 ;;		_FunctInitButton
 20317 ;;		_Button_Poll
 20318 ;; This function uses a non-reentrant model
 20319 ;;
 20320                           
 20321                           	psect	text96
 20322  0155FC                     __ptext96:
 20323                           	opt stack 0
 20324  0155FC                     _Event_TestButton:
 20325                           	opt stack 15
 20326                           
 20327                           ;incstack = 0
 20328                           ;Event_TestButton@pState stored from wreg
 20329  0155FC  0100               	movlb	0	; () banked
 20330  0155FE  6F79               	movwf	Event_TestButton@pState& (0+255),b
 20331                           
 20332                           ;Events.c: 56: static UINT8 j = 0;
 20333                           ;Events.c: 60: if (pState == 0)
 20334  015600  0100               	movlb	0	; () banked
 20335  015602  5179               	movf	Event_TestButton@pState& (0+255),w,b
 20336  015604  A4D8               	btfss	status,2,c
 20337  015606  D010               	goto	l1873
 20338                           
 20339                           ; BSR set to: 0
 20340                           ;Events.c: 61: {
 20341                           ;Events.c: 62: j++;
 20342  015608  2A3C               	incf	Event_TestButton@j,f,c
 20343                           
 20344                           ; BSR set to: 0
 20345                           ;Events.c: 63: val += j;
 20346  01560A  503C               	movf	Event_TestButton@j,w,c
 20347  01560C  0101               	movlb	1	; () banked
 20348  01560E  2750               	addwf	_val& (0+255),f,b
 20349  015610  0E00               	movlw	0
 20350  015612  2351               	addwfc	(_val+1)& (0+255),f,b
 20351                           
 20352                           ; BSR set to: 1
 20353                           ;Events.c: 64: HMI_SetNumber( val );
 20354  015614  C150  F076         	movff	_val,HMI_SetNumber@pInput
 20355  015618  C151  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 20356  01561C  EC25  F0AC         	call	_HMI_SetNumber	;wreg free
 20357                           
 20358                           ;Events.c: 67: HMI_SetButton( j & 3 );
 20359  015620  503C               	movf	Event_TestButton@j,w,c
 20360  015622  0B03               	andlw	3
 20361  015624  EC94  F0A3         	call	_HMI_SetButton
 20362  015628                     l1873:
 20363                           
 20364                           ;Events.c: 68: }
 20365                           ;Events.c: 72: LED_Toggle(eLED1);
 20366  015628  0E00               	movlw	0
 20367  01562A  ECD8  F0A9         	call	_LED_Toggle
 20368  01562E  0012               	return		;funcret
 20369  015630                     __end_of_Event_TestButton:
 20370                           	opt stack 0
 20371                           tosu	equ	0xFFF
 20372                           tosh	equ	0xFFE
 20373                           tosl	equ	0xFFD
 20374                           pclath	equ	0xFFA
 20375                           tblptru	equ	0xFF8
 20376                           tblptrh	equ	0xFF7
 20377                           tblptrl	equ	0xFF6
 20378                           tablat	equ	0xFF5
 20379                           prodh	equ	0xFF4
 20380                           prodl	equ	0xFF3
 20381                           intcon	equ	0xFF2
 20382                           postinc0	equ	0xFEE
 20383                           wreg	equ	0xFE8
 20384                           indf1	equ	0xFE7
 20385                           postdec1	equ	0xFE5
 20386                           fsr1h	equ	0xFE2
 20387                           fsr1l	equ	0xFE1
 20388                           indf2	equ	0xFDF
 20389                           postinc2	equ	0xFDE
 20390                           postdec2	equ	0xFDD
 20391                           plusw2	equ	0xFDB
 20392                           fsr2h	equ	0xFDA
 20393                           fsr2l	equ	0xFD9
 20394                           status	equ	0xFD8
 20395                           
 20396 ;; *************** function _HMI_SetNumber *****************
 20397 ;; Defined at:
 20398 ;;		line 221 in file "HMI.c"
 20399 ;; Parameters:    Size  Location     Type
 20400 ;;  pInput          2   22[BANK0 ] int 
 20401 ;; Auto vars:     Size  Location     Type
 20402 ;;		None
 20403 ;; Return value:  Size  Location     Type
 20404 ;;                  1    wreg      void 
 20405 ;; Registers used:
 20406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 20407 ;; Tracked objects:
 20408 ;;		On entry : 0/0
 20409 ;;		On exit  : 0/0
 20410 ;;		Unchanged: 0/0
 20411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20412 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20415 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20416 ;;Total ram usage:        2 bytes
 20417 ;; Hardware stack levels used:    1
 20418 ;; Hardware stack levels required when called:    9
 20419 ;; This function calls:
 20420 ;;		_HMI_SetSegments
 20421 ;;		_itos
 20422 ;; This function is called by:
 20423 ;;		_Event_TestButton
 20424 ;;		_main
 20425 ;;		_ADCAverage
 20426 ;;		_Event_HMI_UpButton
 20427 ;;		_Event_HMI_DownButton
 20428 ;; This function uses a non-reentrant model
 20429 ;;
 20430                           
 20431                           	psect	text97
 20432  01584A                     __ptext97:
 20433                           	opt stack 0
 20434  01584A                     _HMI_SetNumber:
 20435                           	opt stack 19
 20436                           
 20437                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 20438                           
 20439                           ;incstack = 0
 20440  01584A  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 20441  01584E  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 20442  015852  0EA0               	movlw	low _HMIBoard
 20443  015854  0100               	movlb	0	; () banked
 20444  015856  6F6E               	movwf	itos@destination& (0+255),b
 20445  015858  0E02               	movlw	high _HMIBoard
 20446  01585A  6F6F               	movwf	(itos@destination+1)& (0+255),b
 20447  01585C  ECFE  F09D         	call	_itos	;wreg free
 20448                           
 20449                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 20450  015860  0EA0               	movlw	low _HMIBoard
 20451  015862  0100               	movlb	0	; () banked
 20452  015864  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 20453  015866  0E02               	movlw	high _HMIBoard
 20454  015868  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 20455  01586A  EC06  F0A0         	call	_HMI_SetSegments	;wreg free
 20456  01586E  0012               	return		;funcret
 20457  015870                     __end_of_HMI_SetNumber:
 20458                           	opt stack 0
 20459                           tosu	equ	0xFFF
 20460                           tosh	equ	0xFFE
 20461                           tosl	equ	0xFFD
 20462                           pclath	equ	0xFFA
 20463                           tblptru	equ	0xFF8
 20464                           tblptrh	equ	0xFF7
 20465                           tblptrl	equ	0xFF6
 20466                           tablat	equ	0xFF5
 20467                           prodh	equ	0xFF4
 20468                           prodl	equ	0xFF3
 20469                           intcon	equ	0xFF2
 20470                           postinc0	equ	0xFEE
 20471                           wreg	equ	0xFE8
 20472                           indf1	equ	0xFE7
 20473                           postdec1	equ	0xFE5
 20474                           fsr1h	equ	0xFE2
 20475                           fsr1l	equ	0xFE1
 20476                           indf2	equ	0xFDF
 20477                           postinc2	equ	0xFDE
 20478                           postdec2	equ	0xFDD
 20479                           plusw2	equ	0xFDB
 20480                           fsr2h	equ	0xFDA
 20481                           fsr2l	equ	0xFD9
 20482                           status	equ	0xFD8
 20483                           
 20484 ;; *************** function _itos *****************
 20485 ;; Defined at:
 20486 ;;		line 369 in file "Library/Types.c"
 20487 ;; Parameters:    Size  Location     Type
 20488 ;;  input           2   12[BANK0 ] unsigned short 
 20489 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 20490 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 20491 ;; Auto vars:     Size  Location     Type
 20492 ;;  Out             2   20[BANK0 ] unsigned short 
 20493 ;;  Length          2   18[BANK0 ] unsigned short 
 20494 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 20495 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 20496 ;; Return value:  Size  Location     Type
 20497 ;;                  1    wreg      void 
 20498 ;; Registers used:
 20499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 20500 ;; Tracked objects:
 20501 ;;		On entry : 0/0
 20502 ;;		On exit  : 0/0
 20503 ;;		Unchanged: 0/0
 20504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20506 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20508 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20509 ;;Total ram usage:       10 bytes
 20510 ;; Hardware stack levels used:    1
 20511 ;; Hardware stack levels required when called:    8
 20512 ;; This function calls:
 20513 ;;		___lwdiv
 20514 ;;		___lwmod
 20515 ;;		_reverse
 20516 ;; This function is called by:
 20517 ;;		_HMI_SetNumber
 20518 ;; This function uses a non-reentrant model
 20519 ;;
 20520                           
 20521                           	psect	text98
 20522  013BFC                     __ptext98:
 20523                           	opt stack 0
 20524  013BFC                     _itos:
 20525                           	opt stack 19
 20526                           
 20527                           ;Types.c: 371: UINT16 Out = input;
 20528                           
 20529                           ;incstack = 0
 20530  013BFC  C06C  F074         	movff	itos@input,itos@Out
 20531  013C00  C06D  F075         	movff	itos@input+1,itos@Out+1
 20532                           
 20533                           ;Types.c: 372: UINT16 Length = 0;
 20534  013C04  0E00               	movlw	0
 20535  013C06  0100               	movlb	0	; () banked
 20536  013C08  6F73               	movwf	(itos@Length+1)& (0+255),b
 20537  013C0A  0E00               	movlw	0
 20538  013C0C  6F72               	movwf	itos@Length& (0+255),b
 20539                           
 20540                           ; BSR set to: 0
 20541                           ;Types.c: 373: char *Data = destination;
 20542  013C0E  C06E  F070         	movff	itos@destination,itos@Data
 20543  013C12  C06F  F071         	movff	itos@destination+1,itos@Data+1
 20544                           
 20545                           ; BSR set to: 0
 20546                           ;Types.c: 374: if(Out == 0)
 20547  013C16  5174               	movf	itos@Out& (0+255),w,b
 20548  013C18  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 20549  013C1A  A4D8               	btfss	status,2,c
 20550  013C1C  D030               	goto	l929
 20551                           
 20552                           ; BSR set to: 0
 20553                           ;Types.c: 375: {
 20554                           ;Types.c: 376: Data[0] = (UINT16)'0';
 20555  013C1E  C070  FFD9         	movff	itos@Data,fsr2l
 20556  013C22  C071  FFDA         	movff	itos@Data+1,fsr2h
 20557  013C26  0E30               	movlw	48
 20558  013C28  6EDF               	movwf	indf2,c
 20559                           
 20560                           ; BSR set to: 0
 20561                           ;Types.c: 377: Length = 1;
 20562  013C2A  0E00               	movlw	0
 20563  013C2C  6F73               	movwf	(itos@Length+1)& (0+255),b
 20564  013C2E  0E01               	movlw	1
 20565  013C30  6F72               	movwf	itos@Length& (0+255),b
 20566                           
 20567                           ;Types.c: 378: }
 20568  013C32  D039               	goto	l928
 20569  013C34                     
 20570                           ; BSR set to: 0
 20571                           ;Types.c: 382: {
 20572                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 20573                           
 20574                           ; BSR set to: 0
 20575  013C34  C074  F067         	movff	itos@Out,___lwmod@dividend
 20576  013C38  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 20577  013C3C  0E00               	movlw	0
 20578  013C3E  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 20579  013C40  0E0A               	movlw	10
 20580  013C42  6F69               	movwf	___lwmod@divisor& (0+255),b
 20581  013C44  EC96  F0A9         	call	___lwmod	;wreg free
 20582  013C48  0100               	movlb	0	; () banked
 20583  013C4A  5167               	movf	?___lwmod& (0+255),w,b
 20584  013C4C  0F30               	addlw	48
 20585  013C4E  C070  FFD9         	movff	itos@Data,fsr2l
 20586  013C52  C071  FFDA         	movff	itos@Data+1,fsr2h
 20587  013C56  6EDF               	movwf	indf2,c
 20588                           
 20589                           ; BSR set to: 0
 20590                           ;Types.c: 384: Out /= 10;
 20591  013C58  C074  F060         	movff	itos@Out,___lwdiv@dividend
 20592  013C5C  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 20593  013C60  0E00               	movlw	0
 20594  013C62  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 20595  013C64  0E0A               	movlw	10
 20596  013C66  6F62               	movwf	___lwdiv@divisor& (0+255),b
 20597  013C68  ECCB  F0A7         	call	___lwdiv	;wreg free
 20598  013C6C  C060  F074         	movff	?___lwdiv,itos@Out
 20599  013C70  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 20600                           
 20601                           ;Types.c: 385: Length ++;
 20602  013C74  0100               	movlb	0	; () banked
 20603  013C76  4B72               	infsnz	itos@Length& (0+255),f,b
 20604  013C78  2B73               	incf	(itos@Length+1)& (0+255),f,b
 20605                           
 20606                           ; BSR set to: 0
 20607                           ;Types.c: 386: Data++;
 20608  013C7A  4B70               	infsnz	itos@Data& (0+255),f,b
 20609  013C7C  2B71               	incf	(itos@Data+1)& (0+255),f,b
 20610  013C7E                     l929:
 20611                           
 20612                           ; BSR set to: 0
 20613                           
 20614                           ; BSR set to: 0
 20615  013C7E  5174               	movf	itos@Out& (0+255),w,b
 20616  013C80  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 20617  013C82  B4D8               	btfsc	status,2,c
 20618  013C84  D006               	goto	u11190
 20619                           
 20620                           ; BSR set to: 0
 20621  013C86  5173               	movf	(itos@Length+1)& (0+255),w,b
 20622  013C88  E104               	bnz	l13887
 20623  013C8A  0E06               	movlw	6
 20624  013C8C  5D72               	subwf	itos@Length& (0+255),w,b
 20625  013C8E  A0D8               	btfss	status,0,c
 20626  013C90  D7D1               	goto	l930
 20627  013C92                     u11190:
 20628  013C92                     l13887:
 20629                           
 20630                           ; BSR set to: 0
 20631                           ;Types.c: 387: }
 20632                           ;Types.c: 388: reverse(destination, Length);
 20633  013C92  C06E  F060         	movff	itos@destination,reverse@input
 20634  013C96  C06F  F061         	movff	itos@destination+1,reverse@input+1
 20635  013C9A  C072  F062         	movff	itos@Length,reverse@length
 20636  013C9E  C073  F063         	movff	itos@Length+1,reverse@length+1
 20637  013CA2  ECA1  F0A7         	call	_reverse	;wreg free
 20638  013CA6                     l928:
 20639                           
 20640                           ;Types.c: 389: }
 20641                           ;Types.c: 390: destination[Length] = '\0';
 20642  013CA6  0100               	movlb	0	; () banked
 20643  013CA8  5172               	movf	itos@Length& (0+255),w,b
 20644  013CAA  256E               	addwf	itos@destination& (0+255),w,b
 20645  013CAC  6ED9               	movwf	fsr2l,c
 20646  013CAE  5173               	movf	(itos@Length+1)& (0+255),w,b
 20647  013CB0  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 20648  013CB2  6EDA               	movwf	fsr2h,c
 20649  013CB4  0E00               	movlw	0
 20650  013CB6  6EDF               	movwf	indf2,c
 20651                           
 20652                           ; BSR set to: 0
 20653  013CB8  0012               	return		;funcret
 20654  013CBA                     __end_of_itos:
 20655                           	opt stack 0
 20656                           tosu	equ	0xFFF
 20657                           tosh	equ	0xFFE
 20658                           tosl	equ	0xFFD
 20659                           pclath	equ	0xFFA
 20660                           tblptru	equ	0xFF8
 20661                           tblptrh	equ	0xFF7
 20662                           tblptrl	equ	0xFF6
 20663                           tablat	equ	0xFF5
 20664                           prodh	equ	0xFF4
 20665                           prodl	equ	0xFF3
 20666                           intcon	equ	0xFF2
 20667                           postinc0	equ	0xFEE
 20668                           wreg	equ	0xFE8
 20669                           indf1	equ	0xFE7
 20670                           postdec1	equ	0xFE5
 20671                           fsr1h	equ	0xFE2
 20672                           fsr1l	equ	0xFE1
 20673                           indf2	equ	0xFDF
 20674                           postinc2	equ	0xFDE
 20675                           postdec2	equ	0xFDD
 20676                           plusw2	equ	0xFDB
 20677                           fsr2h	equ	0xFDA
 20678                           fsr2l	equ	0xFD9
 20679                           status	equ	0xFD8
 20680                           
 20681 ;; *************** function _reverse *****************
 20682 ;; Defined at:
 20683 ;;		line 357 in file "Library/Types.c"
 20684 ;; Parameters:    Size  Location     Type
 20685 ;;  input           2    0[BANK0 ] PTR unsigned char 
 20686 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 20687 ;;  length          2    2[BANK0 ] unsigned short 
 20688 ;; Auto vars:     Size  Location     Type
 20689 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 20690 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 20691 ;;  tempVar         1    4[BANK0 ] unsigned char 
 20692 ;; Return value:  Size  Location     Type
 20693 ;;                  1    wreg      void 
 20694 ;; Registers used:
 20695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20696 ;; Tracked objects:
 20697 ;;		On entry : 0/0
 20698 ;;		On exit  : 0/0
 20699 ;;		Unchanged: 0/0
 20700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20701 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20702 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20704 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20705 ;;Total ram usage:        7 bytes
 20706 ;; Hardware stack levels used:    1
 20707 ;; Hardware stack levels required when called:    7
 20708 ;; This function calls:
 20709 ;;		Nothing
 20710 ;; This function is called by:
 20711 ;;		_itos
 20712 ;; This function uses a non-reentrant model
 20713 ;;
 20714                           
 20715                           	psect	text99
 20716  014F42                     __ptext99:
 20717                           	opt stack 0
 20718  014F42                     _reverse:
 20719                           	opt stack 19
 20720                           
 20721                           ;Types.c: 359: char tempVar,
 20722                           ;Types.c: 360: *iterator = input + length;
 20723                           
 20724                           ; BSR set to: 0
 20725                           ;incstack = 0
 20726  014F42  0100               	movlb	0	; () banked
 20727  014F44  5162               	movf	reverse@length& (0+255),w,b
 20728  014F46  2560               	addwf	reverse@input& (0+255),w,b
 20729  014F48  6F65               	movwf	reverse@iterator& (0+255),b
 20730  014F4A  5163               	movf	(reverse@length+1)& (0+255),w,b
 20731  014F4C  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 20732  014F4E  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 20733                           
 20734                           ;Types.c: 362: while ( --iterator > input )
 20735  014F50  D018               	goto	l921
 20736  014F52                     
 20737                           ; BSR set to: 0
 20738                           ;Types.c: 363: {
 20739                           ;Types.c: 364: tempVar = *input;
 20740                           
 20741                           ; BSR set to: 0
 20742  014F52  C060  FFD9         	movff	reverse@input,fsr2l
 20743  014F56  C061  FFDA         	movff	reverse@input+1,fsr2h
 20744  014F5A  50DF               	movf	indf2,w,c
 20745  014F5C  6F64               	movwf	reverse@tempVar& (0+255),b
 20746                           
 20747                           ; BSR set to: 0
 20748                           ;Types.c: 365: *input++=*iterator;
 20749  014F5E  C065  FFD9         	movff	reverse@iterator,fsr2l
 20750  014F62  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 20751  014F66  C060  FFE1         	movff	reverse@input,fsr1l
 20752  014F6A  C061  FFE2         	movff	reverse@input+1,fsr1h
 20753  014F6E  CFDF FFE7          	movff	indf2,indf1
 20754                           
 20755                           ; BSR set to: 0
 20756  014F72  4B60               	infsnz	reverse@input& (0+255),f,b
 20757  014F74  2B61               	incf	(reverse@input+1)& (0+255),f,b
 20758                           
 20759                           ; BSR set to: 0
 20760                           ;Types.c: 366: *iterator=tempVar;
 20761  014F76  C065  FFD9         	movff	reverse@iterator,fsr2l
 20762  014F7A  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 20763  014F7E  C064  FFDF         	movff	reverse@tempVar,indf2
 20764  014F82                     l921:
 20765                           
 20766                           ; BSR set to: 0
 20767                           
 20768                           ; BSR set to: 0
 20769  014F82  0765               	decf	reverse@iterator& (0+255),f,b
 20770  014F84  A0D8               	btfss	status,0,c
 20771  014F86  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 20772  014F88  5165               	movf	reverse@iterator& (0+255),w,b
 20773  014F8A  5D60               	subwf	reverse@input& (0+255),w,b
 20774  014F8C  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 20775  014F8E  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 20776  014F90  B0D8               	btfsc	status,0,c
 20777  014F92  0012               	return	
 20778  014F94  D7DE               	goto	l922
 20779  014F96                     __end_of_reverse:
 20780                           	opt stack 0
 20781                           tosu	equ	0xFFF
 20782                           tosh	equ	0xFFE
 20783                           tosl	equ	0xFFD
 20784                           pclath	equ	0xFFA
 20785                           tblptru	equ	0xFF8
 20786                           tblptrh	equ	0xFF7
 20787                           tblptrl	equ	0xFF6
 20788                           tablat	equ	0xFF5
 20789                           prodh	equ	0xFF4
 20790                           prodl	equ	0xFF3
 20791                           intcon	equ	0xFF2
 20792                           postinc0	equ	0xFEE
 20793                           wreg	equ	0xFE8
 20794                           indf1	equ	0xFE7
 20795                           postdec1	equ	0xFE5
 20796                           fsr1h	equ	0xFE2
 20797                           fsr1l	equ	0xFE1
 20798                           indf2	equ	0xFDF
 20799                           postinc2	equ	0xFDE
 20800                           postdec2	equ	0xFDD
 20801                           plusw2	equ	0xFDB
 20802                           fsr2h	equ	0xFDA
 20803                           fsr2l	equ	0xFD9
 20804                           status	equ	0xFD8
 20805                           
 20806 ;; *************** function ___lwmod *****************
 20807 ;; Defined at:
 20808 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 20809 ;; Parameters:    Size  Location     Type
 20810 ;;  dividend        2    7[BANK0 ] unsigned int 
 20811 ;;  divisor         2    9[BANK0 ] unsigned int 
 20812 ;; Auto vars:     Size  Location     Type
 20813 ;;  counter         1   11[BANK0 ] unsigned char 
 20814 ;; Return value:  Size  Location     Type
 20815 ;;                  2    7[BANK0 ] unsigned int 
 20816 ;; Registers used:
 20817 ;;		wreg, status,2, status,0
 20818 ;; Tracked objects:
 20819 ;;		On entry : 0/0
 20820 ;;		On exit  : 0/0
 20821 ;;		Unchanged: 0/0
 20822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20823 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20824 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20826 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20827 ;;Total ram usage:        5 bytes
 20828 ;; Hardware stack levels used:    1
 20829 ;; Hardware stack levels required when called:    7
 20830 ;; This function calls:
 20831 ;;		Nothing
 20832 ;; This function is called by:
 20833 ;;		_itos
 20834 ;;		_printf
 20835 ;; This function uses a non-reentrant model
 20836 ;;
 20837                           
 20838                           	psect	text100
 20839  01532C                     __ptext100:
 20840                           	opt stack 0
 20841  01532C                     ___lwmod:
 20842                           	opt stack 22
 20843                           
 20844                           ; BSR set to: 0
 20845                           ;incstack = 0
 20846  01532C  0100               	movlb	0	; () banked
 20847  01532E  5169               	movf	___lwmod@divisor& (0+255),w,b
 20848  015330  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 20849  015332  B4D8               	btfsc	status,2,c
 20850  015334  D018               	goto	l2911
 20851                           
 20852                           ; BSR set to: 0
 20853  015336  0E01               	movlw	1
 20854  015338  6F6B               	movwf	___lwmod@counter& (0+255),b
 20855  01533A  D004               	goto	l2906
 20856  01533C                     
 20857                           ; BSR set to: 0
 20858                           
 20859                           ; BSR set to: 0
 20860  01533C  90D8               	bcf	status,0,c
 20861  01533E  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 20862  015340  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 20863  015342  2B6B               	incf	___lwmod@counter& (0+255),f,b
 20864  015344                     l2906:
 20865                           
 20866                           ; BSR set to: 0
 20867                           
 20868                           ; BSR set to: 0
 20869  015344  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 20870  015346  D7FA               	goto	l2907
 20871  015348                     u11010:
 20872                           
 20873                           ; BSR set to: 0
 20874                           
 20875                           ; BSR set to: 0
 20876                           
 20877                           ; BSR set to: 0
 20878  015348  5169               	movf	___lwmod@divisor& (0+255),w,b
 20879  01534A  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 20880  01534C  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 20881  01534E  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 20882  015350  A0D8               	btfss	status,0,c
 20883  015352  D004               	goto	l2910
 20884                           
 20885                           ; BSR set to: 0
 20886  015354  5169               	movf	___lwmod@divisor& (0+255),w,b
 20887  015356  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 20888  015358  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 20889  01535A  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 20890  01535C                     l2910:
 20891                           
 20892                           ; BSR set to: 0
 20893                           
 20894                           ; BSR set to: 0
 20895  01535C  90D8               	bcf	status,0,c
 20896  01535E  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 20897  015360  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 20898                           
 20899                           ; BSR set to: 0
 20900  015362  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 20901  015364  D7F1               	goto	u11010
 20902  015366                     l2911:
 20903                           
 20904                           ; BSR set to: 0
 20905                           
 20906                           ; BSR set to: 0
 20907  015366  C067  F067         	movff	___lwmod@dividend,?___lwmod
 20908  01536A  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 20909                           
 20910                           ; BSR set to: 0
 20911  01536E  0012               	return		;funcret
 20912  015370                     __end_of___lwmod:
 20913                           	opt stack 0
 20914                           tosu	equ	0xFFF
 20915                           tosh	equ	0xFFE
 20916                           tosl	equ	0xFFD
 20917                           pclath	equ	0xFFA
 20918                           tblptru	equ	0xFF8
 20919                           tblptrh	equ	0xFF7
 20920                           tblptrl	equ	0xFF6
 20921                           tablat	equ	0xFF5
 20922                           prodh	equ	0xFF4
 20923                           prodl	equ	0xFF3
 20924                           intcon	equ	0xFF2
 20925                           postinc0	equ	0xFEE
 20926                           wreg	equ	0xFE8
 20927                           indf1	equ	0xFE7
 20928                           postdec1	equ	0xFE5
 20929                           fsr1h	equ	0xFE2
 20930                           fsr1l	equ	0xFE1
 20931                           indf2	equ	0xFDF
 20932                           postinc2	equ	0xFDE
 20933                           postdec2	equ	0xFDD
 20934                           plusw2	equ	0xFDB
 20935                           fsr2h	equ	0xFDA
 20936                           fsr2l	equ	0xFD9
 20937                           status	equ	0xFD8
 20938                           
 20939 ;; *************** function ___lwdiv *****************
 20940 ;; Defined at:
 20941 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 20942 ;; Parameters:    Size  Location     Type
 20943 ;;  dividend        2    0[BANK0 ] unsigned int 
 20944 ;;  divisor         2    2[BANK0 ] unsigned int 
 20945 ;; Auto vars:     Size  Location     Type
 20946 ;;  quotient        2    5[BANK0 ] unsigned int 
 20947 ;;  counter         1    4[BANK0 ] unsigned char 
 20948 ;; Return value:  Size  Location     Type
 20949 ;;                  2    0[BANK0 ] unsigned int 
 20950 ;; Registers used:
 20951 ;;		wreg, status,2, status,0
 20952 ;; Tracked objects:
 20953 ;;		On entry : 0/0
 20954 ;;		On exit  : 0/0
 20955 ;;		Unchanged: 0/0
 20956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20957 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20958 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20960 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20961 ;;Total ram usage:        7 bytes
 20962 ;; Hardware stack levels used:    1
 20963 ;; Hardware stack levels required when called:    7
 20964 ;; This function calls:
 20965 ;;		Nothing
 20966 ;; This function is called by:
 20967 ;;		_itos
 20968 ;;		_printf
 20969 ;; This function uses a non-reentrant model
 20970 ;;
 20971                           
 20972                           	psect	text101
 20973  014F96                     __ptext101:
 20974                           	opt stack 0
 20975  014F96                     ___lwdiv:
 20976                           	opt stack 22
 20977                           
 20978                           ; BSR set to: 0
 20979                           ;incstack = 0
 20980  014F96  0E00               	movlw	0
 20981  014F98  0100               	movlb	0	; () banked
 20982  014F9A  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 20983  014F9C  0E00               	movlw	0
 20984  014F9E  6F65               	movwf	___lwdiv@quotient& (0+255),b
 20985                           
 20986                           ; BSR set to: 0
 20987  014FA0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 20988  014FA2  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 20989  014FA4  B4D8               	btfsc	status,2,c
 20990  014FA6  D01C               	goto	l2901
 20991                           
 20992                           ; BSR set to: 0
 20993  014FA8  0E01               	movlw	1
 20994  014FAA  6F64               	movwf	___lwdiv@counter& (0+255),b
 20995  014FAC  D004               	goto	l2896
 20996  014FAE                     
 20997                           ; BSR set to: 0
 20998                           
 20999                           ; BSR set to: 0
 21000  014FAE  90D8               	bcf	status,0,c
 21001  014FB0  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 21002  014FB2  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 21003  014FB4  2B64               	incf	___lwdiv@counter& (0+255),f,b
 21004  014FB6                     l2896:
 21005                           
 21006                           ; BSR set to: 0
 21007                           
 21008                           ; BSR set to: 0
 21009  014FB6  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 21010  014FB8  D7FA               	goto	l2897
 21011  014FBA                     u10980:
 21012                           
 21013                           ; BSR set to: 0
 21014                           
 21015                           ; BSR set to: 0
 21016                           
 21017                           ; BSR set to: 0
 21018  014FBA  90D8               	bcf	status,0,c
 21019  014FBC  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 21020  014FBE  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 21021                           
 21022                           ; BSR set to: 0
 21023  014FC0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 21024  014FC2  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 21025  014FC4  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 21026  014FC6  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 21027  014FC8  A0D8               	btfss	status,0,c
 21028  014FCA  D005               	goto	l2900
 21029                           
 21030                           ; BSR set to: 0
 21031  014FCC  5162               	movf	___lwdiv@divisor& (0+255),w,b
 21032  014FCE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 21033  014FD0  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 21034  014FD2  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 21035                           
 21036                           ; BSR set to: 0
 21037  014FD4  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 21038  014FD6                     l2900:
 21039                           
 21040                           ; BSR set to: 0
 21041                           
 21042                           ; BSR set to: 0
 21043  014FD6  90D8               	bcf	status,0,c
 21044  014FD8  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 21045  014FDA  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 21046                           
 21047                           ; BSR set to: 0
 21048  014FDC  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 21049  014FDE  D7ED               	goto	u10980
 21050  014FE0                     l2901:
 21051                           
 21052                           ; BSR set to: 0
 21053                           
 21054                           ; BSR set to: 0
 21055  014FE0  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 21056  014FE4  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 21057                           
 21058                           ; BSR set to: 0
 21059  014FE8  0012               	return		;funcret
 21060  014FEA                     __end_of___lwdiv:
 21061                           	opt stack 0
 21062                           tosu	equ	0xFFF
 21063                           tosh	equ	0xFFE
 21064                           tosl	equ	0xFFD
 21065                           pclath	equ	0xFFA
 21066                           tblptru	equ	0xFF8
 21067                           tblptrh	equ	0xFF7
 21068                           tblptrl	equ	0xFF6
 21069                           tablat	equ	0xFF5
 21070                           prodh	equ	0xFF4
 21071                           prodl	equ	0xFF3
 21072                           intcon	equ	0xFF2
 21073                           postinc0	equ	0xFEE
 21074                           wreg	equ	0xFE8
 21075                           indf1	equ	0xFE7
 21076                           postdec1	equ	0xFE5
 21077                           fsr1h	equ	0xFE2
 21078                           fsr1l	equ	0xFE1
 21079                           indf2	equ	0xFDF
 21080                           postinc2	equ	0xFDE
 21081                           postdec2	equ	0xFDD
 21082                           plusw2	equ	0xFDB
 21083                           fsr2h	equ	0xFDA
 21084                           fsr2l	equ	0xFD9
 21085                           status	equ	0xFD8
 21086                           
 21087 ;; *************** function _HMI_SetSegments *****************
 21088 ;; Defined at:
 21089 ;;		line 226 in file "HMI.c"
 21090 ;; Parameters:    Size  Location     Type
 21091 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 21092 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 21093 ;; Auto vars:     Size  Location     Type
 21094 ;;  in              2    4[BANK0 ] unsigned short 
 21095 ;; Return value:  Size  Location     Type
 21096 ;;                  1    wreg      void 
 21097 ;; Registers used:
 21098 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21099 ;; Tracked objects:
 21100 ;;		On entry : 0/0
 21101 ;;		On exit  : 0/0
 21102 ;;		Unchanged: 0/0
 21103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21104 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21105 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21107 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21108 ;;Total ram usage:        5 bytes
 21109 ;; Hardware stack levels used:    1
 21110 ;; Hardware stack levels required when called:    8
 21111 ;; This function calls:
 21112 ;;		_ToSegment
 21113 ;; This function is called by:
 21114 ;;		_HMI_SetNumber
 21115 ;; This function uses a non-reentrant model
 21116 ;;
 21117                           
 21118                           	psect	text102
 21119  01400C                     __ptext102:
 21120                           	opt stack 0
 21121  01400C                     _HMI_SetSegments:
 21122                           	opt stack 19
 21123                           
 21124                           ;HMI.c: 228: UINT16 in=0;
 21125                           
 21126                           ; BSR set to: 0
 21127                           ;incstack = 0
 21128  01400C  0E00               	movlw	0
 21129  01400E  0100               	movlb	0	; () banked
 21130  014010  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 21131  014012  0E00               	movlw	0
 21132  014014  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 21133                           
 21134                           ;HMI.c: 229: while(*pString)
 21135  014016  D02E               	goto	l1202
 21136  014018                     
 21137                           ; BSR set to: 0
 21138                           ;HMI.c: 230: {
 21139                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 21140                           
 21141                           ; BSR set to: 0
 21142  014018  0EA0               	movlw	low _HMIBoard
 21143  01401A  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 21144  01401C  6ED9               	movwf	fsr2l,c
 21145  01401E  0E02               	movlw	high _HMIBoard
 21146  014020  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 21147  014022  6EDA               	movwf	fsr2h,c
 21148  014024  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 21149  014028  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 21150  01402C  50E7               	movf	indf1,w,c
 21151  01402E  ECD1  F08B         	call	_ToSegment
 21152  014032  6EDF               	movwf	indf2,c
 21153                           
 21154                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 21155  014034  0EA0               	movlw	low _HMIBoard
 21156  014036  0100               	movlb	0	; () banked
 21157  014038  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 21158  01403A  6ED9               	movwf	fsr2l,c
 21159  01403C  0E02               	movlw	high _HMIBoard
 21160  01403E  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 21161  014040  6EDA               	movwf	fsr2h,c
 21162  014042  0E80               	movlw	128
 21163  014044  18DE               	xorwf	postinc2,w,c
 21164  014046  A4D8               	btfss	status,2,c
 21165  014048  D00B               	goto	l1201
 21166                           
 21167                           ; BSR set to: 0
 21168                           ;HMI.c: 234: {
 21169                           ;HMI.c: 235: in--;
 21170  01404A  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 21171  01404C  A0D8               	btfss	status,0,c
 21172  01404E  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 21173                           
 21174                           ; BSR set to: 0
 21175                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 21176  014050  0EA0               	movlw	low _HMIBoard
 21177  014052  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 21178  014054  6ED9               	movwf	fsr2l,c
 21179  014056  0E02               	movlw	high _HMIBoard
 21180  014058  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 21181  01405A  6EDA               	movwf	fsr2h,c
 21182  01405C  0E00               	movlw	0
 21183  01405E  8EDB               	bsf	plusw2,7,c
 21184  014060                     l1201:
 21185                           
 21186                           ; BSR set to: 0
 21187                           ;HMI.c: 237: }
 21188                           ;HMI.c: 239: pString++;
 21189                           
 21190                           ; BSR set to: 0
 21191  014060  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 21192  014062  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 21193                           
 21194                           ; BSR set to: 0
 21195                           ;HMI.c: 240: in++;
 21196  014064  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 21197  014066  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 21198                           
 21199                           ; BSR set to: 0
 21200                           ;HMI.c: 241: if (in>=6)
 21201  014068  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 21202  01406A  E116               	bnz	l13949
 21203  01406C  0E06               	movlw	6
 21204  01406E  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 21205  014070  B0D8               	btfsc	status,0,c
 21206  014072  D012               	goto	l1204
 21207  014074                     l1202:
 21208                           
 21209                           ; BSR set to: 0
 21210                           
 21211                           ; BSR set to: 0
 21212                           
 21213                           ; BSR set to: 0
 21214  014074  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 21215  014078  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 21216  01407C  50DF               	movf	indf2,w,c
 21217  01407E  B4D8               	btfsc	status,2,c
 21218  014080  D00B               	goto	l1204
 21219  014082  D7CA               	goto	l1200
 21220  014084                     
 21221                           ; BSR set to: 0
 21222                           ;HMI.c: 245: {
 21223                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 21224                           
 21225                           ; BSR set to: 0
 21226  014084  0EA0               	movlw	low _HMIBoard
 21227  014086  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 21228  014088  6ED9               	movwf	fsr2l,c
 21229  01408A  0E02               	movlw	high _HMIBoard
 21230  01408C  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 21231  01408E  6EDA               	movwf	fsr2h,c
 21232  014090  0E00               	movlw	0
 21233  014092  6EDF               	movwf	indf2,c
 21234                           
 21235                           ; BSR set to: 0
 21236                           ;HMI.c: 247: in++;
 21237  014094  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 21238  014096  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 21239  014098                     l1204:
 21240  014098                     l13949:
 21241                           
 21242                           ; BSR set to: 0
 21243  014098  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 21244  01409A  E105               	bnz	l1207
 21245  01409C  0E06               	movlw	6
 21246  01409E  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 21247  0140A0  B0D8               	btfsc	status,0,c
 21248  0140A2  0012               	return	
 21249  0140A4  D7EF               	goto	l1205
 21250  0140A6                     l1207:
 21251                           
 21252                           ; BSR set to: 0
 21253  0140A6  0012               	return		;funcret
 21254  0140A8                     __end_of_HMI_SetSegments:
 21255                           	opt stack 0
 21256                           tosu	equ	0xFFF
 21257                           tosh	equ	0xFFE
 21258                           tosl	equ	0xFFD
 21259                           pclath	equ	0xFFA
 21260                           tblptru	equ	0xFF8
 21261                           tblptrh	equ	0xFF7
 21262                           tblptrl	equ	0xFF6
 21263                           tablat	equ	0xFF5
 21264                           prodh	equ	0xFF4
 21265                           prodl	equ	0xFF3
 21266                           intcon	equ	0xFF2
 21267                           postinc0	equ	0xFEE
 21268                           wreg	equ	0xFE8
 21269                           indf1	equ	0xFE7
 21270                           postdec1	equ	0xFE5
 21271                           fsr1h	equ	0xFE2
 21272                           fsr1l	equ	0xFE1
 21273                           indf2	equ	0xFDF
 21274                           postinc2	equ	0xFDE
 21275                           postdec2	equ	0xFDD
 21276                           plusw2	equ	0xFDB
 21277                           fsr2h	equ	0xFDA
 21278                           fsr2l	equ	0xFD9
 21279                           status	equ	0xFD8
 21280                           
 21281 ;; *************** function _ToSegment *****************
 21282 ;; Defined at:
 21283 ;;		line 284 in file "Library/Types.c"
 21284 ;; Parameters:    Size  Location     Type
 21285 ;;  pCHR            1    wreg     unsigned char 
 21286 ;; Auto vars:     Size  Location     Type
 21287 ;;  pCHR            1    0[BANK0 ] unsigned char 
 21288 ;; Return value:  Size  Location     Type
 21289 ;;                  1    wreg      unsigned char 
 21290 ;; Registers used:
 21291 ;;		wreg, status,2, status,0
 21292 ;; Tracked objects:
 21293 ;;		On entry : 0/0
 21294 ;;		On exit  : 0/0
 21295 ;;		Unchanged: 0/0
 21296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21300 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21301 ;;Total ram usage:        1 bytes
 21302 ;; Hardware stack levels used:    1
 21303 ;; Hardware stack levels required when called:    7
 21304 ;; This function calls:
 21305 ;;		Nothing
 21306 ;; This function is called by:
 21307 ;;		_HMI_SetSegments
 21308 ;; This function uses a non-reentrant model
 21309 ;;
 21310                           
 21311                           	psect	text103
 21312  0117A2                     __ptext103:
 21313                           	opt stack 0
 21314  0117A2                     _ToSegment:
 21315                           	opt stack 19
 21316                           
 21317                           ; BSR set to: 0
 21318                           ;incstack = 0
 21319                           ;ToSegment@pCHR stored from wreg
 21320  0117A2  0100               	movlb	0	; () banked
 21321  0117A4  6F60               	movwf	ToSegment@pCHR& (0+255),b
 21322                           
 21323                           ;Types.c: 286: switch(pCHR)
 21324  0117A6  D07E               	goto	l853
 21325  0117A8  0E3F               	movlw	63
 21326  0117AA  0012               	return	
 21327  0117AC  0E06               	movlw	6
 21328  0117AE  0012               	return	
 21329  0117B0  0E5B               	movlw	91
 21330  0117B2  0012               	return	
 21331  0117B4  0E4F               	movlw	79
 21332  0117B6  0012               	return	
 21333  0117B8  0E66               	movlw	102
 21334  0117BA  0012               	return	
 21335  0117BC  0E6D               	movlw	109
 21336  0117BE  0012               	return	
 21337  0117C0  0E7D               	movlw	125
 21338  0117C2  0012               	return	
 21339  0117C4  0E07               	movlw	7
 21340  0117C6  0012               	return	
 21341  0117C8  0E7F               	movlw	127
 21342  0117CA  0012               	return	
 21343  0117CC  0E6F               	movlw	111
 21344  0117CE  0012               	return	
 21345  0117D0  0E5F               	movlw	95
 21346  0117D2  0012               	return	
 21347  0117D4  0E7C               	movlw	124
 21348  0117D6  0012               	return	
 21349  0117D8  0E58               	movlw	88
 21350  0117DA  0012               	return	
 21351  0117DC  0E5E               	movlw	94
 21352  0117DE  0012               	return	
 21353  0117E0  0E7B               	movlw	123
 21354  0117E2  0012               	return	
 21355  0117E4  0E71               	movlw	113
 21356  0117E6  0012               	return	
 21357  0117E8  0E6F               	movlw	111
 21358  0117EA  0012               	return	
 21359  0117EC  0E74               	movlw	116
 21360  0117EE  0012               	return	
 21361  0117F0  0E04               	movlw	4
 21362  0117F2  0012               	return	
 21363  0117F4  0E0E               	movlw	14
 21364  0117F6  0012               	return	
 21365  0117F8  0E7A               	movlw	122
 21366  0117FA  0012               	return	
 21367  0117FC  0E06               	movlw	6
 21368  0117FE  0012               	return	
 21369  011800  0E14               	movlw	20
 21370  011802  0012               	return	
 21371  011804  0E54               	movlw	84
 21372  011806  0012               	return	
 21373  011808  0E5C               	movlw	92
 21374  01180A  0012               	return	
 21375  01180C  0E73               	movlw	115
 21376  01180E  0012               	return	
 21377  011810  0E67               	movlw	103
 21378  011812  0012               	return	
 21379  011814  0E50               	movlw	80
 21380  011816  0012               	return	
 21381  011818  0E6D               	movlw	109
 21382  01181A  0012               	return	
 21383  01181C  0E78               	movlw	120
 21384  01181E  0012               	return	
 21385  011820  0E1C               	movlw	28
 21386  011822  0012               	return	
 21387  011824  0E62               	movlw	98
 21388  011826  0012               	return	
 21389  011828  0E2A               	movlw	42
 21390  01182A  0012               	return	
 21391  01182C  0E64               	movlw	100
 21392  01182E  0012               	return	
 21393  011830  0E6E               	movlw	110
 21394  011832  0012               	return	
 21395  011834  0E5B               	movlw	91
 21396  011836  0012               	return	
 21397  011838  0E77               	movlw	119
 21398  01183A  0012               	return	
 21399  01183C  0E7F               	movlw	127
 21400  01183E  0012               	return	
 21401  011840  0E39               	movlw	57
 21402  011842  0012               	return	
 21403  011844  0E3F               	movlw	63
 21404  011846  0012               	return	
 21405  011848  0E79               	movlw	121
 21406  01184A  0012               	return	
 21407  01184C  0E71               	movlw	113
 21408  01184E  0012               	return	
 21409  011850  0E3D               	movlw	61
 21410  011852  0012               	return	
 21411  011854  0E76               	movlw	118
 21412  011856  0012               	return	
 21413  011858  0E06               	movlw	6
 21414  01185A  0012               	return	
 21415  01185C  0E1E               	movlw	30
 21416  01185E  0012               	return	
 21417  011860  0E57               	movlw	87
 21418  011862  0012               	return	
 21419  011864  0E38               	movlw	56
 21420  011866  0012               	return	
 21421  011868  0E76               	movlw	118
 21422  01186A  0012               	return	
 21423  01186C  0E76               	movlw	118
 21424  01186E  0012               	return	
 21425  011870  0E3F               	movlw	63
 21426  011872  0012               	return	
 21427  011874  0E73               	movlw	115
 21428  011876  0012               	return	
 21429  011878  0E3F               	movlw	63
 21430  01187A  0012               	return	
 21431  01187C  0E77               	movlw	119
 21432  01187E  0012               	return	
 21433  011880  0E6D               	movlw	109
 21434  011882  0012               	return	
 21435  011884  0E31               	movlw	49
 21436  011886  0012               	return	
 21437  011888  0E3E               	movlw	62
 21438  01188A  0012               	return	
 21439  01188C  0E3E               	movlw	62
 21440  01188E  0012               	return	
 21441  011890  0E7E               	movlw	126
 21442  011892  0012               	return	
 21443  011894  0E76               	movlw	118
 21444  011896  0012               	return	
 21445  011898  0E66               	movlw	102
 21446  01189A  0012               	return	
 21447  01189C  0E5B               	movlw	91
 21448  01189E  0012               	return	
 21449  0118A0  0E80               	movlw	128
 21450  0118A2  0012               	return	
 21451  0118A4                     l853:
 21452  0118A4  0100               	movlb	0	; () banked
 21453  0118A6  5160               	movf	ToSegment@pCHR& (0+255),w,b
 21454                           
 21455                           ; Switch size 1, requested type "space"
 21456                           ; Number of cases is 63, Range of values is 46 to 122
 21457                           ; switch strategies available:
 21458                           ; Name         Instructions Cycles
 21459                           ; simple_byte          190    96 (average)
 21460                           ;	Chosen strategy is simple_byte
 21461  0118A8  0A2E               	xorlw	46	; case 46
 21462  0118AA  B4D8               	btfsc	status,2,c
 21463  0118AC  D7F9               	goto	l917
 21464  0118AE  0A1E               	xorlw	30	; case 48
 21465  0118B0  B4D8               	btfsc	status,2,c
 21466  0118B2  D77A               	goto	l854
 21467  0118B4  0A01               	xorlw	1	; case 49
 21468  0118B6  B4D8               	btfsc	status,2,c
 21469  0118B8  D779               	goto	l856
 21470  0118BA  0A03               	xorlw	3	; case 50
 21471  0118BC  B4D8               	btfsc	status,2,c
 21472  0118BE  D778               	goto	l857
 21473  0118C0  0A01               	xorlw	1	; case 51
 21474  0118C2  B4D8               	btfsc	status,2,c
 21475  0118C4  D777               	goto	l858
 21476  0118C6  0A07               	xorlw	7	; case 52
 21477  0118C8  B4D8               	btfsc	status,2,c
 21478  0118CA  D776               	goto	l859
 21479  0118CC  0A01               	xorlw	1	; case 53
 21480  0118CE  B4D8               	btfsc	status,2,c
 21481  0118D0  D775               	goto	l860
 21482  0118D2  0A03               	xorlw	3	; case 54
 21483  0118D4  B4D8               	btfsc	status,2,c
 21484  0118D6  D774               	goto	l861
 21485  0118D8  0A01               	xorlw	1	; case 55
 21486  0118DA  B4D8               	btfsc	status,2,c
 21487  0118DC  D773               	goto	l862
 21488  0118DE  0A0F               	xorlw	15	; case 56
 21489  0118E0  B4D8               	btfsc	status,2,c
 21490  0118E2  D772               	goto	l863
 21491  0118E4  0A01               	xorlw	1	; case 57
 21492  0118E6  B4D8               	btfsc	status,2,c
 21493  0118E8  D771               	goto	l864
 21494  0118EA  0A78               	xorlw	120	; case 65
 21495  0118EC  B4D8               	btfsc	status,2,c
 21496  0118EE  D7A4               	goto	l891
 21497  0118F0  0A03               	xorlw	3	; case 66
 21498  0118F2  B4D8               	btfsc	status,2,c
 21499  0118F4  D7A3               	goto	l892
 21500  0118F6  0A01               	xorlw	1	; case 67
 21501  0118F8  B4D8               	btfsc	status,2,c
 21502  0118FA  D7A2               	goto	l893
 21503  0118FC  0A07               	xorlw	7	; case 68
 21504  0118FE  B4D8               	btfsc	status,2,c
 21505  011900  D7A1               	goto	l894
 21506  011902  0A01               	xorlw	1	; case 69
 21507  011904  B4D8               	btfsc	status,2,c
 21508  011906  D7A0               	goto	l895
 21509  011908  0A03               	xorlw	3	; case 70
 21510  01190A  B4D8               	btfsc	status,2,c
 21511  01190C  D79F               	goto	l896
 21512  01190E  0A01               	xorlw	1	; case 71
 21513  011910  B4D8               	btfsc	status,2,c
 21514  011912  D79E               	goto	l897
 21515  011914  0A0F               	xorlw	15	; case 72
 21516  011916  B4D8               	btfsc	status,2,c
 21517  011918  D79D               	goto	l898
 21518  01191A  0A01               	xorlw	1	; case 73
 21519  01191C  B4D8               	btfsc	status,2,c
 21520  01191E  D79C               	goto	l899
 21521  011920  0A03               	xorlw	3	; case 74
 21522  011922  B4D8               	btfsc	status,2,c
 21523  011924  D79B               	goto	l900
 21524  011926  0A01               	xorlw	1	; case 75
 21525  011928  B4D8               	btfsc	status,2,c
 21526  01192A  D79A               	goto	l901
 21527  01192C  0A07               	xorlw	7	; case 76
 21528  01192E  B4D8               	btfsc	status,2,c
 21529  011930  D799               	goto	l902
 21530  011932  0A01               	xorlw	1	; case 77
 21531  011934  B4D8               	btfsc	status,2,c
 21532  011936  D798               	goto	l903
 21533  011938  0A03               	xorlw	3	; case 78
 21534  01193A  B4D8               	btfsc	status,2,c
 21535  01193C  D797               	goto	l904
 21536  01193E  0A01               	xorlw	1	; case 79
 21537  011940  B4D8               	btfsc	status,2,c
 21538  011942  D796               	goto	l905
 21539  011944  0A1F               	xorlw	31	; case 80
 21540  011946  B4D8               	btfsc	status,2,c
 21541  011948  D795               	goto	l906
 21542  01194A  0A01               	xorlw	1	; case 81
 21543  01194C  B4D8               	btfsc	status,2,c
 21544  01194E  D794               	goto	l907
 21545  011950  0A03               	xorlw	3	; case 82
 21546  011952  B4D8               	btfsc	status,2,c
 21547  011954  D793               	goto	l908
 21548  011956  0A01               	xorlw	1	; case 83
 21549  011958  B4D8               	btfsc	status,2,c
 21550  01195A  D792               	goto	l909
 21551  01195C  0A07               	xorlw	7	; case 84
 21552  01195E  B4D8               	btfsc	status,2,c
 21553  011960  D791               	goto	l910
 21554  011962  0A01               	xorlw	1	; case 85
 21555  011964  B4D8               	btfsc	status,2,c
 21556  011966  D790               	goto	l911
 21557  011968  0A03               	xorlw	3	; case 86
 21558  01196A  B4D8               	btfsc	status,2,c
 21559  01196C  D78F               	goto	l912
 21560  01196E  0A01               	xorlw	1	; case 87
 21561  011970  B4D8               	btfsc	status,2,c
 21562  011972  D78E               	goto	l913
 21563  011974  0A0F               	xorlw	15	; case 88
 21564  011976  B4D8               	btfsc	status,2,c
 21565  011978  D78D               	goto	l914
 21566  01197A  0A01               	xorlw	1	; case 89
 21567  01197C  B4D8               	btfsc	status,2,c
 21568  01197E  D78C               	goto	l915
 21569  011980  0A03               	xorlw	3	; case 90
 21570  011982  B4D8               	btfsc	status,2,c
 21571  011984  D78B               	goto	l916
 21572  011986  0A3B               	xorlw	59	; case 97
 21573  011988  B4D8               	btfsc	status,2,c
 21574  01198A  D722               	goto	l865
 21575  01198C  0A03               	xorlw	3	; case 98
 21576  01198E  B4D8               	btfsc	status,2,c
 21577  011990  D721               	goto	l866
 21578  011992  0A01               	xorlw	1	; case 99
 21579  011994  B4D8               	btfsc	status,2,c
 21580  011996  D720               	goto	l867
 21581  011998  0A07               	xorlw	7	; case 100
 21582  01199A  B4D8               	btfsc	status,2,c
 21583  01199C  D71F               	goto	l868
 21584  01199E  0A01               	xorlw	1	; case 101
 21585  0119A0  B4D8               	btfsc	status,2,c
 21586  0119A2  D71E               	goto	l869
 21587  0119A4  0A03               	xorlw	3	; case 102
 21588  0119A6  B4D8               	btfsc	status,2,c
 21589  0119A8  D71D               	goto	l870
 21590  0119AA  0A01               	xorlw	1	; case 103
 21591  0119AC  B4D8               	btfsc	status,2,c
 21592  0119AE  D71C               	goto	l871
 21593  0119B0  0A0F               	xorlw	15	; case 104
 21594  0119B2  B4D8               	btfsc	status,2,c
 21595  0119B4  D71B               	goto	l872
 21596  0119B6  0A01               	xorlw	1	; case 105
 21597  0119B8  B4D8               	btfsc	status,2,c
 21598  0119BA  D71A               	goto	l873
 21599  0119BC  0A03               	xorlw	3	; case 106
 21600  0119BE  B4D8               	btfsc	status,2,c
 21601  0119C0  D719               	goto	l874
 21602  0119C2  0A01               	xorlw	1	; case 107
 21603  0119C4  B4D8               	btfsc	status,2,c
 21604  0119C6  D718               	goto	l875
 21605  0119C8  0A07               	xorlw	7	; case 108
 21606  0119CA  B4D8               	btfsc	status,2,c
 21607  0119CC  D717               	goto	l876
 21608  0119CE  0A01               	xorlw	1	; case 109
 21609  0119D0  B4D8               	btfsc	status,2,c
 21610  0119D2  D716               	goto	l877
 21611  0119D4  0A03               	xorlw	3	; case 110
 21612  0119D6  B4D8               	btfsc	status,2,c
 21613  0119D8  D715               	goto	l878
 21614  0119DA  0A01               	xorlw	1	; case 111
 21615  0119DC  B4D8               	btfsc	status,2,c
 21616  0119DE  D714               	goto	l879
 21617  0119E0  0A1F               	xorlw	31	; case 112
 21618  0119E2  B4D8               	btfsc	status,2,c
 21619  0119E4  D713               	goto	l880
 21620  0119E6  0A01               	xorlw	1	; case 113
 21621  0119E8  B4D8               	btfsc	status,2,c
 21622  0119EA  D712               	goto	l881
 21623  0119EC  0A03               	xorlw	3	; case 114
 21624  0119EE  B4D8               	btfsc	status,2,c
 21625  0119F0  D711               	goto	l882
 21626  0119F2  0A01               	xorlw	1	; case 115
 21627  0119F4  B4D8               	btfsc	status,2,c
 21628  0119F6  D710               	goto	l883
 21629  0119F8  0A07               	xorlw	7	; case 116
 21630  0119FA  B4D8               	btfsc	status,2,c
 21631  0119FC  D70F               	goto	l884
 21632  0119FE  0A01               	xorlw	1	; case 117
 21633  011A00  B4D8               	btfsc	status,2,c
 21634  011A02  D70E               	goto	l885
 21635  011A04  0A03               	xorlw	3	; case 118
 21636  011A06  B4D8               	btfsc	status,2,c
 21637  011A08  D70D               	goto	l886
 21638  011A0A  0A01               	xorlw	1	; case 119
 21639  011A0C  B4D8               	btfsc	status,2,c
 21640  011A0E  D70C               	goto	l887
 21641  011A10  0A0F               	xorlw	15	; case 120
 21642  011A12  B4D8               	btfsc	status,2,c
 21643  011A14  D70B               	goto	l888
 21644  011A16  0A01               	xorlw	1	; case 121
 21645  011A18  B4D8               	btfsc	status,2,c
 21646  011A1A  D70A               	goto	l889
 21647  011A1C  0A03               	xorlw	3	; case 122
 21648  011A1E  B4D8               	btfsc	status,2,c
 21649  011A20  D709               	goto	l890
 21650                           
 21651                           ;Types.c: 354: return 0;
 21652                           
 21653                           ; BSR set to: 0
 21654  011A22  0E00               	movlw	0
 21655  011A24  0012               	return	
 21656  011A26                     __end_of_ToSegment:
 21657                           	opt stack 0
 21658                           tosu	equ	0xFFF
 21659                           tosh	equ	0xFFE
 21660                           tosl	equ	0xFFD
 21661                           pclath	equ	0xFFA
 21662                           tblptru	equ	0xFF8
 21663                           tblptrh	equ	0xFF7
 21664                           tblptrl	equ	0xFF6
 21665                           tablat	equ	0xFF5
 21666                           prodh	equ	0xFF4
 21667                           prodl	equ	0xFF3
 21668                           intcon	equ	0xFF2
 21669                           postinc0	equ	0xFEE
 21670                           wreg	equ	0xFE8
 21671                           indf1	equ	0xFE7
 21672                           postdec1	equ	0xFE5
 21673                           fsr1h	equ	0xFE2
 21674                           fsr1l	equ	0xFE1
 21675                           indf2	equ	0xFDF
 21676                           postinc2	equ	0xFDE
 21677                           postdec2	equ	0xFDD
 21678                           plusw2	equ	0xFDB
 21679                           fsr2h	equ	0xFDA
 21680                           fsr2l	equ	0xFD9
 21681                           status	equ	0xFD8
 21682                           
 21683 ;; *************** function _HMI_SetButton *****************
 21684 ;; Defined at:
 21685 ;;		line 186 in file "HMI.c"
 21686 ;; Parameters:    Size  Location     Type
 21687 ;;  pValue          1    wreg     unsigned char 
 21688 ;; Auto vars:     Size  Location     Type
 21689 ;;  pValue          1    6[BANK0 ] unsigned char 
 21690 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 21691 ;;  v               1    7[BANK0 ] unsigned char 
 21692 ;; Return value:  Size  Location     Type
 21693 ;;                  1    wreg      void 
 21694 ;; Registers used:
 21695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 21696 ;; Tracked objects:
 21697 ;;		On entry : 0/0
 21698 ;;		On exit  : 0/0
 21699 ;;		Unchanged: 0/0
 21700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21702 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21703 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21704 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21705 ;;Total ram usage:        8 bytes
 21706 ;; Hardware stack levels used:    1
 21707 ;; Hardware stack levels required when called:    7
 21708 ;; This function calls:
 21709 ;;		Nothing
 21710 ;; This function is called by:
 21711 ;;		_Event_TestButton
 21712 ;; This function uses a non-reentrant model
 21713 ;;
 21714                           
 21715                           	psect	text104
 21716  014728                     __ptext104:
 21717                           	opt stack 0
 21718  014728                     _HMI_SetButton:
 21719                           	opt stack 20
 21720                           
 21721                           ;incstack = 0
 21722                           ;HMI_SetButton@pValue stored from wreg
 21723  014728  0100               	movlb	0	; () banked
 21724  01472A  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 21725                           
 21726                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 21727  01472C  0E02               	movlw	low HMI_SetButton@F7213
 21728  01472E  6EF6               	movwf	tblptrl,c
 21729  014730                     	if	1	;There is more than 1 active tblptr byte
 21730  014730  0EFC               	movlw	high HMI_SetButton@F7213
 21731  014732  6EF7               	movwf	tblptrh,c
 21732  014734                     	endif
 21733  014734                     	if	1	;There are 3 active tblptr bytes
 21734  014734  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 21735  014736  6EF8               	movwf	tblptru,c
 21736  014738                     	endif
 21737  014738  0009               	tblrd		*+
 21738  01473A  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 21739  01473E  0009               	tblrd		*+
 21740  014740  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 21741  014744  0009               	tblrd		*+
 21742  014746  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 21743  01474A  000A               	tblrd		*-
 21744  01474C  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 21745                           
 21746                           ;HMI.c: 189: UINT8 v = 0b00010001;
 21747  014750  0E11               	movlw	17
 21748  014752  0100               	movlb	0	; () banked
 21749  014754  6F67               	movwf	HMI_SetButton@v& (0+255),b
 21750                           
 21751                           ; BSR set to: 0
 21752                           ;HMI.c: 190: pValue &= 3;
 21753  014756  0E03               	movlw	3
 21754  014758  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 21755                           
 21756                           ; BSR set to: 0
 21757                           ;HMI.c: 191: v = v << reindex[pValue];
 21758  01475A  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 21759  01475C  0D01               	mullw	1
 21760  01475E  0E62               	movlw	low HMI_SetButton@reindex
 21761  014760  24F3               	addwf	prodl,w,c
 21762  014762  6ED9               	movwf	fsr2l,c
 21763  014764  0E00               	movlw	high HMI_SetButton@reindex
 21764  014766  20F4               	addwfc	prodh,w,c
 21765  014768  6EDA               	movwf	fsr2h,c
 21766  01476A  50DF               	movf	indf2,w,c
 21767  01476C  6F60               	movwf	??_HMI_SetButton& (0+255),b
 21768  01476E  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 21769  014772  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 21770  014774  D002               	goto	u11904
 21771  014776                     u11905:
 21772  014776  90D8               	bcf	status,0,c
 21773  014778  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 21774  01477A                     u11904:
 21775  01477A  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 21776  01477C  D7FC               	goto	u11905
 21777  01477E  0100               	movlb	0	; () banked
 21778  014780  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 21779  014782  6F67               	movwf	HMI_SetButton@v& (0+255),b
 21780                           
 21781                           ; BSR set to: 0
 21782                           ;HMI.c: 192: v = v >> 4;
 21783  014784  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 21784  014786  0B0F               	andlw	15
 21785  014788  6F67               	movwf	HMI_SetButton@v& (0+255),b
 21786                           
 21787                           ; BSR set to: 0
 21788                           ;HMI.c: 193: v = v & 0x0F;
 21789  01478A  5167               	movf	HMI_SetButton@v& (0+255),w,b
 21790  01478C  0B0F               	andlw	15
 21791  01478E  6F67               	movwf	HMI_SetButton@v& (0+255),b
 21792                           
 21793                           ; BSR set to: 0
 21794                           ;HMI.c: 194: HMIBoard.pButton = v;
 21795  014790  0102               	movlb	2	; () banked
 21796  014792  51A6               	movf	(_HMIBoard+6)& (0+255),w,b
 21797  014794  0100               	movlb	0	; () banked
 21798  014796  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 21799  014798  0BF0               	andlw	-16
 21800  01479A  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 21801  01479C  0102               	movlb	2	; () banked
 21802  01479E  6FA6               	movwf	(_HMIBoard+6)& (0+255),b
 21803                           
 21804                           ; BSR set to: 2
 21805  0147A0  0012               	return		;funcret
 21806  0147A2                     __end_of_HMI_SetButton:
 21807                           	opt stack 0
 21808                           tosu	equ	0xFFF
 21809                           tosh	equ	0xFFE
 21810                           tosl	equ	0xFFD
 21811                           pclath	equ	0xFFA
 21812                           tblptru	equ	0xFF8
 21813                           tblptrh	equ	0xFF7
 21814                           tblptrl	equ	0xFF6
 21815                           tablat	equ	0xFF5
 21816                           prodh	equ	0xFF4
 21817                           prodl	equ	0xFF3
 21818                           intcon	equ	0xFF2
 21819                           postinc0	equ	0xFEE
 21820                           wreg	equ	0xFE8
 21821                           indf1	equ	0xFE7
 21822                           postdec1	equ	0xFE5
 21823                           fsr1h	equ	0xFE2
 21824                           fsr1l	equ	0xFE1
 21825                           indf2	equ	0xFDF
 21826                           postinc2	equ	0xFDE
 21827                           postdec2	equ	0xFDD
 21828                           plusw2	equ	0xFDB
 21829                           fsr2h	equ	0xFDA
 21830                           fsr2l	equ	0xFD9
 21831                           status	equ	0xFD8
 21832                           
 21833 ;; *************** function _LED_Toggle *****************
 21834 ;; Defined at:
 21835 ;;		line 50 in file "Library/LED.c"
 21836 ;; Parameters:    Size  Location     Type
 21837 ;;  pLED            1    wreg     enum E6739
 21838 ;; Auto vars:     Size  Location     Type
 21839 ;;  pLED            1   24[BANK0 ] enum E6739
 21840 ;; Return value:  Size  Location     Type
 21841 ;;                  1    wreg      void 
 21842 ;; Registers used:
 21843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21844 ;; Tracked objects:
 21845 ;;		On entry : 0/0
 21846 ;;		On exit  : 0/0
 21847 ;;		Unchanged: 0/0
 21848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21852 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21853 ;;Total ram usage:        1 bytes
 21854 ;; Hardware stack levels used:    1
 21855 ;; Hardware stack levels required when called:   12
 21856 ;; This function calls:
 21857 ;;		_Port_TogglePin
 21858 ;; This function is called by:
 21859 ;;		_LCD_Reset
 21860 ;;		_Event_DIPSwitch
 21861 ;;		_Event_TestButton
 21862 ;;		_Event_ADCSequenceComplete
 21863 ;;		_Event_HMI_DIPSwitch
 21864 ;;		_Event_HMI_LeftButton
 21865 ;;		_Event_HMI_RightButton
 21866 ;;		_Event_HMI_UpButton
 21867 ;;		_Event_HMI_DownButton
 21868 ;; This function uses a non-reentrant model
 21869 ;;
 21870                           
 21871                           	psect	text105
 21872  0153B0                     __ptext105:
 21873                           	opt stack 0
 21874  0153B0                     _LED_Toggle:
 21875                           	opt stack 15
 21876                           
 21877                           ; BSR set to: 2
 21878                           ;incstack = 0
 21879                           ;LED_Toggle@pLED stored from wreg
 21880  0153B0  0100               	movlb	0	; () banked
 21881  0153B2  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 21882                           
 21883                           ;LED.c: 52: switch (pLED)
 21884  0153B4  D014               	goto	l234
 21885  0153B6                     
 21886                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 21887  0153B6  0E9F               	movlw	low _PortC
 21888  0153B8  0100               	movlb	0	; () banked
 21889  0153BA  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21890  0153BC  0E01               	movlw	high _PortC
 21891  0153BE  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21892  0153C0  0E00               	movlw	0
 21893  0153C2  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21894  0153C4  ECA9  F0AB         	call	_Port_TogglePin	;wreg free
 21895                           
 21896                           ;LED.c: 56: break;
 21897  0153C8  0012               	return	
 21898  0153CA                     
 21899                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 21900  0153CA  0E9F               	movlw	low _PortC
 21901  0153CC  0100               	movlb	0	; () banked
 21902  0153CE  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21903  0153D0  0E01               	movlw	high _PortC
 21904  0153D2  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21905  0153D4  0E01               	movlw	1
 21906  0153D6  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21907  0153D8  ECA9  F0AB         	call	_Port_TogglePin	;wreg free
 21908                           
 21909                           ;LED.c: 60: }
 21910                           
 21911                           ;LED.c: 59: break;
 21912  0153DC  0012               	return	
 21913  0153DE                     l234:
 21914  0153DE  0100               	movlb	0	; () banked
 21915  0153E0  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 21916                           
 21917                           ; Switch size 1, requested type "space"
 21918                           ; Number of cases is 2, Range of values is 0 to 1
 21919                           ; switch strategies available:
 21920                           ; Name         Instructions Cycles
 21921                           ; simple_byte            7     4 (average)
 21922                           ;	Chosen strategy is simple_byte
 21923  0153E2  0A00               	xorlw	0	; case 0
 21924  0153E4  B4D8               	btfsc	status,2,c
 21925  0153E6  D7E7               	goto	l235
 21926  0153E8  0A01               	xorlw	1	; case 1
 21927  0153EA  A4D8               	btfss	status,2,c
 21928  0153EC  0012               	return	
 21929  0153EE  D7ED               	goto	l237
 21930  0153F0                     __end_of_LED_Toggle:
 21931                           	opt stack 0
 21932                           tosu	equ	0xFFF
 21933                           tosh	equ	0xFFE
 21934                           tosl	equ	0xFFD
 21935                           pclath	equ	0xFFA
 21936                           tblptru	equ	0xFF8
 21937                           tblptrh	equ	0xFF7
 21938                           tblptrl	equ	0xFF6
 21939                           tablat	equ	0xFF5
 21940                           prodh	equ	0xFF4
 21941                           prodl	equ	0xFF3
 21942                           intcon	equ	0xFF2
 21943                           postinc0	equ	0xFEE
 21944                           wreg	equ	0xFE8
 21945                           indf1	equ	0xFE7
 21946                           postdec1	equ	0xFE5
 21947                           fsr1h	equ	0xFE2
 21948                           fsr1l	equ	0xFE1
 21949                           indf2	equ	0xFDF
 21950                           postinc2	equ	0xFDE
 21951                           postdec2	equ	0xFDD
 21952                           plusw2	equ	0xFDB
 21953                           fsr2h	equ	0xFDA
 21954                           fsr2l	equ	0xFD9
 21955                           status	equ	0xFD8
 21956                           
 21957 ;; *************** function _Port_TogglePin *****************
 21958 ;; Defined at:
 21959 ;;		line 278 in file "Library/Port.c"
 21960 ;; Parameters:    Size  Location     Type
 21961 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 21962 ;;		 -> PortC(10), 
 21963 ;;  pPin            1   22[BANK0 ] enum E6750
 21964 ;; Auto vars:     Size  Location     Type
 21965 ;;  Value           1   23[BANK0 ] unsigned char 
 21966 ;; Return value:  Size  Location     Type
 21967 ;;                  1    wreg      void 
 21968 ;; Registers used:
 21969 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21970 ;; Tracked objects:
 21971 ;;		On entry : 0/0
 21972 ;;		On exit  : 0/0
 21973 ;;		Unchanged: 0/0
 21974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21975 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21978 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21979 ;;Total ram usage:        4 bytes
 21980 ;; Hardware stack levels used:    1
 21981 ;; Hardware stack levels required when called:   11
 21982 ;; This function calls:
 21983 ;;		_Port_GetPin
 21984 ;;		_Port_SetPin
 21985 ;; This function is called by:
 21986 ;;		_LED_Toggle
 21987 ;; This function uses a non-reentrant model
 21988 ;;
 21989                           
 21990                           	psect	text106
 21991  015752                     __ptext106:
 21992                           	opt stack 0
 21993  015752                     _Port_TogglePin:
 21994                           	opt stack 15
 21995                           
 21996                           ;Port.c: 280: UINT8 Value;
 21997                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 21998                           
 21999                           ;incstack = 0
 22000  015752  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 22001  015756  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 22002  01575A  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 22003  01575E  EC72  F0AA         	call	_Port_GetPin	;wreg free
 22004  015762  0100               	movlb	0	; () banked
 22005  015764  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;Port.c: 282: Value ^= 0x01;
 22009  015766  0E01               	movlw	1
 22010  015768  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 22011                           
 22012                           ; BSR set to: 0
 22013                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 22014  01576A  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 22015  01576E  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 22016  015772  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 22017  015776  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 22018  01577A  EC5D  F09E         	call	_Port_SetPin	;wreg free
 22019  01577E  0012               	return		;funcret
 22020  015780                     __end_of_Port_TogglePin:
 22021                           	opt stack 0
 22022                           tosu	equ	0xFFF
 22023                           tosh	equ	0xFFE
 22024                           tosl	equ	0xFFD
 22025                           pclath	equ	0xFFA
 22026                           tblptru	equ	0xFF8
 22027                           tblptrh	equ	0xFF7
 22028                           tblptrl	equ	0xFF6
 22029                           tablat	equ	0xFF5
 22030                           prodh	equ	0xFF4
 22031                           prodl	equ	0xFF3
 22032                           intcon	equ	0xFF2
 22033                           postinc0	equ	0xFEE
 22034                           wreg	equ	0xFE8
 22035                           indf1	equ	0xFE7
 22036                           postdec1	equ	0xFE5
 22037                           fsr1h	equ	0xFE2
 22038                           fsr1l	equ	0xFE1
 22039                           indf2	equ	0xFDF
 22040                           postinc2	equ	0xFDE
 22041                           postdec2	equ	0xFDD
 22042                           plusw2	equ	0xFDB
 22043                           fsr2h	equ	0xFDA
 22044                           fsr2l	equ	0xFD9
 22045                           status	equ	0xFD8
 22046                           
 22047 ;; *************** function _Port_SetPin *****************
 22048 ;; Defined at:
 22049 ;;		line 247 in file "Library/Port.c"
 22050 ;; Parameters:    Size  Location     Type
 22051 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 22052 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 22053 ;;  pPin            1   17[BANK0 ] enum E6750
 22054 ;;  pValue          1   18[BANK0 ] unsigned char 
 22055 ;; Auto vars:     Size  Location     Type
 22056 ;;  Type            1   19[BANK0 ] enum E6795
 22057 ;; Return value:  Size  Location     Type
 22058 ;;                  1    wreg      void 
 22059 ;; Registers used:
 22060 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22061 ;; Tracked objects:
 22062 ;;		On entry : 0/0
 22063 ;;		On exit  : 0/0
 22064 ;;		Unchanged: 0/0
 22065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22066 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22069 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22070 ;;Total ram usage:        5 bytes
 22071 ;; Hardware stack levels used:    1
 22072 ;; Hardware stack levels required when called:   10
 22073 ;; This function calls:
 22074 ;;		_Byte_SetBit
 22075 ;;		_Word_GetPair
 22076 ;; This function is called by:
 22077 ;;		_Reset_Low
 22078 ;;		_Reset_High
 22079 ;;		_LED_Set
 22080 ;;		_Port_TogglePin
 22081 ;;		_Motor_Step
 22082 ;;		_MXK_Init
 22083 ;;		_Motor_Init
 22084 ;; This function uses a non-reentrant model
 22085 ;;
 22086                           
 22087                           	psect	text107
 22088  013CBA                     __ptext107:
 22089                           	opt stack 0
 22090  013CBA                     _Port_SetPin:
 22091                           	opt stack 19
 22092                           
 22093                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 22094                           
 22095                           ;incstack = 0
 22096  013CBA  0E08               	movlw	8
 22097  013CBC  0100               	movlb	0	; () banked
 22098  013CBE  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 22099  013CC0  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 22100  013CC2  0E00               	movlw	0
 22101  013CC4  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 22102  013CC6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 22103  013CC8  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 22104  013CCC  EC18  F0AB         	call	_Word_GetPair	;wreg free
 22105  013CD0  0100               	movlb	0	; () banked
 22106  013CD2  6F73               	movwf	Port_SetPin@Type& (0+255),b
 22107                           
 22108                           ;Port.c: 250: switch (Type)
 22109  013CD4  D03D               	goto	l427
 22110  013CD6                     
 22111                           ; BSR set to: 0
 22112                           ;Port.c: 256: pValue &= 1;
 22113                           
 22114                           ; BSR set to: 0
 22115  013CD6  0E01               	movlw	1
 22116  013CD8  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22117                           
 22118                           ; BSR set to: 0
 22119                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22120  013CDA  EE20 F002          	lfsr	2,2
 22121  013CDE  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22122  013CE0  26D9               	addwf	fsr2l,f,c
 22123  013CE2  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22124  013CE4  22DA               	addwfc	fsr2h,f,c
 22125  013CE6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22126  013CEA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22127  013CEE  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22128  013CF2  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22129  013CF6  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22130                           
 22131                           ;Port.c: 258: break;
 22132  013CFA  0012               	return	
 22133  013CFC                     
 22134                           ;Port.c: 261: pValue &= 1;
 22135  013CFC  0E01               	movlw	1
 22136  013CFE  0100               	movlb	0	; () banked
 22137  013D00  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22138                           
 22139                           ;Port.c: 262: pValue ^= 1;
 22140  013D02  0E01               	movlw	1
 22141  013D04  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 22142                           
 22143                           ; BSR set to: 0
 22144                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22145  013D06  EE20 F002          	lfsr	2,2
 22146  013D0A  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22147  013D0C  26D9               	addwf	fsr2l,f,c
 22148  013D0E  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22149  013D10  22DA               	addwfc	fsr2h,f,c
 22150  013D12  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22151  013D16  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22152  013D1A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22153  013D1E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22154  013D22  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22155                           
 22156                           ;Port.c: 264: break;
 22157  013D26  0012               	return	
 22158  013D28                     
 22159                           ;Port.c: 266: pValue &= 1;
 22160  013D28  0E01               	movlw	1
 22161  013D2A  0100               	movlb	0	; () banked
 22162  013D2C  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22163                           
 22164                           ; BSR set to: 0
 22165                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 22166  013D2E  EE20 F004          	lfsr	2,4
 22167  013D32  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22168  013D34  26D9               	addwf	fsr2l,f,c
 22169  013D36  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22170  013D38  22DA               	addwfc	fsr2h,f,c
 22171  013D3A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22172  013D3E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22173  013D42  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22174  013D46  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22175  013D4A  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22176                           
 22177                           ;Port.c: 269: }
 22178                           
 22179                           ;Port.c: 268: break;
 22180  013D4E  0012               	return	
 22181  013D50                     l427:
 22182  013D50  0100               	movlb	0	; () banked
 22183  013D52  5173               	movf	Port_SetPin@Type& (0+255),w,b
 22184                           
 22185                           ; Switch size 1, requested type "space"
 22186                           ; Number of cases is 4, Range of values is 0 to 3
 22187                           ; switch strategies available:
 22188                           ; Name         Instructions Cycles
 22189                           ; simple_byte           13     7 (average)
 22190                           ;	Chosen strategy is simple_byte
 22191  013D54  0A00               	xorlw	0	; case 0
 22192  013D56  B4D8               	btfsc	status,2,c
 22193  013D58  0012               	return	
 22194  013D5A  0A01               	xorlw	1	; case 1
 22195  013D5C  B4D8               	btfsc	status,2,c
 22196  013D5E  D7BB               	goto	l430
 22197  013D60  0A03               	xorlw	3	; case 2
 22198  013D62  B4D8               	btfsc	status,2,c
 22199  013D64  D7CB               	goto	l432
 22200  013D66  0A01               	xorlw	1	; case 3
 22201  013D68  A4D8               	btfss	status,2,c
 22202  013D6A  0012               	return	
 22203  013D6C  D7DD               	goto	l433
 22204  013D6E                     __end_of_Port_SetPin:
 22205                           	opt stack 0
 22206                           tosu	equ	0xFFF
 22207                           tosh	equ	0xFFE
 22208                           tosl	equ	0xFFD
 22209                           pclath	equ	0xFFA
 22210                           tblptru	equ	0xFF8
 22211                           tblptrh	equ	0xFF7
 22212                           tblptrl	equ	0xFF6
 22213                           tablat	equ	0xFF5
 22214                           prodh	equ	0xFF4
 22215                           prodl	equ	0xFF3
 22216                           intcon	equ	0xFF2
 22217                           postinc0	equ	0xFEE
 22218                           wreg	equ	0xFE8
 22219                           indf1	equ	0xFE7
 22220                           postdec1	equ	0xFE5
 22221                           fsr1h	equ	0xFE2
 22222                           fsr1l	equ	0xFE1
 22223                           indf2	equ	0xFDF
 22224                           postinc2	equ	0xFDE
 22225                           postdec2	equ	0xFDD
 22226                           plusw2	equ	0xFDB
 22227                           fsr2h	equ	0xFDA
 22228                           fsr2l	equ	0xFD9
 22229                           status	equ	0xFD8
 22230                           
 22231 ;; *************** function _Port_GetPin *****************
 22232 ;; Defined at:
 22233 ;;		line 271 in file "Library/Port.c"
 22234 ;; Parameters:    Size  Location     Type
 22235 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 22236 ;;		 -> PortB(10), PortE(10), PortC(10), 
 22237 ;;  pPin            1    2[BANK0 ] enum E6750
 22238 ;; Auto vars:     Size  Location     Type
 22239 ;;  Output          1    5[BANK0 ] unsigned char 
 22240 ;; Return value:  Size  Location     Type
 22241 ;;                  1    wreg      unsigned char 
 22242 ;; Registers used:
 22243 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22244 ;; Tracked objects:
 22245 ;;		On entry : 0/0
 22246 ;;		On exit  : 0/0
 22247 ;;		Unchanged: 0/0
 22248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22249 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22251 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22252 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22253 ;;Total ram usage:        6 bytes
 22254 ;; Hardware stack levels used:    1
 22255 ;; Hardware stack levels required when called:    7
 22256 ;; This function calls:
 22257 ;;		Nothing
 22258 ;; This function is called by:
 22259 ;;		_Port_TogglePin
 22260 ;;		_HMI_LeftSwitch
 22261 ;;		_HMI_RightSwitch
 22262 ;;		_HMI_UpSwitch
 22263 ;;		_HMI_DownSwitch
 22264 ;;		_MXK_TestButton
 22265 ;; This function uses a non-reentrant model
 22266 ;;
 22267                           
 22268                           	psect	text108
 22269  0154E4                     __ptext108:
 22270                           	opt stack 0
 22271  0154E4                     _Port_GetPin:
 22272                           	opt stack 22
 22273                           
 22274                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 22275                           
 22276                           ;incstack = 0
 22277  0154E4  0100               	movlb	0	; () banked
 22278  0154E6  EE20 F006          	lfsr	2,6
 22279  0154EA  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 22280  0154EC  26D9               	addwf	fsr2l,f,c
 22281  0154EE  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 22282  0154F0  22DA               	addwfc	fsr2h,f,c
 22283  0154F2  CFDE F063          	movff	postinc2,??_Port_GetPin
 22284  0154F6  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 22285  0154FA  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 22286  0154FE  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 22287  015502  50DF               	movf	indf2,w,c
 22288  015504  6F65               	movwf	Port_GetPin@Output& (0+255),b
 22289                           
 22290                           ; BSR set to: 0
 22291                           ;Port.c: 274: Output >>= (UINT8)pPin;
 22292  015506  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 22293  015508  6F63               	movwf	??_Port_GetPin& (0+255),b
 22294  01550A  D002               	goto	u10170
 22295  01550C                     u10175:
 22296  01550C  90D8               	bcf	status,0,c
 22297  01550E  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 22298  015510                     u10170:
 22299  015510  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 22300  015512  D7FC               	goto	u10175
 22301                           
 22302                           ;Port.c: 275: Output &= 1;
 22303  015514  0E01               	movlw	1
 22304  015516  0100               	movlb	0	; () banked
 22305  015518  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 22306                           
 22307                           ; BSR set to: 0
 22308                           ;Port.c: 276: return Output;
 22309  01551A  5165               	movf	Port_GetPin@Output& (0+255),w,b
 22310  01551C  0012               	return	
 22311  01551E                     __end_of_Port_GetPin:
 22312                           	opt stack 0
 22313                           tosu	equ	0xFFF
 22314                           tosh	equ	0xFFE
 22315                           tosl	equ	0xFFD
 22316                           pclath	equ	0xFFA
 22317                           tblptru	equ	0xFF8
 22318                           tblptrh	equ	0xFF7
 22319                           tblptrl	equ	0xFF6
 22320                           tablat	equ	0xFF5
 22321                           prodh	equ	0xFF4
 22322                           prodl	equ	0xFF3
 22323                           intcon	equ	0xFF2
 22324                           postinc0	equ	0xFEE
 22325                           wreg	equ	0xFE8
 22326                           indf1	equ	0xFE7
 22327                           postdec1	equ	0xFE5
 22328                           fsr1h	equ	0xFE2
 22329                           fsr1l	equ	0xFE1
 22330                           indf2	equ	0xFDF
 22331                           postinc2	equ	0xFDE
 22332                           postdec2	equ	0xFDD
 22333                           plusw2	equ	0xFDB
 22334                           fsr2h	equ	0xFDA
 22335                           fsr2l	equ	0xFD9
 22336                           status	equ	0xFD8
 22337                           
 22338 ;; *************** function _HMI_SetBar *****************
 22339 ;; Defined at:
 22340 ;;		line 205 in file "HMI.c"
 22341 ;; Parameters:    Size  Location     Type
 22342 ;;  pValue          1    wreg     unsigned char 
 22343 ;; Auto vars:     Size  Location     Type
 22344 ;;  pValue          1    0[BANK0 ] unsigned char 
 22345 ;; Return value:  Size  Location     Type
 22346 ;;                  1    wreg      void 
 22347 ;; Registers used:
 22348 ;;		wreg
 22349 ;; Tracked objects:
 22350 ;;		On entry : 0/0
 22351 ;;		On exit  : 0/0
 22352 ;;		Unchanged: 0/0
 22353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22357 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22358 ;;Total ram usage:        1 bytes
 22359 ;; Hardware stack levels used:    1
 22360 ;; Hardware stack levels required when called:    7
 22361 ;; This function calls:
 22362 ;;		Nothing
 22363 ;; This function is called by:
 22364 ;;		_Event_DIPSwitch
 22365 ;;		_Event_HMI_DIPSwitch
 22366 ;;		_Event_HMI_LeftButton
 22367 ;;		_Event_HMI_RightButton
 22368 ;; This function uses a non-reentrant model
 22369 ;;
 22370                           
 22371                           	psect	text109
 22372  015B70                     __ptext109:
 22373                           	opt stack 0
 22374  015B70                     _HMI_SetBar:
 22375                           	opt stack 20
 22376                           
 22377                           ; BSR set to: 0
 22378                           ;incstack = 0
 22379                           ;HMI_SetBar@pValue stored from wreg
 22380  015B70  0100               	movlb	0	; () banked
 22381  015B72  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 22382                           
 22383                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 22384  015B74  C060  F2A7         	movff	HMI_SetBar@pValue,_HMIBoard+7
 22385  015B78  0012               	return		;funcret
 22386  015B7A                     __end_of_HMI_SetBar:
 22387                           	opt stack 0
 22388                           tosu	equ	0xFFF
 22389                           tosh	equ	0xFFE
 22390                           tosl	equ	0xFFD
 22391                           pclath	equ	0xFFA
 22392                           tblptru	equ	0xFF8
 22393                           tblptrh	equ	0xFF7
 22394                           tblptrl	equ	0xFF6
 22395                           tablat	equ	0xFF5
 22396                           prodh	equ	0xFF4
 22397                           prodl	equ	0xFF3
 22398                           intcon	equ	0xFF2
 22399                           postinc0	equ	0xFEE
 22400                           wreg	equ	0xFE8
 22401                           indf1	equ	0xFE7
 22402                           postdec1	equ	0xFE5
 22403                           fsr1h	equ	0xFE2
 22404                           fsr1l	equ	0xFE1
 22405                           indf2	equ	0xFDF
 22406                           postinc2	equ	0xFDE
 22407                           postdec2	equ	0xFDD
 22408                           plusw2	equ	0xFDB
 22409                           fsr2h	equ	0xFDA
 22410                           fsr2l	equ	0xFD9
 22411                           status	equ	0xFD8
 22412                           
 22413 ;; *************** function _HMI_GetBar *****************
 22414 ;; Defined at:
 22415 ;;		line 209 in file "HMI.c"
 22416 ;; Parameters:    Size  Location     Type
 22417 ;;		None
 22418 ;; Auto vars:     Size  Location     Type
 22419 ;;		None
 22420 ;; Return value:  Size  Location     Type
 22421 ;;                  1    wreg      unsigned char 
 22422 ;; Registers used:
 22423 ;;		wreg, status,2
 22424 ;; Tracked objects:
 22425 ;;		On entry : 0/0
 22426 ;;		On exit  : 0/0
 22427 ;;		Unchanged: 0/0
 22428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22433 ;;Total ram usage:        0 bytes
 22434 ;; Hardware stack levels used:    1
 22435 ;; Hardware stack levels required when called:    7
 22436 ;; This function calls:
 22437 ;;		Nothing
 22438 ;; This function is called by:
 22439 ;;		_Event_DIPSwitch
 22440 ;;		_Event_HMI_DIPSwitch
 22441 ;; This function uses a non-reentrant model
 22442 ;;
 22443                           
 22444                           	psect	text110
 22445  015B90                     __ptext110:
 22446                           	opt stack 0
 22447  015B90                     _HMI_GetBar:
 22448                           	opt stack 20
 22449                           
 22450                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 22451                           
 22452                           ;incstack = 0
 22453  015B90  0102               	movlb	2	; () banked
 22454  015B92  51A7               	movf	(_HMIBoard+7)& (0+255),w,b
 22455  015B94  0012               	return	
 22456  015B96                     __end_of_HMI_GetBar:
 22457                           	opt stack 0
 22458                           tosu	equ	0xFFF
 22459                           tosh	equ	0xFFE
 22460                           tosl	equ	0xFFD
 22461                           pclath	equ	0xFFA
 22462                           tblptru	equ	0xFF8
 22463                           tblptrh	equ	0xFF7
 22464                           tblptrl	equ	0xFF6
 22465                           tablat	equ	0xFF5
 22466                           prodh	equ	0xFF4
 22467                           prodl	equ	0xFF3
 22468                           intcon	equ	0xFF2
 22469                           postinc0	equ	0xFEE
 22470                           wreg	equ	0xFE8
 22471                           indf1	equ	0xFE7
 22472                           postdec1	equ	0xFE5
 22473                           fsr1h	equ	0xFE2
 22474                           fsr1l	equ	0xFE1
 22475                           indf2	equ	0xFDF
 22476                           postinc2	equ	0xFDE
 22477                           postdec2	equ	0xFDD
 22478                           plusw2	equ	0xFDB
 22479                           fsr2h	equ	0xFDA
 22480                           fsr2l	equ	0xFD9
 22481                           status	equ	0xFD8
 22482                           
 22483 ;; *************** function _HMI_Init *****************
 22484 ;; Defined at:
 22485 ;;		line 104 in file "HMI.c"
 22486 ;; Parameters:    Size  Location     Type
 22487 ;;		None
 22488 ;; Auto vars:     Size  Location     Type
 22489 ;;  in              2   72[BANK0 ] unsigned short 
 22490 ;; Return value:  Size  Location     Type
 22491 ;;                  1    wreg      void 
 22492 ;; Registers used:
 22493 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22494 ;; Tracked objects:
 22495 ;;		On entry : 0/0
 22496 ;;		On exit  : 0/0
 22497 ;;		Unchanged: 0/0
 22498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22500 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22502 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22503 ;;Total ram usage:        2 bytes
 22504 ;; Hardware stack levels used:    1
 22505 ;; Hardware stack levels required when called:   16
 22506 ;; This function calls:
 22507 ;;		_Button_Init
 22508 ;;		_SPI_Init
 22509 ;;		_SPI_MinSpeed
 22510 ;; This function is called by:
 22511 ;;		_main
 22512 ;; This function uses a non-reentrant model
 22513 ;;
 22514                           
 22515                           	psect	text111
 22516  01278C                     __ptext111:
 22517                           	opt stack 0
 22518  01278C                     _HMI_Init:
 22519                           	opt stack 14
 22520                           
 22521                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 22522                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 22523                           
 22524                           ; BSR set to: 2
 22525                           ;incstack = 0
 22526  01278C  0ED0               	movlw	low (_HMIBoard+48)
 22527  01278E  0100               	movlb	0	; () banked
 22528  012790  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22529  012792  0E02               	movlw	high (_HMIBoard+48)
 22530  012794  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22531  012796  0E00               	movlw	0
 22532  012798  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22533  01279A  0E02               	movlw	2
 22534  01279C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22535  01279E  0E96               	movlw	low _HMI_InitButtons
 22536  0127A0  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22537  0127A2  0E5B               	movlw	high _HMI_InitButtons
 22538  0127A4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22539  0127A6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22540  0127A8  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22541  0127AA  0E74               	movlw	low _HMI_DIPSwitch
 22542  0127AC  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22543  0127AE  0E5A               	movlw	high _HMI_DIPSwitch
 22544  0127B0  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22545  0127B2  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 22546  0127B4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22547  0127B6  0E04               	movlw	low _Event_NULL
 22548  0127B8  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22549  0127BA  0E14               	movlw	high _Event_NULL
 22550  0127BC  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22551  0127BE  0E00               	movlw	low (_Event_NULL shr (0+16))
 22552  0127C0  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22553  0127C2  ECB7  F09E         	call	_Button_Init	;wreg free
 22554                           
 22555                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 22556                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 22557  0127C6  0EB2               	movlw	low (_HMIBoard+18)
 22558  0127C8  0100               	movlb	0	; () banked
 22559  0127CA  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22560  0127CC  0E02               	movlw	high (_HMIBoard+18)
 22561  0127CE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22562  0127D0  0E00               	movlw	0
 22563  0127D2  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22564  0127D4  0E02               	movlw	2
 22565  0127D6  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22566  0127D8  0E96               	movlw	low _HMI_InitButtons
 22567  0127DA  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22568  0127DC  0E5B               	movlw	high _HMI_InitButtons
 22569  0127DE  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22570  0127E0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22571  0127E2  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22572  0127E4  0EC4               	movlw	low _HMI_LeftSwitch
 22573  0127E6  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22574  0127E8  0E5A               	movlw	high _HMI_LeftSwitch
 22575  0127EA  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22576  0127EC  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 22577  0127EE  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22578  0127F0  0E04               	movlw	low _Event_NULL
 22579  0127F2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22580  0127F4  0E14               	movlw	high _Event_NULL
 22581  0127F6  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22582  0127F8  0E00               	movlw	low (_Event_NULL shr (0+16))
 22583  0127FA  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22584  0127FC  ECB7  F09E         	call	_Button_Init	;wreg free
 22585                           
 22586                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 22587                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 22588  012800  0EA8               	movlw	low (_HMIBoard+8)
 22589  012802  0100               	movlb	0	; () banked
 22590  012804  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22591  012806  0E02               	movlw	high (_HMIBoard+8)
 22592  012808  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22593  01280A  0E00               	movlw	0
 22594  01280C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22595  01280E  0E02               	movlw	2
 22596  012810  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22597  012812  0E96               	movlw	low _HMI_InitButtons
 22598  012814  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22599  012816  0E5B               	movlw	high _HMI_InitButtons
 22600  012818  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22601  01281A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22602  01281C  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22603  01281E  0EB0               	movlw	low _HMI_RightSwitch
 22604  012820  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22605  012822  0E5A               	movlw	high _HMI_RightSwitch
 22606  012824  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22607  012826  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 22608  012828  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22609  01282A  0E04               	movlw	low _Event_NULL
 22610  01282C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22611  01282E  0E14               	movlw	high _Event_NULL
 22612  012830  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22613  012832  0E00               	movlw	low (_Event_NULL shr (0+16))
 22614  012834  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22615  012836  ECB7  F09E         	call	_Button_Init	;wreg free
 22616                           
 22617                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 22618                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 22619  01283A  0EBC               	movlw	low (_HMIBoard+28)
 22620  01283C  0100               	movlb	0	; () banked
 22621  01283E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22622  012840  0E02               	movlw	high (_HMIBoard+28)
 22623  012842  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22624  012844  0E00               	movlw	0
 22625  012846  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22626  012848  0E02               	movlw	2
 22627  01284A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22628  01284C  0E96               	movlw	low _HMI_InitButtons
 22629  01284E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22630  012850  0E5B               	movlw	high _HMI_InitButtons
 22631  012852  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22632  012854  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22633  012856  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22634  012858  0E9C               	movlw	low _HMI_UpSwitch
 22635  01285A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22636  01285C  0E5A               	movlw	high _HMI_UpSwitch
 22637  01285E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22638  012860  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 22639  012862  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22640  012864  0E04               	movlw	low _Event_NULL
 22641  012866  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22642  012868  0E14               	movlw	high _Event_NULL
 22643  01286A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22644  01286C  0E00               	movlw	low (_Event_NULL shr (0+16))
 22645  01286E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22646  012870  ECB7  F09E         	call	_Button_Init	;wreg free
 22647                           
 22648                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 22649                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 22650  012874  0EC6               	movlw	low (_HMIBoard+38)
 22651  012876  0100               	movlb	0	; () banked
 22652  012878  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22653  01287A  0E02               	movlw	high (_HMIBoard+38)
 22654  01287C  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22655  01287E  0E00               	movlw	0
 22656  012880  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22657  012882  0E02               	movlw	2
 22658  012884  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22659  012886  0E96               	movlw	low _HMI_InitButtons
 22660  012888  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22661  01288A  0E5B               	movlw	high _HMI_InitButtons
 22662  01288C  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22663  01288E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22664  012890  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22665  012892  0E88               	movlw	low _HMI_DownSwitch
 22666  012894  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22667  012896  0E5A               	movlw	high _HMI_DownSwitch
 22668  012898  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22669  01289A  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 22670  01289C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22671  01289E  0E04               	movlw	low _Event_NULL
 22672  0128A0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22673  0128A2  0E14               	movlw	high _Event_NULL
 22674  0128A4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22675  0128A6  0E00               	movlw	low (_Event_NULL shr (0+16))
 22676  0128A8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22677  0128AA  ECB7  F09E         	call	_Button_Init	;wreg free
 22678                           
 22679                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 22680  0128AE  0EA0               	movlw	160
 22681  0128B0  0100               	movlb	0	; () banked
 22682  0128B2  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 22683  0128B4  0E86               	movlw	134
 22684  0128B6  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 22685  0128B8  0E01               	movlw	1
 22686  0128BA  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 22687  0128BC  0E00               	movlw	0
 22688  0128BE  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 22689  0128C0  0E00               	movlw	0
 22690  0128C2  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 22691  0128C4  0E02               	movlw	2
 22692  0128C6  6F92               	movwf	SPI_Init@pMode& (0+255),b
 22693  0128C8  EC8F  F082         	call	_SPI_Init	;wreg free
 22694                           
 22695                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 22696  0128CC  0E61               	movlw	low _SPI1
 22697  0128CE  0100               	movlb	0	; () banked
 22698  0128D0  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 22699  0128D2  0E01               	movlw	high _SPI1
 22700  0128D4  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 22701  0128D6  ECCB  F0A5         	call	_SPI_MinSpeed	;wreg free
 22702                           
 22703                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 22704  0128DA  0E00               	movlw	0
 22705  0128DC  0100               	movlb	0	; () banked
 22706  0128DE  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 22707  0128E0  0E00               	movlw	0
 22708  0128E2  6FA8               	movwf	HMI_Init@in& (0+255),b
 22709  0128E4                     l15683:
 22710                           
 22711                           ; BSR set to: 0
 22712  0128E4  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 22713  0128E6  E10F               	bnz	l1153
 22714  0128E8  0E08               	movlw	8
 22715  0128EA  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 22716  0128EC  B0D8               	btfsc	status,0,c
 22717  0128EE  0012               	return	
 22718                           
 22719                           ; BSR set to: 0
 22720                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 22721                           
 22722                           ; BSR set to: 0
 22723                           
 22724                           ; BSR set to: 0
 22725  0128F0  0EA0               	movlw	low _HMIBoard
 22726  0128F2  25A8               	addwf	HMI_Init@in& (0+255),w,b
 22727  0128F4  6ED9               	movwf	fsr2l,c
 22728  0128F6  0E02               	movlw	high _HMIBoard
 22729  0128F8  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 22730  0128FA  6EDA               	movwf	fsr2h,c
 22731  0128FC  0E00               	movlw	0
 22732  0128FE  6EDF               	movwf	indf2,c
 22733                           
 22734                           ; BSR set to: 0
 22735  012900  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 22736  012902  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 22737  012904  D7EF               	goto	l15683
 22738  012906                     l1153:
 22739                           
 22740                           ; BSR set to: 0
 22741  012906  0012               	return		;funcret
 22742  012908                     __end_of_HMI_Init:
 22743                           	opt stack 0
 22744                           tosu	equ	0xFFF
 22745                           tosh	equ	0xFFE
 22746                           tosl	equ	0xFFD
 22747                           pclath	equ	0xFFA
 22748                           tblptru	equ	0xFF8
 22749                           tblptrh	equ	0xFF7
 22750                           tblptrl	equ	0xFF6
 22751                           tablat	equ	0xFF5
 22752                           prodh	equ	0xFF4
 22753                           prodl	equ	0xFF3
 22754                           intcon	equ	0xFF2
 22755                           postinc0	equ	0xFEE
 22756                           wreg	equ	0xFE8
 22757                           indf1	equ	0xFE7
 22758                           postdec1	equ	0xFE5
 22759                           fsr1h	equ	0xFE2
 22760                           fsr1l	equ	0xFE1
 22761                           indf2	equ	0xFDF
 22762                           postinc2	equ	0xFDE
 22763                           postdec2	equ	0xFDD
 22764                           plusw2	equ	0xFDB
 22765                           fsr2h	equ	0xFDA
 22766                           fsr2l	equ	0xFD9
 22767                           status	equ	0xFD8
 22768                           
 22769 ;; *************** function _SPI_MinSpeed *****************
 22770 ;; Defined at:
 22771 ;;		line 190 in file "Library/SPI.c"
 22772 ;; Parameters:    Size  Location     Type
 22773 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 22774 ;;		 -> SPI1(11), 
 22775 ;; Auto vars:     Size  Location     Type
 22776 ;;		None
 22777 ;; Return value:  Size  Location     Type
 22778 ;;                  1    wreg      void 
 22779 ;; Registers used:
 22780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22781 ;; Tracked objects:
 22782 ;;		On entry : 0/0
 22783 ;;		On exit  : 0/0
 22784 ;;		Unchanged: 0/0
 22785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22786 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22789 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22790 ;;Total ram usage:        2 bytes
 22791 ;; Hardware stack levels used:    1
 22792 ;; Hardware stack levels required when called:    9
 22793 ;; This function calls:
 22794 ;;		_Byte_SetBit
 22795 ;;		_Byte_SetQuad
 22796 ;; This function is called by:
 22797 ;;		_HMI_Init
 22798 ;; This function uses a non-reentrant model
 22799 ;;
 22800                           
 22801                           	psect	text112
 22802  014B96                     __ptext112:
 22803                           	opt stack 0
 22804  014B96                     _SPI_MinSpeed:
 22805                           	opt stack 20
 22806                           
 22807                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22808                           
 22809                           ; BSR set to: 0
 22810                           ;incstack = 0
 22811  014B96  0100               	movlb	0	; () banked
 22812  014B98  EE20 F006          	lfsr	2,6
 22813  014B9C  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22814  014B9E  26D9               	addwf	fsr2l,f,c
 22815  014BA0  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22816  014BA2  22DA               	addwfc	fsr2h,f,c
 22817  014BA4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22818  014BA8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22819  014BAC  0E05               	movlw	5
 22820  014BAE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22821  014BB0  0E00               	movlw	0
 22822  014BB2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22823  014BB4  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22824                           
 22825                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 22826  014BB8  0100               	movlb	0	; () banked
 22827  014BBA  EE20 F006          	lfsr	2,6
 22828  014BBE  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22829  014BC0  26D9               	addwf	fsr2l,f,c
 22830  014BC2  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22831  014BC4  22DA               	addwfc	fsr2h,f,c
 22832  014BC6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22833  014BCA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22834  014BCE  0E00               	movlw	0
 22835  014BD0  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22836  014BD2  0E02               	movlw	2
 22837  014BD4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22838  014BD6  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 22839                           
 22840                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22841  014BDA  0100               	movlb	0	; () banked
 22842  014BDC  EE20 F006          	lfsr	2,6
 22843  014BE0  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22844  014BE2  26D9               	addwf	fsr2l,f,c
 22845  014BE4  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22846  014BE6  22DA               	addwfc	fsr2h,f,c
 22847  014BE8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22848  014BEC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22849  014BF0  0E05               	movlw	5
 22850  014BF2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22851  014BF4  0E01               	movlw	1
 22852  014BF6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22853  014BF8  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 22854  014BFC  0012               	return		;funcret
 22855  014BFE                     __end_of_SPI_MinSpeed:
 22856                           	opt stack 0
 22857                           tosu	equ	0xFFF
 22858                           tosh	equ	0xFFE
 22859                           tosl	equ	0xFFD
 22860                           pclath	equ	0xFFA
 22861                           tblptru	equ	0xFF8
 22862                           tblptrh	equ	0xFF7
 22863                           tblptrl	equ	0xFF6
 22864                           tablat	equ	0xFF5
 22865                           prodh	equ	0xFF4
 22866                           prodl	equ	0xFF3
 22867                           intcon	equ	0xFF2
 22868                           postinc0	equ	0xFEE
 22869                           wreg	equ	0xFE8
 22870                           indf1	equ	0xFE7
 22871                           postdec1	equ	0xFE5
 22872                           fsr1h	equ	0xFE2
 22873                           fsr1l	equ	0xFE1
 22874                           indf2	equ	0xFDF
 22875                           postinc2	equ	0xFDE
 22876                           postdec2	equ	0xFDD
 22877                           plusw2	equ	0xFDB
 22878                           fsr2h	equ	0xFDA
 22879                           fsr2l	equ	0xFD9
 22880                           status	equ	0xFD8
 22881                           
 22882 ;; *************** function _SPI_Init *****************
 22883 ;; Defined at:
 22884 ;;		line 12 in file "Library/SPI.c"
 22885 ;; Parameters:    Size  Location     Type
 22886 ;;  pClock          4   45[BANK0 ] unsigned long 
 22887 ;;  pChannel        1   49[BANK0 ] enum E6744
 22888 ;;  pMode           1   50[BANK0 ] enum E6748
 22889 ;; Auto vars:     Size  Location     Type
 22890 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 22891 ;;		 -> SPI1(11), SPI2(11), 
 22892 ;; Return value:  Size  Location     Type
 22893 ;;                  1    wreg      void 
 22894 ;; Registers used:
 22895 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22896 ;; Tracked objects:
 22897 ;;		On entry : 0/0
 22898 ;;		On exit  : 0/0
 22899 ;;		Unchanged: 0/0
 22900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22901 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22902 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22904 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22905 ;;Total ram usage:        8 bytes
 22906 ;; Hardware stack levels used:    1
 22907 ;; Hardware stack levels required when called:   12
 22908 ;; This function calls:
 22909 ;;		_Byte_SetBit
 22910 ;;		_Byte_SetQuad
 22911 ;;		_Port_SetPinType
 22912 ;;		_SPI_DCS
 22913 ;;		_SPI_DisableISR
 22914 ;;		_Timer2_Init
 22915 ;; This function is called by:
 22916 ;;		_Configure_GPIOs
 22917 ;;		_HMI_Init
 22918 ;; This function uses a non-reentrant model
 22919 ;;
 22920                           
 22921                           	psect	text113
 22922  01051E                     __ptext113:
 22923                           	opt stack 0
 22924  01051E                     _SPI_Init:
 22925                           	opt stack 16
 22926                           
 22927                           ;SPI.c: 14: SPIPtr pInput;
 22928                           ;SPI.c: 16: switch (pChannel)
 22929                           
 22930                           ;incstack = 0
 22931  01051E  D00A               	goto	l597
 22932  010520                     
 22933                           ;SPI.c: 19: pInput = &SPI1;
 22934  010520  0E61               	movlw	low _SPI1
 22935  010522  0100               	movlb	0	; () banked
 22936  010524  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22937  010526  0E01               	movlw	high _SPI1
 22938  010528  D003               	goto	L17
 22939  01052A                     
 22940                           ; BSR set to: 0
 22941                           ;SPI.c: 22: pInput = &SPI2;
 22942                           
 22943                           ; BSR set to: 0
 22944  01052A  0E6C               	movlw	low _SPI2
 22945  01052C  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22946  01052E  0E01               	movlw	high _SPI2
 22947  010530                     L17:
 22948  010530  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 22949                           
 22950                           ; BSR set to: 0
 22951                           ;SPI.c: 24: };
 22952                           
 22953                           ;SPI.c: 23: break;
 22954  010532  D008               	goto	l599
 22955  010534                     l597:
 22956                           
 22957                           ; BSR set to: 0
 22958  010534  0100               	movlb	0	; () banked
 22959  010536  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 22960                           
 22961                           ; Switch size 1, requested type "space"
 22962                           ; Number of cases is 2, Range of values is 0 to 1
 22963                           ; switch strategies available:
 22964                           ; Name         Instructions Cycles
 22965                           ; simple_byte            7     4 (average)
 22966                           ;	Chosen strategy is simple_byte
 22967  010538  0A00               	xorlw	0	; case 0
 22968  01053A  B4D8               	btfsc	status,2,c
 22969  01053C  D7F1               	goto	l598
 22970  01053E  0A01               	xorlw	1	; case 1
 22971  010540  B4D8               	btfsc	status,2,c
 22972  010542  D7F3               	goto	l600
 22973  010544                     l599:
 22974                           
 22975                           ; BSR set to: 0
 22976                           ;SPI.c: 26: pInput->mChannel = pChannel;
 22977                           
 22978                           ; BSR set to: 0
 22979  010544  EE20 F002          	lfsr	2,2
 22980  010548  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22981  01054A  26D9               	addwf	fsr2l,f,c
 22982  01054C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22983  01054E  22DA               	addwfc	fsr2h,f,c
 22984  010550  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 22985                           
 22986                           ;SPI.c: 35: switch (pChannel)
 22987  010554  D093               	goto	l601
 22988  010556                     
 22989                           ; BSR set to: 0
 22990                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 22991                           
 22992                           ; BSR set to: 0
 22993  010556  0E9F               	movlw	low _PortC
 22994  010558  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22995  01055A  0E01               	movlw	high _PortC
 22996  01055C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22997  01055E  0E02               	movlw	2
 22998  010560  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22999  010562  0E03               	movlw	3
 23000  010564  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23001  010566  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23002                           
 23003                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 23004  01056A  0E9F               	movlw	low _PortC
 23005  01056C  0100               	movlb	0	; () banked
 23006  01056E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23007  010570  0E01               	movlw	high _PortC
 23008  010572  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23009  010574  0E03               	movlw	3
 23010  010576  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23011  010578  0E03               	movlw	3
 23012  01057A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23013  01057C  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23014                           
 23015                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 23016  010580  0E9F               	movlw	low _PortC
 23017  010582  0100               	movlb	0	; () banked
 23018  010584  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23019  010586  0E01               	movlw	high _PortC
 23020  010588  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23021  01058A  0E05               	movlw	5
 23022  01058C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23023  01058E  0E03               	movlw	3
 23024  010590  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23025  010592  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23026                           
 23027                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 23028  010596  0E9F               	movlw	low _PortC
 23029  010598  0100               	movlb	0	; () banked
 23030  01059A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23031  01059C  0E01               	movlw	high _PortC
 23032  01059E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23033  0105A0  0E04               	movlw	4
 23034  0105A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23035  0105A4  0E00               	movlw	0
 23036  0105A6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23037  0105A8  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23038                           
 23039                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 23040  0105AC  0100               	movlb	0	; () banked
 23041  0105AE  EE20 F003          	lfsr	2,3
 23042  0105B2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23043  0105B4  26D9               	addwf	fsr2l,f,c
 23044  0105B6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23045  0105B8  22DA               	addwfc	fsr2h,f,c
 23046  0105BA  0EC7               	movlw	199
 23047  0105BC  6EDE               	movwf	postinc2,c
 23048  0105BE  0E0F               	movlw	15
 23049  0105C0  6EDD               	movwf	postdec2,c
 23050                           
 23051                           ; BSR set to: 0
 23052                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 23053  0105C2  EE20 F006          	lfsr	2,6
 23054  0105C6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23055  0105C8  26D9               	addwf	fsr2l,f,c
 23056  0105CA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23057  0105CC  22DA               	addwfc	fsr2h,f,c
 23058  0105CE  0EC6               	movlw	198
 23059  0105D0  6EDE               	movwf	postinc2,c
 23060  0105D2  0E0F               	movlw	15
 23061  0105D4  6EDD               	movwf	postdec2,c
 23062                           
 23063                           ; BSR set to: 0
 23064                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 23065  0105D6  EE20 F009          	lfsr	2,9
 23066  0105DA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23067  0105DC  26D9               	addwf	fsr2l,f,c
 23068  0105DE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23069  0105E0  22DA               	addwfc	fsr2h,f,c
 23070  0105E2  0EC9               	movlw	201
 23071  0105E4  D047               	goto	L18
 23072  0105E6                     
 23073                           ; BSR set to: 0
 23074                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 23075                           
 23076                           ; BSR set to: 0
 23077  0105E6  0E8B               	movlw	low _PortD
 23078  0105E8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23079  0105EA  0E01               	movlw	high _PortD
 23080  0105EC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23081  0105EE  0E07               	movlw	7
 23082  0105F0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23083  0105F2  0E03               	movlw	3
 23084  0105F4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23085  0105F6  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23086                           
 23087                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 23088  0105FA  0E8B               	movlw	low _PortD
 23089  0105FC  0100               	movlb	0	; () banked
 23090  0105FE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23091  010600  0E01               	movlw	high _PortD
 23092  010602  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23093  010604  0E06               	movlw	6
 23094  010606  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23095  010608  0E03               	movlw	3
 23096  01060A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23097  01060C  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23098                           
 23099                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 23100  010610  0E8B               	movlw	low _PortD
 23101  010612  0100               	movlb	0	; () banked
 23102  010614  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23103  010616  0E01               	movlw	high _PortD
 23104  010618  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23105  01061A  0E04               	movlw	4
 23106  01061C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23107  01061E  0E03               	movlw	3
 23108  010620  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23109  010622  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23110                           
 23111                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 23112  010626  0E8B               	movlw	low _PortD
 23113  010628  0100               	movlb	0	; () banked
 23114  01062A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23115  01062C  0E01               	movlw	high _PortD
 23116  01062E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23117  010630  0E05               	movlw	5
 23118  010632  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23119  010634  0E00               	movlw	0
 23120  010636  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23121  010638  ECF7  F092         	call	_Port_SetPinType	;wreg free
 23122                           
 23123                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 23124  01063C  0100               	movlb	0	; () banked
 23125  01063E  EE20 F003          	lfsr	2,3
 23126  010642  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23127  010644  26D9               	addwf	fsr2l,f,c
 23128  010646  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23129  010648  22DA               	addwfc	fsr2h,f,c
 23130  01064A  0E6D               	movlw	109
 23131  01064C  6EDE               	movwf	postinc2,c
 23132  01064E  0E0F               	movlw	15
 23133  010650  6EDD               	movwf	postdec2,c
 23134                           
 23135                           ; BSR set to: 0
 23136                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 23137  010652  EE20 F006          	lfsr	2,6
 23138  010656  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23139  010658  26D9               	addwf	fsr2l,f,c
 23140  01065A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23141  01065C  22DA               	addwfc	fsr2h,f,c
 23142  01065E  0E6C               	movlw	108
 23143  010660  6EDE               	movwf	postinc2,c
 23144  010662  0E0F               	movlw	15
 23145  010664  6EDD               	movwf	postdec2,c
 23146                           
 23147                           ; BSR set to: 0
 23148                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 23149  010666  EE20 F009          	lfsr	2,9
 23150  01066A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23151  01066C  26D9               	addwf	fsr2l,f,c
 23152  01066E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23153  010670  22DA               	addwfc	fsr2h,f,c
 23154  010672  0E6F               	movlw	111
 23155  010674                     L18:
 23156  010674  6EDE               	movwf	postinc2,c
 23157  010676  0E0F               	movlw	15
 23158  010678  6EDD               	movwf	postdec2,c
 23159                           
 23160                           ;SPI.c: 68: break;
 23161  01067A  D008               	goto	l603
 23162  01067C                     l601:
 23163                           
 23164                           ; BSR set to: 0
 23165                           
 23166                           ; BSR set to: 0
 23167  01067C  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 23168                           
 23169                           ; Switch size 1, requested type "space"
 23170                           ; Number of cases is 2, Range of values is 0 to 1
 23171                           ; switch strategies available:
 23172                           ; Name         Instructions Cycles
 23173                           ; simple_byte            7     4 (average)
 23174                           ;	Chosen strategy is simple_byte
 23175  01067E  0A00               	xorlw	0	; case 0
 23176  010680  B4D8               	btfsc	status,2,c
 23177  010682  D769               	goto	l602
 23178  010684  0A01               	xorlw	1	; case 1
 23179  010686  A4D8               	btfss	status,2,c
 23180  010688  0012               	return	
 23181  01068A  D7AD               	goto	l604
 23182  01068C                     l603:
 23183                           
 23184                           ; BSR set to: 0
 23185                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 23186                           
 23187                           ; BSR set to: 0
 23188  01068C  EE20 F006          	lfsr	2,6
 23189  010690  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23190  010692  26D9               	addwf	fsr2l,f,c
 23191  010694  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23192  010696  22DA               	addwfc	fsr2h,f,c
 23193  010698  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23194  01069C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23195  0106A0  0E05               	movlw	5
 23196  0106A2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23197  0106A4  0E00               	movlw	0
 23198  0106A6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23199  0106A8  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23200                           
 23201                           ;SPI.c: 77: switch(pMode)
 23202  0106AC  D08C               	goto	l607
 23203  0106AE                     
 23204                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23205  0106AE  0100               	movlb	0	; () banked
 23206  0106B0  EE20 F006          	lfsr	2,6
 23207  0106B4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23208  0106B6  26D9               	addwf	fsr2l,f,c
 23209  0106B8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23210  0106BA  22DA               	addwfc	fsr2h,f,c
 23211  0106BC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23212  0106C0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23213  0106C4  0E04               	movlw	4
 23214  0106C6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23215  0106C8  0E00               	movlw	0
 23216  0106CA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23217  0106CC  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23218                           
 23219                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23220  0106D0  0100               	movlb	0	; () banked
 23221  0106D2  EE20 F003          	lfsr	2,3
 23222  0106D6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23223  0106D8  26D9               	addwf	fsr2l,f,c
 23224  0106DA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23225  0106DC  22DA               	addwfc	fsr2h,f,c
 23226  0106DE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23227  0106E2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23228  0106E6  0E06               	movlw	6
 23229  0106E8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23230  0106EA  0E00               	movlw	0
 23231  0106EC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23232  0106EE  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23233                           
 23234                           ;SPI.c: 82: break;
 23235  0106F2  D078               	goto	l609
 23236  0106F4                     
 23237                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23238  0106F4  0100               	movlb	0	; () banked
 23239  0106F6  EE20 F006          	lfsr	2,6
 23240  0106FA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23241  0106FC  26D9               	addwf	fsr2l,f,c
 23242  0106FE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23243  010700  22DA               	addwfc	fsr2h,f,c
 23244  010702  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23245  010706  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23246  01070A  0E04               	movlw	4
 23247  01070C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23248  01070E  0E00               	movlw	0
 23249  010710  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23250  010712  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23251                           
 23252                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23253  010716  0100               	movlb	0	; () banked
 23254  010718  EE20 F003          	lfsr	2,3
 23255  01071C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23256  01071E  26D9               	addwf	fsr2l,f,c
 23257  010720  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23258  010722  22DA               	addwfc	fsr2h,f,c
 23259  010724  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23260  010728  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23261  01072C  0E06               	movlw	6
 23262  01072E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23263  010730  0E01               	movlw	1
 23264  010732  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23265  010734  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23266                           
 23267                           ;SPI.c: 86: break;
 23268  010738  D055               	goto	l609
 23269  01073A                     
 23270                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23271  01073A  0100               	movlb	0	; () banked
 23272  01073C  EE20 F006          	lfsr	2,6
 23273  010740  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23274  010742  26D9               	addwf	fsr2l,f,c
 23275  010744  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23276  010746  22DA               	addwfc	fsr2h,f,c
 23277  010748  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23278  01074C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23279  010750  0E04               	movlw	4
 23280  010752  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23281  010754  0E01               	movlw	1
 23282  010756  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23283  010758  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23284                           
 23285                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23286  01075C  0100               	movlb	0	; () banked
 23287  01075E  EE20 F003          	lfsr	2,3
 23288  010762  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23289  010764  26D9               	addwf	fsr2l,f,c
 23290  010766  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23291  010768  22DA               	addwfc	fsr2h,f,c
 23292  01076A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23293  01076E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23294  010772  0E06               	movlw	6
 23295  010774  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23296  010776  0E00               	movlw	0
 23297  010778  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23298  01077A  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23299                           
 23300                           ;SPI.c: 90: break;
 23301  01077E  D032               	goto	l609
 23302  010780                     
 23303                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23304  010780  0100               	movlb	0	; () banked
 23305  010782  EE20 F006          	lfsr	2,6
 23306  010786  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23307  010788  26D9               	addwf	fsr2l,f,c
 23308  01078A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23309  01078C  22DA               	addwfc	fsr2h,f,c
 23310  01078E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23311  010792  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23312  010796  0E04               	movlw	4
 23313  010798  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23314  01079A  0E01               	movlw	1
 23315  01079C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23316  01079E  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23317                           
 23318                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23319  0107A2  0100               	movlb	0	; () banked
 23320  0107A4  EE20 F003          	lfsr	2,3
 23321  0107A8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23322  0107AA  26D9               	addwf	fsr2l,f,c
 23323  0107AC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23324  0107AE  22DA               	addwfc	fsr2h,f,c
 23325  0107B0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23326  0107B4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23327  0107B8  0E06               	movlw	6
 23328  0107BA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23329  0107BC  0E01               	movlw	1
 23330  0107BE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23331  0107C0  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23332                           
 23333                           ;SPI.c: 94: break;
 23334  0107C4  D00F               	goto	l609
 23335  0107C6                     l607:
 23336  0107C6  0100               	movlb	0	; () banked
 23337  0107C8  5192               	movf	SPI_Init@pMode& (0+255),w,b
 23338                           
 23339                           ; Switch size 1, requested type "space"
 23340                           ; Number of cases is 4, Range of values is 0 to 3
 23341                           ; switch strategies available:
 23342                           ; Name         Instructions Cycles
 23343                           ; simple_byte           13     7 (average)
 23344                           ;	Chosen strategy is simple_byte
 23345  0107CA  0A00               	xorlw	0	; case 0
 23346  0107CC  B4D8               	btfsc	status,2,c
 23347  0107CE  D76F               	goto	l608
 23348  0107D0  0A01               	xorlw	1	; case 1
 23349  0107D2  B4D8               	btfsc	status,2,c
 23350  0107D4  D78F               	goto	l610
 23351  0107D6  0A03               	xorlw	3	; case 2
 23352  0107D8  B4D8               	btfsc	status,2,c
 23353  0107DA  D7AF               	goto	l611
 23354  0107DC  0A01               	xorlw	1	; case 3
 23355  0107DE  A4D8               	btfss	status,2,c
 23356  0107E0  0012               	return	
 23357  0107E2  D7CE               	goto	l612
 23358  0107E4                     l609:
 23359                           
 23360                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 23361                           
 23362                           ; BSR set to: 0
 23363  0107E4  0100               	movlb	0	; () banked
 23364  0107E6  EE20 F006          	lfsr	2,6
 23365  0107EA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23366  0107EC  26D9               	addwf	fsr2l,f,c
 23367  0107EE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23368  0107F0  22DA               	addwfc	fsr2h,f,c
 23369  0107F2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23370  0107F6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23371  0107FA  0E07               	movlw	7
 23372  0107FC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23373  0107FE  0E00               	movlw	0
 23374  010800  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23375  010802  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23376                           
 23377                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 23378  010806  0100               	movlb	0	; () banked
 23379  010808  EE20 F006          	lfsr	2,6
 23380  01080C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23381  01080E  26D9               	addwf	fsr2l,f,c
 23382  010810  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23383  010812  22DA               	addwfc	fsr2h,f,c
 23384  010814  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23385  010818  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23386  01081C  0E06               	movlw	6
 23387  01081E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23388  010820  0E00               	movlw	0
 23389  010822  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23390  010824  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23391                           
 23392                           ;SPI.c: 106: Timer2_Init(pClock);
 23393  010828  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 23394  01082C  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 23395  010830  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 23396  010834  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 23397  010838  ECA2  F098         	call	_Timer2_Init	;wreg free
 23398                           
 23399                           ;SPI.c: 112: SPI_DisableISR(pInput);
 23400  01083C  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 23401  010840  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 23402  010844  ECEA  F0AB         	call	_SPI_DisableISR	;wreg free
 23403                           
 23404                           ;SPI.c: 116: switch (pChannel)
 23405  010848  D004               	goto	l614
 23406  01084A                     l615:
 23407                           
 23408                           ; BSR set to: 0
 23409  01084A  869F               	bsf	3999,3,c	;volatile
 23410  01084C  D00B               	goto	l616
 23411  01084E                     l617:
 23412                           
 23413                           ; BSR set to: 0
 23414  01084E  8EA5               	bsf	4005,7,c	;volatile
 23415  010850  D009               	goto	l616
 23416  010852                     l614:
 23417                           
 23418                           ; BSR set to: 0
 23419  010852  0100               	movlb	0	; () banked
 23420  010854  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 23421                           
 23422                           ; Switch size 1, requested type "space"
 23423                           ; Number of cases is 2, Range of values is 0 to 1
 23424                           ; switch strategies available:
 23425                           ; Name         Instructions Cycles
 23426                           ; simple_byte            7     4 (average)
 23427                           ;	Chosen strategy is simple_byte
 23428  010856  0A00               	xorlw	0	; case 0
 23429  010858  B4D8               	btfsc	status,2,c
 23430  01085A  D7F7               	goto	l615
 23431  01085C  0A01               	xorlw	1	; case 1
 23432  01085E  A4D8               	btfss	status,2,c
 23433  010860  0012               	return	
 23434  010862  D7F5               	goto	l617
 23435  010864                     l616:
 23436                           
 23437                           ; BSR set to: 0
 23438                           ;SPI.c: 124: SPI_DCS(pInput);
 23439                           
 23440                           ; BSR set to: 0
 23441  010864  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 23442  010868  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 23443  01086C  EC79  F0AB         	call	_SPI_DCS	;wreg free
 23444                           
 23445                           ;SPI.c: 126: pInput->mBusy = 0;
 23446  010870  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 23447  010874  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 23448  010878  0E00               	movlw	0
 23449  01087A  6EDF               	movwf	indf2,c
 23450                           
 23451                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 23452  01087C  0100               	movlb	0	; () banked
 23453  01087E  EE20 F006          	lfsr	2,6
 23454  010882  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23455  010884  26D9               	addwf	fsr2l,f,c
 23456  010886  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23457  010888  22DA               	addwfc	fsr2h,f,c
 23458  01088A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 23459  01088E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 23460  010892  0E00               	movlw	0
 23461  010894  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 23462  010896  0E03               	movlw	3
 23463  010898  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 23464  01089A  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 23465                           
 23466                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 23467  01089E  0100               	movlb	0	; () banked
 23468  0108A0  EE20 F006          	lfsr	2,6
 23469  0108A4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23470  0108A6  26D9               	addwf	fsr2l,f,c
 23471  0108A8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23472  0108AA  22DA               	addwfc	fsr2h,f,c
 23473  0108AC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23474  0108B0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23475  0108B4  0E05               	movlw	5
 23476  0108B6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23477  0108B8  0E01               	movlw	1
 23478  0108BA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23479  0108BC  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 23480  0108C0  0012               	return		;funcret
 23481  0108C2                     __end_of_SPI_Init:
 23482                           	opt stack 0
 23483                           tosu	equ	0xFFF
 23484                           tosh	equ	0xFFE
 23485                           tosl	equ	0xFFD
 23486                           pclath	equ	0xFFA
 23487                           tblptru	equ	0xFF8
 23488                           tblptrh	equ	0xFF7
 23489                           tblptrl	equ	0xFF6
 23490                           tablat	equ	0xFF5
 23491                           prodh	equ	0xFF4
 23492                           prodl	equ	0xFF3
 23493                           intcon	equ	0xFF2
 23494                           postinc0	equ	0xFEE
 23495                           wreg	equ	0xFE8
 23496                           indf1	equ	0xFE7
 23497                           postdec1	equ	0xFE5
 23498                           fsr1h	equ	0xFE2
 23499                           fsr1l	equ	0xFE1
 23500                           indf2	equ	0xFDF
 23501                           postinc2	equ	0xFDE
 23502                           postdec2	equ	0xFDD
 23503                           plusw2	equ	0xFDB
 23504                           fsr2h	equ	0xFDA
 23505                           fsr2l	equ	0xFD9
 23506                           status	equ	0xFD8
 23507                           
 23508 ;; *************** function _Timer2_Init *****************
 23509 ;; Defined at:
 23510 ;;		line 10 in file "Library/Timer2.c"
 23511 ;; Parameters:    Size  Location     Type
 23512 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 23513 ;; Auto vars:     Size  Location     Type
 23514 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 23515 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 23516 ;;  RDIV            4   18[BANK0 ] unsigned long 
 23517 ;; Return value:  Size  Location     Type
 23518 ;;                  1    wreg      void 
 23519 ;; Registers used:
 23520 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23521 ;; Tracked objects:
 23522 ;;		On entry : 0/0
 23523 ;;		On exit  : 0/0
 23524 ;;		Unchanged: 0/0
 23525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23526 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23527 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23528 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23529 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23530 ;;Total ram usage:       17 bytes
 23531 ;; Hardware stack levels used:    1
 23532 ;; Hardware stack levels required when called:    8
 23533 ;; This function calls:
 23534 ;;		_Timer2_Clear
 23535 ;;		___lldiv
 23536 ;; This function is called by:
 23537 ;;		_SPI_Init
 23538 ;; This function uses a non-reentrant model
 23539 ;;
 23540                           
 23541                           	psect	text114
 23542  013144                     __ptext114:
 23543                           	opt stack 0
 23544  013144                     _Timer2_Init:
 23545                           	opt stack 19
 23546                           
 23547                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 23548                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 23549                           ;Timer2.c: 14: static UINT8 PRE = 0;
 23550                           ;Timer2.c: 15: static UINT32 DIV = 0;
 23551                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 23552                           
 23553                           ;incstack = 0
 23554  013144  0E00               	movlw	0
 23555  013146  0100               	movlb	0	; () banked
 23556  013148  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 23557  01314A  0E6C               	movlw	108
 23558  01314C  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 23559  01314E  0EDC               	movlw	220
 23560  013150  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 23561  013152  0E02               	movlw	2
 23562  013154  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 23563                           
 23564                           ; BSR set to: 0
 23565                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 23566                           ;Timer2.c: 20: pFrequency *= 2;
 23567  013156  90D8               	bcf	status,0,c
 23568  013158  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 23569  01315A  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 23570  01315C  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 23571  01315E  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 23572                           
 23573                           ; BSR set to: 0
 23574                           ;Timer2.c: 23: pCPUClock /= 4;
 23575  013160  0E02               	movlw	2
 23576  013162  6F71               	movwf	??_Timer2_Init& (0+255),b
 23577  013164                     u11755:
 23578  013164  90D8               	bcf	status,0,c
 23579  013166  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 23580  013168  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 23581  01316A  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 23582  01316C  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 23583  01316E  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 23584  013170  D7F9               	goto	u11755
 23585                           
 23586                           ; BSR set to: 0
 23587                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 23588  013172  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 23589  013176  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 23590  01317A  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 23591  01317E  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 23592  013182  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 23593  013186  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 23594  01318A  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 23595  01318E  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 23596  013192  ECD5  F0A2         	call	___lldiv	;wreg free
 23597  013196  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 23598  01319A  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 23599  01319E  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 23600  0131A2  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 23601                           
 23602                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 23603  0131A6  D00E               	goto	l1828
 23604  0131A8                     l14329:
 23605                           
 23606                           ;Timer2.c: 28: {
 23607                           ;Timer2.c: 29: RDIV = 0;
 23608  0131A8  0E00               	movlw	0
 23609  0131AA  0100               	movlb	0	; () banked
 23610  0131AC  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 23611  0131AE  0E00               	movlw	0
 23612  0131B0  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 23613  0131B2  0E00               	movlw	0
 23614  0131B4  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 23615  0131B6  0E00               	movlw	0
 23616  0131B8  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 23617                           
 23618                           ; BSR set to: 0
 23619                           ;Timer2.c: 30: INDEX ++;
 23620  0131BA  2A3E               	incf	Timer2_Init@INDEX,f,c
 23621                           
 23622                           ; BSR set to: 0
 23623                           ;Timer2.c: 31: if (INDEX >= 3)
 23624  0131BC  0E02               	movlw	2
 23625  0131BE  643E               	cpfsgt	Timer2_Init@INDEX,c
 23626  0131C0  D001               	goto	l1828
 23627  0131C2  D023               	goto	u11770
 23628  0131C4                     l1828:
 23629                           
 23630                           ; BSR set to: 0
 23631                           
 23632                           ; BSR set to: 0
 23633  0131C4  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 23634  0131C8  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 23635  0131CC  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 23636  0131D0  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 23637  0131D4  503E               	movf	Timer2_Init@INDEX,w,c
 23638  0131D6  0D01               	mullw	1
 23639  0131D8  0E06               	movlw	low Timer2_Init@PRESCALE
 23640  0131DA  24F3               	addwf	prodl,w,c
 23641  0131DC  6EF6               	movwf	tblptrl,c
 23642  0131DE  0EFC               	movlw	high Timer2_Init@PRESCALE
 23643  0131E0  20F4               	addwfc	prodh,w,c
 23644  0131E2  6EF7               	movwf	tblptrh,c
 23645  0131E4                     	if	1	;There are 3 active tblptr bytes
 23646  0131E4  6AF8               	clrf	tblptru,c
 23647  0131E6  0E00               	movlw	low (__mediumconst shr (0+16))
 23648  0131E8  22F8               	addwfc	tblptru,f,c
 23649  0131EA                     	endif
 23650  0131EA  0008               	tblrd		*
 23651  0131EC  50F5               	movf	tablat,w,c
 23652  0131EE  0100               	movlb	0	; () banked
 23653  0131F0  6F64               	movwf	___lldiv@divisor& (0+255),b
 23654  0131F2  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23655  0131F4  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23656  0131F6  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23657  0131F8  ECD5  F0A2         	call	___lldiv	;wreg free
 23658  0131FC  0100               	movlb	0	; () banked
 23659  0131FE  5163               	movf	(?___lldiv+3)& (0+255),w,b
 23660  013200  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 23661  013202  E1D2               	bnz	l14329
 23662  013204  0561               	decf	(?___lldiv+1)& (0+255),w,b
 23663  013206  B0D8               	btfsc	status,0,c
 23664  013208  D7CF               	goto	l1827
 23665  01320A                     u11770:
 23666                           
 23667                           ; BSR set to: 0
 23668                           ;Timer2.c: 33: }
 23669                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 23670                           
 23671                           ; BSR set to: 0
 23672  01320A  50CA               	movf	4042,w,c	;volatile
 23673  01320C  183E               	xorwf	Timer2_Init@INDEX,w,c
 23674  01320E  0BFC               	andlw	-4
 23675  013210  183E               	xorwf	Timer2_Init@INDEX,w,c
 23676  013212  6ECA               	movwf	4042,c	;volatile
 23677                           
 23678                           ; BSR set to: 0
 23679                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 23680  013214  84CA               	bsf	4042,2,c	;volatile
 23681                           
 23682                           ; BSR set to: 0
 23683                           ;Timer2.c: 44: Timer2_Clear();
 23684  013216  ECC1  F0AD         	call	_Timer2_Clear	;wreg free
 23685                           
 23686                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 23687  01321A  503E               	movf	Timer2_Init@INDEX,w,c
 23688  01321C  0D01               	mullw	1
 23689  01321E  0E06               	movlw	low Timer2_Init@PRESCALE
 23690  013220  24F3               	addwf	prodl,w,c
 23691  013222  6EF6               	movwf	tblptrl,c
 23692  013224  0EFC               	movlw	high Timer2_Init@PRESCALE
 23693  013226  20F4               	addwfc	prodh,w,c
 23694  013228  6EF7               	movwf	tblptrh,c
 23695  01322A                     	if	1	;There are 3 active tblptr bytes
 23696  01322A  6AF8               	clrf	tblptru,c
 23697  01322C  0E00               	movlw	low (__mediumconst shr (0+16))
 23698  01322E  22F8               	addwfc	tblptru,f,c
 23699  013230                     	endif
 23700  013230  0008               	tblrd		*
 23701  013232  CFF5 F03D          	movff	tablat,Timer2_Init@PRE
 23702                           
 23703                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 23704  013236  0EFF               	movlw	255
 23705  013238  0100               	movlb	0	; () banked
 23706  01323A  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 23707  01323C  0101               	movlb	1	; () banked
 23708  01323E  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 23709  013240  0EFF               	movlw	255
 23710  013242  0100               	movlb	0	; () banked
 23711  013244  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 23712  013246  0101               	movlb	1	; () banked
 23713  013248  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 23714  01324A  0EFF               	movlw	255
 23715  01324C  0100               	movlb	0	; () banked
 23716  01324E  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 23717  013250  0101               	movlb	1	; () banked
 23718  013252  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 23719  013254  0EFF               	movlw	255
 23720  013256  0100               	movlb	0	; () banked
 23721  013258  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 23722  01325A  0101               	movlb	1	; () banked
 23723  01325C  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 23724                           
 23725                           ; BSR set to: 1
 23726                           ;Timer2.c: 48: INDEX = DIV/PRE;
 23727  01325E  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 23728  013262  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 23729  013266  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 23730  01326A  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 23731  01326E  503D               	movf	Timer2_Init@PRE,w,c
 23732  013270  0100               	movlb	0	; () banked
 23733  013272  6F64               	movwf	___lldiv@divisor& (0+255),b
 23734  013274  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23735  013276  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23736  013278  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23737  01327A  ECD5  F0A2         	call	___lldiv	;wreg free
 23738  01327E  0100               	movlb	0	; () banked
 23739  013280  5160               	movf	?___lldiv& (0+255),w,b
 23740  013282  6E3E               	movwf	Timer2_Init@INDEX,c
 23741                           
 23742                           ; BSR set to: 0
 23743                           ;Timer2.c: 49: PR2 = INDEX;
 23744  013284  C03E  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 23745                           
 23746                           ; BSR set to: 0
 23747  013288  0012               	return		;funcret
 23748  01328A                     __end_of_Timer2_Init:
 23749                           	opt stack 0
 23750                           tosu	equ	0xFFF
 23751                           tosh	equ	0xFFE
 23752                           tosl	equ	0xFFD
 23753                           pclath	equ	0xFFA
 23754                           tblptru	equ	0xFF8
 23755                           tblptrh	equ	0xFF7
 23756                           tblptrl	equ	0xFF6
 23757                           tablat	equ	0xFF5
 23758                           prodh	equ	0xFF4
 23759                           prodl	equ	0xFF3
 23760                           intcon	equ	0xFF2
 23761                           postinc0	equ	0xFEE
 23762                           wreg	equ	0xFE8
 23763                           indf1	equ	0xFE7
 23764                           postdec1	equ	0xFE5
 23765                           fsr1h	equ	0xFE2
 23766                           fsr1l	equ	0xFE1
 23767                           indf2	equ	0xFDF
 23768                           postinc2	equ	0xFDE
 23769                           postdec2	equ	0xFDD
 23770                           plusw2	equ	0xFDB
 23771                           fsr2h	equ	0xFDA
 23772                           fsr2l	equ	0xFD9
 23773                           status	equ	0xFD8
 23774                           
 23775 ;; *************** function ___lldiv *****************
 23776 ;; Defined at:
 23777 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 23778 ;; Parameters:    Size  Location     Type
 23779 ;;  dividend        4    0[BANK0 ] unsigned long 
 23780 ;;  divisor         4    4[BANK0 ] unsigned long 
 23781 ;; Auto vars:     Size  Location     Type
 23782 ;;  quotient        4    8[BANK0 ] unsigned long 
 23783 ;;  counter         1   12[BANK0 ] unsigned char 
 23784 ;; Return value:  Size  Location     Type
 23785 ;;                  4    0[BANK0 ] unsigned long 
 23786 ;; Registers used:
 23787 ;;		wreg, status,2, status,0
 23788 ;; Tracked objects:
 23789 ;;		On entry : 0/0
 23790 ;;		On exit  : 0/0
 23791 ;;		Unchanged: 0/0
 23792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23793 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23794 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23796 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23797 ;;Total ram usage:       13 bytes
 23798 ;; Hardware stack levels used:    1
 23799 ;; Hardware stack levels required when called:    7
 23800 ;; This function calls:
 23801 ;;		Nothing
 23802 ;; This function is called by:
 23803 ;;		_Timer2_Init
 23804 ;;		_rand_between
 23805 ;;		_I2C_Init
 23806 ;;		_Timer0_Init
 23807 ;; This function uses a non-reentrant model
 23808 ;;
 23809                           
 23810                           	psect	text115
 23811  0145AA                     __ptext115:
 23812                           	opt stack 0
 23813  0145AA                     ___lldiv:
 23814                           	opt stack 19
 23815                           
 23816                           ; BSR set to: 0
 23817                           ;incstack = 0
 23818  0145AA  0E00               	movlw	0
 23819  0145AC  0100               	movlb	0	; () banked
 23820  0145AE  6F68               	movwf	___lldiv@quotient& (0+255),b
 23821  0145B0  0E00               	movlw	0
 23822  0145B2  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 23823  0145B4  0E00               	movlw	0
 23824  0145B6  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 23825  0145B8  0E00               	movlw	0
 23826  0145BA  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 23827                           
 23828                           ; BSR set to: 0
 23829  0145BC  5164               	movf	___lldiv@divisor& (0+255),w,b
 23830  0145BE  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23831  0145C0  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23832  0145C2  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 23833  0145C4  B4D8               	btfsc	status,2,c
 23834  0145C6  D02A               	goto	l2848
 23835                           
 23836                           ; BSR set to: 0
 23837  0145C8  0E01               	movlw	1
 23838  0145CA  6F6C               	movwf	___lldiv@counter& (0+255),b
 23839  0145CC  D006               	goto	l2843
 23840  0145CE                     
 23841                           ; BSR set to: 0
 23842                           
 23843                           ; BSR set to: 0
 23844  0145CE  90D8               	bcf	status,0,c
 23845  0145D0  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23846  0145D2  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23847  0145D4  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23848  0145D6  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23849  0145D8  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23850  0145DA                     l2843:
 23851                           
 23852                           ; BSR set to: 0
 23853                           
 23854                           ; BSR set to: 0
 23855  0145DA  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23856  0145DC  D7F8               	goto	l2844
 23857  0145DE                     u11520:
 23858                           
 23859                           ; BSR set to: 0
 23860                           
 23861                           ; BSR set to: 0
 23862                           
 23863                           ; BSR set to: 0
 23864  0145DE  90D8               	bcf	status,0,c
 23865  0145E0  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23866  0145E2  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23867  0145E4  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23868  0145E6  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23869                           
 23870                           ; BSR set to: 0
 23871  0145E8  5164               	movf	___lldiv@divisor& (0+255),w,b
 23872  0145EA  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23873  0145EC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23874  0145EE  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23875  0145F0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23876  0145F2  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23877  0145F4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23878  0145F6  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23879  0145F8  A0D8               	btfss	status,0,c
 23880  0145FA  D009               	goto	l2847
 23881                           
 23882                           ; BSR set to: 0
 23883  0145FC  5164               	movf	___lldiv@divisor& (0+255),w,b
 23884  0145FE  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23885  014600  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23886  014602  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23887  014604  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23888  014606  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23889  014608  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23890  01460A  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23891                           
 23892                           ; BSR set to: 0
 23893  01460C  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23894  01460E                     l2847:
 23895                           
 23896                           ; BSR set to: 0
 23897                           
 23898                           ; BSR set to: 0
 23899  01460E  90D8               	bcf	status,0,c
 23900  014610  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23901  014612  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23902  014614  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23903  014616  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23904                           
 23905                           ; BSR set to: 0
 23906  014618  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23907  01461A  D7E1               	goto	u11520
 23908  01461C                     l2848:
 23909                           
 23910                           ; BSR set to: 0
 23911                           
 23912                           ; BSR set to: 0
 23913  01461C  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23914  014620  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23915  014624  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23916  014628  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23917                           
 23918                           ; BSR set to: 0
 23919  01462C  0012               	return		;funcret
 23920  01462E                     __end_of___lldiv:
 23921                           	opt stack 0
 23922                           tosu	equ	0xFFF
 23923                           tosh	equ	0xFFE
 23924                           tosl	equ	0xFFD
 23925                           pclath	equ	0xFFA
 23926                           tblptru	equ	0xFF8
 23927                           tblptrh	equ	0xFF7
 23928                           tblptrl	equ	0xFF6
 23929                           tablat	equ	0xFF5
 23930                           prodh	equ	0xFF4
 23931                           prodl	equ	0xFF3
 23932                           intcon	equ	0xFF2
 23933                           postinc0	equ	0xFEE
 23934                           wreg	equ	0xFE8
 23935                           indf1	equ	0xFE7
 23936                           postdec1	equ	0xFE5
 23937                           fsr1h	equ	0xFE2
 23938                           fsr1l	equ	0xFE1
 23939                           indf2	equ	0xFDF
 23940                           postinc2	equ	0xFDE
 23941                           postdec2	equ	0xFDD
 23942                           plusw2	equ	0xFDB
 23943                           fsr2h	equ	0xFDA
 23944                           fsr2l	equ	0xFD9
 23945                           status	equ	0xFD8
 23946                           
 23947 ;; *************** function _Timer2_Clear *****************
 23948 ;; Defined at:
 23949 ;;		line 3 in file "Library/Timer2.c"
 23950 ;; Parameters:    Size  Location     Type
 23951 ;;		None
 23952 ;; Auto vars:     Size  Location     Type
 23953 ;;		None
 23954 ;; Return value:  Size  Location     Type
 23955 ;;                  1    wreg      void 
 23956 ;; Registers used:
 23957 ;;		None
 23958 ;; Tracked objects:
 23959 ;;		On entry : 0/0
 23960 ;;		On exit  : 0/0
 23961 ;;		Unchanged: 0/0
 23962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23967 ;;Total ram usage:        0 bytes
 23968 ;; Hardware stack levels used:    1
 23969 ;; Hardware stack levels required when called:    7
 23970 ;; This function calls:
 23971 ;;		Nothing
 23972 ;; This function is called by:
 23973 ;;		_Timer2_Init
 23974 ;; This function uses a non-reentrant model
 23975 ;;
 23976                           
 23977                           	psect	text116
 23978  015B82                     __ptext116:
 23979                           	opt stack 0
 23980  015B82                     _Timer2_Clear:
 23981                           	opt stack 19
 23982                           
 23983                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 23984                           
 23985                           ; BSR set to: 0
 23986                           ;incstack = 0
 23987  015B82  929E               	bcf	3998,1,c	;volatile
 23988                           
 23989                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 23990  015B84  929D               	bcf	3997,1,c	;volatile
 23991                           
 23992                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 23993  015B86  929F               	bcf	3999,1,c	;volatile
 23994  015B88  0012               	return		;funcret
 23995  015B8A                     __end_of_Timer2_Clear:
 23996                           	opt stack 0
 23997                           tosu	equ	0xFFF
 23998                           tosh	equ	0xFFE
 23999                           tosl	equ	0xFFD
 24000                           pclath	equ	0xFFA
 24001                           tblptru	equ	0xFF8
 24002                           tblptrh	equ	0xFF7
 24003                           tblptrl	equ	0xFF6
 24004                           tablat	equ	0xFF5
 24005                           prodh	equ	0xFF4
 24006                           prodl	equ	0xFF3
 24007                           intcon	equ	0xFF2
 24008                           postinc0	equ	0xFEE
 24009                           wreg	equ	0xFE8
 24010                           indf1	equ	0xFE7
 24011                           postdec1	equ	0xFE5
 24012                           fsr1h	equ	0xFE2
 24013                           fsr1l	equ	0xFE1
 24014                           indf2	equ	0xFDF
 24015                           postinc2	equ	0xFDE
 24016                           postdec2	equ	0xFDD
 24017                           plusw2	equ	0xFDB
 24018                           fsr2h	equ	0xFDA
 24019                           fsr2l	equ	0xFD9
 24020                           status	equ	0xFD8
 24021                           
 24022 ;; *************** function _SPI_DisableISR *****************
 24023 ;; Defined at:
 24024 ;;		line 181 in file "Library/SPI.c"
 24025 ;; Parameters:    Size  Location     Type
 24026 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 24027 ;;		 -> SPI1(11), SPI2(11), 
 24028 ;; Auto vars:     Size  Location     Type
 24029 ;;		None
 24030 ;; Return value:  Size  Location     Type
 24031 ;;                  1    wreg      void 
 24032 ;; Registers used:
 24033 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24034 ;; Tracked objects:
 24035 ;;		On entry : 0/0
 24036 ;;		On exit  : 0/0
 24037 ;;		Unchanged: 0/0
 24038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24039 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24043 ;;Total ram usage:        2 bytes
 24044 ;; Hardware stack levels used:    1
 24045 ;; Hardware stack levels required when called:    7
 24046 ;; This function calls:
 24047 ;;		Nothing
 24048 ;; This function is called by:
 24049 ;;		_SPI_Init
 24050 ;; This function uses a non-reentrant model
 24051 ;;
 24052                           
 24053                           	psect	text117
 24054  0157D4                     __ptext117:
 24055                           	opt stack 0
 24056  0157D4                     _SPI_DisableISR:
 24057                           	opt stack 20
 24058                           
 24059                           ;SPI.c: 183: switch (pInput->mChannel)
 24060                           
 24061                           ;incstack = 0
 24062  0157D4  D004               	goto	l654
 24063  0157D6                     l655:
 24064                           
 24065                           ; BSR set to: 0
 24066  0157D6  969D               	bcf	3997,3,c	;volatile
 24067  0157D8  0012               	return	
 24068  0157DA                     l657:
 24069                           
 24070                           ; BSR set to: 0
 24071  0157DA  9EA3               	bcf	4003,7,c	;volatile
 24072                           
 24073                           ; BSR set to: 0
 24074                           ;SPI.c: 188: };
 24075                           
 24076                           ; BSR set to: 0
 24077                           
 24078                           ;SPI.c: 187: default: return;
 24079  0157DC  0012               	return	
 24080  0157DE                     l654:
 24081                           
 24082                           ; BSR set to: 0
 24083  0157DE  0100               	movlb	0	; () banked
 24084  0157E0  EE20 F002          	lfsr	2,2
 24085  0157E4  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 24086  0157E6  26D9               	addwf	fsr2l,f,c
 24087  0157E8  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 24088  0157EA  22DA               	addwfc	fsr2h,f,c
 24089  0157EC  50DF               	movf	indf2,w,c
 24090                           
 24091                           ; Switch size 1, requested type "space"
 24092                           ; Number of cases is 2, Range of values is 0 to 1
 24093                           ; switch strategies available:
 24094                           ; Name         Instructions Cycles
 24095                           ; simple_byte            7     4 (average)
 24096                           ;	Chosen strategy is simple_byte
 24097  0157EE  0A00               	xorlw	0	; case 0
 24098  0157F0  B4D8               	btfsc	status,2,c
 24099  0157F2  D7F1               	goto	l655
 24100  0157F4  0A01               	xorlw	1	; case 1
 24101  0157F6  A4D8               	btfss	status,2,c
 24102  0157F8  0012               	return	
 24103  0157FA  D7EF               	goto	l657
 24104  0157FC                     __end_of_SPI_DisableISR:
 24105                           	opt stack 0
 24106                           tosu	equ	0xFFF
 24107                           tosh	equ	0xFFE
 24108                           tosl	equ	0xFFD
 24109                           pclath	equ	0xFFA
 24110                           tblptru	equ	0xFF8
 24111                           tblptrh	equ	0xFF7
 24112                           tblptrl	equ	0xFF6
 24113                           tablat	equ	0xFF5
 24114                           prodh	equ	0xFF4
 24115                           prodl	equ	0xFF3
 24116                           intcon	equ	0xFF2
 24117                           postinc0	equ	0xFEE
 24118                           wreg	equ	0xFE8
 24119                           indf1	equ	0xFE7
 24120                           postdec1	equ	0xFE5
 24121                           fsr1h	equ	0xFE2
 24122                           fsr1l	equ	0xFE1
 24123                           indf2	equ	0xFDF
 24124                           postinc2	equ	0xFDE
 24125                           postdec2	equ	0xFDD
 24126                           plusw2	equ	0xFDB
 24127                           fsr2h	equ	0xFDA
 24128                           fsr2l	equ	0xFD9
 24129                           status	equ	0xFD8
 24130                           
 24131 ;; *************** function _SPI_DCS *****************
 24132 ;; Defined at:
 24133 ;;		line 219 in file "Library/SPI.c"
 24134 ;; Parameters:    Size  Location     Type
 24135 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 24136 ;;		 -> SPI1(11), SPI2(11), 
 24137 ;; Auto vars:     Size  Location     Type
 24138 ;;		None
 24139 ;; Return value:  Size  Location     Type
 24140 ;;                  1    wreg      void 
 24141 ;; Registers used:
 24142 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24143 ;; Tracked objects:
 24144 ;;		On entry : 0/0
 24145 ;;		On exit  : 0/0
 24146 ;;		Unchanged: 0/0
 24147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24148 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24152 ;;Total ram usage:        2 bytes
 24153 ;; Hardware stack levels used:    1
 24154 ;; Hardware stack levels required when called:    7
 24155 ;; This function calls:
 24156 ;;		Nothing
 24157 ;; This function is called by:
 24158 ;;		_SPI_Init
 24159 ;; This function uses a non-reentrant model
 24160 ;;
 24161                           
 24162                           	psect	text118
 24163  0156F2                     __ptext118:
 24164                           	opt stack 0
 24165  0156F2                     _SPI_DCS:
 24166                           	opt stack 20
 24167                           
 24168                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 24169                           
 24170                           ; BSR set to: 0
 24171                           ;incstack = 0
 24172  0156F2  0100               	movlb	0	; () banked
 24173  0156F4  EE20 F002          	lfsr	2,2
 24174  0156F8  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 24175  0156FA  26D9               	addwf	fsr2l,f,c
 24176  0156FC  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 24177  0156FE  22DA               	addwfc	fsr2h,f,c
 24178  015700  50DF               	movf	indf2,w,c
 24179  015702  A4D8               	btfss	status,2,c
 24180  015704  D007               	goto	l673
 24181                           
 24182                           ; BSR set to: 0
 24183                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 24184  015706  C1A3  FFD9         	movff	_PortC+4,fsr2l
 24185  01570A  C1A4  FFDA         	movff	_PortC+5,fsr2h
 24186  01570E  0101               	movlb	1	; () banked
 24187  015710  84DF               	bsf	indf2,2,c
 24188  015712  0012               	return	
 24189  015714                     l673:
 24190                           
 24191                           ;SPI.c: 223: else
 24192                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 24193                           
 24194                           ; BSR set to: 1
 24195  015714  C18F  FFD9         	movff	_PortD+4,fsr2l
 24196  015718  C190  FFDA         	movff	_PortD+5,fsr2h
 24197  01571C  0101               	movlb	1	; () banked
 24198  01571E  8EDF               	bsf	indf2,7,c
 24199  015720  0012               	return	
 24200  015722                     __end_of_SPI_DCS:
 24201                           	opt stack 0
 24202                           tosu	equ	0xFFF
 24203                           tosh	equ	0xFFE
 24204                           tosl	equ	0xFFD
 24205                           pclath	equ	0xFFA
 24206                           tblptru	equ	0xFF8
 24207                           tblptrh	equ	0xFF7
 24208                           tblptrl	equ	0xFF6
 24209                           tablat	equ	0xFF5
 24210                           prodh	equ	0xFF4
 24211                           prodl	equ	0xFF3
 24212                           intcon	equ	0xFF2
 24213                           postinc0	equ	0xFEE
 24214                           wreg	equ	0xFE8
 24215                           indf1	equ	0xFE7
 24216                           postdec1	equ	0xFE5
 24217                           fsr1h	equ	0xFE2
 24218                           fsr1l	equ	0xFE1
 24219                           indf2	equ	0xFDF
 24220                           postinc2	equ	0xFDE
 24221                           postdec2	equ	0xFDD
 24222                           plusw2	equ	0xFDB
 24223                           fsr2h	equ	0xFDA
 24224                           fsr2l	equ	0xFD9
 24225                           status	equ	0xFD8
 24226                           
 24227 ;; *************** function _FunctInitButton *****************
 24228 ;; Defined at:
 24229 ;;		line 16 in file "Functions.c"
 24230 ;; Parameters:    Size  Location     Type
 24231 ;;		None
 24232 ;; Auto vars:     Size  Location     Type
 24233 ;;		None
 24234 ;; Return value:  Size  Location     Type
 24235 ;;                  1    wreg      void 
 24236 ;; Registers used:
 24237 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24238 ;; Tracked objects:
 24239 ;;		On entry : 0/0
 24240 ;;		On exit  : 0/0
 24241 ;;		Unchanged: 0/0
 24242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24247 ;;Total ram usage:        0 bytes
 24248 ;; Hardware stack levels used:    1
 24249 ;; Hardware stack levels required when called:   16
 24250 ;; This function calls:
 24251 ;;		_Button_Init
 24252 ;; This function is called by:
 24253 ;;		_main
 24254 ;; This function uses a non-reentrant model
 24255 ;;
 24256                           
 24257                           	psect	text119
 24258  014892                     __ptext119:
 24259                           	opt stack 0
 24260  014892                     _FunctInitButton:
 24261                           	opt stack 14
 24262                           
 24263                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 24264                           
 24265                           ; BSR set to: 1
 24266                           ;incstack = 0
 24267  014892  0EE4               	movlw	low _TestButton
 24268  014894  0100               	movlb	0	; () banked
 24269  014896  6F9B               	movwf	Button_Init@pInput& (0+255),b
 24270  014898  0E02               	movlw	high _TestButton
 24271  01489A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 24272  01489C  0E00               	movlw	0
 24273  01489E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24274  0148A0  0E02               	movlw	2
 24275  0148A2  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24276  0148A4  0E1C               	movlw	low _MXK_InitTestButton
 24277  0148A6  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 24278  0148A8  0E5A               	movlw	high _MXK_InitTestButton
 24279  0148AA  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 24280  0148AC  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 24281  0148AE  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 24282  0148B0  0ED8               	movlw	low _MXK_TestButton
 24283  0148B2  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 24284  0148B4  0E5A               	movlw	high _MXK_TestButton
 24285  0148B6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 24286  0148B8  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 24287  0148BA  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 24288  0148BC  0EFC               	movlw	low _Event_TestButton
 24289  0148BE  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 24290  0148C0  0E55               	movlw	high _Event_TestButton
 24291  0148C2  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 24292  0148C4  0E01               	movlw	low (_Event_TestButton shr (0+16))
 24293  0148C6  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 24294  0148C8  ECB7  F09E         	call	_Button_Init	;wreg free
 24295                           
 24296                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 24297  0148CC  0EDA               	movlw	low _DIPSwitch
 24298  0148CE  0100               	movlb	0	; () banked
 24299  0148D0  6F9B               	movwf	Button_Init@pInput& (0+255),b
 24300  0148D2  0E02               	movlw	high _DIPSwitch
 24301  0148D4  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 24302  0148D6  0E00               	movlw	0
 24303  0148D8  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24304  0148DA  0E02               	movlw	2
 24305  0148DC  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24306  0148DE  0E04               	movlw	low _MXK_InitDIPSwitch
 24307  0148E0  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 24308  0148E2  0E5A               	movlw	high _MXK_InitDIPSwitch
 24309  0148E4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 24310  0148E6  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 24311  0148E8  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 24312  0148EA  0E60               	movlw	low _MXK_DIPSwitch
 24313  0148EC  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 24314  0148EE  0E5A               	movlw	high _MXK_DIPSwitch
 24315  0148F0  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 24316  0148F2  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 24317  0148F4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 24318  0148F6  0E24               	movlw	low _Event_DIPSwitch
 24319  0148F8  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 24320  0148FA  0E58               	movlw	high _Event_DIPSwitch
 24321  0148FC  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 24322  0148FE  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 24323  014900  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 24324  014902  ECB7  F09E         	call	_Button_Init	;wreg free
 24325  014906  0012               	return		;funcret
 24326  014908                     __end_of_FunctInitButton:
 24327                           	opt stack 0
 24328                           tosu	equ	0xFFF
 24329                           tosh	equ	0xFFE
 24330                           tosl	equ	0xFFD
 24331                           pclath	equ	0xFFA
 24332                           tblptru	equ	0xFF8
 24333                           tblptrh	equ	0xFF7
 24334                           tblptrl	equ	0xFF6
 24335                           tablat	equ	0xFF5
 24336                           prodh	equ	0xFF4
 24337                           prodl	equ	0xFF3
 24338                           intcon	equ	0xFF2
 24339                           postinc0	equ	0xFEE
 24340                           wreg	equ	0xFE8
 24341                           indf1	equ	0xFE7
 24342                           postdec1	equ	0xFE5
 24343                           fsr1h	equ	0xFE2
 24344                           fsr1l	equ	0xFE1
 24345                           indf2	equ	0xFDF
 24346                           postinc2	equ	0xFDE
 24347                           postdec2	equ	0xFDD
 24348                           plusw2	equ	0xFDB
 24349                           fsr2h	equ	0xFDA
 24350                           fsr2l	equ	0xFD9
 24351                           status	equ	0xFD8
 24352                           
 24353 ;; *************** function _Button_Init *****************
 24354 ;; Defined at:
 24355 ;;		line 18 in file "Library/Button.c"
 24356 ;; Parameters:    Size  Location     Type
 24357 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 24358 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 24359 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 24360 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 24361 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 24362 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 24363 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 24364 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 24365 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 24366 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 24367 ;; Auto vars:     Size  Location     Type
 24368 ;;		None
 24369 ;; Return value:  Size  Location     Type
 24370 ;;                  1    wreg      void 
 24371 ;; Registers used:
 24372 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24373 ;; Tracked objects:
 24374 ;;		On entry : 0/0
 24375 ;;		On exit  : 0/0
 24376 ;;		Unchanged: 0/0
 24377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24378 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24381 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24382 ;;Total ram usage:       13 bytes
 24383 ;; Hardware stack levels used:    1
 24384 ;; Hardware stack levels required when called:   15
 24385 ;; This function calls:
 24386 ;;		_HMI_InitButtons
 24387 ;;		_MXK_InitDIPSwitch
 24388 ;;		_MXK_InitTestButton
 24389 ;; This function is called by:
 24390 ;;		_HMI_Init
 24391 ;;		_FunctInitButton
 24392 ;; This function uses a non-reentrant model
 24393 ;;
 24394                           
 24395                           	psect	text120
 24396  013D6E                     __ptext120:
 24397                           	opt stack 0
 24398  013D6E                     _Button_Init:
 24399                           	opt stack 14
 24400                           
 24401                           ;Button.c: 21: if(pInput==(void*)0)
 24402                           
 24403                           ;incstack = 0
 24404  013D6E  0100               	movlb	0	; () banked
 24405  013D70  519B               	movf	Button_Init@pInput& (0+255),w,b
 24406  013D72  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 24407  013D74  B4D8               	btfsc	status,2,c
 24408  013D76  0012               	return	
 24409                           
 24410                           ; BSR set to: 0
 24411                           ;Button.c: 23: if(pInitIO==(void*)0)
 24412                           
 24413                           ; BSR set to: 0
 24414                           
 24415                           ; BSR set to: 0
 24416                           ;Button.c: 22: return;
 24417  013D78  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24418  013D7A  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 24419  013D7C  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 24420  013D7E  B4D8               	btfsc	status,2,c
 24421  013D80  0012               	return	
 24422                           
 24423                           ; BSR set to: 0
 24424                           ;Button.c: 25: if(pGetState==(void*)0)
 24425                           
 24426                           ; BSR set to: 0
 24427                           
 24428                           ; BSR set to: 0
 24429                           ;Button.c: 24: return;
 24430  013D82  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 24431  013D84  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 24432  013D86  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 24433  013D88  B4D8               	btfsc	status,2,c
 24434  013D8A  0012               	return	
 24435                           
 24436                           ; BSR set to: 0
 24437                           ;Button.c: 27: if(pFunction==(void*)0)
 24438                           
 24439                           ; BSR set to: 0
 24440                           
 24441                           ; BSR set to: 0
 24442                           ;Button.c: 26: return;
 24443  013D8C  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 24444  013D8E  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 24445  013D90  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 24446  013D92  B4D8               	btfsc	status,2,c
 24447  013D94  0012               	return	
 24448                           
 24449                           ; BSR set to: 0
 24450                           ;Button.c: 30: if(pThreshold == 0)
 24451                           
 24452                           ; BSR set to: 0
 24453                           
 24454                           ; BSR set to: 0
 24455                           ;Button.c: 28: return;
 24456  013D96  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 24457  013D98  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 24458  013D9A  A4D8               	btfss	status,2,c
 24459  013D9C  D004               	goto	l8
 24460                           
 24461                           ; BSR set to: 0
 24462                           ;Button.c: 31: pThreshold = 1;
 24463  013D9E  0E00               	movlw	0
 24464  013DA0  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24465  013DA2  0E01               	movlw	1
 24466  013DA4  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24467  013DA6                     l8:
 24468                           
 24469                           ; BSR set to: 0
 24470                           ;Button.c: 34: pInput->mState = 0;
 24471                           
 24472                           ; BSR set to: 0
 24473  013DA6  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 24474  013DAA  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 24475  013DAE  0E00               	movlw	0
 24476  013DB0  6EDF               	movwf	indf2,c
 24477                           
 24478                           ; BSR set to: 0
 24479                           ;Button.c: 35: pInput->mCount = 0;
 24480  013DB2  EE20 F001          	lfsr	2,1
 24481  013DB6  519B               	movf	Button_Init@pInput& (0+255),w,b
 24482  013DB8  26D9               	addwf	fsr2l,f,c
 24483  013DBA  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24484  013DBC  22DA               	addwfc	fsr2h,f,c
 24485  013DBE  0E00               	movlw	0
 24486  013DC0  6EDF               	movwf	indf2,c
 24487                           
 24488                           ; BSR set to: 0
 24489                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 24490  013DC2  EE20 F002          	lfsr	2,2
 24491  013DC6  519B               	movf	Button_Init@pInput& (0+255),w,b
 24492  013DC8  26D9               	addwf	fsr2l,f,c
 24493  013DCA  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24494  013DCC  22DA               	addwfc	fsr2h,f,c
 24495  013DCE  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 24496  013DD2  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 24497                           
 24498                           ; BSR set to: 0
 24499                           ;Button.c: 37: pInput->mFunction = pFunction;
 24500  013DD6  EE20 F004          	lfsr	2,4
 24501  013DDA  519B               	movf	Button_Init@pInput& (0+255),w,b
 24502  013DDC  26D9               	addwf	fsr2l,f,c
 24503  013DDE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24504  013DE0  22DA               	addwfc	fsr2h,f,c
 24505  013DE2  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 24506  013DE6  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 24507  013DEA  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 24508                           
 24509                           ; BSR set to: 0
 24510                           ;Button.c: 38: pInput->mGetState = pGetState;
 24511  013DEE  EE20 F007          	lfsr	2,7
 24512  013DF2  519B               	movf	Button_Init@pInput& (0+255),w,b
 24513  013DF4  26D9               	addwf	fsr2l,f,c
 24514  013DF6  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24515  013DF8  22DA               	addwfc	fsr2h,f,c
 24516  013DFA  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 24517  013DFE  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 24518  013E02  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 24519                           
 24520                           ; BSR set to: 0
 24521                           ;Button.c: 41: pInitIO();
 24522  013E06  D801               	call	u12448
 24523  013E08  0012               	return	
 24524  013E0A                     u12448:
 24525  013E0A  0005               	push	
 24526  013E0C  6EFA               	movwf	pclath,c
 24527  013E0E  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24528  013E10  6EFD               	movwf	tosl,c
 24529  013E12  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 24530  013E14  6EFE               	movwf	tosh,c
 24531  013E16  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 24532  013E18  6EFF               	movwf	tosu,c
 24533  013E1A  50FA               	movf	pclath,w,c
 24534  013E1C  0012               	return		;indir
 24535  013E1E                     __end_of_Button_Init:
 24536                           	opt stack 0
 24537                           tosu	equ	0xFFF
 24538                           tosh	equ	0xFFE
 24539                           tosl	equ	0xFFD
 24540                           pclath	equ	0xFFA
 24541                           tblptru	equ	0xFF8
 24542                           tblptrh	equ	0xFF7
 24543                           tblptrl	equ	0xFF6
 24544                           tablat	equ	0xFF5
 24545                           prodh	equ	0xFF4
 24546                           prodl	equ	0xFF3
 24547                           intcon	equ	0xFF2
 24548                           postinc0	equ	0xFEE
 24549                           wreg	equ	0xFE8
 24550                           indf1	equ	0xFE7
 24551                           postdec1	equ	0xFE5
 24552                           fsr1h	equ	0xFE2
 24553                           fsr1l	equ	0xFE1
 24554                           indf2	equ	0xFDF
 24555                           postinc2	equ	0xFDE
 24556                           postdec2	equ	0xFDD
 24557                           plusw2	equ	0xFDB
 24558                           fsr2h	equ	0xFDA
 24559                           fsr2l	equ	0xFD9
 24560                           status	equ	0xFD8
 24561                           
 24562 ;; *************** function _MXK_InitDIPSwitch *****************
 24563 ;; Defined at:
 24564 ;;		line 20 in file "Library/MXK.c"
 24565 ;; Parameters:    Size  Location     Type
 24566 ;;		None
 24567 ;; Auto vars:     Size  Location     Type
 24568 ;;		None
 24569 ;; Return value:  Size  Location     Type
 24570 ;;                  1    wreg      void 
 24571 ;; Registers used:
 24572 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24573 ;; Tracked objects:
 24574 ;;		On entry : 0/0
 24575 ;;		On exit  : 0/0
 24576 ;;		Unchanged: 0/0
 24577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24582 ;;Total ram usage:        0 bytes
 24583 ;; Hardware stack levels used:    1
 24584 ;; Hardware stack levels required when called:   14
 24585 ;; This function calls:
 24586 ;;		_Port_SetQuadType
 24587 ;; This function is called by:
 24588 ;;		_FunctInitButton
 24589 ;;		_Button_Init
 24590 ;; This function uses a non-reentrant model
 24591 ;;
 24592                           
 24593                           	psect	text121
 24594  015A04                     __ptext121:
 24595                           	opt stack 0
 24596  015A04                     _MXK_InitDIPSwitch:
 24597                           	opt stack 14
 24598                           
 24599                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 24600                           
 24601                           ;incstack = 0
 24602  015A04  0E8B               	movlw	low _PortD
 24603  015A06  0100               	movlb	0	; () banked
 24604  015A08  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 24605  015A0A  0E01               	movlw	high _PortD
 24606  015A0C  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 24607  015A0E  0E00               	movlw	0
 24608  015A10  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 24609  015A12  0E00               	movlw	0
 24610  015A14  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 24611  015A16  EC4D  F08E         	call	_Port_SetQuadType	;wreg free
 24612  015A1A  0012               	return		;funcret
 24613  015A1C                     __end_of_MXK_InitDIPSwitch:
 24614                           	opt stack 0
 24615                           tosu	equ	0xFFF
 24616                           tosh	equ	0xFFE
 24617                           tosl	equ	0xFFD
 24618                           pclath	equ	0xFFA
 24619                           tblptru	equ	0xFF8
 24620                           tblptrh	equ	0xFF7
 24621                           tblptrl	equ	0xFF6
 24622                           tablat	equ	0xFF5
 24623                           prodh	equ	0xFF4
 24624                           prodl	equ	0xFF3
 24625                           intcon	equ	0xFF2
 24626                           postinc0	equ	0xFEE
 24627                           wreg	equ	0xFE8
 24628                           indf1	equ	0xFE7
 24629                           postdec1	equ	0xFE5
 24630                           fsr1h	equ	0xFE2
 24631                           fsr1l	equ	0xFE1
 24632                           indf2	equ	0xFDF
 24633                           postinc2	equ	0xFDE
 24634                           postdec2	equ	0xFDD
 24635                           plusw2	equ	0xFDB
 24636                           fsr2h	equ	0xFDA
 24637                           fsr2l	equ	0xFD9
 24638                           status	equ	0xFD8
 24639                           
 24640 ;; *************** function _HMI_InitButtons *****************
 24641 ;; Defined at:
 24642 ;;		line 21 in file "HMI.c"
 24643 ;; Parameters:    Size  Location     Type
 24644 ;;		None
 24645 ;; Auto vars:     Size  Location     Type
 24646 ;;		None
 24647 ;; Return value:  Size  Location     Type
 24648 ;;                  1    wreg      void 
 24649 ;; Registers used:
 24650 ;;		wreg, status,2
 24651 ;; Tracked objects:
 24652 ;;		On entry : 0/0
 24653 ;;		On exit  : 0/0
 24654 ;;		Unchanged: 0/0
 24655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24660 ;;Total ram usage:        0 bytes
 24661 ;; Hardware stack levels used:    1
 24662 ;; Hardware stack levels required when called:    7
 24663 ;; This function calls:
 24664 ;;		Nothing
 24665 ;; This function is called by:
 24666 ;;		_HMI_Init
 24667 ;;		_Button_Init
 24668 ;; This function uses a non-reentrant model
 24669 ;;
 24670                           
 24671                           	psect	text122
 24672  015B96                     __ptext122:
 24673                           	opt stack 0
 24674  015B96                     _HMI_InitButtons:
 24675                           	opt stack 21
 24676                           
 24677                           ;HMI.c: 23: TRISE = 0xFC;
 24678                           
 24679                           ;incstack = 0
 24680  015B96  0EFC               	movlw	252
 24681  015B98  6E96               	movwf	3990,c	;volatile
 24682  015B9A  0012               	return		;funcret
 24683  015B9C                     __end_of_HMI_InitButtons:
 24684                           	opt stack 0
 24685                           tosu	equ	0xFFF
 24686                           tosh	equ	0xFFE
 24687                           tosl	equ	0xFFD
 24688                           pclath	equ	0xFFA
 24689                           tblptru	equ	0xFF8
 24690                           tblptrh	equ	0xFF7
 24691                           tblptrl	equ	0xFF6
 24692                           tablat	equ	0xFF5
 24693                           prodh	equ	0xFF4
 24694                           prodl	equ	0xFF3
 24695                           intcon	equ	0xFF2
 24696                           postinc0	equ	0xFEE
 24697                           wreg	equ	0xFE8
 24698                           indf1	equ	0xFE7
 24699                           postdec1	equ	0xFE5
 24700                           fsr1h	equ	0xFE2
 24701                           fsr1l	equ	0xFE1
 24702                           indf2	equ	0xFDF
 24703                           postinc2	equ	0xFDE
 24704                           postdec2	equ	0xFDD
 24705                           plusw2	equ	0xFDB
 24706                           fsr2h	equ	0xFDA
 24707                           fsr2l	equ	0xFD9
 24708                           status	equ	0xFD8
 24709                           
 24710 ;; *************** function _MXK_InitTestButton *****************
 24711 ;; Defined at:
 24712 ;;		line 10 in file "Library/MXK.c"
 24713 ;; Parameters:    Size  Location     Type
 24714 ;;		None
 24715 ;; Auto vars:     Size  Location     Type
 24716 ;;		None
 24717 ;; Return value:  Size  Location     Type
 24718 ;;                  1    wreg      void 
 24719 ;; Registers used:
 24720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24721 ;; Tracked objects:
 24722 ;;		On entry : 0/0
 24723 ;;		On exit  : 0/0
 24724 ;;		Unchanged: 0/0
 24725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24730 ;;Total ram usage:        0 bytes
 24731 ;; Hardware stack levels used:    1
 24732 ;; Hardware stack levels required when called:   12
 24733 ;; This function calls:
 24734 ;;		_Port_SetPinType
 24735 ;; This function is called by:
 24736 ;;		_FunctInitButton
 24737 ;;		_Button_Init
 24738 ;; This function uses a non-reentrant model
 24739 ;;
 24740                           
 24741                           	psect	text123
 24742  015A1C                     __ptext123:
 24743                           	opt stack 0
 24744  015A1C                     _MXK_InitTestButton:
 24745                           	opt stack 16
 24746                           
 24747                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 24748                           
 24749                           ;incstack = 0
 24750  015A1C  0E95               	movlw	low _PortB
 24751  015A1E  0100               	movlb	0	; () banked
 24752  015A20  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24753  015A22  0E01               	movlw	high _PortB
 24754  015A24  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24755  015A26  0E04               	movlw	4
 24756  015A28  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24757  015A2A  0E00               	movlw	0
 24758  015A2C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24759  015A2E  ECF7  F092         	call	_Port_SetPinType	;wreg free
 24760  015A32  0012               	return		;funcret
 24761  015A34                     __end_of_MXK_InitTestButton:
 24762                           	opt stack 0
 24763                           tosu	equ	0xFFF
 24764                           tosh	equ	0xFFE
 24765                           tosl	equ	0xFFD
 24766                           pclath	equ	0xFFA
 24767                           tblptru	equ	0xFF8
 24768                           tblptrh	equ	0xFF7
 24769                           tblptrl	equ	0xFF6
 24770                           tablat	equ	0xFF5
 24771                           prodh	equ	0xFF4
 24772                           prodl	equ	0xFF3
 24773                           intcon	equ	0xFF2
 24774                           postinc0	equ	0xFEE
 24775                           wreg	equ	0xFE8
 24776                           indf1	equ	0xFE7
 24777                           postdec1	equ	0xFE5
 24778                           fsr1h	equ	0xFE2
 24779                           fsr1l	equ	0xFE1
 24780                           indf2	equ	0xFDF
 24781                           postinc2	equ	0xFDE
 24782                           postdec2	equ	0xFDD
 24783                           plusw2	equ	0xFDB
 24784                           fsr2h	equ	0xFDA
 24785                           fsr2l	equ	0xFD9
 24786                           status	equ	0xFD8
 24787                           
 24788 ;; *************** function _Port_SetPinType *****************
 24789 ;; Defined at:
 24790 ;;		line 189 in file "Library/Port.c"
 24791 ;; Parameters:    Size  Location     Type
 24792 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 24793 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24794 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24795 ;;  pPin            1   40[BANK0 ] enum E6750
 24796 ;;  pType           1   41[BANK0 ] enum E6795
 24797 ;; Auto vars:     Size  Location     Type
 24798 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 24799 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 24800 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 24801 ;;  Output          1   42[BANK0 ] enum E6475
 24802 ;; Return value:  Size  Location     Type
 24803 ;;                  1    wreg      enum E6475
 24804 ;; Registers used:
 24805 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24806 ;; Tracked objects:
 24807 ;;		On entry : 0/0
 24808 ;;		On exit  : 0/0
 24809 ;;		Unchanged: 0/0
 24810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24811 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24812 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24814 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24815 ;;Total ram usage:        7 bytes
 24816 ;; Hardware stack levels used:    1
 24817 ;; Hardware stack levels required when called:   11
 24818 ;; This function calls:
 24819 ;;		_Byte_SetBit
 24820 ;;		_PortProperty_Valid
 24821 ;;		_Word_SetPair
 24822 ;; This function is called by:
 24823 ;;		_Configure_GPIOs
 24824 ;;		_LED_Init
 24825 ;;		_Port_Init
 24826 ;;		_SPI_Init
 24827 ;;		_MXK_InitTestButton
 24828 ;;		_MXK_Init
 24829 ;;		_I2C_Init
 24830 ;;		_Motor_Init
 24831 ;; This function uses a non-reentrant model
 24832 ;;
 24833                           
 24834                           	psect	text124
 24835  0125EE                     __ptext124:
 24836                           	opt stack 0
 24837  0125EE                     _Port_SetPinType:
 24838                           	opt stack 18
 24839                           
 24840                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 24841                           
 24842                           ;incstack = 0
 24843  0125EE  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 24844  0125F2  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 24845  0125F6  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 24846  0125FA  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 24847                           
 24848                           ;Port.c: 192: ePinError Output = ePinErrorState;
 24849  0125FE  0E05               	movlw	5
 24850  012600  0100               	movlb	0	; () banked
 24851  012602  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24852                           
 24853                           ;Port.c: 193: switch (pType)
 24854  012604  D0A7               	goto	l412
 24855  012606                     
 24856                           ; BSR set to: 0
 24857                           ;Port.c: 197: {
 24858                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24859                           
 24860                           ; BSR set to: 0
 24861  012606  EE20 F002          	lfsr	2,2
 24862  01260A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24863  01260C  26D9               	addwf	fsr2l,f,c
 24864  01260E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24865  012610  22DA               	addwfc	fsr2h,f,c
 24866  012612  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24867  012616  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24868  01261A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24869  01261E  0E01               	movlw	1
 24870  012620  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24871  012622  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24872                           
 24873                           ;Port.c: 203: break;
 24874  012626  D0A4               	goto	l414
 24875  012628                     
 24876                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 24877  012628  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24878  01262C  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24879  012630  0E01               	movlw	1
 24880  012632  0100               	movlb	0	; () banked
 24881  012634  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24882  012636  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24883  01263A  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 24884  01263E  0100               	movlb	0	; () banked
 24885  012640  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24886  012642  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24887  012644  A4D8               	btfss	status,2,c
 24888  012646  0012               	return	
 24889                           
 24890                           ; BSR set to: 0
 24891                           ;Port.c: 208: {
 24892                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24893  012648  EE20 F002          	lfsr	2,2
 24894  01264C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24895  01264E  26D9               	addwf	fsr2l,f,c
 24896  012650  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24897  012652  22DA               	addwfc	fsr2h,f,c
 24898  012654  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24899  012658  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24900  01265C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24901  012660  0E00               	movlw	0
 24902  012662  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24903  012664  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24904                           
 24905                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24906  012668  0100               	movlb	0	; () banked
 24907  01266A  EE20 F004          	lfsr	2,4
 24908  01266E  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24909  012670  26D9               	addwf	fsr2l,f,c
 24910  012672  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24911  012674  22DA               	addwfc	fsr2h,f,c
 24912  012676  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24913  01267A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24914  01267E  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24915  012682  0E00               	movlw	0
 24916  012684  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24917  012686  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24918                           
 24919                           ;Port.c: 214: break;
 24920  01268A  D072               	goto	l414
 24921  01268C                     
 24922                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 24923                           
 24924                           ;Port.c: 218: case eTypeOutputOpenSource:
 24925  01268C  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24926  012690  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24927  012694  0E02               	movlw	2
 24928  012696  0100               	movlb	0	; () banked
 24929  012698  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24930  01269A  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24931  01269E  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 24932  0126A2  0100               	movlb	0	; () banked
 24933  0126A4  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24934  0126A6  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24935  0126A8  A4D8               	btfss	status,2,c
 24936  0126AA  0012               	return	
 24937                           
 24938                           ; BSR set to: 0
 24939                           ;Port.c: 220: {
 24940                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24941  0126AC  EE20 F002          	lfsr	2,2
 24942  0126B0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24943  0126B2  26D9               	addwf	fsr2l,f,c
 24944  0126B4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24945  0126B6  22DA               	addwfc	fsr2h,f,c
 24946  0126B8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24947  0126BC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24948  0126C0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24949  0126C4  0E01               	movlw	1
 24950  0126C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24951  0126C8  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24952                           
 24953                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 24954  0126CC  0100               	movlb	0	; () banked
 24955  0126CE  EE20 F004          	lfsr	2,4
 24956  0126D2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24957  0126D4  26D9               	addwf	fsr2l,f,c
 24958  0126D6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24959  0126D8  22DA               	addwfc	fsr2h,f,c
 24960  0126DA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24961  0126DE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24962  0126E2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24963  0126E6  0E01               	movlw	1
 24964  0126E8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24965  0126EA  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 24966                           
 24967                           ;Port.c: 226: break;
 24968  0126EE  D040               	goto	l414
 24969  0126F0                     
 24970                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 24971                           
 24972                           ;Port.c: 230: case eTypeOutputPushPull:
 24973  0126F0  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24974  0126F4  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24975  0126F8  0E00               	movlw	0
 24976  0126FA  0100               	movlb	0	; () banked
 24977  0126FC  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24978  0126FE  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24979  012702  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 24980  012706  0100               	movlb	0	; () banked
 24981  012708  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24982  01270A  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24983  01270C  A4D8               	btfss	status,2,c
 24984  01270E  0012               	return	
 24985                           
 24986                           ; BSR set to: 0
 24987                           ;Port.c: 232: {
 24988                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24989  012710  EE20 F002          	lfsr	2,2
 24990  012714  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24991  012716  26D9               	addwf	fsr2l,f,c
 24992  012718  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24993  01271A  22DA               	addwfc	fsr2h,f,c
 24994  01271C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24995  012720  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24996  012724  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24997  012728  0E00               	movlw	0
 24998  01272A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24999  01272C  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 25000                           
 25001                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 25002  012730  0100               	movlb	0	; () banked
 25003  012732  EE20 F004          	lfsr	2,4
 25004  012736  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 25005  012738  26D9               	addwf	fsr2l,f,c
 25006  01273A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 25007  01273C  22DA               	addwfc	fsr2h,f,c
 25008  01273E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 25009  012742  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 25010  012746  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 25011  01274A  0E00               	movlw	0
 25012  01274C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 25013  01274E  ECF5  F0A7         	call	_Byte_SetBit	;wreg free
 25014                           
 25015                           ;Port.c: 239: }
 25016                           
 25017                           ;Port.c: 238: break;
 25018  012752  D00E               	goto	l414
 25019  012754                     l412:
 25020  012754  0100               	movlb	0	; () banked
 25021  012756  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 25022                           
 25023                           ; Switch size 1, requested type "space"
 25024                           ; Number of cases is 4, Range of values is 0 to 3
 25025                           ; switch strategies available:
 25026                           ; Name         Instructions Cycles
 25027                           ; simple_byte           13     7 (average)
 25028                           ;	Chosen strategy is simple_byte
 25029  012758  0A00               	xorlw	0	; case 0
 25030  01275A  B4D8               	btfsc	status,2,c
 25031  01275C  D754               	goto	l413
 25032  01275E  0A01               	xorlw	1	; case 1
 25033  012760  B4D8               	btfsc	status,2,c
 25034  012762  D762               	goto	l415
 25035  012764  0A03               	xorlw	3	; case 2
 25036  012766  B4D8               	btfsc	status,2,c
 25037  012768  D791               	goto	l417
 25038  01276A  0A01               	xorlw	1	; case 3
 25039  01276C  B4D8               	btfsc	status,2,c
 25040  01276E  D7C0               	goto	l421
 25041  012770                     l414:
 25042                           
 25043                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 25044                           
 25045                           ; BSR set to: 0
 25046  012770  0E08               	movlw	8
 25047  012772  0100               	movlb	0	; () banked
 25048  012774  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 25049  012776  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25050  012778  0E00               	movlw	0
 25051  01277A  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 25052  01277C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25053  01277E  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 25054  012782  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 25055  012786  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25056  01278A  0012               	return	
 25057  01278C                     __end_of_Port_SetPinType:
 25058                           	opt stack 0
 25059                           tosu	equ	0xFFF
 25060                           tosh	equ	0xFFE
 25061                           tosl	equ	0xFFD
 25062                           pclath	equ	0xFFA
 25063                           tblptru	equ	0xFF8
 25064                           tblptrh	equ	0xFF7
 25065                           tblptrl	equ	0xFF6
 25066                           tablat	equ	0xFF5
 25067                           prodh	equ	0xFF4
 25068                           prodl	equ	0xFF3
 25069                           intcon	equ	0xFF2
 25070                           postinc0	equ	0xFEE
 25071                           wreg	equ	0xFE8
 25072                           indf1	equ	0xFE7
 25073                           postdec1	equ	0xFE5
 25074                           fsr1h	equ	0xFE2
 25075                           fsr1l	equ	0xFE1
 25076                           indf2	equ	0xFDF
 25077                           postinc2	equ	0xFDE
 25078                           postdec2	equ	0xFDD
 25079                           plusw2	equ	0xFDB
 25080                           fsr2h	equ	0xFDA
 25081                           fsr2l	equ	0xFD9
 25082                           status	equ	0xFD8
 25083                           
 25084 ;; *************** function _Byte_SetBit *****************
 25085 ;; Defined at:
 25086 ;;		line 32 in file "Library/Types.c"
 25087 ;; Parameters:    Size  Location     Type
 25088 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 25089 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 25090 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 25091 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 25092 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 25093 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 25094 ;;		 -> NULL(0), 
 25095 ;;  pBit            1    2[BANK0 ] unsigned char 
 25096 ;;  pValue          1    3[BANK0 ] unsigned char 
 25097 ;; Auto vars:     Size  Location     Type
 25098 ;;		None
 25099 ;; Return value:  Size  Location     Type
 25100 ;;                  1    wreg      void 
 25101 ;; Registers used:
 25102 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25103 ;; Tracked objects:
 25104 ;;		On entry : 0/0
 25105 ;;		On exit  : 0/0
 25106 ;;		Unchanged: 0/0
 25107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25108 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25110 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25111 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25112 ;;Total ram usage:        7 bytes
 25113 ;; Hardware stack levels used:    1
 25114 ;; Hardware stack levels required when called:    7
 25115 ;; This function calls:
 25116 ;;		Nothing
 25117 ;; This function is called by:
 25118 ;;		_Port_SetPinType
 25119 ;;		_Port_SetPin
 25120 ;;		_SPI_Init
 25121 ;;		_SPI_MinSpeed
 25122 ;;		_SPI_MaxSpeed
 25123 ;;		_Word_SetBit
 25124 ;;		_I2C_Init
 25125 ;; This function uses a non-reentrant model
 25126 ;;
 25127                           
 25128                           	psect	text125
 25129  014FEA                     __ptext125:
 25130                           	opt stack 0
 25131  014FEA                     _Byte_SetBit:
 25132                           	opt stack 21
 25133                           
 25134                           ;Types.c: 34: pValue &= 1;
 25135                           
 25136                           ;incstack = 0
 25137  014FEA  0E01               	movlw	1
 25138  014FEC  0100               	movlb	0	; () banked
 25139  014FEE  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 25140                           
 25141                           ; BSR set to: 0
 25142                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 25143  014FF0  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 25144  014FF4  0E01               	movlw	1
 25145  014FF6  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 25146  014FF8  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 25147  014FFA  D002               	goto	u10024
 25148  014FFC                     u10025:
 25149  014FFC  90D8               	bcf	status,0,c
 25150  014FFE  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 25151  015000                     u10024:
 25152  015000  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 25153  015002  D7FC               	goto	u10025
 25154  015004  0100               	movlb	0	; () banked
 25155  015006  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 25156  015008  0AFF               	xorlw	255
 25157  01500A  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 25158  01500C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 25159  015010  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 25160  015014  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 25161  015016  16DF               	andwf	indf2,f,c
 25162                           
 25163                           ; BSR set to: 0
 25164                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 25165  015018  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 25166  01501C  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 25167  015020  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 25168  015022  D002               	goto	u10034
 25169  015024                     u10035:
 25170  015024  90D8               	bcf	status,0,c
 25171  015026  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 25172  015028                     u10034:
 25173  015028  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 25174  01502A  D7FC               	goto	u10035
 25175  01502C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 25176  015030  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 25177  015034  0100               	movlb	0	; () banked
 25178  015036  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 25179  015038  12DF               	iorwf	indf2,f,c
 25180                           
 25181                           ; BSR set to: 0
 25182  01503A  0012               	return		;funcret
 25183  01503C                     __end_of_Byte_SetBit:
 25184                           	opt stack 0
 25185                           tosu	equ	0xFFF
 25186                           tosh	equ	0xFFE
 25187                           tosl	equ	0xFFD
 25188                           pclath	equ	0xFFA
 25189                           tblptru	equ	0xFF8
 25190                           tblptrh	equ	0xFF7
 25191                           tblptrl	equ	0xFF6
 25192                           tablat	equ	0xFF5
 25193                           prodh	equ	0xFF4
 25194                           prodl	equ	0xFF3
 25195                           intcon	equ	0xFF2
 25196                           postinc0	equ	0xFEE
 25197                           wreg	equ	0xFE8
 25198                           indf1	equ	0xFE7
 25199                           postdec1	equ	0xFE5
 25200                           fsr1h	equ	0xFE2
 25201                           fsr1l	equ	0xFE1
 25202                           indf2	equ	0xFDF
 25203                           postinc2	equ	0xFDE
 25204                           postdec2	equ	0xFDD
 25205                           plusw2	equ	0xFDB
 25206                           fsr2h	equ	0xFDA
 25207                           fsr2l	equ	0xFD9
 25208                           status	equ	0xFD8
 25209                           
 25210 ;; *************** function _Port_SetQuadType *****************
 25211 ;; Defined at:
 25212 ;;		line 399 in file "Library/Port.c"
 25213 ;; Parameters:    Size  Location     Type
 25214 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 25215 ;;		 -> PortB(10), PortD(10), 
 25216 ;;  pQuad           1   56[BANK0 ] enum E6776
 25217 ;;  pType           1   57[BANK0 ] enum E6795
 25218 ;; Auto vars:     Size  Location     Type
 25219 ;;  Output          1   58[BANK0 ] enum E6475
 25220 ;; Return value:  Size  Location     Type
 25221 ;;                  1    wreg      enum E6475
 25222 ;; Registers used:
 25223 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25224 ;; Tracked objects:
 25225 ;;		On entry : 0/0
 25226 ;;		On exit  : 0/0
 25227 ;;		Unchanged: 0/0
 25228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25229 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25232 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25233 ;;Total ram usage:        5 bytes
 25234 ;; Hardware stack levels used:    1
 25235 ;; Hardware stack levels required when called:   13
 25236 ;; This function calls:
 25237 ;;		_Byte_SetQuad
 25238 ;;		_Port_CheckQuadType
 25239 ;;		_Word_SetPair
 25240 ;; This function is called by:
 25241 ;;		_MXK_InitDIPSwitch
 25242 ;;		_MXK_Init
 25243 ;; This function uses a non-reentrant model
 25244 ;;
 25245                           
 25246                           	psect	text126
 25247  011C9A                     __ptext126:
 25248                           	opt stack 0
 25249  011C9A                     _Port_SetQuadType:
 25250                           	opt stack 16
 25251                           
 25252                           ;Port.c: 401: ePinError Output = ePinErrorState;
 25253                           
 25254                           ; BSR set to: 0
 25255                           ;incstack = 0
 25256  011C9A  0E05               	movlw	5
 25257  011C9C  0100               	movlb	0	; () banked
 25258  011C9E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25259                           
 25260                           ;Port.c: 403: switch (pType)
 25261  011CA0  D0B8               	goto	l476
 25262  011CA2                     
 25263                           ; BSR set to: 0
 25264                           ;Port.c: 407: {
 25265                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25266                           
 25267                           ; BSR set to: 0
 25268  011CA2  EE20 F002          	lfsr	2,2
 25269  011CA6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25270  011CA8  26D9               	addwf	fsr2l,f,c
 25271  011CAA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25272  011CAC  22DA               	addwfc	fsr2h,f,c
 25273  011CAE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25274  011CB2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25275  011CB6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25276  011CBA  0E0F               	movlw	15
 25277  011CBC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25278  011CBE  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25279                           
 25280                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25281  011CC2  0100               	movlb	0	; () banked
 25282  011CC4  EE20 F004          	lfsr	2,4
 25283  011CC8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25284  011CCA  26D9               	addwf	fsr2l,f,c
 25285  011CCC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25286  011CCE  22DA               	addwfc	fsr2h,f,c
 25287  011CD0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25288  011CD4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25289  011CD8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25290  011CDC  0E00               	movlw	0
 25291  011CDE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25292  011CE0  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25293                           
 25294                           ;Port.c: 413: }
 25295                           ;Port.c: 415: break;
 25296  011CE4  D0A4               	goto	l478
 25297  011CE6                     
 25298                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25299  011CE6  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25300  011CEA  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25301  011CEE  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25302  011CF2  0E03               	movlw	3
 25303  011CF4  0100               	movlb	0	; () banked
 25304  011CF6  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25305  011CF8  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 25306  011CFC  0100               	movlb	0	; () banked
 25307  011CFE  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25308  011D00  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25309  011D02  A4D8               	btfss	status,2,c
 25310  011D04  0012               	return	
 25311                           
 25312                           ; BSR set to: 0
 25313                           ;Port.c: 418: {
 25314                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25315  011D06  EE20 F002          	lfsr	2,2
 25316  011D0A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25317  011D0C  26D9               	addwf	fsr2l,f,c
 25318  011D0E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25319  011D10  22DA               	addwfc	fsr2h,f,c
 25320  011D12  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25321  011D16  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25322  011D1A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25323  011D1E  0E00               	movlw	0
 25324  011D20  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25325  011D22  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25326                           
 25327                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25328  011D26  0100               	movlb	0	; () banked
 25329  011D28  EE20 F004          	lfsr	2,4
 25330  011D2C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25331  011D2E  26D9               	addwf	fsr2l,f,c
 25332  011D30  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25333  011D32  22DA               	addwfc	fsr2h,f,c
 25334  011D34  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25335  011D38  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25336  011D3C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25337  011D40  0E00               	movlw	0
 25338  011D42  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25339  011D44  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25340                           
 25341                           ;Port.c: 424: }
 25342  011D48  D072               	goto	l478
 25343  011D4A                     
 25344                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25345  011D4A  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25346  011D4E  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25347  011D52  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25348  011D56  0E03               	movlw	3
 25349  011D58  0100               	movlb	0	; () banked
 25350  011D5A  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25351  011D5C  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 25352  011D60  0100               	movlb	0	; () banked
 25353  011D62  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25354  011D64  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25355  011D66  A4D8               	btfss	status,2,c
 25356  011D68  0012               	return	
 25357                           
 25358                           ; BSR set to: 0
 25359                           ;Port.c: 429: {
 25360                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25361  011D6A  EE20 F002          	lfsr	2,2
 25362  011D6E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25363  011D70  26D9               	addwf	fsr2l,f,c
 25364  011D72  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25365  011D74  22DA               	addwfc	fsr2h,f,c
 25366  011D76  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25367  011D7A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25368  011D7E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25369  011D82  0E0F               	movlw	15
 25370  011D84  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25371  011D86  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25372                           
 25373                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 25374  011D8A  0100               	movlb	0	; () banked
 25375  011D8C  EE20 F004          	lfsr	2,4
 25376  011D90  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25377  011D92  26D9               	addwf	fsr2l,f,c
 25378  011D94  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25379  011D96  22DA               	addwfc	fsr2h,f,c
 25380  011D98  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25381  011D9C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25382  011DA0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25383  011DA4  0E0F               	movlw	15
 25384  011DA6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25385  011DA8  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25386                           
 25387                           ;Port.c: 435: }
 25388  011DAC  D040               	goto	l478
 25389  011DAE                     
 25390                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25391  011DAE  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25392  011DB2  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25393  011DB6  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25394  011DBA  0E03               	movlw	3
 25395  011DBC  0100               	movlb	0	; () banked
 25396  011DBE  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25397  011DC0  EC6E  F0A8         	call	_Port_CheckQuadType	;wreg free
 25398  011DC4  0100               	movlb	0	; () banked
 25399  011DC6  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25400  011DC8  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25401  011DCA  A4D8               	btfss	status,2,c
 25402  011DCC  0012               	return	
 25403                           
 25404                           ; BSR set to: 0
 25405                           ;Port.c: 440: {
 25406                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25407  011DCE  EE20 F002          	lfsr	2,2
 25408  011DD2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25409  011DD4  26D9               	addwf	fsr2l,f,c
 25410  011DD6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25411  011DD8  22DA               	addwfc	fsr2h,f,c
 25412  011DDA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25413  011DDE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25414  011DE2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25415  011DE6  0E00               	movlw	0
 25416  011DE8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25417  011DEA  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25418                           
 25419                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25420  011DEE  0100               	movlb	0	; () banked
 25421  011DF0  EE20 F004          	lfsr	2,4
 25422  011DF4  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25423  011DF6  26D9               	addwf	fsr2l,f,c
 25424  011DF8  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25425  011DFA  22DA               	addwfc	fsr2h,f,c
 25426  011DFC  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25427  011E00  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25428  011E04  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25429  011E08  0E00               	movlw	0
 25430  011E0A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25431  011E0C  EC7A  F0AC         	call	_Byte_SetQuad	;wreg free
 25432                           
 25433                           ;Port.c: 446: }
 25434  011E10  D00E               	goto	l478
 25435  011E12                     l476:
 25436  011E12  0100               	movlb	0	; () banked
 25437  011E14  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 25438                           
 25439                           ; Switch size 1, requested type "space"
 25440                           ; Number of cases is 4, Range of values is 0 to 3
 25441                           ; switch strategies available:
 25442                           ; Name         Instructions Cycles
 25443                           ; simple_byte           13     7 (average)
 25444                           ;	Chosen strategy is simple_byte
 25445  011E16  0A00               	xorlw	0	; case 0
 25446  011E18  B4D8               	btfsc	status,2,c
 25447  011E1A  D743               	goto	l477
 25448  011E1C  0A01               	xorlw	1	; case 1
 25449  011E1E  B4D8               	btfsc	status,2,c
 25450  011E20  D762               	goto	l479
 25451  011E22  0A03               	xorlw	3	; case 2
 25452  011E24  B4D8               	btfsc	status,2,c
 25453  011E26  D791               	goto	l483
 25454  011E28  0A01               	xorlw	1	; case 3
 25455  011E2A  B4D8               	btfsc	status,2,c
 25456  011E2C  D7C0               	goto	l486
 25457  011E2E                     l478:
 25458                           
 25459                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 25460                           
 25461                           ; BSR set to: 0
 25462  011E2E  0E08               	movlw	8
 25463  011E30  0100               	movlb	0	; () banked
 25464  011E32  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25465  011E34  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25466  011E36  0E00               	movlw	0
 25467  011E38  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25468  011E3A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25469  011E3C  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25470  011E3E  0D04               	mullw	4
 25471  011E40  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 25472  011E44  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25473  011E48  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25474                           
 25475                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 25476  011E4C  0E08               	movlw	8
 25477  011E4E  0100               	movlb	0	; () banked
 25478  011E50  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25479  011E52  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25480  011E54  0E00               	movlw	0
 25481  011E56  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25482  011E58  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25483  011E5A  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25484  011E5C  0D04               	mullw	4
 25485  011E5E  28F3               	incf	prodl,w,c
 25486  011E60  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25487  011E62  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25488  011E66  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25489                           
 25490                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 25491  011E6A  0E08               	movlw	8
 25492  011E6C  0100               	movlb	0	; () banked
 25493  011E6E  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25494  011E70  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25495  011E72  0E00               	movlw	0
 25496  011E74  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25497  011E76  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25498  011E78  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25499  011E7A  0D04               	mullw	4
 25500  011E7C  50F3               	movf	prodl,w,c
 25501  011E7E  0F02               	addlw	2
 25502  011E80  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25503  011E82  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25504  011E86  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25505                           
 25506                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 25507  011E8A  0E08               	movlw	8
 25508  011E8C  0100               	movlb	0	; () banked
 25509  011E8E  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25510  011E90  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25511  011E92  0E00               	movlw	0
 25512  011E94  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25513  011E96  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25514  011E98  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25515  011E9A  0D04               	mullw	4
 25516  011E9C  50F3               	movf	prodl,w,c
 25517  011E9E  0F03               	addlw	3
 25518  011EA0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25519  011EA2  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25520  011EA6  EC8F  F0AA         	call	_Word_SetPair	;wreg free
 25521  011EAA  0012               	return	
 25522  011EAC                     __end_of_Port_SetQuadType:
 25523                           	opt stack 0
 25524                           tosu	equ	0xFFF
 25525                           tosh	equ	0xFFE
 25526                           tosl	equ	0xFFD
 25527                           pclath	equ	0xFFA
 25528                           tblptru	equ	0xFF8
 25529                           tblptrh	equ	0xFF7
 25530                           tblptrl	equ	0xFF6
 25531                           tablat	equ	0xFF5
 25532                           prodh	equ	0xFF4
 25533                           prodl	equ	0xFF3
 25534                           intcon	equ	0xFF2
 25535                           postinc0	equ	0xFEE
 25536                           wreg	equ	0xFE8
 25537                           indf1	equ	0xFE7
 25538                           postdec1	equ	0xFE5
 25539                           fsr1h	equ	0xFE2
 25540                           fsr1l	equ	0xFE1
 25541                           indf2	equ	0xFDF
 25542                           postinc2	equ	0xFDE
 25543                           postdec2	equ	0xFDD
 25544                           plusw2	equ	0xFDB
 25545                           fsr2h	equ	0xFDA
 25546                           fsr2l	equ	0xFD9
 25547                           status	equ	0xFD8
 25548                           
 25549 ;; *************** function _Word_SetPair *****************
 25550 ;; Defined at:
 25551 ;;		line 149 in file "Library/Types.c"
 25552 ;; Parameters:    Size  Location     Type
 25553 ;;  pInput          2   15[BANK0 ] PTR struct Word
 25554 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25555 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25556 ;;  pPair           1   17[BANK0 ] unsigned char 
 25557 ;;  pValue          1   18[BANK0 ] unsigned char 
 25558 ;; Auto vars:     Size  Location     Type
 25559 ;;		None
 25560 ;; Return value:  Size  Location     Type
 25561 ;;                  1    wreg      void 
 25562 ;; Registers used:
 25563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25564 ;; Tracked objects:
 25565 ;;		On entry : 0/0
 25566 ;;		On exit  : 0/0
 25567 ;;		Unchanged: 0/0
 25568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25569 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25572 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25573 ;;Total ram usage:        4 bytes
 25574 ;; Hardware stack levels used:    1
 25575 ;; Hardware stack levels required when called:    9
 25576 ;; This function calls:
 25577 ;;		_Byte_SetPair
 25578 ;; This function is called by:
 25579 ;;		_Port_SetPinType
 25580 ;;		_Port_SetQuadType
 25581 ;;		_Port_SetType
 25582 ;;		_Port_SetPairType
 25583 ;;		_PortProperty_Init
 25584 ;; This function uses a non-reentrant model
 25585 ;;
 25586                           
 25587                           	psect	text127
 25588  01551E                     __ptext127:
 25589                           	opt stack 0
 25590  01551E                     _Word_SetPair:
 25591                           	opt stack 19
 25592                           
 25593                           ;Types.c: 151: if (pPair >= 4)
 25594                           
 25595                           ;incstack = 0
 25596  01551E  0E03               	movlw	3
 25597  015520  0100               	movlb	0	; () banked
 25598  015522  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 25599  015524  D00E               	goto	l776
 25600                           
 25601                           ; BSR set to: 0
 25602                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 25603  015526  0E01               	movlw	1
 25604  015528  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 25605  01552A  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 25606  01552C  0E00               	movlw	0
 25607  01552E  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 25608  015530  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 25609  015532  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 25610  015534  0FFC               	addlw	252
 25611  015536  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 25612  015538  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25613  01553C  EC6A  F0AC         	call	_Byte_SetPair	;wreg free
 25614  015540  0012               	return	
 25615  015542                     l776:
 25616                           
 25617                           ;Types.c: 153: else
 25618                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 25619  015542  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 25620  015546  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 25621  01554A  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 25622  01554E  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25623  015552  EC6A  F0AC         	call	_Byte_SetPair	;wreg free
 25624  015556  0012               	return	
 25625  015558                     __end_of_Word_SetPair:
 25626                           	opt stack 0
 25627                           tosu	equ	0xFFF
 25628                           tosh	equ	0xFFE
 25629                           tosl	equ	0xFFD
 25630                           pclath	equ	0xFFA
 25631                           tblptru	equ	0xFF8
 25632                           tblptrh	equ	0xFF7
 25633                           tblptrl	equ	0xFF6
 25634                           tablat	equ	0xFF5
 25635                           prodh	equ	0xFF4
 25636                           prodl	equ	0xFF3
 25637                           intcon	equ	0xFF2
 25638                           postinc0	equ	0xFEE
 25639                           wreg	equ	0xFE8
 25640                           indf1	equ	0xFE7
 25641                           postdec1	equ	0xFE5
 25642                           fsr1h	equ	0xFE2
 25643                           fsr1l	equ	0xFE1
 25644                           indf2	equ	0xFDF
 25645                           postinc2	equ	0xFDE
 25646                           postdec2	equ	0xFDD
 25647                           plusw2	equ	0xFDB
 25648                           fsr2h	equ	0xFDA
 25649                           fsr2l	equ	0xFD9
 25650                           status	equ	0xFD8
 25651                           
 25652 ;; *************** function _Byte_SetPair *****************
 25653 ;; Defined at:
 25654 ;;		line 83 in file "Library/Types.c"
 25655 ;; Parameters:    Size  Location     Type
 25656 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 25657 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 25658 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 25659 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 25660 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 25661 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 25662 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 25663 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 25664 ;;		 -> NULL(0), 
 25665 ;;  pPair           1   13[BANK0 ] unsigned char 
 25666 ;;  pValue          1   14[BANK0 ] unsigned char 
 25667 ;; Auto vars:     Size  Location     Type
 25668 ;;		None
 25669 ;; Return value:  Size  Location     Type
 25670 ;;                  1    wreg      void 
 25671 ;; Registers used:
 25672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25673 ;; Tracked objects:
 25674 ;;		On entry : 0/0
 25675 ;;		On exit  : 0/0
 25676 ;;		Unchanged: 0/0
 25677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25678 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25681 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25682 ;;Total ram usage:        4 bytes
 25683 ;; Hardware stack levels used:    1
 25684 ;; Hardware stack levels required when called:    8
 25685 ;; This function calls:
 25686 ;;		_Byte_SetZone
 25687 ;; This function is called by:
 25688 ;;		_Word_SetPair
 25689 ;;		_Port_SetPairType
 25690 ;;		_Port_SetPair
 25691 ;; This function uses a non-reentrant model
 25692 ;;
 25693                           
 25694                           	psect	text128
 25695  0158D4                     __ptext128:
 25696                           	opt stack 0
 25697  0158D4                     _Byte_SetPair:
 25698                           	opt stack 19
 25699                           
 25700                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 25701                           
 25702                           ;incstack = 0
 25703  0158D4  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 25704  0158D8  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 25705  0158DC  0E04               	movlw	4
 25706  0158DE  0100               	movlb	0	; () banked
 25707  0158E0  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 25708  0158E2  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 25709  0158E6  0E02               	movlw	2
 25710  0158E8  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 25711  0158EA  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 25712  0158EE  EC7F  F0A1         	call	_Byte_SetZone	;wreg free
 25713  0158F2  0012               	return		;funcret
 25714  0158F4                     __end_of_Byte_SetPair:
 25715                           	opt stack 0
 25716                           tosu	equ	0xFFF
 25717                           tosh	equ	0xFFE
 25718                           tosl	equ	0xFFD
 25719                           pclath	equ	0xFFA
 25720                           tblptru	equ	0xFF8
 25721                           tblptrh	equ	0xFF7
 25722                           tblptrl	equ	0xFF6
 25723                           tablat	equ	0xFF5
 25724                           prodh	equ	0xFF4
 25725                           prodl	equ	0xFF3
 25726                           intcon	equ	0xFF2
 25727                           postinc0	equ	0xFEE
 25728                           wreg	equ	0xFE8
 25729                           indf1	equ	0xFE7
 25730                           postdec1	equ	0xFE5
 25731                           fsr1h	equ	0xFE2
 25732                           fsr1l	equ	0xFE1
 25733                           indf2	equ	0xFDF
 25734                           postinc2	equ	0xFDE
 25735                           postdec2	equ	0xFDD
 25736                           plusw2	equ	0xFDB
 25737                           fsr2h	equ	0xFDA
 25738                           fsr2l	equ	0xFD9
 25739                           status	equ	0xFD8
 25740                           
 25741 ;; *************** function _Port_CheckQuadType *****************
 25742 ;; Defined at:
 25743 ;;		line 126 in file "Library/Port.c"
 25744 ;; Parameters:    Size  Location     Type
 25745 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 25746 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25747 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25748 ;;  pQuad           1   49[BANK0 ] enum E6776
 25749 ;;  pDrive          1   50[BANK0 ] enum E6469
 25750 ;; Auto vars:     Size  Location     Type
 25751 ;;  Output          1   53[BANK0 ] enum E6475
 25752 ;;  Pair2           1   52[BANK0 ] enum E6760
 25753 ;;  Pair1           1   51[BANK0 ] enum E6760
 25754 ;; Return value:  Size  Location     Type
 25755 ;;                  1    wreg      enum E6475
 25756 ;; Registers used:
 25757 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25758 ;; Tracked objects:
 25759 ;;		On entry : 0/0
 25760 ;;		On exit  : 0/0
 25761 ;;		Unchanged: 0/0
 25762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25763 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25764 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25766 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25767 ;;Total ram usage:        7 bytes
 25768 ;; Hardware stack levels used:    1
 25769 ;; Hardware stack levels required when called:   12
 25770 ;; This function calls:
 25771 ;;		_Port_CheckPairType
 25772 ;; This function is called by:
 25773 ;;		_Port_CheckPortType
 25774 ;;		_Port_SetQuadType
 25775 ;; This function uses a non-reentrant model
 25776 ;;
 25777                           
 25778                           	psect	text129
 25779  0150DC                     __ptext129:
 25780                           	opt stack 0
 25781  0150DC                     _Port_CheckQuadType:
 25782                           	opt stack 15
 25783                           
 25784                           ;Port.c: 128: ePinError Output = ePinErrorState;
 25785                           
 25786                           ;incstack = 0
 25787  0150DC  0E05               	movlw	5
 25788  0150DE  0100               	movlb	0	; () banked
 25789  0150E0  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25790                           
 25791                           ; BSR set to: 0
 25792                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 25793  0150E2  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25794  0150E4  0D02               	mullw	2
 25795  0150E6  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 25796                           
 25797                           ; BSR set to: 0
 25798                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 25799  0150EA  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25800  0150EC  0D02               	mullw	2
 25801  0150EE  28F3               	incf	prodl,w,c
 25802  0150F0  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 25803                           
 25804                           ; BSR set to: 0
 25805                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 25806  0150F2  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25807  0150F6  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25808  0150FA  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 25809  0150FE  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25810  015102  EC96  F0A6         	call	_Port_CheckPairType	;wreg free
 25811  015106  0100               	movlb	0	; () banked
 25812  015108  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25813  01510A  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25814  01510C  A4D8               	btfss	status,2,c
 25815  01510E  D00C               	goto	l393
 25816                           
 25817                           ; BSR set to: 0
 25818                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 25819  015110  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25820  015114  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25821  015118  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 25822  01511C  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25823  015120  EC96  F0A6         	call	_Port_CheckPairType	;wreg free
 25824  015124  0100               	movlb	0	; () banked
 25825  015126  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25826  015128                     l393:
 25827                           
 25828                           ; BSR set to: 0
 25829                           ;Port.c: 136: return Output;
 25830                           
 25831                           ; BSR set to: 0
 25832  015128  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25833  01512A  0012               	return	
 25834  01512C                     __end_of_Port_CheckQuadType:
 25835                           	opt stack 0
 25836                           tosu	equ	0xFFF
 25837                           tosh	equ	0xFFE
 25838                           tosl	equ	0xFFD
 25839                           pclath	equ	0xFFA
 25840                           tblptru	equ	0xFF8
 25841                           tblptrh	equ	0xFF7
 25842                           tblptrl	equ	0xFF6
 25843                           tablat	equ	0xFF5
 25844                           prodh	equ	0xFF4
 25845                           prodl	equ	0xFF3
 25846                           intcon	equ	0xFF2
 25847                           postinc0	equ	0xFEE
 25848                           wreg	equ	0xFE8
 25849                           indf1	equ	0xFE7
 25850                           postdec1	equ	0xFE5
 25851                           fsr1h	equ	0xFE2
 25852                           fsr1l	equ	0xFE1
 25853                           indf2	equ	0xFDF
 25854                           postinc2	equ	0xFDE
 25855                           postdec2	equ	0xFDD
 25856                           plusw2	equ	0xFDB
 25857                           fsr2h	equ	0xFDA
 25858                           fsr2l	equ	0xFD9
 25859                           status	equ	0xFD8
 25860                           
 25861 ;; *************** function _Port_CheckPairType *****************
 25862 ;; Defined at:
 25863 ;;		line 112 in file "Library/Port.c"
 25864 ;; Parameters:    Size  Location     Type
 25865 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 25866 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25867 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25868 ;;  pPair           1   40[BANK0 ] enum E6760
 25869 ;;  pDrive          1   41[BANK0 ] enum E6469
 25870 ;; Auto vars:     Size  Location     Type
 25871 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 25872 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25873 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25874 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25875 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25876 ;;  Output          1   44[BANK0 ] enum E6475
 25877 ;;  Pin2            1   43[BANK0 ] enum E6750
 25878 ;;  Pin1            1   42[BANK0 ] enum E6750
 25879 ;; Return value:  Size  Location     Type
 25880 ;;                  1    wreg      enum E6475
 25881 ;; Registers used:
 25882 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25883 ;; Tracked objects:
 25884 ;;		On entry : 0/0
 25885 ;;		On exit  : 0/0
 25886 ;;		Unchanged: 0/0
 25887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25888 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25889 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25891 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25892 ;;Total ram usage:        9 bytes
 25893 ;; Hardware stack levels used:    1
 25894 ;; Hardware stack levels required when called:   11
 25895 ;; This function calls:
 25896 ;;		_PortProperty_Valid
 25897 ;; This function is called by:
 25898 ;;		_Port_CheckQuadType
 25899 ;;		_Port_SetPairType
 25900 ;; This function uses a non-reentrant model
 25901 ;;
 25902                           
 25903                           	psect	text130
 25904  014D2C                     __ptext130:
 25905                           	opt stack 0
 25906  014D2C                     _Port_CheckPairType:
 25907                           	opt stack 15
 25908                           
 25909                           ;Port.c: 114: ePinError Output = ePinErrorState;
 25910                           
 25911                           ; BSR set to: 0
 25912                           ;incstack = 0
 25913  014D2C  0E05               	movlw	5
 25914  014D2E  0100               	movlb	0	; () banked
 25915  014D30  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25916                           
 25917                           ; BSR set to: 0
 25918                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 25919  014D32  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 25920  014D36  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 25921  014D3A  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 25922  014D3E  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 25923                           
 25924                           ; BSR set to: 0
 25925                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 25926  014D42  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25927  014D44  0D02               	mullw	2
 25928  014D46  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 25929                           
 25930                           ; BSR set to: 0
 25931                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 25932  014D4A  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25933  014D4C  0D02               	mullw	2
 25934  014D4E  28F3               	incf	prodl,w,c
 25935  014D50  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 25936                           
 25937                           ; BSR set to: 0
 25938                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 25939  014D52  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25940  014D56  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25941  014D5A  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25942  014D5E  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 25943  014D62  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 25944  014D66  0100               	movlb	0	; () banked
 25945  014D68  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25946  014D6A  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25947  014D6C  A4D8               	btfss	status,2,c
 25948  014D6E  D00C               	goto	l389
 25949                           
 25950                           ; BSR set to: 0
 25951                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 25952  014D70  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25953  014D74  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25954  014D78  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25955  014D7C  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 25956  014D80  ECFF  F0A5         	call	_PortProperty_Valid	;wreg free
 25957  014D84  0100               	movlb	0	; () banked
 25958  014D86  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25959  014D88                     l389:
 25960                           
 25961                           ; BSR set to: 0
 25962                           ;Port.c: 124: return Output;
 25963                           
 25964                           ; BSR set to: 0
 25965  014D88  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25966  014D8A  0012               	return	
 25967  014D8C                     __end_of_Port_CheckPairType:
 25968                           	opt stack 0
 25969                           tosu	equ	0xFFF
 25970                           tosh	equ	0xFFE
 25971                           tosl	equ	0xFFD
 25972                           pclath	equ	0xFFA
 25973                           tblptru	equ	0xFF8
 25974                           tblptrh	equ	0xFF7
 25975                           tblptrl	equ	0xFF6
 25976                           tablat	equ	0xFF5
 25977                           prodh	equ	0xFF4
 25978                           prodl	equ	0xFF3
 25979                           intcon	equ	0xFF2
 25980                           postinc0	equ	0xFEE
 25981                           wreg	equ	0xFE8
 25982                           indf1	equ	0xFE7
 25983                           postdec1	equ	0xFE5
 25984                           fsr1h	equ	0xFE2
 25985                           fsr1l	equ	0xFE1
 25986                           indf2	equ	0xFDF
 25987                           postinc2	equ	0xFDE
 25988                           postdec2	equ	0xFDD
 25989                           plusw2	equ	0xFDB
 25990                           fsr2h	equ	0xFDA
 25991                           fsr2l	equ	0xFD9
 25992                           status	equ	0xFD8
 25993                           
 25994 ;; *************** function _PortProperty_Valid *****************
 25995 ;; Defined at:
 25996 ;;		line 220 in file "Library/Types.c"
 25997 ;; Parameters:    Size  Location     Type
 25998 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 25999 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 26000 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 26001 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 26002 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26003 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 26004 ;;  pPin            1   18[BANK0 ] unsigned char 
 26005 ;; Auto vars:     Size  Location     Type
 26006 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 26007 ;;  Pair            1   37[BANK0 ] enum E6469
 26008 ;; Return value:  Size  Location     Type
 26009 ;;                  1    wreg      enum E6475
 26010 ;; Registers used:
 26011 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26012 ;; Tracked objects:
 26013 ;;		On entry : 0/0
 26014 ;;		On exit  : 0/0
 26015 ;;		Unchanged: 0/0
 26016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26017 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26018 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26019 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26020 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26021 ;;Total ram usage:       23 bytes
 26022 ;; Hardware stack levels used:    1
 26023 ;; Hardware stack levels required when called:   10
 26024 ;; This function calls:
 26025 ;;		_Word_GetPair
 26026 ;; This function is called by:
 26027 ;;		_Port_CheckPairType
 26028 ;;		_Port_SetPinType
 26029 ;; This function uses a non-reentrant model
 26030 ;;
 26031                           
 26032                           	psect	text131
 26033  014BFE                     __ptext131:
 26034                           	opt stack 0
 26035  014BFE                     _PortProperty_Valid:
 26036                           	opt stack 15
 26037                           
 26038                           ;Types.c: 222: ePinDrive Pair;
 26039                           ;Types.c: 223: const ePinError Errors[4][4] =
 26040                           ;Types.c: 224: {
 26041                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 26042                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 26043                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 26044                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 26045                           ;Types.c: 230: };
 26046                           
 26047                           ; BSR set to: 0
 26048                           ;incstack = 0
 26049  014BFE  0EDF               	movlw	low PortProperty_Valid@F6830
 26050  014C00  6EF6               	movwf	tblptrl,c
 26051  014C02                     	if	1	;There is more than 1 active tblptr byte
 26052  014C02  0EFB               	movlw	high PortProperty_Valid@F6830
 26053  014C04  6EF7               	movwf	tblptrh,c
 26054  014C06                     	endif
 26055  014C06                     	if	1	;There are 3 active tblptr bytes
 26056  014C06  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 26057  014C08  6EF8               	movwf	tblptru,c
 26058  014C0A                     	endif
 26059  014C0A  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 26060  014C0E  0E0F               	movlw	15
 26061  014C10                     u9990:
 26062  014C10  0009               	tblrd		*+
 26063  014C12  CFF5 FFDE          	movff	tablat,postinc2
 26064  014C16  06E8               	decf	wreg,f,c
 26065  014C18  E2FB               	bc	u9990
 26066                           
 26067                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 26068  014C1A  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 26069  014C1E  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 26070  014C22  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 26071  014C26  EC18  F0AB         	call	_Word_GetPair	;wreg free
 26072  014C2A  0100               	movlb	0	; () banked
 26073  014C2C  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 26074                           
 26075                           ; BSR set to: 0
 26076                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 26077  014C2E  0E04               	movlw	4
 26078  014C30  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 26079  014C32  D017               	goto	l819
 26080                           
 26081                           ; BSR set to: 0
 26082  014C34  0E04               	movlw	4
 26083  014C36  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 26084  014C38  D014               	goto	l819
 26085                           
 26086                           ; BSR set to: 0
 26087                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 26088  014C3A  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 26089  014C3C  0D04               	mullw	4
 26090  014C3E  0E75               	movlw	low PortProperty_Valid@Errors
 26091  014C40  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 26092  014C42  0E00               	movlw	high PortProperty_Valid@Errors
 26093  014C44  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 26094  014C46  50F3               	movf	prodl,w,c
 26095  014C48  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 26096  014C4A  50F4               	movf	prodh,w,c
 26097  014C4C  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 26098  014C4E  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 26099  014C50  0D01               	mullw	1
 26100  014C52  50F3               	movf	prodl,w,c
 26101  014C54  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 26102  014C56  6ED9               	movwf	fsr2l,c
 26103  014C58  50F4               	movf	prodh,w,c
 26104  014C5A  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 26105  014C5C  6EDA               	movwf	fsr2h,c
 26106  014C5E  50DF               	movf	indf2,w,c
 26107                           
 26108                           ; BSR set to: 0
 26109  014C60  0012               	return	
 26110  014C62                     l819:
 26111                           
 26112                           ; BSR set to: 0
 26113                           ;Types.c: 237: return ePinErrorState;
 26114                           
 26115                           ; BSR set to: 0
 26116  014C62  0E05               	movlw	5
 26117  014C64  0012               	return	
 26118  014C66                     __end_of_PortProperty_Valid:
 26119                           	opt stack 0
 26120                           tosu	equ	0xFFF
 26121                           tosh	equ	0xFFE
 26122                           tosl	equ	0xFFD
 26123                           pclath	equ	0xFFA
 26124                           tblptru	equ	0xFF8
 26125                           tblptrh	equ	0xFF7
 26126                           tblptrl	equ	0xFF6
 26127                           tablat	equ	0xFF5
 26128                           prodh	equ	0xFF4
 26129                           prodl	equ	0xFF3
 26130                           intcon	equ	0xFF2
 26131                           postinc0	equ	0xFEE
 26132                           wreg	equ	0xFE8
 26133                           indf1	equ	0xFE7
 26134                           postdec1	equ	0xFE5
 26135                           fsr1h	equ	0xFE2
 26136                           fsr1l	equ	0xFE1
 26137                           indf2	equ	0xFDF
 26138                           postinc2	equ	0xFDE
 26139                           postdec2	equ	0xFDD
 26140                           plusw2	equ	0xFDB
 26141                           fsr2h	equ	0xFDA
 26142                           fsr2l	equ	0xFD9
 26143                           status	equ	0xFD8
 26144                           
 26145 ;; *************** function _Word_GetPair *****************
 26146 ;; Defined at:
 26147 ;;		line 156 in file "Library/Types.c"
 26148 ;; Parameters:    Size  Location     Type
 26149 ;;  pInput          2   12[BANK0 ] PTR struct Word
 26150 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 26151 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 26152 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 26153 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26154 ;;  pPair           1   14[BANK0 ] unsigned char 
 26155 ;; Auto vars:     Size  Location     Type
 26156 ;;		None
 26157 ;; Return value:  Size  Location     Type
 26158 ;;                  1    wreg      unsigned char 
 26159 ;; Registers used:
 26160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26161 ;; Tracked objects:
 26162 ;;		On entry : 0/0
 26163 ;;		On exit  : 0/0
 26164 ;;		Unchanged: 0/0
 26165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26166 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26169 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26170 ;;Total ram usage:        3 bytes
 26171 ;; Hardware stack levels used:    1
 26172 ;; Hardware stack levels required when called:    9
 26173 ;; This function calls:
 26174 ;;		_Byte_GetPair
 26175 ;; This function is called by:
 26176 ;;		_Port_Init
 26177 ;;		_Port_SetPin
 26178 ;;		_Port_Set
 26179 ;;		_PortProperty_Valid
 26180 ;;		_Port_SetPair
 26181 ;;		_Port_SetQuad
 26182 ;; This function uses a non-reentrant model
 26183 ;;
 26184                           
 26185                           	psect	text132
 26186  015630                     __ptext132:
 26187                           	opt stack 0
 26188  015630                     _Word_GetPair:
 26189                           	opt stack 15
 26190                           
 26191                           ;Types.c: 158: if (pPair >= 4)
 26192                           
 26193                           ; BSR set to: 0
 26194                           ;incstack = 0
 26195  015630  0E03               	movlw	3
 26196  015632  0100               	movlb	0	; () banked
 26197  015634  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 26198  015636  D00C               	goto	l781
 26199                           
 26200                           ; BSR set to: 0
 26201                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 26202  015638  0E01               	movlw	1
 26203  01563A  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 26204  01563C  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 26205  01563E  0E00               	movlw	0
 26206  015640  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 26207  015642  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 26208  015644  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 26209  015646  0FFC               	addlw	252
 26210  015648  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 26211  01564A  ECB6  F0AC         	call	_Byte_GetPair	;wreg free
 26212  01564E  0012               	return	
 26213  015650                     l781:
 26214                           
 26215                           ;Types.c: 160: else
 26216                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 26217  015650  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 26218  015654  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 26219  015658  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 26220  01565C  ECB6  F0AC         	call	_Byte_GetPair	;wreg free
 26221  015660  0012               	return	
 26222  015662                     __end_of_Word_GetPair:
 26223                           	opt stack 0
 26224                           tosu	equ	0xFFF
 26225                           tosh	equ	0xFFE
 26226                           tosl	equ	0xFFD
 26227                           pclath	equ	0xFFA
 26228                           tblptru	equ	0xFF8
 26229                           tblptrh	equ	0xFF7
 26230                           tblptrl	equ	0xFF6
 26231                           tablat	equ	0xFF5
 26232                           prodh	equ	0xFF4
 26233                           prodl	equ	0xFF3
 26234                           intcon	equ	0xFF2
 26235                           postinc0	equ	0xFEE
 26236                           wreg	equ	0xFE8
 26237                           indf1	equ	0xFE7
 26238                           postdec1	equ	0xFE5
 26239                           fsr1h	equ	0xFE2
 26240                           fsr1l	equ	0xFE1
 26241                           indf2	equ	0xFDF
 26242                           postinc2	equ	0xFDE
 26243                           postdec2	equ	0xFDD
 26244                           plusw2	equ	0xFDB
 26245                           fsr2h	equ	0xFDA
 26246                           fsr2l	equ	0xFD9
 26247                           status	equ	0xFD8
 26248                           
 26249 ;; *************** function _Byte_GetPair *****************
 26250 ;; Defined at:
 26251 ;;		line 87 in file "Library/Types.c"
 26252 ;; Parameters:    Size  Location     Type
 26253 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 26254 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26255 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26256 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26257 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26258 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26259 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26260 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26261 ;;		 -> NULL(0), 
 26262 ;;  pPair           1   11[BANK0 ] unsigned char 
 26263 ;; Auto vars:     Size  Location     Type
 26264 ;;		None
 26265 ;; Return value:  Size  Location     Type
 26266 ;;                  1    wreg      unsigned char 
 26267 ;; Registers used:
 26268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26269 ;; Tracked objects:
 26270 ;;		On entry : 0/0
 26271 ;;		On exit  : 0/0
 26272 ;;		Unchanged: 0/0
 26273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26274 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26277 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26278 ;;Total ram usage:        3 bytes
 26279 ;; Hardware stack levels used:    1
 26280 ;; Hardware stack levels required when called:    8
 26281 ;; This function calls:
 26282 ;;		_Byte_GetZone
 26283 ;; This function is called by:
 26284 ;;		_Word_GetPair
 26285 ;; This function uses a non-reentrant model
 26286 ;;
 26287                           
 26288                           	psect	text133
 26289  01596C                     __ptext133:
 26290                           	opt stack 0
 26291  01596C                     _Byte_GetPair:
 26292                           	opt stack 15
 26293                           
 26294                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 26295                           
 26296                           ;incstack = 0
 26297  01596C  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 26298  015970  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 26299  015974  0E04               	movlw	4
 26300  015976  0100               	movlb	0	; () banked
 26301  015978  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 26302  01597A  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 26303  01597E  0E02               	movlw	2
 26304  015980  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 26305  015982  ECD1  F0A3         	call	_Byte_GetZone	;wreg free
 26306  015986  0012               	return	
 26307  015988                     __end_of_Byte_GetPair:
 26308                           	opt stack 0
 26309                           tosu	equ	0xFFF
 26310                           tosh	equ	0xFFE
 26311                           tosl	equ	0xFFD
 26312                           pclath	equ	0xFFA
 26313                           tblptru	equ	0xFF8
 26314                           tblptrh	equ	0xFF7
 26315                           tblptrl	equ	0xFF6
 26316                           tablat	equ	0xFF5
 26317                           prodh	equ	0xFF4
 26318                           prodl	equ	0xFF3
 26319                           intcon	equ	0xFF2
 26320                           postinc0	equ	0xFEE
 26321                           wreg	equ	0xFE8
 26322                           indf1	equ	0xFE7
 26323                           postdec1	equ	0xFE5
 26324                           fsr1h	equ	0xFE2
 26325                           fsr1l	equ	0xFE1
 26326                           indf2	equ	0xFDF
 26327                           postinc2	equ	0xFDE
 26328                           postdec2	equ	0xFDD
 26329                           plusw2	equ	0xFDB
 26330                           fsr2h	equ	0xFDA
 26331                           fsr2l	equ	0xFD9
 26332                           status	equ	0xFD8
 26333                           
 26334 ;; *************** function _Byte_GetZone *****************
 26335 ;; Defined at:
 26336 ;;		line 64 in file "Library/Types.c"
 26337 ;; Parameters:    Size  Location     Type
 26338 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26339 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26340 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26341 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26342 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26343 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26344 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26345 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26346 ;;		 -> NULL(0), 
 26347 ;;  pMax            1    2[BANK0 ] unsigned char 
 26348 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26349 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26350 ;; Auto vars:     Size  Location     Type
 26351 ;;  Output          1    8[BANK0 ] unsigned char 
 26352 ;;  Offset          1    7[BANK0 ] unsigned char 
 26353 ;;  MASK            1    6[BANK0 ] unsigned char 
 26354 ;; Return value:  Size  Location     Type
 26355 ;;                  1    wreg      unsigned char 
 26356 ;; Registers used:
 26357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26358 ;; Tracked objects:
 26359 ;;		On entry : 0/0
 26360 ;;		On exit  : 0/0
 26361 ;;		Unchanged: 0/0
 26362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26363 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26364 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26366 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26367 ;;Total ram usage:        9 bytes
 26368 ;; Hardware stack levels used:    1
 26369 ;; Hardware stack levels required when called:    7
 26370 ;; This function calls:
 26371 ;;		Nothing
 26372 ;; This function is called by:
 26373 ;;		_Byte_GetPair
 26374 ;;		_Byte_GetTriple
 26375 ;;		_Byte_GetQuad
 26376 ;; This function uses a non-reentrant model
 26377 ;;
 26378                           
 26379                           	psect	text134
 26380  0147A2                     __ptext134:
 26381                           	opt stack 0
 26382  0147A2                     _Byte_GetZone:
 26383                           	opt stack 15
 26384                           
 26385                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 26386                           
 26387                           ;incstack = 0
 26388  0147A2  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 26389  0147A6  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 26390  0147AA  0E00               	movlw	low (__mediumconst shr (0+16))
 26391  0147AC  6EF8               	movwf	tblptru,c
 26392  0147AE  0E0F               	movlw	(high __ramtop+-1)
 26393  0147B0  64F7               	cpfsgt	tblptrh,c
 26394  0147B2  D003               	bra	u9957
 26395  0147B4  0008               	tblrd		*
 26396  0147B6  50F5               	movf	tablat,w,c
 26397  0147B8  D005               	bra	u9950
 26398  0147BA                     u9957:
 26399  0147BA  CFF6 FFE9          	movff	tblptrl,fsr0l
 26400  0147BE  CFF7 FFEA          	movff	tblptrh,fsr0h
 26401  0147C2  50EF               	movf	indf0,w,c
 26402  0147C4                     u9950:
 26403  0147C4  0100               	movlb	0	; () banked
 26404  0147C6  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 26405                           
 26406                           ; BSR set to: 0
 26407                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 26408  0147C8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26409  0147CA  0D01               	mullw	1
 26410  0147CC  0EF9               	movlw	low _MASKS
 26411  0147CE  24F3               	addwf	prodl,w,c
 26412  0147D0  6EF6               	movwf	tblptrl,c
 26413  0147D2  0EFB               	movlw	high _MASKS
 26414  0147D4  20F4               	addwfc	prodh,w,c
 26415  0147D6  6EF7               	movwf	tblptrh,c
 26416  0147D8                     	if	1	;There are 3 active tblptr bytes
 26417  0147D8  6AF8               	clrf	tblptru,c
 26418  0147DA  0E00               	movlw	low (__mediumconst shr (0+16))
 26419  0147DC  22F8               	addwfc	tblptru,f,c
 26420  0147DE                     	endif
 26421  0147DE  0008               	tblrd		*
 26422  0147E0  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 26423                           
 26424                           ; BSR set to: 0
 26425                           ;Types.c: 68: UINT8 Offset = 0;
 26426  0147E4  0E00               	movlw	0
 26427  0147E6  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 26428                           
 26429                           ;Types.c: 70: while (pChunk >= pMax)
 26430  0147E8  D003               	goto	l732
 26431  0147EA                     
 26432                           ; BSR set to: 0
 26433                           ;Types.c: 71: {
 26434                           ;Types.c: 72: pChunk -= pMax;
 26435                           
 26436                           ; BSR set to: 0
 26437  0147EA  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26438  0147EC  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 26439                           
 26440                           ; BSR set to: 0
 26441                           ;Types.c: 73: Offset += 1;
 26442  0147EE  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 26443  0147F0                     l732:
 26444                           
 26445                           ; BSR set to: 0
 26446                           
 26447                           ; BSR set to: 0
 26448  0147F0  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26449  0147F2  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 26450  0147F4  B0D8               	btfsc	status,0,c
 26451  0147F6  D7F9               	goto	l733
 26452                           
 26453                           ; BSR set to: 0
 26454                           ;Types.c: 74: }
 26455                           ;Types.c: 75: pChunk *= pChunkSize;
 26456                           
 26457                           ; BSR set to: 0
 26458  0147F8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26459  0147FA  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 26460  0147FC  50F3               	movf	prodl,w,c
 26461  0147FE  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 26462                           
 26463                           ; BSR set to: 0
 26464                           ;Types.c: 76: pChunk += Offset;
 26465  014800  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 26466  014802  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 26467                           
 26468                           ; BSR set to: 0
 26469                           ;Types.c: 78: Output >>= pChunk;
 26470  014804  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 26471  014806  6F65               	movwf	??_Byte_GetZone& (0+255),b
 26472  014808  D002               	goto	u9970
 26473  01480A                     u9975:
 26474  01480A  90D8               	bcf	status,0,c
 26475  01480C  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 26476  01480E                     u9970:
 26477  01480E  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 26478  014810  D7FC               	goto	u9975
 26479                           
 26480                           ;Types.c: 79: Output &= MASK;
 26481  014812  0100               	movlb	0	; () banked
 26482  014814  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 26483  014816  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 26484                           
 26485                           ; BSR set to: 0
 26486                           ;Types.c: 80: return Output;
 26487  014818  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 26488  01481A  0012               	return	
 26489  01481C                     __end_of_Byte_GetZone:
 26490                           	opt stack 0
 26491                           tosu	equ	0xFFF
 26492                           tosh	equ	0xFFE
 26493                           tosl	equ	0xFFD
 26494                           pclath	equ	0xFFA
 26495                           tblptru	equ	0xFF8
 26496                           tblptrh	equ	0xFF7
 26497                           tblptrl	equ	0xFF6
 26498                           tablat	equ	0xFF5
 26499                           prodh	equ	0xFF4
 26500                           prodl	equ	0xFF3
 26501                           intcon	equ	0xFF2
 26502                           indf0	equ	0xFEF
 26503                           postinc0	equ	0xFEE
 26504                           fsr0h	equ	0xFEA
 26505                           fsr0l	equ	0xFE9
 26506                           wreg	equ	0xFE8
 26507                           indf1	equ	0xFE7
 26508                           postdec1	equ	0xFE5
 26509                           fsr1h	equ	0xFE2
 26510                           fsr1l	equ	0xFE1
 26511                           indf2	equ	0xFDF
 26512                           postinc2	equ	0xFDE
 26513                           postdec2	equ	0xFDD
 26514                           plusw2	equ	0xFDB
 26515                           fsr2h	equ	0xFDA
 26516                           fsr2l	equ	0xFD9
 26517                           status	equ	0xFD8
 26518                           
 26519 ;; *************** function _Byte_SetQuad *****************
 26520 ;; Defined at:
 26521 ;;		line 101 in file "Library/Types.c"
 26522 ;; Parameters:    Size  Location     Type
 26523 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 26524 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 26525 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26526 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26527 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26528 ;;		 -> NULL(0), 
 26529 ;;  pQuad           1   13[BANK0 ] unsigned char 
 26530 ;;  pValue          1   14[BANK0 ] unsigned char 
 26531 ;; Auto vars:     Size  Location     Type
 26532 ;;		None
 26533 ;; Return value:  Size  Location     Type
 26534 ;;                  1    wreg      void 
 26535 ;; Registers used:
 26536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26537 ;; Tracked objects:
 26538 ;;		On entry : 0/0
 26539 ;;		On exit  : 0/0
 26540 ;;		Unchanged: 0/0
 26541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26542 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26545 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26546 ;;Total ram usage:        4 bytes
 26547 ;; Hardware stack levels used:    1
 26548 ;; Hardware stack levels required when called:    8
 26549 ;; This function calls:
 26550 ;;		_Byte_SetZone
 26551 ;; This function is called by:
 26552 ;;		_Port_SetQuadType
 26553 ;;		_SPI_Init
 26554 ;;		_SPI_MinSpeed
 26555 ;;		_SPI_MaxSpeed
 26556 ;;		_Port_SetQuad
 26557 ;;		_Word_SetQuad
 26558 ;;		_I2C_Init
 26559 ;; This function uses a non-reentrant model
 26560 ;;
 26561                           
 26562                           	psect	text135
 26563  0158F4                     __ptext135:
 26564                           	opt stack 0
 26565  0158F4                     _Byte_SetQuad:
 26566                           	opt stack 20
 26567                           
 26568                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 26569                           
 26570                           ; BSR set to: 0
 26571                           ;incstack = 0
 26572  0158F4  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 26573  0158F8  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 26574  0158FC  0E02               	movlw	2
 26575  0158FE  0100               	movlb	0	; () banked
 26576  015900  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 26577  015902  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 26578  015906  0E04               	movlw	4
 26579  015908  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 26580  01590A  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 26581  01590E  EC7F  F0A1         	call	_Byte_SetZone	;wreg free
 26582  015912  0012               	return		;funcret
 26583  015914                     __end_of_Byte_SetQuad:
 26584                           	opt stack 0
 26585                           tosu	equ	0xFFF
 26586                           tosh	equ	0xFFE
 26587                           tosl	equ	0xFFD
 26588                           pclath	equ	0xFFA
 26589                           tblptru	equ	0xFF8
 26590                           tblptrh	equ	0xFF7
 26591                           tblptrl	equ	0xFF6
 26592                           tablat	equ	0xFF5
 26593                           prodh	equ	0xFF4
 26594                           prodl	equ	0xFF3
 26595                           intcon	equ	0xFF2
 26596                           indf0	equ	0xFEF
 26597                           postinc0	equ	0xFEE
 26598                           fsr0h	equ	0xFEA
 26599                           fsr0l	equ	0xFE9
 26600                           wreg	equ	0xFE8
 26601                           indf1	equ	0xFE7
 26602                           postdec1	equ	0xFE5
 26603                           fsr1h	equ	0xFE2
 26604                           fsr1l	equ	0xFE1
 26605                           indf2	equ	0xFDF
 26606                           postinc2	equ	0xFDE
 26607                           postdec2	equ	0xFDD
 26608                           plusw2	equ	0xFDB
 26609                           fsr2h	equ	0xFDA
 26610                           fsr2l	equ	0xFD9
 26611                           status	equ	0xFD8
 26612                           
 26613 ;; *************** function _Byte_SetZone *****************
 26614 ;; Defined at:
 26615 ;;		line 47 in file "Library/Types.c"
 26616 ;; Parameters:    Size  Location     Type
 26617 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26618 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 26619 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 26620 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 26621 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 26622 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26623 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26624 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26625 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26626 ;;  pMax            1    2[BANK0 ] unsigned char 
 26627 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26628 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26629 ;;  pValue          1    5[BANK0 ] unsigned char 
 26630 ;; Auto vars:     Size  Location     Type
 26631 ;;  MASK            1   10[BANK0 ] unsigned char 
 26632 ;;  Offset          1    9[BANK0 ] unsigned char 
 26633 ;; Return value:  Size  Location     Type
 26634 ;;                  1    wreg      void 
 26635 ;; Registers used:
 26636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26637 ;; Tracked objects:
 26638 ;;		On entry : 0/0
 26639 ;;		On exit  : 0/0
 26640 ;;		Unchanged: 0/0
 26641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26642 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26644 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26645 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26646 ;;Total ram usage:       11 bytes
 26647 ;; Hardware stack levels used:    1
 26648 ;; Hardware stack levels required when called:    7
 26649 ;; This function calls:
 26650 ;;		Nothing
 26651 ;; This function is called by:
 26652 ;;		_Byte_SetPair
 26653 ;;		_Byte_SetQuad
 26654 ;;		_Byte_SetTriple
 26655 ;; This function uses a non-reentrant model
 26656 ;;
 26657                           
 26658                           	psect	text136
 26659  0142FE                     __ptext136:
 26660                           	opt stack 0
 26661  0142FE                     _Byte_SetZone:
 26662                           	opt stack 19
 26663                           
 26664                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 26665                           
 26666                           ;incstack = 0
 26667  0142FE  0100               	movlb	0	; () banked
 26668  014300  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26669  014302  0D01               	mullw	1
 26670  014304  0EF9               	movlw	low _MASKS
 26671  014306  24F3               	addwf	prodl,w,c
 26672  014308  6EF6               	movwf	tblptrl,c
 26673  01430A  0EFB               	movlw	high _MASKS
 26674  01430C  20F4               	addwfc	prodh,w,c
 26675  01430E  6EF7               	movwf	tblptrh,c
 26676  014310                     	if	1	;There are 3 active tblptr bytes
 26677  014310  6AF8               	clrf	tblptru,c
 26678  014312  0E00               	movlw	low (__mediumconst shr (0+16))
 26679  014314  22F8               	addwfc	tblptru,f,c
 26680  014316                     	endif
 26681  014316  0008               	tblrd		*
 26682  014318  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 26683                           
 26684                           ; BSR set to: 0
 26685                           ;Types.c: 50: UINT8 Offset = 0;
 26686  01431C  0E00               	movlw	0
 26687  01431E  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 26688                           
 26689                           ;Types.c: 52: while (pChunk >= pMax)
 26690  014320  D003               	goto	l726
 26691  014322                     
 26692                           ; BSR set to: 0
 26693                           ;Types.c: 53: {
 26694                           ;Types.c: 54: pChunk -= pMax;
 26695                           
 26696                           ; BSR set to: 0
 26697  014322  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26698  014324  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 26699                           
 26700                           ; BSR set to: 0
 26701                           ;Types.c: 55: Offset += 1;
 26702  014326  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 26703  014328                     l726:
 26704                           
 26705                           ; BSR set to: 0
 26706                           
 26707                           ; BSR set to: 0
 26708  014328  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26709  01432A  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 26710  01432C  B0D8               	btfsc	status,0,c
 26711  01432E  D7F9               	goto	l727
 26712                           
 26713                           ; BSR set to: 0
 26714                           ;Types.c: 56: }
 26715                           ;Types.c: 57: pChunk *= pChunkSize;
 26716                           
 26717                           ; BSR set to: 0
 26718  014330  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26719  014332  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 26720  014334  50F3               	movf	prodl,w,c
 26721  014336  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 26722                           
 26723                           ; BSR set to: 0
 26724                           ;Types.c: 58: pChunk += Offset;
 26725  014338  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 26726  01433A  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 26727                           
 26728                           ; BSR set to: 0
 26729                           ;Types.c: 60: pValue &= MASK;
 26730  01433C  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 26731  01433E  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 26732                           
 26733                           ; BSR set to: 0
 26734                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 26735  014340  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26736  014344  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 26737  014348  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26738  01434A  D002               	goto	u10054
 26739  01434C                     u10055:
 26740  01434C  90D8               	bcf	status,0,c
 26741  01434E  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26742  014350                     u10054:
 26743  014350  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26744  014352  D7FC               	goto	u10055
 26745  014354  0100               	movlb	0	; () banked
 26746  014356  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26747  014358  0AFF               	xorlw	255
 26748  01435A  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 26749  01435C  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26750  014360  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26751  014364  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 26752  014366  16DF               	andwf	indf2,f,c
 26753                           
 26754                           ; BSR set to: 0
 26755                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 26756  014368  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26757  01436C  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 26758  014370  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26759  014372  D002               	goto	u10064
 26760  014374                     u10065:
 26761  014374  90D8               	bcf	status,0,c
 26762  014376  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26763  014378                     u10064:
 26764  014378  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26765  01437A  D7FC               	goto	u10065
 26766  01437C  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26767  014380  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26768  014384  0100               	movlb	0	; () banked
 26769  014386  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26770  014388  12DF               	iorwf	indf2,f,c
 26771                           
 26772                           ; BSR set to: 0
 26773  01438A  0012               	return		;funcret
 26774  01438C                     __end_of_Byte_SetZone:
 26775                           	opt stack 0
 26776                           tosu	equ	0xFFF
 26777                           tosh	equ	0xFFE
 26778                           tosl	equ	0xFFD
 26779                           pclath	equ	0xFFA
 26780                           tblptru	equ	0xFF8
 26781                           tblptrh	equ	0xFF7
 26782                           tblptrl	equ	0xFF6
 26783                           tablat	equ	0xFF5
 26784                           prodh	equ	0xFF4
 26785                           prodl	equ	0xFF3
 26786                           intcon	equ	0xFF2
 26787                           indf0	equ	0xFEF
 26788                           postinc0	equ	0xFEE
 26789                           fsr0h	equ	0xFEA
 26790                           fsr0l	equ	0xFE9
 26791                           wreg	equ	0xFE8
 26792                           indf1	equ	0xFE7
 26793                           postdec1	equ	0xFE5
 26794                           fsr1h	equ	0xFE2
 26795                           fsr1l	equ	0xFE1
 26796                           indf2	equ	0xFDF
 26797                           postinc2	equ	0xFDE
 26798                           postdec2	equ	0xFDD
 26799                           plusw2	equ	0xFDB
 26800                           fsr2h	equ	0xFDA
 26801                           fsr2l	equ	0xFD9
 26802                           status	equ	0xFD8
 26803                           
 26804 ;; *************** function _Console_Init *****************
 26805 ;; Defined at:
 26806 ;;		line 157 in file "Library/Console.c"
 26807 ;; Parameters:    Size  Location     Type
 26808 ;;		None
 26809 ;; Auto vars:     Size  Location     Type
 26810 ;;  y               1    3[BANK0 ] unsigned char 
 26811 ;;  x               1    2[BANK0 ] unsigned char 
 26812 ;; Return value:  Size  Location     Type
 26813 ;;                  1    wreg      void 
 26814 ;; Registers used:
 26815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26816 ;; Tracked objects:
 26817 ;;		On entry : 0/0
 26818 ;;		On exit  : 0/0
 26819 ;;		Unchanged: 0/0
 26820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26822 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26823 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26824 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26825 ;;Total ram usage:        4 bytes
 26826 ;; Hardware stack levels used:    1
 26827 ;; Hardware stack levels required when called:    7
 26828 ;; This function calls:
 26829 ;;		Nothing
 26830 ;; This function is called by:
 26831 ;;		_main
 26832 ;; This function uses a non-reentrant model
 26833 ;;
 26834                           
 26835                           	psect	text137
 26836  014AC4                     __ptext137:
 26837                           	opt stack 0
 26838  014AC4                     _Console_Init:
 26839                           	opt stack 23
 26840                           
 26841                           ;Console.c: 160: lBufferX = 0;
 26842                           
 26843                           ; BSR set to: 0
 26844                           ;incstack = 0
 26845  014AC4  0E00               	movlw	0
 26846  014AC6  6E45               	movwf	_lBufferX,c
 26847                           
 26848                           ;Console.c: 161: lBufferY = 0;
 26849  014AC8  0E00               	movlw	0
 26850  014ACA  0100               	movlb	0	; () banked
 26851  014ACC  6FFF               	movwf	_lBufferY& (0+255),b
 26852                           
 26853                           ;Console.c: 163: UINT8 x, y;
 26854                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26855  014ACE  0E00               	movlw	0
 26856  014AD0  6F62               	movwf	Console_Init@x& (0+255),b
 26857  014AD2                     l15655:
 26858                           
 26859                           ; BSR set to: 0
 26860  014AD2  0E13               	movlw	19
 26861  014AD4  6562               	cpfsgt	Console_Init@x& (0+255),b
 26862  014AD6  D001               	goto	l976
 26863  014AD8  0012               	return	
 26864  014ADA                     l976:
 26865                           
 26866                           ; BSR set to: 0
 26867                           ;Console.c: 165: {
 26868                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 26869                           
 26870                           ; BSR set to: 0
 26871  014ADA  0E00               	movlw	0
 26872  014ADC  6F63               	movwf	Console_Init@y& (0+255),b
 26873  014ADE                     l15661:
 26874                           
 26875                           ; BSR set to: 0
 26876  014ADE  0E0E               	movlw	14
 26877  014AE0  6563               	cpfsgt	Console_Init@y& (0+255),b
 26878  014AE2  D001               	goto	l978
 26879  014AE4  D022               	goto	u13080
 26880  014AE6                     l978:
 26881                           
 26882                           ; BSR set to: 0
 26883                           ;Console.c: 167: {
 26884                           ;Console.c: 168: lBuffer[y][x] = '\0';
 26885                           
 26886                           ; BSR set to: 0
 26887  014AE6  5163               	movf	Console_Init@y& (0+255),w,b
 26888  014AE8  0D14               	mullw	20
 26889  014AEA  0E36               	movlw	low _lBuffer
 26890  014AEC  6F60               	movwf	??_Console_Init& (0+255),b
 26891  014AEE  0E03               	movlw	high _lBuffer
 26892  014AF0  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 26893  014AF2  50F3               	movf	prodl,w,c
 26894  014AF4  2760               	addwf	??_Console_Init& (0+255),f,b
 26895  014AF6  50F4               	movf	prodh,w,c
 26896  014AF8  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 26897  014AFA  5162               	movf	Console_Init@x& (0+255),w,b
 26898  014AFC  0D01               	mullw	1
 26899  014AFE  50F3               	movf	prodl,w,c
 26900  014B00  2560               	addwf	??_Console_Init& (0+255),w,b
 26901  014B02  6ED9               	movwf	fsr2l,c
 26902  014B04  50F4               	movf	prodh,w,c
 26903  014B06  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 26904  014B08  6EDA               	movwf	fsr2h,c
 26905  014B0A  0E00               	movlw	0
 26906  014B0C  6EDF               	movwf	indf2,c
 26907                           
 26908                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 26909  014B0E  5163               	movf	Console_Init@y& (0+255),w,b
 26910  014B10  0D02               	mullw	2
 26911  014B12  0E28               	movlw	low _lCBuffer
 26912  014B14  24F3               	addwf	prodl,w,c
 26913  014B16  6ED9               	movwf	fsr2l,c
 26914  014B18  0E02               	movlw	high _lCBuffer
 26915  014B1A  20F4               	addwfc	prodh,w,c
 26916  014B1C  6EDA               	movwf	fsr2h,c
 26917  014B1E  0EFF               	movlw	255
 26918  014B20  6EDE               	movwf	postinc2,c
 26919  014B22  0EFF               	movlw	255
 26920  014B24  6EDD               	movwf	postdec2,c
 26921                           
 26922                           ; BSR set to: 0
 26923  014B26  2B63               	incf	Console_Init@y& (0+255),f,b
 26924  014B28  D7DA               	goto	l15661
 26925  014B2A                     u13080:
 26926                           
 26927                           ; BSR set to: 0
 26928                           
 26929                           ; BSR set to: 0
 26930  014B2A  2B62               	incf	Console_Init@x& (0+255),f,b
 26931  014B2C  D7D2               	goto	l15655
 26932  014B2E                     __end_of_Console_Init:
 26933                           	opt stack 0
 26934                           tosu	equ	0xFFF
 26935                           tosh	equ	0xFFE
 26936                           tosl	equ	0xFFD
 26937                           pclath	equ	0xFFA
 26938                           tblptru	equ	0xFF8
 26939                           tblptrh	equ	0xFF7
 26940                           tblptrl	equ	0xFF6
 26941                           tablat	equ	0xFF5
 26942                           prodh	equ	0xFF4
 26943                           prodl	equ	0xFF3
 26944                           intcon	equ	0xFF2
 26945                           indf0	equ	0xFEF
 26946                           postinc0	equ	0xFEE
 26947                           fsr0h	equ	0xFEA
 26948                           fsr0l	equ	0xFE9
 26949                           wreg	equ	0xFE8
 26950                           indf1	equ	0xFE7
 26951                           postdec1	equ	0xFE5
 26952                           fsr1h	equ	0xFE2
 26953                           fsr1l	equ	0xFE1
 26954                           indf2	equ	0xFDF
 26955                           postinc2	equ	0xFDE
 26956                           postdec2	equ	0xFDD
 26957                           plusw2	equ	0xFDB
 26958                           fsr2h	equ	0xFDA
 26959                           fsr2l	equ	0xFD9
 26960                           status	equ	0xFD8
 26961                           
 26962 ;; *************** function _ISR_Function *****************
 26963 ;; Defined at:
 26964 ;;		line 38 in file "Library/ISR.c"
 26965 ;; Parameters:    Size  Location     Type
 26966 ;;		None
 26967 ;; Auto vars:     Size  Location     Type
 26968 ;;		None
 26969 ;; Return value:  Size  Location     Type
 26970 ;;                  1    wreg      void 
 26971 ;; Registers used:
 26972 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26973 ;; Tracked objects:
 26974 ;;		On entry : 0/0
 26975 ;;		On exit  : 0/0
 26976 ;;		Unchanged: 0/0
 26977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26980 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26981 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26982 ;;Total ram usage:       18 bytes
 26983 ;; Hardware stack levels used:    1
 26984 ;; Hardware stack levels required when called:    6
 26985 ;; This function calls:
 26986 ;;		_Timer0_ISR
 26987 ;; This function is called by:
 26988 ;;		Interrupt level 2
 26989 ;; This function uses a non-reentrant model
 26990 ;;
 26991                           
 26992                           	psect	intcode
 26993  001408                     __pintcode:
 26994                           	opt stack 0
 26995  001408                     _ISR_Function:
 26996                           	opt stack 14
 26997                           
 26998                           ; BSR set to: 0
 26999                           ;incstack = 0
 27000  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27001  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 27002  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 27003  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 27004  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 27005  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 27006  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 27007  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 27008  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 27009  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 27010  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 27011  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 27012  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 27013  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 27014  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 27015  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 27016  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 27017  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 27018  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 27019                           
 27020                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 27021  001452  92F2               	bcf	intcon,1,c	;volatile
 27022                           
 27023                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 27024  001454  B4F2               	btfsc	intcon,2,c	;volatile
 27025  001456  AAF2               	btfss	intcon,5,c	;volatile
 27026  001458  D002               	goto	i2l1590
 27027                           
 27028                           ;ISR.c: 68: Timer0_ISR();
 27029  00145A  ECFE  F0AB         	call	_Timer0_ISR	;wreg free
 27030  00145E                     i2l1590:
 27031  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 27032  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 27033  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 27034  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 27035  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 27036  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 27037  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 27038  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 27039  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 27040  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 27041  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 27042  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 27043  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 27044  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 27045  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 27046  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 27047  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 27048  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 27049  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27050  0014A8  0011               	retfie		f
 27051  0014AA                     __end_of_ISR_Function:
 27052                           	opt stack 0
 27053                           tosu	equ	0xFFF
 27054                           tosh	equ	0xFFE
 27055                           tosl	equ	0xFFD
 27056                           pclatu	equ	0xFFB
 27057                           pclath	equ	0xFFA
 27058                           tblptru	equ	0xFF8
 27059                           tblptrh	equ	0xFF7
 27060                           tblptrl	equ	0xFF6
 27061                           tablat	equ	0xFF5
 27062                           prodh	equ	0xFF4
 27063                           prodl	equ	0xFF3
 27064                           intcon	equ	0xFF2
 27065                           indf0	equ	0xFEF
 27066                           postinc0	equ	0xFEE
 27067                           fsr0h	equ	0xFEA
 27068                           fsr0l	equ	0xFE9
 27069                           wreg	equ	0xFE8
 27070                           indf1	equ	0xFE7
 27071                           postdec1	equ	0xFE5
 27072                           fsr1h	equ	0xFE2
 27073                           fsr1l	equ	0xFE1
 27074                           indf2	equ	0xFDF
 27075                           postinc2	equ	0xFDE
 27076                           postdec2	equ	0xFDD
 27077                           plusw2	equ	0xFDB
 27078                           fsr2h	equ	0xFDA
 27079                           fsr2l	equ	0xFD9
 27080                           status	equ	0xFD8
 27081                           
 27082 ;; *************** function _Timer0_ISR *****************
 27083 ;; Defined at:
 27084 ;;		line 94 in file "Library/Timer0.c"
 27085 ;; Parameters:    Size  Location     Type
 27086 ;;		None
 27087 ;; Auto vars:     Size  Location     Type
 27088 ;;		None
 27089 ;; Return value:  Size  Location     Type
 27090 ;;                  1    wreg      void 
 27091 ;; Registers used:
 27092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27093 ;; Tracked objects:
 27094 ;;		On entry : 0/0
 27095 ;;		On exit  : 0/0
 27096 ;;		Unchanged: 0/0
 27097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27102 ;;Total ram usage:        0 bytes
 27103 ;; Hardware stack levels used:    1
 27104 ;; Hardware stack levels required when called:    5
 27105 ;; This function calls:
 27106 ;;		Absolute function
 27107 ;;		i2_Motor_Step
 27108 ;;		i2_Timer0_Stop
 27109 ;; This function is called by:
 27110 ;;		_ISR_Function
 27111 ;; This function uses a non-reentrant model
 27112 ;;
 27113                           
 27114                           	psect	text139
 27115  0157FC                     __ptext139:
 27116                           	opt stack 0
 27117  0157FC                     _Timer0_ISR:
 27118                           	opt stack 14
 27119                           
 27120                           ;Timer0.c: 96: Timer0_Stop();
 27121                           
 27122                           ;incstack = 0
 27123  0157FC  ECCE  F0AD         	call	i2_Timer0_Stop	;wreg free
 27124                           
 27125                           ;Timer0.c: 99: if (gISR != 0)
 27126  015800  0101               	movlb	1	; () banked
 27127  015802  5108               	movf	_gISR& (0+255),w,b
 27128  015804  1109               	iorwf	(_gISR+1)& (0+255),w,b
 27129  015806  110A               	iorwf	(_gISR+2)& (0+255),w,b
 27130  015808  B4D8               	btfsc	status,2,c
 27131  01580A  0012               	return	
 27132                           
 27133                           ; BSR set to: 1
 27134                           ;Timer0.c: 100: gISR();
 27135  01580C  D801               	call	i2u1459_48
 27136  01580E  0012               	return	
 27137  015810                     i2u1459_48:
 27138  015810  0005               	push	
 27139  015812  6EFA               	movwf	pclath,c
 27140  015814  5108               	movf	_gISR& (0+255),w,b
 27141  015816  6EFD               	movwf	tosl,c
 27142  015818  5109               	movf	(_gISR+1)& (0+255),w,b
 27143  01581A  6EFE               	movwf	tosh,c
 27144  01581C  510A               	movf	(_gISR+2)& (0+255),w,b
 27145  01581E  6EFF               	movwf	tosu,c
 27146  015820  50FA               	movf	pclath,w,c
 27147  015822  0012               	return		;indir
 27148  015824                     __end_of_Timer0_ISR:
 27149                           	opt stack 0
 27150                           tosu	equ	0xFFF
 27151                           tosh	equ	0xFFE
 27152                           tosl	equ	0xFFD
 27153                           pclatu	equ	0xFFB
 27154                           pclath	equ	0xFFA
 27155                           tblptru	equ	0xFF8
 27156                           tblptrh	equ	0xFF7
 27157                           tblptrl	equ	0xFF6
 27158                           tablat	equ	0xFF5
 27159                           prodh	equ	0xFF4
 27160                           prodl	equ	0xFF3
 27161                           intcon	equ	0xFF2
 27162                           indf0	equ	0xFEF
 27163                           postinc0	equ	0xFEE
 27164                           fsr0h	equ	0xFEA
 27165                           fsr0l	equ	0xFE9
 27166                           wreg	equ	0xFE8
 27167                           indf1	equ	0xFE7
 27168                           postdec1	equ	0xFE5
 27169                           fsr1h	equ	0xFE2
 27170                           fsr1l	equ	0xFE1
 27171                           indf2	equ	0xFDF
 27172                           postinc2	equ	0xFDE
 27173                           postdec2	equ	0xFDD
 27174                           plusw2	equ	0xFDB
 27175                           fsr2h	equ	0xFDA
 27176                           fsr2l	equ	0xFD9
 27177                           status	equ	0xFD8
 27178                           
 27179 ;; *************** function i2_Motor_Step *****************
 27180 ;; Defined at:
 27181 ;;		line 75 in file "Library/Motor.c"
 27182 ;; Parameters:    Size  Location     Type
 27183 ;;		None
 27184 ;; Auto vars:     Size  Location     Type
 27185 ;;		None
 27186 ;; Return value:  Size  Location     Type
 27187 ;;                  1    wreg      void 
 27188 ;; Registers used:
 27189 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27190 ;; Tracked objects:
 27191 ;;		On entry : 0/0
 27192 ;;		On exit  : 0/0
 27193 ;;		Unchanged: 0/0
 27194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27198 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27199 ;;Total ram usage:        2 bytes
 27200 ;; Hardware stack levels used:    1
 27201 ;; Hardware stack levels required when called:    4
 27202 ;; This function calls:
 27203 ;;		i2_MXK_Queue
 27204 ;;		i2_MXK_Release
 27205 ;;		i2_MXK_SwitchTo
 27206 ;;		i2_Port_SetPin
 27207 ;;		i2_Timer0_Restart
 27208 ;;		i2_Timer0_Stop
 27209 ;; This function is called by:
 27210 ;; This function uses a non-reentrant model
 27211 ;;
 27212                           
 27213                           	psect	text140
 27214  01393A                     __ptext140:
 27215                           	opt stack 0
 27216  01393A                     i2_Motor_Step:
 27217                           	opt stack 14
 27218                           
 27219                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 27220                           
 27221                           ;incstack = 0
 27222  01393A  0100               	movlb	0	; () banked
 27223  01393C  EE20 F004          	lfsr	2,4
 27224  013940  51FD               	movf	_lMotor& (0+255),w,b
 27225  013942  26D9               	addwf	fsr2l,f,c
 27226  013944  51FE               	movf	(_lMotor+1)& (0+255),w,b
 27227  013946  22DA               	addwfc	fsr2h,f,c
 27228  013948  50DF               	movf	indf2,w,c
 27229  01394A  ECE3  F0AA         	call	i2_MXK_SwitchTo
 27230  01394E  0900               	iorlw	0
 27231  013950  B4D8               	btfsc	status,2,c
 27232  013952  D06A               	goto	i2l1627
 27233                           
 27234                           ;Motor.c: 78: {
 27235                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 27236  013954  C0FD  FFD9         	movff	_lMotor,fsr2l
 27237  013958  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27238  01395C  50DE               	movf	postinc2,w,c
 27239  01395E  10DE               	iorwf	postinc2,w,c
 27240  013960  B4D8               	btfsc	status,2,c
 27241  013962  D05D               	goto	i2l1628
 27242                           
 27243                           ;Motor.c: 80: {
 27244                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 27245  013964  C0FD  FFD9         	movff	_lMotor,fsr2l
 27246  013968  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27247  01396C  0E01               	movlw	1
 27248  01396E  BEDB               	btfsc	plusw2,7,c
 27249  013970  D022               	goto	i2l1629
 27250  013972  0E01               	movlw	1
 27251  013974  50DB               	movf	plusw2,w,c
 27252  013976  E103               	bnz	i2u812_40
 27253  013978  04DE               	decf	postinc2,w,c
 27254  01397A  A0D8               	btfss	status,0,c
 27255  01397C  D01C               	goto	i2l1629
 27256  01397E                     i2u812_40:
 27257                           
 27258                           ;Motor.c: 83: {
 27259                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 27260  01397E  C0FD  FFD9         	movff	_lMotor,fsr2l
 27261  013982  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27262  013986  28DE               	incf	postinc2,w,c
 27263  013988  E104               	bnz	i2u813_40
 27264  01398A  0E7F               	movlw	127
 27265  01398C  18DE               	xorwf	postinc2,w,c
 27266  01398E  B4D8               	btfsc	status,2,c
 27267  013990  D007               	goto	i2l1630
 27268  013992                     i2u813_40:
 27269                           
 27270                           ;Motor.c: 85: lMotor->mDelta --;
 27271  013992  C0FD  FFD9         	movff	_lMotor,fsr2l
 27272  013996  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27273  01399A  06DE               	decf	postinc2,f,c
 27274  01399C  0E00               	movlw	0
 27275  01399E  5ADD               	subwfb	postdec2,f,c
 27276  0139A0                     i2l1630:
 27277                           
 27278                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 27279  0139A0  0E81               	movlw	low _PortE
 27280  0139A2  6E10               	movwf	i2Port_SetPin@pInput,c
 27281  0139A4  0E01               	movlw	high _PortE
 27282  0139A6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27283  0139A8  0E00               	movlw	0
 27284  0139AA  6E12               	movwf	i2Port_SetPin@pPin,c
 27285  0139AC  0E01               	movlw	1
 27286  0139AE  6E13               	movwf	i2Port_SetPin@pValue,c
 27287  0139B0  EC0F  F09F         	call	i2_Port_SetPin	;wreg free
 27288                           
 27289                           ;Motor.c: 88: }
 27290  0139B4  D01B               	goto	i2l1631
 27291  0139B6                     i2l1629:
 27292                           
 27293                           ;Motor.c: 89: else
 27294                           ;Motor.c: 90: {
 27295                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 27296  0139B6  C0FD  FFD9         	movff	_lMotor,fsr2l
 27297  0139BA  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27298  0139BE  04DE               	decf	postinc2,w,c
 27299  0139C0  E104               	bnz	i2u814_40
 27300  0139C2  0E80               	movlw	128
 27301  0139C4  18DE               	xorwf	postinc2,w,c
 27302  0139C6  B4D8               	btfsc	status,2,c
 27303  0139C8  D007               	goto	i2l1632
 27304  0139CA                     i2u814_40:
 27305                           
 27306                           ;Motor.c: 92: lMotor->mDelta ++;
 27307  0139CA  C0FD  FFD9         	movff	_lMotor,fsr2l
 27308  0139CE  C0FE  FFDA         	movff	_lMotor+1,fsr2h
 27309  0139D2  2ADE               	incf	postinc2,f,c
 27310  0139D4  0E00               	movlw	0
 27311  0139D6  22DD               	addwfc	postdec2,f,c
 27312  0139D8                     i2l1632:
 27313                           
 27314                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 27315  0139D8  0E81               	movlw	low _PortE
 27316  0139DA  6E10               	movwf	i2Port_SetPin@pInput,c
 27317  0139DC  0E01               	movlw	high _PortE
 27318  0139DE  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27319  0139E0  0E00               	movlw	0
 27320  0139E2  6E12               	movwf	i2Port_SetPin@pPin,c
 27321  0139E4  0E00               	movlw	0
 27322  0139E6  6E13               	movwf	i2Port_SetPin@pValue,c
 27323  0139E8  EC0F  F09F         	call	i2_Port_SetPin	;wreg free
 27324  0139EC                     i2l1631:
 27325                           
 27326                           ;Motor.c: 95: }
 27327                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 27328  0139EC  0E81               	movlw	low _PortE
 27329  0139EE  6E10               	movwf	i2Port_SetPin@pInput,c
 27330  0139F0  0E01               	movlw	high _PortE
 27331  0139F2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27332  0139F4  0E01               	movlw	1
 27333  0139F6  6E12               	movwf	i2Port_SetPin@pPin,c
 27334  0139F8  0E01               	movlw	1
 27335  0139FA  6E13               	movwf	i2Port_SetPin@pValue,c
 27336  0139FC  EC0F  F09F         	call	i2_Port_SetPin	;wreg free
 27337                           
 27338                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 27339  013A00  0E81               	movlw	low _PortE
 27340  013A02  6E10               	movwf	i2Port_SetPin@pInput,c
 27341  013A04  0E01               	movlw	high _PortE
 27342  013A06  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27343  013A08  0E01               	movlw	1
 27344  013A0A  6E12               	movwf	i2Port_SetPin@pPin,c
 27345  013A0C  0E00               	movlw	0
 27346  013A0E  6E13               	movwf	i2Port_SetPin@pValue,c
 27347  013A10  EC0F  F09F         	call	i2_Port_SetPin	;wreg free
 27348                           
 27349                           ;Motor.c: 101: MXK_Release();
 27350  013A14  ECD1  F0AD         	call	i2_MXK_Release	;wreg free
 27351                           
 27352                           ;Motor.c: 102: Timer0_Restart();
 27353  013A18  ECA8  F0AD         	call	i2_Timer0_Restart	;wreg free
 27354                           
 27355                           ;Motor.c: 103: return;
 27356  013A1C  0012               	return	
 27357  013A1E                     i2l1628:
 27358                           
 27359                           ;Motor.c: 104: }
 27360                           ;Motor.c: 105: MXK_Release();
 27361  013A1E  ECD1  F0AD         	call	i2_MXK_Release	;wreg free
 27362                           
 27363                           ;Motor.c: 106: Timer0_Stop();
 27364  013A22  ECCE  F0AD         	call	i2_Timer0_Stop	;wreg free
 27365                           
 27366                           ;Motor.c: 107: return;
 27367  013A26  0012               	return	
 27368  013A28                     i2l1627:
 27369                           
 27370                           ;Motor.c: 108: }
 27371                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 27372  013A28  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 27373  013A2C  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 27374  013A30  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 27375  013A34  EC9B  F0AD         	call	i2_MXK_Queue	;wreg free
 27376  013A38  0012               	return		;funcret
 27377  013A3A                     __end_ofi2_Motor_Step:
 27378                           	opt stack 0
 27379                           tosu	equ	0xFFF
 27380                           tosh	equ	0xFFE
 27381                           tosl	equ	0xFFD
 27382                           pclatu	equ	0xFFB
 27383                           pclath	equ	0xFFA
 27384                           tblptru	equ	0xFF8
 27385                           tblptrh	equ	0xFF7
 27386                           tblptrl	equ	0xFF6
 27387                           tablat	equ	0xFF5
 27388                           prodh	equ	0xFF4
 27389                           prodl	equ	0xFF3
 27390                           intcon	equ	0xFF2
 27391                           indf0	equ	0xFEF
 27392                           postinc0	equ	0xFEE
 27393                           fsr0h	equ	0xFEA
 27394                           fsr0l	equ	0xFE9
 27395                           wreg	equ	0xFE8
 27396                           indf1	equ	0xFE7
 27397                           postdec1	equ	0xFE5
 27398                           fsr1h	equ	0xFE2
 27399                           fsr1l	equ	0xFE1
 27400                           indf2	equ	0xFDF
 27401                           postinc2	equ	0xFDE
 27402                           postdec2	equ	0xFDD
 27403                           plusw2	equ	0xFDB
 27404                           fsr2h	equ	0xFDA
 27405                           fsr2l	equ	0xFD9
 27406                           status	equ	0xFD8
 27407                           
 27408 ;; *************** function i2_Timer0_Stop *****************
 27409 ;; Defined at:
 27410 ;;		line 89 in file "Library/Timer0.c"
 27411 ;; Parameters:    Size  Location     Type
 27412 ;;		None
 27413 ;; Auto vars:     Size  Location     Type
 27414 ;;		None
 27415 ;; Return value:  Size  Location     Type
 27416 ;;                  1    wreg      void 
 27417 ;; Registers used:
 27418 ;;		None
 27419 ;; Tracked objects:
 27420 ;;		On entry : 0/0
 27421 ;;		On exit  : 0/0
 27422 ;;		Unchanged: 0/0
 27423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27428 ;;Total ram usage:        0 bytes
 27429 ;; Hardware stack levels used:    1
 27430 ;; This function calls:
 27431 ;;		Nothing
 27432 ;; This function is called by:
 27433 ;;		_Timer0_ISR
 27434 ;;		i2_Motor_Step
 27435 ;; This function uses a non-reentrant model
 27436 ;;
 27437                           
 27438                           	psect	text141
 27439  015B9C                     __ptext141:
 27440                           	opt stack 0
 27441  015B9C                     i2_Timer0_Stop:
 27442                           	opt stack 18
 27443                           
 27444                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 27445                           
 27446                           ;incstack = 0
 27447  015B9C  9AF2               	bcf	intcon,5,c	;volatile
 27448                           
 27449                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 27450  015B9E  94F2               	bcf	intcon,2,c	;volatile
 27451  015BA0  0012               	return		;funcret
 27452  015BA2                     __end_ofi2_Timer0_Stop:
 27453                           	opt stack 0
 27454                           tosu	equ	0xFFF
 27455                           tosh	equ	0xFFE
 27456                           tosl	equ	0xFFD
 27457                           pclatu	equ	0xFFB
 27458                           pclath	equ	0xFFA
 27459                           tblptru	equ	0xFF8
 27460                           tblptrh	equ	0xFF7
 27461                           tblptrl	equ	0xFF6
 27462                           tablat	equ	0xFF5
 27463                           prodh	equ	0xFF4
 27464                           prodl	equ	0xFF3
 27465                           intcon	equ	0xFF2
 27466                           indf0	equ	0xFEF
 27467                           postinc0	equ	0xFEE
 27468                           fsr0h	equ	0xFEA
 27469                           fsr0l	equ	0xFE9
 27470                           wreg	equ	0xFE8
 27471                           indf1	equ	0xFE7
 27472                           postdec1	equ	0xFE5
 27473                           fsr1h	equ	0xFE2
 27474                           fsr1l	equ	0xFE1
 27475                           indf2	equ	0xFDF
 27476                           postinc2	equ	0xFDE
 27477                           postdec2	equ	0xFDD
 27478                           plusw2	equ	0xFDB
 27479                           fsr2h	equ	0xFDA
 27480                           fsr2l	equ	0xFD9
 27481                           status	equ	0xFD8
 27482                           
 27483 ;; *************** function i2_Timer0_Restart *****************
 27484 ;; Defined at:
 27485 ;;		line 83 in file "Library/Timer0.c"
 27486 ;; Parameters:    Size  Location     Type
 27487 ;;		None
 27488 ;; Auto vars:     Size  Location     Type
 27489 ;;		None
 27490 ;; Return value:  Size  Location     Type
 27491 ;;                  1    wreg      void 
 27492 ;; Registers used:
 27493 ;;		None
 27494 ;; Tracked objects:
 27495 ;;		On entry : 0/0
 27496 ;;		On exit  : 0/0
 27497 ;;		Unchanged: 0/0
 27498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27503 ;;Total ram usage:        0 bytes
 27504 ;; Hardware stack levels used:    1
 27505 ;; This function calls:
 27506 ;;		Nothing
 27507 ;; This function is called by:
 27508 ;;		i2_Motor_Step
 27509 ;; This function uses a non-reentrant model
 27510 ;;
 27511                           
 27512                           	psect	text142
 27513  015B50                     __ptext142:
 27514                           	opt stack 0
 27515  015B50                     i2_Timer0_Restart:
 27516                           	opt stack 17
 27517                           
 27518                           ;Timer0.c: 85: TMR0 = COUNTER;
 27519                           
 27520                           ;incstack = 0
 27521  015B50  C038  FFD6         	movff	_COUNTER,4054	;volatile
 27522  015B54  C039  FFD7         	movff	_COUNTER+1,4055	;volatile
 27523                           
 27524                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 27525  015B58  8AF2               	bsf	intcon,5,c	;volatile
 27526  015B5A  0012               	return		;funcret
 27527  015B5C                     __end_ofi2_Timer0_Restart:
 27528                           	opt stack 0
 27529                           tosu	equ	0xFFF
 27530                           tosh	equ	0xFFE
 27531                           tosl	equ	0xFFD
 27532                           pclatu	equ	0xFFB
 27533                           pclath	equ	0xFFA
 27534                           tblptru	equ	0xFF8
 27535                           tblptrh	equ	0xFF7
 27536                           tblptrl	equ	0xFF6
 27537                           tablat	equ	0xFF5
 27538                           prodh	equ	0xFF4
 27539                           prodl	equ	0xFF3
 27540                           intcon	equ	0xFF2
 27541                           indf0	equ	0xFEF
 27542                           postinc0	equ	0xFEE
 27543                           fsr0h	equ	0xFEA
 27544                           fsr0l	equ	0xFE9
 27545                           wreg	equ	0xFE8
 27546                           indf1	equ	0xFE7
 27547                           postdec1	equ	0xFE5
 27548                           fsr1h	equ	0xFE2
 27549                           fsr1l	equ	0xFE1
 27550                           indf2	equ	0xFDF
 27551                           postinc2	equ	0xFDE
 27552                           postdec2	equ	0xFDD
 27553                           plusw2	equ	0xFDB
 27554                           fsr2h	equ	0xFDA
 27555                           fsr2l	equ	0xFD9
 27556                           status	equ	0xFD8
 27557                           
 27558 ;; *************** function i2_Port_SetPin *****************
 27559 ;; Defined at:
 27560 ;;		line 247 in file "Library/Port.c"
 27561 ;; Parameters:    Size  Location     Type
 27562 ;;  pInput          2   15[COMRAM] const PTR struct Port
 27563 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 27564 ;;  pPin            1   17[COMRAM] enum E6750
 27565 ;;  pValue          1   18[COMRAM] unsigned char 
 27566 ;; Auto vars:     Size  Location     Type
 27567 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 27568 ;; Return value:  Size  Location     Type
 27569 ;;                  1    wreg      void 
 27570 ;; Registers used:
 27571 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27572 ;; Tracked objects:
 27573 ;;		On entry : 0/0
 27574 ;;		On exit  : 0/0
 27575 ;;		Unchanged: 0/0
 27576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27577 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27580 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27581 ;;Total ram usage:        5 bytes
 27582 ;; Hardware stack levels used:    1
 27583 ;; Hardware stack levels required when called:    3
 27584 ;; This function calls:
 27585 ;;		i2_Byte_SetBit
 27586 ;;		i2_Word_GetPair
 27587 ;; This function is called by:
 27588 ;;		i2_Motor_Step
 27589 ;; This function uses a non-reentrant model
 27590 ;;
 27591                           
 27592                           	psect	text143
 27593  013E1E                     __ptext143:
 27594                           	opt stack 0
 27595  013E1E                     i2_Port_SetPin:
 27596                           	opt stack 14
 27597                           
 27598                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 27599                           
 27600                           ;incstack = 0
 27601  013E1E  0E08               	movlw	8
 27602  013E20  2410               	addwf	i2Port_SetPin@pInput,w,c
 27603  013E22  6E0D               	movwf	i2Word_GetPair@pInput,c
 27604  013E24  0E00               	movlw	0
 27605  013E26  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 27606  013E28  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 27607  013E2A  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 27608  013E2E  EC91  F0AB         	call	i2_Word_GetPair	;wreg free
 27609  013E32  6E14               	movwf	i2Port_SetPin@Type,c
 27610                           
 27611                           ;Port.c: 250: switch (Type)
 27612  013E34  D03B               	goto	i2l427
 27613  013E36                     
 27614                           ;Port.c: 256: pValue &= 1;
 27615  013E36  0E01               	movlw	1
 27616  013E38  1613               	andwf	i2Port_SetPin@pValue,f,c
 27617                           
 27618                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 27619  013E3A  EE20 F002          	lfsr	2,2
 27620  013E3E  5010               	movf	i2Port_SetPin@pInput,w,c
 27621  013E40  26D9               	addwf	fsr2l,f,c
 27622  013E42  5011               	movf	i2Port_SetPin@pInput+1,w,c
 27623  013E44  22DA               	addwfc	fsr2h,f,c
 27624  013E46  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 27625  013E4A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 27626  013E4E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 27627  013E52  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 27628  013E56  ECBC  F0A8         	call	i2_Byte_SetBit	;wreg free
 27629                           
 27630                           ;Port.c: 258: break;
 27631  013E5A  0012               	return	
 27632  013E5C                     
 27633                           ;Port.c: 261: pValue &= 1;
 27634  013E5C  0E01               	movlw	1
 27635  013E5E  1613               	andwf	i2Port_SetPin@pValue,f,c
 27636                           
 27637                           ;Port.c: 262: pValue ^= 1;
 27638  013E60  0E01               	movlw	1
 27639  013E62  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 27640                           
 27641                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 27642  013E64  EE20 F002          	lfsr	2,2
 27643  013E68  5010               	movf	i2Port_SetPin@pInput,w,c
 27644  013E6A  26D9               	addwf	fsr2l,f,c
 27645  013E6C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 27646  013E6E  22DA               	addwfc	fsr2h,f,c
 27647  013E70  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 27648  013E74  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 27649  013E78  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 27650  013E7C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 27651  013E80  ECBC  F0A8         	call	i2_Byte_SetBit	;wreg free
 27652                           
 27653                           ;Port.c: 264: break;
 27654  013E84  0012               	return	
 27655  013E86                     
 27656                           ;Port.c: 266: pValue &= 1;
 27657  013E86  0E01               	movlw	1
 27658  013E88  1613               	andwf	i2Port_SetPin@pValue,f,c
 27659                           
 27660                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 27661  013E8A  EE20 F004          	lfsr	2,4
 27662  013E8E  5010               	movf	i2Port_SetPin@pInput,w,c
 27663  013E90  26D9               	addwf	fsr2l,f,c
 27664  013E92  5011               	movf	i2Port_SetPin@pInput+1,w,c
 27665  013E94  22DA               	addwfc	fsr2h,f,c
 27666  013E96  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 27667  013E9A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 27668  013E9E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 27669  013EA2  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 27670  013EA6  ECBC  F0A8         	call	i2_Byte_SetBit	;wreg free
 27671                           
 27672                           ;Port.c: 269: }
 27673                           
 27674                           ;Port.c: 268: break;
 27675  013EAA  0012               	return	
 27676  013EAC                     i2l427:
 27677  013EAC  5014               	movf	i2Port_SetPin@Type,w,c
 27678                           
 27679                           ; Switch size 1, requested type "space"
 27680                           ; Number of cases is 4, Range of values is 0 to 3
 27681                           ; switch strategies available:
 27682                           ; Name         Instructions Cycles
 27683                           ; simple_byte           13     7 (average)
 27684                           ;	Chosen strategy is simple_byte
 27685  013EAE  0A00               	xorlw	0	; case 0
 27686  013EB0  B4D8               	btfsc	status,2,c
 27687  013EB2  0012               	return	
 27688  013EB4  0A01               	xorlw	1	; case 1
 27689  013EB6  B4D8               	btfsc	status,2,c
 27690  013EB8  D7BE               	goto	i2l430
 27691  013EBA  0A03               	xorlw	3	; case 2
 27692  013EBC  B4D8               	btfsc	status,2,c
 27693  013EBE  D7CE               	goto	i2l432
 27694  013EC0  0A01               	xorlw	1	; case 3
 27695  013EC2  A4D8               	btfss	status,2,c
 27696  013EC4  0012               	return	
 27697  013EC6  D7DF               	goto	i2l433
 27698  013EC8                     __end_ofi2_Port_SetPin:
 27699                           	opt stack 0
 27700                           tosu	equ	0xFFF
 27701                           tosh	equ	0xFFE
 27702                           tosl	equ	0xFFD
 27703                           pclatu	equ	0xFFB
 27704                           pclath	equ	0xFFA
 27705                           tblptru	equ	0xFF8
 27706                           tblptrh	equ	0xFF7
 27707                           tblptrl	equ	0xFF6
 27708                           tablat	equ	0xFF5
 27709                           prodh	equ	0xFF4
 27710                           prodl	equ	0xFF3
 27711                           intcon	equ	0xFF2
 27712                           indf0	equ	0xFEF
 27713                           postinc0	equ	0xFEE
 27714                           fsr0h	equ	0xFEA
 27715                           fsr0l	equ	0xFE9
 27716                           wreg	equ	0xFE8
 27717                           indf1	equ	0xFE7
 27718                           postdec1	equ	0xFE5
 27719                           fsr1h	equ	0xFE2
 27720                           fsr1l	equ	0xFE1
 27721                           indf2	equ	0xFDF
 27722                           postinc2	equ	0xFDE
 27723                           postdec2	equ	0xFDD
 27724                           plusw2	equ	0xFDB
 27725                           fsr2h	equ	0xFDA
 27726                           fsr2l	equ	0xFD9
 27727                           status	equ	0xFD8
 27728                           
 27729 ;; *************** function i2_Word_GetPair *****************
 27730 ;; Defined at:
 27731 ;;		line 156 in file "Library/Types.c"
 27732 ;; Parameters:    Size  Location     Type
 27733 ;;  pInput          2   12[COMRAM] PTR struct Word
 27734 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 27735 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 27736 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 27737 ;;		 -> PortC(10), PortF(10), NULL(0), 
 27738 ;;  pPair           1   14[COMRAM] unsigned char 
 27739 ;; Auto vars:     Size  Location     Type
 27740 ;;		None
 27741 ;; Return value:  Size  Location     Type
 27742 ;;                  1    wreg      unsigned char 
 27743 ;; Registers used:
 27744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27745 ;; Tracked objects:
 27746 ;;		On entry : 0/0
 27747 ;;		On exit  : 0/0
 27748 ;;		Unchanged: 0/0
 27749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27750 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27753 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27754 ;;Total ram usage:        3 bytes
 27755 ;; Hardware stack levels used:    1
 27756 ;; Hardware stack levels required when called:    2
 27757 ;; This function calls:
 27758 ;;		i2_Byte_GetPair
 27759 ;; This function is called by:
 27760 ;;		i2_Port_SetPin
 27761 ;; This function uses a non-reentrant model
 27762 ;;
 27763                           
 27764                           	psect	text144
 27765  015722                     __ptext144:
 27766                           	opt stack 0
 27767  015722                     i2_Word_GetPair:
 27768                           	opt stack 14
 27769                           
 27770                           ;Types.c: 158: if (pPair >= 4)
 27771                           
 27772                           ;incstack = 0
 27773  015722  0E03               	movlw	3
 27774  015724  640F               	cpfsgt	i2Word_GetPair@pPair,c
 27775  015726  D00C               	goto	i2l781
 27776                           
 27777                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 27778  015728  0E01               	movlw	1
 27779  01572A  240D               	addwf	i2Word_GetPair@pInput,w,c
 27780  01572C  6E0A               	movwf	i2Byte_GetPair@pInput,c
 27781  01572E  0E00               	movlw	0
 27782  015730  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 27783  015732  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 27784  015734  500F               	movf	i2Word_GetPair@pPair,w,c
 27785  015736  0FFC               	addlw	252
 27786  015738  6E0C               	movwf	i2Byte_GetPair@pPair,c
 27787  01573A  ECD1  F0AC         	call	i2_Byte_GetPair	;wreg free
 27788  01573E  0012               	return	
 27789  015740                     i2l781:
 27790                           
 27791                           ;Types.c: 160: else
 27792                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 27793  015740  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 27794  015744  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 27795  015748  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 27796  01574C  ECD1  F0AC         	call	i2_Byte_GetPair	;wreg free
 27797  015750  0012               	return	
 27798  015752                     __end_ofi2_Word_GetPair:
 27799                           	opt stack 0
 27800                           tosu	equ	0xFFF
 27801                           tosh	equ	0xFFE
 27802                           tosl	equ	0xFFD
 27803                           pclatu	equ	0xFFB
 27804                           pclath	equ	0xFFA
 27805                           tblptru	equ	0xFF8
 27806                           tblptrh	equ	0xFF7
 27807                           tblptrl	equ	0xFF6
 27808                           tablat	equ	0xFF5
 27809                           prodh	equ	0xFF4
 27810                           prodl	equ	0xFF3
 27811                           intcon	equ	0xFF2
 27812                           indf0	equ	0xFEF
 27813                           postinc0	equ	0xFEE
 27814                           fsr0h	equ	0xFEA
 27815                           fsr0l	equ	0xFE9
 27816                           wreg	equ	0xFE8
 27817                           indf1	equ	0xFE7
 27818                           postdec1	equ	0xFE5
 27819                           fsr1h	equ	0xFE2
 27820                           fsr1l	equ	0xFE1
 27821                           indf2	equ	0xFDF
 27822                           postinc2	equ	0xFDE
 27823                           postdec2	equ	0xFDD
 27824                           plusw2	equ	0xFDB
 27825                           fsr2h	equ	0xFDA
 27826                           fsr2l	equ	0xFD9
 27827                           status	equ	0xFD8
 27828                           
 27829 ;; *************** function i2_Byte_GetPair *****************
 27830 ;; Defined at:
 27831 ;;		line 87 in file "Library/Types.c"
 27832 ;; Parameters:    Size  Location     Type
 27833 ;;  pInput          2    9[COMRAM] PTR struct Byte
 27834 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 27835 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 27836 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 27837 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 27838 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 27839 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 27840 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 27841 ;;		 -> NULL(0), 
 27842 ;;  pPair           1   11[COMRAM] unsigned char 
 27843 ;; Auto vars:     Size  Location     Type
 27844 ;;		None
 27845 ;; Return value:  Size  Location     Type
 27846 ;;                  1    wreg      unsigned char 
 27847 ;; Registers used:
 27848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27849 ;; Tracked objects:
 27850 ;;		On entry : 0/0
 27851 ;;		On exit  : 0/0
 27852 ;;		Unchanged: 0/0
 27853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27854 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27857 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27858 ;;Total ram usage:        3 bytes
 27859 ;; Hardware stack levels used:    1
 27860 ;; Hardware stack levels required when called:    1
 27861 ;; This function calls:
 27862 ;;		i2_Byte_GetZone
 27863 ;; This function is called by:
 27864 ;;		i2_Word_GetPair
 27865 ;; This function uses a non-reentrant model
 27866 ;;
 27867                           
 27868                           	psect	text145
 27869  0159A2                     __ptext145:
 27870                           	opt stack 0
 27871  0159A2                     i2_Byte_GetPair:
 27872                           	opt stack 14
 27873                           
 27874                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 27875                           
 27876                           ;incstack = 0
 27877  0159A2  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 27878  0159A6  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 27879  0159AA  0E04               	movlw	4
 27880  0159AC  6E03               	movwf	i2Byte_GetZone@pMax,c
 27881  0159AE  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 27882  0159B2  0E02               	movlw	2
 27883  0159B4  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 27884  0159B6  EC84  F0A4         	call	i2_Byte_GetZone	;wreg free
 27885  0159BA  0012               	return	
 27886  0159BC                     __end_ofi2_Byte_GetPair:
 27887                           	opt stack 0
 27888                           tosu	equ	0xFFF
 27889                           tosh	equ	0xFFE
 27890                           tosl	equ	0xFFD
 27891                           pclatu	equ	0xFFB
 27892                           pclath	equ	0xFFA
 27893                           tblptru	equ	0xFF8
 27894                           tblptrh	equ	0xFF7
 27895                           tblptrl	equ	0xFF6
 27896                           tablat	equ	0xFF5
 27897                           prodh	equ	0xFF4
 27898                           prodl	equ	0xFF3
 27899                           intcon	equ	0xFF2
 27900                           indf0	equ	0xFEF
 27901                           postinc0	equ	0xFEE
 27902                           fsr0h	equ	0xFEA
 27903                           fsr0l	equ	0xFE9
 27904                           wreg	equ	0xFE8
 27905                           indf1	equ	0xFE7
 27906                           postdec1	equ	0xFE5
 27907                           fsr1h	equ	0xFE2
 27908                           fsr1l	equ	0xFE1
 27909                           indf2	equ	0xFDF
 27910                           postinc2	equ	0xFDE
 27911                           postdec2	equ	0xFDD
 27912                           plusw2	equ	0xFDB
 27913                           fsr2h	equ	0xFDA
 27914                           fsr2l	equ	0xFD9
 27915                           status	equ	0xFD8
 27916                           
 27917 ;; *************** function i2_Byte_GetZone *****************
 27918 ;; Defined at:
 27919 ;;		line 64 in file "Library/Types.c"
 27920 ;; Parameters:    Size  Location     Type
 27921 ;;  pInput          2    0[COMRAM] PTR struct Byte
 27922 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 27923 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 27924 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 27925 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 27926 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 27927 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 27928 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 27929 ;;		 -> NULL(0), 
 27930 ;;  pMax            1    2[COMRAM] unsigned char 
 27931 ;;  pChunk          1    3[COMRAM] unsigned char 
 27932 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 27933 ;; Auto vars:     Size  Location     Type
 27934 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 27935 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 27936 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 27937 ;; Return value:  Size  Location     Type
 27938 ;;                  1    wreg      unsigned char 
 27939 ;; Registers used:
 27940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 27941 ;; Tracked objects:
 27942 ;;		On entry : 0/0
 27943 ;;		On exit  : 0/0
 27944 ;;		Unchanged: 0/0
 27945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27946 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27947 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27948 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27949 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27950 ;;Total ram usage:        9 bytes
 27951 ;; Hardware stack levels used:    1
 27952 ;; This function calls:
 27953 ;;		Nothing
 27954 ;; This function is called by:
 27955 ;;		i2_Byte_GetPair
 27956 ;; This function uses a non-reentrant model
 27957 ;;
 27958                           
 27959                           	psect	text146
 27960  014908                     __ptext146:
 27961                           	opt stack 0
 27962  014908                     i2_Byte_GetZone:
 27963                           	opt stack 14
 27964                           
 27965                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 27966                           
 27967                           ;incstack = 0
 27968  014908  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 27969  01490C  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 27970  014910  0E00               	movlw	low (__mediumconst shr (0+16))
 27971  014912  6EF8               	movwf	tblptru,c
 27972  014914  0E0F               	movlw	(high __ramtop+-1)
 27973  014916  64F7               	cpfsgt	tblptrh,c
 27974  014918  D003               	bra	i2u622_47
 27975  01491A  0008               	tblrd		*
 27976  01491C  50F5               	movf	tablat,w,c
 27977  01491E  D005               	bra	i2u622_40
 27978  014920                     i2u622_47:
 27979  014920  CFF6 FFE9          	movff	tblptrl,fsr0l
 27980  014924  CFF7 FFEA          	movff	tblptrh,fsr0h
 27981  014928  50EF               	movf	indf0,w,c
 27982  01492A                     i2u622_40:
 27983  01492A  6E09               	movwf	i2Byte_GetZone@Output,c
 27984                           
 27985                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 27986  01492C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 27987  01492E  0D01               	mullw	1
 27988  014930  0EF9               	movlw	low _MASKS
 27989  014932  24F3               	addwf	prodl,w,c
 27990  014934  6EF6               	movwf	tblptrl,c
 27991  014936  0EFB               	movlw	high _MASKS
 27992  014938  20F4               	addwfc	prodh,w,c
 27993  01493A  6EF7               	movwf	tblptrh,c
 27994  01493C                     	if	1	;There are 3 active tblptr bytes
 27995  01493C  6AF8               	clrf	tblptru,c
 27996  01493E  0E00               	movlw	low (__mediumconst shr (0+16))
 27997  014940  22F8               	addwfc	tblptru,f,c
 27998  014942                     	endif
 27999  014942  0008               	tblrd		*
 28000  014944  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 28001                           
 28002                           ;Types.c: 68: UINT8 Offset = 0;
 28003  014948  0E00               	movlw	0
 28004  01494A  6E08               	movwf	i2Byte_GetZone@Offset,c
 28005                           
 28006                           ;Types.c: 70: while (pChunk >= pMax)
 28007  01494C  D003               	goto	i2l732
 28008  01494E                     
 28009                           ;Types.c: 71: {
 28010                           ;Types.c: 72: pChunk -= pMax;
 28011  01494E  5003               	movf	i2Byte_GetZone@pMax,w,c
 28012  014950  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 28013                           
 28014                           ;Types.c: 73: Offset += 1;
 28015  014952  2A08               	incf	i2Byte_GetZone@Offset,f,c
 28016  014954                     i2l732:
 28017  014954  5003               	movf	i2Byte_GetZone@pMax,w,c
 28018  014956  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 28019  014958  B0D8               	btfsc	status,0,c
 28020  01495A  D7F9               	goto	i2l733
 28021                           
 28022                           ;Types.c: 74: }
 28023                           ;Types.c: 75: pChunk *= pChunkSize;
 28024  01495C  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 28025  01495E  0204               	mulwf	i2Byte_GetZone@pChunk,c
 28026  014960  50F3               	movf	prodl,w,c
 28027  014962  6E04               	movwf	i2Byte_GetZone@pChunk,c
 28028                           
 28029                           ;Types.c: 76: pChunk += Offset;
 28030  014964  5008               	movf	i2Byte_GetZone@Offset,w,c
 28031  014966  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 28032                           
 28033                           ;Types.c: 78: Output >>= pChunk;
 28034  014968  2804               	incf	i2Byte_GetZone@pChunk,w,c
 28035  01496A  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 28036  01496C  D002               	goto	i2u624_40
 28037  01496E                     i2u624_45:
 28038  01496E  90D8               	bcf	status,0,c
 28039  014970  3209               	rrcf	i2Byte_GetZone@Output,f,c
 28040  014972                     i2u624_40:
 28041  014972  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 28042  014974  D7FC               	goto	i2u624_45
 28043                           
 28044                           ;Types.c: 79: Output &= MASK;
 28045  014976  5007               	movf	i2Byte_GetZone@MASK,w,c
 28046  014978  1609               	andwf	i2Byte_GetZone@Output,f,c
 28047                           
 28048                           ;Types.c: 80: return Output;
 28049  01497A  5009               	movf	i2Byte_GetZone@Output,w,c
 28050  01497C  0012               	return	
 28051  01497E                     __end_ofi2_Byte_GetZone:
 28052                           	opt stack 0
 28053                           tosu	equ	0xFFF
 28054                           tosh	equ	0xFFE
 28055                           tosl	equ	0xFFD
 28056                           pclatu	equ	0xFFB
 28057                           pclath	equ	0xFFA
 28058                           tblptru	equ	0xFF8
 28059                           tblptrh	equ	0xFF7
 28060                           tblptrl	equ	0xFF6
 28061                           tablat	equ	0xFF5
 28062                           prodh	equ	0xFF4
 28063                           prodl	equ	0xFF3
 28064                           intcon	equ	0xFF2
 28065                           indf0	equ	0xFEF
 28066                           postinc0	equ	0xFEE
 28067                           fsr0h	equ	0xFEA
 28068                           fsr0l	equ	0xFE9
 28069                           wreg	equ	0xFE8
 28070                           indf1	equ	0xFE7
 28071                           postdec1	equ	0xFE5
 28072                           fsr1h	equ	0xFE2
 28073                           fsr1l	equ	0xFE1
 28074                           indf2	equ	0xFDF
 28075                           postinc2	equ	0xFDE
 28076                           postdec2	equ	0xFDD
 28077                           plusw2	equ	0xFDB
 28078                           fsr2h	equ	0xFDA
 28079                           fsr2l	equ	0xFD9
 28080                           status	equ	0xFD8
 28081                           
 28082 ;; *************** function i2_Byte_SetBit *****************
 28083 ;; Defined at:
 28084 ;;		line 32 in file "Library/Types.c"
 28085 ;; Parameters:    Size  Location     Type
 28086 ;;  pInput          2    0[COMRAM] PTR struct Byte
 28087 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28088 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28089 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28090 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28091 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28092 ;;		 -> NULL(0), 
 28093 ;;  pBit            1    2[COMRAM] unsigned char 
 28094 ;;  pValue          1    3[COMRAM] unsigned char 
 28095 ;; Auto vars:     Size  Location     Type
 28096 ;;		None
 28097 ;; Return value:  Size  Location     Type
 28098 ;;                  1    wreg      void 
 28099 ;; Registers used:
 28100 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28101 ;; Tracked objects:
 28102 ;;		On entry : 0/0
 28103 ;;		On exit  : 0/0
 28104 ;;		Unchanged: 0/0
 28105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28106 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28108 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28109 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28110 ;;Total ram usage:        7 bytes
 28111 ;; Hardware stack levels used:    1
 28112 ;; This function calls:
 28113 ;;		Nothing
 28114 ;; This function is called by:
 28115 ;;		i2_Port_SetPin
 28116 ;; This function uses a non-reentrant model
 28117 ;;
 28118                           
 28119                           	psect	text147
 28120  015178                     __ptext147:
 28121                           	opt stack 0
 28122  015178                     i2_Byte_SetBit:
 28123                           	opt stack 16
 28124                           
 28125                           ;Types.c: 34: pValue &= 1;
 28126                           
 28127                           ;incstack = 0
 28128  015178  0E01               	movlw	1
 28129  01517A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 28130                           
 28131                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 28132  01517C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 28133  015180  0E01               	movlw	1
 28134  015182  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 28135  015184  2A05               	incf	??i2_Byte_SetBit,f,c
 28136  015186  D002               	goto	i2u712_44
 28137  015188                     i2u712_45:
 28138  015188  90D8               	bcf	status,0,c
 28139  01518A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 28140  01518C                     i2u712_44:
 28141  01518C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 28142  01518E  D7FC               	goto	i2u712_45
 28143  015190  5006               	movf	??i2_Byte_SetBit+1,w,c
 28144  015192  0AFF               	xorlw	255
 28145  015194  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 28146  015196  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 28147  01519A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 28148  01519E  5007               	movf	??i2_Byte_SetBit+2,w,c
 28149  0151A0  16DF               	andwf	indf2,f,c
 28150                           
 28151                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 28152  0151A2  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 28153  0151A6  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 28154  0151AA  2A05               	incf	??i2_Byte_SetBit,f,c
 28155  0151AC  D002               	goto	i2u713_44
 28156  0151AE                     i2u713_45:
 28157  0151AE  90D8               	bcf	status,0,c
 28158  0151B0  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 28159  0151B2                     i2u713_44:
 28160  0151B2  2E05               	decfsz	??i2_Byte_SetBit,f,c
 28161  0151B4  D7FC               	goto	i2u713_45
 28162  0151B6  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 28163  0151BA  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 28164  0151BE  5006               	movf	??i2_Byte_SetBit+1,w,c
 28165  0151C0  12DF               	iorwf	indf2,f,c
 28166  0151C2  0012               	return		;funcret
 28167  0151C4                     __end_ofi2_Byte_SetBit:
 28168                           	opt stack 0
 28169                           tosu	equ	0xFFF
 28170                           tosh	equ	0xFFE
 28171                           tosl	equ	0xFFD
 28172                           pclatu	equ	0xFFB
 28173                           pclath	equ	0xFFA
 28174                           tblptru	equ	0xFF8
 28175                           tblptrh	equ	0xFF7
 28176                           tblptrl	equ	0xFF6
 28177                           tablat	equ	0xFF5
 28178                           prodh	equ	0xFF4
 28179                           prodl	equ	0xFF3
 28180                           intcon	equ	0xFF2
 28181                           indf0	equ	0xFEF
 28182                           postinc0	equ	0xFEE
 28183                           fsr0h	equ	0xFEA
 28184                           fsr0l	equ	0xFE9
 28185                           wreg	equ	0xFE8
 28186                           indf1	equ	0xFE7
 28187                           postdec1	equ	0xFE5
 28188                           fsr1h	equ	0xFE2
 28189                           fsr1l	equ	0xFE1
 28190                           indf2	equ	0xFDF
 28191                           postinc2	equ	0xFDE
 28192                           postdec2	equ	0xFDD
 28193                           plusw2	equ	0xFDB
 28194                           fsr2h	equ	0xFDA
 28195                           fsr2l	equ	0xFD9
 28196                           status	equ	0xFD8
 28197                           
 28198 ;; *************** function i2_MXK_SwitchTo *****************
 28199 ;; Defined at:
 28200 ;;		line 105 in file "Library/MXK.c"
 28201 ;; Parameters:    Size  Location     Type
 28202 ;;  pModule         1    wreg     enum E6927
 28203 ;; Auto vars:     Size  Location     Type
 28204 ;;  pModule         1    7[COMRAM] enum E6927
 28205 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 28206 ;; Return value:  Size  Location     Type
 28207 ;;                  1    wreg      unsigned char 
 28208 ;; Registers used:
 28209 ;;		wreg, status,2, status,0, cstack
 28210 ;; Tracked objects:
 28211 ;;		On entry : 0/0
 28212 ;;		On exit  : 0/0
 28213 ;;		Unchanged: 0/0
 28214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28216 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28219 ;;Total ram usage:        2 bytes
 28220 ;; Hardware stack levels used:    1
 28221 ;; Hardware stack levels required when called:    1
 28222 ;; This function calls:
 28223 ;;		i2_delay_us
 28224 ;; This function is called by:
 28225 ;;		i2_Motor_Step
 28226 ;; This function uses a non-reentrant model
 28227 ;;
 28228                           
 28229                           	psect	text148
 28230  0155C6                     __ptext148:
 28231                           	opt stack 0
 28232  0155C6                     i2_MXK_SwitchTo:
 28233                           	opt stack 16
 28234                           
 28235                           ;incstack = 0
 28236                           ;i2MXK_SwitchTo@pModule stored from wreg
 28237  0155C6  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 28238                           
 28239                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 28240  0155C8  5086               	movf	3974,w,c	;volatile
 28241  0155CA  0B0F               	andlw	15
 28242  0155CC  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 28243                           
 28244                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 28245  0155CE  504D               	movf	_Bus_State,w,c
 28246  0155D0  A4D8               	btfss	status,2,c
 28247  0155D2  D002               	goto	i2l1730
 28248                           
 28249                           ;MXK.c: 110: return 0;
 28250  0155D4  0E00               	movlw	0
 28251  0155D6  0012               	return	
 28252  0155D8                     i2l1730:
 28253                           
 28254                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 28255  0155D8  0E00               	movlw	0
 28256  0155DA  6E4D               	movwf	_Bus_State,c
 28257                           
 28258                           ;MXK.c: 114: if (CUR != pModule)
 28259  0155DC  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 28260  0155DE  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 28261  0155E0  B4D8               	btfsc	status,2,c
 28262  0155E2  D00A               	goto	i2l1732
 28263                           
 28264                           ;MXK.c: 115: {
 28265                           ;MXK.c: 116: PORTG &= ~(0xF);
 28266  0155E4  0EF0               	movlw	240
 28267  0155E6  1686               	andwf	3974,f,c	;volatile
 28268                           
 28269                           ;MXK.c: 117: PORTG |= pModule;
 28270  0155E8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 28271  0155EA  1286               	iorwf	3974,f,c	;volatile
 28272                           
 28273                           ;MXK.c: 120: delay_us(10);
 28274  0155EC  0E00               	movlw	0
 28275  0155EE  6E02               	movwf	i2delay_us@us+1,c
 28276  0155F0  0E0A               	movlw	10
 28277  0155F2  6E01               	movwf	i2delay_us@us,c
 28278  0155F4  ECF8  F0A9         	call	i2_delay_us	;wreg free
 28279  0155F8                     i2l1732:
 28280                           
 28281                           ;MXK.c: 121: }
 28282                           ;MXK.c: 122: return 1;
 28283  0155F8  0E01               	movlw	1
 28284  0155FA  0012               	return	
 28285  0155FC                     __end_ofi2_MXK_SwitchTo:
 28286                           	opt stack 0
 28287                           tosu	equ	0xFFF
 28288                           tosh	equ	0xFFE
 28289                           tosl	equ	0xFFD
 28290                           pclatu	equ	0xFFB
 28291                           pclath	equ	0xFFA
 28292                           tblptru	equ	0xFF8
 28293                           tblptrh	equ	0xFF7
 28294                           tblptrl	equ	0xFF6
 28295                           tablat	equ	0xFF5
 28296                           prodh	equ	0xFF4
 28297                           prodl	equ	0xFF3
 28298                           intcon	equ	0xFF2
 28299                           indf0	equ	0xFEF
 28300                           postinc0	equ	0xFEE
 28301                           fsr0h	equ	0xFEA
 28302                           fsr0l	equ	0xFE9
 28303                           wreg	equ	0xFE8
 28304                           indf1	equ	0xFE7
 28305                           postdec1	equ	0xFE5
 28306                           fsr1h	equ	0xFE2
 28307                           fsr1l	equ	0xFE1
 28308                           indf2	equ	0xFDF
 28309                           postinc2	equ	0xFDE
 28310                           postdec2	equ	0xFDD
 28311                           plusw2	equ	0xFDB
 28312                           fsr2h	equ	0xFDA
 28313                           fsr2l	equ	0xFD9
 28314                           status	equ	0xFD8
 28315                           
 28316 ;; *************** function i2_delay_us *****************
 28317 ;; Defined at:
 28318 ;;		line 255 in file "Library/Types.c"
 28319 ;; Parameters:    Size  Location     Type
 28320 ;;  us              2    0[COMRAM] unsigned short 
 28321 ;; Auto vars:     Size  Location     Type
 28322 ;;  delay_us        4    2[COMRAM] unsigned long 
 28323 ;; Return value:  Size  Location     Type
 28324 ;;                  1    wreg      void 
 28325 ;; Registers used:
 28326 ;;		wreg, status,2, status,0
 28327 ;; Tracked objects:
 28328 ;;		On entry : 0/0
 28329 ;;		On exit  : 0/0
 28330 ;;		Unchanged: 0/0
 28331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28333 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28335 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28336 ;;Total ram usage:        6 bytes
 28337 ;; Hardware stack levels used:    1
 28338 ;; This function calls:
 28339 ;;		Nothing
 28340 ;; This function is called by:
 28341 ;;		i2_MXK_SwitchTo
 28342 ;; This function uses a non-reentrant model
 28343 ;;
 28344                           
 28345                           	psect	text149
 28346  0153F0                     __ptext149:
 28347                           	opt stack 0
 28348  0153F0                     i2_delay_us:
 28349                           	opt stack 16
 28350                           
 28351                           ;Types.c: 256: unsigned long u;
 28352                           ;Types.c: 257: while (us--) {
 28353                           
 28354                           ;incstack = 0
 28355  0153F0  D016               	goto	i2u716_40
 28356  0153F2                     i2l9923:
 28357                           
 28358                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 28359  0153F2  0E00               	movlw	0
 28360  0153F4  6E03               	movwf	i2delay_us@u,c
 28361  0153F6  0E00               	movlw	0
 28362  0153F8  6E04               	movwf	i2delay_us@u+1,c
 28363  0153FA  0E00               	movlw	0
 28364  0153FC  6E05               	movwf	i2delay_us@u+2,c
 28365  0153FE  0E00               	movlw	0
 28366  015400  6E06               	movwf	i2delay_us@u+3,c
 28367  015402                     i2l9925:
 28368  015402  5003               	movf	i2delay_us@u,w,c
 28369  015404  1004               	iorwf	i2delay_us@u+1,w,c
 28370  015406  1005               	iorwf	i2delay_us@u+2,w,c
 28371  015408  1006               	iorwf	i2delay_us@u+3,w,c
 28372  01540A  A4D8               	btfss	status,2,c
 28373  01540C  D008               	goto	i2u716_40
 28374  01540E  F000               	nop		; ;# 
 28375  015410  0E01               	movlw	1
 28376  015412  2603               	addwf	i2delay_us@u,f,c
 28377  015414  0E00               	movlw	0
 28378  015416  2204               	addwfc	i2delay_us@u+1,f,c
 28379  015418  2205               	addwfc	i2delay_us@u+2,f,c
 28380  01541A  2206               	addwfc	i2delay_us@u+3,f,c
 28381  01541C  D7F2               	goto	i2l9925
 28382  01541E                     i2u716_40:
 28383  01541E  0601               	decf	i2delay_us@us,f,c
 28384  015420  A0D8               	btfss	status,0,c
 28385  015422  0602               	decf	i2delay_us@us+1,f,c
 28386  015424  2801               	incf	i2delay_us@us,w,c
 28387  015426  E1E5               	bnz	i2l9923
 28388  015428  2802               	incf	i2delay_us@us+1,w,c
 28389  01542A  B4D8               	btfsc	status,2,c
 28390  01542C  0012               	return	
 28391  01542E  D7E1               	goto	i2l832
 28392  015430                     __end_ofi2_delay_us:
 28393                           	opt stack 0
 28394                           tosu	equ	0xFFF
 28395                           tosh	equ	0xFFE
 28396                           tosl	equ	0xFFD
 28397                           pclatu	equ	0xFFB
 28398                           pclath	equ	0xFFA
 28399                           tblptru	equ	0xFF8
 28400                           tblptrh	equ	0xFF7
 28401                           tblptrl	equ	0xFF6
 28402                           tablat	equ	0xFF5
 28403                           prodh	equ	0xFF4
 28404                           prodl	equ	0xFF3
 28405                           intcon	equ	0xFF2
 28406                           indf0	equ	0xFEF
 28407                           postinc0	equ	0xFEE
 28408                           fsr0h	equ	0xFEA
 28409                           fsr0l	equ	0xFE9
 28410                           wreg	equ	0xFE8
 28411                           indf1	equ	0xFE7
 28412                           postdec1	equ	0xFE5
 28413                           fsr1h	equ	0xFE2
 28414                           fsr1l	equ	0xFE1
 28415                           indf2	equ	0xFDF
 28416                           postinc2	equ	0xFDE
 28417                           postdec2	equ	0xFDD
 28418                           plusw2	equ	0xFDB
 28419                           fsr2h	equ	0xFDA
 28420                           fsr2l	equ	0xFD9
 28421                           status	equ	0xFD8
 28422                           
 28423 ;; *************** function i2_MXK_Release *****************
 28424 ;; Defined at:
 28425 ;;		line 130 in file "Library/MXK.c"
 28426 ;; Parameters:    Size  Location     Type
 28427 ;;		None
 28428 ;; Auto vars:     Size  Location     Type
 28429 ;;		None
 28430 ;; Return value:  Size  Location     Type
 28431 ;;                  1    wreg      unsigned char 
 28432 ;; Registers used:
 28433 ;;		wreg, status,2, status,0
 28434 ;; Tracked objects:
 28435 ;;		On entry : 0/0
 28436 ;;		On exit  : 0/0
 28437 ;;		Unchanged: 0/0
 28438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28443 ;;Total ram usage:        0 bytes
 28444 ;; Hardware stack levels used:    1
 28445 ;; This function calls:
 28446 ;;		Nothing
 28447 ;; This function is called by:
 28448 ;;		i2_Motor_Step
 28449 ;; This function uses a non-reentrant model
 28450 ;;
 28451                           
 28452                           	psect	text150
 28453  015BA2                     __ptext150:
 28454                           	opt stack 0
 28455  015BA2                     i2_MXK_Release:
 28456                           	opt stack 17
 28457                           
 28458                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 28459                           
 28460                           ;incstack = 0
 28461  015BA2  0E01               	movlw	1
 28462  015BA4  6E4D               	movwf	_Bus_State,c
 28463                           
 28464                           ;MXK.c: 135: return 1;
 28465                           ;	Return value of i2_MXK_Release is never used
 28466  015BA6  0012               	return	
 28467  015BA8                     __end_ofi2_MXK_Release:
 28468                           	opt stack 0
 28469                           tosu	equ	0xFFF
 28470                           tosh	equ	0xFFE
 28471                           tosl	equ	0xFFD
 28472                           pclatu	equ	0xFFB
 28473                           pclath	equ	0xFFA
 28474                           tblptru	equ	0xFF8
 28475                           tblptrh	equ	0xFF7
 28476                           tblptrl	equ	0xFF6
 28477                           tablat	equ	0xFF5
 28478                           prodh	equ	0xFF4
 28479                           prodl	equ	0xFF3
 28480                           intcon	equ	0xFF2
 28481                           indf0	equ	0xFEF
 28482                           postinc0	equ	0xFEE
 28483                           fsr0h	equ	0xFEA
 28484                           fsr0l	equ	0xFE9
 28485                           wreg	equ	0xFE8
 28486                           indf1	equ	0xFE7
 28487                           postdec1	equ	0xFE5
 28488                           fsr1h	equ	0xFE2
 28489                           fsr1l	equ	0xFE1
 28490                           indf2	equ	0xFDF
 28491                           postinc2	equ	0xFDE
 28492                           postdec2	equ	0xFDD
 28493                           plusw2	equ	0xFDB
 28494                           fsr2h	equ	0xFDA
 28495                           fsr2l	equ	0xFD9
 28496                           status	equ	0xFD8
 28497                           
 28498 ;; *************** function i2_MXK_Queue *****************
 28499 ;; Defined at:
 28500 ;;		line 144 in file "Library/MXK.c"
 28501 ;; Parameters:    Size  Location     Type
 28502 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 28503 ;;		 -> Absolute function(1), Motor_Step(1), 
 28504 ;; Auto vars:     Size  Location     Type
 28505 ;;		None
 28506 ;; Return value:  Size  Location     Type
 28507 ;;                  1    wreg      void 
 28508 ;; Registers used:
 28509 ;;		wreg, status,2, status,0
 28510 ;; Tracked objects:
 28511 ;;		On entry : 0/0
 28512 ;;		On exit  : 0/0
 28513 ;;		Unchanged: 0/0
 28514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28515 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28518 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28519 ;;Total ram usage:        3 bytes
 28520 ;; Hardware stack levels used:    1
 28521 ;; This function calls:
 28522 ;;		Nothing
 28523 ;; This function is called by:
 28524 ;;		i2_Motor_Step
 28525 ;; This function uses a non-reentrant model
 28526 ;;
 28527                           
 28528                           	psect	text151
 28529  015B36                     __ptext151:
 28530                           	opt stack 0
 28531  015B36                     i2_MXK_Queue:
 28532                           	opt stack 17
 28533                           
 28534                           ;MXK.c: 146: lQueue = pCallback;
 28535                           
 28536                           ;incstack = 0
 28537  015B36  C001  F029         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 28538  015B3A  C002  F02A         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 28539  015B3E  C003  F02B         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 28540  015B42  0012               	return		;funcret
 28541  015B44                     __end_ofi2_MXK_Queue:
 28542                           	opt stack 0
 28543                           tosu	equ	0xFFF
 28544                           tosh	equ	0xFFE
 28545                           tosl	equ	0xFFD
 28546                           pclatu	equ	0xFFB
 28547                           pclath	equ	0xFFA
 28548                           tblptru	equ	0xFF8
 28549                           tblptrh	equ	0xFF7
 28550                           tblptrl	equ	0xFF6
 28551                           tablat	equ	0xFF5
 28552                           prodh	equ	0xFF4
 28553                           prodl	equ	0xFF3
 28554                           intcon	equ	0xFF2
 28555                           indf0	equ	0xFEF
 28556                           postinc0	equ	0xFEE
 28557                           fsr0h	equ	0xFEA
 28558                           fsr0l	equ	0xFE9
 28559                           wreg	equ	0xFE8
 28560                           indf1	equ	0xFE7
 28561                           postdec1	equ	0xFE5
 28562                           fsr1h	equ	0xFE2
 28563                           fsr1l	equ	0xFE1
 28564                           indf2	equ	0xFDF
 28565                           postinc2	equ	0xFDE
 28566                           postdec2	equ	0xFDD
 28567                           plusw2	equ	0xFDB
 28568                           fsr2h	equ	0xFDA
 28569                           fsr2l	equ	0xFD9
 28570                           status	equ	0xFD8
 28571                           tosu	equ	0xFFF
 28572                           tosh	equ	0xFFE
 28573                           tosl	equ	0xFFD
 28574                           pclatu	equ	0xFFB
 28575                           pclath	equ	0xFFA
 28576                           tblptru	equ	0xFF8
 28577                           tblptrh	equ	0xFF7
 28578                           tblptrl	equ	0xFF6
 28579                           tablat	equ	0xFF5
 28580                           prodh	equ	0xFF4
 28581                           prodl	equ	0xFF3
 28582                           intcon	equ	0xFF2
 28583                           indf0	equ	0xFEF
 28584                           postinc0	equ	0xFEE
 28585                           fsr0h	equ	0xFEA
 28586                           fsr0l	equ	0xFE9
 28587                           wreg	equ	0xFE8
 28588                           indf1	equ	0xFE7
 28589                           postdec1	equ	0xFE5
 28590                           fsr1h	equ	0xFE2
 28591                           fsr1l	equ	0xFE1
 28592                           indf2	equ	0xFDF
 28593                           postinc2	equ	0xFDE
 28594                           postdec2	equ	0xFDD
 28595                           plusw2	equ	0xFDB
 28596                           fsr2h	equ	0xFDA
 28597                           fsr2l	equ	0xFD9
 28598                           status	equ	0xFD8
 28599                           
 28600                           	psect	text152
 28601  000000                     __ptext152:
 28602                           	opt stack 0
 28603                           tosu	equ	0xFFF
 28604                           tosh	equ	0xFFE
 28605                           tosl	equ	0xFFD
 28606                           pclatu	equ	0xFFB
 28607                           pclath	equ	0xFFA
 28608                           tblptru	equ	0xFF8
 28609                           tblptrh	equ	0xFF7
 28610                           tblptrl	equ	0xFF6
 28611                           tablat	equ	0xFF5
 28612                           prodh	equ	0xFF4
 28613                           prodl	equ	0xFF3
 28614                           intcon	equ	0xFF2
 28615                           indf0	equ	0xFEF
 28616                           postinc0	equ	0xFEE
 28617                           fsr0h	equ	0xFEA
 28618                           fsr0l	equ	0xFE9
 28619                           wreg	equ	0xFE8
 28620                           indf1	equ	0xFE7
 28621                           postdec1	equ	0xFE5
 28622                           fsr1h	equ	0xFE2
 28623                           fsr1l	equ	0xFE1
 28624                           indf2	equ	0xFDF
 28625                           postinc2	equ	0xFDE
 28626                           postdec2	equ	0xFDD
 28627                           plusw2	equ	0xFDB
 28628                           fsr2h	equ	0xFDA
 28629                           fsr2l	equ	0xFD9
 28630                           status	equ	0xFD8
 28631                           
 28632                           	psect	rparam
 28633  0000                     tosu	equ	0xFFF
 28634                           tosh	equ	0xFFE
 28635                           tosl	equ	0xFFD
 28636                           pclatu	equ	0xFFB
 28637                           pclath	equ	0xFFA
 28638                           tblptru	equ	0xFF8
 28639                           tblptrh	equ	0xFF7
 28640                           tblptrl	equ	0xFF6
 28641                           tablat	equ	0xFF5
 28642                           prodh	equ	0xFF4
 28643                           prodl	equ	0xFF3
 28644                           intcon	equ	0xFF2
 28645                           indf0	equ	0xFEF
 28646                           postinc0	equ	0xFEE
 28647                           fsr0h	equ	0xFEA
 28648                           fsr0l	equ	0xFE9
 28649                           wreg	equ	0xFE8
 28650                           indf1	equ	0xFE7
 28651                           postdec1	equ	0xFE5
 28652                           fsr1h	equ	0xFE2
 28653                           fsr1l	equ	0xFE1
 28654                           indf2	equ	0xFDF
 28655                           postinc2	equ	0xFDE
 28656                           postdec2	equ	0xFDD
 28657                           plusw2	equ	0xFDB
 28658                           fsr2h	equ	0xFDA
 28659                           fsr2l	equ	0xFD9
 28660                           status	equ	0xFD8
 28661                           
 28662                           	psect	temp
 28663  000051                     btemp:
 28664                           	opt stack 0
 28665  000051                     	ds	1
 28666  0000                     int$flags	set	btemp
 28667  0000                     wtemp6	set	btemp+1
 28668                           tosu	equ	0xFFF
 28669                           tosh	equ	0xFFE
 28670                           tosl	equ	0xFFD
 28671                           pclatu	equ	0xFFB
 28672                           pclath	equ	0xFFA
 28673                           tblptru	equ	0xFF8
 28674                           tblptrh	equ	0xFF7
 28675                           tblptrl	equ	0xFF6
 28676                           tablat	equ	0xFF5
 28677                           prodh	equ	0xFF4
 28678                           prodl	equ	0xFF3
 28679                           intcon	equ	0xFF2
 28680                           indf0	equ	0xFEF
 28681                           postinc0	equ	0xFEE
 28682                           fsr0h	equ	0xFEA
 28683                           fsr0l	equ	0xFE9
 28684                           wreg	equ	0xFE8
 28685                           indf1	equ	0xFE7
 28686                           postdec1	equ	0xFE5
 28687                           fsr1h	equ	0xFE2
 28688                           fsr1l	equ	0xFE1
 28689                           indf2	equ	0xFDF
 28690                           postinc2	equ	0xFDE
 28691                           postdec2	equ	0xFDD
 28692                           plusw2	equ	0xFDB
 28693                           fsr2h	equ	0xFDA
 28694                           fsr2l	equ	0xFD9
 28695                           status	equ	0xFD8


Data Sizes:
    Strings     444
    Constant    806
    Data        39
    BSS         842
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    157     160
    BANK1           256      6     256
    BANK2           256      0     248
    BANK3           256     14      54
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK1[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_45(CODE[9]), STR_44(CODE[10]), STR_43(CODE[3]), STR_42(CODE[24]), 
		 -> STR_41(CODE[3]), STR_40(CODE[12]), STR_39(CODE[12]), STR_38(CODE[12]), 
		 -> STR_37(CODE[12]), STR_36(CODE[16]), STR_35(CODE[3]), STR_34(CODE[12]), 
		 -> STR_33(CODE[11]), STR_32(CODE[11]), STR_31(CODE[13]), STR_30(CODE[8]), 
		 -> STR_29(CODE[9]), STR_28(CODE[9]), STR_27(CODE[5]), STR_26(CODE[3]), 
		 -> STR_25(CODE[8]), STR_24(CODE[3]), STR_23(CODE[12]), STR_22(CODE[3]), 
		 -> STR_21(CODE[20]), STR_20(CODE[19]), STR_19(CODE[3]), STR_18(CODE[20]), 
		 -> STR_17(CODE[19]), STR_16(CODE[3]), STR_15(CODE[39]), STR_14(CODE[42]), 
		 -> STR_13(CODE[16]), STR_12(CODE[3]), STR_11(CODE[21]), STR_10(CODE[3]), 
		 -> STR_9(CODE[19]), STR_8(CODE[28]), STR_7(CODE[20]), STR_6(CODE[3]), 
		 -> STR_5(CODE[17]), STR_4(CODE[12]), STR_3(CODE[3]), STR_2(CODE[19]), 
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK2[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK2[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_Travel
    _Travel->_ADCAverage
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _Turn->_eusartSend
    _Get_VirtualWall_State->_eusartSend
    _Drive->_eusartSend
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Robot_Init->_UpdateDistance
    _UpdateDistance->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_Travel

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 1540089
                                              0 BANK1      6     6      0
                         _ADCAverage
                       _Console_Init
                     _Console_Render
                    _FunctInitButton
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                           _LED_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                         _Robot_Init
                             _Travel
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Travel                                              26    18      8  177054
                                            145 BANK0     12     4      8
                                              0 BANK3     14    14      0
                         _ADCAverage
                     _Console_Render
                              _Drive
              _Get_VirtualWall_State
                         _Robot_Stop
                               _Turn
                     _UpdateDistance
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    17      6   11436
                                             21 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Turn                                                10     4      6     778
                                              1 BANK0     10     4      6
                         _Robot_Stop
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Get_VirtualWall_State                                5     3      2      65
                                              1 BANK0      5     3      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Drive                                                4     0      4    1873
                                              1 BANK0      4     0      4
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   40495
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   21688
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    5704
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADCAverage                                          26    26      0  111951
                                            119 BANK0     26    26      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   88412
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   28640
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   47182
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   12119
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4    1996
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4    1249
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   13173
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    6065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    6575
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    5942
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _UpdateDistance                                       6     4      2      31
                                              1 BANK0      6     4      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  363376
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  292948
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  262877
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   95501
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    2382
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84709
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84709
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37341
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (3) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (4) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (5) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
   _Travel *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Drive
       _eusartSend
     _Get_VirtualWall_State
       _eusartRec
       _eusartSend
     _Robot_Stop
       _eusartSend
     _Turn
       _Robot_Stop
         _eusartSend
       _eusartRec
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     ___wmul
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      E      36      11       21.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      F8       9       96.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      6     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9D      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     31E      12        0.0%
DATA                 0      0     44A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon May 21 10:02:29 2018

                          i2_Timer0_Stop 5B9C                         SPI_Init@pChannel 0091  
             __size_of_MXK_BlockSwitchTo 0038                             i2_Motor_Step 393A  
                                      _A 01F7                                        l8 3DA6  
                           ___fldiv@aexp 0078                             ___fldiv@bexp 0077  
                                      _a 01F8                                        _i 015F  
                                      _j 015E                                        _k 013A  
                                      _l 004F                                        _u 015D  
                                      _w 0050                                        _x 013C  
                           ___fldiv@sign 006C                                       l11 3438  
                                     l12 3426                                       l90 30FC  
                                     l87 3076                                       l89 30D6  
                    __size_of_ADCAverage 02F0                         ??_UpdateDistance 0063  
                           ___awdiv@sign 0065                      ___wmul@multiplicand 0062  
                          Travel@Req_Dir 0332                            _HMI_DIPSwitch 5A74  
                     LCD_DrawField@pSize 0078                       LCD_DrawField@count 007E  
                      ?_Event_TestButton 0001                         i2_Timer0_Restart 5B50  
                                    l120 429E                                      l121 42B4  
                                    l122 42CA                                      l220 4F24  
                                    l117 42E0                                      l221 4EF4  
                                    l118 428A                                      l230 5274  
                                    l222 4F34                                      l223 4F0C  
                            ?_LED_Toggle 0001                                      l234 53DE  
                                    l235 53B6                                      l227 528C  
                                    l403 2BA8                                      l412 2754  
                                    l228 525C                                      l340 4426  
                                    l404 2B48                                      l421 26F0  
                                    l413 2606                                      l237 53CA  
                                    l341 4430                                      l405 2BD8  
                          ??_Console_Tab 0068                                      l414 2770  
                                    l430 3CD6                                      l350 44F4  
                                    l342 443A                                      l510 2270  
                                    l406 2B60                                      l415 2628  
                                    l351 44A2                                      l343 4444  
                                    l511 2366                                      l407 2B78  
                                    l183 4698                                      l600 052A  
                                    l432 3CFC                                      l344 444E  
                                    l512 2290                                      l408 2B90  
                                    l184 4678                                      l417 268C  
                                    l601 067C                                      l433 3D28  
                                    l353 44AE                                      l337 446C  
                                    l345 4458                                      l610 06F4  
                                    l602 0556                                      l354 44B8  
                                    l346 4462                                      l338 441A  
                                    l370 43C6                                      l611 073A  
                                    l603 068C                                      l427 3D50  
                                    l355 44C2                                      l363 43E4  
                                    l371 43D0                                      l531 1740  
                            ?_HMI_GetBar 0001                                      l612 0780  
                                    l604 05E6                                      l356 44CC  
                                    l372 43DA                                      l364 4392  
                                    l532 1762                                      l516 22D0  
                                    l357 44D6                                      l509 234C  
                                    l614 0852                                      l358 44E0  
                                    l366 439E                                      l526 1782  
                                    l615 084A                                      l607 07C6  
                                    l359 44EA                                      l367 43A8  
                                    l519 2310                                      l616 0864  
                                    l608 06AE                                      l368 43B2  
                                    l528 17A0                                      l393 5128  
                                    l617 084E                                      l609 07E4  
                                    l369 43BC                                      l529 1722  
                                    l483 1D4A                                      l732 47F0  
                                    l476 1E12                                      l900 185C  
                                    l733 47EA                                      l389 4D88  
                                    l477 1CA2                                      l901 1860  
                                    l397 53AC                                      l726 4328  
                                    l478 1E2E                                      l486 1DAE  
                                    l654 57DE                                      l910 1884  
                                    l902 1864                                      l727 4322  
                                    l479 1CE6                                      l655 57D6  
                                    l911 1888                                      l903 1868  
                                    l912 188C                                      l904 186C  
                                    l824 4DEC                                      l832 52E8  
                                    l673 5714                                      l657 57DA  
                                    l913 1890                                      l905 1870  
                                    l921 4F82                                      l681 4A6A  
                                    l914 1894                                      l906 1874  
                                    l922 4F52                                      l930 3C34  
                                    l819 4C62                                      l915 1898  
                                    l907 1878                                      l916 189C  
                                    l908 187C                                      l860 17BC  
                                    l684 4A80                                      l781 5650  
                                    l597 0534                                      l853 18A4  
                                    l917 18A0                                      l909 1880  
                                    l861 17C0                                      l598 0520  
                                    l870 17E4                                      l862 17C4  
                                    l854 17A8                                      l678 4AA6  
                                    l686 4A90                                      l599 0544  
                                    l871 17E8                                      l863 17C8  
                                    l679 4A5A                                      l776 5542  
                                    l880 180C                                      l872 17EC  
                                    l864 17CC                                      l856 17AC  
                                    l928 3CA6                                      l881 1810  
                                    l873 17F0                                      l865 17D0  
                                    l857 17B0                                      l929 3C7E  
                                    l890 1834                                      l882 1814  
                                    l874 17F4                                      l866 17D4  
                                    l858 17B4                                      l891 1838  
                                    l883 1818                                      l875 17F8  
                                    l867 17D8                                      l859 17B8  
                                    l892 183C                                      l884 181C  
                                    l876 17FC                                      l868 17DC  
                                    l893 1840                                      l885 1820  
                                    l877 1800                                      l869 17E0  
                                    l894 1844                                      l886 1824  
                                    l878 1804                                      l990 4A02  
                                    l895 1848                                      l887 1828  
                                    l879 1808                                      l983 4708  
                                    l976 4ADA                                      l896 184C  
                                    l888 182C                                      l992 4A0E  
                                    l984 46AE                                      l897 1850  
                                    l889 1830                                      l985 4706  
                                    l978 4AE6                                      l898 1854  
                                    l899 1858                                      l997 504E  
                                    l999 506E                                      _RA2 007C02  
                                    _RA3 007C03                                      _RD5 007C1D  
                                    _RD7 007C1F                                      _PR2 000FCB  
                                    _Spd 01EF                                      _exp 1A26  
                                    _log 2908                                      _mod 012E  
                                    _val 0150                                      _pow 2092  
                                    _top 004B                              ?_HMI_SetBar 0001  
                     ??_Event_TestButton 0079                             _Word_GetPair 5630  
                                    prod 000FF3                              ?_HMI_Render 0001  
                    MXK_SwitchTo@pModule 0067                                      tosl 000FFD  
                                    wreg 000FE8                       Console_MakeField@x 0070  
                     Console_MakeField@y 0071                               _TXSTA1bits 000FAD  
                           Console_Tab@c 006F                             Console_Tab@i 006E  
                    LCD_DrawField@pField 0072                             Console_Tab@t 006D  
                           ___flmul@aexp 007B                             ___flmul@bexp 0080  
                             i2_delay_us 53F0                     Port_Set@TypeRequired 0082  
                           ___flmul@sign 007A                             ___flmul@temp 0085  
                           ___flmul@prod 0081                        Console_FormFeed@x 0062  
                      Console_FormFeed@y 0063                      LCD_DrawField@pPoint 0074  
                         ?_LCD_DrawField 0072                    Port_SetPinType@Output 008A  
                        Port_SetPin@Type 0073                          Port_SetPin@pPin 0071  
                          ?_Byte_GetPair 0069                          __end_of_LED_Set 529E  
                __size_ofi2_Word_GetPair 0030                            i2_Port_SetPin 3E1E  
                           ___fltol@exp1 00A8                             _Word_SetPair 551E  
                                   l1000 5086                                     l1010 421A  
                                   l1004 4E70                            ?_Byte_GetZone 0060  
                                   l1005 4E96                                     l1200 4018  
                                   l1040 2EB8                                     l1201 4060  
                                   l1009 4226                                     l1041 2EBE  
                                   l1202 4074                                     l1042 2EC4  
                                   l1043 2ECA                                     l1204 4098  
                                   l1036 2FC6                                     l1044 2ED0  
                                   l1205 4084                                     l1045 2ED6  
                                   l1037 2EB2                                     l1062 2588  
                                   l1207 40A6                                     l1063 25B6  
                                   l1047 2F54                                     l3000 12FA  
                                   l1056 245C                                     l1153 2906  
                                   l1057 25D6                                     l1146 499A  
                                   l3010 1404                                     l3002 1322  
                                   l1082 3F22                                     l1058 2464  
                                   l2210 1FB4                                     l3011 13E6  
                                   l3003 13D0                                     l1059 2488  
                                   l2211 1FC2                                     l3020 14A4  
                                   l3004 1380                                     l3100 3680  
                                   l1084 3F2A                                     l3021 14CE  
                                   l3005 13A8                                     l3101 371A  
                                   l1077 3EF6                                     l2213 2000  
                                   l1158 55C4                                     l3022 14DA  
                                   l3110 3A5A                                     l2214 207E  
                                   l2206 1EF2                                     l3023 14DC  
                                   l3007 13CE                                     l3031 0934  
                                   l1079 3F02                                     l2215 2024  
                                   l3032 0930                                     l3112 3AA8  
                                   l2400 0050                                     l2216 203E  
                                   l2208 1F98                                     l2321 515C  
                                   l3017 143C                                     l3033 0944  
                                   l2401 0176                                     l2209 1FA6  
                                   l2322 513C                                     l2330 549A  
                                   l3050 0BE0                                     l3034 0962  
                                   l3106 3F9E                                     l3114 3AE2  
                                   l3130 2956                                     l2410 0284  
                                   l2402 00EC                                     l3019 1480  
                                   l3051 0BFE                                     l3027 08F4  
                                   l3115 3AD2                                     l3028 08F0  
                                   l3060 2DCE                                     l2420 0494  
                                   l3045 0B5A                                     l3029 0904  
                                   l2421 0444                                     l2413 02C2  
                                   l2405 0150                                     l1630 3798  
                                   l3038 0B22                                     l3070 2E68  
                                   l3062 2E18                                     l2334 100C  
                                   l2414 0316                                     l1631 37E8  
                                   l2327 548A                                     l3047 0B9E  
                                   l3039 0B04                                     l3071 2E9A  
                                   l3063 2E00                                     l3055 2D9A  
                                   l2431 0518                                     l2407 01A8  
                                   l1632 37D2                                     l3048 0BBC  
                                   l3136 391E                                     l3056 2DAA  
                                   l3128 292C                                     l2408 0206  
                                   l3137 3886                                     l3065 2E4A  
                                   l3057 2DC8                                     l2425 04EA  
                                   l2409 021E                                     l1730 54C0  
                                   l3066 2E3E                                     l3090 1B0C  
                                   l2418 02DE                                     l1627 3828  
                                   l3059 2DDA                                     l3091 1C88  
                                   l2427 04F8                                     l2419 04C0  
                                   l1724 5564                                     l1732 54E0  
                                   l1628 381E                                     l3092 1C52  
                                   l1629 37B0                                     l2373 51D6  
                                   l2429 0508                                     l1726 558C  
                                   l3086 1A46                                     l2374 51E6  
                                   l1735 5A5C                                     l3088 1A8E  
                                   l2480 2C62                                     l3097 3662  
                                   l3089 1AD6                                     l2481 2C14  
                                   l2473 2BFC                                     l2730 3BCE  
                                   l2722 3B3E                                     l3098 3650  
                                   l2482 2C28                                     l2474 2C0C  
                                   l1827 31A8                                     l2731 3BC2  
                                   l2483 2C8C                                     l2475 2C30  
                                   l1828 31C4                                     l2900 4FD6  
                                   l2660 453A                                     l2724 3BAA  
                                   l2396 4836                                     l2901 4FE0  
                                   l2661 454A                                     l2733 3BEA  
                                   l2725 3B9A                                     l2910 535C  
                                   l2911 5366                                     l2663 4568  
                                   l2487 2CD4                                     l2664 4560  
                                   l2488 2D2E                                     l1873 5628  
                                   l2489 2CDA                                     l2906 5344  
                                   l2930 21AC                                     l2843 45DA  
                                   l2907 533C                                     l2667 4588  
                                   l2931 2182                                     l2844 45CE  
                                   l2668 4592                                     l2692 352A  
                                   l2932 2256                                     l2669 45A0  
                                   l2941 0C8E                                     l2693 355E  
                                   l2950 0D52                                     l2942 0C8A  
                                   l2694 359C                                     l2926 20EC  
                                   l2847 460E                                     l2951 0D56  
                                   l2695 35DA                                     l2927 20D8  
                                   l2848 461C                                     l2944 0CEA  
                                   l2936 0C46                                     l2945 0CAE  
                                   l2937 0C42                                     l2929 210A  
                                   l2962 0E4C                                     l2954 0DC4  
                                   l2699 56B0                                     l2971 0EA0  
                                   l2955 0D8A                                     l2964 0E5C  
                                   l2948 0D66                                     l2949 0D44  
                                   l2958 0DAE                                     l2983 0F2C  
                                   l2967 0E80                                     l2959 0DB2  
                                   l2896 4FB6                                     l2984 0F34  
                                   l2976 0EC0                                     l2897 4FAE  
                                   l2993 1274                                     l2985 0F36  
                                   l2969 0E96                                     l2994 1270  
                                   l2979 0F06                                     ?_exp 00B7  
                                   l2997 12B4                                     ?_log 00AF  
                                   l2998 12B0                           ??_Console_Init 0060  
                                   _ADON 007E10                    Port_SetPinType@pInput 0086  
                                   ?_pow 00C2                           Travel@Test_ADC 00F5  
                                   STR_1 FFFC                                     STR_2 FF18  
                                   STR_4 FFA0                                     STR_5 FF3E  
                                   STR_7 FEF1                                     STR_8 FE94  
                                   STR_9 FF2B                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   _LATF 000F8E              __size_of_MXK_InitTestButton 0018  
                                   _LATG 000F8F                      __end_of_GetPortPORT 4524  
                                   _PIR1 000F9E                                     _PIR2 000FA1  
                                   _PIR3 000FA4                      __end_of_GetPortTRIS 4414  
                                   _SPI1 0161                                     _SPI2 016C  
                                   u9950 47C4                                     _TMR0 000FD6  
                                   u9970 480E                                     u9957 47BA  
                                   u9990 4C10                                     u9975 480A  
                                   _gISR 0108                       Event_DIPSwitch@Bar 007A  
                          ??_Byte_GetBit 0063                                     _Turn 481C  
                     SPI_MaxSpeed@pInput 006F                                     _flag 0136  
                          ?_Byte_SetByte 0060                            ?_Byte_SetPair 006B  
                        __end_of_SPI_DCS 5722                                     _main 1EAC  
                                   _mode 0148                          ??i2_Byte_SetBit 0005  
                          ?_Byte_SetQuad 006B                                     _itos 3BFC  
                                   _test 011C                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf1 000FE7                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                          ?_Byte_SetZone 0060                                     btemp 0051  
                                   _zero 01F9                                     exp@x 00B7  
                                   log@x 00AF                            ??_Byte_SetBit 0064  
                                   pow@x 00C2                                     pow@y 00C6  
                     __size_of_LCD_Reset 0050                                     prodh 000FF4  
                                   prodl 000FF3                                     start 14AA  
                     __size_of_LCD_Write 0020                            __CFG_IESO$OFF 000000  
                        ___fldiv@new_exp 0071                          ?_SPI_DisableISR 0060  
                    HMI_SetButton@pValue 0066                               _Cliff_Left 0158  
                          Console_Init@x 0062                            Console_Init@y 0063  
                         ?i2_Timer0_Stop 0001                        i2Byte_SetBit@pBit 0003  
                           ___param_bank 000000                          __end_of_Font5x7 FDE9  
                        __end_of_InitADC 5178                     Set_Rotation@rotation 0066  
                          ??_Init_Timer0 0060                   __size_of_HMI_SetButton 007A  
                 __size_of_HMI_SetNumber 0026                              ?_ISR_Enable 0001  
                                  ??_exp 00BB                                    ??_log 00B3  
                                  ??_pow 00CA             __size_of_Console_ClearCursor 0030  
                       __end_of_LCD_Fill 52E6                         __end_of_LCD_Init 3144  
                         ?_HMI_DIPSwitch 0001                            __CFG_PLLDIV$3 000000  
                       __end_of_LED_Init 4F42                             _BAUDCON1bits 000F7E  
                          ??_Button_Init 00A8                  GetPortProperties@pInput 0062  
                          ??_Button_Poll 007E                         __end_of_HMI_Init 2908  
                                  l14073 14CE                                    l15211 2B40  
                                  l14237 4DEC                                    l14245 4E22  
                                  ?_Turn 0061                                    l14239 4DFE  
                                  l12903 4A06                                    l14329 31A8  
                                  l14441 4992                                    l15173 52CA  
                                  l15253 2480                                    l14551 1C52  
                                  l14377 52E8                                    l14379 52FA  
                                  l15509 3108                                    l14477 5B10  
                                  l12789 3612                                    l15365 2C90  
                       __end_of_HMI_Poll 4D2C                                    l14649 4ED2  
                                  l12897 49FA                                    l15661 4ADE  
                                  l13949 4098                                    l14925 559A  
                                  l15655 4AD2                                    l13887 3C92  
                                  l14871 3EEE                                    l15683 28E4  
                                  l15499 3076                                    l14877 3EFA  
                                  l15945 0284                                    l15963 0316  
                                  l15891 0050                                    _I2C1T 01BA  
                                  _I2C2T 01B3                            ___fltol@sign1 00A7  
                        __end_of___fladd 0F52                                    ?_main 0001  
                        __end_of___fldiv 14F8                          __end_of___awdiv 45AA  
                        __end_of___flneg 56C2                                    _ADRES 000FC3  
                                  ?_itos 006C                                    STR_11 FEC8  
                                  STR_12 FFFC                                    STR_13 FF5F  
                                  STR_30 FFE7                                    STR_14 FE43  
                                  STR_23 FF88                                    STR_31 FF6F  
                                  STR_15 FE6D                                    STR_24 FF9D  
                                  STR_32 FFAC                                    STR_25 FFEF  
                                  STR_33 FFB7                                    STR_17 FF05  
                                  STR_26 FFFC                                    STR_34 FF7C  
                                  STR_18 FEDD                                    STR_42 FEB0  
                                  STR_35 FFFC                                    STR_27 FFF7  
                                  STR_28 FFCC                                    STR_44 FFC2  
                                  STR_36 FF4F                                    STR_45 FFDE  
                                  STR_29 FFD5                                    STR_37 FF94  
                        __end_of___flmul 0C14                          __end_of___flsub 5256  
                        __end_of___fltol 3BFC                          _Event_DIPSwitch 5824  
                        __end_of___lldiv 462E                                    u10110 4A3E  
                                  u10024 5000                                    u10120 4A42  
                                  u10200 4E8E                                    u10025 4FFC  
                                  u10034 5028                                    u11010 5348  
                                  u10035 5024                                    u10300 0D1A  
                                  u10054 4350                                    u10310 0D2A  
                                  u10055 434C                                    u10135 5AFA  
                                  u10064 4378                                    u10136 5AFC  
                                  u10320 0D2C                                    u10065 4374  
                                  u10170 5510                                    u11140 3FC6  
                                  u10510 0EBC                                    u10350 0D6E  
                                  u10190 4E6C                                    u10175 550C  
                                  u12040 4EEA                                    u12105 151A  
                                  u11090 2E54                                    u12115 152C  
                __size_of_HMI_LeftSwitch 0014                                    u12300 5480  
                                  u11148 3FCA                                    u12220 3F5C  
                        ___awdiv@divisor 0062                                    u12125 153E  
                                  u11190 3C92                                    u12230 3F64  
                                  u12135 1556                                    u11520 45DE  
                                  u11440 1438                                    u10560 0F12  
                                  u10480 0EA4                                    u11600 3A7A  
                                  u12145 1650                                    u10730 0B56  
                                  u12155 16A4                                    u10820 456C  
                                  u12165 16D2                                    u11470 148E  
                                  u10670 0950                                    u10910 3B5C  
                                  u13310 02D2                                    u12175 1700  
                                  u13080 4B2A                                    u11480 14B2  
                                  u10760 0BAC                                    u10680 0AC6  
                                  u11560 366E                                    u11608 3A7E  
                                  u12360 2164                                    u13240 00C0  
                                  u12530 52E2                                    u11810 5318  
                                  u10770 0BCA                                    u13250 0124  
                                  u10915 3B52                                    u11740 5460  
                                  u12508 34DE                                    u12620 25C4  
                                  u13260 01FE                                    u10685 0ABC  
                                  u10950 3BD4                                    u12448 3E0A  
                                  u11904 477A                                    u11680 4E22  
                                  u12560 2BDE                                    u13280 0242  
                                  u11905 4776                                    u11745 545C  
                                  u11770 320A                                    u12458 33D8  
                                  u13290 0270                                    u11755 3164  
                                  u12459 33EC                                    u10980 4FBA  
                                  u12740 2CC2                                    u12670 3776  
                                  u11790 579E                                    u12680 378A  
                                  u12760 2D38                                    u12690 37C4  
                                  u11890 49D8                                    u11970 1ADE  
                                  u11795 579A                                    u12860 3108  
                                  u11980 1AE0                                    u11885 49A8  
                                  u14618 56D0                                    u14619 56E4  
                                  u14780 203E                                    u14668 1F12  
                                  u14669 1F26                                    u14678 1F32  
                                  u14679 1F46                                    u14688 1F52  
                                  u14689 1F66                                    u14698 1F72  
                                  _INDEX 0040                                    u14699 1F86  
                        __end_of___lwdiv 4FEA                                    _MASKS FBF9  
                        __end_of___lwmod 5370                                    i2l430 3E36  
                                  i2l432 3E5C                                    i2l433 3E86  
                                  i2l427 3EAC                                    i2l732 4954  
                                  i2l733 494E                                    i2l832 53F2  
                                  i2l781 5740                          ___awdiv@counter 0064  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _PORTD 000F83  
                                  _PORTE 000F84                                    _PORTF 000F85  
                                  _PORTG 000F86                  __size_of_HMI_DownSwitch 0014  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _TRISF 000F97  
                                  _TRISG 000F98                                    _T_VAR 0132  
                       ??i2_Byte_GetPair 000D                                    _Drive 51C4  
                          ?_FunctReadADC 0060                         ??i2_Byte_GetZone 0006  
                     Port_TogglePin@pPin 0076                                    _X_Pos 0030  
                                  _Y_Pos 002E                           __CFG_FCMEN$OFF 000000  
                                  _PortA 02EE                                    _PortB 0195  
                                  _PortC 019F                                    _PortD 018B  
                                  _PortE 0181                                    _PortF 01A9  
                                  _PortG 0177                  __end_of_Port_SetPinType 278C  
                                  _Steps 0144                          _ADC_Initialised 0160  
                         ??_Byte_GetPair 006C                           ?i2_Port_SetPin 0010  
                            LED_Set@pLED 0075                           Travel@rev_Dist 032E  
                        __end_of_dpowers FBF9                           ??_Byte_GetZone 0065  
                                  _count 0126                                    _floor 3616  
                                  _ldexp 3A3A                           Button_Poll@Pin 0083  
                                  _frexp 3F6E                                    _errno 011A  
               __size_of_Set_Addr_Window 009A                      __end_of_Console_Tab 426C  
                       __end_of_MXK_Init 33C6                                    _stack 0200  
                   i2Byte_GetPair@pInput 000A                                    _putch 5AFE  
                                  _total 0140                                    main@r 01FE  
                       __end_of_SPI_Init 08C2                         __end_of_SPI_Send 4AC4  
                             _BumpSensor 015C                    __end_ofi2_MXK_Release 5BA8  
                                  pclath 000FFA                                    tablat 000FF5  
                        __end_of_reverse 4F96                       __size_of_MXK_Queue 000E  
                         ??_Byte_SetByte 0063                           ??_Byte_SetPair 006F  
                                  pow@yi 00D3                           ??_Byte_SetQuad 006F  
                                  plusw2 000FDB                           ??_Byte_SetZone 0066  
                                  status 000FD8                                    wtemp6 0052  
                        _Configure_GPIOs 4D8C                     i2MXK_Queue@pCallback 0001  
                            i2delay_us@u 0003                           _LCD_Word_Write 5988  
                            _Cliff_FLeft 015A                      __size_of_LED_Toggle 0040  
                    __size_of_HMI_GetBar 0006                            ?_HMI_UpSwitch 0001  
                            exp@exponent 00BF                               _Event_NULL 1404  
            __size_of_Port_CheckPairType 0060                              ldexp@newexp 00B3  
                            _Cliff_Right 0159                      __size_of_HMI_SetBar 000A  
                        __initialization 4142                      __size_of_HMI_Render 0036  
                             _Found_Flag 0034                              log@exponent 00B3  
                    __end_of_Byte_GetBit 57AC                            _Current_Dist1 014C  
                          _Current_Dist2 014A                             __end_of_Turn 4892  
                           __end_of_main 2092                             __end_of_itos 3CBA  
                   HMI_SetButton@reindex 0062                             SPI_Send9@dat 0156  
                    __end_of_Byte_SetBit 503C                     Travel@Dist_Travelled 0330  
                       __end_of_InitList FBCF              __size_of_Port_CheckQuadType 0050  
                       __end_of_Mode_Set 5AFE              __size_of_Port_CheckPortType 0040  
                                 ??_Turn 0067                              HMI_Render@a 0068  
                                 ??_main 00FD                                   ??_itos 0070  
                    __end_of_Init_Timer0 5A04                 __size_of_FunctInitButton 0076  
                _Console_MakeField$10974 006E                            __activetblptr 000003  
                      Port_SetPin@pInput 006F                        __end_of_LCD_Reset 50DC  
                      Port_SetPin@pValue 0072                                ??_LED_Set 0075  
                      _MXK_InitDIPSwitch 5A04                           ??_FunctReadADC 0062  
                      GetPortPORT@pInput 0062                   Port_CheckPairType@Pin1 008A  
                 Port_CheckPairType@Pin2 008B                        __end_of_LCD_Write 58D4  
                            _GetPortPORT 449C                             ?i2_MXK_Queue 0001  
                            _GetPortTRIS 438C                          ??_LCD_DrawField 007C  
                                 ?_Drive 0061               __end_of_PortProperty_Valid 4C66  
                       __end_of_Port_Set 17A2                              ?i2_delay_us 0001  
       __size_of_Console_IncrementCursor 0054                          Travel@direction 00F1  
                    __end_of_Button_Init 3E1E                      __end_of_Button_Poll 34F4  
                      Word_GetPair@pPair 006E                  LCD_FillRectangle@pPoint 006B  
                     ?_MXK_InitDIPSwitch 0001                            _HMI_SetButton 4728  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                           ??_ADCAverage 00D7                                ??_SPI_DCS 0062  
                                 ?_floor 00A9                                   ?_ldexp 00AF  
                                 ?_frexp 0060                               _Low_Sensor 01ED  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                          _HMI_SetNumber 584A                   Port_SetQuadType@Output 009A  
                                 _ANCON0 000FC1                         ___awdiv@dividend 0060  
                                 ?_putch 0001                         ??_Console_Render 0083  
                          ToSegment@pCHR 0060                                   _GODONE 007E11  
                       _Console_FormFeed 49EC                   Port_SetQuadType@pInput 0096  
                                 i2l1630 39A0                                   i2l1631 39EC  
                                 i2l1632 39D8                                   i2l1730 55D8  
                                 i2l1627 3A28                                   i2l1732 55F8  
                                 i2l1628 3A1E                                   i2l1629 39B6  
                                 i2l1590 145E                           __CFG_WDTEN$OFF 000000  
                    __size_of_ISR_Enable 000A                                   i2l9923 53F2  
                                 i2l9925 5402                                   _RCREG1 000FAF  
                                 _RCSTA1 000FAC                   __end_of_LCD_Word_Write 59A2  
                         _Timer0_Restart 5B44                                   _SPBRG1 000FB0  
                    ??_MXK_InitDIPSwitch 009B                        _Current_Direction 01F3  
                                 _TRISA2 007C92                                   _TRISA3 007C93  
                                 _TRISD5 007CAD                                   _TRISD7 007CAF  
                                 _TXREG1 000FAE                         __end_of___xxtofl 2EAC  
                              ??_InitADC 0060                           i2_MXK_SwitchTo 55C6  
                                 _TXSTA1 000FAD                          Byte_GetBit@pBit 0062  
                             _Reset_High 59D4                       Console_Render@temp 0085  
                         ??_HMI_UpSwitch 0066                           OutSeg@pSegment 0063  
                        ??i2_Timer0_Stop 0001                      Port_TogglePin@Value 0077  
                       __end_of_delay_ms 4E46                             LED_Init@pLED 008D  
                       __end_of_delay_us 532C                            ??_Timer2_Init 0071  
                          ??_Timer0_Stop 0060                               _Timer0_ISR 57FC  
               __size_of_Console_NewLine 007C                        Timer2_Init@DIVIDE 007A  
                         __CFG_XINST$OFF 000000                                   _OutSeg 497E  
               __size_of_HMI_InitButtons 0006                                   _Travel 0000  
                                 ___flge 34F4                               _Motor_Step 372C  
                __end_of_Event_DIPSwitch 584A                                ??___fladd 0093  
                                 ___wmul 57AC                          ??_HMI_DIPSwitch 0066  
                              ??___fldiv 0068                                ??___awdiv 0064  
                              ??___flneg 008B                           __CFG_STVREN$ON 000000  
                             _Robot_Init 5A34                                   _change 004E  
                              ??___flmul 0076                                   _lMotor 00FD  
                              ??___flsub 00A7                                ??___fltol 00A3  
                              ??___lldiv 0068                                   _lQueue 0029  
                             _TestButton 02E4                               _Robot_Stop 5894  
                              ??___lwdiv 0064                       __size_of_ToSegment 0284  
                              ??___lwmod 006B                 __end_of_Port_SetQuadType 1EAC  
               i2Byte_GetZone@pChunkSize 0005                             HMI_GRender@a 0152  
                   __end_of_Console_Init 4B2E                        GetPortTRIS@pInput 0062  
                     __size_of_Reset_Low 0018                                   clear_0 418A  
                                 clear_1 419C                                   clear_2 41A8  
                                 clear_3 41B4                                   clear_4 41C8  
                     __end_of_ADCAverage 1242                         ___awdiv@quotient 0066  
                             Port_Init@i 00A5                        __end_of_MXK_Queue 5B36  
             __end_ofHMI_SetButton@F7213 FC06                                   _printf 2BF0  
              __end_of_MXK_InitDIPSwitch 5A1C                                   main@up 01FC  
                         HMI_SetButton@v 0067                                   floor@i 00AD  
                                 floor@x 00A9                   HMI_SetSegments@pString 0061  
                            _Console_Tab 41D8                      LCD_Word_Write@value 0065  
                           __pdataCOMRAM 0047                       __size_of_Port_Init 0174  
                          ??_Port_GetPin 0063                 Port_CheckPortType@Output 0099  
                        ??i2_Port_SetPin 0014                             __mediumconst FB1C  
            __end_ofTimer2_Init@PRESCALE FC09                 Port_CheckPortType@pDrive 0098  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             ?_MXK_Dequeue 0001  
                         ?_HMI_SetButton 0001                 Port_CheckPortType@pInput 0096  
                          ??_Port_SetPin 0073                                ??_reverse 0064  
                  Console_MakeField@Fill 025A                         ?_Port_SetPinType 0086  
                                 putch@c 0074                           ?_HMI_SetNumber 0076  
                         i2_Word_GetPair 5722                  __end_of_Configure_GPIOs 4DEA  
                       ??_MXK_TestButton 0066                   __end_of_Timer0_Restart 5B50  
                          Set_Rotation@m 0065                             ?_MXK_Release 0001  
                             ___flge@ff1 0060                               ___flge@ff2 0064  
                        __CFG_FOSC$HSPLL 000000                   __end_ofi2_MXK_SwitchTo 55FC  
                           ___xxtofl@arg 006A                         __end_ofexp@coeff FE11  
                           i2delay_us@us 0001                             ___xxtofl@exp 0069  
                           ___xxtofl@val 0060                         __end_oflog@coeff FE35  
                        ?_LCD_Word_Write 0065                               __accesstop 0060  
                __end_of__initialization 41CE                               Travel@Dist 00F3  
                              ?_LCD_Fill 0069                                ?_LCD_Init 0001  
                           _Cliff_FRight 015B                            SPI_Init@pMode 0092  
                             ___flneg@f1 0087                              _Byte_GetBit 5780  
                              ?_LED_Init 0001                 __end_ofi2_Timer0_Restart 5B5C  
                             Travel@spd1 032A                               Travel@spd2 032C  
                              ?_HMI_Init 0001                        ??_Set_Addr_Window 0068  
                              ?_HMI_Poll 0001                             eval_poly@res 00AB  
                          ___rparam_used 000001                               ___fltol@f1 009F  
                            _Byte_SetBit 4FEA                            __end_of_MASKS FC02  
                         _PortA_Property FE41                              ?_Event_NULL 0001  
                              LCD_Fill@i 006B                                LCD_Fill@j 006C  
                              LCD_Init@i 0097                            __end_of_Drive 520E  
                  _Get_VirtualWall_State 5870                           __pcstackCOMRAM 0001  
                         _PortB_Property FE3F                      __size_ofi2_delay_us 0040  
                           __pidataBANK1 5932                              _Init_Timer0 59EC  
                    i2Byte_SetBit@pInput 0001                     __end_of_Byte_GetPair 5988  
                        Console_Render@x 008A                          Console_Render@y 008B  
                    i2Byte_SetBit@pValue 0004                            ?_Set_Rotation 0001  
                    Timer0_Init@PRESCALE FBCF                     __end_of_Byte_GetZone 481C  
                          __end_of_floor 372C                            __end_of_ldexp 3B1E  
                          __end_of_frexp 400C                      FunctReadADC@channel 0060  
                         _PortC_Property FE3D                            __end_of_putch 5B0C  
                              ?_MXK_Init 0001                      __end_of_Timer2_Init 328A  
                    __end_of_Timer0_Stop 5B90                                ?_SPI_Init 008D  
                              ?_SPI_Send 0060                              _Button_Init 3D6E  
                      Port_SetType@pType 009C                              _Button_Poll 33C6  
                   __end_of_Byte_SetByte 5B28                     __end_of_Byte_SetPair 58F4  
                         _HMI_LeftSwitch 5AC4                           _PortD_Property FE3B  
                   __end_of_Byte_SetQuad 5914                             ??_LED_Toggle 0078  
                           ??_HMI_GetBar 0060                     __end_of_Byte_SetZone 438C  
                         _HMI_DownSwitch 5A88                            SPI_Send@pData 0062  
                  __end_of_MXK_DIPSwitch 5A74                             ??_HMI_SetBar 0060  
                           ??_HMI_Render 0068                           _PortE_Property FE39  
               __size_of_HMI_SetSegments 009C                   __end_ofi2_Word_GetPair 5752  
                                ??_Drive 0065                           _PortF_Property FE37  
                Port_CheckQuadType@Pair1 0093                  Port_CheckQuadType@Pair2 0094  
               MXK_BlockSwitchTo@pModule 0067                                  ??_floor 00AD  
                                ??_ldexp 00B5                                  ??_frexp 0066  
                      ??_FunctInitButton 00A8                        _Console_Backspace 503C  
                        ?_Timer0_Restart 0001                                  ??_putch 0074  
               __size_of_HMI_RightSwitch 0014                      _Console_ClearCursor 5662  
                      __end_of_ToSegment 1A26                           _PortG_Property FE35  
                             __pbssBANK0 00FD                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                    __end_of_Port_GetPin 551E                  Port_CheckQuadType@pQuad 0091  
                        reverse@iterator 0065                       __size_of_eval_poly 0100  
                       ??_SPI_DisableISR 0062                          ?i2_MXK_SwitchTo 0001  
                     ?_Console_Backspace 0001                        __end_of_Reset_Low 59D4  
              __size_of_Event_TestButton 0034                  __size_of_Port_TogglePin 002E  
                             ??_LCD_Fill 006B                               ??_LCD_Init 0095  
                    __end_of_Port_SetPin 3D6E                   __end_of_PortA_Property FE43  
                              ?_Mode_Set 0001                       Byte_SetByte@pInput 0060  
                             ??_LED_Init 008D                       Byte_SetByte@pValue 0062  
                          ?_ISR_Function 0001                              ?_Reset_High 0001  
                             ??_HMI_Init 00A8                               ??_HMI_Poll 0084  
                          ?_Timer2_Clear 0001                  Port_CheckPairType@Props 008D  
                 __end_of_PortB_Property FE41                       __size_of_eusartRec 0008  
                      __end_of_Port_Init 2BF0                              ?_Timer0_ISR 0001  
                Port_CheckPairType@pPair 0088                       __end_of_LED_Toggle 53F0  
                     __end_of_HMI_GetBar 5B96                 LCD_FillRectangle@pColour 0069  
                   __end_of_FunctReadADC 54AA                      ??_Console_Backspace 0062  
                      Set_Addr_Window@xe 0066                        Set_Addr_Window@ye 0067  
                      Set_Addr_Window@xs 0068                        Set_Addr_Window@ys 0065  
                                ?_OutSeg 0063                       Byte_SetPair@pInput 006B  
                                ?_Travel 00F1                              ?_Motor_Step 0001  
                     Byte_SetPair@pValue 006E                                  ?___flge 0060  
                     __end_of_HMI_SetBar 5B7A                   __end_of_PortC_Property FE3F  
                     Word_GetPair@pInput 006C                       __end_of_HMI_Render 55C6  
                         ??_Set_Rotation 0065                                ?_Port_Set 006F  
                                ?___wmul 0060                              ?_Robot_Init 0001  
                       ?_Event_DIPSwitch 0001                        Port_GetPin@Output 0065  
                           ??_ISR_Enable 0060                              ?_Robot_Stop 0001  
           __size_of_Console_ResetCursor 001C                     ?_Console_ClearCursor 0001  
                 __end_of_HMI_LeftSwitch 5AD8                   __end_of_PortD_Property FE3D  
                                _ADC_AN0 01D0                                  _ADC_AN1 01CB  
                                _ADC_AN2 01C6                                  _ADC_AN3 01C1  
                             ??_MXK_Init 00A6                        Port_GetPin@pInput 0060  
                      _Console_MakeField 3EC8                        ??_Console_NewLine 0060  
                 __end_of_HMI_DownSwitch 5A9C                               ??_SPI_Init 0093  
                 Event_TestButton@pState 0079                               ??_SPI_Send 0063  
                                ?_printf 0075                        ??_HMI_InitButtons 0060  
             __size_of_MXK_InitDIPSwitch 0018                   __end_of_PortE_Property FE3B  
                    Console_Render@F6956 01DD                       ?_Console_MakeField 0065  
                                _COUNTER 0038                          ??_HMI_SetButton 0060  
                   __end_of_HMI_UpSwitch 5AB0                                  _LED_Set 5256  
                _Console_IncrementCursor 4E46                                ?___xxtofl 0060  
                 __end_of_PortF_Property FE39                              _gBackcolour 0154  
                        ??_HMI_SetNumber 0078                                _I2C1_Done 0117  
                        ?i2_Word_GetPair 000D                                _I2C2_Done 0114  
                              _I2C1_More 0111                                _I2C2_More 010E  
                              ?_delay_ms 0060                __end_of_Console_Backspace 508C  
                              ?_delay_us 0060                      __size_of_Event_NULL 0002  
             __end_of_MXK_InitTestButton 5A34                                  _SSP1ADD 000FC8  
                                _SSP1BUF 000FC9                                  _SSP2BUF 000F6F  
                 __end_of_PortG_Property FE37                      ??_Console_MakeField 0067  
                                _SPI_DCS 56F2                     __size_ofi2_MXK_Queue 000E  
                       ?_Configure_GPIOs 0001                 ?_InitSerialCommunication 0001  
                     eusartSend@sendChar 0060                     i2Byte_GetZone@Offset 0008  
                     __end_of_ISR_Enable 5B70                           ??_ISR_Function 0017  
                   i2Byte_GetZone@Output 0009                        Event_TestButton@j 003C  
                             ??_Mode_Set 0060                           ??_Timer2_Clear 0060  
                                _Font5x7 FC09                     i2Byte_GetZone@pChunk 0004  
                                _InitADC 512C                     i2Byte_GetZone@pInput 0001  
                   SPI_DisableISR@pInput 0060                            ?_Port_GetQuad 0060  
                        Byte_SetBit@pBit 0062                     Port_TogglePin@pInput 0074  
                  __end_ofi2_Byte_SetBit 51C4                   ?_Get_VirtualWall_State 0061  
                                __Hparam 0000                        Port_GetQuad@pQuad 0062  
                            _Timer2_Init 3144                                  __Lparam 0000  
                            _Timer0_Stop 5B8A                    __size_of_Console_Init 006A  
                                OutSeg@a 0042          __end_ofPortProperty_Valid@F6830 FBEF  
                          LCD_Write@mode 0063                          __size_of_OutSeg 006E  
                            _Motor_Count 0146                               ??_Port_Set 0072  
                        __size_of_Travel 051E                          __size_of___flge 0122  
              __end_of_Console_MakeField 3F6E                        _Console_PrintChar 2EAC  
                                ___fladd 0C14                            ?_Port_SetType 009A  
                                _gCursor 0047                                  ___fldiv 1242  
                                ___awdiv 4524                                  ___flneg 5692  
                  ??_Console_ClearCursor 0060                                  ___flmul 08C2  
                                ___flsub 520E                                  ___fltol 3B1E  
                                _lBuffer 0336                                  ___lldiv 45AA  
                        __size_of___wmul 0028                                  ___lwdiv 4F96  
                                ___lwmod 532C                                  Turn@Dir 0065  
                                Turn@Rad 0069                          ?_HMI_LeftSwitch 0001  
               __end_of_Console_FormFeed 4A58                       ?_Console_PrintChar 0001  
                                __pcinit 4142                        __end_of_eval_poly 393A  
                        ?_HMI_DownSwitch 0001                                  __ramtop 1000  
                              _CCW_Count 0124                                  __ptext0 1EAC  
                                __ptext1 0000                                  __ptext2 2BF0  
                                __ptext3 5AFE                                  __ptext4 2EAC  
                                __ptext5 41D8                                  __ptext6 4E46  
                                __ptext7 46AC                                  __ptext8 49EC  
                                __ptext9 5950                               _eusartSend 5B0C  
                        __size_of_printf 0168                                  _average 013E  
                              _T0CONbits 000FD5                        i2MXK_SwitchTo@CUR 0007  
                                _countOn 01EB                                  _dpowers FBEF  
                              _T2CONbits 000FCA                            LED_Set@pValue 0074  
                           __size_of_exp 0274                             __size_of_log 0174  
                    __size_of_Reset_High 0018                    Event_DIPSwitch@pState 0079  
                           __size_of_pow 01D6                               ??___xxtofl 0064  
                           ?_GetPortPORT 0060                             ?_GetPortTRIS 0060  
                    ??_Console_PrintChar 0070                        __end_of_eusartRec 5B82  
                            _Port_GetPin 54E4                        __CFG_MSSPMSK$MSK5 000000  
                    LCD_DrawRectangle@p2 01D9                      LCD_DrawRectangle@p4 01D5  
                           ??i2_delay_us 0003                               ??_delay_ms 0062  
                             ??_delay_us 0062                                  _reverse 4F42  
                              _DIPSwitch 02DA                      __size_of_Timer0_ISR 0028  
                            _Port_SetPin 3CBA                  __size_of_UpdateDistance 0066  
                         LCD_DrawField@i 0082                                _LCD_Reset 508C  
                    __size_of_Motor_Step 010E                              _VictimCount 0134  
                              _LCD_Write 58B4                     __size_of_MXK_Dequeue 0030  
                             delay_ms@ms 0060                     end_of_initialization 41CE  
                    __size_of_Robot_Init 0016                                  exp@sign 00C1  
                             delay_us@us 0060                      __size_of_Robot_Stop 0020  
                      ??_HMI_SetSegments 0063                  Console_PrintChar@pInput 0073  
                           _Console_Init 4AC4                     __size_of_MXK_Release 0016  
             __end_of_Port_CheckPairType 4D8C                                  itos@Out 0074  
                         ??_Port_GetQuad 0063                       _PortProperty_Valid 4BFE  
                     Byte_SetQuad@pInput 006B                       SPI_MinSpeed@pInput 006F  
                     Byte_SetQuad@pValue 006E                    __size_of_Byte_GetPair 001C  
                              i2u1459_48 5810                          ___lldiv@divisor 0064  
                  __size_of_Byte_GetZone 007A                        ??_HMI_RightSwitch 0066  
                                pow@sign 00D2                          ___lldiv@counter 006C  
              __end_of_Console_PrintChar 2FFC                           ??_Port_SetType 009D  
             __end_of_Port_CheckQuadType 512C                                  printf@c 0082  
                                printf@f 0075                           Port_Init@pPort 00A2  
                                postdec1 000FE5                                  postdec2 000FDD  
                  __size_of_Byte_SetByte 000E                    __size_of_Byte_SetPair 0020  
                       _ADCAverage$15820 00E1                         _ADCAverage$15821 00E5  
                       _ADCAverage$15822 00E9                         _ADCAverage$15823 00ED  
                 Console_MakeField@Index 0069                         _ADCAverage$15818 00D9  
                       _ADCAverage$15819 00DD                                  postinc0 000FEE  
                                postinc2 000FDE                      ?_PortProperty_Valid 006F  
                  __size_of_Byte_SetQuad 0020               __end_of_Port_CheckPortType 53B0  
                  __size_of_Byte_SetZone 008E                       __end_ofi2_delay_us 5430  
                     Button_Init@pInitIO 009F                        ?_Port_SetQuadType 0096  
                            _gForecolour 01F5                ??_Console_IncrementCursor 0064  
                 __size_ofi2_MXK_Release 0006                                _PORTFbits 000F85  
                             _timercount 011E                       ??_Port_SetQuadType 009A  
                           ?_Console_Tab 0001                         Byte_GetZone@MASK 0066  
                            ___fladd@grs 009E                    Console_Render@lCursor 0086  
        __end_of_InitSerialCommunication 5932                                _MXK_Queue 5B28  
                       __CFG_CPUDIV$OSC1 000000                            ___xxtofl@sign 0068  
                       Byte_GetZone@pMax 0062               __size_of_Console_Backspace 0050  
                              _TRISCbits 000F94                              _Square_Dist 0130  
                        _Set_Addr_Window 40A8                           SPI_Init@pClock 008D  
                       ??_LCD_Word_Write 0067                              ___fldiv@grs 0073  
                            ___fldiv@rem 006D                    __end_of_LCD_DrawField 46AC  
                         Port_Set@pInput 006F                           SPI_Init@pInput 0093  
                   ??_PortProperty_Valid 0073                           Port_Set@pValue 0071  
                             ?_LCD_Reset 0001                     __end_of_Set_Rotation 42FE  
                             ?_LCD_Write 0063                             _Byte_GetPair 596C  
                     HMI_SetButton@F7213 FC02                             _Byte_GetZone 47A2  
                          ?_MXK_SwitchTo 0001                        LCD_DrawField@xmax 0080  
                      LCD_DrawField@ymax 0081                              Travel@error 0334  
Get_VirtualWall_State@Vitual_Wall_Sensor 0064                           _Port_TogglePin 5752  
                       _Event_TestButton 55FC                              ___flmul@grs 007C  
                  __size_of_FunctReadADC 003C                     Port_SetPinType@Props 008B  
                           ?_Byte_GetBit 0060                  __size_ofi2_Byte_GetPair 001A  
                           _Byte_SetByte 5B1A                             _Byte_SetPair 58D4  
                           _Byte_SetQuad 58F4                           _Previous_Angle 0138  
                __size_ofi2_Byte_GetZone 0076                             _Byte_SetZone 42FE  
                   Port_SetPinType@pType 0089                        ?i2_Timer0_Restart 0001  
                           ?_Byte_SetBit 0060                            ?_SPI_MaxSpeed 006F  
                      __size_of_LCD_Fill 0048                             ??_Event_NULL 0060  
                      __size_of_LCD_Init 0148                        __size_of_LED_Init 0054  
                          ?_SPI_MinSpeed 006F                    __end_ofi2_Timer0_Stop 5BA2  
                     ??i2_Timer0_Restart 0001                        __size_of_HMI_Init 017C  
                      __size_of_HMI_Poll 0060                            ?i2_Motor_Step 0001  
                           ?_Init_Timer0 0001               __size_of_Console_MakeField 00A6  
                         __end_of_OutSeg 49EC                           __end_of_Travel 051E  
                         __end_of___flge 3616                    __size_of_HMI_UpSwitch 0014  
                              _Close_Pos 0128                           __end_of___wmul 57D4  
                  __end_of_HMI_DIPSwitch 5A88                            __pidataCOMRAM 5B5C  
                           ?_Button_Init 009B                          _FunctInitButton 4892  
                           ?_Button_Poll 007B                              ?_eusartSend 0001  
                              _Bus_State 004D                      i2Byte_GetPair@pPair 000C  
                   __end_of_ISR_Function 14AA                        __size_of_MXK_Init 013C  
                              _BumpState 012C                              Turn@C_Angle 0067  
                             floor@expon 00B1                     __end_of_Timer2_Clear 5B8A  
                         __end_of_printf 2D58                        __size_of_SPI_Init 03A4  
                      __size_of_SPI_Send 006C                            ?_Word_GetPair 006C  
                       ??_Timer0_Restart 0060                       Port_SetType@Output 009F  
                    start_initialization 4142                               ?_MXK_Queue 0060  
                             eval_poly@d 00A3                               eval_poly@n 00A5  
                             eval_poly@x 009F                               ldexp@value 00AF  
                           _FunctReadADC 546E                 PortProperty_Valid@Errors 0075  
                       ??i2_MXK_SwitchTo 0007                        _LCD_FillRectangle 4E9A  
                     Port_SetType@pInput 009A                             _Current_Dist 014E  
                            __end_of_exp 1C9A                              __end_of_log 2A7C  
                            _ADC_Reading 012A                              __end_of_pow 2268  
                             HMI_Init@in 00A8                      HMI_SetNumber@pInput 0076  
                  __end_ofi2_Port_SetPin 3EC8                       __end_of_Event_NULL 1406  
                 __end_of_Port_TogglePin 5780                            ?_Word_SetPair 006F  
                      Byte_SetBit@pInput 0060                           ??_MXK_SwitchTo 0066  
                      Byte_SetBit@pValue 0063                       ?_LCD_FillRectangle 0069  
                    _Console_ResetCursor 5950              PortProperty_Valid@pPinDrive 0071  
                   MXK_BlockSwitchTo@CUR 0066                 PortProperty_Valid@pInput 006F  
                          i2_MXK_Release 5BA2                               frexp@value 0060  
                 LCD_FillRectangle@pSize 006F                           SPI_Send@pInput 0060  
                           ??_Reset_High 0074                 __size_of_Port_SetPinType 019E  
                         ??_SPI_MaxSpeed 0071                    Port_SetQuadType@pQuad 0098  
                              _ToSegment 17A2                      ??_LCD_FillRectangle 0073  
                  Port_SetQuadType@pType 0099                          _Console_NewLine 46AC  
                         ??_SPI_MinSpeed 0071                             _HMI_UpSwitch 5A9C  
                              _Reset_Low 59BC                             ??_Timer0_ISR 0017  
                        _HMI_InitButtons 5B96                        __size_of_Mode_Set 0012  
             __size_of_Console_PrintChar 0150                                _gCharSize 01E5  
                              _Pos_Stack 0300                         Timer2_Init@INDEX 003E  
                              OutSeg@cur 0044                           ??i2_Motor_Step 0015  
                               ??_OutSeg 0064                                OutSeg@out 0067  
                __size_of_Console_Render 01B8                             ??_Motor_Step 0074  
                               ??_Travel 00F9                                 ??___flge 0068  
                     Byte_SetZone@Offset 0069                             ??_Robot_Init 0067  
                               ??___wmul 0064                             ??_Robot_Stop 0061  
                   ?_Console_ResetCursor 0001                                _Port_Init 2A7C  
                            __pdataBANK1 01DD                        __size_of_Port_Set 02AA  
                     Byte_SetZone@pChunk 0063                         ??i2_Word_GetPair 0010  
                     Byte_SetZone@pInput 0060                       Byte_SetZone@pValue 0065  
                          Mode_Set@pMode 0060                                 ??_printf 007B  
                __end_of_Set_Addr_Window 4142                 Port_CheckQuadType@Output 0095  
                              _gLineSize 01E1                 Port_CheckQuadType@pDrive 0092  
                              ___fladd@a 008F                                ___fladd@b 008B  
                         ??_Word_GetPair 006F                 Port_CheckQuadType@pInput 008F  
                          _Desired_Level 002C                                Travel@Dir 0328  
                   __end_of_Port_GetQuad 546E                                ___fldiv@a 0064  
                              ___fldiv@b 0060                __end_of_LCD_FillRectangle 4EEE  
                            __pbssBIGRAM 0336                                Travel@Spd 00F7  
                               ?_LED_Set 0074                                ___flmul@a 0072  
                              ___flmul@b 006E                              __pbssCOMRAM 0029  
                              ___flsub@a 00A3                                ___flsub@b 009F  
                     __end_of_Reset_High 59EC                            __pcstackBANK0 0060  
                          __pcstackBANK1 01FA                            __pcstackBANK3 0328  
                         _UpdateDistance 4C66                               itos@Length 0072  
                         ??_Word_SetPair 0073                        __size_of___xxtofl 0154  
                     __end_of_Timer0_ISR 5824                     __size_of_GetPortPORT 0088  
                            ??_LCD_Reset 0079                     __size_of_GetPortTRIS 0088  
                   __end_of_Port_SetType 2436                                 ?_SPI_DCS 0060  
                        ?_Port_TogglePin 0074                              ??_LCD_Write 0064  
                      __size_of_delay_ms 005C                        __size_of_delay_us 0046  
                              Turn@Angle 0061                      __CFG_CCP2MX$DEFAULT 000000  
                     __end_of_Motor_Step 383A                    Timer2_Init@pFrequency 006D  
                         ?i2_MXK_Release 0001                                Turn@Speed 0063  
                     __end_of_Robot_Init 5A4A                       __end_of_Robot_Stop 58B4  
                              _exp$15826 00BB                  ??_Get_VirtualWall_State 0063  
                               ?_InitADC 0001                 Port_CheckPairType@Output 008C  
                    __size_of_eusartSend 000E                               ?_ToSegment 0001  
               Port_CheckPairType@pDrive 0089                 Port_CheckPairType@pInput 0086  
                         reverse@tempVar 0064                       _MXK_InitTestButton 5A1C  
                             ?_Reset_Low 0001                   __size_of_MXK_DIPSwitch 0014  
                           ?_Timer2_Init 006D                         ??_HMI_LeftSwitch 0066  
                           ?_Timer0_Stop 0001                         ___lwdiv@dividend 0060  
                          _lStepFunction 010B                  __size_of_MXK_TestButton 0014  
                      Byte_SetPair@pPair 006D                  __end_of_FunctInitButton 4908  
                       ??_HMI_DownSwitch 0066         __size_of_InitSerialCommunication 001E  
                              __pintcode 1408                            __pmediumconst FB1C  
                  ??_Console_ResetCursor 0060                                 ?___fladd 008B  
                               ?___fldiv 0060                                 ?___awdiv 0060  
                              __ptext100 532C                                __ptext101 4F96  
                              __ptext110 5B90                                __ptext102 400C  
                               ?___flneg 0087                                __ptext111 278C  
                              __ptext103 17A2                                __ptext120 3D6E  
                              __ptext112 4B96                                __ptext104 4728  
                              __ptext121 5A04                                __ptext113 051E  
                              __ptext105 53B0                                __ptext130 4D2C  
                              __ptext122 5B96                                __ptext114 3144  
                              __ptext106 5752                                __ptext131 4BFE  
                              __ptext123 5A1C                                __ptext115 45AA  
                              __ptext107 3CBA                                __ptext140 393A  
                              __ptext132 5630                                __ptext124 25EE  
                              __ptext116 5B82                                __ptext108 54E4  
                              __ptext141 5B9C                                __ptext133 596C  
                              __ptext125 4FEA                                __ptext117 57D4  
                              __ptext109 5B70                                __ptext150 5BA2  
                              __ptext142 5B50                                __ptext134 47A2  
                              __ptext126 1C9A                                __ptext118 56F2  
                              __ptext151 5B36                                __ptext143 3E1E  
                              __ptext135 58F4                                __ptext127 551E  
                              __ptext119 4892                                __ptext152 0000  
                              __ptext144 5722                                __ptext136 42FE  
                              __ptext128 58D4                                __ptext145 59A2  
                              __ptext137 4AC4                                __ptext129 50DC  
                              __ptext146 4908                                __ptext147 5178  
                              __ptext139 57FC                                __ptext148 55C6  
                              __ptext149 53F0                                _pShiftVal 0036  
                               ?___flmul 006E                                 ?___flsub 009F  
                               ?___fltol 009F                                 ?___lldiv 0060  
                             ?_Port_Init 00A0                                 ?___lwdiv 0060  
                               ?___lwmod 0067                      ?_MXK_InitTestButton 0001  
                      ?_Console_FormFeed 0001                        _GetPortProperties 4414  
                              _pow$15824 00CA                                _pow$15825 00CE  
            __end_ofTimer0_Init@PRESCALE FBDF                       ??_Console_FormFeed 0060  
                        _HMI_SetSegments 400C                       ?_GetPortProperties 0060  
                       Event_NULL@pState 0001                   __end_of_UpdateDistance 4CCC  
               __size_of_Event_DIPSwitch 0026                    __size_of_Set_Rotation 0092  
                          ??i2_MXK_Queue 0004                                _eval_poly 383A  
                            ??_MXK_Queue 0063                             ?_Port_GetPin 0060  
                         __size_of_Drive 004A                    __end_of_HMI_SetButton 47A2  
                   __size_of_Console_Tab 0094                                 ?_reverse 0060  
                           ?_Port_SetPin 006F                                _readIndex 0032  
                  __end_of_HMI_SetNumber 5870                         ___lwdiv@quotient 0065  
                        _HMI_RightSwitch 5AB0                           __size_of_floor 0116  
                         __size_of_ldexp 00E4                           __size_of_frexp 009E  
                    ??_GetPortProperties 0062                  __end_of_Console_NewLine 4728  
                              _eusartRec 5B7A                     ??_MXK_InitTestButton 008D  
                     Byte_GetPair@pInput 0069                           __size_of_putch 000E  
                __end_of_HMI_InitButtons 5B9C                        i2Port_SetPin@Type 0014  
                      i2Port_SetPin@pPin 0012                           i2_Byte_GetPair 59A2  
                               _LCD_Fill 529E                                 _LCD_Init 2FFC  
                         ___wmul@product 0064                                 _HMIBoard 02A0  
                         i2_Byte_GetZone 4908                                 _LED_Init 4EEE  
                              delay_ms@u 0062                       Button_Poll@pButton 007B  
                              delay_us@u 0062                                 _HMI_Init 278C  
                               _HMI_Poll 4CCC                       MXK_Queue@pCallback 0060  
                               _IPR1bits 000F9F                                 _IPR3bits 000FA5  
                               _PIE1bits 000F9D                                 _PIE3bits 000FA3  
            __end_of_Console_ClearCursor 5692                 __size_of_Configure_GPIOs 005E  
                   __size_of_Byte_GetBit 002C                        Byte_SetQuad@pQuad 006D  
                               _PIR1bits 000F9E                                 _PIR3bits 000FA4  
                               i2u622_40 492A                                 i2u622_47 4920  
                               i2u624_40 4972                                 i2u712_44 518C  
                               i2u712_45 5188                                 i2u624_45 496E  
                               i2u713_44 51B2                                 i2u713_45 51AE  
                               _CW_Count 0122                                 i2u716_40 541E  
                               i2u812_40 397E                                 i2u813_40 3992  
                               i2u814_40 39CA                     __size_of_Byte_SetBit 0052  
                               _RCONbits 000FD0                     i2Word_GetPair@pInput 000D  
                     _Sensor_Observe_Fin 0120                         __CFG_WDTPS$32768 000000  
                       HMI_SetBar@pValue 0060                        Button_Init@pInput 009B  
                __size_of_SPI_DisableISR 0028                                 _SSP1CON1 000FC6  
                      ??_Port_SetPinType 008A                                 _SSP1CON2 000FC5  
                               _SSP2CON1 000F6C                                 _SSP2CON2 000F6B  
                  __size_of_ISR_Function 00A2                                 _SSP1STAT 000FC7  
              __end_of_GetPortProperties 449C                                 _SSP2STAT 000F6D  
                           _Set_Rotation 426C                    __size_of_Timer2_Clear 0008  
                   __end_of_MXK_SwitchTo 54E4                       _Port_CheckPairType 4D2C  
                               _MXK_Init 328A                     __size_of_Init_Timer0 0018  
                        MXK_SwitchTo@CUR 0066                                 _SPI_Init 051E  
               __end_of_Event_TestButton 5630                                 _SPI_Send 4A58  
                             _ADCON0bits 000FC2                               _ADCON1bits 000FC1  
                       ?_Set_Addr_Window 0065                        ___wmul@multiplier 0060  
                      Byte_GetBit@Output 0064                               printf@flag 007C  
                   Timer2_Init@pCPUClock 0076               __size_of_LCD_FillRectangle 0054  
                   __size_of_Button_Init 00B0                          ?_UpdateDistance 0061  
                   __end_of_SPI_MaxSpeed 4B96                               printf@prec 007D  
                      Byte_GetBit@pInput 0060                      Port_SetPinType@pPin 0088  
                   __size_of_Button_Poll 012E                               ?_eval_poly 009F  
                     _Port_CheckQuadType 50DC                            _MXK_DIPSwitch 5A60  
                    ?_Port_CheckPairType 0086                                main@right 01FB  
                   __end_of_SPI_MinSpeed 4BFE                            ??_MXK_Dequeue 0076  
                       __size_of_LED_Set 0048                   __size_ofi2_Byte_SetBit 004C  
                     _Port_CheckPortType 5370                    Button_Poll@pIncrement 007D  
                PortProperty_Valid@F6830 FBDF                     __end_ofi2_Motor_Step 3A3A  
                        ??i2_MXK_Release 0001                               _ADCAverage 0F52  
                              copy_data0 4156                                copy_data1 4176  
                          ??_MXK_Release 0060                               ?_eusartRec 0001  
                 __end_ofi2_Byte_GetPair 59BC                __size_of_Port_SetQuadType 0212  
                       __size_of_SPI_DCS 0030                      ?_Port_CheckQuadType 008F  
                 __end_ofi2_Byte_GetZone 497E                      __end_ofi2_MXK_Queue 5B44  
                    ?_Port_CheckPortType 0096                          itos@destination 006E  
                               _InitList FB1D                     _Motor_Step$intlevel0 3732  
                               _Mode_Set 5AEC                       Port_GetQuad@Output 0065  
                            ??_ToSegment 0060                             _ISR_Function 1408  
                              frexp@eptr 0064                       Port_GetQuad@pInput 0060  
                           _Timer2_Clear 5B82                         __size_of_InitADC 004C  
                   __end_of_Word_GetPair 5662                                 _lCBuffer 0228  
                   ??_Port_CheckPairType 008A                              ??_Reset_Low 0074  
                               __Hrparam 0000                             OutSeg@pInput 0066  
                         _Console_Render 2436                                 __Lrparam 0000  
                        Timer2_Init@RDIV 0072                         ?_FunctInitButton 0001  
                         LCD_Write@value 0064                                 _Port_Set 14F8  
                           OutSeg@segset 0043                                rand@screw 0041  
                   __end_of_Word_SetPair 5558                              ??_Port_Init 00A3  
                __end_of_HMI_SetSegments 40A8                     ??_Port_CheckQuadType 0093  
                       __size_of___fladd 033E                         __size_of___fldiv 02B6  
                  __size_of_Port_GetQuad 003E                         __size_of___awdiv 0086  
                       __size_of___flneg 0030                         __size_of___flmul 0352  
                       __size_of___flsub 0048                         __size_of___fltol 00DE  
                       __size_of___lldiv 0084                        _MXK_BlockSwitchTo 5558  
                       __size_of___lwdiv 0054                     ??_Port_CheckPortType 0099  
                       __size_of___lwmod 0044                                 _lBufferX 0045  
                               _lBufferY 00FF                      Timer2_Init@PRESCALE FC06  
                           ??_eusartSend 0060                          LCD_Fill@pColour 0069  
                     ?_MXK_BlockSwitchTo 0001                __size_ofi2_Timer0_Restart 000C  
                               _lCurrent 003A                  __end_of_HMI_RightSwitch 5AC4  
                 Byte_GetZone@pChunkSize 0064                           ?_MXK_DIPSwitch 0001  
                 Byte_SetZone@pChunkSize 0064                    __size_of_Port_SetType 01CE  
                          reverse@length 0062                                itos@input 006C  
                  i2MXK_SwitchTo@pModule 0008                                 ___xxtofl 2D58  
                               _delay_ms 4DEA                                 _delay_us 52E6  
                               _clearall 0046                          ___lwdiv@divisor 0062  
                        ___lwdiv@counter 0064                          Port_GetPin@pPin 0062  
                               __ptext10 503C                                 __ptext11 5662  
                               __ptext20 5780                                 __ptext12 481C  
                               __ptext21 0F52                                 __ptext13 5870  
                               __ptext30 34F4                                 __ptext22 2092  
                               __ptext14 51C4                                 __ptext31 383A  
                               __ptext23 2908                                 __ptext15 2436  
                               __ptext40 546E                                 __ptext32 08C2  
                               __ptext24 1A26                                 __ptext16 4E9A  
                               __ptext41 5A34                                 __ptext33 520E  
                               __ptext25 3A3A                                 __ptext17 462E  
                               __ptext50 14F8                                 __ptext42 4C66  
                               __ptext34 0C14                                 __ptext26 3616  
                               __ptext18 57AC                                 __ptext51 5B1A  
                               __ptext43 5B7A                                 __ptext35 5692  
                               __ptext27 3F6E                                 __ptext19 3EC8  
                               __ptext60 5B44                                 __ptext52 438C  
                               __ptext44 5894                                 __ptext36 1242  
                               __ptext28 2D58                                 __ptext61 54AA  
                               __ptext53 4414                                 __ptext45 5B0C  
                               __ptext37 4524                                 __ptext29 3B1E  
                               __ptext70 5988                                 __ptext62 5A4A  
                               __ptext54 449C                                 __ptext46 328A  
                               __ptext38 5590                                 __ptext71 58B4  
                               __ptext63 5B28                                 __ptext55 4EEE  
                               __ptext47 2A7C                                 __ptext39 497E  
                    ??_MXK_BlockSwitchTo 0066                                 __ptext80 59EC  
                               __ptext72 4A58                                 __ptext64 5558  
                               __ptext56 5256                                 __ptext48 2268  
                               __ptext81 5914                                 __ptext73 5AEC  
                               __ptext65 52E6                                 __ptext57 56C2  
                               __ptext49 5370                                 __ptext90 5AB0  
                               __ptext82 512C                                 __ptext74 4D8C  
                               __ptext66 2FFC                                 __ptext58 372C  
                               __ptext91 5AC4                                 __ptext83 5B66  
                               __ptext75 4B2E                                 __ptext67 426C  
                               __ptext59 5B8A                                 __ptext92 5AD8  
                               __ptext84 4CCC                                 __ptext76 508C  
                               __ptext68 529E                                 __ptext93 5430  
                               __ptext85 33C6                                 __ptext77 4DEA  
                               __ptext69 40A8                                 __ptext94 5824  
                               __ptext86 5A60                                 __ptext78 59BC  
                               __ptext95 1404                                 __ptext87 5A74  
                               __ptext79 59D4                                 __ptext96 55FC  
                               __ptext88 5A88                                 __ptext97 584A  
                               __ptext89 5A9C                                 __ptext98 3BFC  
                               __ptext99 4F42                             _SSP1CON1bits 000FC6  
                       __size_of_reverse 0054                             _SSP1CON2bits 000FC5  
            __size_of_PortProperty_Valid 0068                       i2Byte_GetZone@MASK 0007  
                           _SSP2CON1bits 000F6C                             _SSP2CON2bits 000F6B  
                        ?i2_Byte_GetPair 000A                         ?_Console_NewLine 0001  
                      ??_Event_DIPSwitch 0079                          ?i2_Byte_GetZone 0001  
                               _countOff 01E9                       i2Byte_GetZone@pMax 0003  
                       ?_HMI_InitButtons 0001                      __end_of_MXK_Dequeue 56F2  
                      HMI_SetSegments@in 0064                    Button_Init@pThreshold 009D  
                          __size_of_Turn 0076                            __size_of_main 01E6  
                          __size_of_itos 00BE                        Byte_GetPair@pPair 006B  
                               _readings 0246                   __end_of_Console_Render 25EE  
                    i2Port_SetPin@pInput 0010                      i2Port_SetPin@pValue 0013  
                     __end_of_eusartSend 5B1A                             _Port_GetQuad 5430  
                    __end_of_MXK_Release 5A60                           _MXK_TestButton 5AD8  
                _InitSerialCommunication 5914                            i2_Byte_SetBit 5178  
                    i2Word_GetPair@pPair 000F                __end_of_MXK_BlockSwitchTo 5590  
               ?_Console_IncrementCursor 0001                     __size_of_Timer2_Init 0146  
                               int$flags 0051                     __size_of_Timer0_Stop 0006  
                           _Port_SetType 2268                             Port_Set@Type 0086  
             __size_of_GetPortProperties 0088                   __size_of_LCD_DrawField 007E  
                      ??_Configure_GPIOs 0095                                printf@val 0080  
                           _SSP1STATbits 000FC7                                 main@left 01FD  
                               main@down 01FA                           Timer0_Init@DIV 0104  
                         Timer0_Init@PRE 003F                             _SSP2STATbits 000F6D  
                               exp@coeff FDE9                               _LED_Toggle 53B0  
                               log@coeff FE11                               _HMI_GetBar 5B90  
                   Button_Init@pGetState 00A2                   PortProperty_Valid@Pair 0085  
                       ??_Port_TogglePin 0077                              _OSCTUNEbits 000F9B  
                             _INTCONbits 000FF2                   PortProperty_Valid@pPin 0072  
                            ??_eval_poly 00A7                               _HMI_SetBar 5B70  
                             _HMI_Render 5590                         Byte_SetZone@MASK 006A  
                            i2_MXK_Queue 5B36                           Timer2_Init@DIV 0100  
                         Timer2_Init@PRE 003D                         Byte_SetZone@pMax 0062  
                 __size_ofi2_Timer0_Stop 0006                     __size_of_Port_GetPin 003A  
                            ?_ADCAverage 0001                     Button_Init@pFunction 00A5  
                               itos@Data 0070                              ??_eusartRec 0060  
                     LCD_FillRectangle@i 0075                       LCD_FillRectangle@j 0076  
                   __size_of_Port_SetPin 00B4                                 intlevel2 0000  
                           reverse@input 0060                              _numReadings 01F1  
                 __size_of_HMI_DIPSwitch 0014                         ___lwmod@dividend 0067  
                       ___lldiv@dividend 0060                   __end_of_MXK_TestButton 5AEC  
         __size_of_Get_VirtualWall_State 0024                          ?_Console_Render 0001  
          __end_of_Get_VirtualWall_State 5894                  __size_of_LCD_Word_Write 001A  
                         ?i2_Byte_SetBit 0001                    __size_of_MXK_SwitchTo 003A  
                         _SPI_DisableISR 57D4                          Port_Init@pInput 00A0  
                               printf@ap 007E                              _thisReading 0142  
                 __size_ofi2_Port_SetPin 00AA                               _ISR_Enable 5B66  
                       ?_HMI_SetSegments 0061                  Console_MakeField@Column 006C  
                  __size_of_SPI_MaxSpeed 0068                            SPI_DCS@pInput 0060  
                  __size_of_SPI_MinSpeed 0068                          ??_MXK_DIPSwitch 0066  
                  __size_ofi2_Motor_Step 0100                  Console_MakeField@pInput 006B  
                       ?_HMI_RightSwitch 0001                         ___lldiv@quotient 0068  
                          ??_GetPortPORT 0062                          ___lwmod@divisor 0069  
                          ??_GetPortTRIS 0062                       Word_SetPair@pInput 006F  
                        ___lwmod@counter 006B                       Word_SetPair@pValue 0072  
                            _MXK_Dequeue 56C2                           LED_Toggle@pLED 0078  
                          ___fladd@signs 009B                            _LCD_DrawField 462E  
                       _Port_SetQuadType 1C9A                              _MXK_Release 5A4A  
              __size_of_Console_FormFeed 006C                             _MXK_SwitchTo 54AA  
                  __size_of_Word_GetPair 0032                       Byte_GetZone@Offset 0067  
                          ?_Console_Init 0001                        Word_SetPair@pPair 0071  
                        _Port_SetPinType 25EE                             ___fladd@aexp 009C  
                           ___fladd@bexp 009D                  __size_of_Timer0_Restart 000C  
                     Byte_GetZone@Output 0068                ??_InitSerialCommunication 0060  
                     Byte_GetZone@pChunk 0063                          ?_MXK_TestButton 0001  
            __end_of_Console_ResetCursor 596C                       Byte_GetZone@pInput 0060  
                __size_ofi2_MXK_SwitchTo 0036          __end_of_Console_IncrementCursor 4E9A  
                  __size_of_Word_SetPair 003A                   __end_of_SPI_DisableISR 57FC  
                           _SPI_MaxSpeed 4B2E                             _SPI_MinSpeed 4B96  
                     Port_Set@TypeActual 0084                              Drive@SpeedL 0061  
                            Drive@SpeedR 0063  
